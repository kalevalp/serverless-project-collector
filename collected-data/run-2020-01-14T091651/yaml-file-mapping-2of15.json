[{"id":148265323,"files":["# Name of your Serverless service\nservice: serverless-dynamodb-rest-poc\n\n# Serverless framework (You can leaves this alone)\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\n#app: my-serverless-app # App name used to publish your service to the serverless platform\n#tenant: user # User used to publish your service to the serverless platform\n\n# Serverless plugins\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\n# Custom variables (Used by plugins and in this doc)\ncustom:\n\n  # DynamoDB Local Settings\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n    stages:\n      - dev\n\n  # Serverless Offline Settings\n  serverless-offline:\n    port: 3000\n    prefix: ${self:provider.environment.REST_PATH_PREFIX} # Adds a prefix to every path, to send your requests to http://localhost:3000/[prefix]/[your_path] instead\n#    httpsProtocol: \"resources/dev-certs\" # To enable HTTPS, specify directory (relative to your cwd, typically your project dir) for both cert.pem and key.pem files.\n\n# Serverless provider settings\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    REST_PATH_PREFIX: v1\n    TODOS_TABLE: todo-${opt:stage, self:provider.stage}\n  iamRoleStatements: ${file(resources/iam-role-stmt-resources.yml)}\n\n# Serverless functions\nfunctions: ${file(resources/root-functions.yml)}\n\n# Serverless resources (See resources/dynamodb-tables.yml)\nresources:\n  - ${file(resources/dynamodb-tables.yml)}\n"]},{"id":148753822,"files":["service:\n  name: order-apis\n\nplugins:\n- serverless-pseudo-parameters\n- serverless-iam-roles-per-function\n\ncustom:\n  region: ${opt:region, self:provider.region}\n  stage: ${opt:stage}\n  prefix: ${self:service}-${self:custom.stage}\n  dynamodb_table: ${self:custom.prefix}-order\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  timeout: 30\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - dynamodb:Query\n    - dynamodb:Scan\n    - dynamodb:GetItem\n    - dynamodb:PutItem\n    - dynamodb:UpdateItem\n    - dynamodb:DeleteItem\n    - dynamodb:DescribeTable\n    Resource: ${self:custom.dynamodb_arn}\n  environment:\n    DYNAMO_TABLE: ${self:custom.dynamodb_table}\n\npackage:\n  exclude:\n  - .idea/**\n  - .git/**\n  - tmp/**\n\nfunctions:\n\n  create-order:\n    handler: functions/create-order/handler.handle\n    description: Create new order\n    events:\n    - http:\n        path: orders\n        method: post\n\n  get-orders:\n    handler: functions/get-orders/handler.handle\n    description: Get orders\n    events:\n    - http:\n        path: orders\n        method: get\n\n  ship-logs-to-elk:\n    handler: functions/ship-logs-to-elk/handler.handle\n    description: Sends CloudWatch logs from Kinesis to ELK\n    events:\n    - stream:\n        type: kinesis\n        arn:\n          Fn::GetAtt:\n          - KinesisLogsStream\n          - Arn\n    environment:\n      logstash_host: listener.logz.io #<INSERT VALUE HERE>\n      logstash_port: 5050 #<INSERT VALUE HERE>\n      token: <INSERT VALUE HERE>\n\nresources:\n  Resources:\n    Order:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamodb_table}\n        AttributeDefinitions:\n        - AttributeName: orderId\n          AttributeType: S\n        KeySchema:\n        - AttributeName: orderId\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    KinesisLogsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.prefix}-logs\n        ShardCount: 1\n    CWLtoKinesisRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:custom.prefix}-CWLtoKinesisRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Principal:\n              Service: logs.${self:custom.region}.amazonaws.com\n            Action: sts:AssumeRole\n    PermissionsPolicyForCWL:\n      Type: AWS::IAM::Policy\n      DependsOn:\n      - CWLtoKinesisRole\n      - KinesisLogsStream\n      Properties:\n        PolicyName: ${self:custom.prefix}-PermissionsPolicyForCWL\n        Roles:\n        - Ref: CWLtoKinesisRole\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Action: kinesis:PutRecord\n            Resource:\n              Fn::GetAtt:\n              - KinesisLogsStream\n              - Arn\n          - Effect: Allow\n            Action: iam:PassRole\n            Resource:\n              Fn::GetAtt:\n              - CWLtoKinesisRole\n              - Arn\n    CWLtoKinesisSubscription:\n      Type: AWS::Logs::SubscriptionFilter\n      DependsOn:\n      - CWLtoKinesisRole\n      - PermissionsPolicyForCWL\n      - KinesisLogsStream\n      Properties:\n        DestinationArn:\n          Fn::GetAtt:\n          - KinesisLogsStream\n          - Arn\n        RoleArn:\n          Fn::GetAtt:\n          - CWLtoKinesisRole\n          - Arn\n        FilterPattern: \"\"\n        LogGroupName: /aws/lambda/${self:custom.prefix}-create-order"]},{"id":139757792,"files":["service: github-webhooks\n\nplugins:\n  - serverless-offline\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: eu-central-1\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${self:custom.secrets.GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_KEY: ${self:custom.secrets.GITHUB_API_KEY}\n\nfunctions:\n  fixupValidator:\n    handler: handler.fixupCommits\n    events:\n      - http:\n          path: github-fixups\n          method: post\n          cors: true\n  pythonRequirementsValidator:\n    handler: handler.pythonRequirements\n    events:\n      - http:\n          path: github-python-requirements\n          method: post\n          cors: true\n"]},{"id":148513664,"files":["service:\n  name: order-apis\n\ncustom:\n  region: ${opt:region, self:provider.region}\n  stage: ${opt:stage}\n  prefix: ${self:service}\n  dynamodb_table: ${self:custom.prefix}-order\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region}\n  timeout: 30\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - dynamodb:Query\n    - dynamodb:Scan\n    - dynamodb:GetItem\n    - dynamodb:PutItem\n    - dynamodb:UpdateItem\n    - dynamodb:DeleteItem\n    - dynamodb:DescribeTable\n    Resource: ${self:custom.dynamodb_arn}\n  environment:\n    DYNAMO_TABLE: ${self:custom.dynamodb_table}\n\npackage:\n  exclude:\n  - load-testing/**\n  - .idea/**\n  - .git/**\n  - tmp/**\n\nfunctions:\n  create-order:\n    handler: src/createOrder.handle\n    name: ${self:custom.prefix}-create-order\n    events:\n    - http:\n        path: orders\n        method: post\n\nresources:\n  Resources:\n    Order:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamodb_table}\n        AttributeDefinitions:\n        - AttributeName: orderId\n          AttributeType: S\n        KeySchema:\n        - AttributeName: orderId\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":148014316,"files":["type: landing-page\n\ncomponents:\n  mapNetlifySite:\n    type: netlify-site\n    inputs:\n      netlifyApiToken: <Enter your Netlify Token here>\n      githubApiToken: <Enter your Github Token here>\n      siteName: my-awesome-site-lol-lol.netlify.com\n      siteDomain: testing-lol-lol-lol.com\n      siteRepo: https://github.com/simonghrt/city-viz-test\n      siteBuildCommand: cd front && npm install && npm run build\n      siteBuildDirectory: front/build\n      siteForceSSL: false\n      siteRepoBranch: master\n      siteRepoAllowedBranches:\n          - master\n","type: rest-api-app\n\ncomponents:\n\n    getCityCenter:\n        type: aws-lambda\n        inputs:\n            memory: 512\n            timeout: 10\n            handler: handler.getCityCenter\n\n    getCityArea:\n        type: aws-lambda\n        inputs:\n            memory: 512\n            timeout: 10\n            handler: handler.getCityArea\n\n    geoApi:\n        type: rest-api\n        inputs:\n            gateway: aws-apigateway\n            routes:\n                /city:\n                    /centre:\n                        post:\n                            function: ${getCityCenter}\n                            cors: true\n                    /area:\n                        post:\n                            function: ${getCityArea}\n                            cors: true\n"]},{"id":148193118,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nplugins:\n  - serverless-offline\n\nservice: teste # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello #Name the function\n    events:\n     - http:\n         path: helloWorld # endpoint eg.: user/creat\n         method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'heitor'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125660083,"files":["service: aws-rnative-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-3\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: handler.vk\n    cors: true\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":147110620,"files":["service: aws-nodejs # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  region: us-east-1\n  \n\n# you can add packaging information here\n#package:\ninclude:\n  - node_modules\nexclude:\n  - package-lock.json\n\nfunctions:\n  query:\n    handler: handler.exchangeData\n    environment: ${file(./env.yml)}\n    events:\n      - http:\n          path: webhook\n          method: post\nplugins:\n    - serverless-offline"]},{"id":146141815,"files":["service: magic-eightball\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  profile: serverless\n  region: us-east-1\n  environment:\n    SLACK_TOKEN: ${ssm:slackToken}\n    TWILIO_TOKEN: ${ssm:twilioToken}\n\nfunctions:\n  app:\n    handler: server.handler\n    events:\n      - http: ANY /\n      - http: \"ANY {proxy+}\"\n"]},{"id":84799180,"files":["service: event-guru-backend\n\napp: ${env:SLS_APP, self:custom.stageVars.SLS_APP}\ntenant: ${env:SLS_TENANT, self:custom.stageVars.SLS_TENANT}\n\npackage:\n  individually: true\n  exclude:\n    - test\n    - docs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 512\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.basicVars.EVENT_GURU_EVENTS_CACHE_TABLE}'\n\ncustom:\n  basicVars: ${file(./src/config/config.json)}\n  stageVars: ${file(./src/config/config-${self:provider.stage}.json)}\n\nplugins:\n  - serverless-webpack\n\nresources:\n  Resources:\n    EventGuruEventsCacheTable:\n          Type: 'AWS::DynamoDB::Table'\n          DeletionPolicy: Retain\n          Properties:\n            AttributeDefinitions:\n              -\n                AttributeName: location\n                AttributeType: S\n            KeySchema:\n              -\n                AttributeName: location\n                KeyType: HASH\n            ProvisionedThroughput:\n              ReadCapacityUnits: 5\n              WriteCapacityUnits: 5\n            TableName: ${self:custom.basicVars.EVENT_GURU_EVENTS_CACHE_TABLE}\n\n    EventGuruBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.basicVars.EVENT_GURU_BUCKET}\n        AccessControl: PublicReadWrite\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n              - GET\n            AllowedOrigins:\n              - http://ask-ifr-download.s3.amazonaws.com\n              - https://eventguru.io\n\n    EventGuruBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: EventGuruBucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: EventGuruBucket\n                    - '/*'\n\nfunctions:\n  # http rest interfaces\n  events-rest-api:\n    handler: src/lambda/events-rest-handler.getEvents\n    description: Event Guru - Get events REST API\n    environment:\n      SONGKICK_API_KEY: ${env:SONGKICK_API_KEY, self:custom.stageVars.SONGKICK_API_KEY}\n    events:\n      - http:\n          path: events\n          method: get\n          request:\n            parameters:\n              querystrings:\n                location: true\n                from: true\n                to: false\n\n  urls-rest-api:\n    handler: src/lambda/url-shorter-rest-handler.getUrl\n    description: Event Guru - Shorten URL REST API\n    environment:\n      BITLY_ACCESS_TOKEN: ${env:BITLY_ACCESS_TOKEN, self:custom.stageVars.BITLY_ACCESS_TOKEN}\n    events:\n      - http:\n          path: urls\n          method: get\n          request:\n            parameters:\n              querystrings:\n                url: true\n\n  artists-rest-api:\n      handler: src/lambda/artist-rest-handler.getArtist\n      description: Event Guru - Artist REST API\n      events:\n        - http:\n            path: artists\n            method: get\n            request:\n              parameters:\n                querystrings:\n                  name: true\n\n  # cron jobs\n  events-preload:\n    handler: src/lambda/events-preload-handler.run\n    description: Event Guru - CronJob Event Preloader\n    environment:\n      SONGKICK_API_KEY: ${env:SONGKICK_API_KEY, self:custom.stageVars.SONGKICK_API_KEY}\n    timeout: 600s\n    events:\n      - schedule: cron(1 0 * * ? *) # 00:01 every midnight\n"]},{"id":146800193,"files":["service: carbon-slackbot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  profile: serverless\n  region: us-east-1\n  environment:\n    BUCKET: \"carbon-slackbot-us-east-1-01\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action: sqs:sendMessage\n      Resource: \"arn:aws:sqs:us-east-1:676718483588:CarbonQueue\"\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:DeleteObject\n      Resource: \"arn:aws:s3:::carbon-slackbot-us-east-1-01/*\"\n\nfunctions:\n  slack:\n    handler: slack.handler\n    events:\n      - http:\n          path: slack\n          method: post\n  carbon:\n    handler: carbon.handler\n    events:\n      - sqs: arn:aws:sqs:us-east-1:676718483588:CarbonQueue\n"]},{"id":145923406,"files":["service: my-app\n\n\nprovider: \n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements: \n    - Effect: Allow\n      Action: \n        - dynamodb:PutItem\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:us-east-1:<series-of-numbers>:table/todos\"\n  \nfunctions:\n  kenVilarFunction:\n    handler: handler.run\n    events:\n      - http:\n          path: /\n          method: get\n  getTodo: \n    handler: get.run\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n  createTodo:\n    handler: create.run\n    events:\n      - http:\n          path: todos\n          method: post\n\nresources:\n  Resources:\n    TodosTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: todos\n        AttributeDefinitions:\n          - \n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - \n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":146326471,"files":["# NOTE: update this with your service name\nservice: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n\niamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:584247686798:*:*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam"]},{"id":139110354,"files":["service: watcode\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: watcode-208609\n  credentials: ~/.gcloud/watcode.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  artworks:\n    handler: artworks\n    events:\n      - http: path\n\n  comments:\n    handler: comments\n    events:\n      - http: path\n\n  bookmarks:\n    handler: bookmarks\n    events:\n      - http: path\n\n  recommendations:\n    handler: recommendations\n    events:\n      - http: path\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n"]},{"id":145584959,"files":["---\nservice: serverless-graphql-mongo\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket: ${self:service}-artefacts-${self:provider.region}\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    NODE_ENV: ${self:provider.stage}\n    MONGODB_URI: ${env:MONGODB_URI}\n\nfunctions:\n  graphql:\n    handler: src/server.default\n    memorySize: 256\n    events:\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: post\n          cors: true\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: get\n          cors: true\n\nplugins:\n  - serverless-plugin-create-deployment-bucket\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultRegion: 'eu-west-1'\n  webpack:\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":145526207,"files":["service: user-api\r\n\r\npackage:\r\n  exclude:\r\n    - '**'\r\n  include:\r\n    - deploy/handler.js\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs8.10\r\n  stage: ${opt:stage, 'dev'}\r\n  environment:\r\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\r\n    REGION: ${opt:region, self:provider.region}\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\r\n\r\nfunctions:\r\n  create:\r\n    handler: deploy/handler.userCreate\r\n    events:\r\n      - http:\r\n          path: user\r\n          method: post\r\n          cors: true\r\n  list:\r\n    handler: deploy/handler.userList\r\n    events:\r\n      - http:\r\n          path: user\r\n          method: get\r\n          cors: true\r\n  getById:\r\n    handler: deploy/handler.userGetById\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: get\r\n          cors: true\r\n  update:\r\n    handler: deploy/handler.userUpdate\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: put\r\n          cors: true\r\n  delete:\r\n    handler: deploy/handler.userDelete\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: delete\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    TodosDynamoDbTable:\r\n      Type: 'AWS::DynamoDB::Table'\r\n      DeletionPolicy: Retain\r\n      Properties:\r\n        AttributeDefinitions:\r\n          -\r\n            AttributeName: id\r\n            AttributeType: S\r\n        KeySchema:\r\n          -\r\n            AttributeName: id\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\r\n"]},{"id":143112045,"files":["service: joy\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-2\n  environment:\n    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-user\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  create:\n    handler: users/create.create\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n\n  get:\n    handler: users/get.get\n    events:\n      - http:\n          path: users/{id}\n          method: get\n          cors: true\n\n  search:\n    handler: users/search.search\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\n  update:\n    handler: users/update.update\n    events:\n      - http:\n          path: users/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: users/delete.delete\n    events:\n      - http:\n          path: users/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n"]},{"id":145223486,"files":["service: mailgun\napp: mailgun\ntenant: awitherow\n\nfunctions:\n  mail:\n    handler: handler.mail\n    events:\n      - http:\n          method: post\n          path: static-site-mailer\n          cors: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n"]},{"id":134701045,"files":["service: rimba-member-manager\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users\n    DONATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-donations\n    \nfunctions:\n  server:\n    handler: server\n    events:\n      - http:\n          path: /\n          method: get, post, put, delete, options\n          cors: true\n\nresources:\n  Resources:\n    DontationsTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DONATIONS_TABLE}\n        AttributeDefinitions:\n        -\n          AttributeName: id\n          AttributeType: N\n        KeySchema:\n        -\n          AttributeName: id\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":144733932,"files":["service: ignarjs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\nresources:\n  Resources:\n    IgnarJSTable:\n      Type: AWS::RDS::DBInstance\n      Properties:\n        DBName: ignar\n        AllocatedStorage: 5\n        DBInstanceClass: db.t2.micro\n        Engine: postgres\n        MasterUsername: root\n        MasterUserPassword: yuasfoj!(8467\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116723857,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\npackage:\n  individually: true"]},{"id":141055144,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ${self:custom.skillNamespace}Skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\n# package:\n#   exclude:\n#     - node_modules/**\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${self:custom.secrets.REGION}\n  profile: ${self:custom.secrets.PROFILE}\n  stage: ${opt:stage, self:custom.defaultStage}\n  memory: 128\n  timeout: 10\n\nplugins:\n  - serverless-alexa-skills\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  serverless-offline:\n    port: 4000\n  skillNamespace: cryptoPrice\n  defaultStage: dev\n  profiles:\n    dev: ${self:custom.skillNamespace}-profile-dev\n    prod: ${self:custom.skillNamespace}-profile-prod\n  alexa:\n    vendorId: ${self:custom.secrets.VENDOR_ID}\n    clientId: ${self:custom.secrets.CLIENT_ID}\n    clientSecret: ${self:custom.secrets.CLIENT_SECRET}\n    skills:\n      - id:\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: cryptoPrice\n          apis:\n            custom: {}\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: \n                intents:\n                  - name: AMAZON.FallbackIntent\n                    samples: []\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n                  - name: GetCryptoPriceIntent\n                    slots:\n                    - name: cryptocurrency\n                      type: AMAZON.SearchQuery\n                    samples:\n                      - 'what is the price of {cryptocurrency}'\n                      - 'what is the price for {cryptocurrency}'\n                      - 'whats the price of {cryptocurrency}'\n                      - 'whats the price for {cryptocurrency}'\n                      - 'get me the latest price of {cryptocurrency}'\n                      - 'get me the price of {cryptocurrency}'\n                      - '{cryptocurrency} price'\n                      - 'tell me the latest price of {cryptocurrency}'\n                      - 'tell me the price of {cryptocurrency}'\n                      - 'current price of {cryptocurrency}'\n                  - name: EmptyCryptoPriceIntent\n                    samples:\n                      - 'what is the price of'\n                      - 'what is the price for'\n                      - 'whats the price of'\n                      - 'whats the price for'\n                      - 'get me the latest price of'\n                      - 'get me the price of'\n                      - 'price'\n                      - 'tell me the latest price of'\n                      - 'tell me the price of'\n                      - 'current price of'\n\nfunctions:\n  skill:\n    handler: app.handler\n    role:\n      'Fn::GetAtt': [ lambdaRole, Arn ]\n    events:\n      - alexaSkill:\n          appId: ${self:custom.secrets.APP_ID}\n          enabled: true\n\nresources:\n  Resources:\n    lambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole\n        Path: \"/\"\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:provider.stage}-lambdaPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'logs:CreateLogGroup'\n                    - 'logs:CreateLogStream'\n                    - 'logs:PutLogEvents'\n                  Resource: arn:aws:logs:${self:provider.region}:*:*\n"]},{"id":112421082,"files":["service: jira-slack-webhook\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    WEBHOOK_URLS: ${env:WEBHOOK_URLS, file(.config.yml):webhookUrls}\n    WEBHOOK_TITLE: ${env:WEBHOOK_TITLE, file(.config.yml):webhookTitle}\n    WEBHOOK_MESSAGE: ${env:WEBHOOK_TITLE, file(.config.yml):webhookTitle, env:WEBHOOK_TITLE, file(.config.yml):webhookTitle}\n\nfunctions:\n  webhook:\n    handler: index.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n\n"]},{"id":142431288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bertolina-aws\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\nregion: us-east-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n# serverless deploy -v\n# serverless deploy function -f mercadoLibre\n# serverless invoke -f mercadoLibre -l\n# serverless logs -f mercadoLibre -t\nfunctions:\n  hello: # serverless invoke -f hello -l\n    handler: handler.hello\n  mercadoLibre:\n    handler: handler.mercadoLibre\n    events:\n      - http:\n          path: mercadolibre/{mercadolibre_id}\n          method: GET\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":141926580,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rest-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions: # add 4 functions for CRUD\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id} # path will be domain.name.com/dev/notes/1\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":140457003,"files":["service: graphql-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  profile: serverless\n  region: ${file(./serverless.env.yml):${self:provider.stage}.REGION}\n  environment: ${file(./serverless.env.yml):${self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sdb:GetAttributes\n      Resource:\n        Fn::Join:\n          - \":\"\n          -\n            - \"arn:aws:sdb\"\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - domain/${file(./serverless.env.yml):${self:provider.stage}.SDB_DOMAIN}\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${file(./serverless.env.yml):${self:provider.stage}.API_DOMAIN_NAME}\n    certificateName: ${file(./serverless.env.yml):${self:provider.stage}.AWS_CERT_NAME}\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nfunctions:\n  graphql:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: post\n          cors: true\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: spotify-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  profile: serverless\n  region: ${file(./serverless.env.yml):${opt:stage}.REGION}\n  environment: ${file(./serverless.env.yml):${opt:stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sdb:GetAttributes\n        - sdb:PutAttributes\n        - sdb:Select\n      Resource:\n        Fn::Join:\n          - \":\"\n          -\n            - \"arn:aws:sdb\"\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - domain/${file(./serverless.env.yml):${opt:stage}.SDB_DOMAIN}\n\nplugins:\n  - serverless-offline\n  - serverless-offline-scheduler\n\nfunctions:\n  refresh:\n    handler: handler.process\n    events:\n      - schedule: rate(30 minutes)\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","local:\n  REGION:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN:\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:\n\ntest:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN: test\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:\n\nprod:\n  REGION:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN:\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:","local:\n  REGION:\n  SDB_DOMAIN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n\ntest:\n  SDB_DOMAIN: test\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n\nprod:\n  REGION:\n  SDB_DOMAIN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:"]},{"id":141674057,"files":["\nservice: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev # setting the env stage to dev, this will be visible in the routes\n  region: us-east-1\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes \n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} \n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n      - http:\n          path: notes \n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          path: notes/{id} \n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          path: notes/{id} \n          method: delete\n          cors: true\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation"]},{"id":141559461,"files":["service: example-helper-module\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  index:\n    handler: index.handler\n","service: sls-plugin-with-iopipe-package-json\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 30\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  index:\n    handler: index.handler\nplugins:\n  - serverless-plugin-iopipe\ncustom:\n  iopipeNoVerify: true\n","service: examples\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 30\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  express:\n    handler: express.handler\n"]},{"id":133272127,"files":["service: ers-bot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 768\n  environment:\n    BABEL_CACHE_PATH: /tmp/babelregister\n    APP_ENV: AWS\n    SCRAPE_WAIT: 1000\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - node_modules/puppeteer/.local-chromium/** # exclude puppeteer chrome if exists\n  \nplugins:\n  - serverless-plugin-chrome\n\nfunctions:\n  api:\n    handler: build/aws.handler\n    timeout: 30\n"]},{"id":141023654,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\nservice: serverless-app-rest-api\n\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  tracing: true\n  iamRoleStatements:\n    - Effect: \"Allow\" # xray permissions (required) \n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n        - \"s3:*\"\n        - \"sqs:*\"\n        - \"rekognition:*\"\n        - \"dynamodb:*\"\n        - \"sagemaker:*\"\n        - \"states:*\"\n      Resource:\n        - \"*\"\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-step-functions\n  - serverless-pseudo-parameters\nfunctions:\n  useModel:\n    handler: handler.useModel\n    events: \n      - http: \n          path: sagemaker/validate\n          method: POST\n          cors: true\n  createIdentityValidation:\n    handler: handler.createIdentityRequest\n    events: \n      - http: \n          path: identity_validations\n          method: POST\n          cors: true\n  getIdentityValidations:\n    handler: handler.getIdentityValidations\n    events: \n      - http: \n          path: identity_validations\n          method: GET\n          cors: true\n  getIdentityValidation:\n    handler: handler.getIdentityValidation\n    events:\n      - http:\n          path: identity_validations/{id}\n          method: GET\n          cors: true\n  verify:\n    handler: handler.verifyIdentity\n    events:\n      - http:\n          path: verify\n          method: POST\n          cors: true\n  verifyIdentityV2:\n    handler: handler.verifyIdentityV2\n  getIdentityValidationStats:\n    handler: handler.getIdentityValidationStats\n    events:\n      - http:\n          path: identity_validations_stats/{customer_id}\n          method: GET\n          cors: true\n  uploadKTPImage: \n    handler: handler.uploadKTPImage\n  uploadPhotoImage: \n    handler: handler.uploadPhotoImage\n  compareKTPAndPhotoFace:\n    handler: handler.compareKTPAndPhotoFace\n  completeValidation:\n    handler: handler.completeValidation\n  samplequeue:\n    handler: handler.helloQueueMessage\n    events:\n      - sqs: arn:aws:sqs:us-west-2:YOUR_AWS_ACCOUNT_ID:sample-queue\n  sampledestinationqueue:\n    handler: handler.helloQueueMessage\n    events:\n      - sqs: arn:aws:sqs:us-west-2:YOUR_AWS_ACCOUNT_ID:sample-destination-queue\n  healthcheck:\n    handler: handler.helloWorld\n    tracing: false\n    events:\n      - http:\n          path: health-check\n          method: get\n          cors: true\n  detectNameFromKtpImages:\n    handler: handler.detectNameFromKtpImages\n  identityResult:\n    handler: handler.identityResult\n\n\nstepFunctions:\n  stateMachines: \n    verifyIdentityV3: \n      definition:\n        Comment: \"Start Identity Verification\"\n        StartAt: StartIdentityVerification\n        States:\n          StartIdentityVerification:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-verifyIdentityV2\n            ResultPath: $.results.StartIdentityVerification\n            Next: ProcessIdentityVerification\n          ProcessIdentityVerification:\n            Type: Parallel\n            Next: CompareKTPAndPhotoFace\n            Branches:\n            - StartAt: UploadKTPImageState\n              States:\n                UploadKTPImageState:\n                  Type: Task\n                  Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-uploadKTPImage\n                  ResultPath: $.results.UploadKTPImageState\n                  End: true\n            - StartAt: UploadPhotoImageState\n              States:\n                UploadPhotoImageState:\n                  Type: Task\n                  Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-uploadPhotoImage\n                  ResultPath: $.results.UploadPhotoImageState\n                  End: true\n          CompareKTPAndPhotoFace:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-compareKTPAndPhotoFace\n            Next: IdentityResult\n          IdentityResult:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-identityResult\n            End: true\n\n          # DetectNameFromKtpImages:\n          #   Type: Task\n          #   Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-detectNameFromKtpImages\n          #   End: true\n\n# The `resources` block defines what resource do you want\nresources:\n  Resources:\n    PictureBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: serverless-app-images\n    RequestIdentityvalidationQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: requets-identity-validation\n    SampleQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: sample-queue\n    SampleDestinationQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: sample-destination-queue\n    IdentityValidationsTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: IdentityValidationsTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: customer_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: customer_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":132625666,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: uptimegirl # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs6.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  cron: \n    handler: handlers.run\n    events:\n      - schedule: rate(1 minute)\n  \n  getReports:\n    handler: handlers.getReports\n    events:\n      - http:\n          path: reports\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    ReportsTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":99840819,"files":["\nservice: layer-message-responses\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  timeout: 25\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}\"\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n        - kinesis:GetRecords\n        - kinesis:GetShardIterator\n        - kinesis:DescribeStream\n        - kinesis:ListStreams\n      Resource: ${self:custom.kinesisArn}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  kinesisArn: ${file(./src/config.js):kinesisArn}\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-dynamodb-local\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    description: 'Webhook capture endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  ingest:\n    handler: src/handlers.ingest\n    description: \"Kinesis ingest\"\n    events:\n      - stream:\n          arn: ${self:custom.kinesisArn}\n          batchSize: 1 # NOTE: This should set to 1\n          startingPosition: TRIM_HORIZON\n          enabled: true\n  verify:\n    handler: src/handlers.verify\n    description: 'Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\nresources:\n  Resources:\n    messagesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: messageId\n            AttributeType: S\n          - AttributeName: responseToNodeId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: messageId\n            KeyType: HASH\n          - AttributeName: responseToNodeId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 10\n","\nservice: layer-message-responses\n\nprovider:\n  name: azure\n  location: West US\n  stage: dev\n  timeout: 10s\n  environment:\n    SERVICE_NAME: ${self:service}\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    description: 'Layer Message Responses Webhook endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n  verify:\n    handler: dist/bundle.verify\n    description: 'Layer Message Responses Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n"]},{"id":131824804,"files":["service: zip-downloadable\n\ncustom:\n  local: local\n  deployStage: ${opt:stage, self:custom.local}\n  config: ${file(src/config/${self:custom.deployStage}.js):default}\n  prune:\n    automatic: true\n    number: 3\n  cors:\n    origins:\n      - '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - X-RDC-Prosoft-Correlation-ID\n    allowCredentials: false\n  # logRetentionInDays: 3 # https://www.npmjs.com/package/serverless-plugin-log-retention\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${self:custom.config.awsRegion}\n  stage: ${self:custom.deployStage}\n  timeout: 60\n  memorySize: 192\n  vpc:\n    securityGroupIds:\n      - ${self:custom.config.vpcSecurityGroup}\n    subnetIds:\n      - ${self:custom.config.vpcSubnetA}\n      - ${self:custom.config.vpcSubnetB}\n#      - ${self:custom.config.vpcSubnetC}\n  environment:\n    NODE_ENV: ${self:custom.deployStage}\n    S3_BUCKET: ${self:custom.config.bucketName}\n  stackTags:\n    owner: Owner\n    component: Component\n    product: Product\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        - \"arn:aws:s3:::${self:custom.config.bucketName}/*\"\n        - \"arn:aws:s3:::${self:custom.config.bucketName}\"\n    - Effect: Allow\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricData\n      Resource: \"*\"\n\nplugins:\n  - serverless-plugin-log-retention\n  - serverless-prune-plugin\n\nfunctions:\n  download:\n    handler: src/handler.download\n    events:\n      - http:\n          path: /download\n          method: POST\n          cors: ${self:custom.cors}\n\nresources:\n  Resources:\n    ApiGatewayDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.config.acmCertArn}\n        DomainName: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}\n    BasePathMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      DependsOn:\n        - DNSRecord\n      Properties:\n        DomainName: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}\n        RestApiId: { Ref: ApiGatewayRestApi }\n        Stage: ${self:custom.deployStage}\n        BasePath: (none)\n    DNSRecord:\n      Type: AWS::Route53::RecordSet\n      Properties:\n        HostedZoneName: ${self:custom.config.domainNameZone}.\n        Name: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}.\n        Type: CNAME\n        TTL: \"60\"\n        ResourceRecords:\n          - Fn::Join: [ \"\", [\n            { Ref: ApiGatewayRestApi },\n            \".execute-api.${self:custom.config.awsRegion}.amazonaws.com\"\n          ]]"]},{"id":139735113,"files":["service: starbs\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: prod\n  environment:\n    BUCKET: 'i.cwlf.uk'\n    URL: 'https://i.cwlf.uk/'\n  iamRoleStatements:\n    -  Effect: 'Allow'\n       Action:\n         - 's3:ListBucket'\n       Resource: 'arn:aws:s3:::i.cwlf.uk'\n    -  Effect: 'Allow'\n       Action:\n         - 's3:PutObject'\n         - 's3:PutObjectAcl'\n         - 's3:GetObject'\n       Resource: 'arn:aws:s3:::i.cwlf.uk/*'\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\npackage:\n  exclude:\n    - package.json\n    - .gitignore\n    - .git/**\n    - package-lock.json\n    - serverless.yml\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\nfunctions:\n  yeh:\n    handler: handler.image\n    events:\n      - http:\n          path: /\n          method: post\n          contentHandling: CONVERT_TO_BINARY\n      ## this is a bad idea :)\n      #- http:\n      #    path: {proxy+}\n      #    method: get\n      #    contentHandling: CONVERT_TO_BINARY\n"]},{"id":139778831,"files":["service: express-serverless-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: v1\n  region: us-east-1\n  timeout: 30\n  memorySize: 512\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n\nfunctions:\n  app:\n    handler: handler.run\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":139610957,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: test-bool # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  test1:\n    handler: handlers/test1.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":139330536,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: kakao-bot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-2\n  usagePlan:\n      quota:\n        limit: 1000\n        offset: 0\n        period: MONTH\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: v0.0.0\n        title: Some API title\n        description: Some API description\n    models:\n      -\n        name: \"MessageRequest\"\n        contentType: \"application/json\"\n        schema:\n          required:\n            - user_key\n            - type\n            - content\n          properties:\n            user_key:\n              type: string\n            type:\n              type: string\n            content:\n              type: string\n      -\n        name: \"FriendRequest\"\n        contentType: \"application/json\"\n        schema:\n          required:\n            - user_key\n          properties:\n            user_key:\n              type: string\n\nfunctions:\n  chatbot:\n    handler: handler.handler\n    events:\n      - http:\n          path: keyboard\n          method: get\n      - http:\n          path: message\n          method: post\n          reqValidatorName: 'onlyBody'\n          request:\n            passThrough: NEVER\n          documentation:\n            requestModels:\n              \"application/json\": \"MessageRequest\"\n      - http:\n          path: friend\n          method: post\n          reqValidatorName: 'onlyBody'\n          request:\n            passThrough: NEVER\n          documentation:\n            requestModels:\n              \"application/json\": \"FriendRequest\"\n      - http:\n          path: friend/{user_key}\n          method: delete\n      - http:\n          path: chat_room/{user_key}\n          method: delete\n\nresources:\n  Resources:\n    onlyBody:\n      Type: AWS::ApiGateway::RequestValidator\n      Properties:\n        Name: 'only-body'\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        ValidateRequestBody: true\n        ValidateRequestParameters: false\n\nplugins:\n  - serverless-offline\n  - serverless-reqvalidator-plugin\n  - serverless-aws-documentation"]},{"id":139350566,"files":["service: my-mastadon\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  apiKeys:\n    - mastadon1\n  usagePlan:\n    quota:\n      limit: 2000\n      period: MONTH\n\n\nfunctions:\n  feed:\n    handler: handler.feed\n    description: Mastadon feed\n    events:\n      - http:\n          path: feed\n          method: get\n          cors: true\n          private: true\n"]},{"id":139124152,"files":["service: tapdef-backend\n\nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    after:aws:deploy:finalize:cleanup:\n      - scripts/setup.sh ${opt:stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: us-east-1\n\n  # environment:\n    # DYNAMO_DB_ENDPOINT: https://dynamodb.us-east-1.amazonaws.com\n    # EXAMPLE_TABLE: nopos-${opt:stage}-ExampleTable\n\n  # iamRoleStatements:\n    # TODO: write more fine-grained permissions\n    # - Effect: Allow\n    #   Action:\n    #     - dynamodb:*\n    #   Resource: { \"Fn::Join\" : [\"\",[\"arn:aws:dynamodb:\",{\"Ref\":\"AWS::Region\"},\":*:*\"]] }\n\nfunctions:\n\n  GetWikipediaIntro:\n    handler: lambdas/wikipedia/getIntro.main\n    environment:\n      STAGE: ${opt:stage}\n    events:\n      - http:\n          path: wiki/intro/{article}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                article: true\n"]},{"id":139065758,"files":["service: hashtagmania\n\ncustom:\n  snshashtagmaniabot: hashtagmaniabot\n  snsprocessfile: processfile\n  snsritekit: ritekit\n  configsavebucketname: savebucket\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n  timeout: 10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - \"logs:CreateLogGroup\"\n       - \"logs:CreateLogStream\"\n       - \"logs:PutLogEvents\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"lex:PostText\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"rekognition:DetectLabels\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"SNS:Publish\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsritekit}\" ] ]  }\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}/*\"\n\nfunctions:\n  mainhandler:\n    handler: handler.mainhandler\n    memorySize: 128\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     SNS_TOPIC_FILE: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\" ] ]  }\n    events:\n     - http:\n        path: telegram/sendmessage\n        method: post\n        integration: lambda\n        request:\n          template:\n            application/json: '{\"body\": $input.json(\"$\")}'\n  processfile: # Lambada function for text extraction using AMAZON Rekognition Service\n    handler: handler-processfile.main\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     API_FILE_GATEWAY_URL: https://api.telegram.org/file/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SAVE_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     SNS_RITEKIT: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsritekit}\" ] ]  }\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\n  ritekit: # Lambada function for tags information from RiteKite API\n    handler: handler-ritekit.main\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     API_RITEKIT_URL: https://api.ritekit.com/v1/stats/\n     RITEKIT_API: ${file(./serverless.env.yml):dev.RITEKIT_API}\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsritekit}\n"]},{"id":138812224,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n  # user:\n  #   handler: index.user\n  #   events:\n  #     - http:\n  #         path: /user\n  #         method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":137172982,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mowgli-sendgrid-api # NOTE: update this with your service name\n\nplugins:\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#environment:\n#   OWNER_EMAIL: alibh619@gmail.com # TODO : Update to actual owner email\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\""]},{"id":137783848,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs8-koa\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# The plugins need to be ordered as follows.\nplugins:\n  - serverless-webpack\n# Uncomment to add local dynamodb support\n#  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: 'yarn'   # Packager that will be used to package your external modules\n#  dynamodb:\n#    start:\n#      migrate: true\n#      seed: false\n  serverless-offline:\n    #httpsProtocol: \"dev-certs\"\n    #port: 4000\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: src/handler.server\n    events:\n      - http:\n          path: / # this matches the base path\n          method: ANY\n          cors: true\n      - http:\n          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# You can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    yourDynamoDbTable:\n#      Type: AWS::DynamoDB::Table\n#      Properties:\n#        TableName: YourDynamoDbTable\n#        AttributeDefinitions:\n#          - AttributeName: id\n#            AttributeType: S\n#        KeySchema:\n#          - AttributeName: id\n#            KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 5\n#          WriteCapacityUnits: 5\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":137249678,"files":["\n\nservice: hello\n\nprovider:\n  name: openwhisk\n  ignore_certs: true\n  runtime: nodejs:8\n  memory: 512 # Overwrite the default memory size. Default is 256\n\nfunctions:\n  hello:\n    name: ${self:service}-${opt:stage, 'dev'}\n    handler: src/index.handler\n    events:\n      - http: GET hello\n\nplugins:\n  - serverless-openwhisk\n  "]},{"id":104560333,"files":["service: dota-qualifier-streams\n\npackage:\n  include:\n    - serverless.yml\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v1\n  region: eu-central-1\n  apiKeys:\n    - ${self:provider.stage}-dev-key\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource: \"arn:aws:s3:::dota-qualifier-streams/data.json\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource: \"arn:aws:iot:eu-central-1:130448155460:topic/dota-qualifier-streams/data.json\"\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  fullUpdate: #Dev function to make a full update, requires an api key\n    handler: handler.fullUpdate\n    events:\n      - http:\n          path: full-update\n          method: post\n          cors: true\n          private: true\n  authorizer:\n    handler: authorizer.authorize\n  login:\n    handler: authorizer.login\n    requireRole:\n      - admin\n      - moderator\n    events:\n      - http:\n          path: login\n          method: get\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  updateStreams:\n    handler: handler.updateStreams\n    requireRole:\n      - admin\n      - moderator\n    events:\n      - http:\n          path: update-streams\n          method: post\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  getUsers:\n    handler: handler.getUsers\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  updateUser:\n    handler: handler.updateUser\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  deleteUser:\n    handler: handler.deleteUser\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: delete\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Credentials: \"'false'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n          gatewayresponse.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: dota-qualifier-streams-users\n        AttributeDefinitions:\n          - AttributeName: twitchUserId\n            AttributeType: N\n        KeySchema:\n          - AttributeName: twitchUserId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:eu-central-1:130448155460:table/${self:resources.Resources.DynamoDbTable.Properties.TableName}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":126149969,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: find-places-test\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getVenues:\n    handler: handler.getVenues\n    events:\n     - http:\n         path: venues\n         method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":134318939,"files":["# NOTE: update this with your service name\nservice: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n# 'iamRoleStatements' defines the permission policy for the Lambda function.\n# In this case Lambda functions are granted with permissions to access DynamoDB.\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  # domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in get.js\n  # - path: url path is /notes/{id} # - method: GET request\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in list.js\n  # - path: url path is /notes # - method: GET request\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authoriser: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in update.js\n  # - path: url path is /notes/{id}\n  # - method: PUT request\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in delete.js\n  # - path: url path is /notes/{id}\n  # - method: DELETE request\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":73402954,"files":["service: meta-scrape\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-admin\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n    description: A basic function for scraping a site's meta tags to populate preview components\n    memorySize: 128\n    timeout: 15\n    events:\n      - http:\n          path: scrape\n          method: get\n          cors: true"]},{"id":135595372,"files":["service: ${self:custom.naming.fullDashName}\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_REGION, 'us-east-1'}\n  memorySize: 128\n  timeout: 10\n  stage: ${self:custom.stage}\nplugins:\n- serverless-webpack\n- serverless-offline\n- serverless-domain-manager\ncustom:\n  # Naming Conventions\n  naming:\n    fullName: ServerlessTypescriptBoilerplate\n    fullDashName: serverless-ts-boilerplate\n    shortName: sls-boilerplate\n  # API Gateway Custom Domains\n  # customDomain:\n  #   domainName: ${env:API_DOMAIN}\n  #   stage: ${self:custom.stage}\n  #   basePath: ${env:API_BASEPATH, self:custom.stage}\n  #   certificateName: ${env:API_CERT_NAME}\n  #   createRoute53Record: ${env:API_CREATE_ROUTE53, 'true'}\n  #   endpointType: ${env:API_ENDPOINT_TYPE, 'edge'}\n  stage: ${env:API_STAGE, 'staging'}\n  webpackIncludeModules: true\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        # API Gateway Name\n        Name: ${env:API_NAME, self:custom.naming.fullName}\nfunctions:\n  helloHandler:\n    # Lambda Function Name\n    name: ${self:custom.naming.shortName}-hello\n    # Lambda Function Description\n    description: ${self:custom.naming.fullName} Hello Handler\n    # Lambda Handler\n    # handler: handlers/hello.default\n    handler: src/handlers/hello.helloHandler\n    # API Gateway Configuration\n    events:\n    - http:\n        path: service/hello\n        method: get\n    # Function-specific Environment Variables\n    # environment:\n    #   MyPerFunctionEnv: foo"]},{"id":135071747,"files":["service: email-verifier-serverless-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  timeout: 30\n\nfunctions:\n  verify:\n    handler: controller/email.handler\n    events:\n      - http: OPTIONS /verify\n      - http: POST /verify  \n\nplugins:\n  - serverless-offline\n"]},{"id":123408188,"files":["service: stockup\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:dynamodb:*:*:table/\"\n             - Ref: ProductsDynamoDbTable\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: products\n          method: post\n          cors: true\n  list:\n    handler: handler.list\n    events:\n      - http:\n          path: products\n          method: get\n          cors: true\n  view:\n    handler: handler.view\n    events:\n      - http:\n          path: products/{id}\n          method: get\n          cors: true\n  remove:\n    handler: handler.remove\n    events:\n      - http:\n          path: products/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: products\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":128520362,"files":["service: callingcode-restapi-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}  \n  region: ap-southeast-1\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  lookup:\n    handler: callingcode/lookup.lookup\n    events:\n      - http:\n         method: get\n         path: callingcode/lookup\n  list:\n    handler: callingcode/list.list\n    events:\n      - http:\n          method: get\n          path: callingcode\n  get:\n    handler: callingcode/get.get\n    events:\n      - http:\n          method: get\n          path: callingcode/{code}\n"]},{"id":107871337,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\ncustom:\n  webpackIncludeModules: true\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"codebuild:StartBuild\"\n        - \"codebuild:StopBuild\"\n      Resource:\n        - '*'\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - '*'\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  pull_request:\n    handler: src/pull_request.dispatch\n    environment:\n      GITHUB_TOKEN: ${file(./config/CONFIG.yml):Github.token}\n      GITHUB_REPO_OWNER: ${file(./config/CONFIG.yml):Github.repo_owner}\n      GITHUB_REPO_NAME: ${file(./config/CONFIG.yml):Github.repo_name}\n      GITHUB_TEST_LABEL: ${file(./config/CONFIG.yml):Github.test_label}\n      SLACK_WEBHOOK_URL: ${file(./config/CONFIG.yml):Slack.webhook_url}\n      CODEBUILD_PROJECT: ${file(./config/CONFIG.yml):CodeBuild.project}\n      CODEBUILD_BUILDSPEC: ${file(./config/CONFIG.yml):CodeBuild.buildspec}\n    events:\n      - sns: pull_request_dispatch\n\n  codebuild:\n    handler: src/codebuild.dispatch\n    environment:\n      GITHUB_TOKEN: ${file(./config/CONFIG.yml):Github.token}\n      GITHUB_REPO_OWNER: ${file(./config/CONFIG.yml):Github.repo_owner}\n      GITHUB_REPO_NAME: ${file(./config/CONFIG.yml):Github.repo_name}\n      SLACK_WEBHOOK_URL: ${file(./config/CONFIG.yml):Slack.webhook_url}\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - SUCCEEDED\n                - FAILED\n                - STOPPED\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":83727067,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: cronie\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  triggerBuild:\n    handler: handler.triggerBuild\n    events:\n      - schedule: cron(23 */6 * * ? *)\n    environment:\n      apiKey: ${file(secrets.yml):wercker}\n      applicationId: ${file(secrets.yml):applicationId}\n      username: ${file(secrets.yml):username}\n\n  fetchApplications:\n    handler: handler.fetchApplications\n    environment:\n      apiKey: ${file(secrets.yml):wercker}\n      applicationId: ${file(secrets.yml):applicationId}\n      username: ${file(secrets.yml):username}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":130275007,"files":["service:\n  name: alexa-template\n\nplugins:\n  - serverless-webpack\n  - serverless-sentry\n\ncustom:\n  sentry:\n    dsn: #sentry-dsn-url\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'local'}\n  runtime: nodejs6.10\n  profile: alexa-template-alexa-skill\n  region: us-east-1\n  environment: ${file(./env.yaml):${opt:stage, self:provider.stage}}\n\nfunctions:\n  alexa:\n    handler: src/alexa.handler\n    events:\n      - alexaSkill\n"]},{"id":132445487,"files":["service: personal-presence\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  bucket: 'where-is-alex-today'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    MOVES_AUTHORIZATION_TOKEN: ${env:MOVES_AUTHORIZATION_TOKEN}\n    MOVES_CLIENT_ID: ${env:MOVES_CLIENT_ID}\n    BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  refreshState:\n    handler: index.refreshState\n    events:\n      - schedule: rate(15 minutes)\n\nresources:\n  Resources:\n    PersonalPresenceBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: \"${self:custom.bucket}\"\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n\n    PersonalPresenceBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: PersonalPresenceBucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\n    PersonalPresenceCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.bucket}.s3.amazonaws.com\n              Id: PersonalPresence\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n          Enabled: 'true'\n          Aliases:\n            - whereisalex.today\n          DefaultRootObject: index.html\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            TargetOriginId: PersonalPresence\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ViewerProtocolPolicy: redirect-to-https\n          ViewerCertificate:\n            AcmCertificateArn: 'arn:aws:acm:us-east-1:240273936960:certificate/aa3f6c60-0966-40f1-93d3-03bc1308aa4f'\n            SslSupportMethod: 'sni-only'"]},{"id":131000549,"files":["service: dynamo-db\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  environment:\n    USER_TABLE: \"UserCrudDynamoDbTable\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}\"\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          method: post\n          path: lambda\n\n  listUser:\n      handler: handler.listUser\n      events:\n        - http:\n            method: get\n            path: lambda\n\n  updateUser:\n      handler: handler.updateUser\n      events:\n        - http:\n            method: put\n            path: lambda/{id}\n\n  deleteUser:\n      handler: handler.deleteUser\n      events:\n        - http:\n            method: delete\n            path: lambda/{id}\n\nresources:\n  Resources:\n    UserCrudDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n"]},{"id":131668174,"files":["service: gcf-nodejs # NOTE: Don't put the word \"google\" in here\n\ncustom: ${file(./env.js):env}\n\nprovider:\n  name: google\n  memorySize: 128\n  runtime: nodejs\n  project: ${self:custom.project}\n  credentials: ./keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  getBMI:\n    handler: getBMI\n    events:\n      - http: path"]},{"id":121991350,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get: \n    handler: get.main\n    events: \n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http: \n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete: \n    handler: delete.main\n    events: \n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":130152829,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: restapi # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\nfunctions:\n  get:\n    handler: speakers/getSpeaker.get\n    events:\n      - http:\n          path: speakers/{id}\n          method: get\n          cors: true\n  list:\n    handler: speakers/listSpeakers.list\n    events:\n      - http:\n          path: speakers\n          method: get\n          cors: true\n  update:\n    handler: speakers/updateSpeaker.update\n    events:\n      - http:\n          path: speakers/{id}\n          method: put\n          cors: true\n  add:\n    handler: speakers/addSpeaker.add\n    events:\n      - http:\n          path: speakers\n          method: post\n          cors: true\n  delete:\n    handler: speakers/deleteSpeaker.delete\n    events:\n      - http:\n          path: speakers/{id}\n          method: delete\n          cors: true"]},{"id":107854598,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-template\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":127139820,"files":["\n\nservice: ssm-param-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n   TOKEN: ${ssm:foo~true}\n   DB: ${ssm:/DevTest/MyApp/database/db_password~true}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":127924961,"files":["# Serverless definition file\n# --------------------------\n# Defines Lambda functions to be deployed to AWS using the Serverless Framework.\n# http://serverless.com\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# WebLedgerSvcs\n#\n# Implementation of The Web Ledger Protocol 1.0\n# A format and protocol for decentralized ledgers on the Web\n# https://w3c.github.io/web-ledger/\n#\n# Service\tExample URL\tDescription\n# ledgerAgentCreateService\tPOST /ledger-agents\tCreate a ledger agent.\n# ledgerAgentListService\tGET /ledger-agents\tGet all ledger agents.\n# ledgerAgentStatusService\tGET /ledger-agents/{agent}\tGet the current status of the ledger agent.\n# ledgerEventService\tPOST /ledger-agents/{agent}/events\tRequest the addition of an event to ledger.\n# ledgerBlockService\tGET /ledger-agents/{agent}/blocks\tGet a specific block from the ledger.\n# ledgerQueryService\tGET /ledger-agents/{agent}/query\tQuery the current state of the ledger.\n\nservice: WebLedgerService\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 45\n  environment: ${file(env.yml):${self:provider.stage}}\n  \n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n\n  hello:\n    handler: handler.hello\n    description: Say Hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: \n            origins:               \n              - '*'\n\n\n  # 4.2 Agent Create Service ledgerAgentCreateService Create a ledger agent.\n  ledgerAgentCreateService:\n    handler: webledgerHanders.ledgerAgentCreateService\n    description: Create a ledger agent.\n    tags: \n    events:\n      - http:\n          path:  /ledger-agents\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n          responses:\n            200:\n              description: \n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/ConfigurationBlock\"\n            201:\n              description: Ledger creation was successful. The HTTP Location header will contain the URL for the newly created ledger.  \n            400:\n              description: Ledger creation failed.\n              $ref: \"#/responses/400BadRequest\"\n            409:\n              description: A duplicate ledger exists.\n              $ref: \"#/responses/409DuplicateRecord\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n  \n  # /ledger-agents ledgerAgentListService\tGet all ledger agents.\n  ledgerAgentListService:\n    handler: webledgerHanders.ledgerAgentListService\n    description: Get all ledger agents.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n            headers:\n            paths:\n          responses:\n            200:\n              description: The list of ledgers was found and will be returned in the body of the response.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Agent\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n                  paging:\n                    $ref: \"#/definitions/Paging\"\n            \n            404:\n              description: \tThe list of ledgers was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n         \n              \n  # /ledger-agents/{agent} ledgerAgentStatusService\tGet the current status of the ledger agent.\n  ledgerAgentStatusService:\n    handler: webledgerHanders.ledgerAgentStatusService\n    description: Get the current status of the ledger agent. \n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n            headers:\n            paths:\n          responses:\n            200:\n              description: The ledger agent status was found and will be returned in the body of the response.\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/definitions/Block\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n            400:\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger agent status was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n \n  \n  # 4.5 Ledger Append Service  ledgerAppendService\n  ledgerAppendService:\n    handler: webledgerHanders.ledgerAppendService\n    description: Appending to a ledger can be achieved by performing an HTTP POST of a LedgerStorageBlock to the ledgerAppendService. \n    tags: \n    events:\n      - http:\n          path:  /ledger-agents/{agent}/events\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n                \n          responses:\n            200:\n              description: The ledger block was sucessfully appended.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n                  \n            400:\n              description: The ledger block failed to be appended.\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger block was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            409:\n              description: The ledger block with the given identifier already exists.\n              $ref: \"#/responses/409DuplicateRecord\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n  # ledgerEventService Request the addition of an event to ledger.\n  ledgerEventService:\n    handler: webledgerHanders.ledgerEventService\n    description: Request the addition of an event to ledger.\n    tags: \n    events:\n      - http:\n          path:  /ledger-agents/{agent}/events\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n                id: false\n          cors: \n            origins:               \n              - '*'\n  \n\n  # 4.6 Ledger Block Service ledgerBlockService Get a specific block from the ledger.\n  ledgerBlockService:\n    handler: webledgerHanders.ledgerBlockService\n    description: A ledger read for an block is achieved by performing an HTTP GET on a ledger block identifier. The list of ledger blocks is available by performing an HTTP GET on the ledgerBlockService.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}/blocks\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n              id: true\n            headers:\n            paths:\n          responses:\n            200:\n              description: Retrieval of the ledger block was successful.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n                  paging:\n                    $ref: \"#/definitions/Paging\"\n            400:\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger block was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n\n  # 4.7 Ledger Query Service  ledgerQueryService\tQuery the current state of the ledger.\n  # GET /ledger-agents/example/query?id=http://www.coupon-clearing.org/coupons/486211708\n  ledgerQueryService:\n    handler: webledgerHanders.ledgerQueryService\n    description: Query the current state of the ledger.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}/query\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n              headers:\n              paths:\n          responses:\n            200:\n              description: Retrieval of the latest state machine object was successful.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n            400:\n              description: The query was malformed.\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The given state machine object was not found.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            502:\n              $ref: \"#/responses/502ConfigurationError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n    \n\n\n\ndefinitions:\n  Head:\n    type: string\n    example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n  Link:\n    type: string\n    example: https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n  Paging:\n    properties:\n      start:\n        type: string\n        example: \"65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\"\n      limit:\n        type: integer\n        example: 54321\n      next_position:\n        type: string\n        example: \"65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\"\n      next:\n        type: string\n        example: https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=2000&limit=1000\n\n  Error:\n    properties:\n      code:\n        type: integer\n        example: 34\n      title:\n          type: string\n          example: No Batches Submitted\n      message:\n        type: string\n        example: >\n          The protobuf BatchList you submitted was empty and contained no\n          Batches. You must submit at least one Batch.\n\n  Entry:\n    properties:\n      address:\n        type: string\n        example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c\n      data:\n        type: string\n        format: byte\n        example: Zm9vOmJhcg==\n\n  BlockHeader:\n    properties:\n      block_num:\n        type: integer\n        example: 12345\n      previous_block_id:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      signer_public_key:\n        type: string\n        example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758\n      batch_ids:\n        type: array\n        items:\n          type: string\n          example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c\n      consensus:\n        type: string\n        format: binary\n      state_root_hash:\n        type: string\n        example: 708ca7fbb701799bb387f2e50deaca402e8502abe229f705693d2d4f350e1ad6\n  \n  Block:\n    properties:\n      header:\n        $ref: \"#/definitions/BlockHeader\"\n      header_signature:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      batches:\n        type: array\n        items:\n          $ref: \"#/definitions/Batch\"\n  \n  ConfigurationBlock:\n    properties:\n      header:\n        $ref: \"#/definitions/BlockHeader\"\n      header_signature:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      batches:\n        type: array\n        items:\n          $ref: \"#/definitions/Batch\"\n          \nresponses:\n  400BadRequest:\n    description: Request was malformed\n    schema:\n      $ref: \"#/definitions/Error\"\n  404NotFound:\n    description: Address or id did not match any resource\n    schema:\n      $ref: \"#/definitions/Error\"\n  409DuplicateRecord:\n    description: A duplicate record exists.\n    schema:\n      $ref: \"#/definitions/Error\"\n  429TooManyRequests:\n    description: Too many requests have been made to process batches\n    schema:\n      $ref: \"#/definitions/Error\"\n  500ServerError:\n    description: Something went wrong within the validator\n    schema:\n      $ref: \"#/definitions/Error\"\n  502ConfigurationError:\n    description: Execution failed due to configuration error\n    schema:\n      $ref: \"#/definitions/Error\"\n  503ServiceUnavailable:\n    description: API is unable to reach the validator\n    schema:\n      $ref: \"#/definitions/Error\"\n"]},{"id":127835179,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-admin\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n  stage: test\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":98523456,"files":["service: serverless-url-enrichment-aws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nplugins:\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    name: ${self:provider.stage}-webhook-url-enrichment\n    description: 'Webhook capture endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  verify:\n    handler: src/handlers.verify\n    name: ${self:provider.stage}-verify-url-enrichment\n    description: 'Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n","service: serverless-url-enrichment-azure\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n  verify:\n    handler: dist/bundle.verify\n    description: 'Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n"]},{"id":90793519,"files":["\nservice: layer-serverless-email-fallback\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:BatchWriteItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}\"\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n      Resource: ${self:custom.kinesisArn}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  scheduleRate: ${file(./src/config.js):scheduleRate}\n  kinesisArn: ${file(./src/config.js):kinesisArn}\n\nplugins:\n  - serverless-mocha-plugin\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    name: ${self:service}-webhook\n    description: 'Layer Email Fallback Webhook process endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  verify:\n    handler: src/handlers.verify\n    name: ${self:service}-verify\n    description: 'Layer Email Fallback Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  schedule:\n    handler: src/handlers.schedule\n    name: ${self:service}-schedule\n    description: 'Layer Email Fallback Schedule event that triggers email fallback'\n    events:\n      - schedule: ${self:custom.scheduleRate}\n  ingest:\n    handler: src/handlers.ingest\n    events:\n      - stream:\n          arn: ${self:custom.kinesisArn}\n          batchSize: 10\n          startingPosition: TRIM_HORIZON\n          enabled: true\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: user_id\n            AttributeType: S\n          - AttributeName: message_position\n            AttributeType: S\n        KeySchema:\n          - AttributeName: user_id\n            KeyType: HASH\n          - AttributeName: message_position\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 10\n","\nservice: layer-email-fallback-azure\n\nprovider:\n  name: azure\n  location: West US\n  stage: dev\n  timeout: 10s\n  environment:\n    QueueStorageConnection: ${self:custom.queueStorageConnection}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  scheduleRate: ${file(./src/config.js):scheduleRate}\n  queueStorageName: ${file(./src/config.js):queueStorageName}\n  queueStorageConnection: ${file(./src/config.js):queueStorageConnection}\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    description: 'Layer Email Fallback Webhook process endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n      - queue: ${self:custom.queueStorageName}\n        x-azure-settings:\n          name: $return\n          connection: QueueStorageConnection\n          direction: out\n  ingest:\n    handler: dist/bundle.ingest\n    description: 'Ingest from ServiceBus'\n    events:\n      - queue: ${self:custom.queueStorageName}\n        x-azure-settings:\n          name: item\n          connection: QueueStorageConnection\n  verify:\n    handler: dist/bundle.verify\n    description: 'Layer Email Fallback Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n  schedule:\n    handler: dist/bundle.schedule\n    description: 'Layer Email Fallback Schedule event that triggers email fallback'\n    events:\n      - timer:\n        x-azure-settings:\n            name: item\n            schedule: ${self:custom.scheduleRate}\n"]},{"id":125714250,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n  includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  list:\n    handler: api/list_note.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  create:\n    handler: api/insert_note.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  view:\n    handler: api/view_note.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update: \n    handler: api/update_note.main\n    events:\n      - http:\n        path: notes/{id}\n        method: put\n        cors: true\n        authorizer: aws_iam\n  delete:\n    handler: api/delete_note.main\n    events:\n      - http: \n        path: notes/{id}\n        method: delete\n        cors: true\n        authorizer: aws_iam"]},{"id":125445382,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":126057291,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n\n  helloAuthorizerWithFunctionName:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: handler.authFunction\n\n  hello500:\n    handler: handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n  basicAuthentication:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  catchAll:\n    handler: handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n  pathParams:\n    handler: handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Service Name\nservice: my-service\n\n# plugins\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    testLambdaVariable: 'Lambda Environment Variable'\n\n# custom\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\", \"stage-2\"]\n\nfunctions:\n  hello:\n    handler: handler.hello\n    name: test\n    events:\n      - http:\n          path: task2\n          method: get\n"]},{"id":120694791,"files":["service: microservice-process-images\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n\nfunctions:\n  app:\n    name: microservice-process-images-${self:provider.stage}\n    description: Microservice to process images\n    handler: handler.process\n    events:\n      - http:\n          method: get\n          path: process\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${self:service}-${self:custom.stage}\n        BinaryMediaTypes:\n          - '*/*'\n\npackage:\n  exclude:\n    - .vscode/**\n    - doc/**\n    - tests/**"]},{"id":125696958,"files":["service:\n  name: pets-aws-service\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createPet:\n    handler: handler.create\n    events:\n      - http:\n          method: POST\n          path: create\n  showPet:\n    handler: handler.show\n    events:\n      - http:\n          path: pets/{petId}\n          method: GET\n  listPets:\n    handler: handler.list\n    events:\n      - http:\n          path: pets\n          method: GET\n","service:\n  name: aws-nodejs-ecma-script\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n"]},{"id":125720340,"files":["service: notes-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: ap-southeast-2\n\n  environment:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    NAME: ${file(../.env.yml):NAME}\n    SALT: ${file(../.env.yml):SALT}\n    PASSWORD: ${file(../.env.yml):PASSWORD}\n    STORAGE_BUCKET: aserver-${self:provider.stage}-storage\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:CreateBucket\"\n      Resource: \"arn:aws:s3:::*\"\n\nfunctions:\n  getnote:\n    handler: src/handler.getNote\n    events:\n      - http:\n          path: note\n          method: GET\n          cors: \n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - auth\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n  savenote:\n    handler: src/handler.saveNote\n    events:\n      - http:\n          path: note\n          method: POST\n          cors: \n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - auth\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n\n"]},{"id":124801462,"files":["service: barkhaus-lambda # NOTE: update this with your service name\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  timeout: 300\n\nfunctions:\n  getDogs:\n    handler: Dogs/getDogs.getDogs\n    events:\n      - http:\n          path: Dogs\n          method: get\n\n  getDog:\n    handler: Dogs/getDog.getDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: get\n\n  deleteDog:\n    handler: Dogs/deleteDog.deleteDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: delete\n\n  createDog:\n    handler: Dogs/createDog.createDog\n    events:\n      - http:\n          path: Dogs\n          method: post\n\n  updateDog:\n    handler: Dogs/updateDog.updateDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: patch\n          \n          "]},{"id":125640026,"files":["service: zxcvbn-on-lambda\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  passwordCalculate:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: calculate\n          method: post"]},{"id":113862973,"files":["\n# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: octotfs-webhooks\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n      Resource: \n        Fn::Join:\n          - \":\"\n          - - \"arn:aws:ssm::\"\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - \"${self:provider.stage}/octotfs-webhooks/*\" \n  environment:\n    sqlServer: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlServer~true}\n    sqlUser: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlUser~true}\n    sqlPassword: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlPassword~true}\n    sqlDatabase: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlDatabase~true}\n    slackWebhookUrl: ${ssm:/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-devops~true}\n    slackMachineEventWebhookUrl: ${ssm:/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-machineEvents~true}\n    \n\n# package:\n#   include:\n#     - handler.js\n#     - services/**\n\nfunctions:\n  workItemUpdates:\n    handler: handler.workItemUpdate\n    events:\n      - http: \n          path: work-items/update\n          method: post\n  machineEvents:\n    handler: handler.sendMachineEventAlert\n    events:\n      - http: \n          path: machine-events\n          method: post\n\n## Can use this stack once CF supports SecureString types for SSM\n# resources:\n#   Resources:\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlServer\"\n#         Type: SecureString\n#         Value: ${opt:sqlServer}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlUser\"\n#         Type: SecureString\n#         Value: ${opt:sqlUser}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlPassword\"\n#         Type: SecureString\n#         Value: ${opt:sqlPassword}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlDatabase\"\n#         Type: SecureString\n#         Value: ${opt:sqlDatabase}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-devops\"\n#         Type: SecureString\n#         Value: ${opt:slackWebhookUrl}"]},{"id":125306640,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\nservice: book-lending-app-auth\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  TABLE_USER: book-lending-app-user\n\nresources:\n  Resources:\n    UserDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"userId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"userId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.TABLE_USER}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - UserDynamoTable\n          - Arn\n\nfunctions:\n  login:\n    handler: handlers/authenticate.handler\n    memorySize: 128\n    timeout: 6\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_USER}\n      REGION: ${self:provider.region}\n      # you need to generate one JWT secret here... you can get one at https://www.grc.com/passwords.htm\n      JWT_SECRET: \n    events:\n      - http:\n          path: book-lending-api/authentication\n          method: post\n          cors: true\n  register:\n    handler: handlers/register.handler\n    memorySize: 128\n    timeout: 6\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_USER}\n      REGION: ${self:provider.region}\n    events:\n      - http:\n          path: book-lending-api/registration\n          method: post\n          cors: true\n"]},{"id":124448001,"files":["service: serverless-domain-forwarder\n\nplugins:\n  - serverless-plugin-scripts\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-central-1\n  memorySize: 128\n  versionFunctions: false\n\ncustom: \n  conf: ${file(./config.js)}\n  scripts:\n    hooks:\n      'before:deploy:deploy': npm run test\n\nfunctions:\n  forward:\n    handler: src/handlers.forward\n    name: ${self:custom.conf.namePrefix}-lambda\n    description: Forwards requests to the configured target domain.\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /{any+}\n          method: get\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName:\n                Fn::Join:\n                  - \"\"\n                  - - Ref: ApiGatewayRestApi\n                    - \".execute-api.\"\n                    - Ref: AWS::Region\n                    - \".amazonaws.com\"\n              Id: ${self:custom.conf.namePrefix}-lambda\n              CustomOriginConfig:\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              OriginPath: /${self:provider.stage}\n          Enabled: true\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            TargetOriginId: ${self:custom.conf.namePrefix}-lambda\n            ForwardedValues:\n              QueryString: \"false\"\n              Cookies:\n                Forward: all\n            ViewerProtocolPolicy: allow-all\n          Aliases: ${self:custom.conf.domains}\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: \"true\"\n            ## To configure an AWS Certificate, remove the CloudFrontDefaultCertificate line above,\n            ## uncomment the next lines and set the arn respectively.\n            #\n            # AcmCertificateArn: <arn:your-cert-arn>\n            # SslSupportMethod: sni-only\n            #\n          Comment: ${self:custom.conf.namePrefix}\n\n  Outputs:\n    CloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]\n"]},{"id":123996170,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: webhook\n          method: post\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n    environment:\n      WEBHOOK_URL: $NGROK_URL\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":109537346,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: helloworld\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello/get\n          method: get\n\nplugins:\n  - serverless-offline\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":123860970,"files":["service: lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n          integration: lambda-proxy\n          authorizer: aws_iam\n"]},{"id":123705437,"files":["service:\n  name: aws-nodejs-ecma-script\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n\nfunctions:\n  first:\n    handler: first.hello\n"]},{"id":122312238,"files":["service: sls-chrome-puppeteer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  timeout: 30\n  environment:\n    SLS_DEBUG: \"*\"\n    # DEBUG: \"*\"\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack: ./webpack.config.js\n  webpackIncludeModules: true\n\nfunctions:\n  version:\n    description: Show Chrome version using puppeteer\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version\n          method: get\n\n  dom:\n    description: Show DOM (and additional info) for given url using puppeteer\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/dom.default\n    events:\n      - http:\n          path: dom\n          method: get\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Properties:\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    # Enable X-Ray tracing on Lambda functions\n    # ScreenshotLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n    # PdfLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n"]},{"id":123268468,"files":["service: yowltag-graphql-api\n\n# plugins:\n# - serverless-plugin-include-dependencies\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  environment:\n    ACCOUNT_ID: '882300007932'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: arn:aws:dynamodb:*:*:table/locations\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'dispatcher'\n\npackage:\n  exclude:\n    - src/**\n    - .eslintrc\n    - coverage\n    - __test__\n\nfunctions:\n  graphql:\n    #handler: build/handler.graphql\n    handler: ${file(config/env.js):handlerPath}/handler.graphql\n    memorySize: 512\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  match:\n    handler: build/handler.findMatches\n    memorySize: 512\n    events:\n      - sns: dispatcher\n\n  cleanupLocations:\n    handler: build/handler.cleanupLocations\n    memorySize: 512\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - locationsDynamoDbTable\n              - StreamArn\n\nresources:\n  Resources:\n    locationsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: hashKey\n            AttributeType: N\n          - AttributeName: rangeKey\n            AttributeType: S\n          - AttributeName: geohash\n            AttributeType: N\n        KeySchema:\n          - AttributeName: hashKey\n            KeyType: HASH\n          - AttributeName: rangeKey\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: geohash-index\n            KeySchema:\n            - AttributeName: hashKey\n              KeyType: HASH\n            - AttributeName: geohash\n              KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TableName: 'locations'\n    UsersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'users'\n    TagsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'tags'\n    MatchesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'matches'\n    RecordsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'records'\n    RecorddataDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 1\n        TableName: 'recorddata'\n\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]"]},{"id":122974191,"files":["service: qrcode\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  # change this, so it's unique for your setup\n  qrcodeBucket: ${self:service}.${self:provider.stage,opt:stage}\n  stageVariables:\n    bucketName: ${self:custom.qrcodeBucket}\n  customDomain:\n    domainName: qrcode.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource:\n        - \"arn:aws:s3:::${self:custom.qrcodeBucket}\"\n        - \"arn:aws:s3:::${self:custom.qrcodeBucket}/*\"\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /\n          method: get\n          timeout: 15\n    environment:\n      bucketName: ${self:custom.qrcodeBucket}\n\nresources:\n  Resources:\n    PackageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.qrcodeBucket}\n        LifecycleConfiguration:\n          Rules:\n            - ExpirationInDays: 1\n              Status: Enabled\n"]},{"id":121803555,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n       - http:\n           path: /\n           method: get\n\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":121785754,"files":["service: es6-esm-function\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: es6-esm"]},{"id":121334579,"files":["service: serverless api template\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  timeout: 6\n\nfunctions:\n\n  getData:\n    handler: functions/getData\n    events:\n      - http:\n          path: api/get/{id}\n          method: get\n          cors: true\n\n  postData:\n    handler: functions/postData\n    events:\n      - http:\n          path: api/post\n          method: post\n          cors: true\n"]},{"id":120205590,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: wheatley-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n    - .git/**\n    - .gitattributes\n    - .gitignore\n    - LICENSE\n    - node_modules/**\n    - package.json\n    - README.md\n\nfunctions:\n  # hello:\n  #   handler: handler.hello\n  #   events:\n  #     - http: true\n  #       x-azure-settings:\n  #         authLevel : anonymous\n  #     - http: true\n  #       x-azure-settings:\n  #         direction: out\n  #         name: res\n\n  run:\n    handler: handler.run\n    events:\n      - http: true\n        x-azure-settings:\n          name: request\n          methods:\n            - GET\n            - POST\n          # route: graphql\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: response\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n"]},{"id":119688389,"files":["service: ${file(./config.json):service_id}\n\nprovider:\n  name: google\n  runtime: nodejs\n  memorySize: 256\n  timeout: 60s\n  project: ${file(./config.json):project_id}\n  credentials: ${file(./config.json):credentials_file}\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - secrets/**\n    - config.json.sample\n    - LICENSE\n    - README.md\n\nfunctions:\n  ping:\n    handler: ping\n    events:\n      - http: path\n\n  check:\n    handler: check\n    events:\n      - http: path\n\n  contact:\n    handler: contact\n    events:\n      - http: path\n\nframeworkVersion: \"=1.25.0\"\n"]},{"id":119184918,"files":["service: XemHarvestChecker\n\ncustom:\n  emailAddress: \"sample@example.com\" #通知先のメールアドレスを設定\n  accountId: 000000000000 #AWS Account ID\n  IpAddress: \"XXX.XXX.XXX.XXX\" #Delegated harvesting remote node's IP address or Host Name\n  RemoteWalletAddress : \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n  region: ${opt:region,self:provider.region}\n  topicName: ${self:service}-${opt:stage,self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod  #default stage, overwrite by --stage option\n  region: ap-northeast-1  #利用するリージョンの設定\n  memorySize: 128 # Overwrite the default memory size. Default is 1024\n  timeout: 12\n  environment:\n    region: ${opt:region,self:provider.region}\n    topicARN: arn:aws:sns:${opt:region,self:provider.region}:${self:custom.accountId}:${self:custom.topicName}\n    IpAddress: ${self:custom.IpAddress}\n    RemoteWalletAddress : ${self:custom.RemoteWalletAddress}\n\n  iamRoleStatements:\n    - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: \"*\"\n    -  Effect: Allow\n       Action: \"sns:*\"\n       Resource: \"*\"\n\nfunctions:\n  checkHarvestStatus:\n    handler: handler.checkHarvestStatus\n    events:\n      - schedule: cron(0 13 * * ? *)\n\nresources:\n  Resources:\n    snsTopic:\n       Type: \"AWS::SNS::Topic\"\n       Properties:\n          DisplayName: \"Topic for Xem Remote Node Checker\"\n #         Subscription:\n          TopicName: ${self:custom.topicName}\n\n    snsSubscription:\n       Type: \"AWS::SNS::Subscription\"\n       Properties:\n          Endpoint: ${self:custom.emailAddress}\n          Protocol: \"email\"\n          TopicArn:\n            Ref: 'snsTopic'\n"]},{"id":118494264,"files":["service: voting\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  authTest:\n    handler: handler.authTest\n    events:\n      - http:\n          path: authTest/{id}\n          method: get\n          authorizer: auth\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n          authorizer: auth\n  auth:\n    handler: handler.auth\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n"]},{"id":58809566,"files":["service: organizations\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  environment: # Service wide environment variables\n    MONGODB_CONNECTION_STRING: ${env:bizhub_api_mongodb_connectionstring_dev}\n\nfunctions:\n  authorizerFn:\n    handler: src/handlers/authorizer.authorize\n    environment:\n      SENTRY_DSN: ${env:bizhub_api_sentry_dsn_dev}\n  getOrgs:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: organizations\n          method: get\n          cors: true\n  \n  getOrgById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: organizations/{id}\n          method: get\n          cors: true\n\n  createOrg:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: organizations\n          method: post\n          authorizer: authorizerFn\n          cors: true\n\n  deleteOrg:\n    handler: src/handlers/handler-factory.remove\n    events:\n      - http:\n          path: organizations/{id}\n          method: delete\n          authorizer: authorizerFn\n          cors: true\n\n  createOffice:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: offices\n          method: post\n          authorizer: authorizerFn\n          cors: true\n\n  getOffices:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: offices\n          method: get\n          cors: true\n  \n  getOfficeById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: offices/{id}\n          method: get\n          cors: true\n\n  createTimeEntry:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: time-entries\n          method: post\n          authorizer: authorizerFn\n          cors: true\n  \n  getTimeEntries:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: time-entries\n          method: get\n          authorizer: authorizerFn\n          cors: true\n\n  createInvoice:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: invoices\n          method: post\n          authorizer: authorizerFn\n          cors: true\n  getInvoices:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: invoices\n          method: get\n          authorizer: authorizerFn\n          cors: true\n  getInvoiceById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: invoices/{id}\n          method: get\n          cors: true\n  getMyOrgs:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: me/organizations\n          method: get\n          authorizer: authorizerFn\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":117772771,"files":["service: service\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: sa-east-1\n  profile: yourAwsProfile # Use an already configured AWS profile in your terminal or comment this line and passed as $ export AWS_PROFILE=youAwsProfile\n  timeout: 10\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\ncustom:\n  webpackIncludeModules: true\n\nfunctions:\n  initFill:\n    handler: initFill.initFill\n    package:\n      invidually: true\n\n  listAll:\n    handler: listAll.listAll\n    package:\n      invidually: true\n\n  getById:\n    handler: getById.getById\n    package:\n      invidually: true\n\n  addOne:\n    handler: addOne.addOne\n    package:\n      invidually: true\n\n  updateOne:\n    handler: updateOne.updateOne\n    package:\n      invidually: true\n\n  deleteOne:\n    handler: deleteOne.deleteOne\n    package:\n      invidually: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":116909553,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          # path: users/create\n          path: users/get\n          method: get\n      # - s3: ${env:BUCKET}\n      # - schedule: rate(10 minutes)\n      # - sns: greeter-topic\n      # - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n      # - alexaSkill\n      # - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n      # - iot:\n      #     sql: \"SELECT * FROM 'some_topic'\"\n      # - cloudwatchEvent:\n          # event:\n      #       source:\n      #         - \"aws.ec2\"\n      #       detail-type:\n      #         - \"EC2 Instance State-change Notification\"\n      #       detail:\n      #         state:\n      #           - pending\n      # - cloudwatchLog: '/aws/lambda/hello'\n      # - cognitoUserPool:\n      #     pool: MyUserPool\n      #     trigger: PreSignUp\n#    Define function environment variables here\n    # environment:\n    #   variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":116161062,"files":["service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10 # set node.js runtime\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev # setting the env stage to dev, this will be visible in the routes\n  region: us-east-1\n\nfunctions: # add 4 functions for CRUD\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id} # path will be domain.name.com/dev/notes/1\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation"]},{"id":103678143,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: secslice-backend # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \"=1.2.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\nstage: \"dev\"\nregion: \"us-east-1\"\n\ncustom:\n  currentStage: test\n  currentRegion: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\nwriteEnvVars:\n    SERVERLESS_STAGE: ${self:custom.currentStage}\n    SERVERLESS_REGION: ${self:custom.currentRegion}\n    SERVERLESS_PROJECT: \"Secure Slice\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  createClass:\n    handler: restApi/class/createClass/handler.handler\n    name: ${self:custom.currentStage}-classService-createClass\n    description: SecSlice Create Class Service\n    endpoints:\n      - http:\n          path: class/create\n          method: POST\n          type: AWS\n          authorizationType: none\n          authorizerFunction: false\n          apiKeyRequired: false\n          requestTemplates: ${self:custom.apiRequestTemplate}\n          responses: ${self:custom.responseTemplate}\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: class/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getClassesBySchool:\n    handler: restApi/class/getClassesBySchool/handler.handler\n    name: ${self:custom.currentStage}-classService-getClassesBySchool\n    description: SecSlice Get Class Service\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: class/schoolcode\n          method: get\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createInstitution:\n    handler: restApi/institution/createInstitution/handler.handler\n    name: ${self:custom.currentStage}-institutionService-createInstitution\n    description: API to create a new institution\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getInstitution:\n    handler: restApi/institution/getInstitution/handler.handler\n    name: ${self:custom.currentStage}-institutionService-getInstitution\n    description: API to get an institution By shortcode\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/shortcode\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createSchool:\n    handler: restApi/school/createSchool/handler.handler\n    name: ${self:custom.currentStage}-schoolService-createSchool\n    description: API to create a new school\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: school/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getSchoolsByInstitution:\n    handler: restApi/school/getSchoolsByInstitution/handler.handler\n    name: ${self:custom.currentStage}-schoolService-getSchoolsByInstitution\n    description: API to get schools By institution shortcode\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/schools\n          method: get\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createTables:\n    handler: restApi/superadmin/createtables/handler.handler\n    name: ${self:custom.currentStage}-superAdminService-createTables\n    description: Tables Create API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: superadmin/createtables\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  promoteToSuperAdmin:\n    handler: restApi/superadmin/promote/handler.handler\n    name: ${self:custom.currentStage}-superAdminService-promote\n    description: User Promote to superadmin API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: superadmin/promote\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createUser:\n    handler: restApi/users/create/handler.handler\n    name: ${self:custom.currentStage}-userService-create\n    description: User Create API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: users/create\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  token:\n    handler: restApi/users/token/handler.handler\n    name: ${self:custom.currentStage}-userService-token\n    description: Get Access token request\n    events:\n      - http:\n          # integration: ${self:custom.integration}\n          path: users/token\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n          requestTemplates: \"$${apiRequestTemplate}\"\n          responses: \"$${responseTemplate}\"\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-write-env-vars\n  # - serverless-optimizer-plugin\n  # - serverless-lambda-prune-plugin\n  # - serverless-cors-plugin\n\n# resources: ${file(./components/resources.yml)}\n\n"]},{"id":114550097,"files":["service: serverless-ether-trends-bot\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: ${file(env.yml):${opt:stage}}\n\nfunctions:\n  daily:\n    handler: src/handler.daily\n    events:\n      - schedule: cron(0 9 * * ? *)\n  weekly:\n    handler: src/handler.weekly\n    events:\n      - schedule: cron(0 9 ? * SUN *)\n  monthly:\n    handler: src/handler.monthly\n    events:\n      - schedule: cron(0 9 1 * ? *)\n"]},{"id":114592299,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: api-serverless-starter\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:custom.profiles.${self:provider.stage}}\n\ncustom:\n  defaultStage: dev\n  profiles:\n    dev: devProfile\n    prod: prodProfile\n  serverless-offline:\n    host: 0.0.0.0\n\nplugins:\n  # - serverless-plugin-include-dependencies\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n include:\n   - node_modules/**\n exclude:\n   - .git/**\n   - credentials\n   - docker-compose.yml\n   - src/**\n   - package.json\n\nfunctions:\n  app:\n    handler: dist/serverless.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":111954089,"files":["service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":67886405,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\npackage:\n  include:\n    - node_modules/serverless-http\n\nfunctions:\n  hello:\n    handler: handler.hello\n  saySomething:\n    handler: handler.saySomething\n    package:\n      include:\n        - node_modules/**\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":113930505,"files":["service: aws-s3-twilio-notification\n\ncustom:\n#         Change the name of your s3 bucket here if you want\n  bucket: twilio-notification-bucket\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n#          use your AWS CLI profile here if you have one, or else delete this\n#          line below to use your default AWS CLI settings\n  profile: \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  newFileInBucket:\n    handler: handler.newFileInBucket\n    environment:\n#                    Use your Twilio Account SID here\n        ACCOUNT_SID:\n#                    Use your Twilio Account Auth Token here\n        AUTH_TOKEN:\n#                    Use your Twilio Phone Number here eg: +16043008888\n        TWILIO_PHONE_NO:\n#                    Type the phone number to receive the message here +16043008888\n        PHONE_NO_TO_RECEIVE_SMS:\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n"]},{"id":113806777,"files":["service: notes-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\n\n  # iamRoleStatement defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource sharing) for browser cross domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.default\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  # Defines an HTTP API endpoint that calls the main function in get.js\n  # - path: url path is /notes/{id} # - method: GET request\n  get:\n    handler: get.default\n    events:\n       - http:\n           path: notes/{id}\n           method: get\n           cors: true\n           authorizer: aws_iam\n\n  # Defines an HTTP API endpoint that calls the main function in list.js\n  # - path: url path is /notes\n  # - method: GET request\n  list:\n    handler: list.default\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.default\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    handler: delete.default\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":112020763,"files":["service: serverless-mailgun-slack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: ap-northeast-1\n  environment:\n    MAILGUN_API_KEY: ${file(./secrets.yml):mailgun_api_key}\n    SLACK_WEBHOOK_URL: ${file(./secrets.yml):slack_webhook_url}\n\nfunctions:\n  ping: {handler: handler.ping}\n  mailgunCallback:\n    handler: handler.mailgunCallback\n    events:\n      - http:\n          path: callback\n          method: post\n"]},{"id":102276029,"files":["service: serverless-webcron\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: ap-northeast-1\n  timeout: 30\n  environment:\n    DYNAMODB_TABLE_NAME: ${file(./secrets.yml):dynamodb_table_name}\n    SLACK_WEBHOOK_URL: ${file(./secrets.yml):slack_webhook_url}\n\nfunctions:\n  ping: {handler: handler.ping}\n  site: {handler: handler.site}\n  sites: {handler: handler.sites}\n  execute:\n    handler: handler.execute\n    events:\n      - schedule: cron(0 19 * * ? *)\n  \nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${file(./secrets.yml):dynamodb_table_name}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: serverless-webcron-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/${file(./secrets.yml):dynamodb_table_name}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":113099730,"files":["service: bazos-watcher\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 256\n  timeout: 10\n  environment:\n    TABLE_BAZOS:\n      Ref: DynamoDBTable\n    SES_EMAIL: ${env:SES_EMAIL}\n    RECEIVER_EMAIL: ${env:RECEIVER_EMAIL}\n    QUERY: ${env:QUERY}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable]]\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Condition:\n        StringEquals:\n          ses:FromAddress: ${env:SES_EMAIL}\n      Resource:\n        '*'\n\nfunctions:\n  parser:\n    handler: functions/parser/index.handler\n    events:\n      - schedule:\n          rate: cron(0/30 8-23 * * ? *)\n          enabled: true\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-bazos\n        AttributeDefinitions:\n          - AttributeName: link\n            AttributeType: S\n        KeySchema:\n          - AttributeName: link\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":110699222,"files":["service: screenshottr-service\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\n  environment:\n    SS_STAGE: ${self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::screenshottr-service-images-unprocessed-dev*\"\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::screenshottr-service-images-saved-dev/*\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/screenshottr-service-uploads-dev\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/screenshottr-service-user-dev\"\n\nfunctions:\n  getSignedS3URL:\n    handler: src/getSignedS3URL.getSignedS3URL\n    events:\n      - http: GET api/getSignedS3URL\n    memorySize: 128\n  processUpload:\n    handler: src/processUpload.processUpload\n    events:\n      - s3: screenshottr-service-images-unprocessed-dev\n        memorySize: 256\n  getMetadata:\n    handler: src/getMetadata.getMetadata\n    events:\n      - http: GET api/getImageMetadata\n    memorySize: 128\n  createUser:\n    handler: src/createUser.createUser\n    events:\n      - http: GET api/user/createUser\n    memorySize: 128\n\nresources:\n Resources:\n    storageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: screenshottr-service-images-saved-dev\n    entriesDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: screenshottr-service-uploads-dev\n        AttributeDefinitions:\n          - AttributeName: image_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: image_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    usersDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: screenshottr-service-user-dev\n        AttributeDefinitions:\n          - AttributeName: user_name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: user_name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n"]},{"id":102623055,"files":["service: graphql-vault\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n  output:\n    file: .serverless/stack-output-${self:provider.stage}.json\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      host: dynamodblocal-1\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n  - serverless-stack-output\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    environment:\n      DB_TABLE: ${self:custom.dbTable}\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Outputs:\n    DbTableName:\n      Description: \"Db Table Name\"\n      Value:\n        Ref: DbTable\n  Resources:\n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n"]},{"id":111672477,"files":["service: onyx-service\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\n  environment:\n    ONYX_STAGE: ${self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/onyx-service-urls\"\n\nfunctions:\n  createURL:\n    handler: src/handler.create\n    events:\n      - http: POST api/create\n    memorySize: 128\n  deleteURL:\n    handler: src/handler.delete\n    events:\n      - http: POST api/delete\n    memorySize: 128\n  getURLInfo:\n    handler: src/handler.getURLInfo\n    events:\n      - http: POST api/getURLInfo\n    memorySize: 128\n  visitURL:\n    handler: src/handler.visit\n    events:\n      - http: GET /visit/{short_url_id}\n    memorySize: 128\n\nresources:\n Resources:\n    usersDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: onyx-service-urls\n        AttributeDefinitions:\n          - AttributeName: short_url_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: short_url_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 1\n"]},{"id":111370818,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n"]},{"id":97769857,"files":["service: poc-email\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/email\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:email\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Email\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  email:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n","service: poc-event-router\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/content-router\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:content-router\n  # SNS you are subscribing to\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:ContentRouter\n  # SNS you want to publish to (Format: TOPIC_SNS_ARN)\n  EMAIL_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Email # Should be lowercase and separated by -\n  PUSH_NOTIFICATION_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PushNotification\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  # Subscribe to a SNS Topic\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n  # Publish to multiple SNS Topics\n  - Effect: Allow\n    Action:\n      - sns:Publish\n    Resource: \n      - ${self:custom.EMAIL_SNS_ARN}\n      - ${self:custom.PUSH_NOTIFICATION_SNS_ARN}\n\nfunctions:\n  eventRouter:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n      EMAIL_SNS_ARN: ${self:custom.EMAIL_SNS_ARN}\n      PUSH_NOTIFICATION_SNS_ARN: ${self:custom.PUSH_NOTIFICATION_SNS_ARN}","service: poc-initiator\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:ContentRouter\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  initiator:\n    handler: handler.index\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: poc-push-notification\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/push-notification\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:push-notification\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PushNotification\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  pushNotification:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n","service: lambda-producer\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:poc-demo\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  producer:\n    handler: handler.producer\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: lambda-consumer\n\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/poc-delivery\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:poc-delivery\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PocDelivery\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n      # Refine policy\n      # - sqs:DeleteMessage\n      # - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  hello:\n    handler: handler.consumer\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n\n# TODO: Move dead-letter queue creation to setup.js\n# resources:\n#   Resources:\n#     Messages:\n#       Type: AWS::SQS::Queue\n#       Properties:\n#         QueueName: ${self:service}\n#         MessageRetentionPeriod: 1209600\n#         VisibilityTimeout: 60\n#         RedrivePolicy:\n#           deadLetterTargetArn:\n#             Fn::GetAtt:\n#             - MessagesDeadLetterQueue\n#             - Arn\n#           maxReceiveCount: 10\n\n#     MessagesDeadLetterQueue:\n#       Type: AWS::SQS::Queue\n#       Properties:\n#         QueueName: ${self:service}-dead-letter-queue\n#         MessageRetentionPeriod: 1209500","service: sns-poc-publisher\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:sns-poc\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  producer:\n    handler: handler.producer\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: sns-poc-subscriber\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:sns-poc\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n\nfunctions:\n  hello:\n    handler: handler.consumer\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n\n# TODO: Move dead-letter queue creation to setup.js\nresources:\n  Resources:\n    MessagesDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-dead-letter-queue\n        MessageRetentionPeriod: 1209500"]},{"id":76360587,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":107230282,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: askwho\n\n# plugins\nplugins:\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-1\n  memorySize: 128 # optional, in MB, default is 1024\n  timeout: 10 # optional, in seconds, default is 6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - lib/**\n    - config/**\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  subscribe:\n    handler: handler.subscribe\n    environment:\n      FB_TOKEN: ${self:custom.secrets.FB_TOKEN}\n    events:\n      - http:\n          path: askwhofb\n          method: get\n\n  webhook:\n    handler: handler.webhook\n    environment:\n      FB_TOKEN: ${self:custom.secrets.FB_TOKEN}\n      DATAGOVSG_KEY: ${self:custom.secrets.DATAGOVSG_KEY}\n    events:\n      - http:\n          path: askwhofb\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":105954221,"files":["service: titan-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  profile: serverless\n  environment:\n      DDB_PLAYERS_TABLE: TitanPlayers-${opt:stage}\n      DDB_MATCHES_TABLE: TitanMatches-${opt:stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  gql:\n    handler: gql/handler.handler\n    memorySize: 128\n    events:\n      - http:\n          path: gql\n          method: post\n          cors: true\n          integration: LAMBDA\n  match-create:\n    handler: match/create.handler\n    memorySize: 128\n    events:\n      - http:\n          path: api/match/create\n          method: post\n          cors: true\n  match-list:\n      handler: match/list.handler\n      memorySize: 128\n      events:\n        - http:\n            path: api/match/list\n            method: get\n            cors: true\n  player-list:\n    handler: player/list.handler\n    memorySize: 128\n    events:\n      - http:\n          path: api/player/list\n          method: get\n          cors: true\n  player-create:\n    handler: player/create.handler\n    memorySize: 128\n\nresources:\n  Resources:\n    matchesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: TitanMatches-${opt:stage}\n        AttributeDefinitions:\n          - AttributeName: partitionKey\n            AttributeType: N\n          - AttributeName: matchId\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: matchId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: partitionKeyIndex\n            KeySchema:\n              - AttributeName: partitionKey\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n    playersTable:\n          Type: AWS::DynamoDB::Table\n          Properties:\n            TableName: TitanPlayers-${opt:stage}\n            AttributeDefinitions:\n              - AttributeName: partitionKey\n                AttributeType: N\n              - AttributeName: playerId\n                AttributeType: S\n              - AttributeName: playerRank\n                AttributeType: N\n            KeySchema:\n              - AttributeName: playerId\n                KeyType: HASH\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n            GlobalSecondaryIndexes:\n              - IndexName: partitionKeyIndex\n                KeySchema:\n                  - AttributeName: partitionKey\n                    KeyType: HASH\n                  - AttributeName: playerRank\n                    KeyType: RANGE\n                Projection:\n                  ProjectionType: ALL\n                ProvisionedThroughput:\n                  ReadCapacityUnits: 1\n                  WriteCapacityUnits: 1"]},{"id":105432846,"files":["\nservice: auto-blog\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  uploadBucket: tjr.${self:service}.${self:custom.stage}.upload\n  webBucket: www.trodger.com\n\n  imageFilterTopic: ${self:service}-${self:custom.stage}-image-filter\n  mdFilterTopic: ${self:service}-${self:custom.stage}-md-filter\n  textFilterTopic: ${self:service}-${self:custom.stage}-text-filter\n\n  imagePageTopic: ${self:service}-${self:custom.stage}-image-page\n  indexPageTopic: ${self:service}-${self:custom.stage}-index-page\n  directoryPageTopic: ${self:service}-${self:custom.stage}-directory-page\n\n  renderTopic: ${self:service}-${self:custom.stage}-render\n\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.textFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imageFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.mdFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imagePageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.indexPageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.directoryPageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  environment:\n    UPLOAD_BUCKET: ${self:custom.uploadBucket}\n    WEB_BUCKET: ${self:custom.webBucket}\n\n  stage: dev\n  region: eu-west-2\n\npackage:\n  exclude:\n    - .idea/**\n    - .npmignore\n    - package.json\n    - tests/**\n    - README.md\n\n#plugins:\n#  - serverless-plugin-webpack\n\nfunctions:\n  upload:\n    handler: functions/upload.handler\n    events:\n      - s3:\n        bucket: ${self:custom.uploadBucket}\n        event: s3:ObjectCreated:*\n    environment:\n      # arn:aws:sns:eu-west-2:752934489335:auto-blog-dev-html-page\n      IMAGE_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imageFilterTopic}\" ] ]  }\n      MD_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.mdFilterTopic}\" ] ]  }\n      TEXT_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.textFilterTopic}\" ] ]  }\n\n  imageFilter:\n    handler: functions/imageFilter.handler\n    events:\n      - sns: ${self:custom.imageFilterTopic}\n    environment:\n      IMAGE_PAGE_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imagePageTopic}\" ] ]  }\n\n  imagePage:\n    handler: functions/imagePage.handler\n    events:\n      - sns: ${self:custom.imagePageTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  mdFilter:\n    handler: functions/mdFilter.handler\n    events:\n      - sns: ${self:custom.mdFilterTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  textFilter:\n    handler: functions/textFilter.handler\n    events:\n      - sns: ${self:custom.textFilterTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  render:\n    handler: functions/render.handler\n    events:\n      - sns: ${self:custom.renderTopic}"]},{"id":103016391,"files":["frameworkVersion: \"1.21\"\n\nservice: cryptocurrency-monitor\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false\n\ncustom: ${file(./serverless.config.yml)}\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nfunctions:\n  Worker:\n    handler: src/worker/index.handler\n    name: ${self:service}-worker-${self:provider.stage}\n    memorySize: 128\n    timeout: 60\n    role: Role\n    environment:\n      TOPIC: \n        Ref: Topic\n      TABLE_NAME:\n        Ref: Table\n    package:\n      include:\n        - src/worker/**\n    events:\n      -\n        schedule:\n          name: ${self:service}-worker-${self:provider.stage}\n          rate: ${self:custom.worker_rate}\n          enabled: ${self:custom.worker_enabled}\n\n  Consumer:\n    handler: src/consumer/index.handler\n    name: ${self:service}-consumer-${self:provider.stage}\n    memorySize: 128\n    timeout: 3\n    role: Role\n    environment:\n      TWILIO_SID: ${self:custom.twilio_sid}\n      TWILIO_TOKEN: ${self:custom.twilio_token}\n      TWILIO_FROM: ${self:custom.twilio_from}\n      TABLE_NAME:\n        Ref: Table\n    package:\n      include:\n        - src/consumer/**\n    events:\n      - \n        sns: \n          arn:\n            Fn::Join:\n              - \":\"\n              -\n                - \"arn:aws:sns\"\n                - Ref: \"AWS::Region\"\n                - Ref: \"AWS::AccountId\"\n                - ${self:service}-${self:provider.stage}\n          topicName: ${self:service}-${self:provider.stage}\n\nresources:  # CloudFormation template syntax\n  Resources:\n\n    # DynamoDb\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n    # SNS\n    Topic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:service}-${self:provider.stage}\n\n    # IAM\n    Role:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        RoleName: ${self:service}-${self:provider.stage}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          -\n            PolicyName: ${self:service}-${self:provider.stage}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      -\n                        - \"arn:aws:logs\"\n                        - Ref: \"AWS::Region\"\n                        - Ref: \"AWS::AccountId\"\n                        - \"log-group:/aws/lambda/*:*:*\"\n                -\n                  Effect: Allow\n                  Action:\n                    - dynamodb:UpdateItem\n                    - dynamodb:Scan\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      -\n                        - \"arn:aws:dynamodb\"\n                        - Ref: \"AWS::Region\"\n                        - Ref: \"AWS::AccountId\"\n                        - Fn::Join:\n                          - \"\"\n                          -\n                            - \"table/\"\n                            - Ref: Table\n                -\n                  Effect: Allow\n                  Action:\n                    - sns:Publish\n                  Resource:\n                    Ref: Topic\n    \n  # Output\n  Outputs:\n    Region:\n      Value: ${self:provider.region}\n    Stage:\n      Value: ${self:provider.stage}\n    TwilioFrom:\n      Value: ${self:custom.twilio_from}\n    TwilioSid:\n      Value: ${self:custom.twilio_sid}\n    TwilioToken:\n      Value: ${self:custom.twilio_token}\n    Table:\n      Value:\n        Ref: Table\n    Topic:\n      Value:\n        Fn::GetAtt:\n          - Topic\n          - TopicName\n","twilio_sid: \ntwilio_token: \ntwilio_from: \nworker_rate: cron(*/10 * * * ? *)\nworker_enabled: true"]},{"id":104270246,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manager\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  invoke:\n    handler: handler.invoke\n    events:\n     - http:\n         path: invoke\n         method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-plugin-simulate","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: services\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-plugin-simulate\n"]},{"id":90902401,"files":["service: zaymus-sk-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 120\n  environment:\n    TABLE_ALBUMS: ${env:TABLE_ALBUMS}\n    TABLE_PHOTOS: ${env:TABLE_PHOTOS}\n    PHOTO_URL: https://s3.${self:provider.region}.amazonaws.com/${self:custom.s3Bucket}/\n    PHOTO_MAX_DIMEN: 1024\n    THUMB_WIDTH: 240\n    THUMB_HEIGHT: 160\n  iamRoleStatements:\n    - Effect: Allow\n      Action: dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTableAlbums]]\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTablePhotos]]\n    - Effect: Allow\n      Action:\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource:\n        Fn::GetAtt: [DynamoDBTablePhotos, StreamArn]\n\ncustom:\n  s3Bucket: ${self:service}-${self:provider.stage}-photo-albums\n\nfunctions:\n  api:\n    handler: functions/api/api.handler\n    events:\n      - http:\n          path: albums\n          method: get\n          cors: true\n      - http:\n          path: photos/{albumId}\n          method: get\n          cors: true\n  insert:\n    handler: functions/db-insert/db-insert.handler\n    events:\n      - s3:\n          bucket: ${self:custom.s3Bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: albums/\n  delete:\n    handler: functions/db-delete/db-delete.handler\n    events:\n      - s3:\n          bucket: ${self:custom.s3Bucket}\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: albums/\n  trigger:\n    handler: functions/db-trigger/db-trigger.handler\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    \n    # IAM Policies for IamRoleLambdaExecution\n    # Full access to photo albums\n    IAMPolicyPhotoAlbums:\n      DependsOn: IamRoleLambdaExecution\n      Type: AWS::IAM::Policy\n      Properties: \n        Roles:\n          - Ref: IamRoleLambdaExecution\n        PolicyName: ${self:custom.s3Bucket}-full-access\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action: s3:*\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n\n    # S3 Bucket Policy - web access\n    S3BucketPolicyPhotoAlbums:\n      DependsOn: S3BucketZaymusskbackend${self:provider.stage}photoalbums\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.s3Bucket}\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action: s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n              Principal: '*'\n    \n    # Table Albums\n    DynamoDBTableAlbums:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:TABLE_ALBUMS}\n        AttributeDefinitions:\n          - AttributeName: albumId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: albumId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    # Table Photos\n    DynamoDBTablePhotos:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:TABLE_PHOTOS}\n        AttributeDefinitions:\n          - AttributeName: albumId\n            AttributeType: S       \n          - AttributeName: photoId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: albumId\n            KeyType: HASH\n          - AttributeName: photoId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n    # Table Photos Stream Event          \n    EventTablePhotos:\n      DependsOn: DynamoDBTablePhotos\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 25\n        EventSourceArn:\n          Fn::GetAtt: [DynamoDBTablePhotos, StreamArn]\n        FunctionName:\n          Fn::GetAtt: [TriggerLambdaFunction, Arn]\n        StartingPosition: TRIM_HORIZON\n"]},{"id":103029797,"files":["service: api\n\ncustom: \n  region: 'eu-west-1'\n  stage: 'dev'\n\nprovider:\n  name: aws\n  role: xmyCustRole1 \n  apiKeys:\n    - myApiKey  \n  runtime: nodejs6.10\n  region: eu-west-1  \n  environment:\n    REGION: ${self:provider.region} \n    PLATFORM_APP_ARN: ${file(./serverless.env.yml):${self:custom.stage}.PLATFORM_APP_ARN}\n\nfunctions:\n  create:\n    handler: sns/endpoint/create.create\n    events:\n      - http:\n          path: endpoint/create\n          method: post\n          cors: true\n          private: true\n\n  delete:\n    handler: sns/endpoint/delete.delete\n    events:\n      - http:\n          method: delete\n          cors: true\n          private: true\n          path: endpoint/delete\n          # path: endpoint/delete/{id}\n          # request: \n          #   parameters: \n          #     paths: \n          #       id: true\n\n  list:\n    handler: sns/endpoint/list.list\n    events:\n      - http:\n          path: endpoint/list\n          method: get\n          cors: true          \n          authorizer:\n            name: authorizer\n            arn: ${file(./serverless.env.yml):${self:custom.stage}.COGNITO_POOL_ARN}\n\nresources:\n  Resources:\n    # PetsModelNoFlatten: \n    #   Type: \"AWS::ApiGateway::Model\"\n    #   Properties: \n    #     RestApiId: {Ref: ApiGatewayRestApi}\n    #     ContentType: \"application/json\"\n    #     Description: \"Schema for Pets example\"\n    #     Name: \"PetsModelNoFlatten\"\n    #     Schema: \n    #       Fn::Join: \n    #         - \"\"\n    #         - \n    #           - \"{\"\n    #           - \"   \\\"$schema\\\": \\\"http://json-schema.org/draft-04/schema#\\\",\"\n    #           - \"   \\\"title\\\": \\\"PetsModelNoFlatten\\\",\"\n    #           - \"   \\\"type\\\": \\\"array\\\",\"\n    #           - \"   \\\"items\\\": {\"\n    #           - \"       \\\"type\\\": \\\"object\\\",\"\n    #           - \"       \\\"properties\\\": {\"\n    #           - \"           \\\"number\\\": { \\\"type\\\": \\\"integer\\\" },\"\n    #           - \"           \\\"class\\\": { \\\"type\\\": \\\"string\\\" },\"\n    #           - \"           \\\"salesPrice\\\": { \\\"type\\\": \\\"number\\\" }\"\n    #           - \"       }\"\n    #           - \"   }\"\n    #           - \"}\"\n    xmyCustRole1:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/cust/path/\n        RoleName: xmyCustRole1\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - sns:CreatePlatformEndpoint\n                    - sns:ListEndpointsByPlatformApplication\n                    - sns:DeleteEndpoint\n                  Resource: arn:aws:sns:*:*:*           \n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:PutObject\"\n                  Resource:\n                    Fn::Join:\n                      - \"\"\n                      - - \"arn:aws:s3:::\"\n                        - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n                        \n\n"]},{"id":94027146,"files":["service: firm\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    VAR: \"test\"\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n\nfunctions:\n  firm:\n    handler: handler.run\n    memorySize: 128\n    timeout: 35\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":103465571,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  buffer:\n    handler: handler.buffer\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http: POST buffer\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":103337979,"files":["service: nkcgoadmin\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-plugin-multiple-responses\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  profile: ${file(./config/aws_params.yml):profile}\n  region: ${file(./config/aws_params.yml):region}\n  stage: ${file(./config/aws_params.yml):stage}\n  tags: \n    env: ${file(./config/aws_params.yml):stage}\n  memorySize: 1536\n  stackTags: \n    projectname: nkcgoadmin\n  deploymentBucket: us.fiduciam.nkcgoadmin.api.deploys\n  versionFunctions: true\n  runtime: nodejs6.10\n  apiKeys: false\n  environment:\n    DYNAMODB_USER_TABLE: swiftmile-prod-User\n    DYNAMODB_SNAP_TABLE: swiftmile-prod-Snap\n    DYNAMODB_BADGE_TABLE: swiftmile-prod-Badges\n    DYNAMODB_USER_BADGES_TABLE: swiftmile-prod-UserBadges\n\n    AUTH0_CLIENT: ${file(./config/aws_params.yml):AUTH0_CLIENT_ID}\n    AUTH0_SECRET: ${file(./config/aws_params.yml):AUTH0_CLIENT_SECRET}\n    AUTH0_DOMAIN: ${file(./config/aws_params.yml):AUTH0_DOMAIN}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_BADGES_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SNAP_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_BADGE_TABLE}\"\n  stackPolicy: \n    - Effect: Allow\n      Principal: \"*\"\n      Action: \"Update:*\"\n      Resource: \"*\"\n    - Effect: Deny\n      Principal: \"*\"\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n\nfunctions: ${file(./config/functions.yml):functions}"]},{"id":102905131,"files":["service: todo-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: dev\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        \"Fn::GetAtt\": [ todoTable, Arn ]\n\nfunctions:\n  todos:\n    handler: handler.todos\n    events:\n      - http:\n          path: todos/list\n          method: get\n          cors: true\n      - http:\n          path: todos/update/{id}\n          method: put\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n      - http:\n          path: todos/update/{id}\n          method: delete\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n      - http:\n          path: todos/create\n          method: post\n          cors: true\n\nplugins:\n  - serverless-webpack\n#   - serverless-domain-manager\n\n# custom:\n#   customDomain:\n#     basePath: \"urls\"\n#     domainName: todos.example.com\n#     stage: dev\n\nresources:\n  Resources:\n    todoTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"title\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"title\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: \"5\"\n          WriteCapacityUnits: \"5\"\n        GlobalSecondaryIndexes:\n          -\n            IndexName: \"todoGSI\"\n            KeySchema:\n              -\n                AttributeName: \"title\"\n                KeyType: \"HASH\"\n            Projection:\n              NonKeyAttributes:\n                - \"description\"\n              ProjectionType: \"INCLUDE\"\n            ProvisionedThroughput:\n              ReadCapacityUnits: \"5\"\n              WriteCapacityUnits: \"5\"\n  Outputs:\n    TodoTableArn:\n      Description: \"Todo Table Arn\"\n      Value:\n        \"Fn::GetAtt\": [ todoTable, Arn ]\n"]},{"id":103017582,"files":["service: es6-generators\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  getPage:\n    handler: handler.fetcher"]},{"id":102529111,"files":["service: karma-weekly-front\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-client-s3\n\ncustom:\n  client:\n    bucketName: ${env:BUCKET_NAME}\n"]},{"id":102388688,"files":["# Welcome to Serverless!\n\n\nservice: poc-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-south-1\n\n\n# you can define service wide environment variables here\n  environment:\n    PGUSER: ${file(env.json):user}\n    PGHOST: ${file(env.json):host}\n    PGPASSWORD: {file(env.json):password}\n    PGDATABASE: {file(env.json):db}\n    PGPORT: {file(env.json):port}\n\n\nfunctions:\n  createUser:\n    # handlers folder has all the createUser file has createUser function which is the handler\n    handler: handlers/createUser.createUser\n    events:\n      - http:\n            path: users\n            method: post\n\n  listUsers:\n    # handlers folder has all the createUser file has createUser function which is the handler\n    handler: handlers/getUsers.listUsers\n    events:\n      - http:\n            path: users\n            method: get"]},{"id":100805062,"files":["service: serverless-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: GET\n          path: hello\n          integration: lambda-proxy\n"]},{"id":100175825,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-south-1\n  profile: shubham-demo\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: first-endpoint\n          method: GET\n      - http:\n          path: first-endpoint\n          method: POST\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    uploadbucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-uploads\n    userTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-users\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":80564148,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rizowski-net\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n include:\n   - node_modules\n   - functions\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getLatestPhoto:\n    handler: handler.latestPhoto\n  getGoogleLogo:\n    handler: handler.getGoogleLogo\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":99386763,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: caerurfapugsAPI\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  profile: serverless-admin\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"ses:SendEmail\"\n       Resource:\n         - \"*\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  mailinglist:\n    handler: handler.mailinglist\n    environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n    events:\n      - http:\n          path: mailinglist\n          method: post\n  enquiry:\n    handler: handler.enquiry\n    environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n    events:\n      - http:\n          path: enquiry\n          method: post\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":99253050,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: home-assistant # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - node_modules/**\n\nfunctions:\n  homeAssistant:\n    handler: handler.homeAssistant\n    events:\n        - alexaSkill\n        \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":98763152,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: msgblast-api\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  ping:\n    handler: handler.ping\n    # The `events` block defines how to trigger the handler.ping code\n    events:\n       - http:\n          path: /\n          method: get\n  send:\n    handler: handler.send\n    events:\n      - http:\n         path: send\n         method: post\n"]},{"id":97417752,"files":["service: wikitags-renderer-v2\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\ncustom:\n  webpack: ./webpack.serverless.config.js\n\nfunctions:\n\n  home:\n    handler: handler.home\n    events:\n      - http:\n          method: post\n          path: home\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  login:\n    handler: handler.login\n    events:\n      - http:\n          method: post\n          path: login\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  category:\n        handler: handler.category\n        events:\n          - http:\n              method: post\n              path: category\n              integration: lambda\n              response:\n                headers:\n                  Content-Type: \"'text/html'\"\n                template: $input.path('$')\n              authorizer:\n                type: aws_iam\n  entity:\n      handler: handler.entity\n      events:\n        - http:\n            method: post\n            path: entity\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  lists:\n      handler: handler.lists\n      events:\n        - http:\n            method: post\n            path: lists\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  profile:\n      handler: handler.profile\n      events:\n        - http:\n            method: post\n            path: profile\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  create_list:\n      handler: handler.create_list\n      events:\n        - http:\n            method: post\n            path: create_list\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_tags:\n      handler: handler.add_tags\n      events:\n        - http:\n            method: post\n            path: add_tags\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_modifiers:\n      handler: handler.add_modifiers\n      events:\n        - http:\n            method: post\n            path: add_modifiers\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  trends:\n      handler: handler.trends\n      events:\n        - http:\n            method: post\n            path: trends\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n\n","service: wikitags-renderer\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\ncustom:\n  webpack: ./webpack.serverless.config.js\n\nfunctions:\n  login:\n    handler: handler.login\n    events:\n      - http:\n          method: get\n          path: login\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  home:\n    handler: handler.home\n    events:\n      - http:\n          method: get\n          path: home\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  category:\n      handler: handler.category\n      events:\n        - http:\n            method: get\n            path: category\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  entity:\n      handler: handler.entity\n      events:\n        - http:\n            method: get\n            path: entity\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  lists:\n      handler: handler.lists\n      events:\n        - http:\n            method: get\n            path: lists\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  profile:\n      handler: handler.profile\n      events:\n        - http:\n            method: get\n            path: profile\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  create_list:\n      handler: handler.create_list\n      events:\n        - http:\n            method: get\n            path: create_list\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_tags:\n      handler: handler.add_tags\n      events:\n        - http:\n            method: get\n            path: add_tags\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_modifiers:\n      handler: handler.add_modifiers\n      events:\n        - http:\n            method: get\n            path: add_modifiers\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n\n"]},{"id":80999031,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n\n\nservice: sl-departures\n\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  stage: dev\n  region: eu-west-1\n\n\nfunctions:\n  stop:\n    handler: handler.stop\n    environment: \n      SL_REAL: ${env:SL_REAL}\n    events:\n      - http:\n          path: stop/{id}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                id: true\n          cors:\n            origins:\n              - ${env:SL_ORIGINS}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false  \n  \n  search:\n    handler: handler.search\n    environment: \n      SL_REAL: ${env:SL_PLATS}\n    events:\n      - http:\n          path: search/{q}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                q: true\n          cors:\n            origins:\n              - ${env:SL_ORIGINS}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false    \n"]},{"id":85813602,"files":["service: bakery \n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-2\n  environment:\n    STATUS_CAKE_API_KEY: ${env:STATUS_CAKE_API_KEY}\n    STATUS_CAKE_USER: ${env:STATUS_CAKE_USER}\n\nfunctions:\n  post:\n    handler: handler.createOrUpdate\n    events:\n      - http: POST statuscheck\n\nresources: \n  Resources:\n    bakeryTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: bakery\n        AttributeDefinitions:\n          - AttributeName: stackName\n            AttributeType: S\n          - AttributeName: endpoint\n            AttributeType: S\n        KeySchema:\n          - AttributeName: stackName\n            KeyType: HASH\n          - AttributeName: endpoint\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: bakeryTable\n      Properties:\n        PolicyName: bakery-lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DeleteItem\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n              Resource: arn:aws:dynamodb:*:*:table/bakery\n        Roles:\n          - Ref: IamRoleLambdaExecution\n\n"]},{"id":95447436,"files":["service:\n  name: chee\n  awsKmsKeyArn: arn:aws:kms:us-east-1:710390882138:key/bbbc300d-ac65-4e10-a4d8-4ae43008ae13\n\npackage:\n  include:\n    - lib/**\n    - data/**\n    - conf/**\n    - node_modules/serverless-dynamodb-local/**\n\n  exclude:\n    - README.md\n    - Makefile\n    - LICENSE\n\ncustom:\n  creds: ${file(./config.yml)}\n  bucket: chee\n  ccl_bucket: tds-slack\n  tables:\n    users: karma_users\n    scores: karma_scores\n  dynamodb:\n    start:\n      inMemory: true\n      migrate: true\n  serverless-offline:\n    port: 4000\n\nprovider:\n  name: aws\n  memory: 128\n  runtime: nodejs6.10\n  timeout: 3\n  stage: dev\n  profile: serverless\n  environment:\n    SLACK_CLIENT_ID: ${self:custom.creds.slack_client_id}\n    SLACK_CLIENT_SECRET: ${self:custom.creds.slack_client_secret}\n    SLACK_VERIFICATION_TOKEN: ${self:custom.creds.slack_verification_token}\n    MASHAPE_API_KEY: ${self:custom.creds.mashape_api_key}\n    DYNAMODB_USER_TABLE: ${self:custom.tables.users}\n    DYNAMODB_SCORE_TABLE: ${self:custom.tables.scores}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        - \"arn:aws:s3:::${self:custom.ccl_bucket}/*\"\n        - \"arn:aws:s3:::${self:custom.ccl_bucket}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  ccl:\n    handler: lib/ccl/get.do\n    name: ${self:provider.stage}-ccl\n    description: Too many ccliters gifs\n    events:\n        - http:\n            path: ccl\n            method: post\n  plus:\n    handler: lib/score/score.plus\n    name: ${self:provider.stage}-score-plus\n    description: ++ a thing\n    events:\n        - http:\n            path: score/plus\n            method: post\n  minus:\n    handler: lib/score/score.minus\n    name: ${self:provider.stage}-score-minus\n    description: -- a thing\n    events:\n        - http:\n            path: score/minus\n            method: post\n  top:\n    handler: lib/score/score.top\n    name: ${self:provider.stage}-score-top\n    description: Get top scorers\n    events:\n        - http:\n            path: score/top\n            method: post\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tables.users}\n        AttributeDefinitions:\n          - AttributeName: team_id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n          - AttributeName: score\n            AttributeType: N\n          - AttributeName: karma\n            AttributeType: N\n        KeySchema:\n          - AttributeName: team_id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        LocalSecondaryIndexes:\n          - IndexName : users-team-score\n            KeySchema:\n              - AttributeName: team_id\n                KeyType: HASH\n              - AttributeName: score\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n               - \"karma\"\n               - \"id\"\n               - \"name\"\n              ProjectionType: INCLUDE\n          - IndexName : users-team-karma\n            KeySchema:\n              - AttributeName: team_id\n                KeyType: HASH\n              - AttributeName: karma\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n               - \"score\"\n               - \"id\"\n               - \"name\"\n              ProjectionType: INCLUDE\n\n    scoresTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tables.scores}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: date\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: date\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n"]},{"id":96702423,"files":["service: serverless-hello-world\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n  world:\n    handler: handler.work"]},{"id":96393903,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice:  # NOTE: update this with your service name or Your user name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: # AWS Region for lambda\n  stage: dev\n  memorySize: 128 # default memory size of lambda, you can overwrite for individual functions.\n  deploymentBucket: # Deployment bucket name. Default is generated by the framework\n  environment:   # Define function environment variables here\n    aws_account:  # AWS account number, this number will be for ReportGarden\n    access_key:  # AWS Access Key\n    secret_key:  # AWS Secret Key\n    region:  # AWS Region\n    sns_topic:  # If you change kindly change subscribe\n\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules:\n    packagePath: './package.json'\n\nfunctions:\n  publish:\n    handler: handler.publish\n    events:\n      - http:\n          path: publish\n          method: post\n  subscribe:\n    handler: handler.subscribe\n    events:\n      - sns: pdf-print\n"]},{"id":94599931,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ow-help-wanted\ncustom:\n  config: ${file(config.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${opt:profile, env:PROFILE, self:custom.config.profile}\n  stage: ${opt:stage, env:STAGE, self:custom.config.stage}\n  region: us-east-1\n\n# you can overwrite defaults here\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    GITHUB_AUTH_TOKEN: ${env:GITHUB_AUTH_TOKEN, self:custom.config.github_auth_token}\n    GITHUB_USERNAME: ${env:GITHUB_USERNAME, self:custom.config.github_username}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  githubData:\n    handler: handler.githubData\n    events:\n      - http:\n          path: /github-data\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":95795395,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: pinboard-descriptions\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless-admin\n\nfunctions:\n  updateLinkDescription:\n    handler: handler.endpoint\n    environment:\n      AUTH_CODE: ${env:PINBOARD_AUTH_CODE}\n    events:\n      - http:\n          path: update-link\n          method: post\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]}]