[{"id":103182151,"files":["# A serverless service that sends out emails\n\nservice:\n  name: email\n  description: 'A service for sending emails.'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  sendWelcomeEmail:\n    handler: handler.sendWelcomeEmail\n    events:\n      - user.registered\n","# users-api crud service\n\nservice:\n  name: users\n  description: 'Users CRUD service.'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - http:\n          path: /users\n          method: POST\n"]},{"id":98796768,"files":["service: mdcloud-serverless\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 20\n  region: us-east-1\n  environment:\n    apikey: ${self:custom.apikey}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:SendMessage\n      Resource: \"arn:aws:sqs:*:*:${self:custom.sqs}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n      Resource: \"arn:aws:sns:*:*:${self:custom.snsEmail}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - \"*\"\n\npackage:\n exclude:\n   - node_modules/aws-sdk/**\n   - event_samples/**\n   - .vscode/**\n\nfunctions:\n  task:\n    handler: task.handler\n    name: task\n    environment:\n      sqs: ${self:custom.sqs}\n\n  scan:\n    handler: scan.handler\n    name: scan\n    environment:\n      sqs: ${self:custom.sqs}\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n\n  worker:\n    handler: worker.handler\n    name: worker\n    environment:\n      sqs: ${self:custom.sqs}\n      lambda: task\n    events:\n      - schedule: rate(1 minute)\n      - sns: ${self:custom.sns}\n\nresources:\n  Resources:\n    BacklogQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: '1209600'\n        VisibilityTimeout: '60'\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - DeadLetterQueue\n            - Arn\n          maxReceiveCount: '10'\n\n    DeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: '1209600'\n\n    QueueDepthAlarmOver100:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        AlarmDescription: Alarm if queue depth grows beyond 100 messages\n        Namespace: AWS/SQS\n        MetricName: NumberOfMessagesVisible\n        Dimensions:\n        - Name: QueueName\n          Value: ${self:custom.sqs}\n        Statistic: Sum\n        Period: '60'\n        EvaluationPeriods: '1'\n        Threshold: '100'\n        ComparisonOperator: GreaterThanOrEqualToThreshold\n        AlarmActions:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.sns}\" ] ]  }\n\n    MailQueue:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"Serverless Mail\"\n        TopicName: ${self:custom.snsEmail}\n        Subscription:\n          - Endpoint: ${self:custom.mailTo}\n            Protocol: \"email\""]},{"id":102528939,"files":["service: karma-weekly-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    USER_TABLE_NAME: \"${self:service}-${opt:stage, self:provider.stage}-user\"\n    SUBREDDIT_ISSUE_TABLE_NAME: \"${self:service}-${opt:stage, self:provider.stage}-subreddit_issue\"\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:Scan\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  sendSubredditNewsletters:\n    handler: handler.sendSubredditNewsletters\n    memorySize: 512\n    timeout: 600\n\n  graphql:\n    handler: handler.graphql\n    memorySize: 512\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n          integration: lambda-proxy\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.USER_TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: \"email\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"email\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    SubredditIssueDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.SUBREDDIT_ISSUE_TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: \"name\"\n            AttributeType: \"S\"\n          - AttributeName: \"date\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"name\"\n            KeyType: \"HASH\"\n          - AttributeName: \"date\"\n            KeyType: \"RANGE\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":96934931,"files":["service: dictbot\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  environment: ${file(env.yml)}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lex:PostContent\"\n        - \"lex:PostText\"\n        - \"polly:SynthesizeSpeech\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n        - \"s3:PutObjectTagging\"\n      Resource:\n        - 'Fn::ImportValue': dictbot-s3-polly-cache-bucket-arn\n        - 'Fn::Join':\n            - '/'\n            - - 'Fn::ImportValue': dictbot-s3-polly-cache-bucket-arn\n              - '*'\n\npackage:\n  exclude:\n    - '.*'\n    - '*.iml'\n    - 'env.yml*'\n    - 'cloudformation/*'\n    - 'data/*'\n    - 'utils/*'\n\nfunctions:\n  facebook-get:\n    handler: facebook.get\n    description: GET handler for verification\n    memorySize: 128\n    timeout: 5\n    events:\n      - http: GET /\n  facebook-post:\n    handler: facebook.post\n    description: POST handler for receiving and sending json\n    memorySize: 128\n    timeout: 35\n    events:\n      - http: POST /\n  lex-handler:\n    handler: lex.handler\n    description: Lex handler\n    memorySize: 128\n    timeout: 30\n    environment:\n      POLLY_CACHE_S3_BUCKET_NAME:\n        'Fn::ImportValue': dictbot-s3-polly-cache-bucket-name\n\nresources:\n  Resources:\n    FacebookDashgetLogGroup:\n      Properties:\n        RetentionInDays: 7\n    FacebookDashpostLogGroup:\n      Properties:\n        RetentionInDays: 7\n    LexDashhandlerLogGroup:\n      Properties:\n        RetentionInDays: 7\n"]},{"id":98621131,"files":["\nservice: aws-stop-rds\npackage:\n  include:\n   - lib/**\n  exclude:\n    - src/**\n    - test/**\n    - reports/**\n    - package.json\n    - .gitignore\n    - .babelrc\n    - .eslintrc.json\n    - README.md\n    - .gitignore\n    - .nvmrc\n    - yarn.lock\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # you can overwrite defaults here\n  #  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n        - rds:*\n    Resource: \"*\"\n\nfunctions:\n      stop:\n        handler: lib/index.stop\n        events:\n         - schedule:\n             name: stop-rds-scheduler\n             description: 'scheduled stop fn for rds instances'\n             rate: cron(0 8 ? * MON-FRI *)\n"]},{"id":101657534,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: letter-avatar\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  profilePic:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: letterAvatar/{initials}\n          method: get\n          request:\n            parameters:\n              paths:\n                initials: true\n"]},{"id":99372691,"files":["service: monolambda-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: us-east-2\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n    - resources/**\n    - README.md\n    - LICENSE\n    - .eslintrc\n  \nfunctions:\n  contactForm:\n    description: Handles submitted contact forms on monolambda.com\n    handler: src/functions/contactForm/contactForm.handleMessage\n    memorySize: 256\n    timeout: 3\n    events:\n      - http:\n          path: contact-form\n          method: POST\n          cors: true\n  healthCheck:\n    description: Handles health check for all other functions\n    handler: src/functions/healthCheck/healthCheck.handleHealthCheck\n    memorySize: 128\n    timeout: 3\n    events:\n      - http:\n          path: health-check\n          method: GET\n          cors: true"]},{"id":101562132,"files":["service: elm-serverless-auth-jwt-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    dontPrintOutput: true\n\nfunctions:\n  hello:\n    handler: src/Auth/api.handler\n    events:\n      - http:\n          integration: lambda-proxy\n          path: /\n          method: ANY\n"]},{"id":56586796,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ThreeScale\n\nprovider:\n  profile: 3scale\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1 #CHANGE IT TO YOUR OWN\n  stage: dev\n  iamRoleStatements:\n    $ref: ./iamRoleStatements.json\n  vpc:\n    securityGroupIds:\n     - 'Fn::GetAtt': SecurityGroup.GroupId\n    subnetIds:\n     - Ref: PrivateSubnet1\n     - Ref: PrivateSubnet2\n\n  environment:\n   SERVERLESS_REGION: \"${self:provider.region}\"\n   THREESCALE_PROVIDER_KEY: \"YOUR_PROVIDER_KEY\"\n   THREESCALE_SERVICE_TOKEN: \"YOUR_SERVICE_TOKEN\" #CHANGE IT TO YOUR OWN\n   THREESCALE_SERVICE_ID: \"YOUR_SERVICE_ID\" #CHANGE IT TO YOUR OWN\n   THREESCALE_AUTH_TYPE: \"APIKEY\"\n   IDP_URL: \"YOUR_IDENTITY_PROVIDER_URL\"\n   ELASTICACHE_ENDPOINT:\n     Fn::GetAtt:\n       - elasticCache\n       - RedisEndpoint.Address\n   ELASTICACHE_PORT: 6379\n\n# CloudFormation resource templates\nresources:\n  - ${file(cf-resources.yml)}\n\ncustom:\n  AWS_ACCOUNTID: \"YOUR_AWS_ACOUNT_ID\" #change it to REF ?\n\nfunctions:\n  authorizer:\n    handler: handler.authorizer\n    environment:\n      SNS_AUTHREP_ARN: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleAuthRepAsync\"\n  authRepAsync:\n    handler: handler.authRepAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleAuthRepAsync\"\n  getToken:\n    handler: oauth.getToken\n    events:\n      - http:\n          path: oauth/token\n          method: post\n    environment:\n      SNS_OAUTH_SYNC_ARN: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n  storeInCacheAsync:\n    handler: oauth.storeInCacheAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n  storeOnThreescaleAsync:\n    handler: oauth.storeOnThreescaleAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n"]},{"id":100981199,"files":["service: boldleads-serverless-aws-lambda-mysql-boilerplate\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n\tvpc:\n\t\tsecurityGroupIds:\n\t\t\t- sg-1034ad6b\n\t\tsubnetIds:\n      - subnet-66246b01\n      - subnet-ca926291\n      - subnet-f07117b9\nplugins:\n  - serverless-webpack\ncustom:\n  - webpackIncludeModules: true\nfunctions:\n  read:\n    handler: handler.read\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":99508321,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  buffer:\n    handler: handler.buffer\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http: POST buffer\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":100319189,"files":["service: serverless-nodejs-auth\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: dev\n  profile: ypur-aws-profile\n  memorySize: 512\n  timeout: 60\n  environment: ${file(env-${self:custom.stage}.yml):environment}\n\n\npackage:\n  include:\n    - src/**\n  exclude:\n    - tmp/**\n    - .git/*\n    - node_modules/**\n    - .coverage/**\n    - tests/**\n    - .jsconfig\n    - .travis.yml\n\nfunctions:\n  login:\n    handler: src/auth/login.handler\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  publicEndpoint:\n    handler: src/auth/endpoint.publicEndpoint\n    events:\n      - http:\n          path: publicEndpoint\n          method: get\n          cors: true\n\n  privateEndpoint:\n    handler: src/auth/endpoint.privateEndpoint\n    events:\n      - http:\n          path: privateEndpoint\n          method: get\n          cors: true\n          authorizer: authorizer          \n\n  authorizer:\n    handler: src/auth/authorizer.handler\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n"]},{"id":97630818,"files":["service: services\n\n# Pin your service to only deploy with a specific Serverless version\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  # Use the stage CLI option if it exists, if not, use the default stage\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false # Optional function versioning\n  # Service defaults\n  stage: dev\n  region: us-east-1\n  # Service env variables\n  environment: ${file(serverless-${self:custom.stage}.env.yml)}\n\nfunctions:\n  function1:\n    handler: service1/handler.handle\n    environment: ${file(service1/serverless-${self:custom.stage}.env.yml)}\n  function2:\n    handler: service2/handler.handle\n"]},{"id":98127471,"files":["service: s3-ensure-logging-enabled\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetBucketLogging\"\n        - \"s3:PutBucketLogging\"\n      Resource: \"arn:aws:s3:::*\"\nfunctions:\n  S3LoggingEnforcer:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n    environment:\n      LOG_BUCKET: ${opt:logbucket}\n","service: s3-ensure-versioning-enabled\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetBucketVersioning\"\n        - \"s3:PutBucketVersioning\"\n      Resource: \"arn:aws:s3:::*\"\nfunctions:\n  S3VersioningEnforcer:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n","service: open-bucket-notifier\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: ${opt:snsTopicArn}\nfunctions:\n  S3OpenBucketNotifier:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n                - \"DeleteBucketPolicy\"\n                - \"PutBucketAcl\"\n                - \"PutBucketPolicy\"\n    environment:\n      SNS_TOPIC_ARN: ${opt:snsTopicArn}\n","service: open-object-notifier\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: ${opt:snsTopicArn}\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObjectAcl\"\n      Resource: \"*\"\nfunctions:\n  S3OpenBucketNotifier:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"PutObjectAcl\"\n    environment:\n      SNS_TOPIC_ARN: ${opt:snsTopicArn}\n"]},{"id":98594215,"files":["service: serverless-store\n\ncustom:\n  awsAccountId: 1234567890  \n  cognitoAuthorizer: arn:aws:cognito-idp:us-east-1:${self:custom.awsAccountId}:userpool/us-east-1_aBcdeFghi\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  timeout: 30\n  environment:\n    IOT_ENDPOINT: abcdefghijklm.iot.us-east-1.amazonaws.com\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sdb:BatchPutAttributes\"\n        - \"sdb:PutAttributes\"\n        - \"sdb:Select\"\n      Resource: [\n        \"arn:aws:sdb:us-east-1:*:domain/Products\",\n        \"arn:aws:sdb:us-east-1:*:domain/ShoppingCart\"\n      ]\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Scan\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:BatchWriteItem\"\n      Resource: [\n        \"arn:aws:dynamodb:us-east-1:*:table/Products\",\n        \"arn:aws:dynamodb:us-east-1:*:table/ShoppingCart\"\n      ]\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource: \n        \"arn:aws:iot:${self:provider.region}:${self:custom.awsAccountId}:topic/serverless-store-*\"\n\nfunctions:\n  products:\n    handler: functions/products.handler\n    events:\n      - http: GET products\n      - http:\n          method: GET\n          path: productsAuth\n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}          \n      - http: OPTIONS productsAuth\n      - http:\n          method: POST\n          path: cart\n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}\n      - http: OPTIONS cart\n      - http:\n          method: PUT\n          path: checkout  \n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}\n      - http: OPTIONS checkout\n      \n  comments:\n    handler: functions/comments.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'serverless-store-comments'\"\n          "]},{"id":80010316,"files":["# Service name\nservice: slackmonitor\n\n# AWS details\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n  deploymentBucket: nuk-tnl-editorial-prod-serverless-deployments\n\n# Lambda functions\nfunctions:\n  slackmonitor:\n    # Entry point\n    handler: src/handler.handler\n    # Function triggers\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: post\n          path: /\n    # Env vars (from a separate env file)\n    environment:\n      CLIENT_ID: ${file(env.yml):CLIENT_ID}\n      CLIENT_SECRET: ${file(env.yml):CLIENT_SECRET}\n      REDIRECT_URI: ${file(env.yml):REDIRECT_URI}\n"]},{"id":97141817,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: test/hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":30213191,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: call\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: io-serverless-admin\n  memorySize: 512\n\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n\nplugins:\n  - serverless-secrets-plugin\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  #  hello:\n  #    handler: handler.hello\n  #\n  ##    The following are a few example events you can configure\n  ##    NOTE: Please make sure to change your handler code to work with those events\n  ##    Check the event documentation for details\n  #    events:\n  #      - http:\n  #          path: call\n  #          method: any\n  hellotwiml:\n    handler: handler.hellotwiml\n    environment:\n      PHONE_NUMBER: ${self:custom.secrets.PHONE_NUMBER}\n      CALLER_ID: ${self:custom.secrets.CALLER_ID}\n      TIMEZONE: ${self:custom.secrets.TIMEZONE}\n      DOOR_ACCESS_CALENDAR_URL: ${self:custom.secrets.DOOR_ACCESS_CALENDAR_URL}\n    events:\n      - http:\n          path: ${self:service}/twiml\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$\")\n            statusCodes:\n              200:\n                pattern: ''\n                template:\n                  application/json: $input.path(\"$\")\n                headers:\n                  Content-Type: \"'application/xml'\"\n\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sms\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: io-serverless-admin\n  memorySize: 512\n\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n\nplugins:\n  - serverless-secrets-plugin\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  #  hello:\n  #    handler: handler.hello\n  #\n  ##    The following are a few example events you can configure\n  ##    NOTE: Please make sure to change your handler code to work with those events\n  ##    Check the event documentation for details\n  #    events:\n  #      - http:\n  #          path: call\n  #          method: any\n  hellotwiml:\n    handler: handler.hellotwiml\n    environment:\n      PHONE_NUMBER: ${self:custom.secrets.PHONE_NUMBER}\n      CALLER_ID: ${self:custom.secrets.CALLER_ID}\n      TIMEZONE: ${self:custom.secrets.TIMEZONE}\n      DOOR_ACCESS_CALENDAR_URL: ${self:custom.secrets.DOOR_ACCESS_CALENDAR_URL}\n    events:\n      - http:\n          path: ${self:service}/twiml\n          method: post\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$\")\n            statusCodes:\n              200:\n                pattern: ''\n                template:\n                  application/json: $input.path(\"$\")\n                headers:\n                  Content-Type: \"'application/xml'\"\n\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":96679600,"files":["service: {{serviceName}}\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n  region: eu-west-1\n  timeout: 20\n  stage: ${opt:stage}\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  api:\n    name: ${self:service}-${self:provider.stage}\n    description: ${self:service} - ${self:provider.stage}\n    handler: server-lambda.handler\n    events:\n      - http:\n         path: /\n         method: get\n      - http:\n         path: /{proxy+}\n         method: get"]},{"id":97749874,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-rest-api\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:DescribeTable\n        - dynamodb:Query \n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/contacts\"\n\nfunctions:\n  create:\n    handler: phone-directory/create.create\n    events:\n    - http:\n        path: phone-directory\n        method: post\n        cors: true\n  list:\n    handler: phone-directory/list.list\n    events:\n    - http:\n        path: phone-directory\n        method: get\n        cors: true\n  get:\n    handler: phone-directory/get.get\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: get\n        cors: true\n  update:\n    handler: phone-directory/update.update\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: put\n        cors: true\n  delete:\n    handler: phone-directory/delete.delete\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: delete\n        cors: true\n\nresources:\n  Resources:\n    PhoneDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'contacts'"]},{"id":97499841,"files":["service: test-webhook-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  webhookConsumer:\n    handler: handler.endpoint\n    environment:\n      WEBHOOK_TOKEN: \"SAMPLE_WEBHOOK_TOKEN\"\n    events:\n      - http:\n          path: webhook\n          method: post\n"]},{"id":97376923,"files":["service: ns-backup\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${file(./env.yml):region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"S3BucketBackup\" } ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"S3BucketBackup\" }, \"/*\" ] ]  }\n\nfunctions:\n  backup:\n    handler: handler.backup\n    timeout: 300\n    environment: ${file(./env.yml):lambda}\n    events:\n      - schedule: rate(1 day)\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    S3BucketBackup:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(./env.yml):lambda.s3Bucket}\n  Outputs:\n    S3BucketBackup:\n      Description: S3 backup bucket arn\n      Value:\n         \"Fn::GetAtt\": [ S3BucketBackup, Arn ]\n\n"]},{"id":97208964,"files":["service: botmatic-assistant\nprovider:\n  name: aws\n  profile: default\n  runtime: nodejs6.10\n  stage: ${opt:stage}\n  region: eu-west-2\n  memorySize: 512\n  timeout: 300\n  environment:\n    CONFIG: ${file(./config/${self:provider.stage}/config.json.config)}\n\nfunctions:\n  api:\n    handler: api.handler\n    events:\n      - http:\n          cors: true\n          method: post\n          path: api\n\n  query:\n    handler: query.handler\n    events:\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .csv\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .xlsx\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .xls\n\nresources:\n  Resources:\n    user:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_user\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    userSession:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_user_session\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    queryCache:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_query_cache\n        AttributeDefinitions:\n          - AttributeName: id # sha256'd query\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    documentBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}_document_bucket\n\n    siteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}_site_bucket\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-dynamodb-ttl\n  - serverless-offline\n  - serverless-s3-deploy\n  - serverless-s3-local\n  - serverless-webpack\n\ncustom:\n  assets:\n    auto: true\n    targets:\n      - bucket: ${self:provider.stage}_site_bucket\n        files:\n          - source: ../client/\n            globs: '**/*'\n\n  dynamodb:\n    start:\n      port: 18764\n      inMemory: true\n      migrate: true\n      seed: true\n    ttl:\n      - table: ${self:provider.stage}_user_session\n        field: ttl\n    seed:\n      domain:\n        sources:\n          - table: ${self:provider.stage}_user\n            sources: [./seed/staging/db/user.json]\n\n  s3:\n    port: 52361\n    cors: true\n    directory: ./build/tmp\n    buckets:\n      - ${self:provider.stage}_document_bucket\n\n  serverless-offline:\n    port: 4000\n\n  webpack: ./webpack/config/server.js\n      \n  webpackIncludeModules: true\n"]},{"id":96488255,"files":["service: glad-starter\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nresources:\n  Resources:\n    users:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          - AttributeName: username\n            AttributeType: S\n        KeySchema:\n          - AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nfunctions:\n  signup:\n    handler: src/authentication.signup\n    events:\n      - http:\n          path: signup\n          method: post\n  login:\n    handler: src/authentication.login\n    events:\n      - http:\n          path: login\n          method: post\n  logout:\n    handler: src/authentication.logout\n    events:\n      - http:\n          path: logout\n          method: post\n\n  graphql_get:\n    handler: src/graphql.get\n    events:\n      - http:\n          path: graphql\n          method: get\n  graphql_post:\n    handler: src/graphql.post\n    events:\n      - http:\n          path: graphql\n          method: post\n"]},{"id":95381035,"files":["---\nservice: prismic-lambda-webhook\n\nplugins:\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: ${opt:stage,self:custom.defaults.stage}\n  region: ${opt:region,self:custom.defaults.region}\n  profile: ${opt:profile,env:AWS_PROFILE,self:custom.defaults.profile}\n  environment: ${file(./${opt:env,self:custom.defaults.env}.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:ListTopics\n        - sns:CreateTopic\n        - sns:Publish\n        - sns:Subscribe\n      Resource:\n        - arn:aws:sns:${self:provider.region}:*:PRISMIC_LAMBDA_WEBHOOK\n\ncustom:\n  defaults:\n    stage: dev\n    region: eu-central-1\n    env: env\n    profile: default\n\nfunctions:\n  webhook:\n    description: Handle Prismic.io webhook post and send SNS notification\n    handler: functions/webhook.handle\n    events:\n      - http: POST webhook\n\n  # EXAMPLE handler\n  build:\n    description: Run simple lambda triggered by SNS event\n    handler: functions/build.handle\n    events:\n      - sns: PRISMIC_LAMBDA_WEBHOOK\n"]},{"id":94370753,"files":["service: ttn-post-adapter\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  index:\n    handler: handler.dispatch\n    events:\n      - http:\n          path: rename\n          method: post\n      - http:\n          path: opensensors\n          method: post\n      - http:\n          path: slicingdice\n          method: post\n      - http:\n          path: pyroclast\n          method: post\n      - http:\n          path: adafruit\n          method: post\n"]},{"id":92604223,"files":["service: sls-oauth-instagram\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  memorySize: 128\n  environment:\n    instagram_id: ${file(./credentials.yml):instagram_id}\n    instagram_secret: ${file(./credentials.yml):instagram_secret}\n    instagram_tokenHost: https://api.instagram.com\n    instagram_tokenPath: /oauth/access_token\n    firebase_key: ${file(./credentials.yml):firebase_key}\n    firebase_auth_domain: ${file(./credentials.yml):firebase_auth_domain}\n    firebase_database_url: ${file(./credentials.yml):firebase_database_url}\n    firebase_storage_bucket: ${file(./credentials.yml):firebase_storage_bucket}\n    firebase_messenger_id: ${file(./credentials.yml):firebase_messenger_id}\n    instafeed_js_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/instafeed.min.js\n    main_js_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/main.js\n    main_css_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/main.css\n\nfunctions:\n  oauth_redirect:\n    handler: src/oauth_redirect.oauth_redirect\n    events:\n      - http:\n          path: redirect\n          method: get\n  oauth_callback:\n    handler: src/oauth_callback.oauth_callback\n    timeout: 20\n    events:\n      - http:\n          path: 'instagram-callback'\n          method: get\n    package:\n      include:\n        - service-account.json\n  serve_index:\n    handler: src/serve_index.serve_index\n    events:\n      - http:\n          path: index\n          method: get\n    package:\n      include:\n        - templates/index.html\n"]},{"id":92669723,"files":["# SurfEdge 2017\n# This is the Backend service for the Messenger Bot \n# https://m.me/ReliefSupport\n\nservice: relief-bot \n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  new:\n    handler: handler.new\n    events:\n     - http:\n          path: new\n          method: post\n          cors: true\n  needs:\n    handler: handler.newneeds\n    events:\n     - http:\n          path: needs\n          method: post\n          cors: true\n  view:\n    handler: handler.view\n    events:\n     - http:\n          path: view\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":85499068,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-mongo-boilerplate # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  new:\n    handler: handler.new\n    events:\n     - http:\n          path: new\n          method: post\n          cors: true\n  view:\n    handler: handler.view\n    events:\n     - http:\n          path: view\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":91953743,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sample\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  single:\n    handler: handler.single\n    events:\n     - http:\n         path: single\n         method: get\n  multiple:\n    handler: handler.multiple\n    events:\n     - http:\n         path: multiple\n         method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline"]},{"id":90719271,"files":["service: serverless-webpack-typescript-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n"]},{"id":82834616,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: line-bot-pipi\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  linebot:\n    handler: handler.linebot\n    # イベントを追加\n    events:\n      - http:\n          path: bot\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n    environment:\n      CHANNEL_ACCESS_TOKEN: ${env:CHANNEL_ACCESS_TOKEN}\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":89745288,"files":["service: viewServer\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-1\npackage:\n  individually: true\n  exclude:\n    - ./**\n  include:\n    - server.js\n    - app.js\n    - node_modules/**\nfunctions:\n  server:\n    handler: server.handle\n    environment:\n      API_HOST: ${env:AWS_API_HOST}\n      STATIC_ROOT: ${env:AWS_STATIC_ROOT}\n    events:\n      - http: ANY view/\n      - http: ANY view/{route+}\nplugins:\n  - serverless-s3-assets\n  - serverless-plugin-optimize\ncustom:\n  s3Assets:\n    static:\n      bucket: ${env:AWS_S3_BUCKET}\n      css:\n        contentType: text/css\n"]},{"id":87383347,"files":["service: ical2gcal\n\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v0\n  memorySize: 512\n  timeout: 300\n  region: ap-northeast-1\n\nfunctions:\n  sync:\n    handler: handler.sync\n    events:\n      - schedule: rate(15 minutes)\n"]},{"id":86751400,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-first-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":82578019,"files":["service: serverless-lambda-boilerplate\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: %branch%\n  region: eu-west-1\n  iamRoleStatements:\n      -  Effect: \"Allow\"\n         Action:\n           - \"s3:ListBucket\"\n           - \"s3:PutObject\"\n           - \"s3:GetObject\"\n         Resource: arn:aws:s3:::*\n\nfunctions:\n  usersGet:\n    handler: userHandler.users\n    events:\n      - http:\n          path: users\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userGet:\n    handler: userHandler.user\n    events:\n      - http:\n          path: user\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n\n  userCreate:\n    handler: userHandler.create\n    events:\n      - http:\n          path: user\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userUpdate:\n    handler: userHandler.update\n    events:\n      - http:\n          path: user\n          method: put\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userDelete:\n    handler: userHandler.delete\n    events:\n      - http:\n          path: user\n          method: delete\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false"]},{"id":87192199,"files":["service: serverless-mailer-function\n\nprovider:\n  name: aws\n  environment:\n    EMAIL_SERVICE: Gmail\n    EMAIL_SERVICE_USER: myemai@gmail.com\n    EMAIL_SERVICE_PASS: mypassword\nfunctions:\n  mailerLocal:\n    handler: handler.send\n  mailer:\n    handler: mailer@^0.0.3\n    individually: true\n\n"]},{"id":86749494,"files":["service: serverless-alexa-skill\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  \nfunctions:\n  handler:\n    handler: handler.answer\n    events:\n      - alexaSkill\n\npackage:\n  exclude:\n    - node_modules/**"]},{"id":86512556,"files":["service: serverless-cloudfront-logs\ncustom:\n  bucketName: sls-cf-log-bucket  # Change this to something unique\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n      Resource: \"arn:aws:s3:::${self:custom.bucketName}/*\"\n\nfunctions:\n  logFileReceived:\n    handler: handler.logFileReceived\n    memorySize: 128\n    timeout: 60\n    events:\n      - s3:\n          bucket: ${self:custom.bucketName}\n          event: s3:ObjectCreated:*\n"]},{"id":84999480,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: elm-lambda-auth-boilerplate\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: your-iam-user\n  region: us-west-2\n  environment: ${file(env.yml):${self:custom.stage}}\n\nfunctions:\n  oauthcallback:\n    handler: oauth.authCallback\n    events:\n      - http:\n          path: oauth/callback\n          method: get\n\n"]},{"id":85361558,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: voting-app # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.9.0 <2.0.0\"\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 128\n  timeout: 5\n  stage: prod\n\n  region: us-west-1\n\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n      SNS_TOPIC_NAME: ${self:service}-${opt:stage, self:provider.stage}\n      SNS_TOPIC_ARN_TEST: arn:aws:sns:us-west-1:253267020097:voting-app-prod\n      SNS_TOPIC_ARN:\n        Fn::Join:\n          - \":\"\n          - - arn\n            - aws\n            - sns\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - \"${self:provider.environment.SNS_TOPIC_NAME}\"\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: [ \"${self:provider.environment.SNS_TOPIC_ARN}\" ]\n\n\nfunctions:\n  get-results:\n    handler: result/result.get\n    package:\n      include:\n        - result/**\n      exclude:\n        - result/result-ui\n    events:\n      - http:\n          path: result\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.body.headers.ContentType\n              Access-Control-Allow-Origin: \"'*'\"\n            template: $input.path(\"$.body\")\n  worker:\n    handler: worker/worker.saveVote\n    package:\n      include:\n        - worker/**\n    events:\n      - sns:\n          topicName: ${self:provider.environment.SNS_TOPIC_NAME}\n          displayName: ${self:provider.environment.SNS_TOPIC_NAME}\n  get-vote:\n    handler: vote/vote.get\n    package:\n      include:\n        - vote/**\n    events:\n      - http:\n          path: vote\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              headers:\n                Cookie: false\n            headers:\n              Cookie: method.request.header.Cookie\n          response:\n            headers:\n              Content-Type: integration.response.body.headers.ContentType\n              Set-Cookie: integration.response.body.Cookie\n            template: $input.path(\"$.body\")\n  vote:\n    handler: vote/vote.post\n    package:\n      include:\n        - vote/**\n    events:\n      - http:\n          path: vote\n          method: post\n          integration: lambda\n          request:\n             parameters:\n               querystrings:\n                 vote: true\n               headers:\n                 Cookie: false\n             headers:\n               Cookie: method.request.header.Cookie\n          response:\n            headers:\n              #TODO\n              Content-Type: integration.response.body.headers.ContentType\n              Set-Cookie: integration.response.body.Cookie\n              #Content-Type: \"'text/html'\"\n            template: $input.path(\"$.body\")\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n    #votingTopic:\n    #  Type: AWS::SNS::Topic\n    #  Properties:\n    #    DisplayName: ${self:provider.environment.SNS_TOPIC_NAME}\n    #    TopicName: ${self:provider.environment.SNS_TOPIC_NAME}\n    #Outputs:\n    #  QueueNameURL:\n    #    Description: The URL for QueueName\n    #    Value:\n    #      'Fn::GetAtt': [ votingQueue, URL ]\n    #    Export:\n    #      Name: '${self:service}:${opt:stage, self:provider.stage}:QueueNameURL'\n\n"]},{"id":85970214,"files":["service: react-notes\n# use serverless-webpack plugin to transpile to ES6\nplugins:\n  - serverless-webpack\n# enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: prod\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  notesCreate:\n    handler: notes/create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesGet:\n    handler: notes/get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesList:\n    handler: notes/list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesUpdate:\n    handler: notes/update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesDelete:\n    handler: notes/delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n"]},{"id":85356810,"files":["service: serverless-tracking\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-2\n  memorySize: 128\n\nfunctions:\n  smsUpdates:\n    handler: handler.smsUpdates\n    events:\n      - http:\n          path: smsupdates\n          method: post\n          integration: lambda\n          cors: true\n"]},{"id":85002767,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n\nplugins:\n - serverless-webpack\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":85168474,"files":["service: slackBot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\ncustom:\n  secrets: ${file(secrets.yml)}\n  dev: dev\n  prod: bookmarks\n\nfunctions:\n  bookmark:\n    handler: handler.bookmark\n    environment:\n      SLACK_TOKEN: ${self:custom.secrets.SLACK_TOKEN}\n      SLACK_BOOKMARK_CHANNEL: ${self:custom.${opt:stage, self:provider.stage}}\n    events:\n     - http: \n        path: add\n        method: POST\n        cors: true\n"]},{"id":83700436,"files":["service: square-the-circle\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  stats:\n    handler: dist/index.handler\n    events:\n      - schedule: cron(0 9 ? * 2 *)\n"]},{"id":84311206,"files":["service: lawos-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n  stage: dev\n  memorySize: 128\n  timeout: 20\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"lambda:InvokeFunction\"\n    Resource:\n      - \"*\"\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: arn:aws:sqs:*:*:${self:custom.sqs}\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  sns: ${self:custom.stage}-lawos-serverless-trigger\n  sqs: ${self:custom.stage}-lawos-serverless-backlog\n\npackage:\n  exclude:\n    - node_modules/**\n\nfunctions:\n  task:\n    handler: functions/task.handler\n    name: ${self:custom.stage}-lawos-serverless-task\n\n  worker:\n    handler: functions/worker.handler\n    name: ${self:custom.stage}-lawos-serverless-worker\n    environment:\n      sqs: ${self:custom.sqs}\n      lambda: ${self:custom.stage}-lawos-serverless-task\n    events:\n      - schedule: rate(1 minute)\n      - sns: ${self:custom.sns}\n\nresources:\n  Resources:\n    BacklogQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: '1209600'\n        VisibilityTimeout: '60'\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - DeadLetterQueue\n            - Arn\n          maxReceiveCount: '10'\n\n    DeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: '1209600'\n\n    QueueDepthAlarmOver100:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        AlarmDescription: Alarm if queue depth grows beyond 100 messages\n        Namespace: AWS/SQS\n        MetricName: NumberOfMessagesVisible\n        Dimensions:\n        - Name: QueueName\n          Value: ${self:custom.sqs}\n        Statistic: Sum\n        Period: '60'\n        EvaluationPeriods: '1'\n        Threshold: '100'\n        ComparisonOperator: GreaterThanOrEqualToThreshold\n        AlarmActions:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.sns}\" ] ]  }\n"]},{"id":79363201,"files":["service: wolf-sample01\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello","service: wolf-sample02\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello\n    events:\n      - http: \n          path: hello\n          method: GET","service: wolf-sample03\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\ncustom:\n  dbTable: \"Wolf-Triggers\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n   - Effect: Allow\n     Action:\n     - dynamodb:*\n     Resource:\n      - \"arn:aws:dynamodb:*:*:table/${self:custom.dbTable}*\"\n   - Effect: Allow\n     Action:\n      - dynamodb:*\n     Resource:\n      - \"arn:aws:dynamodb:*:*:table/${self:custom.dbTable}*/stream/*\"\n\nfunctions:\n  writer:\n    description: \"Write some data on Wolf table\"\n    handler: writer.write\n    environment:\n      DB_TABLE: ${self:custom.dbTable}    \n  listener:\n    description: \"Listen changes on Wolf table\"\n    handler: listener.listen\n\nresources:\n  Resources: \n    WolfDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n    WolfDbTableEvent:\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 1\n        EventSourceArn:\n          Fn::GetAtt:\n            - WolfDbTable\n            - StreamArn      \n        FunctionName:\n          Fn::GetAtt:\n            - ListenerLambdaFunction\n            - Arn\n        StartingPosition: TRIM_HORIZON","service: wolf-sample04\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  timeout: 60\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello","service: wolf-sample05 #authorize\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\ncustom:\n  s3Bucket: wolf-web-app\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  auth:\n    description: Auth0 authorizer func\n    handler: authorizer.check\n    environment:\n      AUTH0_CLIENT_ID: zSIkjbVKVgvROA7jQEfmolnjiWIf567Q\n      AUTH0_CLIENT_SECRET: rOJI4sOSWPe8wsYeCcLhPuQ3W4Nfcb1pFQYTeDN7pDmJr1d_M1f3qB5bkGNw25yQ\n  couponizer:\n    description: get a discount for a beer\n    handler: handler.couponizer\n    events:\n      - http:\n          path: couponizer\n          method: GET\n          cors: true\n          ## Specifying the authorizer lambda\n          authorizer: \n            name: auth\n            resultTtlInSeconds: 0\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WolfAppS3Bucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are available\n    WolfAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WolfAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*","service: wolf-sample06\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nplugins:\n  - serverless-plugin-simulate\n\nfunctions:\n  bye:\n    description: \"Hello wolf lambda!\"\n    handler: handler.bye\n    events:\n    - http: \n        path: bye\n        method: GET\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello\n    events:\n      - http: \n          path: hello\n          method: GET\n  generic:\n    description: \"Hello wolf lambda!\"\n    handler: handler.generic\n    events:\n      - http: \n          path: generic/{proxy+}\n          method: GET\n"]},{"id":77827813,"files":["# https://github.com/laardee/serverless-authentication-boilerplate\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: serverless-authentication # change this\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-west-2\n\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n    - Effect: Allow\n      Action:\n      - cognito-sync:*\n      - cognito-identity:*\n      Resource: arn:aws:cognito-identity:*:*:*\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n\npackage:\n  exclude:\n    - .git/**\n\n# Functions\n\nfunctions:\n  signin:\n    handler: handler.signin\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/signin/{provider}\n          method: get\n          integration: lambda-proxy\n  callback:\n    handler: handler.callback\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/callback/{provider}\n          method: get\n          integration: lambda-proxy\n  refresh:\n    handler: handler.refresh\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/refresh/{refresh_token}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: |\n                {\n                  \"refresh_token\":\"$input.params('refresh_token')\",\n                  \"id\":\"$input.params('id')\",\n                  \"state\":\"$input.params('state')\",\n                  \"host\":\"$input.params().header.get('host')\",\n                  \"stage\":\"$context.stage\"\n                }\n  authorize:\n    handler: handler.authorize\n\nresources:\n  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template\n  Resources:\n    CacheTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: token\n          AttributeType: S\n        - AttributeName: type\n          AttributeType: S\n        KeySchema:\n        - AttributeName: token\n          KeyType: HASH\n        - AttributeName: type\n          KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.CACHE_DB_NAME}\n#    UsersTable:\n#      Type: AWS::DynamoDB::Table\n#      Properties:\n#        AttributeDefinitions:\n#        - AttributeName: userId\n#          AttributeType: S\n#        KeySchema:\n#        - AttributeName: userId\n#          KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 1\n#          WriteCapacityUnits: 1\n#        TableName: ${self:provider.environment.USERS_DB_NAME}\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: greeting\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  # you can overwrite defaults here\n  #  stage: dev\n  region: us-west-2\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  list:\n    handler: greetings/list.list\n    memorySize: 128\n    events:\n      - http:\n          path: greetings\n          method: get\n          cors: true\n  #    The following are a few example events you can configure\n  #    NOTE: Please make sure to change your handler code to work with those events\n  #    Check the event documentation for details\n\n  #      - s3: ${env:BUCKET}\n  #      - schedule: rate(10 minutes)\n  #      - sns: greeter-topic\n  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n  #      - alexaSkill\n\n  #    Define function environment variables here\n  #    environment:\n  #      variable2: value2\n\n  create:\n    handler: greetings/post.post\n    memorySize: 128\n    events:\n      - http:\n          path: greetings\n          method: post\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n  read:\n    handler: greetings/get.get\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: greetings/put.put\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: put\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n  delete:\n    handler: greetings/delete.delete\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: delete\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    greetingsDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${file(./greetings/config.js):tableName}\n        AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n        KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-dynamodb-local\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n      dir: offline/migrations\n  optimize:\n    includePaths: ['config']\n\npackage:\n  individually: true\n","# https://github.com/serverless/examples/tree/master/aws-node-single-page-app-via-cloudfront\n\nservice: greeting-app\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - app/**\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: ${file(./config/config.js):s3Bucket}\n  appDist: app/dist/\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n"]},{"id":82465707,"files":["service: sls-workshop\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  s3event:\n    handler: handler.s3event\n    events:\n      - s3: shimokitaoss-${opt:stage}\n"]},{"id":81743907,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: stripe-importer\n\nframeworkVersion: \"=1.6.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    STRIPE_API_KEY: ${self:custom.secrets.STRIPE_API_KEY}\n    XERO_CONSUMER_KEY: ${self:custom.secrets.XERO_CONSUMER_KEY}\n    XERO_CONSUMER_SECRET: ${self:custom.secrets.XERO_CONSUMER_SECRET}\n    XERO_STRIPE_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_ACCOUNT_CODE}\n    XERO_STRIPE_FEE_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_FEE_ACCOUNT_CODE}\n    XERO_STRIPE_TRANSFER_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_TRANSFER_ACCOUNT_CODE}\n    XERO_SALES_ACCOUNT_CODE: ${self:custom.secrets.XERO_SALES_ACCOUNT_CODE}\n\nfunctions:\n  stripeImporter:\n    handler: handler.stripeImporter\n    events:\n      - http:\n          path: stripe/xero\n          method: post\n\npackage:\n  exclude:\n    - webhooks/**\n    - xero_keys/**\n    - secrets.example.yml\n  include:\n    - xero_keys/privatekey.pem\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n"]},{"id":83438276,"files":["service: faceswap\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:ListBucket\"\n      Resource: arn:aws:s3:::${self:custom.bucketName}/*\n    - Effect: \"Allow\"\n      Action:\n        - rekognition:DetectFaces\n      Resource: '*'\ncustom:\n  bucketName: ${self:service}-${opt:stage}-uploads\nfunctions:\n  facereplace:\n    handler: src/facereplace.handler\n    timeout: 30\n    environment:\n      BUCKET_NAME: ${self:custom.bucketName}\n      ALLOWED_EXTENSIONS: .jpg|.jpeg|.png\n      PROCESSED_DIR_NAME: processed\n    events:\n      - s3:\n          bucket: ${self:custom.bucketName}\n          event: s3:ObjectCreated:*\n          rules:\n          - prefix: uploads/\n"]},{"id":81600337,"files":["service: vote-reminder\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs4.3\r\n  stage: dev\r\n  memorySize: 256\r\n\r\nfunctions:\r\n  request:\r\n    handler: src/callbackValidator.handleRequest\r\n    environment:\r\n      VERIFY_TOKEN: ${file(./sensitive.yml):verifyToken}\r\n    events:\r\n      - http:\r\n          path: message\r\n          method: get\r\n  newMessage:\r\n    handler: src/messageHandler.handleMessage\r\n    environment:\r\n      PAGE_ACCESS_TOKEN: ${file(./sensitive.yml):pageAcessToken}\r\n    events:\r\n      - http:\r\n          path: message\r\n          method: post\r\n  addSite:\r\n    handler: src/addSiteHandler.handleAdd\r\n    environment:\r\n      VERIFY_TOKEN: ${file(./sensitive.yml):verifyToken}\r\n    events:\r\n      - http:\r\n          path: addsite\r\n          method: post\r\n\r\nresources:  \r\n  Resources:\r\n    DynamoDbTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: userTable\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n    DynamoDbTable2:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: siteTable\r\n        AttributeDefinitions:\r\n          - AttributeName: name\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: name\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n    DynamoDBIamPolicy:\r\n      Type: AWS::IAM::Policy\r\n      DependsOn: DynamoDbTable\r\n      Properties:\r\n        PolicyName: lambda-dynamodb\r\n        PolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Action:\r\n                - dynamodb:GetItem\r\n                - dynamodb:PutItem\r\n              Resource: \r\n                - arn:aws:dynamodb:*:*:table/userTable\r\n                - arn:aws:dynamodb:*:*:table/siteTable\r\n        Roles:\r\n          - Ref: IamRoleLambdaExecution\r\n\r\n# You can pin your service to only deploy with a specific Serverless version\r\n# Check out our docs for more details\r\n# frameworkVersion: \"=X.X.X\"\r\n\r\n\r\n# you can overwrite defaults here\r\n#  stage: dev\r\n#  region: us-east-1\r\n\r\n# you can add statements to the Lambda function's IAM Role here\r\n#  iamRoleStatements:\r\n#    - Effect: \"Allow\"\r\n#      Action:\r\n#        - \"s3:ListBucket\"\r\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\r\n#    - Effect: \"Allow\"\r\n#      Action:\r\n#        - \"s3:PutObject\"\r\n#      Resource:\r\n#        Fn::Join:\r\n#          - \"\"\r\n#          - - \"arn:aws:s3:::\"\r\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\r\n\r\n# you can define service wide environment variables here\r\n#  environment:\r\n#    variable1: value1\r\n\r\n# you can add packaging information here\r\n#package:\r\n#  include:\r\n#    - include-me.js\r\n#    - include-me-dir/**\r\n#  exclude:\r\n#    - exclude-me.js\r\n#    - exclude-me-dir/**\r\n\r\n#    The following are a few example events you can configure\r\n#    NOTE: Please make sure to change your handler code to work with those events\r\n#    Check the event documentation for details\r\n\r\n#      - s3: ${env:BUCKET}\r\n#      - schedule: rate(10 minutes)\r\n#      - sns: greeter-topic\r\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\r\n#      - alexaSkill\r\n#      - iot:\r\n#          sql: \"SELECT * FROM 'some_topic'\"\r\n\r\n#    Define function environment variables here\r\n#    environment:\r\n#      variable2: value2\r\n\r\n# you can add CloudFormation resource templates here\r\n#resources:\r\n#  Resources:\r\n#    NewResource:\r\n#      Type: AWS::S3::Bucket\r\n#      Properties:\r\n#        BucketName: my-new-bucket\r\n#  Outputs:\r\n#     NewOutput:\r\n#       Description: \"Description for the output\"\r\n#       Value: \"Some output value\"\r\n"]},{"id":82041099,"files":["service: mail-slack-forwarding\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - kms:Decrypt\n      Resource: arn:aws:kms:...\n\nfunctions:\n  mail-slack-forwarding:\n    handler: handler.handler\n    events:\n      - sns: mail-slack-forwarding\n    environment:\n      slack_channel: '#mail'\n      slack_hook_kms_encrypted: AQECAHgRDv1...\n"]},{"id":73741878,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: cordis-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \"1.4.0\"\n\nprovider:\n  name: aws\n  environment:\n    REGION: eu-west-1\n  runtime: nodejs4.3\n  region: eu-west-1\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n  # Retrieve projects\n  getProjects:\n    handler: handler.getProjects\n    events:\n      - http:\n          path: projects\n          method: get\n          cors: true\n\n  # Retrieve organizations\n  getOrganizations:\n    handler: handler.getOrganizations\n    events:\n      - http:\n          path: organizations\n          method: get\n          cors: true\n\n  # GraphQL endpoint\n  runGraphQL:\n    handler: handler.runGraphQL\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n\n\n  # Populates our database of projects regularly\n  populateDb:\n    handler: handler.populateDb\n    timeout: 300\n    memorySize: 1024\n    events:\n      - schedule:\n          rate: rate(1 day)\n          enabled: false\n\n  # Populates our database of projects regularly\n  populateDbOrganizations:\n    handler: handler.populateDbOrganizations\n    timeout: 300\n    memorySize: 1024\n    events:\n      - schedule:\n          rate: rate(1 day)\n          enabled: false\n\n  # DynamoDB stream function to annotate results\n  annotateDb:\n    handler: handler.annotateDb\n    events:\n      # @todo parametrize\n      - stream: arn:aws:dynamodb:eu-west-1:365688147560:table/cordis_projects/stream/2016-12-28T21:33:51.804 \n\nresources:\n  Resources:\n    projectTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: cordis_projects\n        AttributeDefinitions:\n          - AttributeName: rcn\n            AttributeType: N\n        KeySchema:\n          - AttributeName: rcn\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          # Every item averages 2kb, and we'd like to write 5000 items per second, so we need a (very large) write capacity of 10000\n          # Note that we won't be writing that often so this is not really a big deal.\n          # However, that would be REALLY EXPENSIVE, so we need to finetune this.\n          WriteCapacityUnits: 1\n    organizationTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: cordis_organizations\n        AttributeDefinitions:\n          - AttributeName: projectRcn\n            AttributeType: N\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: projectRcn\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n"]},{"id":77833817,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - alexaSkill\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":72964814,"files":["service: sls-access-counter\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-northeast-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.conf.tableName}\"\n\nfunctions:\n  counter:\n    handler: handler.counter\n    events:\n      - http:\n          path: counter\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    CounterTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.conf.tableName}\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  conf: ${file(conf/config.json)}"]},{"id":113743358,"files":["service: laconia-acceptance\n\nplugins:\n  - serverless-s3-remover\n  - serverless-s3-sync\n  - serverless-pseudo-parameters\n  - serverless-plugin-tracing\n\npackage:\n  exclude:\n    - node_modules/**/aws-sdk/**\n\nprovider:\n  name: aws\n  runtime: nodejs${env:NODE_VERSION, '10' }.x\n  stage: node${env:NODE_VERSION, '10' }\n  region: ${env:AWS_REGION, 'eu-west-1'}\n  tracing: true\n  apiGateway:\n    binaryMediaTypes:\n      - \"*/*\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action: sns:Publish\n      Resource:\n        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n      Resource: \"arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.fullName}/*\"\n    - Effect: \"Allow\"\n      Action:\n        - kinesis:PutRecord\n      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/${self:custom.orderEventsStreamName}\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.userEmailQueueName}\n  environment:\n    TRACKER_BUCKET_NAME: ${self:custom.trackerBucketName}\n    LACONIA_TEST_SPY_BUCKET: ${self:custom.trackerBucketName}\n\ncustom:\n  accountId: ${file(./src/sts.js):getAccountId}\n  fullName: ${self:service}-${self:provider.stage}\n  trackerBucketName: ${self:custom.fullName}-${self:custom.accountId}-tracker\n  totalOrderBucketName: ${self:custom.fullName}-${self:custom.accountId}-total-order\n  userEmailQueueName: ${self:custom.fullName}-user-email-queue\n  restaurantBucketName: ${self:custom.fullName}-${self:custom.accountId}-restaurant\n  orderEventsStreamName: ${self:custom.fullName}-order-events\n  restaurantNotificationTopicName: ${self:custom.fullName}-restaurant-notification\n  orderDynamoDbBatchTableName: ${self:custom.fullName}-order\n  connectionDynamoDbTableName: ${self:custom.fullName}-connection\n  remover:\n    buckets:\n      - ${self:custom.trackerBucketName}\n      - ${self:custom.totalOrderBucketName}\n  s3Sync:\n    - bucketName: ${self:custom.restaurantBucketName}\n      localDir: src/resources\n  apigatewayUrl:\n    Fn::Join:\n      - \"\"\n      - - \"https://\"\n        - Ref: \"ApiGatewayRestApi\"\n        - \".execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}\"\n  webSocketEndpoint:\n    Fn::Join:\n      - \"\"\n      - - \"https://\"\n        - Ref: \"WebsocketsApi\"\n        - \".execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}\"\n\nfunctions:\n  place-order:\n    handler: src/place-order.handler\n    events:\n      - http:\n          path: order\n          method: post\n      - schedule:\n          name: warmer-schedule-name\n          rate: rate(30 days)\n          enabled: true\n          input:\n            warmer: true\n            concurrency: 1\n    environment:\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n      ORDER_STREAM_NAME: ${self:custom.orderEventsStreamName}\n      LACONIA_CONFIG_API_KEY: ssm:/${self:custom.fullName}/apikey\n      LACONIA_CONFIG_RESTAURANTS: s3:${self:custom.restaurantBucketName}/restaurants.json\n      LACONIA_CONFIG_ENABLED: boolean:true\n  accept-order:\n    handler: src/accept-order.handler\n    events:\n      - http:\n          path: order/{id}/accept\n          method: put\n    environment:\n      ORDER_STREAM_NAME: ${self:custom.orderEventsStreamName}\n  process-card-payments:\n    timeout: 6 # Force recursion\n    handler: src/process-card-payments.handler\n    environment:\n      LACONIA_INVOKER_CAPTURE_CARD_PAYMENT: ${self:custom.fullName}-capture-card-payment\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n  capture-card-payment:\n    handler: src/capture-card-payment.handler\n  calculate-total-order:\n    timeout: 6 # Force recursion\n    handler: src/calculate-total-order.handler\n    environment:\n      RESTAURANT_BUCKET_NAME: ${self:custom.restaurantBucketName}\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n  convert-total-order-to-xml:\n    handler: src/convert-total-order-to-xml.handler\n    environment:\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n    events:\n      - s3:\n          bucket: ${self:custom.totalOrderBucketName}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: json/\n  notify-restaurant:\n    handler: src/notify-restaurant.handler\n    environment:\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n      RESTAURANT_NOTIFICATION_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n  notify-user:\n    handler: src/notify-user.handler\n    environment:\n      USER_EMAIL_QUEUE_URL:\n        Ref: UserEmailQueue\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n  send-email:\n    handler: src/send-email.handler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - UserEmailQueue\n              - Arn\n  fake-restaurant:\n    handler: src/fake-restaurant.handler\n    events:\n      - sns:\n          topicName: ${self:custom.restaurantNotificationTopicName}\n          arn:\n            Ref: RestaurantNotificationTopic\n    environment:\n      API_BASE_URL: ${self:custom.apigatewayUrl}\n\n  update-user:\n    handler: src/update-user.handler\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n      WEBSOCKET_ENDPOINT: ${self:custom.webSocketEndpoint}\n  update-user-receipt:\n    handler: src/update-user-receipt.handler\n    events:\n      - websocket:\n          route: $default\n    environment:\n      WEBSOCKET_ENDPOINT: ${self:custom.webSocketEndpoint}\n  connect-websocket:\n    handler: src/connect-websocket.handler\n    events:\n      - websocket:\n          route: $connect\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n  disconnect-websocket:\n    handler: src/disconnect-websocket.handler\n    events:\n      - websocket:\n          route: $disconnect\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n  download-image:\n    handler: src/download-image.handler\n    events:\n      - http:\n          path: image\n          method: get\n\nresources:\n  Resources:\n    S3Tracker:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.trackerBucketName}\n    RestaurantBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.restaurantBucketName}\n    OrderEventsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.orderEventsStreamName}\n        ShardCount: 1\n    RestaurantNotificationTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:custom.restaurantNotificationTopicName}\n        TopicName: ${self:custom.restaurantNotificationTopicName}\n    UserEmailQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ${self:custom.userEmailQueueName}\n    OrderTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"orderId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"orderId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.orderDynamoDbBatchTableName}\n    ConnectionTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"connectionId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"connectionId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.connectionDynamoDbTableName}\n"]},{"id":51905436,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-ruby # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: schedule\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  schedule1:\n    events:\n      - schedule: rate(1 minute)\n    handler: handler.schedule1\n\n  schedule2:\n    events:\n      - schedule:\n          enabled: true\n          input:\n            foo1: bar1\n            foo2: bar2\n            foobar:\n              test: 1\n          rate: rate(2 minutes)\n    handler: handler.schedule2\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: src/handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n  helloAuthorizerWithAuthorizerId:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithAuthorizerId\n          method: get\n          authorizer:\n            type: CUSTOM\n            authorizerId: commonAuthorizerId\n\n  helloAuthorizerWithFunctionName:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: src/handler.authFunction\n\n  hello500:\n    handler: src/handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: src/handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: src/handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n  #      - s3: ${env:BUCKET}\n  #      - schedule: rate(10 minutes)\n  #      - sns: greeter-topic\n  basicAuthentication:\n    handler: src/handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: src/handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  pathParams:\n    handler: src/handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n  failure:\n    handler: src/handler.failure\n    events:\n      - http:\n          path: /failure\n          method: GET\n\n  catchAll:\n    handler: src/handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    EchoProxyResource:\n      Type: AWS::ApiGateway::Resource\n      Properties:\n        PathPart: echo/{proxy+}\n    EchoProxyMethod:\n      Type: AWS::ApiGateway::Method\n      Properties:\n        ResourceId:\n          Ref: EchoProxyResource\n        HttpMethod: ANY\n        Integration:\n          IntegrationHttpMethod: ANY\n          Type: HTTP_PROXY\n          Uri: http://mockbin.org/request/{proxy}\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: babel-register-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","service: esm-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","service: nodemon-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: serverless-webpack-example\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: ts-node-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","service: http\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          # integration: lambda\n          method: get\n          path: hello\n    handler: handler.hello\n","service: websocket\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  connect:\n    events:\n      - websocket:\n          route: $connect\n    handler: handler.connect\n\n  disconnect:\n    events:\n      - websocket:\n          route: $disconnect\n    handler: handler.disconnect\n\n  default:\n    events:\n      - websocket:\n          route: $default\n    handler: handler.default\n","service: serverless-plugin-typescript-example\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/index.hello\n","service: authorizer\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  user:\n    events:\n      - http:\n          authorizer: authorizerCallback\n          method: get\n          path: user1\n      - http:\n          authorizer: authorizerAsyncFunction\n          method: get\n          path: user2\n    handler: handler.user\n\n  authorizerCallback:\n    handler: authorizer.authorizerCallback\n\n  authorizerAsyncFunction:\n    handler: authorizer.authorizerAsyncFunction\n","service: handler-payload-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  # https://github.com/serverless/serverless/issues/4218#issue-255617750\n  # bug?\n  # - ${file(./handler.yml)}\n\n  contextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: context-done-handler\n    handler: handler.contextDoneHandler\n\n  contextDoneHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: context-done-handler-deferred\n    handler: handler.contextDoneHandlerDeferred\n\n  contextSucceedHandler:\n    events:\n      - http:\n          method: get\n          path: context-succeed-handler\n    handler: handler.contextSucceedHandler\n\n  contextSucceedHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: context-succeed-handler-deferred\n    handler: handler.contextSucceedHandlerDeferred\n\n  callbackHandler:\n    events:\n      - http:\n          method: get\n          path: callback-handler\n    handler: handler.callbackHandler\n\n  callbackHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: callback-handler-deferred\n    handler: handler.callbackHandlerDeferred\n\n  promiseHandler:\n    events:\n      - http:\n          method: get\n          path: promise-handler\n    handler: handler.promiseHandler\n\n  promiseHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: promise-handler-deferred\n    handler: handler.promiseHandlerDeferred\n\n  asyncFunctionHandler:\n    events:\n      - http:\n          method: get\n          path: async-function-handler\n    handler: handler.asyncFunctionHandler\n\n  promiseWithDefinedCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: promise-with-defined-callback-handler\n    handler: handler.promiseWithDefinedCallbackHandler\n\n  contextSucceedWithContextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: context-succeed-with-context-done-handler\n    handler: handler.contextSucceedWithContextDoneHandler\n\n  callbackWithContextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: callback-with-context-done-handler\n    handler: handler.callbackWithContextDoneHandler\n\n  callbackWithPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: callback-with-promise-handler\n    handler: handler.callbackWithPromiseHandler\n\n  callbackInsidePromiseHandler:\n    events:\n      - http:\n          method: get\n          path: callback-inside-promise-handler\n    handler: handler.callbackInsidePromiseHandler\n\n  throwExceptionInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: throw-exception-in-promise-handler\n    handler: handler.throwExceptionInPromiseHandler\n\n  throwExceptionInCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: throw-exception-in-callback-handler\n    handler: handler.throwExceptionInCallbackHandler\n\n  NoAnswerInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: no-answer-in-promise-handler\n    handler: handler.NoAnswerInPromiseHandler\n\n  BadAnswerInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: bad-answer-in-promise-handler\n    handler: handler.BadAnswerInPromiseHandler\n\n  BadAnswerInCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: bad-answer-in-callback-handler\n    handler: handler.BadAnswerInCallbackHandler\n","service: python-big-json-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: python-2-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python2.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: python-3-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: ruby-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: ruby2.5\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: uncategorized-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  # https://github.com/serverless/serverless/issues/4218#issue-255617750\n  # bug?\n  # - ${file(./handlerPayload.yml)}\n\n  uncategorizedHandler1:\n    events:\n      - http:\n          integration: lambda\n          method: get\n          path: uncategorized-1\n          responses:\n            default:\n              responseModels:\n                application/json;charset=UTF-8: Empty\n              responseParameters:\n                method.response.header.x-foo: 'integration.response.body.foo'\n              responseTemplates:\n                application/json;charset=UTF-8: ''\n              statusCode: 200\n    handler: handler.uncategorizedHandler1\n\n  uncategorizedHandler2:\n    events:\n      - http:\n          integration: lambda\n          method: get\n          path: uncategorized-2\n          responses:\n            default:\n              responseModels:\n                application/json;charset=UTF-8: Empty\n              responseParameters:\n                method.response.header.x-foo: 'integration.response.body.more-foo.property-of-undefined'\n              responseTemplates:\n                application/json;charset=UTF-8: ''\n              statusCode: 200\n    handler: handler.uncategorizedHandler2\n","service: serverless-plugin-typescript-test\n\nplugins:\n  - serverless-plugin-typescript\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: serverless-plugin-typescript\n    handler: src/index.serverlessPluginTypescript\n","service: serverless-webpack-test\n\nplugins:\n  - serverless-webpack\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: serverless-webpack\n    handler: src/index.serverlessWebpack\n","service: docker-go-1.x-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: go1.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: bin/hello\n","service: docker-multiple-containers-test\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello1:\n    events:\n      - http:\n          method: get\n          path: hello1\n    handler: handler.hello\n\n  hello2:\n    events:\n      - http:\n          method: get\n          path: hello2\n    handler: handler.hello\n    runtime: nodejs10.x\n\n  hello3:\n    events:\n      - http:\n          method: get\n          path: hello3\n    handler: handler.hello\n    runtime: python3.8\n","service: docker-nodejs10.x-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs10.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-nodejs12.x-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-nodejs8.10-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs8.10\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-provided-tests\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: provided\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-2.7-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python2.7\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.6-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.6\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.7-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.8-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.8\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-ruby2.5-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: ruby2.5\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-serverless-webpack-test\n\nplugins:\n  - serverless-webpack\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: docker-serverless-webpack\n    handler: src/index.serverlessWebpack\n","service: apollo-server-lambda-test\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  graphql:\n    events:\n      - http:\n          method: any\n          path: graphql\n    handler: src/index.graphql\n","service: docker-nodejs12.x-test\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: lambda-invoke\n\nplugins:\n  - serverless-offline\n\nprovider:\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeAsync\n        - lambda:InvokeFunction\n      Resource: '*'\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: test-handler\n    handler: handler.hello\n\n  toBeInvoked:\n    handler: handler.toBeInvoked\n","service: lambda-invoke-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeAsync\n        - lambda:InvokeFunction\n      Resource: '*'\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  invokeInvocationTypeEvent:\n    events:\n      - http:\n          method: get\n          path: invocation-type-event\n    handler: lambdaInvokeHandler.invokeInvocationTypeEvent\n\n  testHandler:\n    events:\n      - http:\n          method: get\n          path: test-handler\n    handler: lambdaInvokeHandler.testHandler\n\n  invokeInvocationTypeRequestResponse:\n    events:\n      - http:\n          method: get\n          path: invocation-type-request-response\n    handler: lambdaInvokeHandler.invokeInvocationTypeRequestResponse\n\n  invokedHandler:\n    handler: lambdaInvokeHandler.invokedHandler\n\n  invokeAsync:\n    events:\n      - http:\n          method: get\n          path: invoke-async\n    handler: lambdaInvokeAsyncHandler.invokeAsync\n\n  invokedAsyncHandler:\n    handler: lambdaInvokeAsyncHandler.invokedAsyncHandler\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manual-test-websocket-RouteSelection\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  websocketsApiRouteSelectionExpression: $request.body.service.do\n\nfunctions:\n  echo:\n    handler: handler.echo\n    events:\n      - websocket:\n          route: echo\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manual-test-websocket-main\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - 'execute-api:ManageConnections'\n      Resource:\n        - 'arn:aws:execute-api:*:*:**/@connections/*'\n\nfunctions:\n  # http:\n  #   handler: handler.http\n  #   events:\n  #     - http:\n  #         path: /http\n  #         method: GET\n  connect:\n    handler: handler.connect\n    events:\n      - websocket:\n          route: $connect\n          # authorizer: auth\n  # auth:\n  #   handler: handler.auth\n  disconnect:\n    handler: handler.disconnect\n    events:\n      - websocket:\n          route: $disconnect\n  default:\n    handler: handler.defaultHandler\n    events:\n      - websocket:\n          route: $default\n  getClientInfo:\n    handler: handler.getClientInfo\n    events:\n      - websocket:\n          route: getClientInfo\n  getCallInfo:\n    handler: handler.getCallInfo\n    events:\n      - websocket:\n          route: getCallInfo\n  makeError:\n    handler: handler.makeError\n    events:\n      - websocket:\n          route: makeError\n  replyViaCallback:\n    handler: handler.replyViaCallback\n    events:\n      - websocket:\n          route: replyViaCallback\n  replyErrorViaCallback:\n    handler: handler.replyErrorViaCallback\n    events:\n      - websocket:\n          route: replyErrorViaCallback\n  multiCall1:\n    handler: handler.multiCall1\n    events:\n      - websocket:\n          route: makeMultiCalls\n  multiCall2:\n    handler: handler.multiCall2\n    events:\n      - websocket:\n          route: makeMultiCalls\n  send:\n    handler: handler.send\n    events:\n      - websocket:\n          route: send\n  registerListener:\n    handler: handler.registerListener\n    events:\n      - websocket:\n          route: registerListener\n  deleteListener:\n    handler: handler.deleteListener\n    events:\n      - websocket:\n          route: deleteListener\n\nresources:\n  Resources:\n    ListenersTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: listeners\n","plugins:\n# - serverless-offline\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n","plugins:\n# - serverless-offline\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n","######################################\n### DO NOT EDIT THIS FILE DIRECTLY ###\n###                                ###\n### User either:                   ###\n###   'npm run deploy-offline' or  ###\n###   'npm run deploy-aws'         ###\n######################################","plugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n","######################################\n### DO NOT EDIT THIS FILE DIRECTLY ###\n###                                ###\n### User either:                   ###\n###   'npm run deploy-offline' or  ###\n###   'npm run deploy-aws'         ###\n######################################\n","plugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    httpPort: 3004\n"]},{"id":91932285,"files":["\nconst serverlessYml = require('../serverless-interpolated')\nconst { Resources } = serverlessYml.resources\n// const tables = Object.keys(Resources)\n//   .filter(name => Resources[name].Type === 'AWS::DynamoDB::Table')\n\nif (!Resources.ServerlessDeploymentBucket) {\n  Resources.ServerlessDeploymentBucket = {\n    Type: 'AWS::S3::Bucket'\n  }\n}\n\nif (!Resources.ApiGatewayRestApi) {\n  Resources.ApiGatewayRestApi = {\n    Type: 'AWS::ApiGateway::RestApi'\n  }\n}\n\n// normalize tables\n// tables.forEach(name => {\n//   const { Type, Properties } = Resources[name]\n//   if (Properties.StreamSpecification) {\n//     Properties.StreamSpecification.StreamEnabled = true\n//   }\n// })\n\nexport = serverlessYml\n","service: ${{self:custom.service}}\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\nplugins:\n  - prepare-offline\n  # - serverless-resources-env\n  - serverless-plugin-tracing\n  # - serverless-pseudo-parameters\n  # - serverless-sam\n  # - serverless-apigw-binary\n  - serverless-plugin-aws-alerts\n  # - serverless-plugin-common-excludes\n  - serverless-plugin-log-retention\n  # - serverless-dynamodb-autoscaling\n  # - serverless-s3-encryption\n  # - serverless-plugin-split-stacks\n  # - serverless-plugin-warmup\n  # - serverless-plugin-typescript\n  # - print\n  # - warmup\n  # - serverless-dynamodb-ttl\n  # - serverless-plugin-write-env-vars\n  # - serverless-plugin-include-dependencies\n  # - serverless-dynamodb-local\n  # - serverless-dynamodb-local\n  # - serverless-s3-local\n  - serverless-iot-local\n  - init-local\n  - serverless-offline\n  - pre-deploy\n  # - serverless-offline-scheduler\n\npackage:\n  # artifactDirectoryName: serverless/${{self:service}}/${{self:provider.stage}}/artifacts\n  include:\n    - conf\n    - data\n    - serverless-interpolated.yml\n  exclude:\n    - src/**\n    - vars.json\n    - logs/**\n    - \"*.log\"\n    - \"*.rdb\"\n    - \".*\"\n    - loadtesting/**\n    - myswagger.json\n    - myidentity.json\n    - lib/test/**\n    - lib/scripts/**\n    - conf/**\n    - certs/**\n    - org/**\n    - docker/**\n    - docs/**\n    - codebuild/**\n    - node_modules/**/*.ts\n    - node_modules/**/*.d.ts\n    - node_modules/**/test/*\n    - node_modules/**/tests/*\n    - node_modules/chokidar/**\n    - node_modules/fsevents/**\n    - node_modules/canvas/**\n    - \"node_modules/@tradle/gen-samples/**\"\n    - npm-shrinkwrap.json\n    - clienttest/\n    - .localstack/**\n\ncustom:\n  vars: ${{file(./vars.json), file(./default-vars.json)}}\n  version: ${{file(./lib/version.json)}}\n  defaults: ${{file(./default-vars.json)}}\n  # move these to vars.json when this issue is fixed:\n  #   https://github.com/serverless/serverless/issues/3740\n  service: ${{self:custom.vars.service, self:custom.defaults.service}}\n  stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaults.stage}}\n  # stage: dev\n  region: ${{opt:region, self:custom.vars.region, self:custom.defaults.region}}\n  profile: ${{opt:profile, self:custom.vars.profile, self:custom.defaults.profile}}\n  stackName: ${{self:service}}-${{self:custom.stage}}\n  versionFunctions: ${{self:custom.vars.versionFunctions, self:custom.defaults.versionFunctions}}\n  deploymentBucket: ${{file(./lib/cli/get-stack-parameter.js):parameterExistingDeploymentBucket}}\n\n  blockchain: ${{self:custom.vars.blockchain, self:custom.defaults.blockchain}}\n  corda: ${{self:custom.vars.corda, self:custom.defaults.corda}}\n  # providerConf: &providerConf\n  #   ${{file(./src/in-house-bot/conf/provider.json)}}\n  # org: ${{self:custom.vars.org, self:custom.defaults.org}}\n\n  # logging: ${{self:custom.vars.logging, self:custom.defaults.logging}}\n\n  # copied from vars.json\n  # blockchain: ${{self:custom.vars.blockchain}}\n  # thresholdBillingAlarm: ${{self:custom.vars.thresholdBillingAlarm, self:custom.defaults.thresholdBillingAlarm}}\n  thresholdThrottlingAlarm: ${{self:custom.vars.thresholdThrottlingAlarm, self:custom.defaults.thresholdThrottlingAlarm}}\n  thresholdErrorsAlarm: ${{self:custom.vars.thresholdErrorsAlarm, self:custom.defaults.thresholdErrorsAlarm}}\n  thresholdInvocationsAlarm: ${{self:custom.vars.thresholdInvocationsAlarm, self:custom.defaults.thresholdInvocationsAlarm}}\n  thresholdDurationAlarm: ${{self:custom.vars.thresholdDurationAlarm, self:custom.defaults.thresholdDurationAlarm}}\n\n  # stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaultStage}}\n  # region: ${{opt:region, self:custom.vars.region}}\n\n  # prefixes\n  prefix: ${{self:service}}-${{self:custom.stage}}-\n  # regionalPrefix: ${{self:service}}-${{self:custom.stage}}-${{self:custom.region}}-\n  # prefixRole: ${{self:custom.regionalPrefix}}\n  # maybe during info/auth, the server can send back the prefix\n  # prefixIOTTopic: ${{self:service}}-\n  # iotParentTopic: ${{self:custom.stackName}}\n  # prefixSNSTopic: ${{self:custom.prefix}}\n  prefixSQS: ${{self:custom.prefix}}\n  # apigateway\n  # adhere to serverless framework format\n  # apiGateway: ${{self:custom.stage}}-${{self:service}}\n\n  # versions\n  versionSQL: \"2016-03-23\"\n  s3TemplatesPath: ${{self:custom.version.templatesPath}}\n\n  # sns\n  # billingAlarmTopic: ${{self:custom.prefixSNSTopic}}BillingAlarmNotification\n  # throttlingAlarmTopic: ${{self:custom.prefixSNSTopic}}ThrottlingAlarmNotification\n  # invocationsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationAlarmNotification\n  # invocationErrorsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationErrorsAlarmNotification\n\n  alertNotifications:\n    - protocol: email\n      endpoint:\n        Ref: OrgAdminEmail\n        # Fn::FindInMap: [\"org\", \"contact\", \"adminEmail\"]\n\n  alerts:\n    stages:\n      - dev\n    dashboards: true\n    topics:\n      # ok:\n      #   topic: ${{self:custom.prefix}}alerts-ok\n      #   notifications: ${{self:custom.alertNotifications}}\n      alarm:\n        topic: ${{self:custom.prefix}}alerts-alarm\n        notifications: ${{self:custom.alertNotifications}}\n      # insufficientData:\n      #   topic: ${{self:custom.prefix}}alerts-insufficientData\n      #   notifications: ${{self:custom.alertNotifications}}\n    definitions:\n      functionErrors:\n        period: 60\n        threshold: ${{self:custom.thresholdErrorsAlarm}}\n      functionThrottles:\n        period: 60\n        threshold: ${{self:custom.thresholdThrottlingAlarm}}\n      functionInvocations:\n        period: 60\n        threshold: ${{self:custom.thresholdInvocationsAlarm}}\n      functionDuration:\n        period: 60\n        threshold: ${{self:custom.thresholdDurationAlarm}}\n    alarms:\n      # - functionErrors\n      # - functionThrottles\n      # - functionInvocations\n      # - functionDuration\n\n  # sqs\n  deadLetterQueueName: ${{self:custom.prefixSQS}}dead-letter-queue\n\n  tables:\n    # presence: ${{self:custom.prefix}}presence\n    # seals: ${{self:custom.prefix}}seals\n    # pubkeys: ${{self:custom.prefix}}pubkeys\n    # messages: ${{self:custom.prefix}}messages\n    events: ${{self:custom.prefix}}events\n    # pushsubscribers: ${{self:custom.prefix}}pushsubscribers\n    # users: ${{self:custom.prefix}}users\n    # friends: ${{self:custom.prefix}}friends\n    # conf: ${{self:custom.prefix}}conf\n    # kv: ${{self:custom.prefix}}kv\n    # backlinks: ${{self:custom.prefix}}backlinks\n\n  # defaultScaleInOut: &defaultScaleInOut\n  #   scaleOut: 0\n  #   scaleIn: 60\n\n  # # auto-scaled tables that serve as buckets for multiple models each\n  # defaultCapacityRead: &defaultCapacityRead\n  #   read:\n  #     minimum: 5        # Minimum read capacity\n  #     maximum: 100      # Maximum read capacity\n  #     usage: 0.70       # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # defaultCapacityWrite: &defaultCapacityWrite\n  #   write:\n  #     minimum: 5        # Minimum read capacity\n  #     maximum: 100      # Maximum read capacity\n  #     usage: 0.5        # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # defaultCapacity: &defaultCapacity\n  #   <<: *defaultCapacityRead\n  #   <<: *defaultCapacityWrite\n\n  # tableBuckets:\n  #   count: 1\n  #   read:\n  #     minimum: 10       # Minimum read capacity\n  #     maximum: 500      # Maximum read capacity\n  #     usage: 0.70       # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  #   write:\n  #     minimum: 10       # Minimum read capacity\n  #     maximum: 500      # Maximum write capacity\n  #     usage: 0.5        # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # dynamodb-autoscaling:\n  #   role: AutoScalingDynamoDBRole\n  #   capacities:\n  #     # bucket-x table scaling is added in compile script\n\n  #     - table: EventsTable\n  #       write:\n  #         minimum: 5        # Minimum write capacity\n  #         maximum: 100      # Maximum write capacity\n  #         usage: 0.5        # Targeted usage percentage\n  #         <<: *defaultScaleInOut\n\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - Content-Encoding\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - X-Tradle-Sig\n      - X-Tradle-Auth\n      - cache\n    allowCredentials: false\n\n  serverless-offline: ${{self:custom.vars.serverless-offline, self:custom.defaults.serverless-offline}}\n  serverless-iot-local: ${{self:custom.vars.serverless-iot-local, self:custom.defaults.serverless-iot-local}}\n  # reinitializeOnConfChanged: ${{self:custom.vars.reinitializeOnConfChanged, self:custom.defaults.reinitializeOnConfChanged}}\n\n  # serverless-dynamodb-local settings\n  # dynamodb:\n  #   start:\n  #     port: 4569\n  #     # migrate: true\n  #     inMemory: true\n  #     # use dockerized dynamodb from localstack\n  #     noStart: true\n  #   # tables:\n  #   #   - ${{self:custom.prefix}}events\n  #   #   - ${{self:custom.prefix}}bucket-0\n\n  # serverless-s3-local settings\n  # s3:\n  #   host: 0.0.0.0\n  #   port: 4572\n  #   # directory: /tmp\n  #   buckets:\n  #     - ${{self:custom.prefix}}objectsbucket\n  #     - ${{self:custom.prefix}}secretsbucket\n  #     - ${{self:custom.prefix}}privateconfbucket\n  #     - ${{self:custom.prefix}}fileuploadbucket\n  #     - ${{self:custom.prefix}}logsbucket\n  #   cors: false\n  #   # use dockerized s3 from localstack\n  #   noStart: true\n  #   create: false\n\n  # s3-encryption:\n  #   buckets:\n  #     SecretsBucket:\n  #       SSEAlgorithm: AES256\n\n  logRetentionInDays: 1\n  # daysBeforeLogsGoToGlacier: 7\n\n  # issue2233WorkaroundKey: issue2233WorkaroundKey\n  # defaultKMSKeyId: ${{self:custom.regionalPrefix}}default-key\n  # tradleStackPrefix: tdl-tradle-ltd-${{self:stage}}-\n  # tradleStackRegion: us-east-1\n  # updatesTopicName: ${{self:custom.tradleStackPrefix}}updates-announcements\n\n#   secrets: ${{file(secrets.${opt:stage, self:provider.stage}}.yml)}\n  # dynamodb:\n  #   start:\n  #     port: 8000\n  #     inMemory: true\n  #     migration: true\n  #   migration:\n  #     dir: offline/migrations\n\nprovider:\n  # avoid some bugs in serverless\n  versionFunctions: ${{self:custom.versionFunctions}}\n  tracing: true\n  # https://github.com/serverless/serverless/issues/4312#issuecomment-331946882\n  variableSyntax: \"\\\\${{([ ~:a-zA-Z0-9._\\\\'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}}\"\n  name: aws\n  runtime: nodejs10.x\n  nodeVersion: 'v10.x.x'\n  profile: ${{self:custom.profile}}\n  stage: ${{self:custom.stage}}\n  region: ${{self:custom.region}}\n  removeOldDeployments: false\n  memorySize: 512\n  timeout: 60\n  # deploymentBucket: io.tradle.${{self:custom.stage}}.deploys\n  # deploymentBucket: ${{self:custom.vars.deploymentBucket, self:custom.defaultVars.deploymentBucket}}\n  deploymentBucket: ${{self:custom.deploymentBucket}}\n  environment:\n    # enable long stack traces\n    BLUEBIRD_DEBUG: 1\n    # IOT_TOPIC_PREFIX: ${{self:custom.prefixIOTTopic}}\n    STACK_NAME:\n      Ref: AWS::StackName\n    BLOCKCHAIN:\n      Ref: BlockchainNetwork\n    SEALING_MODE:\n      Ref: SealingMode\n    SEAL_BATCHING_PERIOD:\n      Ref: SealBatchingPeriodInMinutes\n    CORDA_API_URL: ${{self:custom.corda.apiUrl}}\n    CORDA_API_KEY: ${{self:custom.corda.apiKey}}\n    DEBUG: ${{self:custom.vars.debug.filter, self:custom.defaults.debug.filter}}\n    DEBUG_LEVEL: ${{self:custom.vars.debug.level, self:custom.defaults.debug.level}}\n    DEBUG_FORMAT: ${{self:custom.vars.debug.format, self:custom.defaults.debug.format}}\n    # SERVERLESS_PREFIX: ${{self:custom.prefix}}\n    # STACK_STAGE: ${{self:custom.stage}}\n    # SERVERLESS_SERVICE_NAME: ${{self:service}}\n    STACK_STAGE:\n      Ref: Stage\n    NO_TIME_TRAVEL: false # allow time-travel messages for now\n    ENABLE_XRAY:\n      Ref: EnableTracing\n    R_STACK:\n      Ref: AWS::StackId\n    R_BUCKET_Objects:\n      Fn::GetAtt: Buckets.Outputs.Objects\n    R_BUCKET_Secrets:\n      Fn::GetAtt: Buckets.Outputs.Secrets\n    R_BUCKET_FileUpload:\n      Fn::GetAtt: Buckets.Outputs.FileUpload\n    R_BUCKET_Logs:\n      Fn::GetAtt: Buckets.Outputs.Logs\n    R_BUCKET_PrivateConf:\n      Fn::GetAtt: Buckets.Outputs.PrivateConf\n    R_BUCKET_ServerlessDeployment:\n      Fn::GetAtt: Buckets.Outputs.Deployment\n    R_KEY_DefaultEncryption:\n      Fn::GetAtt: Keys.Outputs.EncryptionKey\n    R_TABLE_Events:\n      Fn::GetAtt: Tables.Outputs.Events\n    R_TABLE_Bucket0:\n      Fn::GetAtt: Tables.Outputs.Bucket0\n    R_RESTAPI_ApiGateway:\n      Fn::GetAtt: Source.Outputs.ApiGatewayRestApi\n    R_ROLE_IotClient:\n      Fn::GetAtt: IAM.Outputs.IotClientRole\n# this is used only for pr9ovisioned scaling\n    R_ROLE_AutoScalingDynamoDB:\n      Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n    R_TOPIC_AdminAlerts:\n      Ref: AwsAlertsAlarm\n    IOT_ENDPOINT:\n      Fn::GetAtt: Discovery.Outputs.IotEndpoint\n\n  apiKeys:\n    - Fn::Sub: 'issue2233WorkaroundKey1-${AWS::StackName}'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:CreateTable\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource:\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Events\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Events\n            - '/index/*'\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Bucket0\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Bucket0\n            - '/index/*'\n\n\n    - Effect: Allow\n      Action:\n        # so lambdas can list resources in their stack\n        - cloudformation:ListStackResources\n        - CloudFormation:DescribeStacks\n        # need to get own template to generate a child deployment template\n        - cloudformation:GetTemplate\n        - cloudformation:UpdateTerminationProtection\n        # - cloudformation:UpdateStack\n      Resource:\n        Fn::Sub: 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'\n\n    # - Effect: Allow\n    #   Action:\n\n    #   Resource:\n    #     Ref: AWS::StackId\n\n    # allow lambdas to update themselves / each other\n    - Effect: Allow\n      Action:\n        - lambda:UpdateFunctionConfiguration\n        - lambda:ListFunctions\n      # This action does not support resource-level permissions\n      Resource: \"*\"\n\n    # allow lambdas to call each other\n    # TODO: make this more fine grained\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n        - lambda:AddPermission\n        - lambda:GetPolicy\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - lambda:GetFunctionConfiguration\n      Resource:\n        - Fn::Sub: 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'\n\n    # allow access to bucket\n    # TODO: give access only to the lambdas that need it\n    - Effect: Allow\n      Action:\n        # needed to get NoSuchKey error instead of AccessDenied for non-existent items\n        # https://forums.aws.amazon.com/thread.jspa?threadID=56531\n        - s3:ListBucket\n        - s3:PutBucketReplication\n        - s3:PutBucketVersioning\n        - s3:GetBucketPolicy\n        # needed to create regional deployment buckets\n        - s3:CreateBucket\n        # # needed to enable bucket encryption\n        # - s3:PutEncryptionConfiguration\n      Resource:\n        # Fn::Join:\n        #   - ''\n        #   - - \"arn:aws:s3:::\"\n        #     - Ref: AWS::StackName\n        #     - \"-*\"\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Objects\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Secrets\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.PrivateConf\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.FileUpload\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Logs\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Deployment\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-deploymentbucket-*'\n        # same purpose as previous, for backwards compat\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-serverlessdeploymentbucket-*'\n\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        # needed to create an object with public-read\n        - s3:PutObjectAcl\n        - s3:GetObject\n      Resource:\n        # Fn::Join:\n        #   - ''\n        #   - - \"arn:aws:s3:::\"\n        #     - Ref: AWS::StackName\n        #     - \"-*/*\"\n\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Objects\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Secrets\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.PrivateConf\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.FileUpload\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Logs\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Deployment\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-deploymentbucket-*/*'\n        # same purpose as previous, for backwards compat\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-serverlessdeploymentbucket-*/*'\n\n\n    # - Effect: Allow\n    #   Action:\n    #     - s3:DeleteObject\n    #     - s3:DeleteObjectVersion\n    #   Resource:\n    #     # currently only needed to delete terms and conditions\n    #     - Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:s3:::\"\n    #         - Fn::GetAtt: Buckets.Outputs.PrivateConf\n    #         - \"/conf/*\"\n\n    - Effect: Allow\n      Action:\n        - s3:GetBucketLocation\n        - s3:ListAllMyBuckets\n      Resource: \"arn:aws:s3:::*\"\n\n    - Effect: Allow\n      Action:\n        - sns:AddPermission\n        - sns:CreateTopic\n        - sns:DeleteTopic\n        - sns:Publish\n        - sns:Subscribe\n        - sns:Unsubscribe\n        - sns:ListSubscriptions\n        - sns:ListSubscriptionsByTopic\n        - sns:GetTopicAttributes\n        - sns:SetTopicAttributes\n      Resource: \"*\"\n\n    # Iot\n    - Effect: Allow\n      Action: [\"iot:Connect\", \"iot:Subscribe\", \"iot:Publish\", \"iot:Receive\", \"iot:DescribeEndpoint\"]\n      Resource: \"*\"\n\n    # gen Iot temp credentials (lambda: preauth)\n    - Effect: Allow\n      Action:\n        - sts:AssumeRole\n      Resource:\n        - Fn::GetAtt: IAM.Outputs.IotClientRole\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource: \"*\"\n    - Effect: Allow\n      Sid: AllowCloudFrontUpdateDistribution\n      Action:\n        - cloudfront:updateDistribution\n      Resource: \"*\"\n\n    # - Effect: Allow\n    #   Action:\n    #     - apigateway:GET\n    #     - apigateway:PUT\n    #   Resource:\n    #     Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:apigateway:\"\n    #         - Ref: AWS::Region\n    #         - \"::/restapis/\"\n    #         - Ref: ApiGatewayRestApi\n    #         - \"/*\"\n\n    # - Effect: Allow\n    #   Action:\n    #     - apigateway:POST\n    #   Resource:\n    #     Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:apigateway:\"\n    #         - Ref: AWS::Region\n    #         - \"::/restapis/\"\n    #         - Ref: ApiGatewayRestApi\n\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n        - ses:SendRawEmail\n        - ses:GetIdentityVerificationAttributes\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricAlarm\n        - cloudwatch:DescribeAlarms\n        - cloudwatch:DescribeAlarmsForMetric\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - kms:Decrypt\n        - kms:GenerateDataKey\n      Resource:\n        - Fn::GetAtt: Keys.Outputs.EncryptionKeyArn\n\n    - Effect: Allow\n      Action:\n        - kms:Encrypt\n        - kms:Decrypt\n        - kms:GenerateDataKey\n      Resource:\n        - Fn::If:\n          - DoEncryptBuckets\n          - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn\n          - Ref: AWS::NoValue\n\n    - Effect: Allow\n      Action:\n        - textract:*\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - athena:*\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - glue:*\n      Resource: '*'\n\n    # - Effect: Allow\n    #   Action:\n    #     - 'ssm:GetParameter*'\n    #     - 'ssm:PutParameter*'\n    #   Resource:\n    #     - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tradle/${{self:custom.prefix}}*'\n\n    # - Effect: Allow\n    #   Action:\n    #     # TODO: narrow this down\n    #     # look out for error: \"The specified log group does not exist\"\n    #     - logs:*\n    #     # - logs:PutSubscriptionFilter\n    #     # - logs:DeleteSubscriptionFilter\n    #   Resource: \"*\"\n\nfunctions:\n  # httpRouter:\n  #   handler: lib/in-house-bot/lambda/http/router.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: post\n  #         cors: ${{self:custom.cors}}\n\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: put\n  #         cors: ${{self:custom.cors}}\n\n  # 1. generates temporary credentials (STS) for new connections,\n  #    and assumes IotClientRole on them\n  # 2. creates an unauthenticated session,\n  #    generates a challenge to be signed (verified in /auth)\n  preauth:\n    handler: lib/in-house-bot/lambda/http/preauth.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: preauth\n          method: post\n          cors: ${{self:custom.cors}}\n\n  # 1. validates the challenge response\n  # 2. marks the session as authenticated\n  auth:\n    handler: lib/in-house-bot/lambda/http/auth.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: auth\n          method: post\n          cors: ${{self:custom.cors}}\n\n  inbox:\n    handler: lib/in-house-bot/lambda/http/inbox.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: inbox\n          method: put\n          cors: ${{self:custom.cors}}\n      - http:\n          path: inbox\n          method: post\n          cors: ${{self:custom.cors}}\n\n  # delivery-retry:\n  #   handler: lib/in-house-bot/lambda/delivery-retry.handler\n  #   memorySize: 128\n  #   timeout: 60\n    # events:\n    #   - schedule:\n    #       rate: rate(1 minute)\n    #       enabled: true\n\n  # triggered when an internal bot requests a message range (inbound messages)\n  # inbox:\n  #   handler: lib/lambda/inbox.handler\n  #   memorySize: 1024\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * as data, topic() as topic FROM 'messages/get'\"\n\n  # triggered when a client requests a message range (outbound messages)\n  # outbox:\n  #   handler: lib/lambda/outbox.handler\n  #   memorySize: 1024\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * as data, topic() as topic FROM '+/restore'\"\n\n  #   environment:\n  #     DEBUG: tradle:*\n\n  # handles IoT (MQTT) connections post-authentication\n  # updates presence in PresenceTable\n\n  oniotlifecycle:\n    handler: lib/in-house-bot/lambda/mqtt/oniotlifecycle.handler\n    events:\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/connected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${AWS::StackName}-')\"\n          sqlVersion: ${{self:custom.versionSQL}}\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${AWS::StackName}-')\"\n          sqlVersion: ${{self:custom.versionSQL}}\n\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # onconnect:\n  #   handler: lib/in-house-bot/lambda/mqtt/onconnect.handler\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * FROM '$aws/events/presence/connected/#'\"\n  #         sqlVersion: ${{self:custom.versionSQL}}\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # triggered when a client sends a message\n  #\n  # validates, stores in MessagesTable, in ObjectsBucker (for now),\n  # and passes off to bot engine\n  onmessage:\n    handler: lib/in-house-bot/lambda/mqtt/onmessage.handler\n    memorySize: 1024\n    #   SERVERLESS_PREFIX: ${{self:custom.prefix}}\n    #   STACK_STAGE: ${{self:custom.stage}}\n    #   SERVERLESS_SERVICE_NAME: ${{self:service}}\n    events:\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT encode(*, 'base64') as data, clientid() as clientId, topic() as topic FROM '${AWS::StackName}/+/pub/outbox'\"\n          sqlVersion: ${{self:custom.versionSQL}}\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # same as onmessage, but can handle larger payloads\n  # MQTT is limited to 128KB, HTTP to 6MB\n  # onmessage_http:\n  #   handler: lib/in-house-bot/lambda/http/onmessage.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         path: message\n  #         method: put\n  #     - http:\n  #         path: message\n  #         method: post\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # performs service discovery - builds a map of logical->physical ids\n  # and writes that map to the environment variables of all other lambdas\n  # setenvvars:\n  #   handler: lib/lambda/setenvvars.handler\n  #   # hack to enable discovery own function's own stack\n  #   description:\n  #     Ref: AWS::StackId\n\n  # initializes provider identity\n  # generates a new identity and keys, and other misc crap\n  # init:\n  #   handler: lib/lambda/init.handler\n  #   memorySize: 256\n  #   timeout: 300\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # setstyle:\n  #   handler: lib/lambda/setstyle.handler\n  #   memorySize: 128\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # precreate-tables:\n  #   handler: lib/lambda/precreate-tables.handler\n  #   memorySize: 128\n  #   timeout: 300\n\n  # Blockchain\n\n  # bitcoin faucet (surprise!)\n  # distributes testnet coins from local funds\n  # faucet_bitcoin:\n  #   handler: lib/lambda/faucet-bitcoin.withdraw\n\n  # gets funds from a bitcoin testnet faucet\n  # recharge_bitcoin:\n  #   handler: lib/lambda/recharge-bitcoin.handler\n  #   events:\n  #     - schedule:\n  #         rate: rate(10 minutes)\n  #         enabled: false\n\n  # get funds from ethereum testnet faucet\n  # (doesn't work on rinkeby, and doesn't work well on ropsten)\n  # recharge_ethereum:\n  #   handler: lib/lambda/recharge-ethereum.handler\n  #   events:\n  #     - schedule:\n  #         rate: rate(10 minutes)\n  #         enabled: false\n\n  # writes pending transactions to the blockchain\n  jobScheduler:\n    handler: lib/in-house-bot/lambda/job-scheduler.handler\n    memorySize: 256\n    timeout: 30\n    events:\n      - schedule:\n          rate: rate(1 minute)\n    # alarms:\n    #   - functionErrors\n    #   # - functionThrottles\n    #   # - functionInvocations\n\n  genericJobRunner:\n    handler: lib/in-house-bot/lambda/job-runner.handler\n    memorySize: 1024\n    timeout: 900\n    alarms:\n      - functionErrors\n      - functionInvocations\n\n  # polls the status of unconfirmed blockchain transactions\n  # pollchain:\n  #   handler: lib/in-house-bot/lambda/pollchain.handler\n  #   memorySize: 256\n  #   timeout: 300\n  #   # events:\n  #   #   - schedule:\n  #   #       rate: rate(10 minutes)\n  #   #       # enabled: false\n  #   alarms:\n  #     - functionErrors\n  #     # - functionThrottles\n  #     # - functionInvocations\n\n  #   # environment:\n  #   #   ENCRYPTION_KEY: ${{self:custom.secrets.SESSION_KEY}}\n  #   #   EMAIL_SERVICE_API_KEY: ${{self:custom.secrets.EMAIL_SERVICE_API_KEY}}\n\n  # check-failed-seals:\n  #   handler: lib/in-house-bot/lambda/check-failed-seals.handler\n  #   memorySize: 256\n  #   timeout: 60\n  #   # events:\n  #   #   - schedule:\n  #   #       rate: rate(17 minutes)\n  #   #       # enabled: false\n  #   alarms:\n  #     - functionErrors\n\n  # force reinitialize lambda containers\n  # reinitializeContainers:\n  #   handler: lib/in-house-bot/lambda/reinitialize-containers.handler\n\n  # useful during development\n  # trigger a message to be queued/sent to a user\n  # send:\n  #   handler: lib/in-house-bot/lambda/send.handler\n  #   memorySize: 256\n\n  info:\n    handler: lib/in-house-bot/lambda/http/info.handler\n    memorySize: 256\n    events:\n      - http:\n          path: info\n          method: get\n          cors: ${{self:custom.cors}}\n\n  # rename later, temporarily can't rename, get AWS error:\n  #   \"Modifying service token is not allowed..\"\n  bot_oninit:\n    handler: lib/in-house-bot/lambda/oninit.handler\n    memorySize: 1024\n    timeout: 900\n\n  # onsealstream:\n  #   handler: lib/in-house-bot/lambda/onsealstream.handler\n  #   memorySize: 256\n  #   events:\n  #     - stream:\n  #         type: dynamodb\n  #         batchSize: 1\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - SealsTable\n  #             - StreamArn\n  #   alarms:\n  #     - functionErrors\n\n  # onmessagestream:\n  #   handler: lib/in-house-bot/lambda/onmessagestream.handler\n  #   memorySize: 256\n  #   events:\n  #     - stream:\n  #         type: dynamodb\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - MessagesTable\n  #             - StreamArn\n  #   alarms:\n  #     - functionErrors\n  #     # - functionThrottles\n  #     # - functionInvocations\n  #   # onError:\n  #     # Ref: DeadLetterQueue\n\n  onresourcestream:\n    handler: lib/in-house-bot/lambda/onresourcestream.handler\n    memorySize: 256\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 20\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt: Tables.Outputs.Bucket0Stream\n    alarms:\n      - functionErrors\n\n  graphql:\n    # make sure graphql route gets loaded\n    handler: lib/in-house-bot/lambda/http/graphql.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: graphql\n          method: get\n          cors: ${{self:custom.cors}}\n      - http:\n          path: graphql\n          method: post\n          cors: ${{self:custom.cors}}\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # setstyle:\n  #   handler: lib/in-house-bot/lambda/set-style.handler\n  #   memorySize: 128\n\n  setconf:\n    handler: lib/in-house-bot/lambda/set-conf.handler\n    memorySize: 1024\n\n  # addfriend:\n  #   handler: lib/in-house-bot/lambda/add-friend.handler\n  #   memorySize: 256\n\n  # addfriend_dev:\n  #   handler: lib/in-house-bot/lambda/add-friend.handlerHttp\n  #   # dev mode only\n  #   events:\n  #     - http:\n  #         path: /addfriend\n  #         method: post\n\n  # addcontact:\n  #   handler: lib/in-house-bot/lambda/add-contact.handler\n  #   environment:\n  #     DEBUG: tradle:*\n\n  # bot-serviced lambda\n  # generates sample data for browsing with GraphQL\n  # samples:\n  #   handler: lib/in-house-bot/lambda/samples.handler\n  #   memorySize: 1024\n\n  # samples_dev:\n  #   handler: lib/in-house-bot/lambda/samples.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         path: samples\n  #         method: post\n\n  import_data_utils:\n    handler: lib/in-house-bot/lambda/import-data-utils.handler\n\n  # import_data_bundle:\n  #   handler: lib/in-house-bot/lambda/import-data-bundle.handler\n\n  # create_data_claim:\n  #   handler: lib/in-house-bot/lambda/create-data-claim.handler\n\n  # get_data_bundle:\n  #   handler: lib/in-house-bot/lambda/get-data-bundle.handler\n\n  # onfido_register:\n  #   handler: lib/in-house-bot/lambda/onfido-register.handler\n\n  onfido:\n    handler: lib/in-house-bot/lambda/http/onfido-webhook.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: onfido\n          method: post\n          cors: ${{self:custom.cors}}\n\n  cli:\n    handler: lib/in-house-bot/lambda/cli.handler\n    timeout: 300\n\n  documentChecker:\n    handler: lib/in-house-bot/lambda/http/documentChecker-webhook.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: documentChecker\n          method: post\n          cors: ${{self:custom.cors}}\n  # qr:\n  #   handler: lib/in-house-bot/lambda/http/qr.handler\n  #   events:\n  #     - http:\n  #         path: qr\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\n  deploymentPingback:\n    handler: lib/in-house-bot/lambda/http/deployment-pingback.handler\n    # timeout: 300\n    events:\n      - http:\n          path: deploymentPingback\n          method: post\n          cors: ${{self:custom.cors}}\n\n  confirmation:\n    handler: lib/in-house-bot/lambda/http/confirmation.handler\n    events:\n      - http:\n          path: confirmation\n          method: get\n          cors: ${{self:custom.cors}}\n\n  # onChildStackStatusChanged:\n  #   handler: lib/in-house-bot/lambda/sns/on-child-stack-status-changed.handler\n    # events added dynamically in \"deployment.subscribeToChildStackStatusAlerts\"\n\n  # not used at the moment\n  # updateStack:\n  #   handler: lib/in-house-bot/lambda/update-stack.handler\n    # role: UpdateStackIamRole\n    # events added dynamically\n\n  logProcessor:\n    handler: lib/in-house-bot/lambda/log-processor.handler\n    # events added in compile phase\n\n  logAlertProcessor:\n    handler: lib/in-house-bot/lambda/log-alert-processor.handler\n    # events added at runtime\n\n  # shortToLongUrlMapping:\n  #   handler: lib/in-house-bot/lambda/http/short-to-long-url-mapping.handler\n  #   events:\n  #     - http:\n  #         path: l/{any+}\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\nresources:\n  Parameters:\n    Refresh:\n      Type: String\n      Default: \"1.0\"\n\n    SourceDeploymentBucket:\n      Type: String\n      Default: \"\"\n\n    # Existing Resources group\n    ExistingEventsTable:\n      Type: String\n      Default: \"\"\n\n    ExistingBucket0Table:\n      Type: String\n      Default: \"\"\n\n    ExistingBucket0TableStreamArn:\n      Type: String\n      Default: \"\"\n\n    ExistingObjectsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingSecretsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingPrivateConfBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingFileUploadBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingLogsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingEncryptionKey:\n      Type: String\n      Default: \"\"\n      Description: KMS key id, if you want to use an existing one instead of creating a new one\n\n    ExistingBucketEncryptionKey:\n      Type: String\n      Default: \"\"\n      Description: KMS key id, if you want to use an existing one instead of creating a new one\n\n    ExistingDeploymentBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingApiGatewayRestApi:\n      Type: String\n      Default: \"\"\n\n    ExistingApiGatewayRestApiRootResourceId:\n      Type: String\n      Default: \"\"\n\n    # Organization Info group\n\n    OrgName:\n      Type: String\n      Description: your organization's name, as you want users to see it (e.g. Example, Inc)\n\n    OrgDomain:\n      Type: String\n      Description: a domain or subdomain you own (e.g. example.com)\n\n    OrgLogo:\n      Type: String\n      Description: a publically accessible url for your logo image (e.g. https://example.com/logo.jpeg)\n\n    OrgAdminEmail:\n      Type: String\n      Description: your AWS admin's email (e.g. jojo@example.com)\n\n    # Configuration group\n\n    BlockchainNetwork:\n      Type: String\n      Default: 'ethereum:rinkeby'\n      AllowedValues:\n        - 'ethereum:mainnet'\n        - 'ethereum:rinkeby'\n        - 'ethereum:ropsten'\n\n    SealingMode:\n      Type: String\n      Default: 'single'\n      AllowedValues:\n        - 'single'\n        - 'batch'\n\n    SealBatchingPeriodInMinutes:\n      Type: Number\n      Description: how often to batch items for sealing (ignore if SealingMode is 'single')\n      Default: 5\n\n    ProvisionDynamoDBScaling:\n      Type: String\n      Default: \"false\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    PointInTimeRecoveryEnabledEventsTable:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    PointInTimeRecoveryEnabledBucket0Table:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    # default to deleting logs\n    # by setting transition days > TTL days\n    LogsDaysBeforeTransitionToGlacier:\n      Type: Number\n      Description: days before logs are transitioned to Amazon Glacier\n      Default: 3\n\n    LogsTTL:\n      Type: Number\n      Description: days before logs are deleted from Amazon Glacier\n      Default: 1\n\n    EncryptBuckets:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    EncryptTables:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    EnableTracing:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    # Stack Info group\n\n    Stage:\n      Type: String\n      Default: dev\n      AllowedValues:\n        - dev\n        - prod\n\n  Metadata:\n    AWS::CloudFormation::Interface:\n      ParameterGroups:\n        - Label:\n            default: \"Organization Info\"\n          Parameters:\n            - OrgName\n            - OrgDomain\n            - OrgLogo\n            - OrgAdminEmail\n\n        - Label:\n            default: \"Configuration\"\n          Parameters:\n            - BlockchainNetwork\n            - PointInTimeRecoveryEnabledEventsTable\n            - PointInTimeRecoveryEnabledBucket0Table\n            - ProvisionDynamoDBScaling\n            - LogsDaysBeforeTransitionToGlacier\n            - LogsTTL\n            - EncryptBuckets\n            - EncryptTables\n            - EnableTracing\n\n        - Label:\n            default: \"Stack Info\"\n          Parameters:\n            - Stage\n            - Refresh\n\n        - Label:\n            default: \"Existing Resources (ignore if this is a new deployment)\"\n          Parameters:\n            - ExistingEventsTable\n            - ExistingBucket0Table\n            - ExistingBucket0TableStreamArn\n            - ExistingObjectsBucket\n            - ExistingSecretsBucket\n            - ExistingPrivateConfBucket\n            - ExistingFileUploadBucket\n            - ExistingLogsBucket\n            - ExistingDeploymentBucket\n            - ExistingEncryptionKey\n            - ExistingBucketEncryptionKey\n            - ExistingApiGatewayRestApi\n            - ExistingApiGatewayRestApiRootResourceId\n\n      ParameterLabels:\n        # Existing Resources\n        ExistingEventsTable:\n          default: \"Events Table\"\n        ExistingBucket0Table:\n          default: \"Bucket0 Table\"\n        ExistingBucket0TableStreamArn:\n          default: \"Bucket0 Table Stream Arn\"\n        ExistingObjectsBucket:\n          default: \"Objects Bucket\"\n        ExistingSecretsBucket:\n          default: \"Secrets Bucket\"\n        ExistingPrivateConfBucket:\n          default: \"PrivateConf Bucket\"\n        ExistingFileUploadBucket:\n          default: \"FileUpload Bucket\"\n        ExistingLogsBucket:\n          default: \"Logs Bucket\"\n        ExistingDeploymentBucket:\n          default: \"Deployment Bucket\"\n        ExistingEncryptionKey:\n          default: \"Encryption Key\"\n        ExistingBucketEncryptionKey:\n          default: \"Bucket Encryption Key\"\n\n        ExistingApiGatewayRestApi:\n          default: \"ApiGateway RestApi Id\"\n        ExistingApiGatewayRestApiRootResourceId:\n          default: \"ApiGateway RestApi root resource id\"\n\n        # Organization Info\n        OrgName:\n          default: Name\n        OrgDomain:\n          default: Domain\n        OrgLogo:\n          default: Logo URL\n        OrgAdminEmail:\n          default: Admin Email\n\n        # Configuration\n\n        ## Blockchain configuration\n        BlockchainNetwork:\n          default: Blockchain Network\n        SealingMode:\n          default: Sealing Mode\n        SealBatchingPeriodInMinutes:\n          default: Seal batching period (in minutes)\n\n        ## Other configuration\n        PointInTimeRecoveryEnabledEventsTable:\n          default: Enable point-in-time recovery for the Events table\n        PointInTimeRecoveryEnabledBucket0Table:\n          default: Enable point-in-time recovery for the Bucket0 table\n        ProvisionDynamoDBScaling:\n          default: Use DynamoDB provisioned auto-scaling policy\n        LogsDaysBeforeTransitionToGlacier:\n          default: days before logs are transitioned from to Glacier\n        LogsTTL:\n          default: days before logs are deleted forever (from Glacier)\n        EncryptBuckets:\n          default: encrypt buckets\n        EncryptTables:\n          default: encrypt tables\n        EnableTracing:\n          default: enable AWS X-Ray tracing for lambda functions\n\n        # Stack Info\n        Stage:\n          default: Stage\n\n  Mappings:\n    # org:\n    #   init: ${{self:custom.org}}\n    #   contact:\n    #     adminEmail: ${{self:custom.emailForNotifications}}\n\n    deployment:\n      init:\n        # service: ${{self:service}}\n        # stage: ${{self:custom.stage}}\n        stackName: ${{self:custom.stackName}}\n        # encryptionKey:\n        # which MyCloud generated the template\n        referrerUrl: ''\n        deploymentUUID: ''\n\n  Conditions:\n    DoProvisionDynamoDBScaling:\n      Fn::Equals:\n        - Ref: ProvisionDynamoDBScaling\n        - \"true\"\n\n    DoCreateDeploymentBucket:\n      Fn::Equals:\n        - Ref: ExistingDeploymentBucket\n        - \"\"\n\n    DoCreateApiGatewayRestApi:\n      Fn::Or:\n        - Fn::Equals:\n          - Ref: ExistingApiGatewayRestApi\n          - \"\"\n        - Fn::Equals:\n          - Ref: ExistingApiGatewayRestApiRootResourceId\n          - \"\"\n\n    DoEncryptBuckets:\n      Fn::Equals:\n        - Ref: EncryptBuckets\n        - \"true\"\n\n    UseSourceDeploymentBucket:\n      Fn::Not:\n        - Fn::Equals:\n          - Ref: SourceDeploymentBucket\n          - \"\"\n\n  Resources:\n    Source:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Join:\n            - ''\n            - - https://\n              - Fn::If:\n                - UseSourceDeploymentBucket\n                - Ref: SourceDeploymentBucket\n                - Ref: ServerlessDeploymentBucket\n              - .s3.amazonaws.com/${{self:custom.s3TemplatesPath}}\n              - /echo.json\n        Parameters:\n          SourceDeploymentBucket:\n            Fn::If:\n              - UseSourceDeploymentBucket\n              - Ref: SourceDeploymentBucket\n              - Ref: ServerlessDeploymentBucket\n          ApiGatewayRestApi:\n            Fn::If:\n              - DoCreateApiGatewayRestApi\n              - Ref: ApiGatewayRestApi\n              - Ref: ExistingApiGatewayRestApi\n          ApiGatewayRestApiRootResourceId:\n            Fn::If:\n              - DoCreateApiGatewayRestApi\n              - Fn::GetAtt: ApiGatewayRestApi.RootResourceId\n              - Ref: ExistingApiGatewayRestApiRootResourceId\n\n    # has to be here for serverless to pick it up\n    ServerlessDeploymentBucket:\n      Type: AWS::S3::Bucket\n      Condition: DoCreateDeploymentBucket\n      Description: destination for lambda code, templates, and other deployment assets\n      DeletionPolicy: Retain\n      Properties:\n        VersioningConfiguration:\n          Status: Enabled\n\n    Discovery:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/discovery.json'\n\n    Keys:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/keys.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          ExistingEncryptionKey:\n            Ref: ExistingEncryptionKey\n          ExistingBucketEncryptionKey:\n            Ref: ExistingBucketEncryptionKey\n          NeedBucketEncryptionKey:\n            Ref: EncryptBuckets\n\n    Tables:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/tables.json'\n        Parameters:\n          Refresh:\n            Ref: Refresh\n          Namespace:\n            Ref: AWS::StackName\n          ExistingEventsTable:\n            Ref: ExistingEventsTable\n          ExistingBucket0Table:\n            Ref: ExistingBucket0Table\n          ExistingBucket0TableStreamArn:\n            Ref: ExistingBucket0TableStreamArn\n          PointInTimeRecoveryEnabledEventsTable:\n            Ref: PointInTimeRecoveryEnabledEventsTable\n          PointInTimeRecoveryEnabledBucket0Table:\n            Ref: PointInTimeRecoveryEnabledBucket0Table\n          Encrypt:\n            Ref: EncryptTables\n          ProvisionDynamoDBScaling:\n            Ref: ProvisionDynamoDBScaling\n          EncryptionKey:\n            Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias\n\n\n    Buckets:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/buckets.json'\n        Parameters:\n          ExistingObjectsBucket:\n            Ref: ExistingObjectsBucket\n          ExistingSecretsBucket:\n            Ref: ExistingSecretsBucket\n          ExistingPrivateConfBucket:\n            Ref: ExistingPrivateConfBucket\n          ExistingFileUploadBucket:\n            Ref: ExistingFileUploadBucket\n          ExistingLogsBucket:\n            Ref: ExistingLogsBucket\n          ExistingDeploymentBucket:\n            Fn::If:\n              - DoCreateDeploymentBucket\n              - Ref: ServerlessDeploymentBucket\n              - Ref: ExistingDeploymentBucket # ServerlessDeploymentBucket\n          LogsDaysBeforeTransitionToGlacier:\n            Ref: LogsDaysBeforeTransitionToGlacier\n          LogsTTL:\n            Ref: LogsTTL\n          EncryptionKey:\n            Fn::If:\n              - DoEncryptBuckets\n              - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias\n              - \"\"\n\n    IAM:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/iam.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          ObjectsBucket:\n            Fn::GetAtt: Buckets.Outputs.Objects\n          SecretsBucket:\n            Fn::GetAtt: Buckets.Outputs.Secrets\n          PrivateConfBucket:\n            Fn::GetAtt: Buckets.Outputs.PrivateConf\n          FileUploadBucket:\n            Fn::GetAtt: Buckets.Outputs.FileUpload\n          LogsBucket:\n            Fn::GetAtt: Buckets.Outputs.Logs\n          DeploymentBucket:\n            Fn::GetAtt: Buckets.Outputs.Deployment\n          IotParentTopic:\n            Ref: AWS::StackName\n          BucketEncryptionKeyArn:\n            Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn\n\n    RefData:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/refdata.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          PrivateConfBucket:\n            Fn::GetAtt: Buckets.Outputs.PrivateConf\n\n    AutoScalingEventsTable:\n      Type: AWS::CloudFormation::Stack\n      Condition: DoProvisionDynamoDBScaling\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-events-table.json'\n        Parameters:\n          Table:\n            Fn::GetAtt: Tables.Outputs.Events\n          AutoScalingDynamoDBRole:\n            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n\n    AutoScalingBucketTable:\n      Type: AWS::CloudFormation::Stack\n      Condition: DoProvisionDynamoDBScaling\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-bucket-table.json'\n        Parameters:\n          Table:\n            Fn::GetAtt: Tables.Outputs.Bucket0\n          AutoScalingDynamoDBRole:\n            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Condition: DoCreateApiGatewayRestApi\n      DeletionPolicy: Retain\n      Properties:\n        Name:\n          Ref: AWS::StackName\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    AwsAlertsAlarm:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName:\n          Fn::Join:\n            - '-'\n            - - Ref: AWS::StackName\n              - alerts-alarm\n\n        Subscription:\n        - Protocol: email\n          Endpoint:\n            Ref: OrgAdminEmail\n            # Fn::FindInMap:\n            # - org\n            # - contact\n            # - adminEmail\n\n    Initialize:\n      Type: Custom::InitializeDeployment\n      DependsOn:\n        - Discovery\n        - Buckets\n        - Keys\n        - Tables\n        - IAM\n        - ApiGatewayApiKey1\n        - IamRoleLambdaExecution\n      Properties:\n        ServiceToken:\n          Fn::GetAtt: [BotUnderscoreoninitLambdaFunction, Arn]\n        commit: ${{self:custom.version.commit}}\n        name:\n          Ref: OrgName\n          # Fn::FindInMap: [\"org\", \"init\", \"name\"]\n        domain:\n          Ref: OrgDomain\n          # Fn::FindInMap: [\"org\", \"init\", \"domain\"]\n        logo:\n          Ref: OrgLogo\n          # Fn::FindInMap: [\"org\", \"init\", \"logo\"]\n        deploymentUUID:\n          Fn::FindInMap: [\"deployment\", \"init\", \"deploymentUUID\"]\n        referrerUrl:\n          Fn::FindInMap: [\"deployment\", \"init\", \"referrerUrl\"]\n\n        # stack update validation needs these to make sure they didn't change\n        ImmutableParameters:\n          Stage:\n            Ref: Stage\n          BlockchainNetwork:\n            Ref: BlockchainNetwork\n          EncryptTables:\n            Ref: EncryptTables\n\n  Outputs:\n    EventsTable:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Events\n\n    Bucket0Table:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Bucket0\n\n    Bucket0TableStream:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Bucket0Stream\n\n    ObjectsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Objects\n\n    SecretsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Secrets\n\n    PrivateConfBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.PrivateConf\n\n    FileUploadBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.FileUpload\n\n    LogsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Logs\n\n    DeploymentBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Deployment\n\n    ApiGatewayRestApi:\n      Value:\n        Fn::GetAtt: Source.Outputs.ApiGatewayRestApi\n\n    ApiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt: Source.Outputs.ApiGatewayRestApiRootResourceId\n\n    EncryptionKey:\n      Value:\n        Fn::GetAtt: Keys.Outputs.EncryptionKey\n\n    EncryptionKeyAlias:\n      Value:\n        Fn::GetAtt: Keys.Outputs.EncryptionKeyAlias\n\n    BucketEncryptionKey:\n      Value:\n        Fn::GetAtt: Keys.Outputs.BucketEncryptionKey\n\n    BucketEncryptionKeyAlias:\n      Value:\n        Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias\n\n    S3TemplatesBaseUrl:\n      Value:\n        Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}'\n\n    # serverless usually generates this\n    ServiceEndpoint:\n      Description: API root URL\n      Value:\n        Fn::Sub: 'https://${Source.Outputs.ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'\n\n    # let serverless generate this\n    # ServerlessDeploymentBucketName:\n    #   Value:\n    #     Fn::GetAtt: Buckets.Outputs.Deployment\n\n    SourceDeploymentBucket:\n      Value:\n        Ref: SourceDeploymentBucket\n\n    InitLogGroup:\n      Value:\n        Ref: BotUnderscoreoninitLogGroup\n"]},{"id":149026292,"files":["service: event-analytics-example-backend\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  secrets: ${file(secrets.yml):${self:provider.stage}}\n\nprovider:\n  stage: ${opt:stage, 'dev'}\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n        - \"athena:*\"\n        - \"s3:*\"\n        - \"glue:*\"\n      Resource:\n        - \"*\"\n# When you uncomment vpc please make sure lambda has access to internet: https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12  \n  vpc:\n    securityGroupIds:\n     - \"${self:custom.secrets.SECURITY_GROUP_IDS}\" # Your DB and Redis security groups here\n    subnetIds:\n     - \"${self:custom.secrets.SUBNET_IDS}\" # Your DB and Redis subnets here\n  environment:\n    CUBEJS_AWS_REGION: \"${self:custom.secrets.CUBEJS_AWS_REGION}\"\n    CUBEJS_AWS_S3_OUTPUT_LOCATION: \"${self:custom.secrets.CUBEJS_AWS_S3_OUTPUT_LOCATION}\"\n    CUBEJS_DB_TYPE: \"${self:custom.secrets.CUBEJS_DB_TYPE}\"\n    CUBEJS_API_SECRET: \"${self:custom.secrets.CUBEJS_API_SECRET}\"\n    REDIS_URL: \"${self:custom.secrets.REDIS_URL}\"\n    CUBEJS_APP: \"${self:service.name}-${self:provider.stage}\"\n    NODE_ENV: \"${self:provider.stage}\"\n    CUBEJS_API_URL:\n      Fn::Join:\n        - \"\"\n        - - \"https://\"\n          - Ref: \"ApiGatewayRestApi\"\n          - \".execute-api.\"\n          - Ref: \"AWS::Region\"\n          - \".amazonaws.com/${self:provider.stage}\"\n    AWS_ACCOUNT_ID:\n      Fn::Join:\n        - \"\"\n        - - Ref: \"AWS::AccountId\"\n\nfunctions:\n  cubejs:\n    handler: cube.api\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: ANY\n  cubejsProcess:\n    handler: cube.process\n    timeout: 630\n    events:\n      - sns: \"${self:service.name}-${self:provider.stage}-process\"\n\nplugins:\n  - serverless-express\n","service: event-collection\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:PutRecord\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  collect:\n    handler: handler.collect\n    events:\n      - http:\n          path: collect\n          method: post\n          cors: true\n","service: hn-insights\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  secrets: ${file(secrets.yml):${self:provider.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n# Athena permissions        \n        - \"athena:*\"\n        - \"s3:*\"\n        - \"glue:*\"\n      Resource:\n        - \"*\"\n# When you uncomment vpc please make sure lambda has access to internet: https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12  \n  vpc:\n    securityGroupIds:\n     - \"${self:custom.secrets.SECURITY_GROUP_IDS}\" # Your DB and Redis security groups here\n    subnetIds:\n     - \"${self:custom.secrets.SUBNET_IDS}\" # Your DB and Redis subnets here # Put here subnet with access to your DB, Redis and internet. For internet access 0.0.0.0/0 should be routed through NAT only for this subnet!\n  environment:\n    CUBEJS_EXT_DB_HOST: \"${self:custom.secrets.CUBEJS_EXT_DB_HOST}\"\n    CUBEJS_EXT_DB_USER: \"${self:custom.secrets.CUBEJS_EXT_DB_USER}\"\n    CUBEJS_EXT_DB_PASS: \"${self:custom.secrets.CUBEJS_EXT_DB_PASS}\"\n    CUBEJS_EXT_DB_NAME: \"${self:custom.secrets.CUBEJS_EXT_DB_NAME}\"\n    REDIS_URL: \"${self:custom.secrets.REDIS_URL}\"\n    CUBEJS_AWS_REGION: \"${self:custom.secrets.CUBEJS_AWS_REGION}\"\n    CUBEJS_AWS_S3_OUTPUT_LOCATION: \"${self:custom.secrets.CUBEJS_AWS_S3_OUTPUT_LOCATION}\"\n    CUBEJS_DB_TYPE: athena\n    CUBEJS_API_SECRET: \"${self:custom.secrets.CUBEJS_API_SECRET}\"\n    CUBEJS_APP: \"${self:service.name}-${self:provider.stage}\"\n    NODE_ENV: \"${self:provider.stage}\"\n    AWS_ACCOUNT_ID:\n      Fn::Join:\n        - \"\"\n        - - Ref: \"AWS::AccountId\"\n\npackage:\n  exclude:\n    - dashboard-app/**\n\nfunctions:\n  cubejs:\n    handler: cube.api\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: ANY\n  cubejsProcess:\n    handler: cube.process\n    timeout: 630\n    events:\n      - sns: \"${self:service.name}-${self:provider.stage}-process\"\n  hnCrawlerSchedule:\n    handler: hnCrawler.schedule\n    timeout: 60\n    reservedConcurrency: 1\n    events:\n      - schedule:\n          rate: rate(1 minute)\n  hnCrawlerRefreshPartitions:\n    handler: hnCrawler.refreshPartitions\n    timeout: 60\n    events:\n      - schedule:\n          rate: rate(5 minutes)\n\nplugins:\n  - serverless-express\n"]},{"id":34302698,"files":["# Hello World for AWS Lambda\nservice: hello-world # Service Name\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n","service: hello-world # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: capitalize\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: nodejs6\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  capitalize:\n    handler: handler.capitalize\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: hello-world\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello:\n    handler: handler.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-nodejs # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-php # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-python # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-swift # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  hello:\n    handler: ping.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-java8\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: java8\n    handler: com.serverless.Handler\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-nodejs # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: nodejs8.3\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-python # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: python2.7\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-ruby # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: ruby2.4.1\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","service: hello-world # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: python37\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-ruby # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  hello:\n    handler: handler.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-ruby # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  hello:\n    handler: handler.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  helloWorld:\n    handler: handler.hello\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  helloWorld:\n    handler: handler.index\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  greeting:\n    handler: handler.main\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: hello\n    script: helloWorld\n    events:\n      - http:\n          url: example.com/hello/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n\n  foo:\n    name: foo\n    script: bar\n    events:\n      - http:\n          url: example.com/foo/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\ncustom:\n  domain: example.com\n\nfunctions:\n  hello:\n    name: hello\n    webpack: webpack.config.js\n    script: helloWorld\n    events:\n      - http:\n          url: ${self:custom.domain}/hello/*\n          method: GET\n\n    resources:\n      wasm:\n        - variable: WASM\n          file: rust-wasm/pkg/rust_wasm_bg.wasm\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: hello\n    script: helloWorld # there must be a file called helloWorld.js\n    events:\n      - http:\n          url: example.com/hello/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n","# Welcome to serverless. Read the fn provider docs\n# https://serverless.com/framework/docs/providers/fn/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice:\n  name: hello-world\n#    config:\n#        some: 'val'\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: fn\n\nplugins:\n  - serverless-fn\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello: # <- hello references the ./hello folder and the func.go file inside\n    name: hello\n    version: 0.0.1\n    format: json\n    runtime: go\n    events:\n      - http:\n          path: /hellogo\n","# Welcome to serverless. Read the fn provider docs\n# https://serverless.com/framework/docs/providers/fn/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice:\n  name: hello-world\n#    config:\n#        some: 'val'\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: fn\n\nplugins:\n  - serverless-fn\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello: # <- hello references the ./hello folder and the func.js file inside\n    name: hello\n    version: 0.0.1\n    idletimeout: 45\n    format: json\n    memory: 256\n    #    config:\n    #        another: value\n    runtime: node\n    events:\n      - http:\n          path: /hello\n","service: gcf-go111 # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: go111\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: gcf-nodejs # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: gcf-python # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: python37\n  region: us-central1\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: twilio-nodejs-runtime-example # NOTE: update this with your service name\n\nprovider:\n  # Twilio runtime as your preferred provider\n  name: twilio\n\n  # Auth credentials which you'll find at twilio.com/console\n  config:\n    accountSid: ${env:TWILIO_ACCOUNT_SID}\n    authToken: ${env:TWILIO_AUTH_TOKEN}\n\n  # Dependency definitions similar\n  # to dependencies in a package.json\n  # -> these dependencies will be available in the\n  #    Twilio Node.js runtime\n  dependencies:\n    asciiart-logo: '*'\n\n  # Twilio runtime supports several domains\n  # your functions and assets will be available under\n  # -> defaulting to 'dev'\n  environment: ${env:TWILIO_RUNTIME_ENV, 'dev'}\n\n  # Environment variables passed to your functions\n  # available via process.env\n  environmentVars:\n    MY_MESSAGE: 'THIS IS cool stuff'\n\n# Twilio runtime has to be added a plugin\nplugins:\n  - '@twilio-labs/serverless-twilio-runtime'\n\nfunctions:\n  hello-world:\n    # Path to the JS handler function in the project (without file extension '.js')\n    handler: handler\n    # URL path of the function after deployment\n    path: /hello/world\n    # visibility of the function (can be \"public\" or \"protected\")\n    access: public\n\nresources:\n  assets:\n    # Asset name\n    example-image:\n      # path to the asset in the project\n      filePath: example.jpg\n      # URL path to the asset after deployment\n      path: /assets/foo/example.jpg\n      # visibility of the asset\n      access: public\n","# Welcome to Serverless!\n#\n# For full config options, check out the Alibaba Cloud Function Compute\n# plugin docs:\n#    https://github.com/aliyun/serverless-aliyun-function-compute\n#\n# For documentation on Alibaba Cloud Function Compute itself:\n#    https://serverless.aliyun.com\n\n# Update the service name below with your own service name\n\nservice: aliyun-nodejs\n\nprovider:\n  name: aliyun\n  runtime: nodejs8\n  credentials: ~/.aliyuncli/credentials # path must be absolute\n\nplugins:\n  - serverless-aliyun-function-compute\n\npackage:\n  exclude:\n    - package-lock.json\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello:\n    handler: index.hello\n    events:\n      - http:\n          path: /foo\n          method: get\n","service: 'some-aws-service'\nprovider: 'aws'\n","service: 'some-other-service'\nprovider: 'other'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-clojure\n# NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n  timeout: 300\n  memorySize: 1536\n  logRetentionInDays: 30\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: ${file(build/build.json):distribution}\n\nfunctions:\n  hello:\n    handler: hello::handler\n    tags:\n      VERSION: ${file(build/build.json):version}\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-csharp # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore2.1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello\n\n    # you can add packaging information here\n    package:\n      artifact: bin/release/netcoreapp2.1/hello.zip\n    #  exclude:\n    #    - exclude-me.js\n    #    - exclude-me-dir/**\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-fsharp # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore2.1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: FsharpHandlers::AwsDotnetFsharp.Handler::hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go-dep # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go-mod # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-groovy-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: ${file(build/build.json):distribution}\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/hello.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-maven # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-maven # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-provided # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: provided\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-ruby # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-scala-sbt # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n# Make sure to run \"sbt assembly\" to create a jar file\n# with all your dependencies and put that jar file name here.\npackage:\n  artifact: target/scala-2.13/hello.jar\n\nfunctions:\n  hello:\n    handler: hello.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: tabarlow-azure-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  region: West Europe\n  runtime: python3.6\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: A356AC8C-E310-44F4-BF85-C7F29044AF99\n  # stage: dev\n  # type: premium  # premium azure functions\n\n  environment: # these will be created as application settings\n    VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.py\n  #   - include-me-dir/**\n  exclude:\n    - env/**\n    - .env/**\n  #   # - exclude-me.py\n  #   # - exclude-me-dir/**\n  #   - local.settings.json\n  #   - .vscode/**\n  #   - node_modules/**\n  #   - .gitignore\n  #   - .git/**\n  #   - env/**\n  #   - package.json\n  #   - package-lock.json\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.main\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n\n  goodbye:\n    handler: src/handlers/goodbye.main\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n","service: knative\n\nprovider:\n  name: knative\n  # optional Docker Hub credentials you need if you're using local Dockerfiles as function handlers\n  docker:\n    username: ${env:DOCKER_HUB_USERNAME}\n    password: ${env:DOCKER_HUB_PASSWORD}\n\nfunctions:\n  hello:\n    handler: hello-world.dockerfile\n    context: ./code\n    # either use a container image URL for your function `handler` as the commented out `handler`\n    # below shows or make sure that you update the application code and corresponding Dockerfile\n    # to process incoming CloudEvents event data when using the event sources listed below\n    # handler: gcr.io/knative-releases/github.com/knative/eventing-contrib/cmd/event_display:latest\n    # events:\n    #   - custom:\n    #       filter:\n    #         attributes:\n    #           type: greeting\n    #   - kafka:\n    #       consumerGroup: KAFKA_CONSUMER_GROUP_NAME\n    #       bootstrapServers:\n    #         - server1\n    #         - server2\n    #       topics:\n    #         - my-topic\n    #   - awsSqs:\n    #       secretName: aws-credentials\n    #       secretKey: credentials\n    #       queue: QUEUE_URL\n    #   - gcpPubSub:\n    #       project: knative-hackathon\n    #       topic: foo\n    #   - cron:\n    #       schedule: '* * * * *'\n    #       data: '{\"message\": \"Hello world from a Cron event source!\"}'\n\nplugins:\n  - serverless-knative\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python3 # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python3.8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Hello World for AWS Lambda\nservice: hello-world # Service Name\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n","service:\n  name: aws-alexa-typescript\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\nplugins:\n  - serverless-webpack\n  - serverless-alexa-skills\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\ncustom:\n  alexa:\n    # Step 1: Run `sls alexa auth` to authenticate\n    # Step 2: Run `sls alexa create --name \"Serverless Alexa Typescript\" --locale en-GB --type custom` to create a new skill\n    skills:\n      # Step 3: Paste the skill id returned by the create command here:\n      - id: amzn1.ask.skill.xxxx-xxxx-xxxx-xxxx-xxxx\n        manifest:\n          publishingInformation:\n            locales:\n              en-GB:\n                name: Serverless Alexa Typescript\n          apis:\n            custom:\n              endpoint:\n                # Step 4: Do your first deploy of your Serverless stack\n                # Step 5: Paste the ARN of your lambda here:\n                uri: arn:aws:lambda:[region]:[account-id]:function:[function-name]\n                # Step 6: Run `sls alexa update` to deploy the skill manifest\n                # Step 7: Run `sls alexa build` to build the skill interaction model\n                # Step 8: Enable the skill in the Alexa app to start testing.\n          manifestVersion: '1.0'\n        models:\n          en-GB:\n            interactionModel:\n              languageModel:\n                invocationName: serverless typescript\n                intents:\n                  - name: HelloIntent\n                    samples:\n                      - 'hello'\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - alexaSkill: ${self:custom.alexa.skills.0.id}\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-clojurescript-gradle\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n    - build/**\n  include:\n    - node_modules/**\n    - build/clojurescript/main/functions.js\n\nfunctions:\n  hello:\n    handler: build/clojurescript/main/functions.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n  now:\n    handler: build/clojurescript/main/functions.now\n    events:\n      - http:\n          path: now\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-nodejs-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nfunctions:\n  hello:\n    handler: build/js/packages/aws-kotlin-nodejs-gradle/kotlin/aws-kotlin-nodejs-gradle.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service:\n  name: aws-nodejs-ecma-script\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  first:\n    handler: first.hello\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n","service:\n  name: aws-nodejs-typescript\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  apiGateway:\n    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  region: West US 2\n  runtime: nodejs12.x\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: A356AC8C-E310-44F4-BF85-C7F29044AF99\n  # stage: dev\n  # type: premium  # premium azure functions\n\n  environment: # these will be created as application settings\n    VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.js\n  #   - include-me-dir/**\n  exclude:\n    # - exclude-me.js\n    # - exclude-me-dir/**\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.sayHello\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous # can also be `function` or `admin`\n\n  goodbye:\n    handler: src/handlers/goodbye.sayGoodbye\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob.printMessage\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue.printMessage\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer.printMessage\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub.printMessage\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n","# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  apiKeys:\n    - name: CHANGE_TO_UNIQUE_PER_RUN\n      value: CHANGE_TO_UNIQUE_PER_RUN\n\nfunctions:\n  # core functions\n  minimal:\n    handler: core.minimal\n    events:\n      - http: GET /\n      - http:\n          method: POST\n          path: minimal-1\n      - http:\n          method: PUT\n          path: /minimal-2\n      - http:\n          method: DELETE\n          path: /minimal-3/\n  cors:\n    handler: core.cors\n    events:\n      - http:\n          method: GET\n          path: simple-cors\n          cors: true\n      - http:\n          method: GET\n          path: complex-cors\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: true\n  customAuthorizers:\n    handler: core.customAuthorizers\n    events:\n      - http:\n          path: custom-auth\n          method: GET\n          authorizer: authorizer\n  apiKeys:\n    handler: core.apiKeys\n    events:\n      - http:\n          path: api-keys\n          method: GET\n          private: true\n  timeout:\n    handler: core.timeout\n    timeout: 1\n    events:\n      - http:\n          method: GET\n          integration: lambda\n          path: integration-lambda-timeout\n  # helper functions\n  authorizer:\n    handler: helper.auth\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  basic:\n    handler: core.basic\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n  existingSimple:\n    handler: core.existingSimple\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n          existing: true\n  # testing if two functions share one cognito user pool with multiple configs\n  existingMulti:\n    handler: core.existingMulti\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n          existing: true\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreAuthentication\n          existing: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  eventBusDefault:\n    handler: core.eventBusDefault\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - serverless.test\n  eventBusCustom:\n    handler: core.eventBusCustom\n    events:\n      - eventBridge:\n          eventBus: CHANGE_TO_UNIQUE_PER_RUN\n          pattern:\n            source:\n              - serverless.test\n  eventBusArn:\n    handler: core.eventBusArn\n    events:\n      - eventBridge:\n          eventBus: CHANGE_TO_UNIQUE_PER_RUN\n          pattern:\n            source:\n              - serverless.test\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  iotBasic:\n    handler: core.iotBasic\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'CHANGE_TO_UNIQUE_PER_RUN'\"\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  minimal:\n    handler: core.minimal\n    events:\n      - s3: CHANGE_TO_UNIQUE_PER_RUN\n  extended:\n    handler: core.extended\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos/\n            - suffix: .jpg\n  existing:\n    handler: core.existing\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: Files/\n            - suffix: .TXT\n          existing: true\n  # testing if two functions share one bucket with multiple bucket configs\n  existingCreated:\n    handler: core.existingCreated\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: photos\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: photos\n            - suffix: .png\n          existing: true\n  existingRemoved:\n    handler: core.existingRemoved\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos\n            - suffix: .png\n          existing: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  scheduleMinimal:\n    handler: core.scheduleMinimal\n    events:\n      - schedule: rate(1 minute)\n  scheduleExtended:\n    handler: core.scheduleExtended\n    events:\n      - schedule:\n          rate: cron(* * * * ? *)\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"name\": \"transformedInput\"}'\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  snsMinimal:\n    handler: core.snsMinimal\n    events:\n      - sns: CHANGE_TO_UNIQUE_PER_RUN\n\n  snsMultipleFilteredLeft:\n    handler: core.snsMultipleFilteredLeft\n    events:\n      - sns:\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n          displayName: CHANGE_TO_UNIQUE_PER_RUN\n          filterPolicy:\n            side:\n              - left\n  snsMultipleFilteredRight:\n    handler: core.snsMultipleFilteredRight\n    events:\n      - sns:\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n          displayName: CHANGE_TO_UNIQUE_PER_RUN\n          filterPolicy:\n            side:\n              - right\n\n  snsExisting:\n    handler: core.snsExisting\n    events:\n      - sns:\n          arn:\n            Fn::Join:\n              - ':'\n              - - 'arn:aws:sns'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - CHANGE_TO_UNIQUE_PER_RUN\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  sqsBasic:\n    handler: core.sqsBasic\n    events:\n      - sqs:\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - sqs\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  streamDynamoDb:\n    handler: core.streamDynamoDb\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [DynamoDbTable, StreamArn]\n          batchWindow: 10\n  streamKinesis:\n    handler: core.streamKinesis\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - kinesis\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - stream/CHANGE_TO_UNIQUE_PER_RUN\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          batchWindow: 1\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        BillingMode: 'PAY_PER_REQUEST'\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: KEYS_ONLY\n        TableName: CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  logs:\n    websocket: true\n\nfunctions:\n  # core functions\n  minimal:\n    handler: core.minimal\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n      - websocket:\n          route: $default\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  artifact: artifact.zip\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      individually: true\n      include:\n        - handler.js\n      exclude:\n        - handler2.js\n  hello2:\n    handler: handler2.hello\n    package:\n      individually: true\n      include:\n        - handler2.js\n      exclude:\n        - handler.js\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      include:\n        - handler.js\n      exclude:\n        - handler2.js\n  hello2:\n    handler: handler2.hello\n    package:\n      include:\n        - handler2.js\n      exclude:\n        - handler.js\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n  custom-name:\n    name: ${self:service}-${self:provider.region}-custom-name\n    handler: handler.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Go1\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - ./**\n#  include:\n#    - ./bin/**\n\nfunctions:\n  hello_world:\n    handler: index\n    description: Tencent Serverless Cloud Function\n    runtime: Go1\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Php7 # Php7 or Php5\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Php7 # Php7 or Php5\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Python3.6 # Python3.6 or Python2.7\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Python3.6 # Python3.6 or Python2.7\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: testls\n\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java11\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/libs/hello-dev-all.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-java-maven # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: java\n\n# you can add packaging information here\npackage:\n  artifact: target/demo-function.jar\n\nfunctions:\n  demo:\n    handler: target/demo-function.jar:com.example.FunctionApp\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - 'serverless-openwhisk'\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters:\n#        hello: world\n#    alarm_trigger:\n#      parameters:\n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters:\n#       cron: '*/8 * * * * *'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-java-maven # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: java\n\n# you can add packaging information here\npackage:\n  artifact: target/demo-function.jar\n\nfunctions:\n  demo:\n    handler: target/demo-function.jar:com.example.FunctionApp\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - 'serverless-openwhisk'\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters:\n#        hello: world\n#    alarm_trigger:\n#      parameters:\n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters:\n#       cron: '*/8 * * * * *'\n","<!--\ntitle: Serverless Framework - Apache OpenWhisk Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 15\ndescription: A list of all available properties on serverless.yml for Apache OpenWhisk\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/openwhisk/guide/serverless.yml)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# OpenWhisk - serverless.yml Reference\n\nHere is a list of all available properties in `serverless.yml` when the provider is set to `openwhisk`.\n\n```yml\n# serverless.yml\n\nservice: myService\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:default\n  memory: 256 # Overwrite default memory size. Default is 512.\n  timeout: 10 # The default is 60\n  overwrite: true # Can we overwrite deployed functions? default is true\n  namespace: 'custom' # use custom namespace, defaults to '_'\n  ignore_certs: true # ignore ssl verification issues - used for local deploys\n\nfunctions:\n  usersCreate: # A Function\n    handler: users.create # The file and module for this specific function.\n    sequence: # Use sequences rather than handler to handle events. handler and sequence properties are mutually exclusive.\n      - function_a\n      - function_b\n      - function_c\n    memory: 256 # memory size for this specific function.\n    timeout: 10 # Timeout for this specific function.  Overrides the default set above.\n    runtime: nodejs:6\n    overwrite: false # Can we overwrite deployed function?\n    namespace: 'custom' # use custom namespace, defaults to '_'\n    annotations:\n      parameter_name: value\n    parameters:\n      parameter_name: value\n    events: # The Events that trigger this Function\n      # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n      - http: METHOD /path/to/url\n      - trigger: my_trigger # bind function to trigger event\n      - trigger:\n        name: my_trigger\n        rule: rule_name\n\n# The \"Resources\" your \"Functions\" use. This can be used to define custom Triggers and Rules which are bound to your Actions.\nresources:\n  triggers:\n    my_trigger: # trigger with default parameter bound.\n      parameters:\n        hello: world\n    alarm_trigger: # trigger connected to event feed\n      parameters:\n        hello: world\n      feed: /whisk.system/alarms/alarm\n      feed_parameters:\n        cron: '*/8 * * * * *'\n```\n","<!--\ntitle: Serverless Framework - Spotinst Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 5\ndescription: Serverless.yml reference\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://serverless.com/framework/docs/providers/spotinst/guide/serverless.yml/)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# Serverless.yml Reference\n\nThis is an outline of a `serverless.yml` file with descriptions of the properties for reference\n\n```yml\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: four\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    environment: #{Your Environment ID}\n\n# Here is where you will list your functions for this service. Each Function is\n# required to have a name, runtime, handler, memory and timeout. The runtime is\n# the language that you want to run your function with, the handler tells which\n# file and function to run, memory is the amount of memory needed to run your\n# function, timeout is the time the function will take to run, if it goes over\n# this time it will terminate itself. Access is default set to private so if you\n# want to be able to run the function by HTTPS request this needs to be set to\n# public. The environment variables can be set in here or on the Spotinst console.\n# Once they are set you can access the variables in your handler file with\n# process.env['{Your Key}']\n\nfunctions:\n  function-name:\n    runtime: nodejs8.3\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    activeVersions:\n#        - version: $LATEST\n#          percentage: 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n```\n","<!--\ntitle: Serverless Framework - AWS Lambda Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 16\ndescription: A list of all available properties on serverless.yml for AWS\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# Serverless.yml Reference\n\nHere is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n\n```yml\n# serverless.yml\n\nservice:\n  name: myService\n  awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash # Optional KMS key arn which will be used for encryption for all functions\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev\n  region: ${opt:region, 'us-east-1'} # Overwrite the default region used. Default is us-east-1\n  stackName: custom-stack-name # Use a custom name for the CloudFormation stack\n  apiName: custom-api-name # Use a custom name for the API Gateway API\n  websocketsApiName: custom-websockets-api-name # Use a custom name for the websockets API\n  websocketsApiRouteSelectionExpression: $request.body.route # custom route selection expression\n  profile: production # The default profile to use with this service\n  memorySize: 512 # Overwrite the default memory size. Default is 1024\n  reservedConcurrency: 5 # optional, Overwrite the default reserved concurrency limit. By default, AWS uses account concurrency limit\n  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds\n  logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup\n  deploymentBucket:\n    name: com.serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework\n    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false\n    serverSideEncryption: AES256 # server-side encryption method\n    sseKMSKeyId: arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa # when using server-side encryption\n    sseCustomerAlgorithim: AES256 # when using server-side encryption and custom keys\n    sseCustomerKey: string # when using server-side encryption and custom keys\n    sseCustomerKeyMD5: md5sum # when using server-side encryption and custom keys\n\n    tags: # Tags that will be added to each of the deployment resources\n      key1: value1\n      key2: value2\n  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless\n  role: arn:aws:iam::XXXXXX:role/role # Overwrite the default IAM role which is used for all functions\n  cfnRole: arn:aws:iam::XXXXXX:role/role # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials\n  versionFunctions: false # Optional function versioning\n  environment: # Service wide environment variables\n    serviceEnvVar: 123456789\n  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.\n  apiKeys: # List of API keys to be used by your service API Gateway REST API\n    - myFirstKey\n    - ${opt:stage}-myFirstKey\n    - ${env:MY_API_KEY} # you can hide it in a serverless variable\n  apiGateway: # Optional API Gateway global config\n    restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework\n    restApiRootResourceId: xxxxxxxxxx # Root resource ID, represent as / path\n    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted\n      '/users': xxxxxxxxxx\n      '/users/create': xxxxxxxxxx\n    websocketApiId: # Websocket API resource ID. Default is generated by the framework\n    apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.\n    minimumCompressionSize: 1024 # Compress response when larger than specified size in bytes (must be between 0 and 10485760)\n    description: Some Description # Optional description for the API Gateway stage deployment\n    binaryMediaTypes: # Optional binary media types the API might return\n      - '*/*'\n  usagePlan: # Optional usage plan configuration\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n  stackTags: # Optional CF stack tags\n    key: value\n  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role\n    - arn:aws:iam:*****:policy/some-managed-policy\n  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - Ref: ServerlessDeploymentBucket\n  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)\n    - Effect: Allow\n      Principal: '*'\n      Action: 'Update:*'\n      Resource: '*'\n    - Effect: Deny\n      Principal: '*'\n      Resource: '*'\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n    securityGroupIds:\n      - securityGroupId1\n      - securityGroupId2\n    subnetIds:\n      - subnetId1\n      - subnetId2\n  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.\n    - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'\n  resourcePolicy:\n    - Effect: Allow\n      Principal: '*'\n      Action: execute-api:Invoke\n      Resource:\n        - execute-api:/*/*/*\n      Condition:\n        IpAddress:\n          aws:SourceIp:\n            - '123.123.123.123'\n    rollbackConfiguration:\n      MonitoringTimeInMinutes: 20\n      RollbackTriggers:\n        - Arn: arn:aws:cloudwatch:us-east-1:000000000000:alarm:health\n          Type: AWS::CloudWatch::Alarm\n        - Arn: arn:aws:cloudwatch:us-east-1:000000000000:alarm:latency\n          Type: AWS::CloudWatch::Alarm\n  tags: # Optional service wide function tags\n    foo: bar\n    baz: qux\n  tracing:\n    apiGateway: true\n    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'\n  logs:\n    restApi: # Optional configuration which specifies if API Gateway logs are used. This can either be set to `true` to use defaults, or configured via subproperties.\n      accessLogging: true # Optional configuration which enables or disables access logging. Defaults to true.\n      format: 'requestId: $context.requestId' # Optional configuration which specifies the log format to use for access logging.\n      executionLogging: true # Optional configuration which enables or disables execution logging. Defaults to true.\n      level: INFO # Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR.\n      fullExecutionData: true # Optional configuration which specifies whether or not to log full requests/responses for execution logging. Defaults to true.\n      role: arn:aws:iam::123456:role # Optional IAM role for ApiGateway to use when managing CloudWatch Logs\n    websocket: # Optional configuration which specifies if Websocket logs are used. This can either be set to `true` to use defaults, or configured via subproperties.\n      level: INFO # Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR.\n    frameworkLambda: true # Optional, whether to write CloudWatch logs for custom resource lambdas as added by the framework\n\npackage: # Optional deployment packaging configuration\n  include: # Specify the directories and files which should be included in the deployment package\n    - src/**\n    - handler.js\n  exclude: # Specify the directories and files which should be excluded in the deployment package\n    - .git/**\n    - .travis.yml\n  excludeDevDependencies: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n  artifact: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n  individually: true # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n\nfunctions:\n  usersCreate: # A Function\n    handler: users.create # The file and module for this specific function.\n    name: ${self:provider.stage}-lambdaName # optional, Deployed Lambda name\n    description: My function # The description of your function.\n    memorySize: 512 # memorySize for this specific function.\n    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit\n    provisionedConcurrency: 3 # optional, Count of provisioned lambda instances\n    runtime: nodejs12.x # Runtime for this specific function. Overrides the default which is set on the provider level\n    timeout: 10 # Timeout for this specific function.  Overrides the default set above.\n    role: arn:aws:iam::XXXXXX:role/role # IAM role which will be used for this function\n    onError: arn:aws:sns:us-east-1:XXXXXX:sns-topic # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig\n    awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)\n    environment: # Function level environment variables\n      functionEnvVar: 12345678\n    tags: # Function specific tags\n      foo: bar\n    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n      securityGroupIds:\n        - securityGroupId1\n        - securityGroupId2\n      subnetIds:\n        - subnetId1\n        - subnetId2\n    package:\n      include: # Specify the directories and files which should be included in the deployment package for this specific function.\n        - src/**\n        - handler.js\n      exclude: # Specify the directories and files which should be excluded in the deployment package for this specific function.\n        - .git/**\n        - .travis.yml\n      artifact: path/to/my-artifact.zip # Own package that should be use for this specific function. You must provide this file.\n      individually: true # Enables individual packaging for specific function. If true you must provide package for each function. Defaults to false\n    layers: # An optional list Lambda Layers to use\n      - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN\n    tracing: Active # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)\n    condition: SomeCondition # optional, adds 'Condition' clause\n    dependsOn: # optional, appends these additional resources to the 'DependsOn' list\n      - MyThing\n      - MyOtherThing\n    events: # The Events that trigger this Function\n      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n          path: users/create # Path for this endpoint\n          method: get # HTTP method for this endpoint\n          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response\n          private: true # Requires clients to add API keys values in the `x-api-key` header of their request\n          authorizer: # An AWS API Gateway custom authorizer function\n            name: authorizerFunc # The name of the authorizer function (must be in this service)\n            arn: xxx:xxx:Lambda-Name # Can be used instead of name to reference a function outside of service\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: someRegex\n            type: token # token or request. Determines input to the authorizer function, called with the auth token or the entire request event. Defaults to token\n      - websocket:\n          route: $connect\n          authorizer:\n            # name: auth    NOTE: you can either use \"name\" or arn\" properties\n            arn: arn:aws:lambda:us-east-1:1234567890:function:auth\n            identitySource:\n              - 'route.request.header.Auth'\n              - 'route.request.querystring.Auth'\n      - s3:\n          bucket: photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n          existing: true # optional, if you're using an existing Bucket\n      - schedule:\n          name: my scheduled event\n          description: a description of my scheduled event's purpose\n          rate: rate(10 minutes)\n          enabled: false\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - sns:\n          topicName: aggregate\n          displayName: Data aggregation pipeline\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          batchSize: 10\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: false\n      - alexaSkill:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: true\n      - alexaSmartHome:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: true\n      - iot:\n          name: myIoTEvent\n          description: An IoT event\n          enabled: true\n          sql: \"SELECT * FROM 'some_topic'\"\n          sqlVersion: beta\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - cloudwatchLog:\n          logGroup: '/aws/lambda/hello'\n          filter: '{$.userIdentity.type = Root}'\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PreSignUp\n          existing: true # optional, if you're referencing an existing User Pool\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            host: example.com\n            path: /hello\n      - eventBridge:\n          # using the default AWS event bus\n          schedule: rate(10 minutes)\n          # creating an event bus\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n          # re-using an existing event bus\n          eventBus: arn:aws:events:us-east-1:12345:event-bus/custom-private-events\n          pattern:\n            source:\n              - custom.private\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n          # using `inputs`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          # using `inputPath`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputPath: '$.stageVariables'\n          # using `inputTransformer`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /docs*\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n\nlayers:\n  hello: # A Lambda layer\n    path: layer-dir # required, path to layer contents on disk\n    name: ${self:provider.stage}-layerName # optional, Deployed Lambda layer name\n    description: Description of what the lambda layer does # optional, Description to publish to AWS\n    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with\n      - python3.8\n    licenseInfo: GPLv3 # optional, a string specifying license information\n    allowedAccounts: # optional, a list of AWS account IDs allowed to access this layer.\n      - '*'\n    retain: false # optional, false by default. If true, layer versions are not deleted as new ones are created\n\n# The \"Resources\" your \"Functions\" use.  Raw AWS CloudFormation goes in here.\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n  # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    UsersTableArn:\n      Description: The ARN for the User's Table\n      Value:\n        'Fn::GetAtt': [usersTable, Arn]\n      Export:\n        Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.\n```\n"]},{"id":119836951,"files":["# serverless.yml\n\nservice: hello-world-service\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timemout: 10\n\ncustom:\n  functionsBasePath: src/handlers\n\nfunctions:\n  hello:\n    handler: users.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\nplugins:\n  - serverless-functions-base-path\n","# serverless.yml\n\nservice: hello-world-service\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timemout: 10\n\ncustom:\n  functionsBasePath: src/handlers\n\nfunctions:\n  hello:\n    handler: users.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\nplugins:\n  - serverless-functions-base-path\n  - serverless-offline\n"]},{"id":148238948,"files":["service: sls-vpc-example\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  versionFunctions: false\n  logRetentionInDays: 1\n  deploymentBucket:\n    serverSideEncryption: AES256\n    blockPublicAccess: true\n  endpointType: regional\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'\n    NODE_ENV: development\n\nplugins:\n  - serverless-vpc-plugin\n  - serverless-webpack\n\npackage:\n  individually: true\n  excludeDevDependencies: true\n\ncustom:\n  secretName: 'rds-db-credentials/${self:service}/${self:provider.stage}'\n  databaseName: slsvpcexample\n  vpcConfig:\n    cidrBlock: '10.0.0.0/16'\n    createDbSubnet: true\n    createNatInstance: true\n    zones:\n      - us-east-1a\n      - us-east-1b\n      - us-east-1c\n    services:\n      - secretsmanager\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: npm\n\nfunctions:\n  rds:\n    handler: index.handler\n    description: RDS Test Handler\n    role: ExampleLambdaRole\n    environment:\n      SECRET_ARN:\n        Ref: DBSecret\n      RESOURCE_ARN:\n        'Fn::Join':\n          - ':'\n          - - 'arn:aws:rds'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'cluster:${self:service}-${self:provider.stage}'\n      DATABASE_NAME: ${self:custom.databaseName}\n      SCHEMA_NAME: public\n\nresources:\n  - ${file(resources/iam_cf.yml)}\n  - ${file(resources/rds_cf.yml)}\n  - ${file(resources/secretsmanager_cf.yml)}\n"]},{"id":135220798,"files":["\nservice: aws-rust # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: rust\n  memorySize: 128\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-rust\n\nfunctions:\n  hello:\n    handler: test-func","\nservice: aws-rust # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: rust\n  memorySize: 128\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-rust\n\ncustom:\n  rust:\n    profile: dev\n\nfunctions:\n  hello:\n    handler: test-func"]},{"id":68023701,"files":["# This is the Serverless Environment File\n#\n# It contains listing of your stages and their regions\n# It also manages serverless variables at 3 levels:\n#    - common variables: variables that apply to all stages/regions\n#    - stage variables: variables that apply to a specific stage\n#    - region variables: variables that apply to a specific region\n\nvars:\nstages:\n  dev:\n    vars:\n    regions:\n      eu-west-1:\n        vars:\n"]},{"id":230700276,"files":["service: chromda\n\ncustom:\n  s3Bucket: chromda-files\n  snsTopic: chromda\n\nprovider:\n  name: aws\n  region: ${opt:region, 'us-east-1'}\n  versionFunctions: false\n  layers:\n    # Google Chrome for AWS Lambda as a layer\n    # Make sure you use the latest version depending on the region\n    # https://github.com/shelfio/chrome-aws-lambda-layer\n    - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:10\n    # dependencies layer\n    - { Ref: ChromdaLambdaLayer }\n  runtime: nodejs12.x\n  memorySize: 2048\n  timeout: 30\n  tracing:\n    lambda: true\n\nfunctions:\n  captureScreenshot:\n    handler: src/captureScreenshot.handler\n    description: Captures a screenshot of a webpage.\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - xray:PutTraceSegments\n          - xray:PutTelemetryRecords\n        Resource: \"*\"\n      - Effect: Allow\n        Action:\n          - s3:PutObject\n          - s3:PutObjectAcl\n        # If you plan to support multiple buckets via request parameter,\n        # add all possible buckets here\n        Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    environment:\n      S3_REGION: ${self:provider.region}\n      S3_BUCKET: ${self:custom.s3Bucket}\n      # Optional vars\n      CHROMIUM_ARGS: \"[]\"\n      TIMEOUT: \"30000\"\n      IGNORE_HTTPS_ERRORS: \"false\"\n      VIEWPORT_WIDTH: \"1920\"\n      VIEWPORT_HEIGHT: \"1200\"\n      DEVICE_SCALE_FACTOR: \"1\"\n      IS_MOBILE: \"false\"\n      IS_LANDSCAPE: \"false\"\n    events:\n      - sns:\n          arn: !Ref chromdaTopic\n          topicName: ${self:custom.snsTopic}\n      # TODO: add SQS event\n      # TODO: add Scheduled event\n      # TODO: add API Gateway event\n\nlayers:\n  chromda:\n    package:\n      # This file will be created during `npm run deploy`\n      artifact: layer/export/layer.zip\n\npackage:\n  exclude:\n    - layer/**\n    - node_modules/**\n    - package.json\n    - yarn.lock\n\nresources:\n  Resources:\n    # Bucket where the screenshots are stored\n    chromdaBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: Private\n    # Change this if you don't want public read access\n    chromdaBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action:\n                - s3:GetObject\n              Principal: \"*\"\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n        Bucket:\n          Ref: chromdaBucket\n    chromdaTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.snsTopic}\n\nplugins:\n  - serverless-webpack\n  - serverless-iam-roles-per-function\n"]},{"id":95246216,"files":["# serverless-build-rules.yml\n\n# tag-name\n#   sbr-type: a mandatory type of the tag it can be primitive (int, bool, str, enum) conventional (aws-id, aws-artifact-name, aws-var-name, path, ... )\n#             or composed having the reference to some other complex type described inside the file.\n#             It can also describe arrays with square brakets like [int] and maps with the square brackets and colon like that [aws-var-name:path]\n#   sbr-render: a mandatory enum that can contain the values as follows: config-only or user-only or config-wins (if both specified and mismatched),\n#               user-wins or exception-on-mismatch or merge (only applicable for map and array types of congigurable type)\n#   sbr-primary: an optional true or false that means whether this tag can be used inside the file directly or it is just used for the complex type description like in case of function, the default value is true\n#   sbr-constraint: an optional value contains the path inside the whitelist.yml that the value can be assigned to like 'whitelist.yml/resources' or 'whitelist.yml/actions'\n#                   or the list of enum values that they can be assigned to or ranges of ints\n#   sbr-enum: a child of sbr-constraint containing the list of values the tag can accept\n#   sbr-from: a child of sbr-constraint containing the lowest/minmal value the integer value can be assigned to\n#   sbr-to: a child of sbr-constraint containing the highest/maximum value the integer value can be assigned to\n#   sbr-whitelist: a child of sbr-constraint containing a section of whitelist.yml where the values can be selected from\n#   sbr-value: an optional value that contains the formula or formulas to calculate the config driven values to be inserted\n#   sbr-example: is a child of sbr-value. It is designated to store the default value for tag\n#   sbr-formula:  is a child of sbr-value. It is designated to store the formula that derives the value from the set of config values and inline constants\n#   sbr-template: is used instead of value in non-primary rules and itself contains the sub-set of rules because it cannot be represented by a single value\n#   sbr-mandatory: indicates whether the field must be inserted inside the output file no matter whether it exists in the user's original file or not\n#                  only primary config-only, config-wins and merge rendered fields can have a mandatory status\n\nservice:\n  name:\n    sbr-type: aws-artifact-name\n    sbr-render: config-only\n    sbr-value:\n      sbr-formula: ${context.INSTANCE_PREFIX}-${config.domain}-${config.service}\n    sbr-mandatory: true\n\n  awsKmsKeyArn:\n    sbr-type: arn-kms\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: 'arn:aws:kms:us-east-1:XXXXXX:key/some-hash'\n\nframeworkVersion:\n  sbr-type: str\n  sbr-render: config-wins\n  sbr-mandatory: true\n  sbr-value:\n    sbr-formula: ${context.serverlessFrameworkVersion}\n    sbr-example: '>=1.0.0 <2.0.0'\n\ncustom:\n  sbr-type: \"[aws-var-name:aws-tag-value]\"\n  sbr-render: merge\n  sbr-mandatory: true\n  sbr-value:\n    sbr-example:\n      key1: value1\n      key2: value2\n\nprovider:\n  name:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-constraint:\n      sbr-enum:\n        - aws\n        - azure\n    sbr-value:\n      sbr-formula: ${context.cloudProvider}\n      sbr-example: aws\n    sbr-mandatory: true\n\n  runtime:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-constraint:\n      sbr-enum:\n        - nodejs8.10\n        - nodejs10.x\n        - java8\n        - python3.6\n        - go1.x\n    sbr-value:\n      sbr-formula: ${config.providerRuntime}\n      sbr-example: nodejs10.x\n    sbr-mandatory: true\n\n\n  stage: # It will be setup automagically so you may not want to touch it\n    sbr-type: deployment-stage\n    sbr-render: config-wins\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula: ${context.environment_logical_id}\n      sbr-example: dev\n\n  region:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-enum:\n        - 'us-east-2'\n        - 'us-east-1'\n        - 'us-west-1'\n        - 'us-west-2'\n        - 'ap-south-1'\n        - 'ap-northeast-3'\n        - 'ap-northeast-2'\n        - 'ap-southeast-1'\n        - 'ap-southeast-2'\n        - 'ap-northeast-1'\n        - 'ca-central-1'\n        - 'cn-north-1'\n        - 'cn-northwest-1'\n        - 'eu-central-1'\n        - 'eu-west-1'\n        - 'eu-west-2'\n        - 'eu-west-3'\n        - 'eu-north-1'\n        - 'sa-east-1'\n        - 'us-gov-east-1'\n        - 'us-gov-west-1'\n    sbr-value:\n      sbr-formula: ${context.REGION}\n      sbr-example: 'us-east-1'\n\n  stackName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-wins\n    sbr-value:\n      sbr-formula: ${context.INSTANCE_PREFIX}-${config.domain}-${config.service}-${context.environment_logical_id}\n      sbr-example: custom-stack-name # Use a custom name for the CloudFormation stack\n\n  apiName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: custom-api-name # Use a custom name for the API Gateway API\n\n  websocketsApiName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: custom-websockets-api-name # Use a custom name for the websockets API\n\n  websocketsApiRouteSelectionExpression:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: $request.body.route # custom route selection expression\n\n  memorySize: # in MB\n    sbr-type: int\n    sbr-render: user-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-from: 128\n      sbr-to: 2048\n    sbr-value:\n      sbr-formula: ${config.providerMemorySize}\n      sbr-example: 256\n\n  timeout: # in seconds 1 sec to 15 mins\n    sbr-type: int\n    sbr-render: user-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-from: 1\n      sbr-to: 900\n    sbr-value:\n      sbr-example: 30\n      \n  logRetentionInDays:  # Set the default RetentionInDays for a CloudWatch LogGroup\n    sbr-type: int\n    sbr-render: user-only\n    sbr-constraint:\n      sbr-from: 5\n      sbr-to: 21\n    sbr-value:\n      sbr-example: 14\n\n  deploymentBucket: # Deployment bucket name. Default is generated by the framework\n    name:\n      sbr-type: aws-bucket-name\n      sbr-render: config-wins\n      sbr-mandatory: true\n      sbr-value:\n        sbr-formula: _${opt:bucket} # Mind the _ that will prevent the ${} from resolving\n        sbr-example: com.serverless.${self:provider.region}.deploys\n\n    serverSideEncryption:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - AES-256\n          - AWS-KMS\n      sbr-value:\n        sbr-example: AES-256\n\n\n    tags: # Tags that will be asbred to each of the deployment resources\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          key1: value1\n          key2: value2\n\n\n  deploymentPrefix: # The S3 prefix under which deployed artifacts should be stored. Default is serverless\n    sbr-type: aws-bucket-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: serverless\n\n  role:\n    sbr-type: arn-iam\n    sbr-render: user-only # was config-wins\n    sbr-value:\n      sbr-formula: ${config.iamRoleARN}\n      sbr-example: arn:aws:iam::XXXXXX:role/role\n\n  cfnRole:  # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials\n    sbr-type: arn-iam\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: arn:aws:iam::XXXXXX:role/role\n\n  versionFunctions: # Optional function versioning\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: false\n\n  environment: # Service wide environment variables\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        serviceEnvVar: 123456789\n\n  endpointType: # Optional endpoint configuration for API Gateway REST API. Default is Edge.\n    sbr-type: enum\n    sbr-render: user-only\n    sbr-constraint:\n      sbr-enum:\n        - EDGE\n        - REGIONAL\n    sbr-value:\n      sbr-example: regional\n\n  apiKeys: # List of API keys to be used by your service API Gateway REST API\n    sbr-type: \"[aws-artifact-name]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - myFirstKey\n        - ${opt:stage}-myFirstKey\n        - ${env:MY_API_KEY} # you can hide it in a serverless variable\n\n  apiGateway: # Optional API Gateway global config\n    restApiId: # REST API resource ID. Default is generated by the framework\n      sbr-type: aws-id\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: xxxxxxxxxx\n\n    restApiRootResourceId: # REST API resource ID. Default is generated by the framework\n      sbr-type: aws-id\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: xxxxxxxxxx\n\n    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted\n      sbr-type: \"[path:aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          '/users': xxxxxxxxxx\n          '/users/create': xxxxxxxxxx\n\n    apiKeySourceType: # Source of API key for usage plan. HEADER or AUTHORIZER.\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - HEADER\n          - AUTHORIZER\n      sbr-value:\n        sbr-example: HEADER\n\n    minimumCompressionSize: # Compress response when larger than specified size in bytes (must be between 0 and 10485760)\n      sbr-type: int\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-from: 512\n        sbr-to: 10485760\n      sbr-value:\n        sbr-example: 1024\n\n    description: # optional description for the API Gateway stage deployment\n      sbr-type: str\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: Some Description\n\n  usagePlan: # Optional usage plan configuration\n    quota:\n      limit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 5000\n      offset:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 2\n\n      period:\n        sbr-type: enum\n        sbr-render: user-only\n        sbr-constraint:\n          sbr-enum:\n            - MONTH\n            - WEEK\n            - DAY\n        sbr-value:\n          sbr-example: WEEK\n\n    throttle:\n      burstLimit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 200\n\n      rateLimit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 100\n\n\n  stackTags: # Optional CF stack tags\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: merge\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula:\n        application: ${context.INSTANCE_PREFIX}\n        service: ${config.service}\n        domain: ${config.domain}\n        owner: ${config.created_by}\n        environment: ${context.environment_logical_id}\n      sbr-example:\n        key: value\n\n  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role\n    sbr-type: \"[arn-iam-policy]\"\n    sbr-render: merge\n    sbr-value:\n      sbr-formula: ${config.iamRoleARN}\n      sbr-example:\n        - arn:aws:iam:*****:policy/some-managed-policy\n\n  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account\n    sbr-type: \"[arn-iam-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: 'Allow'\n          Action:\n            - 's3:ListBucket'\n          Resource:\n            Fn::Join:\n              - ''\n              - - 'arn:aws:s3:::'\n                - Ref: ServerlessDeploymentBucket\n\n\n  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)\n    sbr-type: \"[aws-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: Allow\n          Principal: \"*\"\n          Action: \"Update:*\"\n          Resource: \"*\"\n        - Effect: Deny\n          Principal: \"*\"\n          Resource: \"*\"\n          Action:\n            - Update:Replace\n            - Update:Delete\n          Condition:\n            StringEquals:\n              ResourceType:\n                - AWS::EC2::Instance\n\n  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n    securityGroupIds:\n      sbr-type: \"[aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - securityGroupId1\n          - securityGroupId2\n    subnetIds:\n      sbr-type: \"[aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - subnetId1\n          - subnetId2\n  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.\n    sbr-type: \"[aws-id]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'\n\n  resourcePolicy:\n    sbr-type: \"[aws-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: Allow\n          Principal: \"*\"\n          Action: execute-api:Invoke\n          Resource:\n            - execute-api:/*/*/*\n          Condition:\n            IpAsbrress:\n              aws:SourceIp:\n                - \"123.123.123.123\"\n\n  tags: # Optional service wide function tags\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: merge\n    sbr-value:\n      sbr-formula:\n        application: ${context.INSTANCE_PREFIX}\n        service: ${config.service}\n        domain: ${config.domain}\n        owner: ${config.created_by}\n        environment: ${env}\n      sbr-example:\n        key: value\n\npackage: # Optional deployment packaging configuration\n  include: # Specify the directories and files which should be included in the deployment package\n    sbr-type: \"[path]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - .git/**\n        - .travis.yml\n  exclude: # Specify the directories and files which should be excluded in the deployment package\n    sbr-type: \"[path]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - .git/**\n        - .travis.yml\n  excludeDevDependencies:\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-default: false\n      sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n  artifact:\n    sbr-type: path\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n\n  individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-default: false\n      sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n\nfunctions:\n    sbr-type: \"[aws-var-name:function]\"\n    sbr-render: user-only\n\n# works as expected when using sbr-formula only NOT with sbr-example\nplugins:\n    sbr-type: \"[plugin]\"\n    sbr-render: merge\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula:\n       - serverless-plugin-log-subscription\n\n# The \"Resources\" your \"Functions\" use.  Raw AWS CloudFormation goes in here.\nresources:\n  Resources:\n    sbr-type: \"[aws-var-name:resource]\"\n    sbr-render: user-only\n    # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    sbr-type: \"[aws-artifact-name:arn]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        UsersTableArn:\n          Description: The ARN for the User's Table\n          Value:\n            \"Fn::GetAtt\": [ usersTable, Arn ]\n          Export:\n            Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.\n\n# ------------ Below we put all NON-PRIMARY types --------------------\naws-policy:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    Effect:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - Allow\n          - Deny\n    Principal:\n      sbr-type: aws-principal\n      sbr-render: user-only\n    Resource:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: resource\n    Action:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: action\n\n\nfunction:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    handler:\n      sbr-type: path\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: index.handler\n\n    name:\n      sbr-type: aws-artifact-name\n      sbr-render: config-wins\n      sbr-mandatory: true\n      sbr-value:\n        sbr-formula: ${context.INSTANCE_PREFIX}_${config.domain}_${config.service}_${asterisk0}_${context.environment_logical_id}\n\n    description:\n      sbr-type: aws-description\n      sbr-render: user-wins\n      sbr-value:\n        sbr-formula: Description for ${context.asterisk0} function\n\n    memorySize: # memorySize in MB for this specific function.\n      sbr-type: int\n      sbr-render: user-wins\n      sbr-mandatory: true\n      sbr-constraint:\n        sbr-from: 128\n        sbr-to: 2048\n      sbr-value:\n        sbr-formula: ${config.providerMemorySize}\n        sbr-example: 256\n\n    runtime:\n      sbr-type: enum\n      sbr-render: config-wins\n      sbr-constraint:\n        sbr-enum:\n          - nodejs8.10\n          - nodejs10.x\n          - java8\n          - python3.6\n          - go1.x\n      sbr-value:\n        sbr-formula: ${config.providerRuntime}\n        sbr-example: nodejs10.x\n\n    timeout: # in seconds 1 sec to 15 mins\n      sbr-type: int\n      sbr-render: user-wins\n      sbr-mandatory: true\n      sbr-constraint:\n        sbr-from: 1\n        sbr-to: 900\n      sbr-value:\n        sbr-example: 30\n\n    role: # none provided in config, serverless creates if not user provided\n      sbr-type: arn-iam\n      sbr-render: user-only\n      sbr-value:\n        sbr-formula: ${config.role}\n        sbr-example: arn:aws:iam::XXXXXX:role/role\n\n    onError: # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig\n      sbr-type: arn-sns\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: arn:aws:sns:us-east-1:XXXXXX:sns-topic\n\n    awsKmsKeyArn:  # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)\n      sbr-type: arn-kms\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: arn:aws:kms:us-east-1:XXXXXX:key/some-hash\n\n    environment: # Function level environment variables\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          functionEnvVar: 12345678\n\n    tags: # Function specific tags\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          foo: bar\n\n    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n      securityGroupIds:\n        sbr-type: \"[aws-id]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - securityGroupId1\n            - securityGroupId2\n      subnetIds:\n        sbr-type: \"[aws-id]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - subnetId1\n            - subnetId2\n\n    package:\n      include: # Specify the directories and files which should be included in the deployment package\n        sbr-type: \"[path]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - .git/**\n            - .travis.yml\n      exclude: # Specify the directories and files which should be excluded in the deployment package\n        sbr-type: \"[path]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - .git/**\n            - .travis.yml\n    excludeDevDependencies:\n      sbr-type: bool\n      sbr-render: user-only\n      sbr-value:\n        sbr-default: false\n        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n    artifact:\n      sbr-type: path\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n\n    individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n      sbr-type: bool\n      sbr-render: user-only\n      sbr-value:\n        sbr-default: false\n        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n\n    layers: # An optional list Lambda Layers to use\n      sbr-type: \"[arn-layer]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN\n    tracing:  # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - Active\n          - PassThrough\n      sbr-value:\n        sbr-example: Active\n\n    events: # The Events that trigger this Function\n      sbr-type: \"[event]\"\n      sbr-render: user-only\n\n    lambdaAtEdge:\n      distribution:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'WebsiteDistribution'\n      eventType:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'origin-request'\n      pathPattern:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'images/*.jpg'\n\nevent:\n  sbr-primary: false\n  sbr-type: \"[enum]\"\n  sbr-render: user-only\n  sbr-template:\n    - s3:\n        bucket:\n          sbr-type: aws-bucket-name\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: photos\n\n        event:\n          sbr-type: \"[enum]\"\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-whitelist: actions\n          sbr-value:\n            sbr-example:\n              - s3:ObjectCreated:*\n        rules:\n          - prefix:\n              sbr-type: path\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: uploads/\n          - suffix:\n              sbr-type: str\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: .jpg\n\n    - http:\n        path:\n          sbr-type: path\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: 'path/to/function'\n        method:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - GET\n              - PUT\n              - POST\n              - DELETE\n              - OPTIONS\n        cors:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        async:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        integration:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - lambda\n              - http\n              - lambda-proxy\n\n        private:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        authorizer:\n          name:\n            sbr-type: aws-artifact-name\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: 'customauthorizer'\n          arn:\n            sbr-type: arn-lambda\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: arn:aws:lambda:region:XXXXXX:function:myfunc\n          resultTtlInSeconds:\n            sbr-type: int\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: 0\n          identitySource:\n            sbr-type: str\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: method.request.header.Authorization\n          identityValidationExpression:\n            sbr-type: str\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: someRegex\n          type:\n            sbr-type: enum\n            sbr-render: user-only\n            sbr-constraint:\n              sbr-enum:\n                - token\n                - request\n\n    - schedule:\n        name:\n          sbr-type: aws-artifact-name\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: 'Abrahadabrah'\n        description:\n          sbr-type: aws-description\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: The description for ${self.name}\n        rate:\n          sbr-type: aws-schedule-rate\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: rate(5 minutes)\n        enabled:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        input:\n          sbr-type: \"[aws-var-name:aws-tag-value]\"\n          sbr-render: user-only\n          sbr-value:\n            sbr-example:\n              key1: value1\n              key2: value2\n              stageParams:\n                stage: dev\n\n        inputPath:\n          sbr-type: path\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: '$.stageVariables'\n        inputTransformer:\n          inputPathsMap:\n            eventTime:\n              sbr-type: str\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: '$.time'\n          inputTemplate:\n            sbr-type: json\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n\n    - sqs:\n        arn:\n          sbr-type: arn-sqs\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: arn:aws:sqs:region:XXXXXX:myQueue\n        batchSize:\n          sbr-type: int\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-from: 3\n            sbr-to: 100\n          sbr-value:\n            sbr-example: 10\n\n    - stream:\n        arn:\n          sbr-type: arn-kinesis\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: arn:aws:kinesis:region:XXXXXX:myKineisisStream\n        batchSize:\n          sbr-type: int\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-from: 3\n            sbr-to: 100\n          sbr-value:\n            sbr-example: 10\n        startingPosition:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - AT_SEQUENCE_NUMBER\n              - AFTER_SEQUENCE_NUMBER\n              - AT_TIMESTAMP\n              - TRIM_HORIZON\n              - LATEST\n          sbr-value:\n            sbr-example: LATEST\n        enabled:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n\nresource:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    Type:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: resources\n      sbr-value:\n        sbr-example: AWS::DynamoDB::Table\n    DeletionPolicy:\n      sbr-type: str\n      sbr-render: user-only\n    Properties:\n      sbr-type: \"[aws-var-name:aws-var-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          AttributeDefinitions:\n            - AttributeName: email\n              AttributeType: S\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent python plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: main\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    {event_source_sqs}:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent Java plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\npackage:\n  artifact: target/${file(deployment-env.yml):artifact}\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: ${file(deployment-env.yml):mainClass}\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once we need monitoring enabled across the board.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: index.handler\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n       Type: AWS::SQS::Queue\n       Properties:\n         QueueName: {event_source_sqs}\n         VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent python plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: index.handler\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n"]},{"id":215221300,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Go1\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - ./**\n#  include:\n#    - ./bin/**\n\nfunctions:\n  function_one:\n    handler: main\n#    description: Tencent Serverless Cloud Function\n#    runtime: Go1\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Php7 # Php7 or Php5\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\nfunctions:\n  function_one_one_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Php7 # Php7 or Php5\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Python3.6 # Python3.6 or Python2.7\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Python3.6 # Python3.6 or Python2.7\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","service: my-service\n\nprovider:\n  name: tencent\n  credentials: ~/credentials # 绝对地址，默认为 ~/credentials\n  stage: test # 阶段，默认为 dev\n  runtime: Nodejs8.9 # 可以指定腾讯云Serverless Cloud Function支持的Runtime， 默认nodejs8.9\n  cosBucket: DEFAULT # 可以指定，默认为DEFAULT: sls-cloudfunction-{region}\n  role: QCS_SCFExcuteRole # 可以指定，默认是QCS_SCFExcuteRole\n  memorySize: 256 # 默认256M，优先级：函数设置>全局设置>默认设置\n  timeout: 10 # 默认10s，优先级：函数设置>全局设置>默认设置\n  region: ap-shanghai # 默认sp-guangzhou，优先级：函数设置>全局设置>默认设置\n  environment: # 公共环境变量\n    variables:\n      ENV_FIRST: env1\n      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-cloudfunction\n\npackage:\n  exclude:\n    - package-lock.json\n    - .gitignore\n    - .git/**\n    - node_modules/** # exclude all node_modules....\n  include:\n    - node_modules/moment/** # except necessary ones\n  excludeDevDependencies: false\n\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n    description: Tencent Serverless Cloud Function\n    runtime: Python3.6\n    memorySize: 256\n    timeout: 10\n    environment:\n      variables:\n        ENV_FIRST: env1\n        ENV_Third: env2\n    events:\n      - timer:\n          name: timer\n          parameters:\n            cronExpression: '*/5 * * * *'\n            enable: true\n      - cos:\n          name: cli-appid.cos.ap-beijing.myqcloud.com\n          parameters:\n            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n            filter:\n              prefix: filterdir/\n              suffix: .jpg\n            events: cos:ObjectCreated:*\n            enable: true\n      - apigw:\n          name: hello_world_apigw\n          parameters:\n            stageName: release\n            serviceId:\n            httpMethod: ANY\n      - cmq:\n          name: cmq_trigger\n          parameters:\n            name: test-topic-queue\n            enable: true\n      - ckafka:\n          name: ckafka_trigger\n          parameters:\n            name: ckafka-2o10hua5\n            topic: test\n            maxMsgNum: 999\n            offset: latest\n            enable: true\n  function_two:\n    handler: index.main_handler\n    description: Tencent Serverless Cloud Function\n    runtime: python3.6\n    memorySize: 256\n    timeout: 10\n    events:\n      - timer:\n          name: timer\n          parameters:\n            cronExpression: '*/5 * * * *'\n            enable: true\n"]},{"id":144584409,"files":["service: orangejellyfish-serverless-starter\nframeworkVersion: '=1.60.5'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# Lambda function definitions. Each function defines itself in a separate YAML\n# file that resides alongside the function implementation. Unfortunately we have\n# to duplicate the function name here due to the way Serverless YAML importing\n# and parsing works (in an ideal world we could include these in a list as we do\n# for resources).\nfunctions:\n  hello: ${file(src/functions/hello/index.yml):hello}\n\n# Custom AWS resource definitions. This includes anything that the Serverless\n# framework doesn't handle for us, such as database setup, and overrides of\n# Serverless defaults.\nresources:\n  - ${file(src/resources/apigateway.yml)}\n  - ${file(src/resources/iam.yml)}\n\n# Serverless plugins. The \"stage-variables\" plugin is required to allow us to\n# customise the API Gateway stage that gets created automatically by Serverless.\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-iam-roles-per-function\n  - serverless-plugin-stage-variables\n"]},{"id":126472563,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sample-app\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: ServerlessHandsOnPart1\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n\nfunctions:\n  webapp:\n    handler: handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true","service: ServerlessTsNativeBuild\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  webpack:\n    includeModules:\n      forceInclude:\n        - mecab\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n      - '*/*'\n\nfunctions:\n  webapp:\n    handler: build/handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true\n\npackage:\n  individually: true"]},{"id":152357359,"files":["service: spider-less\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: ${self:custom.defaultRegion}\n  stage: ${env:NODE_ENV, self:custom.defaultNodeEnv}\n  environment:\n    NODE_ENV:  ${env:NODE_ENV, self:custom.defaultNodeEnv}\n    REGION: ${self:provider.region}\n    TABLE_SUBSCRIPTIONS: ${self:service}-subscriptions-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  http:\n    handler: src/index.api\n    timeout: 30\n    events:\n      - http:\n          path: /{proxy+}\n          method: any\n          cors: true\n  cron:\n    handler: src/index.cron\n    timeout: 60\n    events:\n      - schedule:\n          rate: rate(60 minutes)\n  scrape:\n    handler: src/index.scrape\n    timeout: 60\n    memorySize: 1536\n\nresources:\n  Resources:\n    SubscriptionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy\n      Properties:\n        TableName: ${self:provider.environment.TABLE_SUBSCRIPTIONS}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-offline\n\ncustom:\n  defaultRegion: us-east-1\n  defaultNodeEnv: dev\n  serverless-offline:\n    dontPrintOutput: true\n"]},{"id":151428012,"files":["service: acceptance-node\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime}\n  region: ${opt:region, 'us-east-2'}\n  role: acceptanceRole\n  stage: ${self:custom.buildNumber}-${opt:runtimeName}\n  environment:\n    STAGE: dev\n    EPSAGON_DEBUG: \"TRUE\"\n  package:\n    exclude:\n    - './**'\n    - 'node_modules/**'\n\ncustom:\n  buildNumber: ${opt:buildNumber}\n\nfunctions:\n  sanity:\n    handler: handler.sanity\n  labels:\n    handler: handler.labels\n\n  failsafe_no_tracer_init:\n    handler: handler_tracer_test.failsafe_no_tracer_init\n\n  sync_no_param_promise:\n    handler: handler.sync_no_param_promise\n  sync_no_param_promise_e:\n    handler: handler.sync_no_param_promise_e\n  sync_no_param_simple_return:\n    handler: handler.sync_no_param_simple_return\n  sync_no_param_simple_return_e:\n    handler: handler.sync_no_param_simple_return_e\n  sync_no_param_no_return:\n    handler: handler.sync_no_param_no_return\n  sync_no_param_no_return_e:\n    handler: handler.sync_no_param_no_return_e\n\n  sync_1_param_promise:\n    handler: handler.sync_1_param_promise\n  sync_1_param_promise_e:\n    handler: handler.sync_1_param_promise_e\n  sync_1_param_simple_return:\n    handler: handler.sync_1_param_simple_return\n  sync_1_param_simple_return_e:\n    handler: handler.sync_1_param_simple_return_e\n  sync_1_param_no_return:\n    handler: handler.sync_1_param_no_return\n  sync_1_param_no_return_e:\n    handler: handler.sync_1_param_no_return_e\n\n  sync_2_param_succeed:\n    handler: handler.sync_2_param_succeed\n  sync_2_param_succeed_e:\n    handler: handler.sync_2_param_succeed_e\n  sync_2_param_fail:\n    handler: handler.sync_2_param_fail\n  sync_2_param_fail_e:\n    handler: handler.sync_2_param_fail_e\n  sync_2_param_done:\n    handler: handler.sync_2_param_done\n  sync_2_param_done_e:\n    handler: handler.sync_2_param_done_e\n  sync_2_param_promise:\n    handler: handler.sync_2_param_promise\n  sync_2_param_promise_e:\n    handler: handler.sync_2_param_promise_e\n  sync_2_param_simple_return:\n    handler: handler.sync_2_param_simple_return\n  sync_2_param_simple_return_e:\n    handler: handler.sync_2_param_simple_return_e\n  sync_2_param_no_return:\n    handler: handler.sync_2_param_no_return\n  sync_2_param_no_return_e:\n    handler: handler.sync_2_param_no_return_e\n\n  sync_3_param_succeed:\n    handler: handler.sync_3_param_succeed\n  sync_3_param_succeed_e:\n    handler: handler.sync_3_param_succeed_e\n  sync_3_param_fail:\n    handler: handler.sync_3_param_fail\n  sync_3_param_fail_e:\n    handler: handler.sync_3_param_fail_e\n  sync_3_param_done:\n    handler: handler.sync_3_param_done\n  sync_3_param_done_e:\n    handler: handler.sync_3_param_done_e\n  sync_3_param_promise:\n    handler: handler.sync_3_param_promise\n  sync_3_param_promise_e:\n    handler: handler.sync_3_param_promise_e\n  sync_3_param_simple_return:\n    handler: handler.sync_3_param_simple_return\n  sync_3_param_simple_return_e:\n    handler: handler.sync_3_param_simple_return_e\n  sync_3_param_no_return:\n    handler: handler.sync_3_param_no_return\n  sync_3_param_no_return_e:\n    handler: handler.sync_3_param_no_return_e\n  sync_3_param_callback:\n    handler: handler.sync_3_param_callback\n  sync_3_param_callback_e:\n    handler: handler.sync_3_param_callback_e\n  sync_3_param_callback_error:\n    handler: handler.sync_3_param_callback_error\n  sync_3_param_callback_error_e:\n    handler: handler.sync_3_param_callback_error_e\n  sync_3_param_callback_then_fail:\n    handler: handler.sync_3_param_callback_then_fail\n  sync_3_param_callback_then_fail_e:\n    handler: handler.sync_3_param_callback_then_fail_e\n\nresources:\n  Resources:\n    acceptanceRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: acceptanceRole-${self:custom.buildNumber}-${opt:runtimeName}\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: acceptancePolicyName-${self:custom.buildNumber}-${opt:runtimeName}\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                -  Effect: \"Allow\"\n                   Action:\n                     - \"s3:PutObject\"\n                   Resource:\n                     Fn::Join:\n                       - \"\"\n                       - - \"arn:aws:s3:::\"\n                         - \"Ref\" : \"ServerlessDeploymentBucket\"\n","service: hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":169335633,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mercury\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  # If you want to change to a different AWS profile\n  # from ~/.aws/credentials, you can do so here\n  profile: default\n  # you can overwrite defaults here\n  #  stage: dev\n  #  region: us-east-1\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn' # Packager that will be used to package your external modules\n\nfunctions:\n  mercuryParser:\n    handler: src/mercury-parser.default\n    timeout: 10\n    memorySize: 256\n    events:\n      - http:\n          method: get\n          path: parser\n          cors: true\n      # Ping every 5 minutes to avoid cold starts\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n\n  parseHtml:\n    handler: src/parse-html.default\n    timeout: 10\n    memorySize: 256\n    events:\n      - http:\n          method: post\n          path: parse-html\n          cors: true\n      # Ping every 5 minutes to avoid cold starts\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n"]},{"id":198690918,"files":["service: ${self:custom.settings.serviceName}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage,'dev'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n      Resource: \"arn:aws:s3:::${self:custom.settings.environment.SOURCE_BUCKET}/*\"\n\nlayers:\n  sharp:\n    path: lambdaLayers/SharpLayer # required, path to layer contents on disk\n    name: ${self:provider.stage}-sharp # optional, Deployed Lambda layer name\n    package:\n      include:\n        - node_modules/**\n    description: sharp@0.23.4\n    compatibleRuntimes:\n      - nodejs10.x\n    licenseInfo: Apache License 2.0\n    retain: false\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Comment: Cloudfront distribution for serverless image handler\n          DefaultCacheBehavior:\n            TargetOriginId: ApiGateway\n            ViewerProtocolPolicy: 'redirect-to-https'\n            DefaultTTL: 30\n            ForwardedValues:\n              Headers:\n                - 'Accept'\n              QueryString: true\n          Enabled: true\n          Origins:\n            - Id: ApiGateway\n              DomainName:\n                Fn::Join:\n                  - \".\"\n                  - - Ref: ApiGatewayRestApi\n                    - execute-api.${self:custom.settings.region}.amazonaws.com\n              OriginPath: \"/${self:provider.stage}\"\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n\nfunctions:\n  index:\n    handler: src/index.handler\n    layers:\n      - {Ref: SharpLambdaLayer}\n    events:\n      - http:\n          path: /{any+}\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n    environment: ${self:custom.settings.environment}\nOutputs:\n  CloudFrontDistributionOutput:\n    Value:\n      'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]\ncustom:\n  settingsFilePath: ${opt:settings,'./settings.yml'}\n  settings: ${file(${self:custom.settingsFilePath}):stages.${self:provider.stage}}\n  serverless-offline:\n    port: ${self:custom.settings.offlinePort}\n  apigwBinary:\n    types:\n      - '*/*'\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n"]},{"id":84632322,"files":["service: serverless-chrome-lambda-pkg-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DEBUG: \"*\"\n\nfunctions:\n  test:\n    description: serverless-chrome/lambda test\n    memorySize: 1536\n    timeout: 30\n    handler: handler.run\n\n    events:\n      - http:\n          path: package/lambda/test\n          method: get\n","service: serverless-chrome-sls-plugin-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DEBUG: \"*\"\n\nplugins:\n#  - serverless-plugin-typescript\n  - serverless-plugin-chrome\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n      - --ignore-certificate-errors\n    functions:\n      - test\n      - anotherTest\n\nfunctions:\n  test:\n    handler: src/handler.default\n  anotherTest:\n    handler: src/anotherHandler.default\n    package:\n      # individually: true\n  noChromeHere:\n    handler: src/noChrome.default\n\n\n  # typescript-test:\n  #   handler: src/typescript-handler.default\n","service: serverless-chrome-examples\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n  environment:\n    PAGE_LOAD_TIMEOUT: 20000\n    LOGGING: true\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n\nfunctions:\n  version-info:\n    description: Headless Chrome Serverless-framework version info example\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version-info\n          method: get\n\n  request-logger:\n    description: Headless Chrome Serverless-framework request logging example\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/requestLogger.default\n    events:\n      - http:\n          path: request-logger\n          method: get\n\n  screenshot:\n    description: Headless Chrome Serverless-framework screenshot example\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/screenshot.default\n    events:\n      - http:\n          path: screenshot\n          method: get\n\n  pdf:\n    description: Headless Chrome Serverless-framework PDF example\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/pdf.default\n    events:\n      - http:\n          path: pdf\n          method: get\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Properties:\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    # Enable X-Ray tracing on Lambda functions\n    # ScreenshotLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n    # PdfLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n"]},{"id":185531534,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n        - \"dynamodb:PutItem\"\n        - \"sns:*\"\n        - \"sqs:*\"\n        - \"s3:*\"\n      Resource:\n        - \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  parent:\n    handler: parent.handler\n\n  child:\n    handler: child.handler\n\n  slave-one:\n    handler: slave.handler\n    events:\n      - sns: slave-test-topic\n\n  slave-two:\n    handler: slave.handler\n    events:\n      - sns: slave-test-topic\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: /\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":207653371,"files":["service: noiice\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-iam-roles-per-function\n  - serverless-pseudo-parameters\n  - noiiice-plugin\n  - build-apps\n  - serverless-stack-termination-protection\n\nprovider:\n  name: aws\n  endpointType: ${self:provider.config.endpointType}\n  stage: ${opt:stage, 'dev'}\n  profile: ${opt:profile, ''}\n  secrets: ${file(secrets.json)}\n  config: ${self:provider.secrets.${self:provider.stage}}\n  region: ${self:provider.config.region}\n  versionFunctions: false\n  stackName: ${self:service}-${self:provider.stage}\n  usagePlan:\n    - BlogUser:\n        quota:\n          limit: 5000\n          offset: 2\n          period: MONTH\n        throttle:\n          burstLimit: 10\n          rateLimit: 1\n    - AdminUser:\n        quota:\n          limit: 2000\n          offset: 1\n          period: MONTH\n        throttle:\n          burstLimit: 50\n          rateLimit: 5\n  tags:\n    project: Noiiice\n  environment:\n    blogCommentsDB: ${self:provider.config.blogCommentsDB}\n    blogPostDB:  ${self:provider.config.blogPostDB}\n    region: ${self:provider.config.region}\n    identityPoolId:\n      Ref: IdentityPool\n    userPoolId:\n      Ref: UserPool\n    appClientId:\n      Ref: UserPoolClient\n    authorizedRole:\n      Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n    restrictedStrings: ${self:provider.config.restrictedStrings}\n    apiPlanId: 'placeholder' #do not remove, must exist for dynamic replacement after api plan is created\n    stage: ${self:provider.stage}\n    baseUrl: ${self:provider.stage}/\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n  scriptHooks:\n    before:package:createDeploymentArtifacts: lambda/pkg.js\n  postActionsArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-postActions\n  commentActionsArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-commentAction\n  DomainEndpoint:\n    EDGE: DistributionDomainName\n    REGIONAL: RegionalDomainName\n  serverlessTerminationProtection:\n    stages:\n      - prod\n\n# This is for lambda function server\nlayers:\n  NoiiiceModules:\n    name: ${self:service}-${self:provider.stage}-NoiiiceModules\n    path: layers\n    description: 'Node modules for Noiiice Blog'\n    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with\n      - nodejs8.10\n    retain: false\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    package:\n      exclude:\n        - \"**/*\"\n      include:\n        - nuxt.config.js\n        - nuxtHandler.js\n        - index.js\n        - package.json\n        - secrets.json\n        - binaryMimeTypes.js\n        - apps/app/config.js\n        - .nuxt/**\n        - apps/app/static/**\n\n    layers:\n      # - arn:aws:lambda:us-east-1:378603488134:layer:NoiiiceStaticLayer:2\n      - {Ref: NoiiiceModulesLambdaLayer}\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\n  postActions:\n    handler: postActions.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/postActions/postActions.zip\n    iamRoleStatementsName: NoiiceLambdaRolePostActions-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n          - dynamodb:UpdateItem\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogPostDB}*\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n    events:\n      - http:\n          path: /api/blog/post\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/blog/delete/{uid}\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n          request:\n            parameters:\n              paths:\n                uid: true\n\n  commentActions:\n    handler: commentActions.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/commentActions/commentActions.zip\n    environment:\n      DOMAIN: ${self:provider.config.domain}\n      ADMINEMAIL: ${self:provider.config.adminUserEmail}\n    iamRoleStatementsName: NoiiceLambdaRoleCommentActions-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n          - dynamodb:UpdateItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n      - Effect: \"Allow\"\n        Action:\n          - ses:SendEmail\n        Resource:\n          - arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/*\n    events:\n      - http:\n          path: /api/comment/post\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/comment/update\n          method: put\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/comment/delete/{postuid}/{uid}\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n          request:\n            parameters:\n              paths:\n                uid: true\n                postuid: true\n\n  getBlogPosts:\n    handler: getBlogPosts.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/getBlogPosts/getBlogPosts.zip\n    iamRoleStatementsName: NoiiceLambdaRoleGetBlog-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogPostDB}*\n    events:\n      - http:\n          path: /api/blog/get\n          cors: true\n          method: get\n\n  getComments:\n    handler: getComments.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/getComments/getComments.zip\n    iamRoleStatementsName: NoiiceLambdaRoleGetComments-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n    events:\n      - http:\n          path: /api/comment/get/{uid}\n          cors: true\n          method: get\n          request:\n            parameters:\n              paths:\n                uid: true\n      - http:\n          path: /api/comment/getall\n          method: get\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n\n  upload:\n    handler: upload.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/upload/upload.zip\n    iamRoleStatementsName: NoiiceLambdaRoleUpload-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - s3:PutObject\n          - s3:PutObjectAcl\n          - s3:ListBucket\n          - s3:GetObject\n        Resource: \"arn:aws:s3:::${self:provider.config.mediaBucket}\"\n      - Effect: \"Allow\"\n        Action:\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n        Resource: \"arn:aws:logs:*:*:*\"\n    events:\n      - http:\n          path: /api/upload\n          cors: true\n          method: post\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  setup:\n    handler: setup.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/setup/setup.zip\n    iamRoleStatementsName: NoiiceLambdaRoleSetup-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - cognito-identity:*\n        Resource: \"arn:aws:cognito-identity:#{AWS::Region}:#{AWS::AccountId}:identitypool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - iam:PassRole\n        Resource:\n          Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n    events:\n      - http:\n          path: /api/setup\n          cors: true\n          method: get\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n\n  userConfirmation:\n    handler: userConfirmation.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/userConfirmation/userConfirmation.zip\n    iamRoleStatementsName: NoiiceLambdaUserConfirmation-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - cognito-identity:*\n        Resource: \"arn:aws:cognito-identity:#{AWS::Region}:#{AWS::AccountId}:identitypool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - cognito-idp:AdminUpdateUserAttributes\n        Resource: \"arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - apigateway:*\n          - apigateway:POST\n        Resource:\n          - \"arn:aws:apigateway:#{AWS::Region}::/apikeys\"\n          - \"arn:aws:apigateway:#{AWS::Region}::/usageplans/*/keys\"\n\nresources:\n\n  - Resources:\n      BlogPostTable:\n        Type: AWS::DynamoDB::Table\n        Properties:\n          TableName: ${self:provider.config.blogPostDB}\n          AttributeDefinitions:\n          - AttributeName: uid\n            AttributeType: S\n          - AttributeName: slug\n            AttributeType: S\n          KeySchema:\n          - AttributeName: uid\n            KeyType: HASH\n          BillingMode: PAY_PER_REQUEST\n          GlobalSecondaryIndexes:\n          - IndexName: slug\n            KeySchema:\n            - AttributeName: slug\n              KeyType: HASH\n            Projection:\n              NonKeyAttributes:\n              - uid\n              ProjectionType: INCLUDE\n\n      CommentsTable:\n        Type: AWS::DynamoDB::Table\n        Properties:\n          TableName: ${self:provider.config.blogCommentsDB}\n          AttributeDefinitions:\n          - AttributeName: postuid\n            AttributeType: S\n          - AttributeName: uid\n            AttributeType: S\n          KeySchema:\n          - AttributeName: postuid\n            KeyType: HASH\n          - AttributeName: uid\n            KeyType: RANGE\n          BillingMode: PAY_PER_REQUEST\n\n      MediaBucket:\n        Type: AWS::S3::Bucket\n        Properties:\n          AccessControl: PublicRead\n          BucketName: ${self:provider.config.mediaBucket}\n          WebsiteConfiguration:\n            IndexDocument: index.html\n          CorsConfiguration:\n            CorsRules:\n              -\n                AllowedOrigins:\n                  - '*'\n                AllowedHeaders:\n                  - '*'\n                AllowedMethods:\n                  - GET\n                  - PUT\n                  - POST\n                  - DELETE\n                  - HEAD\n                MaxAge: 3000\n\n      UserPool:\n        Type: \"AWS::Cognito::UserPool\"\n        Properties:\n          UserPoolName: ${self:provider.config.userPool}-${self:provider.stage}\n          AutoVerifiedAttributes:\n          - email\n          MfaConfiguration: \"OFF\"\n          Schema:\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n          - Name: APIKey\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n          LambdaConfig:\n            PostConfirmation: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-userConfirmation\n\n      UserPoolGroup:\n        Type: \"AWS::Cognito::UserPoolGroup\"\n        DependsOn: UserPool\n        Properties:\n          GroupName: admin\n          Description: \"User with admin priveleges can create/modify posts and moderate comments\"\n          Precedence: 0\n          UserPoolId:\n            Ref: UserPool\n          RoleArn: arn:aws:iam::#{AWS::AccountId}:role/${self:provider.config.userPool}-AdminRole-${self:provider.stage}\n\n      UserPoolClient:\n        Type: \"AWS::Cognito::UserPoolClient\"\n        Properties:\n          ClientName: ${self:provider.config.userPool}-client-${self:provider.stage}\n          GenerateSecret: false\n          UserPoolId:\n            Ref: UserPool\n\n      IdentityPool:\n        Type: \"AWS::Cognito::IdentityPool\"\n        Properties:\n          IdentityPoolName: ${self:provider.config.userPool}Identity${self:provider.stage}\n          AllowUnauthenticatedIdentities: false\n          CognitoIdentityProviders:\n          - ClientId:\n              Ref: UserPoolClient\n            ProviderName:\n              Fn::GetAtt: [UserPool, ProviderName]\n\n      CognitoAuthorizedRole:\n        Type: \"AWS::IAM::Role\"\n        Properties:\n          RoleName: ${self:provider.config.userPool}-AuthRole-${self:provider.stage}\n          AssumeRolePolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Principal:\n                  Federated: \"cognito-identity.amazonaws.com\"\n                Action:\n                  - \"sts:AssumeRoleWithWebIdentity\"\n                Condition:\n                  StringEquals:\n                    \"cognito-identity.amazonaws.com:aud\":\n                      Ref: IdentityPool\n                  \"ForAnyValue:StringLike\":\n                    \"cognito-identity.amazonaws.com:amr\": authenticated\n          Policies:\n            - PolicyName: \"CognitoAuthorizedPolicy\"\n              PolicyDocument:\n                Version: \"2012-10-17\"\n                Statement:\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"cognito-sync:*\"\n                      - \"cognito-identity:*\"\n                    Resource: \"*\"\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"lambda:InvokeFunction\"\n                    Resource:\n                      - ${self:custom.postActionsArn}\n\n      AdminUserRole:\n        Type: \"AWS::IAM::Role\"\n        Properties:\n          RoleName: ${self:provider.config.userPool}-AdminRole-${self:provider.stage}\n          AssumeRolePolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Principal:\n                  Federated: \"cognito-identity.amazonaws.com\"\n                Action:\n                  - \"sts:AssumeRoleWithWebIdentity\"\n                Condition:\n                  StringEquals:\n                    \"cognito-identity.amazonaws.com:aud\":\n                      Ref: IdentityPool\n                  \"ForAnyValue:StringLike\":\n                    \"cognito-identity.amazonaws.com:amr\": authenticated\n          Policies:\n            - PolicyName: \"AdminCognitoAuthorizedPolicy\"\n              PolicyDocument:\n                Version: \"2012-10-17\"\n                Statement:\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"cognito-sync:*\"\n                      - \"cognito-identity:*\"\n                    Resource: \"*\"\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"lambda:InvokeFunction\"\n                    Resource:\n                      - ${self:custom.commentActionsArn}\n                      - ${self:custom.postActionsArn}\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"s3:*\"\n                    Resource: arn:aws:s3:::${self:provider.config.mediaBucket}/*\n\n\n      IdentityPoolRoleMapping:\n        Type: \"AWS::Cognito::IdentityPoolRoleAttachment\"\n        Properties:\n          IdentityPoolId:\n            Ref: IdentityPool\n          Roles:\n            authenticated:\n              Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n\n      AdminUser:\n        Type: AWS::Cognito::UserPoolUser\n        DependsOn: UserPoolGroup\n        Properties:\n          DesiredDeliveryMediums:\n            - EMAIL\n          UserAttributes:\n            - Name: email\n              Value: ${self:provider.config.adminUserEmail}\n          UserPoolId:\n            Ref: UserPool\n          Username: ${self:provider.config.adminUser}\n\n      AdminToGroup:\n        Type: AWS::Cognito::UserPoolUserToGroupAttachment\n        Properties:\n          GroupName: \"admin\"\n          UserPoolId:\n            Ref: UserPool\n          Username:\n            Ref: AdminUser\n        DependsOn: AdminUser\n\n      ApiGatewayAuthorizer:\n        DependsOn:\n          - ApiGatewayRestApi\n        Type: AWS::ApiGateway::Authorizer\n        Properties:\n          Name: cognito-authorizer\n          IdentitySource: method.request.header.Authorization\n          RestApiId:\n            Ref: ApiGatewayRestApi\n          Type: COGNITO_USER_POOLS\n          ProviderARNs:\n            - Fn::GetAtt: [UserPool, Arn]\n\n      ApiGatewayBasepathMapping:\n        Type: AWS::ApiGateway::BasePathMapping\n        DependsOn: [ ApiGatewayUsagePlanBlogUser, ApiGatewayCustomDomain ]\n        Properties:\n          BasePath: ''\n          DomainName: ${self:provider.config.domain}\n          RestApiId:\n            Ref: ApiGatewayRestApi\n          Stage: ${self:provider.stage}\n\n      UserConfirmationLambdaTriggerPolicy:\n        Type: AWS::Lambda::Permission\n        Properties:\n          Action: lambda:InvokeFunction\n          FunctionName:\n            Fn::GetAtt: [UserConfirmationLambdaFunction, Arn]\n          Principal: \"cognito-idp.amazonaws.com\"\n          SourceArn:\n            Fn::GetAtt: [UserPool, Arn]\n\n  - ${file(apigwDomain${self:provider.config.endpointType}.yml)}\n\n  - Outputs:\n      UserPoolId:\n        Value:\n          Ref: UserPool\n      UserPoolClientId:\n        Value:\n          Ref: UserPoolClient\n      IdentityPoolId:\n        Value:\n          Ref: IdentityPool\n      AuthorizedRole:\n        Value:\n          Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n      AdminUserRoleOut:\n        Value:\n          Ref: AdminUserRole\n      MediaBucket:\n        Value: ${self:provider.config.mediaBucket}\n      Stage:\n        Value: ${self:provider.stage}\n      Region:\n        Value: ${self:provider.config.region}\n      Domain:\n        Value: ${self:provider.config.domain}\n      UsagePlanId:\n        Value:\n          Ref: ApiGatewayUsagePlanBlogUser\n      AdminUsagePlanId:\n        Value:\n          Ref: ApiGatewayUsagePlanAdminUser\n      GoogleAnalyticsID:\n        Value: ${self:provider.config.googleAnalyticsID}\n      DomainEndpoint:\n        Value:\n          Fn::GetAtt:\n            - ApiGatewayCustomDomain\n            - ${self:custom.DomainEndpoint.${self:provider.config.endpointType}}\n"]},{"id":116817549,"files":["name: webiny-cms\n\nvars:\n  region: ${env.AWS_REGION}\n\nsite:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    description: Webiny Site\n    region: ${vars.region}\n    memory: 128\n    timeout: 30\n    code: ./site/build\n    env:\n      SSR_FUNCTION: ${ssr.name}\n\nssr:\n  component: \"@webiny/serverless-function\"\n  inputs:\n    description: Site SSR\n    region: ${vars.region}\n    hook: yarn build:${cli.env}\n    root: ./site\n    code: ./site/build-ssr\n    handler: handler.handler\n    memory: 2048\n    timeout: 30\n\nadmin:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    region: ${vars.region}\n    description: Webiny Admin\n    hook: yarn build:${cli.env}\n    root: ./admin\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: Apps Gateway\n    description: Serverless React Apps\n    endpoints:\n      - path: /admin/{key+}\n        method: GET\n        function: ${admin}\n      - path: /admin\n        method: GET\n        function: ${admin}\n      - path: /{key+}\n        method: GET\n        function: ${site}\n      - path: /\n        method: GET\n        function: ${site}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - url: ${api.url}\n","name: webiny-apps-[PROJECT_ID]\n\nvars:\n  region: ${env.AWS_REGION}\n\nsite:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    description: Webiny Site\n    region: ${vars.region}\n    memory: 128\n    timeout: 30\n    code: ./site/build\n    env:\n      SSR_FUNCTION: ${ssr.name}\n\nssr:\n  component: \"@webiny/serverless-function\"\n  inputs:\n    description: Site SSR\n    region: ${vars.region}\n    hook: yarn build:${cli.env}\n    root: ./site\n    code: ./site/build-ssr\n    handler: handler.handler\n    memory: 2048\n    timeout: 30\n\nadmin:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    region: ${vars.region}\n    description: Webiny Admin\n    hook: yarn build:${cli.env}\n    root: ./admin\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: Apps Gateway\n    binaryMediaTypes: [\"*/*\"]\n    description: Serverless React Apps\n    endpoints:\n      - path: /admin/{key+}\n        method: GET\n        function: ${admin}\n      - path: /admin\n        method: GET\n        function: ${admin}\n      - path: /{key+}\n        method: GET\n        function: ${site}\n      - path: /\n        method: GET\n        function: ${site}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - url: ${api.url}\n","name: webiny-cms-project\n\nvars:\n  region: ${env.AWS_REGION}\n  bucket: ${env.S3_BUCKET}\n  apollo:\n    server:\n      introspection: ${env.GRAPHQL_INTROSPECTION}\n      playground: ${env.GRAPHQL_PLAYGROUND}\n  commodo:\n    database:\n      server: ${env.MONGODB_SERVER}\n      name: ${env.MONGODB_NAME}\n  security:\n    token:\n      expiresIn: 2592000 # 30 days\n      secret: ${env.JWT_SECRET}\n\ngateway:\n  component: \"@webiny/serverless-apollo-gateway\"\n  inputs:\n    name: Apollo Gateway\n    region: ${vars.region}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-gateway\"\n        options:\n          server: ${vars.apollo.server}\n          services:\n            - name: security\n              url: ${security.api.graphqlUrl}\n            - name: files\n              url: ${files.api.graphqlUrl}\n            - name: pageBuilder\n              url: ${pageBuilder.api.graphqlUrl}\n            - name: i18n\n              url: ${i18n.api.graphqlUrl}\n            - name: formBuilder\n              url: ${formBuilder.api.graphqlUrl}\n\ncognito:\n  component: \"@webiny/serverless-aws-cognito-user-pool\"\n  inputs:\n    name: WebinyPool\n    region: ${vars.region}\n    appClients:\n      - name: ReactApp\n\nsecurity:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: Security\n    region: ${vars.region}\n    memory: 512\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins\"\n        options: ${vars.security}\n      - factory: \"@webiny/api-plugin-security-cognito\"\n        options:\n          region: ${vars.region}\n          userPoolId: ${cognito.userPool.Id}\n\nfiles:\n  component: \"@webiny/serverless-files/dist\"\n  inputs:\n    region: ${vars.region}\n    bucket: ${vars.bucket}\n    functions:\n      apolloService:\n        memory: 512\n        timeout: 10\n        uploadMinFileSize: 0 # 0 MB\n        uploadMaxFileSize: 26214400 # 25 MB\n        webpackConfig: ./webpack.config.js\n        plugins:\n          - factory: \"@webiny/api-plugin-create-apollo-handler\"\n            options: ${vars.apollo}\n          - factory: \"@webiny/api-plugin-commodo-mongodb\"\n            options: ${vars.commodo}\n          - factory: \"@webiny/api-security/plugins/service\"\n            options: ${vars.security}\n          - \"@webiny/api-files/plugins\"\n          - \"@webiny/api-plugin-files-resolvers-mongodb\"\n      downloadFile:\n        memory: 512\n        timeout: 10\n      imageTransformer:\n        memory: 1600\n        timeout: 30\n\ni18n:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: I18N\n    region: ${vars.region}\n    memory: 512\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-i18n/plugins\"\n\npageBuilder:\n  component: \"@webiny/serverless-page-builder\"\n  inputs:\n    name: Page Builder\n    region: ${vars.region}\n    files: ${files}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-page-builder/plugins\"\n      - \"@webiny/api-plugin-page-builder-resolvers-mongodb\"\n      - \"@webiny/api-google-tag-manager\"\n      - \"@webiny/api-mailchimp\"\n      - \"@webiny/api-cookie-policy\"\n\nformBuilder:\n  component: \"@webiny/serverless-form-builder\"\n  inputs:\n    name: Form Builder\n    region: ${vars.region}\n    files: ${files}\n    i18n: ${i18n}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-plugin-form-builder-resolvers-mongodb\"\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: \"API Gateway\"\n    region: ${vars.region}\n    description: \"Main API Gateway\"\n    endpoints:\n      - path: /graphql\n        method: ANY\n        function: ${gateway}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    comment: pavel910-webiny-js-api\n    origins:\n      - ${files.cdnOrigin}\n      - url: ${api.url}\n        pathPatterns:\n          \"/graphql\":\n            ttl: 0\n            forward:\n              headers: [\"Accept\", \"Accept-Language\"]\n            allowedHttpMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"POST\", \"PATCH\", \"DELETE\"]\n","name: webiny-api-[PROJECT_ID]\n\nvars:\n  region: ${env.AWS_REGION}\n  bucket: ${env.S3_BUCKET}\n  apollo:\n    server:\n      introspection: ${env.GRAPHQL_INTROSPECTION}\n      playground: ${env.GRAPHQL_PLAYGROUND}\n  commodo:\n    database:\n      server: ${env.MONGODB_SERVER}\n      name: ${env.MONGODB_NAME}\n  security:\n    token:\n      expiresIn: 2592000 # 30 days\n      secret: ${env.JWT_SECRET}\n\ngateway:\n  component: \"@webiny/serverless-apollo-gateway\"\n  inputs:\n    name: Apollo Gateway\n    region: ${vars.region}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-gateway\"\n        options:\n          server: ${vars.apollo.server}\n          services:\n            - name: security\n              url: ${security.api.graphqlUrl}\n            - name: files\n              url: ${files.api.graphqlUrl}\n            - name: pageBuilder\n              url: ${pageBuilder.api.graphqlUrl}\n            - name: i18n\n              url: ${i18n.api.graphqlUrl}\n            - name: formBuilder\n              url: ${formBuilder.api.graphqlUrl}\n\ncognito:\n  component: \"@webiny/serverless-aws-cognito-user-pool\"\n  inputs:\n    name: \"webiny-pool-[PROJECT_ID]\"\n    region: ${vars.region}\n    appClients:\n      - name: \"react-app-[PROJECT_ID]\"\n\nsecurity:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: \"Security\"\n    region: ${vars.region}\n    memory: 512\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins\"\n        options: ${vars.security}\n      - factory: \"@webiny/api-plugin-security-cognito\"\n        options:\n          region: ${vars.region}\n          userPoolId: ${cognito.userPool.Id}\n\nfiles:\n  component: \"@webiny/serverless-files\"\n  inputs:\n    region: ${vars.region}\n    bucket: ${vars.bucket}\n    functions:\n      apolloService:\n        memory: 512\n        timeout: 10\n        uploadMinFileSize: 0 # 0 MB\n        uploadMaxFileSize: 26214400 # 25 MB\n        plugins:\n          - factory: \"@webiny/api-plugin-create-apollo-handler\"\n            options: ${vars.apollo}\n          - factory: \"@webiny/api-plugin-commodo-mongodb\"\n            options: ${vars.commodo}\n          - factory: \"@webiny/api-security/plugins/service\"\n            options: ${vars.security}\n          - \"@webiny/api-files/plugins\"\n          - \"@webiny/api-plugin-files-resolvers-mongodb\"\n      downloadFile:\n        memory: 512\n        timeout: 10\n      imageTransformer:\n        memory: 1600\n        timeout: 30\n\ni18n:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: \"I18N\"\n    region: ${vars.region}\n    memory: 512\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-i18n/plugins\"\n\npageBuilder:\n  component: \"@webiny/serverless-page-builder\"\n  inputs:\n    name: \"Page Builder\"\n    region: ${vars.region}\n    files: ${files}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-page-builder/plugins\"\n      - \"@webiny/api-plugin-page-builder-resolvers-mongodb\"\n      - \"@webiny/api-google-tag-manager\"\n      - \"@webiny/api-mailchimp\"\n      - \"@webiny/api-cookie-policy\"\n\nformBuilder:\n  component: \"@webiny/serverless-form-builder\"\n  inputs:\n    name: \"Form Builder\"\n    region: ${vars.region}\n    files: ${files}\n    i18n: ${i18n}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-plugin-form-builder-resolvers-mongodb\"\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: \"API Gateway\"\n    region: ${vars.region}\n    description: \"Main API Gateway\"\n    endpoints:\n      - path: /graphql\n        method: ANY\n        function: ${gateway}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - ${files.cdnOrigin}\n      - url: ${api.url}\n        pathPatterns:\n          \"/graphql\":\n            ttl: 0\n            forward:\n              headers: [\"Accept\", \"Accept-Language\"]\n            allowedHttpMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"POST\", \"PATCH\", \"DELETE\"]\n"]},{"id":140023497,"files":["service: serverless-offline-dynamodb-streams\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-dynamodb-streams\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - stream: arn:aws:dynamodb:region:XXXXXX:table/MyFirstTable\n      - stream:\n          type: dynamodb\n          arn: arn:aws:dynamodb:region:XXXXXX:table/MySecondTable\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - stream:\n          type: dynamodb\n          streamName: MyThirdTable\n          arn:\n            Fn::GetAtt:\n              - MyThirdTable\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - MyFourthTable\n              - Arn\n\nresources:\n  Resources:\n    MyFourthTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: MyFourthTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\ncustom:\n  serverless-offline:\n    port: 3443\n  serverless-offline-dynamodb-streams: ${file(./custom.yml):serverless-offline-dynamodb-streams}","service: serverless-offline-kinesis\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-kinesis\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - stream: arn:aws:kinesis:region:XXXXXX:stream/MyFirstStream \n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:region:XXXXXX:stream/MySecondStream\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - stream:\n          type: kinesis\n          streamName: MyThirdStream\n          arn:\n            Fn::GetAtt:\n              - MyThirdStream\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - MyFourthStream\n              - Arn\n\nresources:\n  Resources:\n    MyFourthStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: MyFourthStream\n        ShardCount: 1\n\ncustom:\n  serverless-offline:\n    port: 3223\n  serverless-offline-kinesis: ${file(./custom.yml):serverless-offline-kinesis}","service: serverless-offline-sqs\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-sqs\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - sqs: arn:aws:sqs:region:XXXXXX:MyFirstQueue\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:MySecondQueue\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - sqs:\n          queueName: MyThirdQueue\n          arn:\n            Fn::GetAtt:\n              - MyThirdQueue\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - MyFourthQueue\n              - Arn\n\nresources:\n  Resources:\n    MyFourthQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: MyFourthQueue\n\ncustom:\n  serverless-offline:\n    port: 3333\n  serverless-offline-sqs: ${file(./custom.yml):serverless-offline-sqs}","service: serverless-offline-sqs\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-sqs\n    - serverless-offline\n\nfunctions:\n  autoCreatedHandler:\n    handler: lambda/handler.callback\n    events:\n      - sqs: arn:aws:sqs:region:XXXXXX:AutocreatedImplicitQueue\n      - sqs:\n          queueName: AutocreatedQueue\n          arn:\n            Fn::GetAtt:\n              - AutocreatedQueue\n              - Arn\n      - sqs:\n          queueName: AutocreatedFifoQueue.fifo\n          arn:\n            Fn::GetAtt:\n              - AutocreatedFifoQueue\n              - Arn\n\nresources:\n  Resources:\n    AutocreatedQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: AutocreatedQueue\n    AutocreatedFifoQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: AutocreatedFifoQueue.fifo\n        FifoQueue: true\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n              - SomeDeadQueueLetterIWouldHaveDefinedButIgnoredAsCfnResolvingNotSupported\n              - Arn\n          maxReceiveCount: 12\n        MessageRetentionPeriod: 1209600\n        ContentBasedDeduplication: true\n        Policy: {Ref: \"whatever the policy, i'll ignore it\"}\n\ncustom:\n  serverless-offline:\n    port: 3223\n  serverless-offline-sqs:\n    endpoint: http://0.0.0.0:${ssm:/sqs/port}\n    region: ${self:provider.region}\n    accessKeyId: root\n    secretAccessKey: root\n    skipCacheInvalidation: false\n    autoCreate: true\n"]},{"id":163119373,"files":["service: <%= projectName %>\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  cfLogs: true\n  runtime: go1.x\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n  stackTags:\n    squad: Test\n\nplugins:\n  - serverless-sam\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n## Uncomment for dev purpose only.\n## Re-comment it before deploy !!\n#plugins:\n#  - serverless-offline\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-sam\n## Uncomment for dev purpose only. Re-comment it before deploy !!\n#  - serverless-offline\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: <%= projectName %>\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  runtime: java8\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/<%= projectName %>.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: <%= projectName %>\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n  runtime: dotnetcore2.1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nplugins:\n  - serverless-sam\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":76508594,"files":["service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    zip: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    slim: false\n    dockerizePip: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    usePoetry: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    dockerizePip: false\n    pythonBin: ${opt:pythonBin, self:provider.runtime}\n\npackage:\n  individually: false\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    # call `pip install` inside a container - useful for packages that have native dependencies (scipy et-al)\n    dockerizePip: true\n\n    # aws lambda has an after-extraction size limit - with native dependencies we pass the limit quickly\n    # zip the requirements and extract them on the fly (see handler.py)\n    zip: true\n\npackage:\n  # exclude everything...\n  exclude:\n    - '**/*'\n\n  # include - we have to explicitly list packages with native dependencies.\n  include:\n    - '*.py'\n    - 'numpy'\n    - 'scipy'\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    zip: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    slim: false\n    dockerizePip: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test-indiv\n\nprovider:\n  name: aws\n  runtime: python3.6\n\npackage:\n  individually: true\n  exclude: 'node_modules/**'\ncustom:\n  pythonRequirements:\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    dockerizePip: false\n\nfunctions:\n  hello1:\n    handler: handler1.hello\n    module: module1\n  hello2:\n    handler: handler2.hello\n    module: module2\n\nplugins:\n  - serverless-python-requirements\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime, 'python3.6'}\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    vendor: ${opt:vendor, ''}\n    fileName: ${opt:fileName, 'requirements.txt'}\n    useStaticCache: ${opt:useStaticCache, self:custom.defaults.useStaticCache}\n    useDownloadCache: ${opt:useDownloadCache, self:custom.defaults.useDownloadCache}\n    cacheLocation: ${opt:cacheLocation, ''}\n  defaults:\n    slim: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    zip: false\n    dockerizePip: false\n    individually: false\n    useStaticCache: true\n    useDownloadCache: true\n\npackage:\n  individually: ${opt:individually, self:custom.defaults.individually}\n  exclude:\n    - '**/*'\n  include:\n    - 'handler.py'\n\nfunctions:\n  hello:\n    handler: handler.hello\n  hello2:\n    handler: handler.hello\n  hello3:\n    handler: handler.hello\n    runtime: nodejs6.10\n  hello4:\n    handler: fn2_handler.hello\n    module: fn2\n    package:\n      include:\n        - 'fn2/**'\n\n\n"]},{"id":134855786,"files":["service: lambda-powertools-demo\n\nplugins:\n  - serverless-iam-roles-per-function\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: eu-west-2\n  environment:\n    STAGE: dev\n    DATADOG_API_KEY: idunno\n    DATADOG_PREFIX: lambda-powertools-demo.\n\ncustom:\n  pseudoParameters:\n    allowReferences: true\n\npackage:\n  exclude:\n    - node_modules/aws-sdk/**\n    - node_modules/@dazn/**/node_modules/aws-sdk/**\n\nfunctions:\n  api-a:\n    handler: functions/api-a.handler\n    events:\n      - http:\n          path: /\n          method: get\n    environment:\n      KINESIS_STREAM: !Ref KinesisStream\n      FIREHOSE_STREAM: !Ref FirehoseStream\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: !GetAtt KinesisStream.Arn\n      - Effect: Allow\n        Action: firehose:PutRecord\n        Resource: !GetAtt FirehoseStream.Arn\n  \n  api-b:\n    handler: functions/api-b.handler\n    events:\n      - http:\n          path: /\n          method: post\n\n  kinesis:\n    handler: functions/kinesis.handler\n    events:\n      - stream:\n          type: kinesis\n          arn: !GetAtt KinesisStream.Arn\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n      TABLE_NAME: !Ref DynamoDBTable\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n      - Effect: Allow\n        Action: dynamodb:PutItem\n        Resource: !GetAtt DynamoDBTable.Arn\n\n  dynamodb:\n    handler: functions/dynamodb.handler    \n    events:\n      - stream:\n          type: dynamodb\n          arn: !GetAtt DynamoDBTable.StreamArn\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n  \n  sns:\n    handler: functions/sns.handler\n    events:\n      - sns: \n          arn: !Ref SnsTopic\n          topicName: lambda-powertools-demo\n    environment:\n      STATE_MACHINE_ARN: !Ref LambdaPowertoolsDemo\n    iamRoleStatements:\n      - Effect: Allow\n        Action: states:StartExecution\n        Resource: !Ref LambdaPowertoolsDemo\n      - Effect: Allow\n        Action: lambda:InvokeFunction\n        Resource: !GetAtt StandDashaloneLambdaFunction.Arn\n\n  firehose:\n    handler: functions/firehose.handler\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n\n  eventbridge:\n    handler: functions/eventbridge.handler\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - dazn-lambda-powertools-example\n            detail-type:\n              - eventbridge\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n\n  cloudwatchevents:\n    handler: functions/cloudwatchevents.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - dazn-lambda-powertools-example\n            detail-type:\n              - cloudwatchevents\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n\n  stand-alone:\n    handler: functions/stand-alone.handler\n\n  add:\n    handler: functions/add.handler\n\n  double:\n    handler: functions/double.handler\n    \nstepFunctions:\n  stateMachines:\n    lambda-powertools-demo:      \n      name: lambdaPowertoolsDemo\n      definition:\n        Comment: A demo to show off the Lambda powertools packages\n        StartAt: Add\n        States:\n          Add:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [add, Arn]\n            ResultPath: $.z\n            Next: Double\n          Double:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [double, Arn]\n            ResultPath: $.result\n            End: true\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties: \n        ShardCount: 1\n\n    S3Bucket:\n      Type: AWS::S3::Bucket\n\n    FirehoseDeliveryIamRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service: firehose.amazonaws.com\n              Action: sts:AssumeRole\n        Path: \"/\"\n        Policies:\n          - PolicyName: root\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action: glue:GetTableVersions\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - s3:AbortMultipartUpload\n                    - s3:GetBucketLocation\n                    - s3:GetObject\n                    - s3:ListBucket\n                    - s3:ListBucketMultipartUploads\n                    - s3:PutObject\n                  Resource:\n                    - \"#{S3Bucket.Arn}\"\n                    - \"#{S3Bucket.Arn}/*\"\n                - Effect: Allow\n                  Action:\n                    - kinesis:DescribeStream\n                    - kinesis:GetShardIterator\n                    - kinesis:GetRecords\n                  Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/%FIREHOSE_STREAM_NAME%\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                    - lambda:GetFunctionConfiguration\n                  Resource:\n                    - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%\n                    - \"#{FirehoseLambdaFunction.Arn}\"\n\n    FirehoseStream:\n      Type: AWS::KinesisFirehose::DeliveryStream\n      Properties:\n        DeliveryStreamType: DirectPut\n        ExtendedS3DestinationConfiguration:\n          BucketARN:\n            Fn::GetAtt: [S3Bucket, Arn]\n          BufferingHints:\n            IntervalInSeconds: 60\n            SizeInMBs: 5\n          CloudWatchLoggingOptions:\n            Enabled: false\n          CompressionFormat: GZIP\n          Prefix: \"\"\n          RoleARN: \n            Fn::GetAtt: [FirehoseDeliveryIamRole, Arn]\n          ProcessingConfiguration:\n            Enabled: true\n            Processors:\n              - Type: Lambda\n                Parameters:\n                  - ParameterName: LambdaArn\n                    ParameterValue: \n                      Fn::GetAtt: [FirehoseLambdaFunction, Arn]\n\n    SnsTopic:\n      Type: AWS::SNS::Topic      \n      Properties: \n        DisplayName: lambda-powertools-demo\n        TopicName: lambda-powertools-demo\n\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        BillingMode: PAY_PER_REQUEST\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: Id\n            AttributeType: S\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n"]},{"id":116552009,"files":["service: static-file-handler-demo-proxy\n\nplugins:\n  - serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n","service: static-file-handler-demo-offline\n\nplugins:\n  - serverless-offline\n  - serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n","service: static-file-handler-test-basic\n\nplugins:\n  - serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n"]},{"id":89182558,"files":["service: realworld\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  environment:\n    DYNAMODB_NAMESPACE: ${opt:stage, \"dev\"}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\npackage:\n  exclude:\n    - test/**\n    - coverage/**\n    - lambda-node-logo.png\n    - .nyc_output/**\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nfunctions:\n\n  ## Users API\n  createUser:\n    handler: src/User.create\n    events:\n      - http:\n          method: POST\n          path: /api/users\n          cors: true\n\n  loginUser:\n    handler: src/User.login\n    events:\n      - http:\n          method: POST\n          path: /api/users/login\n          cors: true\n\n  getUser:\n    handler: src/User.get\n    events:\n      - http:\n          method: GET\n          path: /api/user\n          cors: true\n\n  updateUser:\n    handler: src/User.update\n    events:\n      - http:\n          method: PUT\n          path: /api/user\n          cors: true\n\n  getProfile:\n    handler: src/User.getProfile\n    events:\n      - http:\n          method: GET\n          path: /api/profiles/{username}\n          cors: true\n\n  followUser:\n    handler: src/User.follow\n    events:\n      - http:\n          method: POST\n          path: /api/profiles/{username}/follow\n          cors: true\n\n  unfollowUser:\n    handler: src/User.follow\n    events:\n      - http:\n          method: DELETE\n          path: /api/profiles/{username}/follow\n          cors: true\n\n  ## Articles API\n  createArticle:\n    handler: src/Article.create\n    events:\n      - http:\n          method: POST\n          path: /api/articles\n          cors: true\n\n  getArticle:\n    handler: src/Article.get\n    events:\n      - http:\n          method: GET\n          path: /api/articles/{slug}\n          cors: true\n\n  udpateArticle:\n    handler: src/Article.update\n    events:\n      - http:\n          method: PUT\n          path: /api/articles/{slug}\n          cors: true\n\n  deleteArticle:\n    handler: src/Article.delete\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}\n          cors: true\n\n  favoriteArticle:\n    handler: src/Article.favorite\n    events:\n      - http:\n          method: POST\n          path: /api/articles/{slug}/favorite\n          cors: true\n\n  unfavoriteArticle:\n    handler: src/Article.favorite\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}/favorite\n          cors: true\n\n  listArticles:\n    handler: src/Article.list\n    events:\n      - http:\n          method: GET\n          path: /api/articles\n          cors: true\n\n  getArticlesFeed:\n    handler: src/Article.getFeed\n    events:\n      - http:\n          method: GET\n          path: /api/articles/feed\n          cors: true\n\n  getTags:\n    handler: src/Article.getTags\n    events:\n      - http:\n          method: GET\n          path: /api/tags\n          cors: true\n\n  ## Comments API\n  createComment:\n    handler: src/Comment.create\n    events:\n      - http:\n          method: POST\n          path: /api/articles/{slug}/comments\n          cors: true\n\n  getComments:\n    handler: src/Comment.get\n    events:\n      - http:\n          method: GET\n          path: /api/articles/{slug}/comments\n          cors: true\n\n  deleteComment:\n    handler: src/Comment.delete\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}/comments/{id}\n          cors: true\n\n  ## Utils API\n  ping:\n    handler: src/Util.ping\n    events:\n      - http:\n          method: GET\n          path: /api/ping\n          cors: true\n\n  purgeData:\n    handler: src/Util.purgeData\n    events:\n      - http: DELETE /api/__TESTUTILS__/purge\n\nresources:\n  Resources:\n\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: username\n            AttributeType: S\n          -\n            AttributeName: email\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users\n        GlobalSecondaryIndexes:\n          -\n            IndexName: email\n            KeySchema:\n              -\n                AttributeName: email\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n    ArticlesDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: slug\n            AttributeType: S\n          -\n            AttributeName: dummy\n            AttributeType: S\n          -\n            AttributeName: updatedAt\n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles\n        GlobalSecondaryIndexes:\n          -\n            IndexName: updatedAt\n            KeySchema:\n              -\n                AttributeName: dummy\n                KeyType: HASH\n              -\n                AttributeName: updatedAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n    CommentsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n          -\n            AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments\n        GlobalSecondaryIndexes:\n          -\n            IndexName: article\n            KeySchema:\n              -\n                AttributeName: slug\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":117262830,"files":["service: canary-deployments-test\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - codedeploy:*\n      Resource:\n        - \"*\"\nplugins:\n  - serverless-plugin-aws-alerts\n  - serverless-plugin-canary-deployments\n\ncustom:\n  alerts:\n    dashboards: false\n  deploymentSettings:\n    stages:\n      - dev\n      - prod\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - StreamsTestTable\n              - StreamArn\n      - sns: snsTopic\n      - sns:\n          topicName: fooTopic\n          displayName: fooTopic\n          filterPolicy:\n            eventType:\n              - FooEvent\n      - schedule:\n          rate: rate(1 minute)\n          enabled: false\n      - cloudwatchLog: \"/aws/lambda/sls-wshop-dev-hello\"\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - MyQueue\n              - Arn\n      - iot:\n          sql: \"SELECT * FROM 'some_topic'\"\n    alarms:\n      - name: foo\n        namespace: 'AWS/Lambda'\n        metric: Errors\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanOrEqualToThreshold\n    deploymentSettings:\n      type: Linear10PercentEvery1Minute\n      alias: Live\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      alarms:\n        - HelloFooAlarm\n  preHook:\n    handler: hooks.pre\n  postHook:\n    handler: hooks.post\n\nresources:\n  Resources:\n    StreamsTestTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: StreamsTestTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    MyQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        DelaySeconds: 0\n        VisibilityTimeout: 120"]},{"id":73526083,"files":["service: replicator\n\ncustom:\n  inputBucket: input-bucket-12345 # Change to unique name\n  outputBucket: output-bucket-12345 # Change to unique name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.outputBucket}/*\"\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:GetObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.inputBucket}/*\"\n\nfunctions:\n  replicate:\n    handler: handler.replicate\n    environment:\n      OUTPUT_BUCKET: ${self:custom.outputBucket}\n    events:\n      - s3: ${self:custom.inputBucket}\n\nresources:\n  Resources:\n    S3BucketOutputs:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.outputBucket}\n","service: aws-lambda-and-heroku-postgres # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello\n      - http: POST onrelease","service: aws-java-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: java8\n  \npackage:\n  artifact: build/distributions/aws-java-simple-http-endpoint.zip\n\nfunctions:\n  currentTime:\n    handler: com.serverless.Handler\n    events:\n      - http:\n          path: ping\n          method: get\n","service: hellotime-app\nprovider:\n  name: aws\n\nfunctions:\n  hello:\n    runtime: python3.6\n    events:\n      - http:\n          method: get\n          path: greet\n    handler: web/handler.hello\n  time:\n    runtime: nodejs6.10\n    events:\n      - http:\n          method: get\n          path: time\n    handler: api/handler.timestamp\n","service: serverless-dynamodb-backup\n\ncustom:\n  bucket: EXAMPLE\n  dynamoDBTableName: \"${opt:stage, self:provider.stage}_EXAMPLE\"\n  prefix: FOO\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: staging\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/${self:custom.prefix}/${self:custom.dynamoDBTableName}/*\"\n    - Effect: Allow\n      Action:\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:ListStreams\"\n      Resource: \"arn:aws:dynamodb:ap-southeast-1:*:table/${self:custom.dynamoDBTableName}/stream/*\"\n\nfunctions:\n  backup:\n    handler: handler.backup\n    environment:\n      STAGE: \"${opt:stage, self:provider.stage}\"\n      BUCKET: \"${self:custom.bucket}\"\n      TABLE: \"${self:custom.dynamoDBTableName}\"\n      PREFIX: \"${self:custom.prefix}\"\n    timeout: 300\n","service: rekognition-analysis-s3-image\n\nframeworkVersion: \">=1.10.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"   \n\nfunctions:\n  imageAnalysis:\n    handler: handler.imageAnalysis\n    events:\n      - http:\n          path: analysis\n          method: post    \n","service: aws-node-rest-api-mongodb\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n\n  updateUser:\n    handler: handler.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n\n  deleteUser:\n    handler: handler.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\n\n  user:\n    handler: handler.user\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-node-stripe-integration\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"lambda:InvokeAsync\"\n#        - \"lambda:InvokeFunction\"\n#      Resource: \n#        - \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - config/**\n    - node_modules/**\n  exclude:\n    - package.json\n\nfunctions:\n  incoming:\n    handler: handler.incoming\n    events:\n      - http:\n          path: stripe/incoming\n          method: post","service: sls-typescript-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-python-alexa-skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  luckyNumber:\n    handler: handler.lucky_number\n    events:\n      - alexaSkill\n","service: aws-python-pynamodb-s3-sigurl\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-python-requirements\n\npackage:\n  exclude:\n    - node_modules/**\n    - .idea/**\n    - .requirements/**\n    - env/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - requirements.txt\n\n# DRY constants: define all compound/generated names in one place\n# Override args are: .. defaults:\n# --app_acroym          signed-uploader\n# --s3_bucket           self:custom.app_acronym\n# --s3_key_base         self:custom.stage\n# --region              us-east-1\n# --stage               test\n# --deletion_policy     delete\ncustom:\n  app_acronym: sig-s3-uploader\n  default_stage: test\n  stage: ${opt:stage, self:custom.default_stage}\n  stack_name: ${self:custom.app_acronym}-${self:custom.stage}\n  region: ${opt:region, self:provider.region}\n  deletion_policy: Delete\n  dynamodb_table: ${self:custom.stack_name}\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com\n  # Default to using app_acronym as bucket name\n  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}\n  # default to using ${stage} as key base path, keeps stages from namespace collisions\n  s3_key_base: ${opt:s3_key_base, self:custom.stage}\n  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}\n  s3_role_resource: ${self:custom.s3_bucket_arn}/${self:custom.s3_key_base}/*\n  # Put this here rather than in code (presigned URL TTL)\n  url_default_ttl: 60\n\nprovider:\n  name: aws\n  runtime: python3.6\n  region: us-east-1\n  environment:\n    DYNAMODB_TABLE: ${self:custom.dynamodb_table}\n    DYNAMODB_HOST: ${self:custom.dynamodb_host}\n    REGION: ${self:custom.region}\n    S3_BUCKET: ${self:custom.s3_bucket}\n    S3_KEY_BASE: ${self:custom.s3_key_base}\n    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource: ${self:custom.dynamodb_arn}\n\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: ${self:custom.s3_role_resource}\n\nfunctions:\n  create:\n    name: ${self:custom.stack_name}-create\n    description: Generate a presigned URL for PUT upload\n    handler: asset/create.create\n    events:\n      - http:\n          path: asset\n          method: post\n          cors: true\n          integration: lambda\n\n  bucket:\n    handler: asset/bucket.event\n    name: ${self:custom.stack_name}-bucket\n    description: Called by s3 create/remove events to manage asset state in dynamo\n    events:\n      - s3:\n          bucket: ${self:custom.s3_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.s3_key_base}\n      - s3:\n          bucket: ${self:custom.s3_bucket}\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: ${self:custom.s3_key_base}\n\n  list:\n    handler: asset/list.asset_list\n    name: ${self:custom.stack_name}-list\n    description: List all assets\n    events:\n      - http:\n          path: asset\n          method: get\n          cors: true\n          integration: lambda\n\n  get:\n    handler: asset/get.get\n    name: ${self:custom.stack_name}-get\n    description: Get a presigned download url for <asset-id>\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n              parameters:\n                 paths:\n                   timeout: true\n  update:\n    handler: asset/update.update\n    name: ${self:custom.stack_name}-update\n    description: Mark an RECEIVED asset as UPLOADED, fail if not RECEIVED\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: put\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n  delete:\n    handler: asset/delete.delete\n    name: ${self:custom.stack_name}-delete\n    description: Delete an asset by <asset-id>\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n\nresources:\n  Resources:\n\n# Comment assetDynamoDbTable if using existing table\n    assetDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: ${self:custom.deletion_policy}\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: asset_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: asset_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.dynamodb_table}\n","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: serverless-rest-api-with-faunadb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - venv/**\n\nplugins:\n  - serverless-python-requirements\n\nprovider:\n  name: aws\n  runtime: python2.7\n  region: us-east-1\n  stage: dev\n  environment:\n    FAUNADB_SECRET: YOUR-SECRET-HERE\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\n  schema:\n    handler: todos/schema.schema\n","service: serverless-rest-api-with-pynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-python-requirements\n\npackage:\n  exclude:\n    - node_modules/**\n    - .idea/**\n    - .requirements/**\n    - env/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - requirements.txt\n\nprovider:\n  name: aws\n  runtime: python2.7\n  region: eu-central-1\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.todo_list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: put\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: todo_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: todo_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-python-scheduled-cron\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n  secondCron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every 2nd minute from Mon-Fri\n      - schedule: cron(0/2 * ? * MON-FRI *)\n","service: serverless-telegram-bot\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: ckl\n  environment:\n    TELEGRAM_TOKEN: ${file(./serverless.env.yml):TELEGRAM_TOKEN, ''}\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http: POST /\n\n  set_webhook:\n    handler: handler.set_webhook\n    events:\n      - http: POST /set_webhook\n\nplugins:\n  - serverless-python-requirements\n","service: azfx-node-http\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  hello:\n     handler: handler.hello\n     events:\n       - http: true\n         x-azure-settings:\n           authLevel: anonymous\n","service: node-simple-http-endpoint # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project-1234\n  credentials: ~/.gcloud/keyfile.json # path must be absolute\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","service: go-service\n\nprovider:\n  name: openwhisk\n  runtime: binary \n\nfunctions:\n  greeting:\n    handler: handler\n\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: testing\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  location_from_address:\n    handler: handler.locationFromAddress\n  sunrise_sunset:\n    handler: handler.sunriseSunset\n  jq:\n    handler: jamesthomas/openwhisk-jq\n    runtime: docker\n    parameters: \n      jq: '.results[0].geometry.location'\n  location_sunrise_sunset:\n    sequence: \n      - location_from_address\n      - jq\n      - sunrise_sunset\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  split:\n    handler: utils.split\n  reverse:\n    handler: utils.reverse\n  join:\n    handler: utils.join\n  chained_seq:\n    sequence:\n      - split\n      - reverse\n      - join\n  manual_seq:\n    handler: handler.chain\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  cron:\n    handler: handler.cron\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  time:\n    handler: handler.time\n    events:\n      - http: GET time\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  hello_world:\n    handler: hello_world.handler\n    events:\n      - trigger: event_name\n  left_pad:\n    handler: left_pad.handler\n  delay:\n    handler: delay.handler\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: php-service\n\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  greeting:\n    handler: handler.greeting\n\nplugins:\n  - serverless-openwhisk\n","service: python_service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: python-service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n\nplugins:\n  - serverless-openwhisk\n","service: python-service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  greeting:\n    handler: handler.endpoint\n\nplugins:\n  - serverless-openwhisk\n","service: swift-packages\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  hello:\n    handler: .build/release/hello\n  welcome:\n    handler: .build/release/welcome\n\ncustom:\n  scripts:\n    hooks:\n      'package:initialize': npm run-script compile\nplugins:\n  - serverless-openwhisk\n  - serverless-plugin-scripts\n","service: swift_service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  cron:\n    handler: handler.main\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: swift-service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  ping:\n    handler: ping.main\n    events:\n      - http:\n          path: ping\n          method: get\n\n\nplugins:\n  - serverless-openwhisk\n","service: swift-service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  ping:\n    handler: ping.main\n\nplugins:\n  - serverless-openwhisk\n","\nservice: aws-custom-authorizer-auth0\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment:\n    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}\n\nfunctions:\n  auth:\n    handler: handler.auth\n    cors: true\n  publicEndpoint:\n    handler: handler.publicEndpoint\n    events:\n      - http:\n          path: api/public\n          method: post\n          cors: true\n  privateEndpoint:\n    handler: handler.privateEndpoint\n    events:\n      - http:\n          path: api/private\n          method: post\n          # See custom authorizer docs here: http://bit.ly/2gXw9pO\n          authorizer: auth\n          cors: true\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n","service:\n  name: ${self:custom.serviceName}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: dev-fii\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 100\n      rateLimit: 50\n\ncustom:\n  serviceName: image-resizing\n  stage: ${opt:stage, self:custom.defaultStage}\n  bucket: dynamic-image-resizing\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  defaultStage: dev\n  stages:\n    - ${opt:stage}\n    - dev\n    - integration\n    - production\n\nfunctions:\n  resize:\n    handler: src/handlers/resizer/index.handler\n    events:\n      - http:\n          path: /{size}/{image}\n          method: get\n    environment:\n      # Provide your bucket name here\n      BUCKET: dynamic-image-resizing\n      REGION: us-east-1\n    # layers:\n    #   - {Ref: ImageLibsLambdaLayer}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:GetObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing/*\"\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:PutObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing/*\"\n\npackage:\n  exclude:\n    - layer/**\n    - node_modules/**\n    - '!node_modules/babel-runtime/**'\n    - '!node_modules/sharp/**'\n\n# layers:\n#   imageLibs:\n#     path: layer\n#     compatibleRuntimes:\n#       - nodejs8.10\n","service: websocket-authorizer-example\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n\nfunctions:\n  connect:\n    handler: handler.connect\n    events:\n      - websocket:\n          route: $connect # authorizers are only for connect routes\n          authorizer:\n            name: auth\n            identitySource:\n              - 'route.request.header.Auth'\n  default:\n    handler: handler.default\n    events:\n      - websocket:\n          route: $default\n\n  auth:\n    handler: handler.auth\n","service: aws-python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7 # or python3.7, supported as of November 2018\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n","service:\n  name: serverless-nest-example\n\nplugins:\n  - '@hewmen/serverless-plugin-typescript'  \n  - serverless-plugin-optimize\n  - serverless-offline\n  # - serverless-plugin-warmup\n\n# custom:\n#   # Enable warmup on all functions (only for production and staging)\n#   warmup:      \n#       - production\n#       - staging\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  individually: true\n\nfunctions:\n  main:\n    handler: src/main.handler\n    events:\n      - http:\n          method: any\n          path: /{proxy+}\n","service: shared-gateway\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\nresources:\n  Resources:\n    SharedGW:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: SharedGW\n  Outputs:\n    apiGatewayRestApiId:\n      Value:\n        Ref: SharedGW\n      Export:\n        Name: SharedGW-restApiId\n    apiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt:\n          - SharedGW\n          - RootResourceId\n      Export:\n        Name: SharedGW-rootResourceId\n","service: eshop-products\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-products:\n    handler: handler.getProducts\n    events:\n      - http:\n          path: products/list\n          method: get\n","service: eshop-transactions\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-transactions:\n    handler: handler.getTransactions\n    events:\n      - http:\n          path: transactions/list\n          method: get\n","service: eshop-users\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-users:\n    handler: handler.getUsers\n    events:\n      - http:\n          path: users/list\n          method: get\n","service: fetch-file-and-store-in-s3\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: <your-bucket-name>\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  save:\n    handler: handler.save\n    environment:\n      BUCKET: ${self:custom.bucket}\n","service: aws-golang-dynamo-stream-to-elasticsearch\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    ELASTICSEARCH_URL:\n      Fn::GetAtt: [\"PuppySearch\", \"DomainEndpoint\"]\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'dynamodb:ListTables'\n        - 'dynamodb:DescribeTable'\n        - 'dynamodb:DescribeStream'\n        - 'dynamodb:ListStreams'\n        - 'dynamodb:GetShardIterator'\n        - 'dynamodb:BatchGetItem'\n        - 'dynamodb:GetItem'\n        - 'dynamodb:Query'\n        - 'dynamodb:Scan'\n        - 'dynamodb:DescribeReservedCapacity'\n        - 'dynamodb:DescribeReservedCapacityOfferings'\n        - 'dynamodb:GetRecords'\n      Resource:\n        - { \"Fn::GetAtt\": [\"PuppyDemo\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - es:ESHttpPost\n        - es:ESHttpPut\n        - es:ESHttpDelete\n        - es:ESHttpGet\n      Resource:\n        - { \"Fn::GetAtt\": [\"PuppySearch\", \"DomainArn\"] }\n        - { \"Fn::Join\": [\"\", [\"Fn::GetAtt\": [\"PuppySearch\", \"DomainArn\"], \"/*\"]] }\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  aws-golang-dynamo-stream-to-elasticsearch:\n    name: aws-golang-dynamo-stream-to-elasticsearch\n    handler: bin/aws-golang-dynamo-stream-to-elasticsearch\n    memorySize: 128\n    timeout: 60\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 100\n          enabled: true\n          arn: { \"Fn::GetAtt\": [\"PuppyDemo\", \"StreamArn\"] }\n\nresources:\n  Resources:\n    PuppyDemo:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: puppies\n    PuppySearch:\n      Type: \"AWS::Elasticsearch::Domain\"\n      Properties:\n        ElasticsearchVersion: \"6.3\"\n        DomainName: \"puppy-search\"\n        ElasticsearchClusterConfig:\n          DedicatedMasterEnabled: false\n          InstanceCount: \"1\"\n          ZoneAwarenessEnabled: false\n          InstanceType: \"t2.small.elasticsearch\"\n        EBSOptions:\n          EBSEnabled: true\n          Iops: 0\n          VolumeSize: 10\n          VolumeType: \"gp2\"\n\n        ## Attention! Before you enable this lines, check out the README to avoid an open access policy\n        # AccessPolicies:\n        #   Version: \"2012-10-17\"\n        #   Statement:\n        #     -\n        #       Effect: \"Allow\"\n        #       Principal:\n        #         AWS: \"*\"\n        #       Action: \"es:*\"\n        #       Resource: \"*\"\n        AdvancedOptions:\n          rest.action.multi.allow_explicit_index: \"true\"\n\n","\nservice: aws-custom-authorizer-auth0\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - vendored/**\n    - lambda_handlers.py\n\nprovider:\n  name: aws\n  runtime: python3.6\n  region: us-east-1\n  environment:\n    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}\n    PYTHONPATH: \"/var/runtime:/var/task/vendored\"\n\nfunctions:\n  auth:\n    handler: lambda_handlers.auth\n    cors: true\n  publicEndpoint:\n    handler: lambda_handlers.public_endpoint\n    events:\n      - http:\n          path: api/public\n          method: post\n          cors: true\n  privateEndpoint:\n    handler: lambda_handlers.private_endpoint\n    events:\n      - http:\n          path: api/private\n          method: post\n          # See custom authorizer docs here: http://bit.ly/2gXw9pO\n          authorizer: auth\n          cors: true\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n","service: dropbox\nprovider:\n  profile: personal\n  runtime: nodejs6.10\n  name: aws\n  region: ap-south-1\n  timeout: 60\n  stage: ${opt:stage}\n  environment:\n    CLIENT_SECRET: ${file(./config/${self:provider.stage}.yml):CLIENT_SECRET}\n    CLIENT_ID: ${file(./config/${self:provider.stage}.yml):CLIENT_ID}\n    STAGE: ${file(./config/${opt:stage}.yml):STAGE}\n    CALLBACK_URL: ${file(./config/${self:provider.stage}.yml):CALLBACK_URL}\n    \nplugins:\n  - serverless-offline\n  - serverless-plugin-optimize\ncustom:\n  serverless-offline:\n    port: 9999\n    host: 0.0.0.0\n    babelOptions:\n      presets: [\"es2015\", \"latest\"]\n  optimize:\n    minify: true\n\n\nfunctions:\n  dropbox_step1:\n    handler: dropbox/handler.step1\n    events:\n      - http:\n          method: get\n          path: dropbox\n          cors: true\n          \n  dropbox_step2:\n    handler: dropbox/handler.step2\n    events:\n      - http:\n          method: get\n          path: dropbox/callback\n          cors: true","service: graphql-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n\nresources:\n  Resources:\n    NicknamesTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: firstName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: firstName\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: gcp-node-typescript-simple # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: gcp-node-typescript-simple\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  include:\n    - ./src/App.ts\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: aws-golang-kinesis-to-elasticsearch\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    ELASTICSEARCH_HOST: my.elastic.host\n    ELASTICSEARCH_SCHEMA: http\n\nfunctions:\n  streamer:\n    handler: bin/stream\n    events:\n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:<region>:<accountID>:stream/<streamname>\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n","service: aws-golang-simple-http-endpoint\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n","service: baddadjokesbot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-west-1'}\n\ncustom:\n  env: ${file(./${self:provider.stage}.env.json)}\n\nfunctions:\n  bot:\n    handler: handler.bot\n    events:\n      - schedule: rate(5 hours)\n    environment:\n      JOKES_API_URL: ${self:custom.env.JOKES_API_URL}\n      TWITTER_CONSUMER_KEY: ${self:custom.env.TWITTER_CONSUMER_KEY}\n      TWITTER_CONSUMER_SECRET: ${self:custom.env.TWITTER_CONSUMER_SECRET}\n      TWITTER_ACCESS_TOKEN_KEY: ${self:custom.env.TWITTER_ACCESS_TOKEN_KEY}\n      TWITTER_ACCESS_TOKEN_SECRET: ${self:custom.env.TWITTER_ACCESS_TOKEN_SECRET}\n","service: ruby-service\n\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  greeting:\n    handler: handler.main\n\nplugins:\n  - serverless-openwhisk\n","service: serverless-ruby-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\nfunctions:\n  current_time:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get","service: serverless-gong\nframeworkVersion: '>=1.4.0 <2.0.0'\nprovider:\n  name: aws\n  runtime: nodejs8.10\nfunctions:\n  handleGong:\n    handler: handler.gongHandler\n    description:\n      Fn::Sub:\n        - 'Stackery Stack #{StackeryStackTagName} Environment #{StackeryEnvironmentTagName} Function #{ResourceName}'\n        - ResourceName: handleGong\n    events:\n      - http:\n          path: /webhook\n          method: POST\n    environment:\n      GITHUB_WEBHOOK_SECRET:\n        Ref: StackeryEnvConfiggithubSecretAsString\n      SLACK_WEBHOOK_URL:\n        Ref: StackeryEnvConfigslackWebhookURLAsString\nresources:\n  Parameters:\n    StackeryStackTagName:\n      Type: String\n      Description: Stack Name (injected by Stackery at deployment time)\n      Default: serverless-gong\n    StackeryEnvironmentTagName:\n      Type: String\n      Description: Environment Name (injected by Stackery at deployment time)\n      Default: dev\n    StackeryEnvConfiggithubSecretAsString:\n      Type: AWS::SSM::Parameter::Value<String>\n      Default: /Stackery/Environments/<StackeryEnvId>/Config/githubSecret\n    StackeryEnvConfigslackWebhookURLAsString:\n      Type: AWS::SSM::Parameter::Value<String>\n      Default: /Stackery/Environments/<StackeryEnvId>/Config/slackWebhookURL\n  Metadata:\n    StackeryEnvConfigParameters:\n      StackeryEnvConfiggithubSecretAsString: githubSecret\n      StackeryEnvConfigslackWebhookURLAsString: slackWebhookURL\nplugins:\n  - serverless-cf-vars","service: python-hello\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: python-clock\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  clock:\n    handler: handler.printClock\n    events:\n      - schedule: '* * * * *'\n","service: hello-world\n\nprovider:\n  name: aws\n  runtime: go1.x\n  region: eu-west-1\n  memorySize: 128\n\npackage:\n  exclude:\n  - ./**\n  include:\n  - ./bin/**\n\nfunctions:\n  authorize:\n    handler: bin/auth\n  authorize2:\n    handler: bin/auth2\n  hello-world:\n    handler: bin/hello-world\n    events:\n    - http:\n        path: /hello\n        method: get\n    - http:\n        path: /\n        method: get\n        authorizer:\n          name: authorize\n          resultTtlInSeconds: 0\n  hello-world2:\n    handler: bin/hello-world2\n    events:\n    - http:\n        path: me\n        method: get\n        authorizer:\n          name: authorize2\n          resultTtlInSeconds: 0\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: goservice # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  get:\n    handler: bin/getBin\n    events:\n      - http:\n          path: get/{name}\n          method: get\n          request:\n            parameter:\n              paths:\n                name: true\n  getquery:\n    handler: bin/getQueryBin\n    events:\n      - http:\n          path: getQ\n          method: get\n          request:\n            parameters:\n              querystrings:\n                name: true\n  post:\n    handler: bin/postBin\n    events:\n      - http:\n          path: post\n          method: post\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: aws-node-singned-uploads\n\nplugins:\n  - serverless-webpack\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  bucketName: testbucket123notaken\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'yarn'\n  serverless-offline:\n    port: 4000\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, env:AWS_STAGE, 'dev'}\n  region: ${opt:region, env:AWS_REGION, 'eu-central-1'}\n  environment:\n    REGION: ${self:provider.region}\n    BUCKET: { Ref: Uploads }\n  versionFunctions: false\n  iamRoleStatements:\n  -  Effect: \"Allow\"\n     Action:\n       - \"s3:*\"\n     Resource: \"*\"\n\nfunctions:\n  upsert-objects:\n    handler: src/upload.handler\n    name: ${self:provider.stage}-${self:service}-upload\n    memorySize: 128\n    events:\n      - http:\n          path: upload\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    Uploads:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucketName}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - \"Authorization\"\n              AllowedMethods:\n                - GET\n              AllowedOrigins:\n                - \"*\"\n            - AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n","service: aws-node-alexa-skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  luckyNumber:\n    handler: handler.luckyNumber\n    events:\n      - alexaSkill\n","\nservice: aws-node-auth0-cognito-custom-authorizers-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  publicEndpoint:\n    handler: handler.publicEndpoint\n    events:\n      - http:\n          path: api/public\n          method: get\n          integration: lambda\n          cors: true\n  auth:\n    handler: auth.authorize\n  privateEndpoint:\n    handler: handler.privateEndpoint\n    events:\n      - http:\n          path: api/private\n          method: get\n          authorizer: auth\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n","service: env-variables-encrypted-in-a-file\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-secrets-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nfunctions:\n  resetPassword:\n    handler: handler.resetPassword\n    environment:\n      SESSION_KEY: ${self:custom.secrets.SESSION_KEY}\n      EMAIL_SERVICE_API_KEY: ${self:custom.secrets.EMAIL_SERVICE_API_KEY}\n","service: function-with-environment-variables\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    EMAIL_SERVICE_API_KEY: KEYEXAMPLE1234\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    environment:\n      PASSWORD_ITERATIONS: 4096\n      PASSWORD_DERIVED_KEY_LENGTH: 256\n\n  resetPassword:\n    handler: handler.resetPassword\n","service: function-compiled-with-babel\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  babelPresets:\n    - latest\n\nplugins:\n  - serverless-babel-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: github-webhook-listener\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    GITHUB_WEBHOOK_SECRET: REPLACE-WITH-YOUR-SECRET-HERE\n\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n","service: aws-node-iot-event\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  log:\n    handler: handler.log\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'mybutton'\"\n","\nservice: recursive-invocation-example\n\ncustom:\n  functionARN: yourFunctionARN\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n#  iamRoleStatements:\n#    -  Effect: \"Allow\"\n#       Action:\n#         - \"lambda:InvokeFunction\"\n#       Resource: ${self:custom.functionARN}\n\nfunctions:\n  recursiveExample:\n    handler: handler.recursiveLambda","service: scheduled-cron-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n  secondCron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every 2nd minute from Mon-Fri\n      - schedule: cron(0/2 * ? * MON-FRI *)\n","service: scheduled-weather-example\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    RECIPIENT: tom@carrotcreative.com\n    DARK_SKY_API_KEY: abc123\n    POSTMARK_API_KEY: abc123\n    POSTMARK_SENDER: devops@carrotcreative.com\n    LATITUDE: 40.702637\n    LONGITUDE: -73.989406\n\nfunctions:\n  weather:\n    handler: handler.run\n    memorySize: 128\n    timeout: 5\n    events:\n        # 10am UTC, daily\n      - schedule: cron(0 10 * * ? *)\n","# Serving HTML through API Gateway for AWS Lambda\nservice: serve-dynamic-html-via-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  landingPage:\n    handler: handler.landingPage\n    events:\n      - http:\n          method: get\n          path: landing-page\n","service: serverless-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n","service: single-page-app-via-cloudfront7\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: yourBucketName123\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n","service: text-analysis-via-sns-post-processing\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  addNote:\n    handler: addNote.addNote\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n\n  analyzeNote:\n    handler: analyzeNote.analyzeNote\n    events:\n      - sns: analyzeNote\n","service: aws-node-twilio\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    # replace these env variables with your twilio account values\n    TWILIO_ACCOUNT_SID: YOUR-TWILIO-ACCOUNT-SID-HERE\n    TWILIO_AUTH_TOKEN: YOUR-TWILIO-AUTH-TOKEN-HERE\n    TWILIO_PHONE_NUMBER: YOUR-TWILIO-PHONE-NUMBER-HERE\n\npackage:\n  exclude:\n    - \"*.test.js\"\n    - 'node_modules/**'\n    - '!node_modules/twilio/**'\n    - 'frontend/**'\n\nfunctions:\n  sendText:\n    handler: handler.sendText\n    events:\n      - http:\n          path: api/sendText\n          method: post\n          integration: lambda\n          cors: true\n","service: upload-to-s3-and-postprocess\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: <your-bucket-name>\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  postprocess:\n    handler: handler.postprocess\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .png\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-telegram-bot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n","service: python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nplugins:\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google\n  runtime: python37\n  project: <projectnamehere-1234>\n  credentials: ~/.gcloud/keyfile.json # path must be absolute\n\nfunctions:\n  currentTime:\n    handler: endpoint\n    events:\n      - http: path\n","service: gifmaker\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  mkgif:\n    handler: handler.mkgif\n    events:\n      - s3: ${self:custom.bucket}\n    layers:\n      - {Ref: FfmpegLambdaLayer}\n\nlayers:\n  ffmpeg:\n    path: layer\n\ncustom:\n  bucket: ${env:BUCKET, 'ffmpeg-layer-gif-maker'}\n","\nservice: ${file(env.configs.yml):feature}\n\nframeworkVersion: \">=1.6.0 <2.1.0\"\n\nprovider:\n  name: aws\n  stackName: ${file(env.configs.yml):feature}-${file(env.configs.yml):environment}\n  runtime: dotnetcore2.1\n  region: ${file(env.configs.yml):region}\n  accountId: ${file(env.configs.yml):accountId}\n  environment:\n    DynamoDbConfiguration__TableName: ${file(env.configs.yml):dynamoTable}\n    \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DynamoDbConfiguration__TableName}\"\n\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n  \nfunctions:\n  create:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.CreateItemFunction::Run\n    events:\n      - http:\n          path: items\n          method: post\n          cors: true\n\n  get:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.GetItemFunction::Run\n    events:\n      - http:\n          path: items/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.UpdateItemFunction::Run\n    events:\n      - http:\n          path: items\n          method: put\n          cors: true\n\nresources:\n  Resources:\n    ItemsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: Id\n            AttributeType: S\n          - AttributeName: Code\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n          - AttributeName: Code\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DynamoDbConfiguration__TableName}\n        \n","service: golang-simple-http-endpoint\n\nframeworkVersion: \">=1.33.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n# https://serverless.com/framework/docs/providers/google/guide/credentials/\n#\n# NOTE: the golang runtime is currently in alpha state, you must have access from google to use the alpha toolchain\nprovider:\n  name: google\n  runtime: go111                           # currently both vendored and go.mod repos are supported\n  project: sborza-91                    # replace with your project name here\n  credentials: ~/.gcloud/slsframework.json # path must be absolute, change to whichever keyfile you need\n\nfunctions:\n  hello:\n    handler: Hello\n    events:\n      - http: path\n","service: my-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello","service: serverless-side-rendering-vue-nuxt\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\nplugins:\n  - serverless-apigw-binary\n  # - serverless-domain-manager\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  # customDomain:\n  #   domainName: ${self:custom.secrets.DOMAIN}\n  #   basePath: ''\n  #   stage: ${self:custom.secrets.NODE_ENV}\n  #   createRoute53Record: true\n    ## endpointType: 'regional'\n    ## if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`","service: aws-node-simple-transcribe-s3\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    S3_AUDIO_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-records\n    S3_TRANSCRIPTION_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-transcriptions\n    LANGUAGE_CODE: en-US\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - 'arn:aws:s3:::${self:provider.environment.S3_AUDIO_BUCKET}/*'\n        - 'arn:aws:s3:::${self:provider.environment.S3_TRANSCRIPTION_BUCKET}/*'\n    - Effect: Allow\n      Action:\n        - transcribe:StartTranscriptionJob\n      Resource: '*'\n\nfunctions:\n  transcribe:\n    handler: handler.transcribe\n    events:\n      - s3:\n          bucket: ${self:provider.environment.S3_AUDIO_BUCKET}\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3TranscriptionBucket:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:provider.environment.S3_TRANSCRIPTION_BUCKET}\n","service: aws-node-ses-receive-email-body\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: sesreceiveemailbody\n  bucketRef: S3BucketSesreceiveemailbody\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  postprocess:\n    handler: handler.postprocess\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3EMailBucketPermissions:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: \n          Ref: ${self:custom.bucketRef}\n        PolicyDocument:\n          Statement:\n            - Principal: \n                Service: \"ses.amazonaws.com\"\n              Action:\n                - s3:PutObject\n              Effect: Allow\n              Sid: \"AllowSESPuts\"\n              Resource: \n                Fn::Join: ['', ['arn:aws:s3:::', Ref: \"${self:custom.bucketRef}\", '/*'] ]\n              Condition:\n                StringEquals:\n                  \"aws:Referer\": { Ref: AWS::AccountId }","service: aws-node-ses-receive-email-header\n\nframeworkVersion: \">=1.1.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\nfunctions:\n  processheader:\n    handler: handler.processheader\n  processacceptreject:\n    handler: handler.processacceptreject\n\nresources:\n  Resources:\n    GiveSESPermissionToInvokeProcessheaderLambdaFunction:\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName: { \"Fn::GetAtt\": [ \"ProcessheaderLambdaFunction\", \"Arn\" ] }\n        Principal: ses.amazonaws.com\n        Action: 'lambda:InvokeFunction'\n        SourceAccount: { Ref: AWS::AccountId }\n    GiveSESPermissionToInvokeProcessacceptrejectLambdaFunction:\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName: { \"Fn::GetAtt\": [ \"ProcessacceptrejectLambdaFunction\", \"Arn\" ] }\n        Principal: ses.amazonaws.com\n        Action: 'lambda:InvokeFunction'\n        SourceAccount: { Ref: AWS::AccountId }\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-line-bot-example\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n","service: ${file(./secrets.json):ApiName}\n\nprovider:\n  name: aws\n  region: us-east-1\n  stage: dev\n  memorySize: 256\n  runtime: nodejs8.10\n  role: LambdaRole\n  environment:\n    #aurora\n    AURORA_HOST: ${self:custom.AURORA.HOST}\n    AURORA_PORT: ${self:custom.AURORA.PORT}\n    #mysql\n    MYSQL_HOST: ${self:custom.MYSQL.HOST}\n    MYSQL_PORT: ${self:custom.MYSQL.PORT}\n    #postgresql\n    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}\n    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}\n    #common\n    DB_NAME: ${self:custom.DB_NAME}\n    USERNAME: ${self:custom.USERNAME}\n    PASSWORD: ${self:custom.PASSWORD}\ncustom:\n  DB_NAME: graphql\n  USERNAME: master\n  PASSWORD: password\n  AURORA:\n    HOST:\n      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]\n    VPC_CIDR: 10\n  MYSQL:\n    HOST:\n      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]\n  POSTGRESQL:\n    HOST:\n      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]\n\nplugins:\n  - serverless-pseudo-parameters\nresources:\n  Resources:\n    LambdaRole: ${file(./resource/LambdaRole.yml)}\n    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}\n    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}\n    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}\n    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}\n    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}\n    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}\n    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}\n    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}\n    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}\n    RoutePublic: ${file(./resource/RoutePublic.yml)}\n    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}\n    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}\n    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}\n\n    AuroraRDSClusterParameter: ${file(./resource/AuroraRDSClusterParameter.yml)}\n    AuroraRDSInstanceParameter: ${file(./resource/AuroraRDSInstanceParameter.yml)}\n    AuroraRDSCluster: ${file(./resource/AuroraRDSCluster.yml)}\n    AuroraRDSInstance: ${file(./resource/AuroraRDSInstance.yml)}\n\n    MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}\n\n    PostgreSqlRDSInstance: ${file(./resource/PostgreSqlRDSInstance.yml)}\n    \nfunctions:\n  graphql:\n    handler: handler.server\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  playground:\n    handler: handler.playground\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n    ","service: aws-python-line-echo-bot\nprovider:\n  name: aws\n  runtime: python3.7\n\nfunctions:\n  line_bot:\n    handler: handler.webhook\n    events:\n      - http:\n          path: /webhook\n          method: POST\nplugins:\n  - serverless-python-requirements\n","service: aws-ruby-line-bot\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n\nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - bundle install --deployment\n","tenant: ac360 # Enter your tenant name here\napp: enterprise # Enter your application name here\nservice: demo-email-form\n\nframeworkVersion: '>=1.38.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  # credentials: ${secrets:aws-enterprise} # Enter an AWS Secret like this, after you create it in the Dashboard.\n\nfunctions:\n  formSubmit:\n    handler: index.submit\n    events:\n      - http:\n          path: submit\n          method: post\n          cors: true\n\nplugins:\n  # - serverless-finch # If you want to deploy the front-end uncomment this and the \"custom\" object below\n\n# custom:\n  # client:\n    # bucketName: sfe-demo-email-form # If you want to deploy the front-end, change this to a universally unique AWS S3 bucket name\n    # distributionFolder: ../frontend/build\n","service: scrapper-lambda\nprovider:\n  name: aws\n  profile: <your aws profile>\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-chrome\n  \npackage:\n  exclude:\n    - node_modules/puppeteer/.local-chromium/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    memorySize: 1536MB\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: your-service # update this with your service name\n\nprovider:\n  name: twilio\n\n  # Twilio access credentials (mandatory)\n  config:\n    accountSid: ${env:TWILIO_ACCOUNT_SID}\n    authToken: ${env:TWILIO_AUTH_TOKEN}\n\n  # Twilio runtime supports several domains\n  # your functions and assets will be available under\n  # -> defaulting to 'dev'\n  environment: ${env:TWILIO_RUNTIME_ENV, 'dev'}\n\n  # Environment variables passed to your functions\n  # available in the Twilio runtim via `context` parameter\n  environmentVars:\n    MY_PHONE_NUMBER: ${env:MY_PHONE_NUMBER}\n\n# Twilio runtime has to be added as a plugin\nplugins:\n  - '@twilio-labs/serverless-twilio-runtime'\n\nfunctions:\n  # Function name\n  forward-call:\n    # Path to the JS handler function in the project (without file extension '.js')\n    handler: forward-call\n    # URL path of the function after deployment\n    path: /forward-call\n    # visibility of the function (can be \"public\" or \"protected\")\n    access: public","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-node-telegram-echo-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: gomapservice # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    GOOGLE_API_KEY: AIzaXXXX #CHANGE YOUR API KEY\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  getgeolocation:\n    handler: bin/getgeolocation\n    events:\n      - http:\n          path: geolocation\n          method: get\n          request:\n            parameters:\n              querystrings:\n                address: true\n  getnearbylocation:\n    handler: bin/getnearbylocation\n    events:\n      - http:\n          path: nearbylocation\n          method: get\n          request:\n            parameters:\n              querystrings:\n                location: true\n                radius: true\n                name: false\n                type: false\n  getgeodetail:\n    handler: bin/getgeodetail\n    events:\n      - http:\n          path: geodetail\n          method: get\n          request:\n            parameters:\n              querystrings:\n                placeid: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","Type: AWS::EC2::InternetGateway\nProperties:\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessInternetGateway\"","DependsOn: ServerlessVPC\nType: AWS::EC2::SecurityGroup\nProperties:\n  GroupDescription: SecurityGroup for Serverless Functions\n  VpcId:\n    Ref: ServerlessVPC\n  SecurityGroupIngress:\n    - IpProtocol: tcp\n      FromPort: '0'\n      ToPort: '65535'\n      CidrIp: \"0.0.0.0/0\"\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSecurityGroup\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}a\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetA\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}b\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetB\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}c\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetC\""]},{"id":171566590,"files":["service: basic-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    routes:\n      - src: post\n        path: post/{slug}\n        request:\n          parameters:\n            paths:\n              slug: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","nextApp:\n  component: \"../../\"\n","service: basic-next-serverless-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    routes:\n      - src: post\n        path: post/{slug}\n        request:\n          parameters:\n            paths:\n              slug: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: app-using-cloudfront\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: prod\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    assetsBucketName: cloudfront.example # replace with your own name\n    cloudFront: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: app-with-custom-handler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n\ncustom:\n  serverless-nextjs:\n    customHandler: ./my-lambda-handler.js\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: automatic-static-optimised-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: nested-next-config-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\ncustom:\n  serverless-nextjs:\n    nextConfigDir: ./app\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: nested-page-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: one-page-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\ncustom:\n  serverless-nextjs:\n    assetsBucketName: onepageappbucket\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: single-api-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","myNextApp:\n component: \"../../\"\n inputs:\n  domain:\n    - ${env.subdomain}\n    - ${env.domain}"]},{"id":133681780,"files":["service: DownloadThisVideo\nplugins:\n- serverless-dotenv-plugin\n- serverless-plugin-aws-alerts\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: beta\n  memorySize: 128\n  timeout: 100\n  logRetentionInDays: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        - \"Fn::Join\":\n          - ':'\n          - - \"arn:aws:sns:us-east-1\"\n            - Ref: AWS::AccountId\n            - \"newMention\"\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricData\n      Resource:\n        - \"*\"\n\n  environment:\n    TWITTER_CONSUMER_KEY: ${env:TWITTER_CONSUMER_KEY}\n    TWITTER_CONSUMER_SECRET: ${env:TWITTER_CONSUMER_SECRET}\n    TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}\n    TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}\n    TWITTER_CALLBACK_URL: ${env:TWITTER_CALLBACK_URL}\n    REDIS_HOSTNAME: ${env:REDIS_HOSTNAME}\n    REDIS_PORT: ${env:REDIS_PORT}\n    REDIS_PASSWORD: ${env:REDIS_PASSWORD}\n    TWITTER_SCREEN_NAME: ${env:TWITTER_SCREEN_NAME}\n    EXTERNAL_URL: ${env:EXTERNAL_URL}\n    FIREBASE_PROJECT_ID: ${env:FIREBASE_PROJECT_ID}\n    TOPIC_ARN:\n      \"Fn::Join\":\n      - ':'\n      -\n        - \"arn:aws:sns:us-east-1\"\n        - Ref: AWS::AccountId\n        - \"newMention\"\n\npackage:\n  include:\n  - views/**\n  exclude:\n  - \"*.md\"\n  - \"*.png\"\n  - \"*.ico\"\n  - .*\n  - .*/**\n  - awscli-bundle.zip\n  - awscli-bundle/**\n  - spec/**\n  - assets/*.png\n\nfunctions:\n  fetchTweetsToDownload:\n    handler: handler.fetchTweetsToDownload\n    events:\n    - schedule: rate(1 minute)\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 5000\n\n  retryFailedTasks:\n    handler: handler.retryFailedTasks\n\n  sendDownloadLink:\n    handler: handler.sendDownloadLink\n    events:\n    - sns: newMention\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 5000\n\n  startTwitterSignIn:\n    handler: handler.startTwitterSignIn\n    events:\n      - http:\n          path: /_/starttwittersignin\n          method: get\n\n  completeTwitterSignIn:\n    handler: handler.completeTwitterSignIn\n    events:\n      - http:\n          path: /_/completetwittersignin\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                action: false\n                fbtoken: false\n\n  page:\n    handler: handler.page\n    events:\n      - http:\n          path: /p/{page}\n          method: get\n          request:\n            parameters:\n              paths:\n                page: true\n\n  getDownloadsOrStaticFiles:\n    handler: handler.getDownloadsOrStaticFiles\n    events:\n    - http:\n        path: /{username}\n        method: get\n        request:\n          parameters:\n            paths:\n              username: true\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 2000\n\n  getHomePage:\n    handler: handler.getHomePage\n    events:\n    - http:\n        path: /\n        method: get\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 1000\n\ncustom:\n  alerts:\n    definitions:\n      functionErrors:\n        # alert if function throws an error\n        threshold: 1\n        period: 60\n        treatMissingData: notBreaching\n      functionDuration:\n        # alert if function takes more than 2 seconds too many times\n        threshold: 2000\n        period: 60\n        datapointsToAlarm: 10\n        evaluationPeriods: 30\n        treatMissingData: notBreaching\n    topics:\n      alarm:\n        topic: ${self:service}-dev-alerts-alarm\n        notifications:\n        - protocol: email\n          endpoint: shalvah.adebayo+awsalerts@gmail.com\n"]},{"id":174438690,"files":["service: my-service\n\nplugins:\n  localPath: '../../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\ncustom:\n  bundle:\n    linting: false\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: services/main/handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  default:\n    handler: handler.hello\n  hello:\n    handler: _warmup/index.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\ncustom:\n  bundle:\n    copyFiles:\n      - to: './'\n        from: 'public/*'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":176526337,"files":["name: test-table\n\ntable:\n  component: '../'\n  inputs:\n    name: test-table\n    delete: false\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n      - AttributeName: attribute1\n        AttributeType: N\n      - AttributeName: attribute2\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n      - AttributeName: attribute1\n        KeyType: RANGE\n    localSecondaryIndexes:\n      - IndexName: 'myLocalSecondaryIndex'\n        KeySchema:  \n         - AttributeName: id\n           KeyType: HASH\n         - AttributeName: attribute2\n           KeyType: RANGE\n        Projection:\n           ProjectionType: 'KEYS_ONLY'\n    globalSecondaryIndexes:\n      - IndexName: 'myGlobalSecondaryIndex'\n        KeySchema:\n         - AttributeName: attribute2\n           KeyType: HASH\n        Projection:\n           ProjectionType: 'KEYS_ONLY'\n    region: us-east-1\n"]},{"id":98077797,"files":["service: basic-example\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello\n          method: get\n","service: basic-example # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\n  environment:\n    MY_SIMPLE: \"simple value\"\n    MY_DYNAMIC: \"${self:provider.stage}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello\n          method: get\n\n  with_params:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello/{greeting}\n          method: get\n\n  with_greedy_path_params:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/greedy/{money+}\n          method: get\n\n  shorthand_path_syntax:\n    handler: handler.hello\n    events:\n      - http: GET api/shorthand\n\n  malformed_http_event:\n    handler: handler.hello\n    events:\n      - http:\n        path: note_how_path_isnt_indented_enough\n        method: get\n\n  path_with_multiple_params:\n    handler: handler.hello\n    events:\n      - http: GET api/res1/{res1ID}/res2/{res2ID}\n\n  env:\n    handler: handler.env\n    events:\n      - http:\n          path: api/env\n          method: get\n\n  postit:\n    handler: handler.postit\n    events:\n      - http:\n          path: api/postit\n          method: POST\n\n  with_querystring_params:\n    handler: handler.with_querystring_params\n    events:\n      - http:\n          path: api/with_querystring_params\n          method: get\n\n  with_querystring_params_and_pathparams:\n    handler: handler.with_querystring_params\n    events:\n      - http:\n          path: api/with_querystring_params_and_pathparams/{pathparam1}\n          method: get\n  throwWorld:\n    handler: handler.throwWorld\n    events:\n      - http:\n          path: api/throwWorld\n          method: get\n  errorWorld:\n    handler: handler.errorWorld\n    events:\n      - http:\n          path: api/errorWorld\n          method: get\n  callback:\n    handler: handler.callback\n    events:\n      - http:\n          path: api/callback\n          method: get\n"]},{"id":195235863,"files":["service: serverless-plugin-nodejs\n\ncustom:\n    lumigo:\n        token: 1234\n        nodePackageManager: npm\n        edgeHost: test.execute-api.us-west-2.amazonaws.com\n\n\nprovider:\n    name: aws\n    runtime: nodejs10.x\n    environment:\n      LUMIGO_SWITCH_OFF: \"TRUE\"\n      LUMIGO_DEBUG: \"TRUE\"\n\nfunctions:\n    hello:\n        handler: handler.hello\n\nplugins:\n    - ./../../../serverless-lumigo-plugin\n","service: serverless-plugin-python\n\ncustom:\n  lumigo:\n    token: 1234\n    enhance_print: true\n    should_report: false\n\nprovider:\n  name: aws\n  runtime: python3.7\n  environment:\n    LUMIGO_DEBUG: \"TRUE\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  - ./../../../serverless-lumigo-plugin\n  - serverless-python-requirements\n"]},{"id":55159824,"files":["service: MoonMail-v2-lists\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-aws-documentation\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${self:custom.config.REGION}\n  timeout: 300\n  environment:\n    SERVERLESS_REGION: ${self:custom.config.REGION}\n    LOG_LEVEL: ${self:custom.config.LOG_LEVEL}\n    LISTS_TABLE: ${self:custom.config.LISTS_TABLE}\n    RECIPIENTS_TABLE: ${self:custom.config.RECIPIENTS_TABLE}\n    LIST_SEGMENTS_TABLE: ${self:custom.config.LIST_SEGMENTS_TABLE}\n    ES_HOST: ${self:custom.config.ES_HOST}\n    ES_REGION: ${self:custom.config.ES_REGION}\n    LIST_RECIPIENT_STREAM_NAME: ${self:custom.resourcesPrefix}-listEventStream  \n    LIST_RECIPIENT_STREAM_NAME2: ${self:custom.resourcesPrefix}-listEventStream2 \n    IOT_ENDPOINT: ${file(./config.${self:custom.currentStage}.json):IOT_ENDPOINT}\n    GET_USER_CONTEXT_FUNCTION: ${file(./config.${self:custom.currentStage}.json):GET_USER_CONTEXT_FUNCTION}\n    ES_RECIPIENTS_INDEX_NAME: ${file(./config.${self:custom.currentStage}.json):ES_RECIPIENTS_INDEX_NAME}\n    ES_RECIPIENTS_INDEX_TYPE: ${file(./config.${self:custom.currentStage}.json):ES_RECIPIENTS_INDEX_TYPE}\n    DEAD_LETTER_QUEUE_URL:\n      Ref: ListMicroserviceDeadLetterQueue\n    RECIPIENTS_ACTIVITY_S3_BUCKET: ${file(./config.${self:custom.currentStage}.json):RECIPIENTS_ACTIVITY_S3_BUCKET}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n        - \"lambda:*\"\n        - \"kinesis:*\"\n        - \"firehorse:*\"\n        - \"s3:*\"\n        - \"sqs:*\"\n        - \"logs:*\"\n        - \"iot:*\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n        - \"ec2:DeleteNetworkInterface\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  recipientsBucket: next-recipients.moonmail.${self:custom.currentStage}.${self:provider.region}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  recipientsTableStreamArn: ${self:custom.config.RECIPIENTS_TABLE_STREAM_ARN}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  customDomain:\n    domainName: ${self:custom.config.CUSTOM_API_HOST}\n    certificateName: ${self:custom.config.ACM_CERTIFICATE_NAME}\n    basePath: 'lists'\n    stage: prod\n    createRoute53Record: false\n  documentation:\n    api:\n      info:\n        version: '2'\n        title: MoonMail API\n        description: >\n          Welcome to the MoonMail API reference, which lets you easily inject, repair and burn\n          off recipients and metafields from your space.\n\n          The MoonMail API is organized around the REST methodology. It uses resource-oriented\n          URLs, and common HTTP response codes to indicate API errors. All requests are\n          authenticated using an `api-key` which can be obtained from your\n          <a href=\"https://app.moonmail.io/profile/api\" target=\"_blank\">profile</a>.\n        termsOfService: http://support.moonmail.io/terms-and-policies/terms-of-service\n        contact:\n          name: MoonMail\n          url: https://moonmail.io/\n          email: hi@moonmail.io\n      tags:\n        -\n          name: Recipients\n          description: Email recipients\n        -\n          name: Lists\n          description: Email recipients' lists\n    models:\n      -\n        name: Recipient\n        description: Recipient's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - id\n            - listId\n            - userId\n            - email\n            - status\n          properties:\n            id:\n              type: string\n            listId:\n              type: string\n            userId:\n              type: string\n            email:\n              type: string\n            subscriptionOrigin:\n              type: string\n              enum:\n                - signupForm\n                - manual\n                - listImport\n                - api\n            isConfirmed:\n              type: boolean\n            status:\n              type: string\n              enum:\n                - awaitingConfirmation\n                - subscribed\n            metadata:\n              type: object\n      -\n        name: List\n        description: Email list's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - id\n            - userId\n            - name\n          properties:\n            id:\n              type: string\n            userId:\n              type: string\n            name:\n              type: string\n            processed:\n              type: boolean\n            archived:\n              type: boolean\n            total:\n              type: integer\n              minimum: 0\n            subscribedCount:\n              type: integer\n              minimum: 0\n            unsubscribedCount:\n              type: integer\n              minimum: 0\n            awaitingConfirmationCount:\n              type: integer\n              minimum: 0\n            complainedCount:\n              type: integer\n              minimum: 0\n            bouncedCount:\n              type: integer\n              minimum: 0\n            totalPostProcessed:\n              type: integer\n              minimum: 0\n            createdAt:\n              type: integer\n              minimum: 0\n            importStatus:\n              type: object\n            metadataAttributes:\n              type: object\n            senderId:\n              type: string\n            successConfirmationUrl:\n              type: string\n            confirmationEmailBody:\n              type: string\n      -\n        name: RecipientsList\n        description: A list of recipients\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"{{model: Recipient}}\"\n            total:\n              type: integer\n              minimum: 0\n              description: Count of the recipients contained in the list\n      -\n        name: Lists\n        description: A set of recipients' lists\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"{{model: List}}\"\n      -\n        name: NewRecipient\n        description: New recipient\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - email\n            - subscriptionOrigin\n            - status\n          properties:\n            email:\n              type: string\n              format: email\n            #subscriptionOrigin:\n            #  enum:\n            #    - signupForm\n            #    - listImport\n            #    - manual\n            #    - api\n            #  type: string\n            status:\n              enum:\n                - subscribed\n                - awaitingConfirmation\n              type: string\n            isConfirmed:\n              type: boolean\n            metadata:\n              type: object\n              properties: {}\n              additionalProperties: true\n      -\n        name: RecipientCreatedResponse\n        description: Create recipient response\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - recipient\n          properties:\n            recipient:\n              type: object\n              properties:\n                id:\n                  type: string\n      -\n        name: CreateRecipientRequest\n        description: Recipient's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            recipient:\n              $ref: \"{{model: NewRecipient}}\"\n      -\n        name: UpdateRecipientRequest\n        description: Recipient updates model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            status:\n              enum:\n                - subscribed\n                - awaitingConfirmation\n                - unsubscribed\n              type: string\n            isConfirmed:\n              type: boolean\n            metadata:\n              type: object\n              properties: {}\n              additionalProperties: true\n          additionalProperties: false\n      -\n        name: EmptyResponse\n        description: Empty response\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: RecipientMalformed\n        description: Malformed recipient error\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n            message:\n              type: string\n\npackage:\n  individually: true\n\nfunctions:\n  # Event handlers\n  eventStreamProcessorHandler:\n    handler: handler.eventStreamProcessor\n    name: ${self:custom.resourcesPrefix}-eventStreamProcessor\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt:\n              - ListEventStream\n              - Arn\n  eventStreamProcessorHandler2:\n    handler: handler.eventStreamProcessor\n    name: ${self:custom.resourcesPrefix}-eventStreamProcessor2\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt:\n              - ListEventStream2\n              - Arn\n\n  # recipientCreatedEventHandler:\n  #   handler: handler.recipientCreatedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientCreatedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  # recipientUpdatedEventHandler:\n  #   handler: handler.recipientUpdatedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientUpdatedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  # recipientDeletedEventHandler:\n  #   handler: handler.recipientDeletedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientDeletedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  importRecipients:\n    handler: handler.importRecipientsCsvFromS3\n    name: ${self:custom.resourcesPrefix}-importRecipients\n    events:\n      - s3:\n          bucket: ${self:custom.recipientsBucket}\n          event: s3:ObjectCreated:*\n\n  syncRecipientStreamWithES:\n    handler: handler.syncRecipientStreamWithES\n    name: ${self:custom.resourcesPrefix}-syncRecipientStreamWithES\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 50\n          startingPosition: TRIM_HORIZON\n          arn: ${self:custom.recipientsTableStreamArn}\n              \n  # Public API\n  createRecipient:\n    handler: handler.createRecipient\n    name: ${self:custom.resourcesPrefix}-createRecipient\n    events:\n      - http:\n          path: /{listId}/recipients\n          method: post\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n          documentation:\n            summary: Creates a recipient\n            tags:\n              - Recipients\n            description: >\n              Creates a recipient within the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n            requestModels:\n              \"application/json\": CreateRecipientRequest\n            requestBody:\n              description: Recipient create request body\n            methodResponses:\n              -\n                statusCode: \"202\"\n                description: \"Request accepted\"\n                responseModels:\n                  \"application/json\": RecipientCreatedResponse\n                responseHeaders:\n                  -\n                    name: Location\n                    description: Path of the newly created recipient\n                    type: string\n              -\n                statusCode: \"422\"\n                description: \"Recipient malformed\"\n                responseModels:\n                  \"application/json\": RecipientMalformed\n\n  updateRecipient:\n    handler: handler.updateRecipient\n    name: ${self:custom.resourcesPrefix}-updateRecipient\n    events:\n      - http:\n          path: /{listId}/recipients/{recipientId}\n          method: put\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n                recipientId: true\n          documentation:\n            summary: Updates a recipient\n            tags:\n              - Recipients\n            description: >\n              Updates the specified recipient. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n              -\n                name: recipientId\n                description: The ID of the recipient\n            requestModels:\n              \"application/json\": UpdateRecipientRequest\n            requestBody:\n              description: Recipient update request body\n            methodResponses:\n              -\n                statusCode: \"202\"\n                description: \"Request accepted\"\n              -\n                statusCode: \"422\"\n                description: \"Recipient malformed\"\n                responseModels:\n                  \"application/json\": RecipientMalformed\n\n  getRecipient:\n    handler: handler.getRecipient\n    name: ${self:custom.resourcesPrefix}-getRecipient\n    events:\n      - http:\n          path: /{listId}/recipients/{recipientId}\n          method: get\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n                recipientId: true\n          documentation:\n            summary: Gets a recipient\n            tags:\n              - Recipients\n            description: >\n              Gets a single recipient of the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n              -\n                name: recipientId\n                description: The ID of the recipient\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": Recipient\n              -\n                statusCode: \"404\"\n                description: \"Recipient not found\"\n\n  searchRecipientsRaw:\n    handler: handler.searchRecipientsRaw\n    name: ${self:custom.resourcesPrefix}-searchRecipientsRaw\n\n  listRecipients:\n    handler: handler.listRecipients\n    name: ${self:custom.resourcesPrefix}-listRecipients\n    events:\n      - http:\n          path: /{listId}/recipients\n          method: get\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n              querystring:\n                limit: true\n                page: true\n                status: true\n                q: true\n          documentation:\n            summary: Gets a list of recipients\n            tags:\n              - Recipients\n            description: >\n              Gets a set recipients of the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n            queryParams:\n              -\n                name: page\n                description: \"Page to show (default: 1)\"\n              -\n                name: limit\n                description: \"Amount of results (default: 10; maximum: 100)\"\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": RecipientsList\n\n  getAllLists:\n    handler: handler.getAllLists\n    name: ${self:custom.resourcesPrefix}-getAllLists\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          documentation:\n            summary: Gets all the user's lists\n            tags:\n              - Lists\n            description: >\n              Gets all the recipients' lists of the specified user. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": Lists\n  createSegment:\n    handler: handler.createSegment\n    name: ${self:custom.resourcesPrefix}-createSegment\n\n  updateSegment:\n   handler: handler.updateSegment\n   name: ${self:custom.resourcesPrefix}-updateSegment\n\n  deleteSegment:\n    handler: handler.deleteSegment\n    name: ${self:custom.resourcesPrefix}-deleteSegment\n\n  getSegment:\n    handler: handler.getSegment\n    name: ${self:custom.resourcesPrefix}-getSegment\n\n  listSegments:\n    handler: handler.listSegments\n    name: ${self:custom.resourcesPrefix}-listSegments\n\n  listSegmentMembers:\n    handler: handler.listSegmentMembers\n    name: ${self:custom.resourcesPrefix}-listSegmentMembers\n  \nresources:\n  Resources:\n    ListEventStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-listEventStream\n        ShardCount: 1\n    ListEventStream2:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-listEventStream2\n        ShardCount: 1\n    ListMicroserviceDeadLetterQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ListMicroserviceDeadLetterQueue\n        MessageRetentionPeriod: 1209600\n    # FirehoseToS3Role:\n    #   Type: AWS::IAM::Role\n    #   Properties:\n    #     RoleName: FirehoseToS3Role\n    #     AssumeRolePolicyDocument:\n    #       Statement:\n    #       - Effect: Allow\n    #         Principal:\n    #           Service:\n    #           - firehose.amazonaws.com\n    #         Action:\n    #         - sts:AssumeRole\n    #     Policies:\n    #     - PolicyName: FirehoseToS3Policy\n    #       PolicyDocument:\n    #         Statement:\n    #           - Effect: Allow\n    #             Action:\n    #             - s3:AbortMultipartUpload\n    #             - s3:GetBucketLocation\n    #             - s3:GetObject\n    #             - s3:ListBucket\n    #             - s3:ListBucketMultipartUploads\n    #             - s3:PutObject\n    #             Resource: '*'\n    # RecipientActivityBucket:\n    #   Type: AWS::S3::Bucket\n    #   DeletionPolicy: Retain\n    #   Properties:\n    #     BucketName: ${env:RECIPIENTS_ACTIVITY_S3_BUCKET}\n    # ServerlessKinesisFirehose:\n    #   Type: AWS::KinesisFirehose::DeliveryStream\n    #   Properties:\n    #     DeliveryStreamName: ${self:custom.resourcesPrefix}-firehorseRecipientsActivityS3\n    #     S3DestinationConfiguration:\n    #       BucketARN:\n    #         Fn::Join:\n    #         - ''\n    #         - - 'arn:aws:s3:::'\n    #           - Ref: RecipientActivityBucket\n    #       BufferingHints:\n    #         IntervalInSeconds: \"60\"\n    #         SizeInMBs: \"1\"\n    #       CompressionFormat: \"UNCOMPRESSED\"\n    #       Prefix: \"firehorse/\"\n    #       RoleARN: { Fn::GetAtt: [ FirehoseToS3Role, Arn ] }\n  Outputs:\n    ListEventStreamARN:\n      Description: ListEventStream Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - ListEventStream\n          - Arn\n    ListEventStream2ARN:\n      Description: ListEventStream Kinesis Stream 2 ARN\n      Value:\n        'Fn::GetAtt':\n          - ListEventStream2\n          - Arn\n","service: moonmail-screenshots-service\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    SCREENSHOTS_S3_BUCKET: ${file(./config.${self:custom.currentStage}.json):SCREENSHOTS_S3_BUCKET}\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  optimize: \n    includePaths: ['bin/phantomjs', 'bin/screenshot_script.jss']\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\npackage:\n  individually: true\n\nfunctions:\n  takeScreenshot:\n    handler: screenshots.takeScreenshot\n    name: ${self:custom.resourcesPrefix}-takeScreenshot\n\n  takeScreenshotFromHtml:\n    handler: screenshots.takeScreenshotFromHtml\n    name: ${self:custom.resourcesPrefix}-takeScreenshotFromHtml","service: MoonMail-v2-webhooks\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:stage}\n  region: ${self:custom.config.REGION}\n  environment:\n    WEBHOOKTABLENAME: ${self:custom.resourcesPrefix}-${self:custom.webhookTableName}\n    FAILEDREQUESTTABLENAME: ${self:custom.resourcesPrefix}-${self:custom.failedRequestTableName}\n    REQUESTATTEMPTS: ${self:custom.requestAttempts}\n    REQUESTRETRYDELAY: ${self:custom.requestRetryDelay}\n    REQUESTTIMER: ${self:custom.requestTimer}\n    REQUESTTIMERMULTIPLIER: ${self:custom.requestTimerMultiplier}\n    MAXREQUESTATTEMPTS: ${self:custom.maxRequestAttempts}\n    TRIGGERWBFUNCTIONNAME: ${self:custom.resourcesPrefix}-${self:custom.defaultTriggerWebhooksFunctionName}\n    DEBUG: ${self:custom.config.REGION}\n    USERSTABLE: ${self:custom.config.USERTABLE}\n    LISTSTABLE: ${self:custom.config.LISTTABLE}\n    PEMBUCKETNAME: ${self:custom.config.PEMBUCKETNAME}\n    PEMFILENAME: ${self:custom.config.PEMFILENAME}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:*\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n\ncustom:\n  webpackIncludeModules: true\n\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n\n  defaultWebHookTableName: webhooks\n  webhookTableName: ${self:custom.config.WEBHOOKTABLE, self:custom.defaultWebHookTableName}\n\n  defaultPathName: webhooks\n  pathName: ${self:custom.config.PATHNAME, self:custom.defaultPathName}\n\n  defaultFailedRequestTableName: failed-requests\n  failedRequestTableName: ${self:custom.config.FAILEDREQUESTTABLE, self:custom.defaultFailedRequestTableName}\n\n  defaultRequestAttempts: 3\n  requestAttempts: ${self:custom.config.REQUESTATTEMPTS, self:custom.defaultRequestAttempts}\n\n  defaultRequestRetryDelay: 2000\n  requestRetryDelay: ${self:custom.config.REQUESTRETRYDELAY, self:custom.defaultRequestRetryDelay}\n\n  defaultRequestTimer: 60000\n  requestTimer: ${self:custom.config.REQUESTTIMER, self:custom.defaultRequestTimer}\n\n  defaultRequestTimerMultiplier: 2\n  requestTimerMultiplier: ${self:custom.config.REQUESTTIMERMULTIPLIER, self:custom.defaultRequestTimerMultiplier}\n\n  defaultMaxRequestAttempts: 10\n  maxRequestAttempts: ${self:custom.config.MAXREQUESTATTEMPTS, self:custom.defaultMaxRequestAttempts}\n\n  config: ${file(./config.${self:custom.currentStage}.json)}\n\n  defaultTriggerWebhooksFunctionName: triggerWebhooks\n\n  defaultKinesisName: event-stream\n\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\nfunctions:\n  create:\n    handler: handler.create\n    name: ${self:custom.resourcesPrefix}-createWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}\n          method: post\n          cors: true\n  readAll:\n    handler: handler.readAll\n    name: ${self:custom.resourcesPrefix}-readAllWebhooks\n    events:\n      - http:\n          path: ${self:custom.pathName}\n          method: get\n          cors: true\n  readOne:\n    handler: handler.readOne\n    name: ${self:custom.resourcesPrefix}-readOneWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    name: ${self:custom.resourcesPrefix}-updateWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    name: ${self:custom.resourcesPrefix}-deleteWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: delete\n          cors: true\n  handleWebhookEvents:\n    handler: src/handlerWebhookEvents.handlerWebhookEvents\n    name: ${self:custom.resourcesPrefix}-handleWebhookEvents\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - EventStream\n              - Arn\n          enabled: true\n  sniffFailedRequests:\n    handler: src/snifferFailedRequests.sniffFailedWebhookRequests\n    name: ${self:custom.resourcesPrefix}-sniffFailedRequests\n    events:\n      - schedule: rate(1 minute)\n  triggerWebhooks:\n    handler: src/triggerWebhooks.triggerWebbhook\n    name: ${self:custom.resourcesPrefix}-${self:custom.defaultTriggerWebhooksFunctionName}\n\nresources:\n  Resources:\n    WebhooksDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n          -\n            AttributeName: wb\n            AttributeType: S\n          -\n            AttributeName: userId\n            AttributeType: S\n          -\n            AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n        - IndexName: wb-index\n          KeySchema: \n          - AttributeName: wb\n            KeyType: HASH\n          - AttributeName: createdAt\n            KeyType: RANGE\n          Projection: \n            ProjectionType: \"ALL\"\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1  \n        - IndexName: userId-index\n          KeySchema: \n          - AttributeName: userId\n            KeyType: HASH\n          Projection: \n            ProjectionType: \"ALL\"\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.resourcesPrefix}-${self:custom.webhookTableName}\n    FailedRequestsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.resourcesPrefix}-${self:custom.failedRequestTableName}\n    EventStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-${self:custom.defaultKinesisName}\n        ShardCount: 1\n","service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n","service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n","service: MoonMail-v2-campaigns\n\nplugins:\n  - serverless-plugin-optimize\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:custom.config.PROFILE}\n  region: ${self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n    REPORTS_TABLE: ${self:custom.config.REPORTS_TABLE}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n\nfunctions:\n  processSesNotification:\n    handler: handler.processEmailNotifications\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 25\n          arn:\n            Fn::GetAtt:\n              - ReportsStream\n              - Arn\n\nresources:\n  Resources:\n    ReportsStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-ReportsStream\n        RetentionPeriodHours: 168\n        ShardCount: ${self:custom.config.KINESIS_SHARDS}\n","service: MoonMail-v2-events-router\n\nplugins:\n  - serverless-plugin-optimize\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  recipientsBucket: next-recipients.moonmail.${self:custom.currentStage}.${self:provider.region}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  ssmPath: /moonmail/events-router/${self:custom.currentStage}\n  defaultShardCount: 1\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${opt:profile, \"\"}\n  region: ${opt:region}\n  timeout: 300\n  environment:\n    REGION: ${self:provider.region}\n    DEAD_LETTER_QUEUE_URL:\n      Ref: EventsDeadLetterQueue\n    EVENT_SUBSCRIPTIONS: ${ssm:${self:custom.ssmPath}/event-subscriptions}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:*\"\n        - \"kinesis:*\"\n        - \"logs:*\"\n        - \"sqs:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  routeEvents:\n    handler: handler.routeEvents\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - EventsIngestionStream\n              - Arn\n\nresources:\n  Resources:\n    EventsIngestionStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-EventsIngestionStream\n        RetentionPeriodHours: 168\n        ShardCount: ${self:custom.config.KINESIS_SHARDS, self:custom.defaultShardCount}\n    EventsDeadLetterQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: EventsDeadLetterQueue\n  Outputs:\n    EventsIngestionStreamName:\n      Value:\n        Ref: EventsIngestionStream\n      Export:\n        Name: EventsRouterStreamName-${self:custom.currentStage}\n","service: moonmail-extensions\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${file(./config.${self:custom.currentStage}.json):PROFILE}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    USERS_TABLE: ${file(./config.${self:custom.currentStage}.json):USERS_TABLE}\n    STRIPE_API_KEY: ${file(./config.${self:custom.currentStage}.json):STRIPE_API_KEY}\n    STRIPE_FILE_ATTACHMENT_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_FILE_ATTACHMENT_PLAN}\n    STRIPE_IP_ADDRESS_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_IP_ADDRESS_PLAN}\n    STRIPE_DOWNLOAD_CLEAN_LIST_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_DOWNLOAD_CLEAN_LIST_PLAN}\n    STRIPE_RSS_TO_EMAIL_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_RSS_TO_EMAIL_PLAN}\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${opt:stage}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\npackage:\n  individually: true\n\nfunctions:\n  installExtension:\n    handler: handler.installExtension\n    name: ${self:custom.resourcesPrefix}-installExtension\n  uninstallExtension:\n    handler: handler.uninstallExtension\n    name: ${self:custom.resourcesPrefix}-uninstallExtension\n","service: MoonMail-v2-template-marketplace\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n    TEMPLATES_TABLE: ${self:custom.templatesTable}\n    ES_HOST: ${file(./config.${self:custom.currentStage}.json):ES_HOST}\n    ES_REGION: ${file(./config.${self:custom.currentStage}.json):ES_REGION}\n    ES_TEMPLATES_MARKETPLACE_INDEX_NAME: mm_${self:custom.currentStage}_template_marketplace_index\n    ES_TEMPLATES_MARKETPLACE_INDEX_TYPE: templates\n    SCREENSHOT_SERVICE_FUNCTION_NAME: moonmail-screenshots-service-${self:custom.currentStage}-takeScreenshotFromHtml\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n        - \"lambda:*\"\n        - \"logs:*\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n        - \"ec2:DeleteNetworkInterface\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  templatesTable: ${self:service}-${self:custom.currentStage}-templates\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  \n\npackage:\n  individually: true\n\nfunctions:\n  createTemplate:\n    handler: templates.createTemplate\n    name: ${self:custom.resourcesPrefix}-createTemplate\n\n  updateTemplate:\n    handler: templates.updateTemplate\n    name: ${self:custom.resourcesPrefix}-updateTemplate\n\n  getTemplate:\n    handler: templates.getTemplate\n    name: ${self:custom.resourcesPrefix}-getTemplate\n\n  listTemplates:\n    handler: templates.listTemplates\n    name: ${self:custom.resourcesPrefix}-listTemplates\n\n  syncTemplatesWithES:\n    handler: templates.syncTemplatesWithES\n    name: ${self:custom.resourcesPrefix}-syncTemplatesWithES\n    events:\n      - stream:\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: true\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - templatesTable\n              - StreamArn\n\n  getAllTags:\n    handler: templates.getAllTags\n    name: ${self:custom.resourcesPrefix}-getAllTags\n\nresources:\n  Resources:\n    templatesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName:  ${self:custom.templatesTable}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5","service: MoonMail-v2-emails\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  ssmPath: /moonmail/emails-microservice/${self:custom.currentStage}\n  legacyEmailNotificationsTopicArn: ${ssm:${self:custom.ssmPath}/legacy-notifications-topic-arn}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  emailNotificationsTopicName: ${self:custom.resourcesPrefix}-EmailNotificationsTopic\n  emailNotificationsTopicArn:\n    Fn::Join:\n      - \":\"\n      - - arn:aws:sns\n        - Ref: AWS::Region\n        - Ref: AWS::AccountId\n        - ${self:custom.emailNotificationsTopicName}\n  emailEventTopicName: ${self:custom.resourcesPrefix}-EmailEvent\n  emailEventTopicArn:\n    Fn::Join:\n      - \":\"\n      - - arn:aws:sns\n        - Ref: AWS::Region\n        - Ref: AWS::AccountId\n        - ${self:custom.emailEventTopicName}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile}\n  region: ${opt:region}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n    EVENTS_ROUTER_STREAM_NAME:\n      Fn::ImportValue: EventsRouterStreamName-${self:custom.currentStage}\n    CLICKS_TABLE: ${self:custom.config.CLICKS_TABLE}\n    OPENS_TABLE: ${self:custom.config.OPENS_TABLE}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:putRecord\"\n        - \"dynamodb:*\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource: ${self:custom.emailEventTopicArn}\n\npackage:\n  individually: true\n\nfunctions:\n  processSesNotification:\n    handler: handler.processSesNotification\n    events:\n      - sns:\n          arn: ${self:custom.emailNotificationsTopicArn}\n          topicName: ${self:custom.emailNotificationsTopicName}\n      - sns:\n          arn: ${self:custom.legacyEmailNotificationsTopicArn}\n          topicName: LegacyEmailNotifications\n  processLinkClick:\n    handler: handler.processLinkClick\n    events:\n      - http:\n          path: /links/click/{campaignId}/{linkId}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                campaignId: true\n                linkId: true\n    environment:\n      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}\n      ENCRYPTION_PWD: ${self:custom.config.ENCRYPTION_PWD}\n  processEmailOpen:\n    handler: handler.processEmailOpen\n    events:\n      - http:\n          path: /links/open/{campaignId}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                campaignId: true\n    environment:\n      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}\n  persistEmailEvent:\n    handler: handler.persistEmailEvent\n    events:\n      - sns:\n          topicName: ${self:custom.emailEventTopicName}\n          displayName: Notifies link clicks\n\n\nresources:\n  Resources:\n    EmailNotificationsTopic:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: ${self:custom.emailNotificationsTopicName}\n    EmailNotificationsTopicPolicy:\n      Type: \"AWS::SNS::TopicPolicy\"\n      Properties:\n        PolicyDocument:\n          Statement:\n            -\n              Effect: Allow\n              Principal:\n                AWS: \"*\"\n              Action: \"SNS:Publish\"\n              Resource:\n                Ref: EmailNotificationsTopic\n        Topics:\n          -\n            Ref: EmailNotificationsTopic\n"]},{"id":65856000,"files":["service: babel-multiple-static-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  # Individual packaging MUST NOT be enabled as we use static entry definitions!\n  # package:\n  #   individually: true\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n          integration: lambda\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n          integration: lambda\n","service: babel-webpack-4-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    # If you use Yarn instead of NPM in your environment, uncomment the following line.\n    # packager: yarn\n\npackage:\n  individually: true\n\nfunctions:\n  first:\n    handler: handlers/first.hello\n    events:\n      - http:\n          method: get\n          path: first\n  second:\n    handler: handlers/second.hello\n    events:\n      - http:\n          method: get\n          path: second\n","service: serverless-webpack-multiple-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  webpackIncludeModules: true # enable auto including modules\n  # You also can forcefully include or exclude modules by defining it this way.\n  # Be aware that this only should be done for packages that webpack does not\n  # correctly detect as dependencies.\n  #\n  # webpackIncludeModules:\n  #   forceInclude:\n  #     - myModule1\n  #   forceExclude:\n  #     - myModule2\n  #\n  # This can be used to exclude aws-sdk even if it is present in the production dependencies\n\nfunctions:\n  first:\n    handler: handler.hello\n    events:\n      - http:\n          method: GET\n          path: first\n          integration: lambda\n","service: multiple-statically-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: GET\n          path: first\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: GET\n          path: second\n          integration: lambda\n","service: serverless-webpack-offline-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  webpackIncludeModules: true\n\nfunctions:\n  first:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: GET\n          path: first\n","service: babel-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n          integration: lambda\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n          integration: lambda\n","service: serverless-webpack-typescript-example\npackage:\n  individually: true\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n  goodbye:\n    handler: src/handler2.goodbye\n    events:\n      - http:\n          method: get\n          path: goodbye\n          integration: lambda\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":115734980,"files":["service: ServerlessStepPlugin\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\nplugins:\n   - serverless-step-functions\n   - serverless-step-functions-offline\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  region: eu-west-1\n  memorySize: 128\n  timeout: 3\n\ncustom:\n  stepFunctionsOffline:\n      FirstLambda: firstLambda\n\nfunctions:\n    firstLambda:\n        handler: examples/firstLambda/index.handler\n        name: TheFirstLambda\n\nstepFunctions:\n  stateMachines:\n    foo:\n      definition:\n        Comment: \"An example of the Amazon States Language using wait states\"\n        StartAt: FirstLambda\n        States:\n            FirstLambda:\n              Type: Task\n              Next: wait_using_seconds\n            wait_using_seconds:\n              Type: Wait\n              Seconds: 2\n              Next: wait_using_timestamp\n            wait_using_timestamp:\n              Type: Wait\n              Timestamp: '2015-09-04T01:59:00Z'\n              Next: wait_using_timestamp_path\n            wait_using_timestamp_path:\n              Type: Wait\n              TimestampPath: \"$.expirydate\"\n              Next: wait_using_seconds_path\n            wait_using_seconds_path:\n              Type: Wait\n              SecondsPath: \"$.expiryseconds\"\n              Next: FinalState\n            FinalState:\n              Type: Pass\n              End: true"]},{"id":139096878,"files":["service: serverless-graphql\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-plugin-warmup\n\ncustom:\n  customDomain:\n    domainName: api.gatsbyjs.org\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: '*'\n  stage: dev\n  region: us-west-2\n\nfunctions:\n  publicAPI:\n    handler: src/graphql/public.graphql\n    warmup: true\n    events:\n      - http:\n          path: public\n          method: post\n          cors: true\n  graphql:\n    handler: src/graphql/server.graphql\n    warmup: true\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  playground:\n    handler: src/graphql/public.graphql\n    events:\n      - http:\n          path: public\n          method: get\n"]},{"id":149463320,"files":["# serverless.yml\nservice: resizeS3image\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom: ${file(env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: ${opt:stage,'dev'}\n  timeout: 5 # optional, in seconds, default is 6\n  environment:\n    BUCKET: ${self:custom.${self:provider.stage}.BUCKET}\n    URL: ${self:custom.${self:provider.stage}.URL}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 's3:PutObjectAcl'\n        - 's3:PutObject'\n        - 's3:ListBucket'\n      Resource: '*'\n\n# you can add packaging information here\npackage:\n  exclude:\n    - ./**\n\nfunctions:\n  handler:\n    handler: src/handler.imageprocess\n    name: resizeimage-${self:provider.stage}\n    memorySize: ${self:custom.${self:provider.stage}.MEMORY_SIZE}\n    timeout: ${self:custom.${self:provider.stage}.TIMEOUT}\n    reservedConcurrency: ${self:custom.${self:provider.stage}.TIMEOUT}\n    events:\n      - http:\n          path: /{key+}\n          method: get\n          integration: lambda-proxy\n          cors:\n            origins:\n              - ${self:custom.${self:provider.stage}.ORIGIN}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Headers\n              - Access-Control-Allow-Origin\n            allowCredentials: true\n          parameters:\n            paths:\n              key: true\n    environment:\n      BUCKET: ${self:custom.${self:provider.stage}.BUCKET}\n      URL: ${self:custom.${self:provider.stage}.URL}\n"]},{"id":87488765,"files":["service: hammertime\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: '${env:SLICE}'\n  region: '${env:AWS_REGION}'\n  deploymentBucket: '${env:DEPLOY_BUCKET}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'ec2:CreateTags'\n        - 'ec2:DeleteTags'\n        - 'ec2:DescribeInstances'\n        - 'ec2:StartInstances'\n        - 'ec2:StopInstances'\n        - 'rds:DescribeDBInstances'\n        - 'rds:ListTagsForResource'\n        - 'rds:AddTagsToResource'\n        - 'rds:RemoveTagsFromResource'\n        - 'rds:StartDBInstance'\n        - 'rds:StopDBInstance'\n        - 'autoscaling:CreateOrUpdateTags'\n        - 'autoscaling:DeleteTags'\n        - 'autoscaling:DescribeAutoScalingGroups'\n        - 'autoscaling:UpdateAutoScalingGroup'\n      Resource: '*'\n    - Effect: Allow\n      Action:\n        - 'logs:CreateLogGroup'\n        - 'logs:CreateLogStream'\n        - 'logs:PutLogEvents'\n      Resource: 'arn:aws:logs:*:*:*'\n  environment:\n    hammerTimeDryRun: '${file(./isDryRun.js):isDryRun}'\n    defaultOperatingTimezone: '${file(./operatingTimezones.js):defaultOperatingTimezone}'\n  custom:\n    enabled: '${file(./isEnabled.js):isEnabled}'\nfunctions:\n  stop-hammertime:\n    handler: hammertime.stop\n    timeout: 180\n    events: ${file(./events.js):stop}\n  start-hammertime:\n    handler: hammertime.start\n    timeout: 180\n    events: ${file(./events.js):start}\n"]},{"id":108043859,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'prod'}\n  region: us-east-1\n  timeout: 10 #Default Lambda timeout \n  memorySize: 512 #Default Lambda Memory Size\n  versionFunctions: false # No functions versioning \n  #role: arn:aws:iam::#{AWS::AccountId}:role/existing-role\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n      - .test/**\n  \n  environment: #Global Environment variables\n      ${file(./configs/${self:provider.stage}.yml)}\n\n  iamRoleStatements: # Permissions for all of your functions can be set here\n\n  - Effect: Allow\n    Action: # Gives permission to DynamoDB tables in a specific region\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\n  - Effect: Allow\n    Action: # Gives permission to Lambda execution\n      - lambda:InvokeFunction\n      - lambda:InvokeAsync\n    Resource: \"*\"\n\n  - Effect: Allow\n    Action: # Gives permission to SQS \n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n      - sqs:SendMessage\n    Resource: arn:aws:sqs:*:*:*\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  config: ${self:custom.prefix}-config\n  dynamo-books: ${self:custom.prefix}-BooksCatalog\n  sns-logs: ${self:custom.prefix}-trigger-logs\n  sqs-logs: ${self:custom.prefix}-messages-logs\n\n  serverless-offline:\n    host: '0.0.0.0'\n\n  splitStacks:\n    perFunction: true\n    perType: true\n\n  serverless-offline-sqs-esmq:\n    apiVersion: '2012-11-05'\n    endpoint: http://sqs:9324\n    region: sa-east-1\n    accessKeyId: root\n    secretAccessKey: root\n\n  dynamodb:\n    stages:\n      - local\n      - test\n      - dev\n\n    start:\n      host: \"dynamo\"\n      port: 8000\n      inMemory: false\n      migrate: true\n      noStart: true\n\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-dynamodb-local\n  - serverless-offline-scheduler\n  - serverless-offline-sqs-esmq\n  - serverless-offline\n\nfunctions: ${file(serverless-dynamic.js)}\n\n# Infrastrucure - Cloud Formation\nresources:  # CloudFormation template syntax\n\n  Resources:\n    #DynamoDB Books Table\n    BooksCatalog:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamo-books}\n        AttributeDefinitions:\n          - AttributeName: hashkey\n            AttributeType: S\n        KeySchema:\n          - AttributeName: hashkey\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 1\n\n    # SQS Queue to Update DynamoDB\n    BooksQueueExample:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs-logs}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n"]},{"id":73476931,"files":["service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-plugin-existing-s3\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: ./s3-local\n    # Uncomment the first line only if you want to use cors with specified policy\n    # Uncomment the second line only if you don't want to use cors\n    # Not uncomment the these lines only if your wanto use cors with default policy\n    # cors: relative/path/to/your/cors.xml\n    # website: relative/path/to/your/website.xml\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          method: get\n  s3EventResponse:\n    handler: handler.s3EventResponse\n    events:\n      - existingS3:\n          bucket: existing-bucket\n          events:\n            - s3:ObjectCreated:Put\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: /tmp\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nfunctions:\n  s3hook:\n    handler: handler.s3hook\n    events:\n      - s3:\n          bucket: local-bucket\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: incoming/\n            - suffix: .jpg\n","service: serverless-s3-local-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-s3-local\n  - serverless-offline\n\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: /tmp\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: /\n          method: GET\n  s3hook:\n    handler: handler.s3hook\n    environment:\n      ENV_000: 123\n      ENV_001: 456\n    events:\n      - s3: local-bucket\n","service: serverless-s3-local-example\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-s3-local\n  - serverless-offline\n\ncustom:\n  s3:\n    port: 8000\n    directory: /tmp\n\nfunctions:\n  s3hook:\n    handler: handler.s3hook\n    events:\n      - s3: local-bucket\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-plugin-existing-s3\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: ./s3-local\n    # Uncomment the first line only if you want to use cors with specified policy\n    # Uncomment the second line only if you don't want to use cors\n    # Not uncomment the these lines only if your wanto use cors with default policy\n    # cors: relative/path/to/your/cors.xml\n    # website: relative/path/to/your/website.xml\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          method: get\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-webpack\n  - serverless-s3-local\n  - serverless-offline\ncustom:\n  webpackIncludeModules: true\n  s3:\n    port: 8000\n    directory: /tmp\n\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\nfunctions:\n  webhook:\n    handler: src/handler.webhook\n    events:\n      - http:\n          method: GET\n  s3hook:\n    handler: src/handler.s3hook\n    events:\n      - s3: local-bucket\n"]},{"id":142411027,"files":["service: next-material\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-central-1\n  memorySize: 264\n  timeout: 15\n  environment:\n    NODE_ENV: production\n    LAMBDA: true\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource:\n      - Fn::Join:\n        - ':'\n        - - arn:aws:lambda\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - function:${self:service}-${opt:stage, self:provider.stage}-*\n\npackage:\n  exclude:\n    - .git/**\n\nplugins:\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-plugin-warmup\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  domain:\n    dev: dev.example.com\n    prod: prod.example.com\n  customDomain:\n    enabled: true\n    stage: ${self:custom.stage}\n    domainName: ${self:custom.domain.${self:custom.stage}}\n    certificateName: '*.example.com'\n    basePath: ''\n    createRoute53Record: true\n    endpointType: regional\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  next:\n    handler: lambda.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: /{any+}\n    warmup: true\n"]},{"id":108839908,"files":["service: auto-remediate\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: v1\n  region: ${opt:region, 'us-east-1'}\n  timeout: 10 # optional, in seconds, default is 6\n  stackTags:\n    service: auto-remediate\n\nfunctions:\n\n  AutoRemediateOrchestrator:\n    handler: functions/AutoRemediateOrchestrator.handler\n    timeout: 10\n    memorySize: 128\n    events:\n      - sns:\n          topicName: CloudConformity\n          displayName: CloudConformity topic\n    tags:\n      Name: Auto Remediate Orchestrator\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateOrchestrator.js\n    role: AutoRemediateOrchestratorRole\n\n  AutoRemediateS3-016:\n    handler: functions/AutoRemediateS3-016.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-016\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-016.js\n    role: AutoRemediateS3016Role\n\n  AutoRemediateIAM-001:\n    handler: functions/AutoRemediateIAM-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate IAM-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateIAM-001.js\n    role: AutoRemediateIAM001Role\n\n  AutoRemediateCT-001:\n    handler: functions/AutoRemediateCT-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CT-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCT-001.js\n    role: AutoRemediateCT001Role\n\n  AutoRemediateLambda-003:\n    handler: functions/AutoRemediateLambda-003.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Lambda-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateLambda-003.js\n    role: AutoRemediateLambda003Role\n\n  AutoRemediateS3-001:\n    handler: functions/AutoRemediateS3-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-001.js\n    role: AutoRemediateS3001Role\n\n  AutoRemediateS3-002:\n    handler: functions/AutoRemediateS3-002.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-002.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3002Role\n\n\n  AutoRemediateIAM-038:\n    handler: functions/AutoRemediateIAM-038.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate IAM-038\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateIAM-038.js\n    role: AutoRemediateIAM038Role\n\n  AutoRemediateS3-014:\n    handler: functions/AutoRemediateS3-014.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-014\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-014.js\n    role: AutoRemediateS3014Role\n\n  AutoRemediateS3-003:\n    handler: functions/AutoRemediateS3-003.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-003.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3003Role\n\n  AutoRemediateKMS-002:\n    handler: functions/AutoRemediateKMS-002.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate KMS-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKMS-002.js\n    role: AutoRemediateKMS002Role\n\n\n\n  AutoRemediateS3-004:\n    handler: functions/AutoRemediateS3-004.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-004.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3004Role\n\n\n  AutoRemediateRDS-023:\n    handler: functions/AutoRemediateRDS-023.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate RDS-023\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-023.js\n    role: AutoRemediateRDS023Role\n\n  AutoRemediateGD-001:\n    handler: functions/AutoRemediateGD-001.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate GD-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateGD-001.js\n    role: AutoRemediateGD001Role\n\n  AutoRemediateS3-005:\n    handler: functions/AutoRemediateS3-005.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-005.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3005Role\n\n  AutoRemediateS3-006:\n    handler: functions/AutoRemediateS3-006.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-006.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3006Role\n\n  AutoRemediateS3-007:\n    handler: functions/AutoRemediateS3-007.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-007\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-007.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3007Role\n\n\n  AutoRemediateKMS-004:\n    handler: functions/AutoRemediateKMS-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate KMS-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKMS-004.js\n    role: AutoRemediateKMS004Role\n\n\n  AutoRemediateOrganizations-002:\n    handler: functions/AutoRemediateOrganizations-002.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate Organizations-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateOrganizations-002.js\n    role: AutoRemediateOrganizations002Role\n\n  AutoRemediateS3-008:\n    handler: functions/AutoRemediateS3-008.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-008.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3008Role\n\n  AutoRemediateS3-009:\n    handler: functions/AutoRemediateS3-009.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-009\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-009.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3009Role\n\n  AutoRemediateCT-003:\n    handler: functions/AutoRemediateCT-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CT-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCT-003.js\n    role: AutoRemediateCT003Role\n\n  AutoRemediateRDS-006:\n    handler: functions/AutoRemediateRDS-006.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RDS-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-006.js\n    role: AutoRemediateRDS006Role\n\n  AutoRemediateS3-010:\n    handler: functions/AutoRemediateS3-010.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-010\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-010.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3010Role\n\n  AutoRemediateS3-012:\n    handler: functions/AutoRemediateS3-012.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-012\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-012.js\n    role: AutoRemediateS3012Role\n\n  AutoRemediateSQS-004:\n    handler: functions/AutoRemediateSQS-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate SQS-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateSQS-004.js\n    role: AutoRemediateSQS004Role\n  AutoRemediateRDS-008:\n    handler: functions/AutoRemediateRDS-008.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RDS-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-008.js\n    role: AutoRemediateRDS008Role\n\n  AutoRemediateConfig-001:\n    handler: functions/AutoRemediateConfig-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Config-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateConfig-001.js\n    role: AutoRemediateConfig001Role\n\n  AutoRemediateCFM-005:\n    handler: functions/AutoRemediateCFM-005.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CFM-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCFM-005.js\n    role: AutoRemediateCFM005Role\n\n  AutoRemediateVPC-001:\n    handler: functions/AutoRemediateVPC-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate VPC-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateVPC-001.js\n    role: AutoRemediateVPC001Role\n\n  AutoRemediateEBS-009:\n    handler: functions/AutoRemediateEBS-009.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EBS-009\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEBS-009.js\n    role: AutoRemediateEBS009Role\n\n\n  AutoRemediateRS-001:\n    handler: functions/AutoRemediateRS-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-001.js\n    role: AutoRemediateRS001Role\n\n  AutoRemediateEC2-002:\n    handler: functions/AutoRemediateEC2-002.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-002.js\n    role: AutoRemediateEC2002Role\n\n  AutoRemediateRS-019:\n    handler: functions/AutoRemediateRS-019.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-019\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-019.js\n    role: AutoRemediateRS019Role\n\n  AutoRemediateEC2-003:\n    handler: functions/AutoRemediateEC2-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-003.js\n    role: AutoRemediateEC2003Role\n\n  AutoRemediateEC2-005:\n    handler: functions/AutoRemediateEC2-005.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-005.js\n    role: AutoRemediateEC2005Role\n\n  AutoRemediateEC2-019:\n    handler: functions/AutoRemediateEC2-019.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-019\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-019.js\n    role: AutoRemediateEC2019Role\n\n  AutoRemediateEC2-004:\n    handler: functions/AutoRemediateEC2-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-004.js\n    role: AutoRemediateEC2004Role\n\n  AutoRemediateEC2-006:\n    handler: functions/AutoRemediateEC2-006.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-006.js\n    role: AutoRemediateEC2006Role\n\n  AutoRemediateEC2-008:\n    handler: functions/AutoRemediateEC2-008.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-008.js\n    role: AutoRemediateEC2008Role\n\n  AutoRemediateEC2-043:\n    handler: functions/AutoRemediateEC2-043.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-043\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-043.js\n    role: AutoRemediateEC2043Role\n\n  AutoRemediateRS-023:\n    handler: functions/AutoRemediateRS-023.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-023\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-023.js\n    role: AutoRemediateRS023Role\n\n\n  AutoRemediateEC2-045:\n    handler: functions/AutoRemediateEC2-045.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-045\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-045.js\n    role: AutoRemediateEC2045Role\n\n  AutoRemediateEC2-038:\n    handler: functions/AutoRemediateEC2-038.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-038\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-038.js\n    role: AutoRemediateEC2038Role\n\n  AutoRemediateEC2-040:\n    handler: functions/AutoRemediateEC2-040.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-040\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-040.js\n    role: AutoRemediateEC2040Role\n\n  AutoRemediateEC2-039:\n    handler: functions/AutoRemediateEC2-039.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-039\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-039.js\n    role: AutoRemediateEC2039Role\n\n  TrustedAdvisor-003:\n    handler: functions/AutoRemediateTrustedAdvisor-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate TrustedAdvisor-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateTrustedAdvisor-003.js\n    role: AutoRemediateTrustedAdvisor003Role\n\n  AutoRemediateKinesis-001:\n    handler: functions/AutoRemediateKinesis-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Kinesis-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKinesis-001.js\n    role: AutoRemediateKinesis001Role\nresources:\n\n  Resources:\n\n    AutoRemediateEC2002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateS3014Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-014Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-014Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketPolicy\n                    - s3:PutBucketPolicy\n                  Resource: \"*\"\n\n\n    AutoRemediateEC2005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateLambda003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateLambda-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateLambda-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - lambda:UpdateFunctionConfiguration\n                    - lambda:GetFunctionConfiguration\n                    - iam:AttachRolePolicy\n\n                  Resource: \"*\"\n\n    AutoRemediateEC2043Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-043Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-043Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateIAM001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateIAM-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateIAM-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateEC2042Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-042Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-042Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRS001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyCluster\n                  Resource: \"*\"\n\n    AutoRemediateKMS002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKMS-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateKMS-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - kms:EnableKeyRotation\n                  Resource: \"*\"\n\n    AutoRemediateCFM005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCFM-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCFM-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cloudformation:UpdateTerminationProtection\n                  Resource: \"*\"\n\n    AutoRemediateRS019Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-019Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-019Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyCluster\n                  Resource: \"*\"\n\n    AutoRemediateConfig001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateConfig-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateConfig-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - config:PutConfigurationRecorder\n                    - config:PutDeliveryChannel\n                    - config:StartConfigurationRecorder\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - iam:AttachRolePolicy\n                    - iam:CreateRole\n                    - iam:GetRole\n                    - iam:PassRole\n                    - iam:PutRolePolicy\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - sts:GetCallerIdentity\n                  Resource: \"*\"\n\n    AutoRemediateRDS008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDBInstance\n                  Resource: \"*\"\n\n    AutoRemediateCT001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCT-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCT-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cloudtrail:UpdateTrail\n                  Resource: \"*\"\n\n    AutoRemediateS3001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateGD001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateGD-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateGD-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - guardduty:CreateDetector\n                    - iam:CreateServiceLinkedRole\n                  Resource: \"*\"\n\n    AutoRemediateS3009Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-009Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-009Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateIAM038Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateIAM-038Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateIAM-038Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateS3012Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-012Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-012Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:PutBucketVersioning\n                  Resource: \"*\"\n\n\n    AutoRemediateOrganizations002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateOrganizations-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateOrganizations-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - organizations:EnableAllFeatures\n                  Resource: \"*\"\n\n    AutoRemediateOrchestratorRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateOrchestratorRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateOrchestratorPolicy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"*\"\n\n    AutoRemediateS3004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateEBS009Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEBS-009Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEBS-009Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:ModifySnapshotAttribute\n                  Resource: \"*\"\n\n    AutoRemediateS3005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3007Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-007Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-007Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateEC2019Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-019Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-019Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:ModifyImageAttribute\n                  Resource: \"*\"\n\n\n    AutoRemediateS3008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3010Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-010Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-010Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateRDS006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDbInstance\n                  Resource: \"*\"\n\n    AutoRemediateS3016Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-016Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-016Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketPolicy\n                    - s3:PutBucketPolicy\n                  Resource: \"*\"\n\n    AutoRemediateVPC001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateVPC-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateVPC-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:AttachRolePolicy\n                    - iam:CreateRole\n                    - iam:GetRole\n                    - iam:PassRole\n                    - iam:PutRolePolicy\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - ec2:CreateFlowLogs\n                  Resource: \"*\"\n\n    AutoRemediateEC2008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2045Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-045Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-045Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRS023Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-023Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-023Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyClusterParameterGroup\n                  Resource: \"*\"\n\n    AutoRemediateEC2006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRDS023Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-023Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-023Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDBSnapshotAttribute\n                  Resource: \"*\"\n\n    AutoRemediateEC2038Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-038Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-038Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n\n    AutoRemediateEC2040Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-040Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-040Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateCT003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCT-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCT-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateKMS004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKMS-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateKMS-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - kms:CancelKeyDeletion\n                  Resource: \"*\"\n\n    AutoRemediateEC2004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2039Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-039Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-039Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateTrustedAdvisor003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateTrustedAdvisor-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateTrustedAdvisor-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateSQS004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateSQS-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: SQS-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"kms:ListKeys\"\n                    - \"kms:ListAliases\"\n                    - \"kms:DescribeKey\"\n                    - \"sqs:SetQueueAttributes\"\n                  Resource: \"*\"\n\n    AutoRemediateKinesis001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKinesis-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: Kinesis-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"kms:ListKeys\"\n                    - \"kms:ListAliases\"\n                    - \"kms:DescribeKey\"\n                    - \"kinesis:StartStreamEncryption\"\n                  Resource: \"*\"\n"]},{"id":115457737,"files":["service:\n  name: bitwarden-serverless\n  # When using the `prod` environment the DynamoDB tables will not be\n  # delete when removing the Cloudformation stack. It's better to risk\n  # having a forgotten table running than losing data\n  tableDeletionPolicy:\n    prod: Retain\n    other: Delete\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'prod'}\n  runtime: nodejs10.x\n  memorySize: 256\n  timeout: 10\n  environment:\n    DEVICES_TABLE: ${self:service}-${self:provider.stage}-devices\n    USERS_TABLE: ${self:service}-${self:provider.stage}-users\n    CIPHERS_TABLE: ${self:service}-${self:provider.stage}-ciphers\n    FOLDERS_TABLE: ${self:service}-${self:provider.stage}-folders\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DEVICES_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CIPHERS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOLDERS_TABLE}\"\n  usagePlan:\n    throttle:\n      burstLimit: 300 # request burst\n      rateLimit: 5 # requests per second\n\ndefault_cors: &default_cors\n  cors:\n    origin: \"*\"\n    headers:\n      - Content-Type\n      - Authorization\n      - Accept\n      # Special serverless header being sent\n      - Device-type\n      - Pragma\n      - Cache-Control\n    allowMethods: \"GET, POST, OPTIONS, PUT, DELETE\"\n\nfunctions:\n  # Identity endpoints\n\n  login:\n    handler: src/login.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: identity/connect/token\n\n  # Accounts endpoints\n\n  prelogin:\n    handler: src/prelogin.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/prelogin\n  profile:\n    handler: src/accounts.profileHandler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/accounts/profile\n  profile_put:\n    handler: src/accounts.putProfileHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/accounts/profile\n  keys:\n    handler: src/keys.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/keys\n  register:\n    handler: src/register.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/register\n  accounts_revision_date:\n    handler: src/accounts.revisionDateHandler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/accounts/revision-date\n\n  # Other endpoints, ciphers and data\n\n  sync:\n    handler: src/sync.handler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/sync\n  cipher_post:\n    handler: src/ciphers.postHandler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/ciphers\n  cipher_put:\n    handler: src/ciphers.putHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/ciphers/{uuid}\n  cipher_delete:\n    handler: src/ciphers.deleteHandler\n    events:\n      - http:\n          method: delete\n          <<: *default_cors\n          path: api/ciphers/{uuid}\n  folder_post:\n    handler: src/folders.postHandler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/folders\n  folder_put:\n    handler: src/folders.putHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/folders/{uuid}\n  folder_delete:\n    handler: src/folders.deleteHandler\n    events:\n      - http:\n          method: delete\n          <<: *default_cors\n          path: api/folders/{uuid}\n  migrate:\n    handler: src/migrate.migrateHandler\n    timeout: 300\n    memorySize: 1024\n  two_factor_setup:\n    handler: src/two_factor.setupHandler\n  two_factor_complete:\n    handler: src/two_factor.completeHandler\n  import:\n    handler: src/import.postHandler\n    timeout: 30\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: /api/ciphers/import\n  icons:\n    handler: src/icons.handler\n    events:\n      - http:\n          method: get\n          path: /icons/{domain}/icon.png\n  default:\n    handler: src/default.handler\n    events:\n      - http:\n          method: any\n          <<: *default_cors\n          path: /{fallback+}\n\n\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    DevicesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.DEVICES_TABLE}\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    CiphersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.CIPHERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userUuid\n            AttributeType: S\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userUuid\n            KeyType: HASH\n          - AttributeName: uuid\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 3\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    FoldersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.FOLDERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userUuid\n            AttributeType: S\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userUuid\n            KeyType: HASH\n          - AttributeName: uuid\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n"]},{"id":156385149,"files":["service: api-service\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${self:custom.defaultRegions.${self:provider.stage}}'}\n\ncustom:\n  apiConfig: ${file(./api-config.js)}\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../slic-config.json):domainConfig:domainPrefixes}\n  defaultRegions: ${file(../slic-config.json):defaultRegions}\n  apiDomainName: ${file:./domain-config.js):apiDomainName}\n  # The HostedZoneId for CloudFront distributions is always this value.\n  # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html\n  # AND http://docs.aws.amazon.com/general/latest/gr/rande.html\n  cloudFrontHostedZoneId: Z2FDTNDATAQYW2\n\nresources:\n  Resources:\n    apiCustomDomain:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.apiConfig.apiCert}\n        DomainName: ${self:custom.apiDomainName}\n\n    apiDomainDns:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.apiConfig.publicHostedZone}\n        RecordSets:\n          - Name: ${self:custom.apiDomainName}\n            Type: A\n            AliasTarget:\n              DNSName: !GetAtt apiCustomDomain.DistributionDomainName\n              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}\n          - Name: ${self:custom.apiDomainName}\n            Type: AAAA\n            AliasTarget:\n              DNSName: !GetAtt apiCustomDomain.DistributionDomainName\n              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}\n","service: certs\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n\ncustom:\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  apiDomainName: api.${self:custom.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}\n  siteDomainName: ${self:custom.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}\n\nresources:\n  Outputs:\n    publicHostedZone:\n      Value: !Ref publicHostedZone\n      Export:\n        Name: ${self:provider.stage}-public-hosted-zone\n    siteCert:\n      Value: !Ref siteCert\n      Export:\n        Name: ${self:provider.stage}-site-cert\n    apiCert:\n      Value: !Ref apiCert\n      Export:\n        Name: ${self:provider.stage}-api-cert\n\n  Resources:\n    publicHostedZone:\n      Type: AWS::Route53::HostedZone\n      Properties:\n        Name: ${self:custom.nsDomain}\n\n    siteCert:\n      Type: AWS::CertificateManager::Certificate\n      Properties:\n        DomainName: ${self:custom.siteDomainName}\n        DomainValidationOptions:\n          - DomainName: ${self:custom.siteDomainName}\n            ValidationDomain: ${self:custom.nsDomain}\n        ValidationMethod: EMAIL\n\n    apiCert:\n      Type: AWS::CertificateManager::Certificate\n      Properties:\n        DomainName: ${self:custom.apiDomainName}\n        DomainValidationOptions:\n          - DomainName: ${self:custom.apiDomainName}\n            ValidationDomain: ${self:custom.nsDomain}\n        ValidationMethod: EMAIL\n","service: frontend\n\nplugins:\n  - serverless-s3-sync\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n\ncustom: ${file(./custom.yml.js)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: cicd-deployment-target\n\ncustom:\n  stage: ${opt:stage, 'cicd'}\n  region: ${opt:region, '${file(../../slic-config.json):defaultRegions.cicd}'}\n  runtime: nodejs8.10\n  accountIds: ${file(../../slic-config.json):accountIds}\n\nprovider:\n  name: aws\n  runtime: ${self:custom.runtime}\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n\nresources:\n  Resources:\n    deploymentRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: slic-cicd-deployment-role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS: ${self:custom.accountIds.cicd}\n              Action: [sts:AssumeRole]\n        Path: /\n\n    deploymentPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: slic-cicd-deployment-policy\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - cloudformation:List*\n                - cloudformation:Get*\n                - cloudformation:PreviewStackUpdate\n                - cloudformation:ValidateTemplate\n                - cloudformation:CreateStack\n                - cloudformation:CreateUploadBucket\n                - cloudformation:DeleteStack\n                - cloudformation:Describe*\n                - cloudformation:UpdateStack\n                - cloudformation:CreateChangeSet\n                - cloudformation:ExecuteChangeSet\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - apigateway:*\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - iam:CreateServiceLinkedRole\n                - iam:DeleteServiceLinkedRole\n                - iam:AttachRolePolicy\n                - iam:DetachRolePolicy\n                - iam:GetRole\n                - iam:CreateRole\n                - iam:PassRole\n                - iam:GetRolePolicy\n                - iam:PutRolePolicy\n                - iam:DeleteRolePolicy\n                - iam:DeleteRole\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - s3:CreateBucket\n                - s3:DeleteBucket\n                - s3:DeleteBucketPolicy\n                - s3:GetBucket*\n                - s3:GetBucketPolicy\n                - s3:GetObject\n                - s3:GetObjectVersion\n                - s3:GetEncryptionConfiguration\n                - s3:PutEncryptionConfiguration\n                - s3:SetBucketEncryption\n                - s3:ListBucket\n                - s3:PutObject\n                - s3:PutBucketPolicy\n                - s3:PutBucketWebsite\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - lambda:Get*\n                - lambda:List*\n                - lambda:CreateEventSourceMapping\n                - lambda:DeleteEventSourceMapping\n                - lambda:CreateFunction\n                - lambda:AddPermission\n                - lambda:CreateAlias\n                - lambda:DeleteFunction\n                - lambda:InvokeFunction\n                - lambda:PublishVersion\n                - lambda:RemovePermission\n                - lambda:Update*\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - cloudfront:CreateDistribution\n                - cloudfront:DeleteDistribution\n                - cloudfront:GetDistribution\n                - cloudfront:UpdateDistribution\n                - cloudfront:TagResource\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - dynamodb:CreateTable\n                - dynamodb:DescribeTable\n                - dynamodb:Query\n                - dynamodb:Scan\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n              Resource: 'arn:aws:dynamodb:${self:custom.region}:*:*'\n            - Effect: Allow\n              Action: 'sqs:*'\n              Resource:\n                - arn:aws:sqs:*:*:*\n            - Effect: Allow\n              Action:\n                - cloudwatch:GetMetricStatistics\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:DeleteLogGroup\n                - logs:DeleteSubscriptionFilter\n                - logs:DescribeSubscriptionFilters\n                - logs:PutLogEvents\n                - logs:PutSubscriptionFilter\n                - logs:DescribeLogStreams\n                - logs:DescribeLogGroups\n                - logs:FilterLogEvents\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - events:Put*\n                - events:Remove*\n                - events:Delete*\n                - events:Describe*\n              Resource:\n                - 'arn:aws:events:*:*:rule/*'\n            - Effect: Allow\n              Action:\n                - 'acm:RequestCertificate'\n                - 'acm:DeleteCertificate'\n                - 'acm:DescribeCertificate'\n                - 'acm:AddTagsToCertificate'\n                - 'route53:GetChange'\n                - 'route53:GetHostedZone'\n                - 'route53:CreateHostedZone'\n                - 'route53:DeleteHostedZone'\n                - 'route53:ChangeResourceRecordSets'\n                - 'route53:ChangeTagsForResource'\n                - 'route53:ListResourceRecordSets'\n                - 'route53:ListHostedZones'\n                - 'route53:ListQueryLoggingConfigs'\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - events:Put*\n                - events:Remove*\n                - events:Delete*\n              Resource:\n                - 'arn:aws:events:*:*:rule/*'\n            - Effect: Allow\n              Action:\n                # Start permissions required for integration tests\n                - cognito-idp:AdminCreateUser\n                - cognito-idp:AdminDeleteUser\n                - cognito-idp:AdminInitiateAuth\n                - cognito-idp:AdminRespondToAuthChallenge\n                # End permissions required for integration tests\n                - cognito-idp:CreateUserPool*\n                - cognito-idp:DeleteUserPool*\n                - cognito-idp:ListUserPool*\n                - cognito-identity:CreateIdentityPool\n                - cognito-identity:DeleteIdentityPool\n                - cognito-identity:UpdateIdentityPool\n                - cognito-identity:ListIdentityPools\n                - cognito-identity:GetIdentityPoolRoles\n                - cognito-identity:SetIdentityPoolRoles\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - 'ssm:ListTagsForResource'\n                - 'ssm:AddTagsToResource'\n                - 'ssm:RemoveTagsFromResource'\n                - 'ssm:DeleteParameter'\n                - 'ssm:DescribeParameters'\n                - 'ssm:PutParameter'\n                - 'ssm:GetParameter'\n                - 'ssm:GetParameters'\n              Resource:\n                - '*'\n\n        Roles:\n          - Ref: deploymentRole\n","service: checklist-service\n\nplugins:\n  - serverless-webpack\n  # Order of plugins is important for dynamodb-local\n  # Using fork of serverless-dynamodb-local due to https://github.com/99xt/dynamodb-localhost/issues/25\n  - '@dathuis/serverless-dynamodb-local'\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource:\n        - '*'\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    SERVICE_NAME: ${file(./package.json):name}\n    SERVICE_VERSION: ${file(./package.json):version}\n    CHECKLIST_TABLE_NAME: ${self:custom.checklistTableName}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  checklistTableName: ${self:provider.stage}Checklists\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  checklistApiUrl:\n    Fn::Join:\n      - ''\n      - - 'https://'\n        - Ref: 'ApiGatewayRestApi'\n        - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'\n  serverless-offline:\n    port: 4000\n    stage: local\n    region: ${self:provider.region}\n  dynamodb:\n    start:\n      migrate: true\n  prune:\n    automatic: true\n    number: 3\n  logForwarding:\n    destinationARN: !ImportValue ${self:provider.stage}-log-forwarder-function-arn\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: email-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-offline-sqs\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  sesRegion: ${self:custom.sesRegions.${self:provider.region}, 'us-east-1'}\n  tracing:\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    SES_REGION: ${self:provider.sesRegion}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n  number: 3\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  sesRegions:\n    us-east-1: us-east-1\n    us-west-2: us-west-2\n    eu-west-1: eu-west-1\n  serverless-offline:\n    port: 4002\n    stage: local\n    region: ${opt:region, '${env:TARGET_REGION}'}\n  serverless-offline-sqs:\n    endpoint: ${env:SQS_ENDPOINT_URL,'http://0.0.0.0:4576'}\n    autoCreate: true\n    region: ${self:provider.region}\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml)}\n","service: sharing-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    EMAIL_QUEUE_NAME: ${self:custom.emailQueueName}\n  resourcePolicy:\n    - Effect: Allow\n      Principal: '*'\n      Action: 'execute-api:Invoke'\n      Resource:\n        - execute-api:/*/*/*\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  cloudFrontHostedZoneId: Z2FDTNDATAQYW2\n  serverless-offline:\n    port: 4004\n    stage: local\n    region: ${self:provider.region}\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n    number: 3\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: user-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n  logs:\n    restApi: true\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  stage: ${opt:stage, 'dev'}\n  serverless-offline:\n    port: 4003\n    stage: local\n    region: ${self:provider.region}\n    noAuth: true\n  prune:\n    automatic: true\n    number: 3\n  logForwarding:\n    destinationARN: !ImportValue ${self:provider.stage}-log-forwarder-function-arn\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Outputs:\n    userPool:\n      Value: !Ref slicUserPool\n      Export:\n        Name: ${self:provider.stage}-user-pool-id\n    userPoolClient:\n      Value: !Ref slicUserPoolClient\n      Export:\n        Name: ${self:provider.stage}-user-pool-client-id\n    identityPool:\n      Value: !Ref slicIdentityPool\n      Export:\n        Name: ${self:provider.stage}-identity-pool\n    slicUserPoolArn:\n      Value: !Ref slicUserPoolArn\n      Export:\n        Name: ${self:provider.stage}-user-pool-arn\n\n  Resources: ${file(./sls-resources.yml)}\n","service: welcome-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n    number: 3\n  serverless-offline:\n    port: 4001\n    stage: local\n    region: ${self:provider.region}\n\nfunctions: ${file(./sls-functions.yml)}\n"]}]