[{"id":192426107,"files":["service: biztechApp\ntenant: ianmh\napp: biztechapp\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'dev'}\n  apiKeys:\n    - ${opt:stage, 'dev'}-key\n  runtime: nodejs10.x\n  region: us-west-2\n  cfLogs: true\n  environment:\n    ENVIRONMENT: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n        - dynamodb:UpdateItem\n      Resource:\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechUsers${file(./config.${self:provider.stage}.json):ENVIRONMENT}\"\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechEvents${file(./config.${self:provider.stage}.json):ENVIRONMENT}\"\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechRegistration${file(./config.${self:provider.stage}.json):ENVIRONMENT}\"\n\nfunctions:\n  hello:\n    handler: handlers/default.hello\n    events:\n      - http:\n          path: /hello\n          method: get\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userCreate:\n    handler: handlers/user.create\n    events:\n      - http:\n          path: users/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userGet:\n    handler: handlers/user.get\n    events:\n      - http:\n          path: users/get\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userUpdate:\n    handler: handlers/user.update\n    events:\n      - http:\n          path: users/update\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventCreate:\n    handler: handlers/event.create\n    events:\n      - http:\n          path: events/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventGet:\n    handler: handlers/event.get\n    events:\n      - http:\n          path: events/get\n          method: get\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventUpdate:\n    handler: handlers/event.update\n    events:\n      - http:\n          path: events/update\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventScan:\n    handler: handlers/event.scan\n    events:\n      - http:\n          path: events/scan\n          method: get\n          request:\n            parameters:\n              querystrings:\n                code: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationCreate:\n    handler: handlers/registration.create\n    events:\n      - http:\n          path: registration/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationQueryStudent:\n    handler: handlers/registration.queryStudent\n    events:\n      - http:\n          path: registration/queryStudent\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationScanEvent:\n    handler: handlers/registration.scanEvent\n    events:\n      - http:\n          path: registration/scanEvent\n          method: get\n          request:\n            parameters:\n              querystrings:\n                eventID: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n","- name: default responds with 200 and Yeet\n  endpoint: {function: hello}\n  response:\n    status: 200\n    body: \n      message: 'Yeet!'\n\n- name: user create returns 200\n  endpoint:\n    method: POST\n    path: users/create\n  request:\n    body:\n      id: 144444\n      fname: test\n      lname: dude\n      faculty: Science\n  response:\n    status: 200\n    body:\n      message: 'Created!'\n\n- name: user create no ID returns 406\n  endpoint:\n    method: POST\n    path: users/create\n  request:\n    body:\n      fname: foo\n      lname: bar\n      email: foo\n      faculty: bar\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n      data:\n        fname: foo\n        lname: bar\n        email: foo\n        faculty: bar\n\n- name: user get no ID returns 406\n  endpoint:\n    method: GET\n    path: users/get\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n      data: null\n\n- name: user get found returns 200\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      id: 144444\n      fname: test\n      lname: dude\n      faculty: Science\n\n- name: user get not found returns 404\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 0\n  response:\n    status: 404\n    body: \"\\\"User not found.\\\"\"\n\n- name: user update returns 200\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      id: 144444\n      fname: updateTest\n      lname: dudeGotUpdated\n      faculty: Sauder\n  response:\n    status: 200\n    body: \"\\\"Update succeeded.\\\"\"\n\n- name: user get update info returns 200\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      id: 144444\n      fname: updateTest\n      lname: dudeGotUpdated\n      faculty: Sauder\n\n- name: user update no ID returns 406\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      fname: badUpdateTest\n      lname: dudeNotUpdated\n      faculty: LFS\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n\n- name: user update not found returns 404\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      id: -20\n      fname: badUpdateTest\n      lname: dudeNotUpdated\n  response:\n    status: 404\n    body: \"\\\"User not found.\\\"\"\n\n- name: event create returns 200\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      id: testevent\n      ename: test\n      capac: 2000000\n      img: yup\n      code: ripp\n  response:\n    status: 200\n    body:\n      message: 'Event Created!'\n\n- name: event create no ID returns 406\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      ename: test\n      capac: 2000000\n      img: yup\n  response:\n    status: 406\n    body:\n      message: 'Event ID not specified.'\n      data:\n        ename: test\n        capac: 2000000\n        img: yup\n\n- name: event create no capac returns 406\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      id: testevent\n      ename: test\n      img: yup\n      code: test\n  response:\n    status: 406\n    body:\n      message: 'capac invalid, please provide valid number.'\n      data:\n        id: testevent\n        ename: test\n        img: yup\n\n- name: event get returns 200\n  endpoint:\n    method: GET\n    path: events/get\n  response:\n    status: 200\n\n- name: event update returns 200\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      id: testevent\n      ename: testUpdated\n      capac: 7\n      img: nope\n      code: test\n  response:\n    status: 200\n    body: \"\\\"Update succeeded.\\\"\"\n\n- name: event update not found returns 404\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      id: nonexistanttestidwoo\n      ename: testUpdated\n      capac: 7\n      img: nope\n      code: test\n  response:\n    status: 404\n    body: \"\\\"Event not found.\\\"\"\n\n- name: event update no ID returns 406\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      ename: testUpdated\n  response:\n    status: 406\n    body:\n      message: 'Event ID not specified.'\n\n- name: event scan match returns 200\n  endpoint:\n    method: GET\n    path: events/scan\n  request:\n    form:\n      code: test\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: event scan no match returns 200\n  endpoint:\n    method: GET\n    path: events/scan\n  request:\n    form:\n      code: -1\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration create returns 200\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      id: 144444\n      status: registered\n  response:\n    status: 200\n    body:\n      message: 'Update succeeded.'\n\n- name: registration create no id returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      status: registered\n  response:\n    status: 406\n    body:\n      message: 'Registration student ID not specified.'\n\n- name: registration create no eventID returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      id: 144444\n      status: registered\n  response:\n    status: 406\n    body:\n      message: 'Registration event ID not specified.'\n\n- name: registration create no status returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      id: 144444\n  response:\n    status: 406\n    body:\n      message: 'Status not specified.'\n\n- name: registration queryStudent returns 200\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: registration queryStudent no match returns 200\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n      id: -1\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration queryStudent no ID returns 406\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n  response:\n    status: 406\n    message: 'Student ID not specified.'\n\n- name: registration scanEvent returns 200\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n      eventID: testevent\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: registration scanEvent no match returns 200\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n      eventID: nonexistanttestidwoo\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration scanEvent no ID returns 406\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n  response:\n    status: 406\n    message: 'Event ID not specified.'\n"]},{"id":152340987,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bounty-service # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - logs:*\n        - events:*\n        - kms:*\n        - ses:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n\n  auth:\n    handler: src/auth/auth.handler\n  \n  bountyState:\n    handler: src/api/bountyState.handler\n    events:\n      - http: \n          method: get\n          path: /api/bounty/state\n          authorizer: auth\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/bounty/request\"\n            description: \"/api/bounty/request\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n  bountyRequest:\n    handler: src/api/bountyRequest.handler\n    events:\n      - http:  \n          path: /api/bounty/request\n          method: get\n          authorizer: auth\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/bounty/request\"\n            description: \"/api/bounty/request\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Bounty Service\n        termsOfService: https://www.decompany.io\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\nplugins:\n  - serverless-mocha-plugin\n  - serverless-aws-documentation","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: generate-sitemap # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: us-west-1\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - cloudfront:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n\npackage:\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    \nfunctions:\n  generateSitemap:\n    handler: src/generateSitemap.handler\n    timeout: 300\n    events:\n      - schedule: cron(10 0 * * ? *) # daily 00:10:00\n  \n\n\n\nplugins:\n  - serverless-mocha-plugin\n\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: verify-email # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - logs:*\n        - events:*\n        - kms:*\n        - ses:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n  sendBatchEmail:\n    handler: src/batch/sendBatchEmail.handler\n    timeout: 30\n    events:\n      - schedule: rate(2 minutes)\n\n  adminEmailBatchSender:\n    handler: src/email/adminEmailBatchSender.handler\n    timeout: 60\n    events:\n      - schedule: cron(15 0 * * ? *)\n\n  verifyEmailSender:\n    handler: src/email/verifyEmailSender.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n\n  trackingConfirmSender:\n    handler: src/tracking/trackingConfirmSender.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n\n  verifyEmailRequest:\n    handler: src/email/verifyEmailRequest.handler\n    events:\n      - http: \n          method: post\n          path: /api/email/verifyemailrequest\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: /api/email/verifyemailrequest\n            description: /api/email/verifyemailrequest\n            requestBody:\n              description: \"email\"\n  \n  verifyEmail:\n    handler: src/email/verifyEmail.handler\n    events:\n      - http: \n          method: get\n          path: /api/email/verifyemail/{code}\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: /api/email/verifyemail/{code}\n            description: /api/email/verifyemail/{code}\n            pathParams:\n              - name: code\n                description: code\n                type: string\n\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Verify Email API\n        termsOfService: https://www.decompany.io\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-aws-documentation","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: frontend-lambdaedge # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  tags:\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  role: RoleLambdaEdge\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - kms:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    - node_modules/*\n    \nfunctions:\n  IndexLambda:\n    handler: src/indexLambda.handler\n    timeout: 3\n    memorySize: 128\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n\nresources:\n  Resources:\n    RoleLambdaEdge:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /service-role/\n        RoleName: ${self:service.name}-${self:provider.stage}-RoleLambdaEdge # required if you want to use 'serverless deploy --function' later on\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n                  - edgelambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n        - PolicyName: ${self:service.name}-${self:provider.stage}-FrontEndLambdaEdgeExecutionRole\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: \"Allow\"\n                Action:\n                  - s3:*\n                  - logs:*\n                  - kms:*\n                Resource: \"*\"\n\nplugins:\n  - serverless-mocha-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: converter-wrapper-master # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: asem\n  region: \"us-west-1\"\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  completeConvert:\n    handler: src/completeConvert.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    timeout: 60\n    events:\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: PDF/\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: THUMBNAIL/\n\n  requestConvert:\n    handler: src/requestConvert.handler\n    events:\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: FILE/\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-existing-s3\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: converter-wrapper # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n\n  autoCheckConvertFailDocument:\n    handler: src/document/autoCheckConvertFailDocument.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n  \n  pdfConvertComplete:\n    handler: src/document/pdfConvertComplete.handler\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: PDF/\n\n  accountPictureConverter:\n    handler: src/account/accountPictureConverter.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.upload_profile}\n          events: \n            - s3:ObjectCreated:Put\n\n  s3DocumentUploadComplete:\n    handler: src/document/uploadComplete.handler\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: FILE/\n\n  s3DocumentConvertComplete:\n    handler: src/document/convertComplete.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events: \n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: THUMBNAIL/\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-existing-s3\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-layer # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-west-1'}\n  environment:\n    NODE_PATH: \"./:/sharp/node_modules:/geoip/node_modules\"\n  logRetentionInDays: 3\n\nlayers:\n  libSharp:\n    path: sharp\n    description: \"sharp image processing\"\n  libGeoip:\n    path: geoip\n    description: \"geoip lite\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\ncustom:\n  prune:\n    automatic: true\n    number: 5","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: zapier # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\n# you can define service wide environment variables here\n  #environment:\n  #  CROS: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n\n  zapierAuth:\n    handler: src/auth.handler\n\n  zapierEmail:\n    handler: src/email.handler\n    events:\n      - http:  \n          path: /api/zapier/email\n          method: get\n          authorizer: zapierAuth\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n\n  zapierDocument:\n    handler: src/document.handler\n    events:\n      - http:\n          path: /api/zapier/document\n          method: get\n          authorizer: zapierAuth\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-warmup # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - logs:*\n       - kms:*\n       - lambda:*\n      Resource: \"*\"\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: true\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n\n\n\nfunctions:\n  warmup:\n    handler: src/warmup.handler\n    timeout: 30\n    events:\n      - schedule: rate(10 minutes)\n  \nplugins:\n  - serverless-mocha-plugin\n\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: batch-pageview # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${file(./serverlessConfig.js):region}\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - events:*\n       - kms:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n  makeRewardPool:\n    handler: functions/mgr/makeRewardPool\n  calculateRoyalty:\n    handler: functions/cron/calculateRoyalty.handler\n    timeout: 300\n\n  pageviewWriteOnchain:\n    handler: functions/onchain/pageviewWriteOnchain.handler\n    timeout: 300\n    #events:\n    #  - schedule: rate(5 minutes)\n\n  dailyPageview:\n    handler: functions/cron/dailyPageview.handler\n    timeout: 300\n    #events:\n    #  - schedule: cron(10 0 * * ? *) # daily 00:10:00\n\n  recentlyPageview:\n    handler: functions/cron/recentlyPageview.handler\n    timeout: 30\n    events:\n      - schedule: rate(5 minutes)\n      \n  generatePopular:\n    handler: functions/cron/generatePopular.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n  \n  generateFeatured:\n    handler: functions/cron/generateFeatured.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n\n  generateTopTag:\n    handler: functions/cron/generateTopTag.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n      \nstepFunctions:\n  validate: true\n  stateMachines:\n    dailyAggregateRoyalty:\n      events:\n        - schedule: \n            rate: cron(30 0 * * ? *)\n      definition:\n        StartAt: aggregatePageviewState\n        States:\n          aggregatePageviewState:\n            Type: Task\n            Resource:\n              Fn::GetAtt:\n                - dailyPageview\n                - Arn\n            End: true\n\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-step-functions","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: batch-wallet # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n       - sns:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n#  dailySetDateMillis:\n#    handler: src/scheduler/dailySetDateMillis.handler\n#    timeout: 60\n#    reservedConcurrency: 1\n#    events:\n#      - schedule: cron(0 0 * * ? *)\n\n  schedulerTransfer:\n    handler: src/scheduler/transfer.handler\n    timeout: 300\n    reservedConcurrency: 1\n    events:\n      - schedule: rate(1 minute)\n\n  schedulerWithdraw:\n    handler: src/scheduler/withdraw.handler\n    timeout: 300\n    reservedConcurrency: 1\n    events:\n      - schedule: rate(1 minute)\n\n\n# you can add CloudFormation resource templates here\nresources:\n\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: restapis-graphql # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\n# you can define service wide environment variables here\n  #environment:\n  #  CROS: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  preHook:\n    handler: deploy/handler.pre\n  postHook:\n    handler: deploy/handler.post\n\n  graphql:\n    handler: src/index.handler\n    events:\n      - http: \n          method: ANY\n          path: /api/graphql\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\ncustom:\n  deployType: Canary10Percent5Minutes\n  deploymentSettings:\n    stages:\n      - asem\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\nplugins:\n  - serverless-offline\n  - serverless-mocha-plugin\n  - serverless-prune-plugin\n  - serverless-plugin-canary-deployments","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: \n  name: restapis-wallet # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    - docker-entrypoint-initdb.d/**\n\n    \nfunctions:\n  preHook:\n    handler: deploy/handler.pre\n  postHook:\n    handler: deploy/handler.post\n\n  claimReward:\n    handler: src/claim/reward.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/claim/reward\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/claim/reward\"\n            description: \"/api/claim/reward\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestDocumentModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  claimRoyalty:\n    handler: src/claim/royalty.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/claim/royalty\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/claim/royalty\"\n            description: \"/claim/royalty\"\n            requestBody:\n                description: \"documentId\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestDocumentModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  walletVote:\n    handler: src/wallet/vote.handler\n    timeout: 90\n    events:\n      - http: \n          method: post\n          path: /api/document/vote\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          async: true\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/document/vote\"\n            description: \"/api/document/vote\"\n            requestBody:\n                description: \"documentId, value\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestVoteModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  walletWithdraw:\n    handler: src/wallet/withdraw.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/withdraw\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/withdraw\"\n            description: \"/api/account/withdraw\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header JWT\"\n            requestModels:\n                \"application/json\": \"RequestWithdrawModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  getBalance:\n    handler: src/account/balance.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/balance\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/balance\"\n            description: \"/api/account/balance\"\n            requestModels:\n                \"application/json\": \"RequestBalanceModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  requestGas:\n    handler: src/gas/request.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/gas/request\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n\n  transferDeck:\n    handler: src/deck/transfer.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/deck/transfer\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook                \n\n  createAccount:\n    handler: src/account/create.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/create\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/create\"\n            description: \"/api/account/create\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook                \n\n  jwt:\n    handler: src/authorizer/jwt.handler\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\ncustom:\n  deployType: Canary10Percent5Minutes\n  deploymentSettings:\n    stages:\n      - asem\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: restapis-wallet\n        description: restapis-wallet\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\n      -\n        name: \"RequestVoteModel\"\n        description: \"vote request\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestVoteModel.json)}\n      -\n        name: \"RequestDocumentModel\"\n        description: \"document request\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestDocumentModel.json)}\n      -\n        name: \"RequestWithdrawModel\"\n        description: \"wallet withdraw\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestWithdrawModel.json)}\n      -\n        name: \"RequestBalanceModel\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestBalanceModel.json)}    \nplugins:\n  - serverless-offline\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin\n  - serverless-aws-documentation\n  - serverless-plugin-canary-deployments","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: backend-restapis # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  preHook:\n    handler: deploy/handler.pre\n  postHook:\n    handler: deploy/handler.post\n    \n  curatorDocumentList:\n    handler: controllers/curator/curatorDocumentList.handler\n    events:\n      - http:\n          path: /api/curator/document/list\n          method: get\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/curator/document/list\"\n            description: \"/api/curator/document/list\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n              - name: pageNo\n                description: pageNo (default 1)\n                type: integer\n              - name: pageSize\n                description: pageSize (default 20)\n                type: integer\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  analyticsList:\n    handler: controllers/analytics/list.handler\n    events:\n      - http:\n          path: /api/analytics/list\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/analytics/list\"\n            description: \"/api/analytics/list\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true\n              - name: week\n                description: 4 week(1 month), 8 week (2month)\n                type: integer\n              - name: month\n                description: 12 (1 year)\n                type: integer\n              - name: csv\n                description: csv(true or false ) default false\n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  analyticsExport:\n    handler: controllers/analytics/export.handler\n    events:\n      - http:\n          method: get\n          path: /api/analytics/export\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/analytics/export\"\n            description: \"/api/analytics/export\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true\n              - name: week\n                description: 4 week(1 month), 8 week (2month)\n                type: integer\n              - name: year\n                description: 12 month\n                type: integer\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  tagList:\n    handler: controllers/tag/list.handler\n    events:\n      - http:\n          path: /api/tags\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tags\"\n            description: \"/api/tags\"\n            queryParams:\n              - name: t\n                description: type 'featured' or 'popular' default null(latest)\n                type: string\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountDocuments:\n    handler: controllers/account/documents.handler\n    events:\n      - http:\n          method: get\n          path: /api/account/documents\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountPicture:\n    handler: controllers/account/picture.handler\n    events:\n      - http: \n          path: /api/account/picture\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n          documentation:\n            summary: \"/api/account/picture\"\n            description: \"/api/account/picture\"\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountEthereumSync:\n    handler: controllers/account/accountEthereumSync.handler\n    events:\n      - http: \n          method: post\n          path: /api/account/ethereumSync\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n          documentation:\n            summary: \"/api/account/ethereumSync\"\n            description: \"/api/account/ethereumSync\"\n            queryParams:\n              - name: ethAccount\n                description: ethereum account\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  profileGet:\n    handler: controllers/profile/getProfile.handler\n    events:\n      - http:\n          path: /api/profile/get\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/profile/get by no auth\"\n            description: \"/api/profile/get by no auth\"\n            queryParams:\n              - name: email\n                description: email\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountAuth:\n    handler: controllers/account/auth.handler\n\n  accountGet:\n    handler: controllers/account/get.handler\n    events:\n      - http:\n          path: /api/account/get\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountUpdate:\n    handler: controllers/account/update.handler\n    events:\n      - http: \n          path: /api/account/update\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/profile/get by no auth\"\n            description: \"/api/profile/get by no auth\"\n            queryParams:\n              - name: nickname\n                description: nickname\n                type: string\n              - name: username\n                description: username\n                type: string\n              - name: picture\n                description: picture path\n                type: string\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountSync:\n    handler: controllers/account/sync.handler\n    events:\n      - http: \n          path: /api/account/sync\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentRegist:\n    handler: controllers/document/documentRegist.handler\n    events:\n      - http:\n          path: api/document/regist\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  documentList:\n    handler: controllers/document/documentController.list\n    events:\n      - http:\n          path: api/document/list\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentMeta:\n    handler: controllers/document/documentMeta.handler\n    events:\n      - http: \n          path: /api/document/meta\n          method: get\n          cors: true\n          integration: lambda\n          documentation:\n            summary: \"/api/document/download\"\n            description: \"/api/document/download\"\n            queryParams:\n              - name: seoTitle\n                description: seoTitle\n                type: string\n                required: true\n          response: \n              headers:\n                Content-Type: integration.response.header.Content-Type\n              template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentInfo:\n    handler: controllers/document/documentInfo.handler\n    events:\n      - http:\n          path: api/document/info/{documentId}\n          method: get\n          cors: true\n          integration: lambda          \n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentUpdate:\n    handler: controllers/document/documentUpdate.handler\n    events:\n      - http:\n          path: /api/document/update\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/document/update\"\n            description: \"/api/document/update\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"JWT Token\"\n                required: true\n            queryParams:\n              - name: documentId\n                description: documentId\n                type: string\n                required: true\n              - name: desc\n                description: desc\n                type: string\n              - name: title\n                description: title\n                type: string\n              - name: tags\n                description: tags\n                type: array\n              - name: useTracking\n                type: boolean\n                description: useTracking\n              - name: forceTracking\n                type: boolean\n                description: forceTracking\n              - name: isDownload\n                type: boolean\n                description: isDownload\n              - name: shortUrl\n                type: string\n                description: shortUrl                \n              - name: cc\n                type: string\n                description: \"cc\"\n              - name: isPublic\n                type: boolean\n                description: isPublic\n              - name: isDeleted\n                type: boolean\n                description: isDeleted                \n            requestBody:\n              application/json: \"documentId, desc, title, tags, useTracking, forceTracking, isDownload, cc, shortUrl, isPublic, isDeleted\"            \n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentPDF:\n    handler: controllers/document/documentPDF.handler\n    events:\n      - http: \n          path: /api/document/pdf\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  documentDownload:\n    handler: controllers/document/documentDownload.handler\n    events:\n      - http:\n          path: /api/document/download\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/document/download\"\n            description: \"/api/document/download\"\n            queryParams:\n              - name: documentid\n                description: document id\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  trackingList:\n    handler: controllers/tracking/list.handler\n    events:\n      - http: \n          path: /api/tracking/list\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/list\"\n            description: \"/api/tracking/list\"\n            queryParams:\n              - name: documentid\n                description: document id\n                type: string\n                required: true\n              - name: anonymous\n                description: include anonymous \n                type: boolean\n              - name: include\n                description: include 1 page view \n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  trackingInfo:\n    handler: controllers/tracking/info.handler\n    events:\n      - http: \n          path: /api/tracking/info\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/info\"\n            description: \"/api/tracking/info\"\n            queryParams:\n              - name: documentid\n                type: string\n                description: document id\n                required: true\n              - name: cid\n                description: client id\n                type: string\n                required: true\n              - name: include\n                description: include 1 page only (true or false), default false\n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook                  \n\n  trackingCollect:\n    handler: controllers/tracking/collect.handler\n    events:\n      - http: \n          path: api/tracking/collect\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n              Set-Cookie: integration.response.body.Cookie\n            template: $input.path('$.body')\n          documentation:\n            summary: \"tracking collector\"\n            description: \"api/tracking/collect\"\n            queryParams:\n              - name: cid\n                description: client id\n                type: string\n                required: true\n              - name: sid\n                description: session id\n                type: string\n                required: true\n              - name: t\n                description: event timestamp\n                type: number\n                required: true\n              - name: e\n                description: email\n                type: string\n              - name: ev\n                description: event type [view, leave]\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  trackingExport:\n    handler: controllers/tracking/trackingExport.handler\n    events:\n      - http: \n          method: get\n          path: /api/tracking/export\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/export\"\n            description: \"/api/tracking/export\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true   \n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n  trackingConfirm:\n    handler: controllers/tracking/confirm.handler\n    events:\n      - http:\n          method: post\n          path: /api/tracking/confirm\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/confirm\"\n            description: \"/api/tracking/confirm\"\n            queryParams:\n              - name: documentId\n                description: documentId\n                type: string\n              - name: email\n                description: email\n                type: string\n              - name: cid\n                description: cid\n                type: string\n              - name: sid\n                description: sid\n                type: string\n              \n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n  \n  oembedDocument:\n    handler: controllers/oembed/oembedDocument.handler\n    events:\n      - http: \n          method: get\n          path: /api/oembed\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  deployType: Canary10Percent5Minutes\n  deploymentSettings:\n    stages:\n      - asem\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Decompany Rest Api\n        termsOfService: https://www.google.com\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\nplugins:\n  - serverless-offline\n  - serverless-aws-documentation\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-plugin-canary-deployments\n  - serverless-prune-plugin"]},{"id":230574423,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rankly\n# app and org for use with dashboard.serverless.com\napp: rankly-app\norg: angelyukyu\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n  stage: prod\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  rankly:\n    handler: handler.rank\n    events:\n      - http:\n          path: rank\n          method: get\n  resize:\n    handler: handler.resize\n    events:\n      - http:\n          path: /{size}/{image}\n          method: get\n    environment:\n      BUCKET: dynamic-image-resizing-demo\n      REGION: us-east-1\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:GetObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing-demo\"\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:PutObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing-demo\"\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":49783372,"files":["service: frcTeamUpdateSlackNotifier\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Action:\n      - secretsmanager:*\n      - cloudformation:CreateChangeSet\n      - cloudformation:DescribeChangeSet\n      - cloudformation:DescribeStackResource\n      - cloudformation:DescribeStacks\n      - cloudformation:ExecuteChangeSet\n      - ec2:DescribeSecurityGroups\n      - ec2:DescribeSubnets\n      - ec2:DescribeVpcs\n      - kms:DescribeKey\n      - kms:ListAliases\n      - kms:ListKeys\n      - lambda:ListFunctions\n      - rds:DescribeDBClusters\n      - rds:DescribeDBInstances\n      - tag:GetResources\n      Effect: Allow\n      Resource: \"*\"\n    - Action:\n      - lambda:AddPermission\n      - lambda:CreateFunction\n      - lambda:GetFunction\n      - lambda:InvokeFunction\n      - lambda:UpdateFunctionConfiguration\n      Effect: Allow\n      Resource: arn:aws:lambda:*:*:function:SecretsManager*\n    - Action:\n      - serverlessrepo:CreateCloudFormationChangeSet\n      Effect: Allow\n      Resource: arn:aws:serverlessrepo:*:*:applications/SecretsManager*\n    - Action:\n      - s3:GetObject\n      Effect: Allow\n      Resource: arn:aws:s3:::awsserverlessrepo-changesets*\nfunctions:\n  checkForTeamUpdate:\n    handler: handler.checkForTeamUpdate\n    events:\n      - http:\n          path: /checkForTeamUpdate\n          method: get\n      - schedule: rate(30 minutes)\n"]},{"id":232982976,"files":["service: examples\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: eu-west-1\n  memorySize: 256\n\nfunctions:\n  fun1:\n    handler: src/fun1.handler\n    description: unhandled exception with try-catch\n    events:\n      - http: \n          method: get \n          path: functions/1\n  fun2:\n    handler: src/fun2.handler\n    description: unhandled exception without try-catch\n    events:\n      - http: \n          method: get \n          path: functions/2\n  fun3:\n    handler: src/fun3.handler\n    description: like fun1 but store return value of async function\n    events:\n      - http: \n          method: get \n          path: functions/3     \n  fun4:\n    handler: src/fun4.handler\n    description: throw user defined exception\n    events:\n      - http: \n          method: get \n          path: functions/4\n  fun5:\n    handler: src/fun5.handler\n    description: throw user defined exception/store return value\n    events:\n      - http: \n          method: get \n          path: functions/5  \n  fun6:\n    handler: src/fun6.handler\n    description: hack\n    events:\n      - http: \n          method: get \n          path: functions/6       \n  fun7:\n    handler: src/fun7.handler\n    description: timeout\n    timeout: 1 # sec\n    events:\n      - http: \n          method: get \n          path: functions/7  "]},{"id":232109273,"files":["service: csv-to-dynamodb\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  bucket: csv-to-dynamodb-petr-reshetin\n  tableName: ${self:custom.stage}-real-estate\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ RealEstateTable, Arn ]\n\n  environment:\n    tableName: ${self:custom.tableName}\n  \nfunctions:\n  save:\n    handler: save.main\n    environment:\n      BUCKET: ${self:custom.bucket}\n  import:\n    handler: import.main\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .csv\n\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  # - ${file(resources/s3-bucket.yml)}\n"]},{"id":227560459,"files":["# NOTE: update this with your service name\nservice: attendance-app-2-api\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-attendance\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: prod\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to .env and uncomment\n  # the following line. Also, make sure to not\n  # commit your .env.\n  #\n  #environment:\n  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}\n\n  # These environment variables are made available to our functions\n  # under process.env.\n\n  environment:\n    tableName: ${self:custom.tableName}\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [AttendanceTable, Arn]\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: attendance\n          method: post\n          cors: true\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: attendance\n          method: get\n          cors: true\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: attendance/{id}\n          method: get\n          cors: true\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: attendance/{id}\n          method: delete\n          cors: true\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n  - ${file(resources/s3-bucket.yml)}\n"]},{"id":222768803,"files":["service: sqrl-min-auth\n\ncustom:\n  secrets: ${file(./secrets.json)}\n  database: ${self:custom.secrets}.database\n  applicationName: ${self:service}-${opt:stage,'dev'}\n  connectionString:\n    Fn::Join:\n      - ''\n      - - 'postgres://${self:custom.database.username}:${self:custom.database.password}@'\n        - !GetAtt AppDB.Endpoint.Address\n        - ':'\n        - !GetAtt AppDB.Endpoint.Port\n        - '/${self:custom.database.database}'\n  apiBaseUrl:\n    Fn::Join:\n      - ''\n      - - 'https://'\n        - !Ref ApiGatewayRestApi\n        - '.execute-api.'\n        - !Ref AWS::Region\n        - '.'\n        - !Ref AWS::URLSuffix\n        - \"/${opt:stage,'dev'}\"\n\n  prune:\n    automatic: true\n    number: 5\n\nplugins:\n  - serverless-prune-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  logs:\n    frameworkLambda: true\n  environment:\n    NODE_ENV: production\n  tags:\n    Application: ${self:custom.applicationName}\n    Environment: ${opt:stage,'dev'}\n    Service: ${self:service}\n\nfunctions:\n  dbMigrate:\n    handler: src/handlers/db-migration.handler\n    description: Migrate the DB\n    memorySize: 128\n    timeout: 60\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n  nutSweeper:\n    handler: src/handlers/nut-sweeper.handler\n    description: Deletes old or used nuts\n    memorySize: 128\n    timeout: 60\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - schedule: rate(1 day)\n  sqrl:\n    handler: src/handlers/sqrl.handler\n    description: Minimal SQRL auth server\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n      COOKIE_SECRET: ${self:custom.secrets.cookie.secret}\n      HMAC_SECRET: ${self:custom.secrets.nuts.hmac}\n      BLOWFISH_KEY: ${self:custom.secrets.nuts.key}\n      BLOWFISH_IV: ${self:custom.secrets.nuts.iv}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: POST\n          path: /sqrl\n  authenticate:\n    handler: src/handlers/authenticate.handler\n    description: Redirect page from /sqrl\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n      COOKIE_SECRET: ${self:custom.secrets.cookie.secret}\n      HMAC_SECRET: ${self:custom.secrets.nuts.hmac}\n      BLOWFISH_KEY: ${self:custom.secrets.nuts.key}\n      BLOWFISH_IV: ${self:custom.secrets.nuts.iv}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: GET\n          path: /authenticate\n  login:\n    handler: src/handlers/login.handler\n    description: Minimal SQRL auth page\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n      COOKIE_SECRET: ${self:custom.secrets.cookie.secret}\n      HMAC_SECRET: ${self:custom.secrets.nuts.hmac}\n      BLOWFISH_KEY: ${self:custom.secrets.nuts.key}\n      BLOWFISH_IV: ${self:custom.secrets.nuts.iv}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: GET\n          path: /sqrl\n  loggedin:\n    handler: src/handlers/loggedin.handler\n    description: Protected route\n    memorySize: 128\n    timeout: 30\n    environment:\n      URL_BASE: ${self:custom.apiBaseUrl}\n      COOKIE_SECRET: ${self:custom.secrets.cookie.secret}\n    events:\n      - http:\n          method: GET\n          path: /loggedin\n  logout:\n    handler: src/handlers/logout.handler\n    description: Logout\n    memorySize: 128\n    timeout: 30\n    environment:\n      URL_BASE: ${self:custom.apiBaseUrl}\n      COOKIE_SECRET: ${self:custom.secrets.cookie.secret}\n    events:\n      - http:\n          method: GET\n          path: /logout\n      - http:\n          method: POST\n          path: /logout\n\nresources:\n  Resources:\n    AppDBVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: 10.0.0.0/16\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n        InstanceTenancy: default\n    AppDBSubnetA:\n      Type: AWS::EC2::Subnet\n      DependsOn: AppDBVPC\n      Properties:\n        VpcId: !Ref AppDBVPC\n        AvailabilityZone: us-east-1a\n        CidrBlock: 10.0.0.0/24\n    AppDBSubnetB:\n      Type: AWS::EC2::Subnet\n      DependsOn: AppDBVPC\n      Properties:\n        VpcId: !Ref AppDBVPC\n        AvailabilityZone: us-east-1b\n        CidrBlock: 10.0.1.0/24\n    AppDBSubnetGroup:\n      Type: AWS::RDS::DBSubnetGroup\n      Properties:\n        DBSubnetGroupName: ${self:custom.applicationName}\n        DBSubnetGroupDescription: App DB group\n        SubnetIds:\n          - !Ref AppDBSubnetA\n          - !Ref AppDBSubnetB\n        Tags:\n          - Key: Application\n            Value: ${self:custom.applicationName}\n          - Key: Environment\n            Value: ${opt:stage,'dev'}\n          - Key: Service\n            Value: ${self:service}\n    AppDB:\n      Type: AWS::RDS::DBCluster\n      Properties:\n        DBClusterIdentifier: ${self:custom.applicationName}\n        DatabaseName: ${self:custom.database.database}\n        Engine: aurora-postgresql\n        EngineMode: serverless\n        MasterUsername: ${self:custom.database.username}\n        MasterUserPassword: ${self:custom.database.password}\n        DBSubnetGroupName: !Ref AppDBSubnetGroup\n        VpcSecurityGroupIds:\n          - !GetAtt AppDBVPC.DefaultSecurityGroup\n        ScalingConfiguration:\n          AutoPause: true\n        Tags:\n          - Key: Application\n            Value: ${self:custom.applicationName}\n          - Key: Environment\n            Value: ${opt:stage,'dev'}\n          - Key: Service\n            Value: ${self:service}\n\nOutputs:\n  DBHost:\n    Description: Connection host for the database\n    Value: !GetAtt AppDB.Endpoint.Address\n    Export:\n      Name: ${self:custom.applicationName}-DBHost\n  DBPort:\n    Description: Connection port for the database\n    Value: !GetAtt AppDB.Endpoint.Port\n    Export:\n      Name: ${self:custom.applicationName}-DBPort\n"]},{"id":229563536,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: temperature-sensor\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: eu-west-2\n  environment:\n    DYNAMODB_TABLE: \"temperature-sensor-readings-${opt:stage, self:provider.stage}\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline  # serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n    seed:\n      local:\n        sources:\n          - table: \"${self:provider.environment.DYNAMODB_TABLE}\"\n            sources:\n              - ./data/local.json\n    stages:\n      - local\n\npackage:\n include:\n   - readings/**\n exclude:\n   - node_modules/**\n\nfunctions:\n  create:\n    handler: src/create.handler\n    events:\n      - http:\n          path: temperature/locations/reading\n          method: POST\n  locations:\n    handler: src/locations.handler\n    events:\n      - http:\n          path: temperature/locations\n          method: GET\n  readings:\n    handler: src/readings.handler\n    events:\n      - http:\n          path: /temperature/locations/{location}/readings\n          method: GET\n\nresources:\n  Resources:\n    ReadingsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:provider.environment.DYNAMODB_TABLE}\"\n        KeySchema:\n          - AttributeName: location\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        AttributeDefinitions:\n          - AttributeName: location\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":231451633,"files":["service: serverless-waf-demo\n\nprovider:\n  name: aws\n  profile: playground\n  region: ${opt:region, 'eu-west-2'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    NAME: Owen Morgan\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  app-bucket: owenmorgan-waf-demo-${self:custom.stage}\n  app-domain: owenmorgan-waf-demo-${self:custom.stage}\n  app-ssl-cert: arn::/*****\n  s3Sync:\n    - bucketName: ${self:custom.app-bucket}\n      localDir: src/site/\n  associateWaf: # API Gateway Regional WAF\n      name: regional-${self:custom.stage}\n\nplugins:\n  - serverless-associate-waf\n  - serverless-s3-sync\n\nfunctions:\n    get-name-authorizer:\n        handler: src/handlers/get-name.handler\n\nresources:\n\n    # Application Bucket\n    Resources:\n      AppS3Bucket:\n        Type: AWS::S3::Bucket\n        Properties:\n            AccessControl: PublicRead\n            BucketName: \"${custom.app-bucket\"\n            WebsiteConfiguration:\n                IndexDocument: index.html\n      \n      # Application Bucket Policy\n      AppS3BucketPolicy:\n        Type: AWS::S3::BucketPolicy\n        Properties:\n            Bucket:\n                Ref: AppS3Bucket\n            PolicyDocument:\n                Statement:\n                    - Sid: PublicReadGetObject\n                      Effect: Allow\n                      Action:\n                          - s3:GetObject\n                      Resource:\n                          Fn::Join: ['', ['arn:aws:s3:::', { 'Ref': 'AppS3Bucket' }, '/*']]\n                      Principal:\n                        CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId\n      \n      # CloudFrontOriginAccessIdentity\n      CloudFrontOriginAccessIdentity:\n        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n        Properties:\n          CloudFrontOriginAccessIdentityConfig:\n            Comment: !Ref AppS3Bucket\n\n      # Cloudfront Distribution\n      CloudFrontDistribution:\n        Type: AWS::CloudFront::Distribution\n        Properties:\n            DistributionConfig:\n                WebACLId: !Ref AppACLGlobal\n                Origins:\n                    - DomainName: ${self:custom.app-bucket}.s3.amazonaws.com\n                      Id: S3-${self:custom.app-domain}\n                      S3OriginConfig:\n                        OriginAccessIdentity: !Join\n                                  - \"\"\n                                  - - \"origin-access-identity/cloudfront/\"\n                                    - !Ref CloudFrontOriginAccessIdentity\n                Enabled: 'true'\n                Aliases:\n                    - ${self:custom.app-domain}\n                DefaultRootObject: index.html \n                CustomErrorResponses:\n                    - ErrorCode: 404\n                      ResponseCode: 200\n                      ResponsePagePath: /index.html\n                DefaultCacheBehavior:\n                    AllowedMethods:\n                        - GET\n                    TargetOriginId: S3-${self:custom.app-domain}\n                    ForwardedValues:\n                        QueryString: 'false'\n                        Cookies:\n                            Forward: none\n                    ViewerProtocolPolicy: redirect-to-https\n                ViewerCertificate:\n                    AcmCertificateArn: ${self:custom.app-ssl-cert}\n                    SslSupportMethod: \"sni-only\"\n          \n      # Global WAF ACL (Cloudfront) #\n      WhitelistIPSetGlobal: \n        Type: AWS::WAF::IPSet\n        Properties: \n          Name: WhitelistGlobal-${self:custom.stage}\n          IPSetDescriptors: \n            - Type: IPV4 \n              Value: \"88.97.29.77/32\"\n\n      WhitelistGlobalRule: \n        Type: AWS::WAF::Rule\n        Properties: \n          Name: WhitelistGlobalRule-${self:custom.stage}\n          MetricName: WhitelistGlobalRule\n          Predicates: \n            - DataId: \n                Ref: WhitelistIPSetGlobal\n              Negated: false\n              Type: IPMatch  \n\n      AppACLGlobal:\n        Type: AWS::WAF::WebACL\n        Properties: \n          Name: global-${self:custom.stage}\n          DefaultAction: \n            Type: BLOCK\n          MetricName: AppACLGlobal-${self:custom.stage}\n          Rules: \n            - Action: \n                Type: ALLOW\n              Priority: 1\n              RuleId: \n                Ref: WhitelistGlobalRule\n      \n      # Regional WAF ACL (API Gateway) #\n      WhitelistIPSetRegional: \n        Type: AWS::WAFRegional::IPSet\n        Properties: \n          Name: WhitelistRegional-${self:custom.stage}\n          IPSetDescriptors: \n            - Type: IPV4 \n              Value: \"88.97.29.77/32\"\n\n      WhitelistRegionalRule: \n        Type: AWS::WAFRegional::Rule\n        Properties: \n          Name: WhitelistRegionalRule-${self:custom.stage}\n          MetricName: WhitelistRegionalRule\n          Predicates: \n            - DataId: \n                Ref: WhitelistIPSetRegional\n              Negated: false\n              Type: IPMatch  \n\n      AppACLRegional:\n        Type: AWS::WAFRegional::WebACL\n        Properties: \n          Name: regional-${self:custom.stage}\n          DefaultAction: \n            Type: BLOCK\n          MetricName: AppACLRegional-${self:custom.stage}\n          Rules: \n            - Action: \n                Type: ALLOW\n              Priority: 1\n              RuleId: \n                Ref: WhitelistRegionalRule"]},{"id":187248709,"files":["service: ServerlessHandsOnPart1\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n\nfunctions:\n  webapp:\n    handler: handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true","service: ServerlessHandsOnPart2\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  timeout: 30\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nfunctions:\n  crawler:\n    handler: handler.crawler\n    events:\n      - schedule: rate(10 minutes)","service: sample-app # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello","service: serverless-flask # 람다 이름\n\nplugins:\n  - serverless-python-requirements\n  - serverless-wsgi\n\ncustom:\n  wsgi:\n    app: app.app # 메인 엔트리\n    packRequirements: false\n  pythonRequirements:\n    dockerizeZip: non-linux\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: dev\n  region: ap-northeast-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:invokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::word-vector-text/*\"\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::word-vector-text-acc/*\"\n  environment:  \n    NLTK_DATA: './nltk_data'\n\nfunctions:\n  app:\n    handler: wsgi_handler.handler \n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":204666834,"files":["service:\n  name: ${self:custom.service_name}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${self:custom.region}\n  profile: default\n  environment:\n    DESTINATION_BUCKET: ${self:custom.destination_bucket}\n    REGION: ${self:custom.region}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.source_bucket}/*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.destination_bucket}/*\"\n\ncustom:\n  service_name: serverless-image-resizing\n  stage: ${opt:stage, self:custom.defaultStage}\n  source_bucket: ${env:SOURCE_BUCKET}\n  destination_bucket: ${env:DESTINATION_BUCKET}\n  region: ${env:REGION}\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  defaultStage: dev\n  stages:\n    - ${opt:stage}\n    - dev\n    - integration\n    - production\n  serverless-offline:\n    port: 4000\n\nfunctions:\n  resize_default:\n    handler: src/default/handler.main\n    events:\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .png\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .PNG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .JPG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .jpeg\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .JPEG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .gif\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/design/illustration-file/\n            - suffix: .GIF\n          existing: true\n  resize_avatar:\n    handler: src/avatar/handler.main\n    events:\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .png\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .PNG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .JPG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .jpeg\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .JPEG\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .gif\n          existing: true\n      - s3:\n          bucket: ${self:custom.source_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/user/avatar-file/\n            - suffix: .GIF\n          existing: true\n\npackage:\n  exclude:\n    - layer/**\n    - node_modules/**\n    - '!node_modules/babel-runtime/**'\n    - '!node_modules/sharp/**'\n"]},{"id":200735847,"files":["service: cloudformation-scheduled-tasks\nplugins:\n  - serverless-sam\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    TASKS_TABLE:\n      Ref: tasksTable\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        Ref: DestinationArns\n    - Effect: Allow\n      Action:\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt: ['tasksTable', 'Arn']\nfunctions:\n  ingest:\n    handler: src/ingest.handler\n    events:\n      - sns:\n          arn:\n            Ref: ingestTopic\n  schedule:\n    handler: src/schedule.handler\n    timeout: 60\n    events:\n      - schedule:\n          rate:\n            Ref: PollingSchedule\nresources:\n  Resources:\n    ingestTopic:\n      Type: AWS::SNS::Topic\n      Properties: {}\n    tasksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        KeySchema:\n          - AttributeName: taskId\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: taskId\n            AttributeType: 'S'\n        ProvisionedThroughput:\n          ReadCapacityUnits:\n            Ref: ReadCapacityUnits\n          WriteCapacityUnits:\n            Ref: WriteCapacityUnits\n  Parameters:\n    PollingSchedule:\n      Default: rate(5 minutes)\n      Type: String\n      Description: The CloudWatch ScheduleExpression defining the interval the polling Lambda runs at.\n    ReadCapacityUnits:\n      Default: 1\n      Type: Number\n      Description: The read capacity units for the Scheduled Tasks DynamoDB table.\n    WriteCapacityUnits:\n      Default: 1\n      Type: Number\n      Description: The write capacity units for the Scheduled Tasks DynamoDB table.\n    DestinationArns:\n      Default: ''\n      Type: CommaDelimitedList\n      Description: A comma-separated list of possible destination SNS topic ARNs for permissioning the polling Lambda.\n  Outputs:\n    IngestSNSTopicArn:\n      Description: The ARN of the Ingest SNS topic\n      Value:\n        Ref: ingestTopic\n"]},{"id":163687945,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: splitcloud-serverless-charts-service # NOTE: update this with your service name\n\ncustom:\n  domains:\n    prod: rest.splitcloud-app.com\n    dev: dev-rest.splitcloud-app.com\n  myStage: ${opt:stage, self:provider.stage}\n  prod: \n    schedule: cron(0 18 ? * MON *)\n    schedule_token: rate(15 minutes)\n    schedule_discovery: rate(1 day)\n    schedule_country_charts: cron(0 19 ? * MON *)\n  dev: \n    schedule: \n    schedule_token:\n    schedule_discovery:\n    schedule_country_charts:\n  bucket: \"www.splitcloud-app.com\"\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.myStage}}\n    basePath: ''\n    stage: \"${self:custom.myStage}\"\n    createRoute53Record: true\n  \n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 200\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule}\n  charts_endpoint:\n    handler: handler.chartsEndpoint\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: charts\n          method: get\n  top_regions:\n    handler: handler.topRegions\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: regions\n          method: get\n  log_collector:\n    handler: handler.logCollector\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: app/feedback/{deviceid}\n          method: POST\n          request:\n            parameters:\n              paths:\n                deviceid: true\n  radio_countrycodes:\n    handler: handler.radioCountryCodes\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: radio/countrycodes\n          method: get\n  radioListByCountrycode:\n    handler: handler.radioListByCountryCode\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: radio/list/countrycode/{countrycode}\n          method: get\n          request:\n            parameters:\n              paths:\n                countrycode: true\n  yearWrapped:\n    handler: handler.yearWrappedTopList\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: wrapped/{year}/{deviceId}/{side}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                year: true\n                deviceId: true\n                side: true\n  country_charts:\n    handler: handler.updateCountryCharts\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_country_charts}\n  token:\n    handler: handler.selectActiveToken\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_token}\n  discovery:\n    handler: handler.updateDiscoveryApi\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_discovery}\nplugins:\n  - serverless-domain-manager\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":207469509,"files":["service: monitor-puppeteer\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - \"*/*\"\n\npackage:\n  exclude:\n    - chrome-aws-lambda/**\n    - node_modules/puppeteer/.local-chromium/**\n\nfunctions:\n  puppeteer-orchestrator:\n    handler: handler.index\n    timeout: 30\n    memorySize: 2048\n    events:\n      - http:\n          method: GET\n          path: /screenshot\n          contentHandling: CONVERT_TO_BINARY\n    layers:\n      - { Ref: ChromeLambdaLayer }\n\nlayers:\n  chrome:\n    path: layer\n"]},{"id":227495321,"files":["service: serverless-cdn\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  versionFunctions: false\n  logRetentionInDays: 3\n  deploymentBucket:\n    serverSideEncryption: AES256\n    blockPublicAccess: true\n  stackTags: ${self:custom.config.tags}\n\npackage:\n  individually: true\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-finch\n  - serverless-webpack\n\ncustom:\n  config: ${file(./stages/${self:provider.stage}.yml)}\n  client:\n    bucketName: '${self:custom.config.domain}'\n    distributionFolder: dist\n    indexDocument: 'index.html'\n    errorDocument: 'index.html'\n    manageResources: false\n    objectHeaders:\n      ALL_OBJECTS:\n        - name: 'Cache-Control'\n          value: 'max-age=2628000, public' # 1 month in seconds\n      'index.html': # https://stackoverflow.com/a/2068407\n        - name: 'Cache-Control'\n          value: 'no-cache, no-store, must-revalidate, max-age=0'\n        - name: Pragma\n          value: 'no-cache'\n        - name: Expires\n          value: '0'\n    sse: AES256\n    uploadOrder:\n      - .*\n      - index\\.html\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: npm\n\nfunctions:\n  defaultIndex:\n    name: '${self:service}-${self:provider.stage}-origin-request-defaultIndex'\n    handler: functions/default_index.handler\n    description: CloudFront origin-request default index handler\n    timeout: 1 # seconds\n    memorySize: 128 # megabytes\n    events:\n      - cloudFront:\n          eventType: origin-request\n\n  webSecurity:\n    name: '${self:service}-${self:provider.stage}-origin-response-webSecurity'\n    handler: functions/web_security.handler\n    description: CloudFront origin-response web security handler\n    timeout: 1 # seconds\n    memorySize: 128 # megabytes\n    events:\n      - cloudFront:\n          eventType: origin-response\n\nresources:\n  - ${file(resources/acm_cf.yml)}\n  - ${file(resources/cloudfront_cf.yml)}\n  - ${file(resources/route53_cf.yml)}\n  - ${file(resources/s3_cf.yml)}\n"]},{"id":228188602,"files":["\nservice: lambda-norma\n\nplugins:\n  - serverless-step-functions\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  fetch:\n    handler: functions/fetch.handler\n  decode:\n    handler: functions/decode.handler\n  dec:\n    handler: functions/dec.handler\n  inc:\n    handler: functions/inc.handler\n  beqz:\n    handler: functions/beqz.handler\n  hasNextInstruction:\n    handler: functions/hasNextInstruction.handler\n\nstepFunctions:\n  validate: true\n  stateMachines:\n    lambdaNormaFn:\n      name: lambdaNormaStateMachine\n      definition:\n        Comment: \"NORMA-like machine simulator\"\n        StartAt: Fetch\n        States:\n          Fetch:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [fetch, Arn]\n            Next: Decode\n          Decode:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [decode, Arn]\n            Next: Execute\n          Execute:\n            Type: Choice\n            Choices:\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"dec\"\n                Next: dec\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"inc\"\n                Next: inc\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"beqz\"\n                Next: beqz\n          dec:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [dec, Arn]\n            Next: VerifyNextInstruction\n          inc:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [inc, Arn]\n            Next: VerifyNextInstruction\n          beqz:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [beqz, Arn]\n            Next: VerifyNextInstruction\n          VerifyNextInstruction:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [hasNextInstruction, Arn]\n            Next: HasNextInstruction?\n          HasNextInstruction?:\n            Type: Choice\n            Choices:\n              - Variable: \"$.body.hasNextInst\"\n                BooleanEquals: false\n                Next: Halt\n              - Variable: \"$.body.hasNextInst\"\n                BooleanEquals: true\n                Next: RepeatCycle\n          RepeatCycle:\n            Type: Pass\n            Next: Fetch\n          Halt:\n            Type: Pass\n            End: true"]},{"id":224912516,"files":["# serverless deploy --aws-profile tanmay\nservice: my-notes\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python3.8\n  stage: dev\n  region: us-east-1\n  profile: tanmay\n  environment:\n    DYNAMODB_TABLE_NOTES: 'notes'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      # Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  updateNotes:\n    handler: notes.update\n    events:\n      - http:\n          path: update\n          method: post\n          cors: true\n\n  getNotes:\n    handler: notes.get\n    events:\n      - http:\n          path: get\n          method: get\n          cors: true\n  \nresources:\n  Resources:\n\n    NotesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE_NOTES}\n"]},{"id":205712964,"files":["service: hills-api\n\nprovider:\n  name: aws\n  region: ${opt:region, '${file(./serverless-shared.yml):constants.defaultRegion}'}\n  runtime: nodejs10.x # matches package.json:engines\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128 # MB, sls default is 1024, aws default is 128\n  timeout: 3 # seconds, sls default is 6, aws default is 3\n  apiGateway:\n    minimumCompressionSize: 1024 # bytes, this enables compression\n  # Only the graphql lambda needs this, but a single shared role is much easier to configure\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - rds-data:ExecuteStatement\n      Resource:\n        - Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterArn\n    - Effect: Allow\n      Action:\n        - secretsmanager:GetSecretValue\n      Resource:\n        - Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n\nplugins:\n  - serverless-api-stage\n  - serverless-offline\n  - serverless-plugin-git-variables\n  - serverless-prune-plugin\n\npackage:\n  exclude:\n    - ./**\n    - '!./node_modules/**' # don't re-include this; it'd override excludeDevDependencies\n  excludeDevDependencies: true # default is true; fyi\n  include:\n    - ./src/**/!(*.spec).js\n    - ./src/**/rhbSections.json\n\nfunctions:\n  graphql:\n    handler: src/handlers/graphql.fn\n    description: ${self:custom.versionInfo}\n    memorySize: 256 # MB, sls default is 1024, aws default is 128\n    timeout: 6 # seconds, sls default is 6, aws default is 3. Needs to be longer than Aurora Severless connect timeout for when it's sleeping\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    environment:\n      # Due to lack of support for cross-stack references in Serverless offline, ARNs must be manually copied into here before running\n      DATABASE_CLUSTER_ARN:\n        Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterArn\n      DATABASE_CLUSTER_SECRET_ARN:\n        Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n      NODE_ENV: production # for Express, and anything else that might care\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n      - http:\n          path: graphql\n          method: get\n          cors: true\n  playground:\n    handler: src/handlers/playground.fn\n    description: ${self:custom.versionInfo}\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    events:\n      - http:\n          path: playground\n          method: get\n  schemaDump:\n    handler: src/handlers/schemaDump.fn\n    description: ${self:custom.versionInfo}\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    events:\n      - http:\n          path: schema\n          method: get\n\ncustom:\n  exportGitVariables: false\n  prune:\n    automatic: true\n    number: 3\n  stageSettings:\n    MethodSettings:\n      # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\n      ThrottlingBurstLimit: 20\n      ThrottlingRateLimit: 20\n  versionInfo: ${git:branch}:${git:describeLight} isDirty=${git:isDirty} \"${git:message}\"\n","#\n# Separate stack for the database, to allow separate deployment.\n#\n# It doesn't need to be deployed nearly as often as the lambdas, which was a problem when\n# they were the same serverless.yml (and hence CloudFormation stack).\n#\nservice: hills-api-db\n\nprovider:\n  name: aws\n  # File reference path is relative to working director, not this file\n  region: ${opt:region, '${file(./serverless-shared.yml):constants.defaultRegion}'}\n  stage: ${opt:stage, 'dev'}\n\nplugins:\n  - serverless-plugin-scripts\n\nresources:\n  Outputs:\n    HillsApiDatabaseClusterArn:\n      Export:\n        Name: ${self:provider.stage}-HillsApiDatabaseClusterArn\n      Value:\n        # RDS::DBCluster doesn't support Fn::GetAtt for Arn, so assemble it manually\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:rds'\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - cluster\n            - hills-api-db-${self:provider.stage}\n    HillsApiDatabaseClusterSecretArn:\n      Export:\n        Name: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n      Value:\n        Ref: HillsDatabaseSecret\n  Resources:\n    HillsDatabaseSecret:\n      Type: AWS::SecretsManager::Secret\n      Properties:\n        Name: hills-db-credentials-${self:provider.stage}\n        Description: Hills RDS DB auto-generated user password\n        GenerateSecretString:\n          SecretStringTemplate: '{\"username\": \"admin\"}'\n          GenerateStringKey: 'password'\n          PasswordLength: 30\n          ExcludeCharacters: '\"@/\\'\n\n    HillsApiDatabase:\n      Type: AWS::RDS::DBCluster\n      Properties:\n        DBClusterIdentifier: hills-api-db-${self:provider.stage}\n        # Create an initial database in this cluster\n        DatabaseName: HILLS\n        Engine: aurora\n        EngineMode: serverless\n        ScalingConfiguration:\n          AutoPause: true\n          MaxCapacity: 1\n          MinCapacity: 1\n          SecondsUntilAutoPause: 600 # 10 minutes\n        # Enable data API (supported via CloudFormation since December 2019)\n        EnableHttpEndpoint: true\n        # Aurora Serverless currently doesn't support IAM Database Authentication\n        # EnableIAMDatabaseAuthentication: true\n        MasterUsername: admin\n        MasterUserPassword:\n          Fn::Join:\n            - ':'\n            - - '{{resolve:secretsmanager'\n              - Ref: HillsDatabaseSecret\n              - 'SecretString:password}}'\n\ncustom:\n  scripts:\n    commands:\n      # Due to https://github.com/svdgraaf/serverless-pseudo-parameters/issues/25, ARNs must be manually copied into here before running\n      deploy-data: node ./database/populate/populate.js ${self:provider.region} arn:cluster arn:cluster-secret\n      deploy-tables: node ./database/createTables.js ${self:provider.region} arn:cluster arn:cluster-secret\n","constants:\n  # Run lambdas & database in same region to avoid data transfer costs.\n  # Ireland: closest region that supports Data API for Aurora Serverless.\n  defaultRegion: eu-west-1\n"]},{"id":227540406,"files":["service: hello-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev # stage: dev (개발), prod (운영)\n  region: ap-northeast-2\n\nfunctions:\n  # stories 함수\n  createStory:\n    handler: src/stories.createStory\n    events:\n      - http:\n          path: stories\n          method: post\n  readStories:\n    handler: src/stories.readStories\n    events:\n      - http:\n          path: stories\n          method: get\n  readStory:\n    handler: src/stories.readStory\n    events:\n      - http:\n          path: stories/{id}\n          method: get\n  updateStory:\n    handler: src/stories.updateStory\n    events:\n      - http:\n          path: stories/{id}\n          method: patch\n  deleteStory:\n    handler: src/stories.deleteStory\n    events:\n      - http:\n          path: stories/{id}\n          method: delete\n\n  # 초기 테스트 함수\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n"]},{"id":228549353,"files":["service: aws-api-lambda-s3-image-upload\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource: \"arn:aws:s3:::input-code\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource: \"arn:aws:s3:::input-code/*\"\n\nfunctions:\n  index:\n    handler: handler.handler\n    events:\n      - http: POST handler"]},{"id":203083232,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.${self:provider.stage}.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  dynamoDB:\n    devProvisionedThroughput:\n      ReadCapacityUnits: 1\n      WriteCapacityUnits: 1\n    prodProvisionedThroughput:\n      ReadCapacityUnits: 2\n      WriteCapacityUnits: 2\n\nprovider:\n  name: aws\n  funcPrefix: func-${env:FUNC_PREFIX}\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n  environment:\n    DATA_01: hello ${self:provider.stage}\n    DATA_02: boom boom\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n    environment:\n      GRAPHQL_ENV_01: graphql_01\n      GRAPHQL_ENV_02: graphql_02\n  rest:\n    handler: handler.rest\n    events:\n      - http:\n          path: /rest\n          method: ANY\n    environment:\n      REST_ENV_01: rest_01\n      REST_ENV_02: rest_02\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: \n          - AttributeName: id\n            AttributeType: N\n          - AttributeName: username\n            AttributeType: S\n          - AttributeName: data\n            AttributeType: M\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.dynamoDB.${self:provider.stage}ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: stress-algorithm\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  local: ${file(./config/local_04.yml):stages}\n  vpcStackName: ${self:custom.local.${self:custom.stage}.cfStacks.VPC}\n  alertingStackName: ${cf:${self:custom.vpcStackName}.Alerting}\n  alertingARN: ${cf:${self:custom.alertingStackName}.TopicARN}\n  prefix: ${self:custom.local.${self:custom.stage}.coolio.prefix}\n  coolioStack: coolioBipbip-${self:custom.stage}\n  coolioDataName:\n    'Fn::ImportValue': 'coolioData-Name-${self:custom.stage}'\n  coolioResultName:\n    'Fn::ImportValue': 'coolioResult-Name-${self:custom.stage}'\n  coolioDataARN:\n    'Fn::ImportValue': 'coolioData-ARN-${self:custom.stage}'\n  coolioResultARN:\n    'Fn::ImportValue': 'coolioResult-ARN-${self:custom.stage}'\n  customDomain:\n    domainName: api.${self:custom.local.${self:custom.stage}.domain}\n    basePath: ''\n    certificateName: ${self:custom.local.${self:custom.stage}.certdomain}\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n    endpointType: 'regional'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  region: ap-southeast-2\n  logRetentionInDays: ${self:custom.local.${self:custom.stage}.LogRetentionInDays}\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchGetItem\n        - dynamodb:DescribeTable\n        - dynamodb:GetRecords\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n      Resource:\n        - ${self:custom.coolioDataARN}\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchGetItem\n        - dynamodb:GetRecords\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - ${self:custom.coolioResultARN}\n  vpc: \n    securityGroupIds:\n      - ${cf:${self:custom.vpcStackName}.LambdaExecSG}\n    subnetIds:\n      - ${cf:${cf:${self:custom.vpcStackName}.Vpc}.SubnetAPrivate}\n      - ${cf:${cf:${self:custom.vpcStackName}.Vpc}.SubnetBPrivate}\n  notificationArns:\n    - ${self:custom.alertingARN}\n  environment:\n    SERVICE: ${self:service}\n    STAGE: ${self:custom.stage}\n    COOLIO_DATA_TABLE: ${self:custom.coolioDataName}\n    COOLIO_RESULT_TABLE: ${self:custom.coolioResultName}\n    AUTH_ENDPOINT: ${self:custom.local.${self:custom.stage}.auth.endpoint}\n    AUTH_ADMIN_USER: ${self:custom.local.${self:custom.stage}.auth.admin_user}\n    AUTH_ADMIN_PWD: ${self:custom.local.${self:custom.stage}.auth.admin_pwd}\n  profile: coolio_stress_${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: index.handler\n    events:\n     - http:\n         path: /graphql\n         method: ANY\n     - http:\n         path: /graphql/{any+}\n         method: ANY","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages.${self:custom.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/${self:provider.stage}_schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages}\n  messageUrl:\n    dev: http://example.com\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n    environment:\n      MSG_URL: ${self:custom.messageUrl.${self:custom.stage}}\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.${self:provider.stage}.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n\n"]},{"id":224974239,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: smartsoftware-website\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n  - serverless-dotenv-plugin\n  - serverless-offline\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\npackage:\n  individually: true\n  excludeDevDependencies: true\n\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${env:NODE_ENV}\n  region: eu-central-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\ncustom:\n  #######################################\n  # Unique ID included in resource names.\n  # Replace it with a random value for every first distribution.\n  # https://www.random.org/strings/?num=1&len=6&digits=on&loweralpha=on&unique=on&format=html&rnd=new\n  stackId: xhs7xa\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${env:DOMAIN}\n    basePath: ''\n    stage: ${env:NODE_ENV}\n    createRoute53Record: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":213709597,"files":["service: serverless-webpack-boilerplate\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n#  stage: dev\n#  region: us-east-1\n\n#  environment:\n#    variable1: value1\n\n#package:\n#  include:\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: app/index.run\n"]},{"id":226877877,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: yelp-scraper\nplugins:\n  - serverless-offline-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: ap-south-1\n  environment:\n    DYNAMODB_TABLE: yelp-rating\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:DeleteItem\"\n      Resource: \"arn:aws:dynamodb:ap-south-1:634148783116:table/yelp-rating\"\n\n# you can add packaging information here\npackage:\n  include:\n    - utils/**\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n  launch_scapers:\n    handler: handler.launch_scapers\n    events:\n      - schedule: rate(1 minute)\n      \n      \n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":224933189,"files":["myApp:\n component: serverless-next.js\n#  inputs:\n#   domain:\n#     - ${env.subdomain}\n#     - ${env.domain}\n","service: python-api\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: ${self:custom.profiles.${self:provider.stage}}\n  stage: ${opt:stage, self:custom.defaultStage}\n  memorySize: 128\n  logRetentionInDays: 14\n  timeout: 15\n  region: ${self:custom.configuration.region, opt:region}\n\n  # iamRoleStatements:\n  #   - Effect: Allow\n  #     Action:\n  #       - iam:permsission\n  #     Resource:\n  #       - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:x:x:x\n  environment:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    ACCOUNT_ID: \"#{AWS::AccountId}\"\n\nplugins:\n  - serverless-python-requirements\n  - serverless-pseudo-parameters\n  - serverless-prune-plugin\n  - serverless-wsgi\n  - serverless-offline-python\n\ncustom:\n  serverless-offline:\n    port: 4000\n  configuration: ${file(./config/${self:provider.stage}.yml):config}\n  defaultStage: dev\n  profiles:\n    dev: personal\n    staging: personal\n  ## PLUGINS\n  prune:\n    automatic: true\n    number: 5\n  pythonRequirements:\n    dockerizePip: non-linux\n  wsgi:\n    app: src/app.app\n    packRequirements: false\n\n  # layers:\n  #   - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:layer-name:version\npackage:\n include:\n   - src/**\n exclude:\n   - __pycache__/**\n   - venv/**\n   - node_modules/**\n   - package.json\n   - yarn.lock\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n          # cors: true\n      - http:\n          path: '{proxy+}'\n          method: ANY\n          # cors: true\n    # environment:\n    # layers: ${self:custom.layers}\n    tags:\n      service: api\n","---\nsecrets:\n  staging:\n    SECRET: ''\n"]},{"id":223614151,"files":["service: lambda-s3-cleaner\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-south-1\n  profile: serverless-admin\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \"*\"\n      Resource: \"arn:aws:s3:::cert-s3-bucket\"\n\nfunctions:\n  s3-cleaner:\n    handler: handler.s3Cleaner\n    events:\n      - http:\n          path: s3Cleaner\n          method: get\n          cors: true\n      - schedule: rate(1 day)\n\nplugins:\n  - serverless-offline\n"]},{"id":225247404,"files":["service: serverless-rest-api-with-dynamodb\n\nplugins:\n  - serverless-localstack\n\ncustom:\n  localstack:\n    host: http://localhost\n    stages:\n      - local\n    debug: true\n  s3Bucket: UserUploads\n  dynamoDBTable: Users\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, env:AWS_STAGE, 'local'}\n  region: ${opt:region, env:AWS_REGION, 'us-east-1'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.s3Bucket}/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoDBTable}\"\n\nfunctions:\n  authorize:\n    handler: verify-auth-token/index\n    package:\n      include:\n        - verify-auth-token/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n\n  user-create:\n    handler: user-create/index\n    events:\n      - http:\n          path: admin/createUser\n          method: post\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-create/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      SALT_ROUNDS: 10\n\n  user-list-all:\n    handler: user-list-all/index\n    events:\n      - http:\n          path: admin/list_all_users\n          method: get\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-list-all/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n  \n  user-delete:\n    handler: user-delete/index\n    events:\n      - http:\n          path: admin/delete_user/{id}\n          method: delete\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-delete/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n\n  user-update:\n    handler: user-update/index\n    events:\n      - http:\n          path: admin/update_user/{id}\n          method: put\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-update/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n\n  login:\n    handler: login/index\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n    package:\n      include:\n        - login/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n  \n  register:\n    handler: register/index\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n    package:\n      include:\n        - register/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n      SALT_ROUNDS: 10\n  \n  # update-profile:\n  #   handler: update-profile/index\n  #   events:\n  #     - http:\n  #         path: user/{id}\n  #         method: put\n  #         cors: true\n\n  # password-reset:\n  #   handler: password-reset/index\n  #   events:\n  #     - http:\n  #         path: password_reset\n  #         method: post\n  #         cors: true\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        TableName: ${self:custom.dynamoDBTable}\n    UserUploads:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - \"Authorization\"\n              AllowedMethods:\n                - GET\n              AllowedOrigins:\n                - \"*\"\n            - AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    # requestQueue:\n    #   Type: AWS::SQS::Queue\n    #   Properties:\n    #     QueueName: requestQueue"]},{"id":145057921,"files":["service: serverless-lambda-mailer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n"]},{"id":111224495,"files":["service: bakerybackend\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: eu-central-1\n\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:eu-central-1:*:*\n\nfunctions:\n  create-product:\n    handler: create.main\n    events: \n      - http:\n          path: products\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  create-offer:\n    handler: create.offer\n    events:\n      - http:\n          path: offers\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  create-news:\n    handler: create.news\n    events:\n      - http:\n          path: news\n          method: post\n          cors: true\n          authorizer: aws_iam\n  \n  list-categories:\n    handler: list.main\n    events:\n      - http:\n          path: categories\n          method: get\n          cors: true\n\n  list-products:\n    handler: list.products\n    events:\n      - http:\n          path: categories/{category}\n          method: get\n          cors: true\n  \n  list-offers:\n    handler: list.offer\n    events:\n      - http:\n          path: offers\n          method: get\n          cors: true\n\n  list-news:\n    handler: list.news\n    events:\n      - http:\n          path: news\n          method: get\n          cors: true\n\n  get-product:\n    handler: get.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: get\n          cors: true\n\n  get-news:\n    handler: get.news\n    events:\n      - http:\n          path: news/{id}\n          method: get\n          cors: true\n\n  update-product:\n    handler: update.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete-product:\n    handler: delete.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  update-news:\n    handler: update.news\n    events:\n      - http:\n          path: news/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete-news:\n    handler: delete.news\n    events:\n      - http:\n          path: news/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  search-products:\n    handler: list.search\n    events:\n      - http:\n          path: search/{value}\n          method: get\n          cors: true\n"]},{"id":223563408,"files":["service: ${self:custom.serviceName}\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  memorySize: 256\n  reservedConcurrency: 2\n  timeout: 6\n  stage: ${opt:stage, 'local'}\n  region: ${env:region, 'eu-central-1'}\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:eu-central-1:*:*'\n  environment:\n    AWS_DNAMO_DB_NAME: ${env:AWS_DNAMO_DB_NAME}\n    AWS_DNAMO_DB_ENDPOINT: ${env:AWS_DNAMO_DB_ENDPOINT}\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 5\n\nfunctions:\n  ${file(./handlers/endpoints/index.yml)}\n\nresources:\n  Resources:\n    dataTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:AWS_DNAMO_DB_NAME}\n        AttributeDefinitions:\n          - AttributeName: keyHash\n            AttributeType: S\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: keyHash\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  serviceName: ${opt:name, 'serverless-secure-get-set'}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n\n  serverless-offline:\n    host: '0.0.0.0'\n    port: '4000'\n\n  dynamodb:\n  # If you only want to use DynamoDB Local in some stages, declare them here\n    stages:\n      - local\n    start:\n      port: 8000\n      inMemory: true\n      heapInitial: 200m\n      heapMax: 1g\n      migrate: true\n      seed: true\n      convertEmptyValues: true\n    seed:\n      local:\n        sources:\n          - table: ${env:AWS_DNAMO_DB_NAME}\n            sources: [./__mock__/dynamo-seed.json]\n    # Uncomment only if you already have a DynamoDB running locally\n    # noStart: true\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n\npackage:\n  excludeDevDependencies: true\n  exclude:\n    - ./__test__/**\n    - ./__mock__/**\n    - ./.nvmrc\n    - ./handlers/**\n    - ./.dynamodb/**\n"]},{"id":220576347,"files":["service: projetovamosachina\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  credentials: ${file(./.env.yml):credentials}\n  deploymentBucket:\n    name: 'vamosaachina-backend'\n\ncustom:\n  writeEnvVars:\n    AWS_ACCESS_KEY_ID: ${file(./.env.yml):${opt:stage}.AWS_ACCESS_KEY_ID}\n    AWS_SECRET_ACCESS_KEY: ${file(./.env.yml):${opt:stage}.AWS_SECRET_ACCESS_KEY}\n    TOKEN: ${file(./.env.yml):${opt:stage}.TOKEN}\n    EMAIL: ${file(./.env.yml):${opt:stage}.EMAIL}\n    DATABASE: ${file(./.env.yml):${opt:stage}.DATABASE}\n    SANDBOX: ${file(./.env.yml):${opt:stage}.SANDBOX}\n    SANDBOX_EMAIL: ${file(./.env.yml):${opt:stage}.SANDBOX_EMAIL}\n    NOTIFICATIONEMAIL: ${file(./.env.yml):${opt:stage}.NOTIFICATIONEMAIL}\n    NOTIFICATION_URL: ${file(./.env.yml):${opt:stage}.NOTIFICATION_URL}\n    RSAKEY: ${file(./.env.yml):${opt:stage}.RSAKEY}\n    ORIGIN: ${file(./.env.yml):${opt:stage}.ORIGIN}\n  serverless-layers:\n    packageManager: yarn\n  sucrase:\n    sources:\n      - config.js\n      - index.js\n      - src/**/*.js\n\n    transforms:\n      - imports\n\nplugins:\n  - serverless-layers\n  - serverless-sucrase\n  - serverless-plugin-write-env-vars\n\nfunctions:\n  api:\n    handler: index.handler\n    events:\n      - http: ANY {proxy+}\n        cors: true\n"]},{"id":111238769,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: microcosm2rss\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n  environment:\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  microcosm:\n    handler: handler.microcosm\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: /\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/xml'\"\n            template: $input.path('$')\n"]},{"id":223569144,"files":["service: fastify-link-shortener\n\nplugins:\n  - serverless-offline\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\npackage:\n  exclude:\n    - README.md\n\ncustom:\n  stage: ${self:provider.stage}\n  linkTableName: link-table-${self:custom.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stackName: ${self:service}-${self:custom.stage}\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-west-1'}\n#  apiGateway:\n#    restApiId:\n#      Ref: FastifyLinkApi\n#    restApiRootResourceId:\n#      Fn::GetAtt:\n#        - FastifyLinkApi\n#        - RootResourceId\n\nfunctions:\n  shortener:\n    handler: src/handler/app.handler\n    name: ${self:service}-${self:custom.stage}\n    description: fastify link shortener\n    timeout: 30\n    memorySize: 128\n    iamRoleStatementsName: ${self:service}-${self:custom.stage}-role\n    iamRoleStatementsInherit: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        Resource:\n          { \"Fn::GetAtt\": [LinkTableDB, Arn] }\n    environment:\n      link_table_name: ${self:custom.linkTableName}\n    events:\n      - http:\n          path: /{id}\n          method: GET\n      - http:\n          path: /\n          method: POST\n\nresources:\n  Description: >\n    Fastify link shortener service\n  Resources:\n    LinkTableDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.linkTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        Tags:\n          - Key: 'Name'\n            Value: ${self:custom.linkTableName}\n          - Key: 'Environment'\n            Value: ${self:custom.stage}\n\n#    FastifyLinkApi:\n#      Type: AWS::ApiGateway::RestApi\n#      Properties:\n#        Name: FastifyLinkApi\n#    FastifyLinkApiMaping:\n#      Type: AWS::ApiGateway::BasePathMapping\n#      Properties:\n#        BasePath: l\n#        DomainName: your-url.com\n#        RestApiId:\n#          Ref: FastifyLinkApi\n#        Stage: dev\n"]},{"id":223435977,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: ${file(config.json):service}\n\npackage:\n  exclude:\n    - src/*.test.js\n    - \"*.test.js\"\n    - config.sample.json\n    - fixtures/**\n    - coverage/**\n    - jest.config.js\n    - LICENSE\n    - README.md\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${file(config.json):profile}\n  stage: production\n  region: ${file(config.json):region}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n         - \"s3:GetObject\"\n       Resource: \"arn:aws:s3:::${file(config.json):originals}\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:CreateBucket\"\n         - \"s3:PutObject\"\n       Resource: \"arn:aws:s3:::${file(config.json):destination}\"\n\nfunctions:\n  resizeto404:\n    handler: handler.resizeto\n    events:\n      - http:\n          path: resizeto404\n          method: get\n\n# resources:\n#   Resources:\n#     OriginalsS3Bucket:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${file(config.json):originals}\n#     DestinationS3Bucket:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${file(config.json):destination}\n#         AccessControl: PublicRead\n#         WebsiteConfiguration:\n#           IndexDocument: index.html\n#           ErrorDocument: error.html\n#           RoutingRules:\n#             - RedirectRule:\n#                 HostName:\n#                   Fn::Join:\n#                     - ''\n#                     - - Ref: ApiGatewayRestApi\n#                       - \".execute-api.${self:provider.region}.amazonaws.com/\"\n#                 HttpRedirectCode: 307\n#                 Protocol: https\n#                 ReplaceKeyPrefixWith: \"${self:provider.stage}/resizeto404?key=\"\n#               RoutingRuleCondition:\n#                 HttpErrorCodeReturnedEquals: 404\n"]},{"id":223249863,"files":["service: azure-ml-image-labeling-service\n\nprovider:\n  name: azure\n  location: North Europe\n  runtime: nodejs10.x\n  environment:\n    COMPUTER_VISION_SUBSCRIPTION_KEY: ${env:COMPUTER_VISION_SUBSCRIPTION_KEY}\n    COMPUTER_VISION_ENDPOINT: ${env:COMPUTER_VISION_ENDPOINT}\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  getImageLabels:\n    handler: getImageLabels.handler\n    events:\n      - http: true\n        x-azure-settings:\n          name: req\n          methods:\n            - post\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: $return\n"]},{"id":139435352,"files":["# serverless.yml\n\nservice: ichen-lessons-bot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'"]},{"id":158952256,"files":["service: wozitech-alexa-skills\n\ncustom:\n  environment: ${opt:stage, 'development'}\n  bucketName: \"${self:custom.environment}-thisbucket\"\n  region: ${opt:region, 'eu-west-1'}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: serverless-admin\n  region: ${self:custom.region}\n  endpointType: REGIONAL\n  stage: ${opt:stage, 'development'}\n  timeout: 15\n  memorySize: 128\n  environment:\n    LOG_LEVEL: 1      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n    SLACK_LEVEL: 1          # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n  role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_lambda_basic_role\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n  exclude:\n    - '**/*'\n    - .git/**\n\nfunctions:\n  myBuses:\n    handler: myBuses.handler\n    environment:\n      TFL_API_SECRET_ID: 'TFL_API_Portal'\n      LOG_LEVEL: 3      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n      SLACK_WEBHOOK: 'SLACK_MY_BUSES'\n      SLACK_LEVEL: 5          # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n    role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_tfl_lambda_role    # note, the name of the role includes the region, but with underscores\n    events:\n      - alexaSkill: amzn1.ask.skill.2ba78764-0a67-481f-907a-3f7c08287aeb\n    tags:\n      application: \"wit-home\"\n      company: \"WOZiTech\"\n    package:\n      include:\n        - myBuses.js\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies"]},{"id":220962170,"files":["tenant: demo # Enter your tenant name here\napp: serverless-test # Enter your application name here\nservice: demo-crud\n\nframeworkVersion: \">=1.38.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  createUser:\n    handler: src/users.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n  getUsers:\n    handler: src/users.getUsers\n    events:\n      - http:\n          path: user\n          method: get\n          cors: true\n  updateUser:\n    handler: src/users.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n  deleteUser:\n    handler: src/users.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n"]},{"id":176828999,"files":["service: subnextsrv1\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n\nfunctions:\n  mongoms:\n    handler: mongomicrosrv.mongoms\n    events:\n      - http:\n          path: v1/{entity}/{id}\n          method: get\n          cors: true\n      - http:\n          path: v1/{entity}/q/{filter}\n          method: get\n          cors: true\n      - http:\n          path: v1/{entity}/{id}\n          method: post\n          cors: true\n      - http:\n          path: v1/{entity}\n          method: put\n          cors: true\n      - http:\n          path: v1/{entity}/{id}\n          method: delete\n          cors: true\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n  microservice:\n    handler: handler.microservice\n    events:\n      - http:\n          path: db\n          method: get\n          cors: true\n      - http:\n          path: db\n          method: options\n          cors: true\n      - http:\n          path: db\n          method: post\n          cors: true\n      - http:\n          path: db\n          method: delete\n          cors: true\n      - http:\n          path: db\n          method: put\n          cors: true\n  file:\n    handler: s3files.upload\n    events:\n      - http:\n          path: file\n          method: post\n          cors: true\n      - http:\n          path: file/{env}/{id}\n          method: get\n          cors: true\n    \n  \nplugins:\n- serverless-offline"]},{"id":109388002,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n\nservice: kilometrikisa-proxy\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including modules\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 7\n  stage: prod\n  region: eu-west-1\n\nfunctions:\n  kilometrikisa-handler:\n    handler: handler.kilometrikisa\n    events:\n      - http:\n          path: login\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n      - http:\n          path: contests\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n      - http:\n          path: results\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n                contestId: true\n                year: true\n      - http:\n          path: team\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n                teamUrl: true\n      - http:\n          path: updateLog\n          method: post\n          request:\n            parameters:\n              querystrings:\n                contestId: true\n                kmDate: true\n                kmAmount: true\n"]},{"id":215559356,"files":["service: wozitech-lorien-tech-test\n\ncustom:\n  environment: ${opt:stage, 'development'}\n  bucketName: \"${self:custom.environment}-thisbucket\"\n  region: ${opt:region, 'eu-west-1'}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: serverless-admin\n  region: ${self:custom.region}\n  endpointType: REGIONAL\n  stage: ${opt:stage, 'development'}\n  timeout: 5\n  memorySize: 128\n  environment:\n    LOG_LEVEL: 1      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n  #role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_lambda_basic_role\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n  exclude:\n    - '**/*'\n    - .git/**\n\nfunctions:\n  organisation:\n    handler: lorientechtest.handler\n    environment:\n      MONGODB_URI: ${env:MONGODB_URI}\n    #role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_tfl_lambda_role    # note, the name of the role includes the region, but with underscores\n    events:\n      - http: POST organisation\n      - http:\n          path: organisation/{name}\n          method: get\n          request:\n            parameters:\n              path:\n                name: true\n      - http:\n          path: organisation/{name}\n          method: put\n          request:\n            parameters:\n              path:\n                name: true\n      - http:\n          path: organisation/{name}\n          method: delete\n          request:\n            parameters:\n              path:\n                name: true\n    tags:\n      company: \"WOZiTech\"\n    package:\n      include:\n        - lorientechtest.js\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies"]},{"id":221357750,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: get-cancer-drugs\n# app and org for use with dashboard.serverless.com\napp: meo\norg: minhtc\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\nplugins:\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: handler.index\n    events:\n      - http:\n          method: get\n          path: /\n  info:\n    handler: handler.info\n    events:\n      - http:\n          method: get\n          path: /info\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":221124751,"files":["service: get-me-the-gif\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 2536\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::get-me-the-gif/*\"\n\nfunctions:\n  get-gif:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: GET\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-offline\n\npackage:\n  exclude:\n    - .git/**\n    - node_modules/puppeteer/.local-chromium/**\n    - node_modules/@ffmpeg-installer/win32-ia32/**\n    - node_modules/@ffmpeg-installer/linux-ia32/**\n    - node_modules/@ffmpeg-installer/win32-x64/**\n    - node_modules/@ffmpeg-installer/darwin-x64/**\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: get-me-the-gif\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n      - --ignore-certificate-errors\n    functions:\n      - get-gif\n\n"]},{"id":219853097,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\nservice: serverless-message\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n  apiKeys:\n    - name: firstKeyMessage\n      value: 9KJSDHSBHABHS78OFGJJHHJJKKL8\n  environment: #You need to provide these environment variables\n    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}\n    MESSAGE_TO: ${env:MESSAGE_TO} # email address to which the email is sent to\n    MESSAGE_FROM: ${env:MESSAGE_FROM} # from email address\n  usagePlan:\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 20\n      rateLimit: 10\n\nfunctions:\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: send-message\n          method: post\n          cors: true\n          private: true\n\nplugins:\n  - serverless-offline\n"]},{"id":122616946,"files":["service: serverless-name-generator\n\npackage:\n  exclude:\n    - .circleci\n    - coverage\n    - __test__\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  timeout: 4\n  versionFunctions: false # optional, default is true\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  generate:\n    handler: handler.handler # required, handler set in AWS Lambda\n    description: Generates unique and memorable names # optional, Description to publish to AWS\n    events:\n      - http:\n          path: generate\n          method: get\n          cors: true\n"]},{"id":220646417,"files":["service:\n  name: ex\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  apiGateway:\n    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: #DevSkim: ignore DS137138\n          method: get\n          path: hello\n"]},{"id":178757715,"files":["plugins:\n  - serverless-offline\n  - fullstack-serverless\n\nservice: twitter-stats\n\ncustom:\n  tableNameSnapshots: 'twitter-stats-snapshots-${self:provider.stage}'\n  tableNameAccounts: 'twitter-stats-accounts-${self:provider.stage}'\n  domains:\n    prod: twitterstats.joostschuur.com\n    stage: twitterstats-stage.joostschuur.com\n    dev: twitterstats-dev.joostschuur.com\n\n  fullstack:\n    domain: '${self:custom.domains.${self:provider.stage}}'\n    certificate: arn:aws:acm:us-east-1:030731221117:certificate/08b634e0-2d89-49d5-bc21-b18f85cafed9\n    bucketName: ${self:service}\n    distributionFolder: client/build\n    clientCommand: npm run build\n    clientSrcPath: client\n    indexDocument: index.html\n    errorDocument: index.html\n    singlePageApp: true\n    compressWebContent: true\n    apiPath: api\n\n  serverless-offline:\n    port: 3001\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: default\n  stage: ${opt:stage, 'dev'}\n  environment:\n    DB_SNAPSHOTS_TABLE_NAME: ${self:custom.tableNameSnapshots}\n    DB_ACCOUNTS_TABLE_NAME: ${self:custom.tableNameAccounts}\n    TWITTER_CONSUMER_KEY: ${file(./twitter_credentials.yml):CONSUMER_KEY}\n    TWITTER_CONSUMER_SECRET: ${file(./twitter_credentials.yml):CONSUMER_SECRET}\n    TWITTER_ACCESS_TOKEN_KEY: ${file(./twitter_credentials.yml):ACCESS_TOKEN_KEY}\n    TWITTER_ACCESS_TOKEN_SECRET: ${file(./twitter_credentials.yml):ACCESS_TOKEN_SECRET}\n\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n\n        Resource:\n          - { \"Fn::GetAtt\": [\"SnapshotsTable\", \"Arn\" ] }\n          - { \"Fn::GetAtt\": [\"AccountsTable\", \"Arn\" ] }\n\nfunctions:\n  accounts:\n    handler: handler.Accounts\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/accounts\n          method: get\n      - http:\n          path: ${self:custom.fullstack.apiPath}/accounts/{id}\n          method: get\n\n  updatecounts:\n    handler: handler.UpdateCounts\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/updatecounts\n          method: get\n\n  updatestats:\n    handler: handler.UpdateStats\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/updatestats\n          method: get\n      - schedule:\n          rate: rate(8 hours)\n          name: 'update-twitter-stats-${self:provider.stage}'\n          stage: ${self:provider.stage}\n\nresources:\n  Resources:\n    SnapshotsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"screen_name\"\n          AttributeType: \"S\"\n        - AttributeName: \"timestamp\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"screen_name\"\n          KeyType: \"HASH\"\n        - AttributeName: \"timestamp\"\n          KeyType: \"RANGE\"\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableNameSnapshots}\n    AccountsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"screen_name\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"screen_name\"\n          KeyType: \"HASH\"\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableNameAccounts}"]},{"id":215245007,"files":["service: test-crud-node-less\n\n# DRY constants: define all compound/generated names in one place\n# Override args are: .. defaults:\n# --app_acronym          test-crud-node-less\n# --aws_id              your_aws_account_id\n# --region              eu-central-1\n# --stage               dev\n\ncustom:\n\n  default_app_acronym: serverless-crud-node\n  default_stage: dev\n  default_region: eu-west-1\n  aws_account_ids:\n    dev: xxxx\n    stg: xxxxx\n    prod: xxxxx\n  region: ${opt:region, self:custom.default_region}\n  app_acronym: ${opt:app_acronym, self:custom.default_app_acronym}\n  aws_account_id: ${opt:aws_id, self:custom.aws_account_ids.${self:custom.stage}}\n  stage: ${opt:stage, self:custom.default_stage}\n  stack_name: ${self:custom.app_acronym}-${self:custom.stage}\n\n\n  # ------------------ DYN DATA ITEMS ------------------- #\n  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com\n  dynamodb_table_items: ${self:custom.stage}-items-dynamodb-table\n  dynamodb_arn_items: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table_items}\n\n  # For serverless-webpack\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'npm'\n\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\npackage:\n  exclude:\n    - .idea/**\n    - scripts/**\n    - tests/**\n    - README.md\n    - .eslintignore\n    - .eslintrc.json\n    - docker-compose.yml\n    - Dockerfile\n    - yarn.lock\n    - package.json\n    - package-lock.json\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n  environment:\n    ACCOUNT_ID: ${self:custom.aws_account_id}\n    DDB_REGION: ${self:custom.region}\n    DYNAMO_DB_ENDPOINT: ${self:custom.dynamodb_host}\n    DB_TABLE: ${self:custom.dynamodb_table_items}\n\n\nfunctions:\n  app:\n    handler: handler.main\n    events:\n      - http:\n          method : ANY\n          path : '/'\n      - http:\n          method: ANY\n          path: '{proxy+}'\n\n\n  # authorizer:\n  #   handler: authorizer.main"]},{"id":219759914,"files":["service: notes-app-2-api\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName: ${self:custom.tableName}\n    stripeSecretKey: ${env:STRIPE_SECRET_KEY}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [NotesTable, Arn]\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  billing:\n    # Defines an HTTP API endpoint that calls the main function in billing.js\n    # - path: url path is /billing\n    # - method: POST request\n    handler: billing.main\n    events:\n      - http:\n          path: billing\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n"]},{"id":161541910,"files":["\nservice: spacex-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  launches:\n    handler: handler.launches\n    events:\n      - http:\n          path: /\n          method: get\n  launchesApi:\n    handler: handler.launchesApi\n    events:\n      - http:\n          path: /api\n          method: get\n  launchesCal:\n    handler: handler.launchesCal\n    events:\n      - http:\n          path: /calendar\n          method: get\n\nplugins:\n  - serverless-offline\n"]},{"id":219434050,"files":["service: lambda-config\n\nprovider:\n  name: aws\n  stage: stg\n  region: us-east-1\n  runtime: nodejs10.x\n  timeout: 60\n  apiName: lambda-config-${self:provider.stage}\n  logs:\n    restApi: true\n  memorySize: 256\n  versionFunctions: false\n\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'ssm:GetParameters*'\n      Resource: '*'\n\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  withMiddleware:\n    handler: handler.handler\n    events:\n      - http:\n          path: /mid/api/env\n          method: get\n          cors: true\n"]},{"id":110464373,"files":["service: disslack-disqus-comments-to-slack\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n      \nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    DISSLACK_SLACK_WEBHOOK: ${file(./disslack.env.yml):dev.DISSLACK_SLACK_WEBHOOK}\n    DISSLACK_DISQUS_FORUM: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_FORUM}\n    DISSLACK_DISQUS_ACCESS_TOKEN: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_ACCESS_TOKEN}\n    DISSLACK_DISQUS_API_SECRET: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_API_SECRET}\n    DISSLACK_DISQUS_API_KEY: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_API_KEY}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  check:\n    handler: disslack/check.check\n    events:\n      - http:\n          path: disslack\n          method: get\n          cors: true\n  cron:\n    handler: disslack/check.check\n    events:\n      # Invoke Lambda function every hour\n      - schedule: rate(1 hour)\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":208829965,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sensor-storage\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: production\n  region: eu-north-1\n  memorySize: 128\n  timeout: 30\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:BatchWriteItem\n        - dynamodb:Query\n        - dynamodb:Scan\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'\n\nfunctions:\n  status:\n    handler: handler.status\n    events:\n      - http:\n          method: GET\n          path: /status\n          cors: true\n  # all:\n  #   handler: handler.all\n  #   events:\n  #     - http:\n  #         method: GET\n  #         path: /all\n  #         cors: true\n  add:\n    handler: handler.add\n    timeout: 25\n    events:\n      - http:\n          method: POST\n          path: /add\n          cors: true\n  addOne:\n    handler: handler.addOne\n    timeout: 25\n    events:\n      - http:\n          method: POST\n          path: /addOne\n          cors: true\n#  toGoogleSheet:\n#    runtime: python2.7\n#    handler: to_google_sheet.main\n#    events:\n#      - stream: arn:aws:dynamodb:eu-central-1:413820158215:table/sensor-storage-dev/stream/2018-10-01T18:45:53.441\n\nresources:\n  Resources:\n    SensorDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: sensorId\n            AttributeType: S\n          - AttributeName: ts\n            AttributeType: S\n        KeySchema:\n          - AttributeName: sensorId\n            KeyType: HASH\n          - AttributeName: ts\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\nplugins:\n  - serverless-stack-termination-protection\n"]},{"id":78198380,"files":["service: slack-lunch-hunter\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: ${opt:profile}\n  region: eu-central-1\n  timeout: 20 # optional, default is 6\n  stage: dev\n\nfunctions:\n  notify:\n    handler: src/handler.notify\n    events:\n      - http:\n          path: notify\n          method: GET\n          integration: lambda\n      - schedule: cron(55 10 ? * MON-FRI *) # 11:55 UTC+1 Mon-Fri\n    memorySize: 128 # minimal size\n"]},{"id":119303243,"files":["service: status-checker\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false\n  memorySize: 128\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action: cloudwatch:PutMetricData\n      Resource: \"*\"\n    - Effect: Allow\n      Action: ssm:GetParameter\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:ssm\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - parameter/services/status-checker/endpoints_base64\n    - Effect: Allow\n      Action: kms:Decrypt\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:kms\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - alias/aws/ssm\nfunctions:\n  status_checker:\n    handler: handler.check\n    description: Check status of endpoints\n    environment:\n      ENDPOINTS_BASE64_SSM_KEY: /services/status-checker/endpoints_base64\n    events:\n      - schedule:\n          rate: cron(*/5 * * * ? *)\n          enabled: true\n"]},{"id":175938134,"files":["service: serverless-side-rendering-vue-nuxt # base name for your project\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:NODE_ENV}\n  region: eu-central-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  create:\n    handler: lambda/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n  get:\n    handler: lambda/get.get\n    events:\n      - http:\n          path: todo/{id}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":214455651,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: komodo-bi-dashboard\n# app and org for use with dashboard.serverless.com\napp: komodo-bi-dashboard\norg: ianoutterside\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n  region: eu-west-1\n  profile: serverless-komodo-bi-dashboard\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.METRICS_TABLE}\"\n\n# you can define service wide environment variables here\n  environment:\n    METRICS_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  metrics-list:\n    handler: src/routes/metrics.list\n    events:\n     - http:\n         path: metrics\n         method: get\n\n  metrics-create:\n    handler: src/routes/metrics.create\n    events:\n     - http:\n         path: metrics\n         method: post\n  \n  metrics-set:\n    handler: src/routes/metrics.set\n    events:\n     - http:\n         path: metrics/{id}\n         method: put\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules: true\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    MetricsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.METRICS_TABLE}"]},{"id":139503732,"files":["# NOTE: update this with your service name\nservice: getWalletBalance\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  environment: ${file(env.yml):${self:provider.stage}}  \n\nfunctions:\n  getWalletBalance:\n    handler: handler.getWalletBalance\n    events:\n      - https:\n          path: /\n          method: get\n"]},{"id":163386578,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: post_requests_to_s3\n\nplugins:\n  - serverless-domain-manager\n\n# You can pin your service to only deploy with a specific Serverless version\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite serverless.com defaults here\n#  stage: dev\n#  region: us-east-1\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  domains:\n    prod: api.mydomain.com\n    staging: staging-api.mydomain.com\n    dev: dev-api.mydomain.com\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    certificateName: \"*.mydomain.com\"\n    basePath: ''\n    stage: ${opt:stage, self:provider.stage}\n    createRoute53Record: true\n\n  bucket: open-endpoint-requests\n\n# The Lambda function's IAM Role will have this policy:\niamRoleStatements:\n - Effect: Allow\n   Action:\n     - s3:ListBucket\n   Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ] }\n - Effect: Allow\n   Action:\n     - s3:PutObject\n   Resource: { \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\" : \"ServerlessDeploymentBucket\"}, \"/*\" ] ] }\n - Effect: Allow\n   Action:\n     - s3:PutObject\n   Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  ping:\n    memorySize: 512\n    handler: handler.ping\n    events:\n      - http:\n          path: /ping\n          method: get\n  obj1_notification:\n    memorySize: 512\n    handler: handler.save\n    events:\n      - http:\n          path: /{group}/obj1_notification\n          method: post\n          request:\n            parameters:\n              paths:\n                group: true\n    # function environment variables here\n    environment:\n      BUCKET: ${self:custom.bucket}\n  obj2_notification:\n    memorySize: 512\n    handler: handler.save\n    events:\n      - http:\n          path: /{group}/obj2_notification\n          method: post\n          request:\n            parameters:\n              paths:\n                group: true\n    environment:\n      BUCKET: ${self:custom.bucket}\n\npackage:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n  exclude:\n    - node_modules/**\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n"]},{"id":175683144,"files":["service:\n    name: tome-of-many-spells\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: 680c61cf5c9f4de307018e1db8225ceb\n    zoneId: a65c9c8e3ad0ae9f6416bcf2828e2641\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  main:\n    name: worker\n    script: dist/worker  # maps to main.js\n    events:\n      - http:\n          url: tome-of-many-spells.vaultofheroes.com/*\n          method: GET\n"]},{"id":158110659,"files":["service: aws-nodejs-lighthouse\n\nframeworkVersion: \"=1.35.1\"\n\nplugins:\n  - serverless-plugin-chrome\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 900\n  environment:\n    DEBUG: \"*\"\n    SLS_DEBUG: \"*\"\n\nfunctions:\n  lighthouse:\n    handler: handler.lighthouse\n"]},{"id":133766253,"files":["service: node-serverless-boilerplate\n\nparameters:\n  region: &region ap-southeast-2\n  path: &path /\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  region: *region\n  versionFunctions: true\n\n  environment:\n    DYNAMODB_TABLE: ${env:STAGE}-node-serverless-boilerplate\n    NODE_ENV: ${env:NODE_ENV}\n    STAGE: ${env:STAGE}\n    APP_ROUTE: ${env:APP_ROUTE}\n    API_KEY: ${env:API_KEY}\n  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:DeleteObject\n        - s3:PutAccelerateConfiguration\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: '*'\n\nresources:\n  Resources:\n    Users:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-dynamodb-local\n  - serverless-dynamodb-autoscaling\n  - serverless-plugin-optimize\n  - serverless-domain-manager\n  - serverless-add-api-key\n  - serverless-prune-plugin\n  - serverless-plugin-warmup\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: src/index.handler\n    name: ${env:STAGE}-node-serverless-boilerplate\n    warmup: true\n    events:\n        - http:\n            path: /\n            method: ANY\n            cors: true\n            private: true\n        - http:\n            path: /{any+}\n            method: ANY\n            cors: true\n            private: true\n\ncustom:\n  optimize:\n    debug: true\n    minify: true\n    plugins: ['@babel/plugin-proposal-object-rest-spread']\n    includePaths: ['.env.example']\n\n  stage: ${opt:stage, self:provider.stage}\n\n  # NEED TO UPDATE: domains\n  # domains:\n  #   prod: serverless.yourdomain.com\n  #   staging: serverless-staging.yourdomain.com\n  #   dev: serverless-dev.yourdomain.com\n  \n  # NEED TO UPDATE: customDomain - certificateName\n  # customDomain:\n  #   basePath: ${env:APP_ROUTE}\n  #   certificateName: '*.yourdomain.com'\n  #   domainName: ${self:custom.domains.${self:custom.stage}}\n  #   stage: ${self:provider.stage}\n  #   createRoute53Record: true\n\n  apikey: ${env:API_KEY}\n\n  capacities:\n    - table: Users  # DynamoDB Resource\n      read:\n        minimum: 10        # Minimum read capacity\n        maximum: 1000     # Maximum read capacity\n        usage: 0.5       # Targeted usage percentage\n      write:\n        minimum: 10       # Minimum write capacity\n        maximum: 200      # Maximum write capacity\n        usage: 0.5        # Targeted usage percentage\n\n  prune:\n    automatic: true\n    number: 3\n\n  dotenv:\n    include:\n      - NODE_ENV\n      - APP_ROUTE\n      - DYNAMODB_PORT\n      - API_KEY\n"]},{"id":162887254,"files":["service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  publish:\n    handler: handlers/publisher.publish\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerTransformedEvents:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerTransformedEventsS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.eventsBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerTransformedEventsS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.eventsBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.producerBucket}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      EVENTBRITE_API_TOKEN: ${ssm:eventbriteApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsEventbrite:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsEventbriteS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsEventbriteS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.producerBucket}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      GOOGLE_CALENDAR_API_TOKEN: ${ssm:googleCalendarApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsFarsetLabs:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsFarsetLabsS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsFarsetLabsS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      MEETUPCOM_API_TOKEN: ${ssm:meetupcomApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsMeetupcom:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsMeetupcomS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsMeetupcomS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n"]},{"id":214680398,"files":["service: alexa-nodejs-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs10.x,\n  stage: dev\n  region: ${file(./environment.json):AWS_REGION}\n\n#Configuration\ncustom:\n  alexa:\n    vendorId: ${file(./environment.json):AMAZON_VENDOR_ID}\n    clientId: ${file(./environment.json):AMAZON_DEVELOPER_CLIENT_ID}\n    clientSecret: ${file(./environment.json):AMAZON_DEVELOPER_SECRET}\n    localServerPort: 9000\n    skills:\n      - id: ${file(./environment.json):ALEXA_SKILL_ID}\n        manifest:\n          manifestVersion: '1.0'\n          publishingInformation:\n            locales:\n              es-MX:\n                name: ${file(./environment.json):ALEXA_SKILL_NAME}\n          apis:\n            custom:\n              endpoint:\n                uri: ${file(./environment.json):AWS_LAMDA_FUNCTION_ARN}   \n        models:\n          es-MX: \n            ${file(./alexa-model.yml)}\n\nfunctions:\n  handler:\n    handler: src/handler.handler\n\nplugins:\n  - serverless-alexa-skills\n"]},{"id":171712077,"files":["service: superApp\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-central-1\n  environment:\n    stage: ${self:provider.stage}\n\nfunctions:\n  graphql:\n    handler: functions/graphql/index.handler\n    events:\n      - http:\n          path: /graphql\n          method: any\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":212732315,"files":["# serverless.yml\n\nservice: lambda-authorizer-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-northeast-1\n  stg: ${opt:stage}\n\ncustom:\n  definitions:\n    authorizer:\n      # Lambda関数名\n      name: authorizer\n      # キャッシュ時間\n      resultTtlInSeconds: 0\n      # Lambda関数に渡すヘッダー名\n      identitySource: method.request.header.Authorization\n      # Lambdaイベントペイロード\n      type: request\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http:\n          path: '/'\n          method: any\n          # Lambdaオーソライザーの設定\n          authorizer: ${self:custom.definitions.authorizer}\n      - http:\n          path: '{proxy+}'\n          method: any\n          # Lambdaオーソライザーの設定\n          authorizer: ${self:custom.definitions.authorizer}\n  # Lambda関数 (authorizer) のhandlerメソッドの指定\n  authorizer:\n    handler: authorizer.handler\n\nresources:\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.WWW-Authenticate: \"'Basic'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n"]},{"id":132221906,"files":["service: custom-authoriser-api-key\n\n\nplugins:\n  - serverless-webpack # Use serverless-webpack plugin to transpile ES6/ES7\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-plugin-aws-alerts\n\ncustom:\n  customDomain:\n      domainName: shane.shanelee.xyz\n      certificateName: '*.shanelee.xyz'\n      basePath: ''\n      stage: ${self:provider.stage}\n      createRoute53Record: true\n      endpointType: 'regional'\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn'\n    package:\n        individually: true #Webpack compiles and optimizes each function individually,\n        # removing unnecessary imports and reducing code sizes significantly\n\n  alerts:\n    stages:\n      - dev\n    topics:\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: xxx@gmail.com # Change this to your email address\n    definitions:  # these defaults are merged with your definitions\n      # functionErrors:\n        # period: 300 # override period\n      customAlarm:\n        description: 'My custom alarm'\n        namespace: 'AWS/Lambda'\n        metric: exceptions\n        threshold: 0\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanThreshold\n        pattern: 'exception Bar'\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - customAlarm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  apiKeys:\n      - ${opt:stage}-key\n  usagePlan:\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n\n# you can overwrite defaults here\n#  stage: dev\n# region: ap-southeast-2\n\n\nfunctions:\n  hello:\n    handler: src/hello.default\n    events:\n          - http:\n              path: hello\n              method: get\n              # cors: true\n              private: true\n              authorizer:\n                name: authorizerFunc\n                resultTtlInSeconds: 0\n                # identitySource: method.request.header.Authorization\n                # identityValidationExpression: someRegex\n                type: request\n  authorizerFunc:\n    handler: src/authoriser.default\n\n  app:\n    handler: src/index.handler\n    events:\n          - http: ANY /\n          - http: 'ANY {proxy+}'\n"]},{"id":157903891,"files":["service: stock-alarms\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  timeout: 5\n  versionFunctions: false\n  environment:\n    SENDER_EMAIL: ${file(serverless.env.yml):SENDER_EMAIL, env:SENDER_EMAIL}\n    RECIPIENT_EMAIL: ${file(serverless.env.yml):RECIPIENT_EMAIL, env:RECIPIENT_EMAIL}\n    MAILGUN_KEY: ${file(serverless.env.yml):MAILGUN_KEY, env:MAILGUN_KEY}\n    MAILGUN_DOMAIN: ${file(serverless.env.yml):MAILGUN_DOMAIN, env:MAILGUN_DOMAIN}\n\ncustom:\n  alerts:\n    topics:\n      alarm:\n        topic: ${self:service}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: ${file(serverless.env.yml):RECIPIENT_EMAIL, env:RECIPIENT_EMAIL}\n    definitions:\n      functionErrors:\n        period: 86400 # 1 day\n        treatMissingData: notBreaching\n    alarms:\n      - functionErrors\n\nfunctions:\n  stock-alarms:\n    handler: src/index.run\n    events:\n      - schedule: rate(1 day)\n\nplugins:\n  - serverless-plugin-aws-alerts\n","SENDER_EMAIL: noreply@example.com\nRECIPIENT_EMAIL: john@example.com\n\nMAILGUN_KEY:\nMAILGUN_DOMAIN: mail.example.com\n"]},{"id":211643134,"files":["service: serverless-with-webpack\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n  stage: dev\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n  webpackIncludeModules: true\n  webpackPackager: \"yarn\"\n  serverless-offline:\n    port: 8000\n\npackage:\n  individually: true\n\nfunctions:\n  api:\n    handler: src/api.serverless\n    events:\n      - http:\n          method: GET\n          path: /{any+}\n"]},{"id":195277883,"files":["service: zaptalk-logger-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    dynamoTable: ${self:custom.secrets.aws.dynamoTable}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${self:custom.secrets.aws.region}:*:*\"\nfunctions:\n  logger:\n    handler: logger.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":153491803,"files":["service: aws-foodies\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":210901815,"files":["service: layer-moment\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: 'dev'\n  region: 'us-east-2'\n  deploymentBucket:\n    name: cf-templates-5rrcz2248gen-${self:provider.region}\n\nlayers:\n  Moment:\n    path: layers\n    description: \"moment dependencies\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /hello\n          method: any\n          private: false\n    environment:\n      NODE_PATH: \"./:/opt/node_modules\"\n    layers:\n      - {Ref: MomentLambdaLayer}\n"]},{"id":208499093,"files":["service: GuestsService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  upsertGuestCartItem:\n    name: upsertGuestCartItem-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to guest upsert cart item\n    events:\n      - http:\n          path: guests/{id}/cart/item\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getGuestCartItems:\n    name: getGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  upsertGuestCartItems:\n    name: upsertGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteGuestCartItem:\n    name: deleteGuestCartItem-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/deleteGuestCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete guest cart item\n    events:\n      - http:\n          path: guests/{id}/cart/item\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteGuestCartItems:\n    name: deleteGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/deleteGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete in guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  createGuestOrder:\n    name: createGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/createGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to createGuestOrder\n    events:\n      - http:\n          path: guests/{id}/orders\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  confirmGuestOrder:\n    name: confirmGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/confirmGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmGuestOrder\n    # events:\n    #   - http:\n    #       path: guests/orders/{id}\n    #       method: put\n    #       request:\n    #         parameters:\n    #           paths:\n    #             id: true\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  cancelGuestOrder:\n    name: cancelGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/cancelGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to cancelGuestOrder\n  getGuestOrder:\n    name: getGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getGuestOrder\n    # events:\n    #   - http:\n    #       path: guests/orders/{id}\n    #       method: get\n    #       request:\n    #         parameters:\n    #           paths:\n    #             id: true\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  getGuestAddressAndCommunication:\n    name: getGuestAddressAndCommunication-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestAddressAndCommunication.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get getGuestAddressAndCommunication\n    # events:\n    #   - http:\n    #       path: guests/address\n    #       method: get\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  upsertGuestAddressAndCommunication:\n    name: upsertGuestAddressAndCommunication-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestAddressAndCommunication.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post upsertGuestAddressAndCommunication\n    events:\n      - http:\n          path: guests/{id}/address\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getGuestOrderPrice:\n    name: getGuestOrderPrice-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestOrderPrice.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getGuestOrderPrice\n\nresources:\n  Resources:\n    GuestsFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":204779060,"files":["service: RatingService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  createRating:\n    name: createRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/createRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n      BACKEND_ENV: ${self:provider.stage}\n    tags:\n      purpose: lambda function to createRating\n    events:\n      - http:\n          path: /ratings\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  updateRating:\n    name: updateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/updateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to updateRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getRating:\n    name: getRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getAllCustomerRating:\n    name: getAllCustomerRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getAllCustomerRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getAllCustomerRating\n    events:\n      - http:\n          path: /ratings\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteRating:\n    name: deleteRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/deleteRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to deleteRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  helpfulRatingIncrement:\n    name: helpfulRatingIncrement-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/helpfulRatingIncrement.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to helpfulRatingIncrement\n    events:\n      - http:\n          path: /ratings/helpful/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deactivateRating:\n    name: deactivateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/deactivateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to deactivateRating\n    events:\n      - http:\n          path: /ratings/deactivate/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  activateRating:\n    name: activateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/activateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to activateRating\n  getProductFeedback:\n    name: getProductFeedback-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductFeedback.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductFeedback\n    events:\n      - http:\n          path: /ratings/product/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getProductRating:\n    name: getProductRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductRating\n    events:\n      - http:\n          path: /ratings/product/summary/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  checkProductReview:\n    name: checkProductReview-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/checkProductReview.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductReview\n    events:\n      - http:\n          path: /ratings/product/check/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getProductAvgRating:\n    name: getProductAvgRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductAvgRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductAvgRating\n\n\nresources:\n  Resources:\n    RatingsFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":207866015,"files":["service: nvstore-service\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-south-1\n  memorySize: 512\n\nfunctions:\n  nvstoreFunc:\n    handler: app.handler\n    events:\n      - http:\n          path: nvstore\n          method: get\n      - http:\n          path: nvstore\n          method: put\nplugins:\n  - serverless-offline"]},{"id":208608066,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: grappy-serverless\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.vpcResolver\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":124608442,"files":["service: aws-netlify-letsencryptfi\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    packager: 'yarn'\n  webpackIncludeModules: true\n\nresources:\n  Resources:\n    S3BucketAcmeBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(.yaml):ACME_BUCKET}\n    DynamoDBAcmeTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${file(.yaml):ACME_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    SNSCertificateTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"LE Cert\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 90 # Since it could take some time for the DNS changes to take effect we need to set an increased timeout\n  stage: ${opt:stage, \"dev\"}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:ListBucket\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: S3BucketAcmeBucket\n    - Effect: \"Allow\"\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: S3BucketAcmeBucket\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - acm:ImportCertificate\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - DynamoDBAcmeTable\n          - Arn\n    - Effect: \"Allow\"\n      Action:\n        - sns:Publish\n      Resource:\n        Ref: SNSCertificateTopic\n\nfunctions:\n  renew_certificate:\n    handler: handler.renew_certificate\n    events:\n        - schedule:\n            name: \"LetsEncryptCertificateRenewalSchedule\"\n            description: \"Checks if the Netlify managed domain needs an updated LetsEncrypt SSL certificate\"\n            rate: rate(1 day)\n    environment:\n      NETLIFY_TOKEN: ${file(.yaml):NETLIFY_TOKEN}\n      NETLIFY_DNS_ZONE_NAME: ${file(.yaml):NETLIFY_DNS_ZONE_NAME}\n      ACME_BUCKET: ${file(.yaml):ACME_BUCKET}\n      ACME_TABLE: ${file(.yaml):ACME_TABLE}\n      AWS_SNS_TOPIC:\n        Ref: SNSCertificateTopic\n      ACME_EMAIL_ADDRESS: ${file(.yaml):ACME_EMAIL_ADDRESS}\n      ACME_DOMAIN_NAMES: ${file(.yaml):ACME_DOMAIN_NAMES}\n      ACME_TEST: ${file(.yaml):ACME_TEST, \"true\"}\n"]},{"id":106335159,"files":["service: serverless-modern\nprovider:\n  name: aws\n  runtime: nodejs6.10\npackage:\n    include:\n        - build.js\nfunctions:\n  hello:\n    handler: build.hello\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\nplugins:\n  - serverless-offline\n"]},{"id":201635295,"files":["service: koop-serverless-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  get-data:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /my-provider/{host}/FeatureServer/0\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                host: true\n  query-data:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /my-provider/{host}/FeatureServer/0/query\n          method: get\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                where: false\n              paths:\n                host: true\n"]},{"id":204149638,"files":["service:\n  name: serverless-node-fargate-example\nplugins:\n  - serverless-fargate-plugin\nprovider:\n  name: aws\n  profile: \"default\"\n  stage: ${opt:stage,'dev'}\n  region: us-east-1\n  logRetentionInDays: 7\ncustom:\n  # Change these to your values!\n  ecrImagePath:\n    accountNumber: 123456789012\n    region: eu-north-1\n    imageName: node-basic-server\n    imageTag: latest\n  fargate:\n    vpc:\n      cidr: 10.0.0.0/16\n      subnets:\n        - 10.0.0.0/24\n        - 10.0.1.0/24\n    services:\n      - name: node-basic-webserver\n        cpu: 512\n        memory: 1024\n        port: 8080\n        healthCheckUri: /\n        healthCheckInterval: 6\n        image: \"${self:custom.ecrImagePath.accountNumber}.dkr.ecr.${self:custom.ecrImagePath.region}.amazonaws.com/${self:custom.ecrImagePath.imageName}:${self:custom.ecrImagePath.imageTag}\"\n        entryPoint:\n          - npm\n          - run\n          - start\n        environment:\n          PRODUCTION: true\n        protocols:\n          - protocol: HTTP\n"]},{"id":206655610,"files":["service:\n  name: forms-api\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  profile: andismith\n  runtime: nodejs10\n\nfunctions:\n  contact:\n    handler: src/api/contact/handler.post\n    events:\n      - http:\n          method: post\n          path: contact\n"]},{"id":206394251,"files":["service: voidtrader\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  environment:\n    VOIDTRADER_API_URL: https://api.warframestat.us/\n    GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  update-inventory:\n    handler: inventory.update\n    events:\n      - schedule: cron(0,3 13,16 ? * 1,6 *)"]},{"id":207118817,"files":["org: debarshib93\napp: notes-app-api-app\n# NOTE: update this with your service name\nservice: notes-app-api\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  \n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  \n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":206813057,"files":["service: serverless-cvm\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  environment: ${file(env.yml):dev}\n\npackage:\n  exclude:\n    - certs/**\n    - img/**\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iot:CreateThing\n        - iot:AttachPolicy\n        - iot:DetachPolicy\n        - iot:AttachThingPrincipal\n        - iot:DetachThingPrincipal\n        - iot:CreatePolicy\n        - iot:CreateKeysAndCertificate\n        - iot:UpdateCertificate\n        - iot:DeleteCertificate\n        - iot:GetThingShadow\n        - iot:UpdateThingShadow\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n      Resource:\n        - \"Fn::GetAtt\": [ DeviceInfoDynamoDBTable, Arn ]\n    - Effect: Allow\n      Action:\n        - logs:*\n      Resource:\n        - arn:aws:logs:*:*:*\n\nfunctions:\n  cvm:\n    handler: cvm/index.handler\n    events:\n      - http:\n          path: getcert\n          method: get\n      - http:\n          path: shadow\n          method: any\n    environment:\n      REGION: \"#{AWS::Region}\"\n      DYNAMODB_TABLE_NAME: !Ref DeviceInfoDynamoDBTable\n      IOT_DATA_ENDPOINT: ${self:custom.environment.IOT_DATA_ENDPOINT}\n\nresources:\n Resources:\n    DeviceInfoDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: iot-cvm-device-info\n        AttributeDefinitions:\n          - AttributeName: serialNumber\n            AttributeType: S\n        KeySchema:\n          - AttributeName: serialNumber\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n"]},{"id":206392192,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":155447529,"files":["service:\n  name: aws-nodejs-ecma-script\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  vrt_api_mapper:\n    handler: mapper.handler\n    events:\n      - http:\n          method: get\n          cors: true\n          path: '/{channelCode}'\n          request:\n            parameters:\n              paths:\n                channelCode: true\n","service:\n  name: discogs-random-record\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DISCOGS_API_TOKEN: ${file(./env.json):DISCOGS_API_TOKEN}\n\nfunctions:\n  getRandomRecord:\n    handler: handler.getRandomRecord\n    events:\n      - http:\n          method: get\n          path: /\n","service:\n  name: ivago-waste-collection\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n\nfunctions:\n  getWasteCollection:\n    handler: index.handler\n    events:\n      - http:\n          method: get\n          path: /{calendar}\n          request:\n            parameters:\n              paths:\n                calendar: true\n"]},{"id":205943590,"files":["service: twilio\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment: ${file(env.yml)}\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":205652773,"files":["service: myproject\n\nplugins:\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  profile: ${opt:profile, 'personal'}\n  runtime: nodejs10.x\n  stage: ${opt:stage, env:SERVERLESS_STAGE, 'demo'}\n  region: ${opt:region, env:AWS_DEFAULT_REGION, 'eu-west-1'}\n\ncustom:\n  serverless-iam-roles-per-function:\n    defaultInherit: true\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n\nresources:\n  - ${file(outputs.yml)}\n"]},{"id":170296726,"files":["service: serverless-koa-apollo # todo\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  deploymentBucket: my-serverless # todo\n\nfunctions:\n  api:\n    handler: /src/main.handler\n    events:\n      - http: ANY /\n      - http: \"ANY {proxy+}\"\n"]},{"id":181052837,"files":["service: OrderService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  createOrder:\n    name: createOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/createOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to createOrder\n    events:\n      - http:\n          path: /orders\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  confirmOrder:\n    name: confirmOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/confirmOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  cancelOrder:\n    name: cancelOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/cancelOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrder:\n    name: getOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrdersList:\n    name: getOrdersList-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrdersList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrdersList latest 20 only\n    events:\n      - http:\n          path: /orders\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrderPrice:\n    name: getOrderPrice-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrderPrice.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrderPrice\n  checkProductPurchase:\n    name: checkProductPurchase-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/checkProductPurchase.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductPurchase\n    events:\n      - http:\n          path: /orders/checkProductPurchase/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getDeliveryOptions:\n    name: getDeliveryOptions-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getDeliveryOptions.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getDeliveryOptions\n    events:\n      - http:\n          path: /orders/getDeliveryOptions\n          method: get\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  checkProductPurchaseHeadless:\n    name: checkProductPurchaseHeadless-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/checkProductPurchase.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductPurchaseHeadless\n\n\nresources:\n  Resources:\n    OrdersFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":196738153,"files":["service: websocket-quick-start\n\npackage:\n  exclude:\n    - README.md\n\ncustom:\n  stage: ${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stackName: ${self:service}-${opt:stage}\n  websocketsApiName: ${self:service}-${opt:stage}\n  stage: ${env:AWS_STAGE, '${opt:stage, 'dev'}'}\n  region: ${env:AWS_DEFAULT_REGION, '${opt:region, 'eu-west-1'}'}\n\n  # Keyword to call a function e.g {\"action\": \"ping\"}\n  # You can overwrite the route expression e.g $request.body.route - {\"route\": \"ping\"}\n  websocketsApiRouteSelectionExpression: $request.body.action\n\nfunctions:\n  default:\n    handler: src/handler/default.handler\n    events:\n      - websocket: $default\n  ping_pong:\n    handler: src/handler/ping-pong.handler\n    events:\n      - websocket:\n          route: ping\n\n  # You can use a $default route that will forward all WebSocket events\n  # (including $connect and $disconnect) to your default function or add more routes\n  #\n  #  connect:\n  #    handler: handler.connect\n  #    events:\n  #      - websocket:\n  #          route: $connect\n  #    disconnect:\n  #      handler: handler.disconnect\n  #      events:\n  #        - websocket:\n  #            route: $disconnect\n"]},{"id":141854482,"files":["service: karma-monitor\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: prod\n  timeout: 3 # Reddit APIs can take a long time to respond\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ses:SendEmail\n\npackage:\n  individually: true\n\nfunctions:\n  check:\n    handler: handler.run\n    events:\n      - schedule: rate(10 minutes)\n    reservedConcurrency: 1\n\nresources:\n  Resources:\n    MemoryUsedMetricFilter:\n      Type: AWS::Logs::MetricFilter\n      Properties:\n        LogGroupName: \"/aws/lambda/${self:service}-${self:provider.stage}-check\"\n        FilterPattern: '[report_prefix=\"REPORT\", ..., max_memory_used_prefix=\"Used:\", max_memory_used,max_memory_used_unit=\"MB\"]'\n        MetricTransformations:\n        - MetricValue: \"$max_memory_used\"\n          MetricNamespace: Lambda\n          MetricName: Memory\n\ncustom:\n  prune:\n    automatic: true\n    number: 3\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n"]},{"id":141933376,"files":["service: tweet-scheduler\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 3\n  logRetentionInDays: 14\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    JWT_SECRET: ${self:custom.env.JWT_SECRET}\n    CONSUMER_KEY: ${self:custom.env.CONSUMER_KEY}\n    CONSUMER_SECRET: ${self:custom.env.CONSUMER_SECRET}\n    TWEETS_TABLE: ${self:service}-${self:provider.stage}\n    LOCAL_TIME_INDEX: local-userId-tweetTime-index\n    GLOBAL_TIME_INDEX: global-tweetTime-index\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DeleteItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Query\n      Resource:\n        Fn::GetAtt:\n          - TweetsTable\n          - Arn\n\npackage:\n  include:\n    - config/**\n  exclude:\n    - src/client\n    - src/public\n  individually: true\n\nfunctions:\n  signIn:\n    handler: src/functions/signIn.handler\n    events:\n      - http:\n          method: POST\n          path: /session\n  logout:\n    handler: src/functions/logout.handler\n    events:\n      - http:\n          method: DELETE\n          path: /session\n  getTweets:\n    handler: src/functions/getTweets.handler\n    events:\n      - http:\n          method: GET\n          path: /tweets\n  createTweet:\n    handler: src/functions/createTweet.handler\n    events:\n      - http:\n          method: POST\n          path: /tweets\n  updateTweet:\n    handler: src/functions/updateTweet.handler\n    events:\n      - http:\n          method: PUT\n          path: /tweets/{tweetId}\n  deleteTweet:\n    handler: src/functions/deleteTweet.handler\n    events:\n      - http:\n          method: DELETE\n          path: /tweets/{tweetId}\n  postTweets:\n    handler: src/functions/scrapeTweets.handler\n    events:\n      - schedule: cron(* * * * ? *)\n    memorySize: 512\n    timeout: 60\n\nresources:\n  Resources:\n    TweetsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.TWEETS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: tweetId\n            AttributeType: S\n          - AttributeName: tweetTime\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: tweetId\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.LOCAL_TIME_INDEX}\n            KeySchema:\n              - AttributeName: userId\n                KeyType: HASH\n              - AttributeName: tweetTime\n                KeyType: RANGE\n            Projection:\n              ProjectionType: INCLUDE\n              NonKeyAttributes:\n                - tweetBody\n        GlobalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.GLOBAL_TIME_INDEX}\n            KeySchema:\n              - AttributeName: tweetTime\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        TimeToLiveSpecification:\n          AttributeName: tweetTime\n          Enabled: true\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    LogBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.config.logBucket}\n        AccessControl: LogDeliveryWrite\n        LifecycleConfiguration:\n          Rules:\n            - Transitions:\n                - StorageClass: STANDARD_IA\n                  TransitionInDays: 30\n              Status: Enabled\n\ncustom:\n  env: ${file(./config/backend.yml):environment}\n  config: ${file(./config/backend.yml):${self:provider.stage}}\n  fullstack:\n    bucketName: ${self:custom.config.siteBucket}\n    distributionFolder: src/public\n    indexDocument: login.html\n    clientCommand: yarn pkg\n    logging:\n      bucket:\n        Fn::GetAtt:\n          - LogBucket\n          - DomainName\n  capacities:\n    - table: TweetsTable\n      index:\n        - ${self:provider.environment.TWEET_TIME_INDEX}\n      read:\n        minimum: 1\n        maximum: 5\n        usage: 0.75\n      write:\n        minimum: 1\n        maximum: 5\n        usage: 0.75\n  prune:\n    automatic: true\n    number: 3\n  # alerts:\n  #   topics:\n  #     alarm:\n  #       topic: ${self:service}-${self:provider.stage}-alerts-alarm\n  #       notifications:\n  #         - protocol: email\n  #           endpoint: ${self:custom.config.notificationEmail}\n\n# alerts:\n#   alarms:\n#     - functionErrors\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n  - serverless-plugin-aws-alerts\n  - serverless-dynamodb-autoscaling\n  - fullstack-serverless\n"]},{"id":163293962,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: episode-updater # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\nregion: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\niamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource: \"arn:aws:dynamodb:us-east-1:370286705794:table/playLists\"\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n  getPlaylists:\n    handler: main.getPlaylists\n  channelHanler:\n    handler: channels/main.uname2ChannelId\n    events:\n      - http: GET /api/channelInfo/{channel?}\n  getPlayListVideos:\n    handler: main.getVideosFromPlayList\n    events:\n      - http: GET /api/playListVideos/{playListId?}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline"]},{"id":141908196,"files":["service: currency-alert\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: prod\n  timeout: 3\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ses:SendEmail\n\npackage:\n  include:\n    - .env\n  individually: true\n\nfunctions:\n  check:\n    handler: handler.run\n    events:\n      - schedule: rate(12 hours)\n    reservedConcurrency: 1\n\nresources:\n  Resources:\n    MemoryUsedMetricFilter:\n      Type: AWS::Logs::MetricFilter\n      Properties:\n        LogGroupName: \"/aws/lambda/currency-alert-${self:provider.stage}-check\"\n        FilterPattern: '[report_prefix=\"REPORT\", ..., max_memory_used_prefix=\"Used:\", max_memory_used,max_memory_used_unit=\"MB\"]'\n        MetricTransformations:\n        - MetricValue: \"$max_memory_used\"\n          MetricNamespace: Lambda\n          MetricName: Memory\n\ncustom:\n  prune:\n    automatic: true\n    number: 3\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n"]},{"id":203629448,"files":["name: serverless-cloudmap-component\n\ncreateUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.createUser\n\nfetchUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.fetchUser\n\nuserTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n    region: eu-west-1\n\nUserService:\n  component: ../\n  inputs:\n    service: 'user-service'\n    namespace: 'test'\n    resources:\n      create:\n        resource: ${createUser}\n      fetch:\n        resource: ${fetchUser}\n      userTable:\n        resource: ${userTable}\n"]},{"id":201390457,"files":["# NOTE: update this with your service name\nservice: serverless-notes\n\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n# iamRoleStatements: define la politica de permisos para la funcion La,bda.\n# En este caso, las funciones de Lambda tienen permisos para acceder a DynamoDB\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\nfunctions:\n  # Se define un end-point api http que llama a la funcion principal en create.js\n  # path: ruta url /notes\n  # method: POST request\n  # cors: habilitado cors para la llamada a la api de dominio cruzado del navegador\n  # authorizer: autenticacion usando el rol AWS IAM\n\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: note/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":174518861,"files":["service: serverless-sns-sms-logs-to-ddb\npackage:\n    include:\n        - src/**\n\nprovider:\n    name: aws\n    region: eu-west-1\n    runtime: nodejs8.10\n    stage: ${opt:stage, self:custom.defaultStage}\n    profile: ${opt:profile}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource:\n          - \"arn:aws:dynamodb:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:table/SMSEventsFromLogs\"\n\n    environment:\n\nfunctions:\n    onSMSMessage:\n        handler: src/listener.onSMSMessage\n        events:\n            - cloudwatchLog:\n                logGroup: sns/${self:provider.region}/${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}/DirectPublishToPhoneNumber\n            - cloudwatchLog:\n                logGroup: sns/${self:provider.region}/${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}/DirectPublishToPhoneNumber/Failure\nplugins:\n    - serverless-prune-plugin\n    - serverless-scriptable-plugin\n\ncustom:\n    defaultStage: dev\n    profiles:\n        dev:\n            AWS_PROFILE: sandbox\n            AWS_ACCOUNT_NUMBER: <use you Account Number>\n    prune:\n        automatic: true\n        number: 1\n\nresources:\n    Resources:\n        SMSEventsFromLogsDynamoDBTable: ${file(./CloudFormation/DynamoDB/SMSEventsFromLogs.yml):Table}\n        CloudWatchInvokePolicy:\n            Type: AWS::Lambda::Permission\n            DependsOn: OnSMSMessageLambdaFunction\n            Properties:\n                Action: lambda:InvokeFunction\n                SourceArn: arn:aws:logs:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:*\n                Principal: logs.${self:provider.region}.amazonaws.com\n                FunctionName:  arn:aws:lambda:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:function:serverless-sns-sms-logs-to-ddb-${self:provider.stage}-onSMSMessage\n\n\n\n"]},{"id":188546290,"files":["service: whitelodge\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  environment:\n    DATABASE_URL: mongodb://localhost:27017/whitelodge\n    JWT_SECRET: random\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":97336011,"files":["service:\n  name: signalFailure\n\ncustom:\n  default_stage: development\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.default_stage}\n  region: eu-west-1\n  memorySize: 128\n  environment:\n    SKILL_ID: ${ssm:/signalFailure/SKILL_ID~true}\n    TFL_APP_KEY: ${ssm:/signalFailure/TFL_APP_KEY~true}\n    TFL_APP_ID: ${ssm:/signalFailure/TFL_APP_ID~true}\n\nfunctions:\n  handler:\n    handler: lambda/custom/index.handler\n    name: signalFailure-${self:provider.stage}\n    timeout: 6\n    events:\n      - alexaSkill: ${ssm:/signalFailure/SKILL_ID~true}\n\nplugins:\n  - serverless-webpack\n"]},{"id":175678657,"files":["service: CustomerService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  getCustomerCompanyDetails:\n    name: getCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/getCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  postCustomerCompanyDetails:\n    name: postCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/postCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  putCustomerCompanyDetails:\n    name: putCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/putCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to update customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: put\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerCompanyDetails:\n    name: deleteCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/deleteCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCustomerAddressList:\n    name: getCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/getCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer address List\n    events:\n      - http:\n          path: /customer/address-list\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCustomerAddress:\n    name: getCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/getCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  postCustomerAddress:\n    name: postCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/postCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post customer address details\n    events:\n      - http:\n          path: /customer/address\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  putCustomerAddress:\n    name: putCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/putCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to put customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerAddressList:\n    name: deleteCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/deleteCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer address list\n    events:\n      - http:\n          path: /customer/address-list\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerAddress:\n    name: deleteCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/deleteCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  eraseCustomerAddressList:\n    name: eraseCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/eraseCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to erase customer address list\n\nresources:\n  Resources:\n    CustomerFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":196445227,"files":["service: CartService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  certificate-arn: ${env:CERTIFICATE_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  upsertCartItem:\n    name: upsertCartItem-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/upsertCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert cart item\n    events:\n      - http:\n          path: /cart/item\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCartItems:\n    name: getCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get cart items\n    events:\n      - http:\n          path: /cart/items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getInCartItems:\n    name: getInCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getInCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get in cart items\n    events:\n      - http:\n          path: /cart/in-cart-items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getSavedForLaterCartItems:\n    name: getSavedForLaterCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getSavedForLaterCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get getSavedForLaterCartItems cart items\n    events:\n      - http:\n          path: /cart/saved-for-later-items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  upsertCartItems:\n    name: upsertCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/upsertCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert cart items\n    events:\n      - http:\n          path: /cart/items\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCartItem:\n    name: deleteCartItem-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/deleteCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete cart item\n    events:\n      - http:\n          path: /cart/item/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteInCartItems:\n    name: deleteInCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/deleteInCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete in cart items\n    events:\n      - http:\n          path: /cart/in-items\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n\nresources:\n  Resources:\n    CartFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":203703416,"files":["service: bouman\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: sa-east-1\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::*\"\n\nfunctions:\n  optimize:\n    handler: optimize.handle\n    environment:\n      bucket: bouman\n    events:\n      - s3:\n          bucket: bouman\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n      - s3:\n          bucket: bouman\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .png"]},{"id":202169397,"files":["service:\n  name: aws-nodejs-typescript\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ../../../webpack.config.js\n    includeModules:\n      packagePath: ../../../package.json\n    packager: yarn\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    # events:\n    #   - http:\n    #       method: get\n    #       path: hello"]},{"id":202347172,"files":["service: cognito-boilerplate\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-include-dependencies\n\npackage:\n  individually: true\n  include:\n    # - src/assets/**/*\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  versionFunctions: false\n  tracing:\n    lambda: true\n    apiGateway: true\n  stage: ${self:custom.currentStage}\n  profile: ${self:custom.currentStage}\n  stackTags:\n    PROJECT: ${self:service}\n    STAGE: ${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref : DataBucket\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ DynamoDbTable, Arn ]\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  userPoolName: ${self:service}-${self:provider.stage}-userpool\n  userPoolClientName: ${self:service}-${self:provider.stage}-webclient\n  identityPoolName:\n    Fn::Join:\n      - ''\n      - !Split ['-', '${self:service}-${self:provider.stage}-identitypool']\n  dynamoDbTableName: ${self:service}-${self:provider.stage}-table\n  dataBucketName: ${self:service}-${self:provider.stage}-databucket\n\nfunctions:\n  - ${file(functions/helloworld.yml)}\n\nresources:\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n  - ${file(resources/s3-bucket.yml)}\n  - ${file(resources/dynamodb-table.yml)}\n"]},{"id":202553674,"files":["service: serverless-dynamodb-streams-example \n\nplugins:\n  - serverless-bundle\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-export-env\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: tasks-${self:custom.stage}\n  environment: ${file(config/${self:custom.stage}-env.json)}\n  dynamodb:\n    stages:\n      - ${self:custom.stage}\n\npackage:\n  individually: true\n  exclude:\n    - dev-env.json\n    - prod-env.json\n    - node_modules/aws-sdk/**\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  region: eu-central-1\n  environment:\n    tableName: ${self:custom.tableName}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: \n        - \"Fn::GetAtt\": [ TasksDynamoDbTable, Arn ]\n\nfunctions:\n  createTask:\n    handler: handler.createTask\n    events:\n      - http:\n          path: createTask\n          method: post\n  listTasks:\n    handler: handler.listTasks\n    events:\n      - http:\n          path: listTasks\n          method: get\n  processTasksStream:\n    handler: handler.processTasksStream\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - TasksDynamoDbTable\n              - StreamArn\n          batchSize: 1\n    \nresources:\n  Resources:\n    TasksDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        TableName: '${self:custom.tableName}'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES"]},{"id":200123814,"files":["service: serverless-slackbot\n\ncustom:\n  # debugging output\n  debug: '*'\n\n\n  services:\n    # The dynamodb table to store OAuth access data\n    table_name: slackbot-brain\n\n    # sns dispatch topic name\n    topic_name: dispatcher\n\n\n  nav:\n    # The path used to post Slack events to\n    event_path: callback\n\n    # The path used to install the Slack App\n    install_path: install\n\n    # The path to redirect to after an install\n    install_redirect: https://slack.com\n\n\n  slack:\n    # Verification token\n    verification_token: \"xxxxxxxxxxxxxxxxxxxxxxxx\"\n    \n    # Space delimited scopes\n    client_scopes: \"bot commands\"\n    \n    # Client ID - quotes required\n    client_id: \"xxxxxxxxxxxx.xxxxxxxxxxxx\"\n    \n    # Client Secret - quotes required\n    client_secret: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-agent\n  versionFunctions: false\n  iamRoleStatements:    \n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - sns:*\n        \nfunctions:\n  callbacks:\n    handler: src/index.handler\n    environment:\n      DEBUG: ${self:custom.debug}\n      TABLE_NAME: ${self:custom.services.table_name}\n      TOPIC_NAME: ${self:custom.services.topic_name}\n      CLIENT_ID: ${self:custom.slack.client_id}\n      CLIENT_SECRET: ${self:custom.slack.client_secret}\n      CLIENT_SCOPES: ${self:custom.slack.client_scopes}\n      INSTALL_REDIRECT: ${self:custom.nav.install_redirect}\n      VERIFICATION_TOKEN: ${self:custom.slack.verification_token}\n    events:\n      - sns: ${self:custom.services.topic_name}\n      - http:\n          path: ${self:custom.nav.event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      - http:\n          path: ${self:custom.nav.install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n\nresources:\n  Resources:\n    dynamodb:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: team_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: team_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.services.table_name}"]},{"id":130776113,"files":["service: serverless-cars-api\n\nprovider:\n  name: aws\n  stage: beta\n  region: us-west-2\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\npackage:\n  individually: true\n  exclude:\n    - ./**\nfunctions:\n  create:\n    handler: src/cars/create.handler\n    package:\n      include:\n        - src/cars/create.js\n    events:\n      - http:\n          path: car\n          method: post\n          cors: true\n  list:\n    handler: src/cars/list.handler\n    package:\n      include:\n        - src/cars/list.js\n    events:\n      - http:\n          path: cars\n          method: get\n          cors: true\n  get:\n    handler: src/cars/get.handler\n    package:\n      include:\n        - src/cars/get.js\n    events:\n      - http:\n          path: car/{id}\n          method: get\n          cors: true\n  update:\n    handler: src/cars/update.handler\n    package:\n      include:\n        - src/cars/update.js\n    events:\n      - http:\n          path: car/{id}\n          method: put\n          cors: true\n  delete:\n    handler: src/cars/delete.handler\n    package:\n      include:\n        - src/cars/delete.js\n    events:\n      - http:\n          path: car/{id}\n          method: delete\n          cors: true\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":201253021,"files":["# NOTE: update this with your service name\nservice: buddy-api\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack # Package our functions with Webpack\n  - serverless-offline\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  role: LambdaRole\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  environment:\n    animalTableName: ${self:custom.animalTableName}\n  iamRoleStatements:\n    - Effect: allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [ AnimalTable, Arn ]\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  animalTableName: ${self:custom.stage}-animals\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nresources:\n  #DynamoDb\n  - ${file(resources/dynamodb-table.yml)}\n  #S3\n  - ${file(resources/s3-bucket.yml)}\n  #Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\n  #lambda\n  - ${file(resources/lambda-role.yml)}\n\nfunctions:\n  createAnimal:\n    handler: src/animals/create.post\n    events:\n      - http:\n          path: api/animal\n          method: post\n          cors: true\n          authorizer: aws_iam\n  fetchAnimal:\n    handler: src/animals/fetch.getAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  fetchAnimals:\n    handler: src/animals/fetch.getAnimals\n    events:\n      - http:\n          path: api/animal\n          method: get\n          cors: true\n          authorizer: aws_iam\n  updateAnimal:\n    handler: src/animals/update.updateAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  deleteAnimal:\n    handler: src/animals/delete.deleteAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam"]},{"id":200891225,"files":["service: lambda-lighthouse-metrics\n\nframeworkVersion: \"=1.49.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:GetRecords\n        - dynamodb:DescribeStream\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:*'\n    - Effect: Allow\n      Action:\n        - SNS:Subscribe\n        - SNS:Publish\n      Resource: 'arn:aws:sns:${self:provider.region}:*:*'\n    - Effect: Allow\n      Action:\n        - 's3:List*'\n        - 's3:Get*'\n        - 's3:Put*'\n      Resource:\n        'Fn::Join':\n          - ''\n          - - 'arn:aws:s3:::'\n            - Ref: ServerlessDeploymentBucket\n\n  environment:\n    BUCKET:\n      Ref: ServerlessDeploymentBucket\n    PAGES_TABLE_NAME: '${self:service.name}-${self:provider.stage}-pages'\n    JOBS_TABLE_NAME:  '${self:service.name}-${self:provider.stage}-jobs'\n    RUNS_TABLE_NAME:  '${self:service.name}-${self:provider.stage}-runs'\n    SNS_TOPIC_ARN:\n      Ref: snsPagesToTestTopic\n    DLQ_ARN:\n      Ref: snsPagesToTestDlqTopic\n\npackage:\n  individualy: true\n\nfunctions:\n  initialize:\n    handler: handler.initialize\n    memorySize: 2048\n    timeout: 30\n    reservedConcurrency: 3\n  postProcessor:\n    handler: handler.postProcessor\n    memorySize: 128\n    reservedConcurrency: 10\n  worker:\n    handler: handler.worker\n    memorySize: 2048\n    timeout: 30\n    reservedConcurrency: 3\n    onError:\n      Ref: snsPagesToTestDlqTopic\n\nresources:\n  Resources:\n    pagesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-pages'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: pageId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: pageId\n            KeyType: HASH\n    jobsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-jobs'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: jobId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: jobId\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    runsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-runs'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: pageId\n            AttributeType: S\n          - AttributeName: jobId\n            AttributeType: S\n          - AttributeName: runId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: runId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: pageIdIndex\n            KeySchema:\n              - AttributeName: pageId\n                KeyType: HASH\n            Projection:\n              ProjectionType: KEYS_ONLY\n          - IndexName: jobIdIndex\n            KeySchema:\n              - AttributeName: jobId\n                KeyType: HASH\n            Projection:\n              ProjectionType: KEYS_ONLY\n    snsPagesToTestTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: '${self:service.name}-${self:provider.stage}-pagesToTest'\n    snsPagesToTestTopicSubs:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn:\n          Ref: snsPagesToTestTopic\n        Endpoint:\n          'Fn::GetAtt': [WorkerLambdaFunction, Arn]\n        Protocol: lambda\n    snsPagesToTestDlqTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: '${self:service.name}-${self:provider.stage}-pagesToTestDlq'\n    snsPagesToTestDlqTopicSubs:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn:\n          Ref: snsPagesToTestDlqTopic\n        Endpoint:\n          'Fn::GetAtt': [WorkerLambdaFunction, Arn]\n        Protocol: lambda\n    snsPagesToTestTopicLambdaPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Ref: WorkerLambdaFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Ref: snsPagesToTestTopic\n    snsPagesToTestTopicDlqLambdaPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Ref: WorkerLambdaFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Ref: snsPagesToTestDlqTopic\n    postProcessorLambdaEventSouceMapping:\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        EventSourceArn:\n          'Fn::GetAtt': [jobsTable, StreamArn]\n        FunctionName:\n          Ref: PostProcessorLambdaFunction\n        BatchSize: 1\n        StartingPosition: LATEST\n"]},{"id":150366503,"files":["# serverless.yml\nservice: serverless-express-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ${opt:region, self:custom.defaultRegion}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  defaultRegion: us-west-2\n  defaultCognitoPoolArn: arn:SOMETHING\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  serverlessExpressApi:\n    name: ${self:provider.stage}-serverless-express-lambda\n    description: API definition written in express\n    handler: index.handler\n    memorySize: 128\n    timeout: 30\n    environment:\n      NODE_ENV: ${opt:stage, self:custom.defaultStage}\n    events:\n      - http: \n          path: /\n          method: ANY\n          cors: true\n      - http: \n          path: /docs/{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n          authorizer:\n            arn: ${opt:cognitoPoolArn, self:custom.defaultCognitoPoolArn}\n\nresources:\n  Resources:\n    userGiftTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: user_gifts\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n          - AttributeName: gift_id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n          - AttributeName: gift_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 4\n          WriteCapacityUnits: 2"]}]