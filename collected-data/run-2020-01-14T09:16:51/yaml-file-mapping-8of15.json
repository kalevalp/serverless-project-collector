[{"id":140176329,"files":["service: $APP_NAME\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'prod'}\n  region: us-east-1\n  timeout: 10\n\nfunctions:\n  app:\n    handler: node_modules/next-serverless/lib/server.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      NODE_ENV: production\n"]},{"id":152268711,"files":["service: findme\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:10\n\npackage:\n  exclude:\n    - 'weights/**'\n\nfunctions:\n  search_status:\n    handler: search_status.main\n    name: \"findme/search_status\"\n    events:\n      - http:\n          method: GET\n          path: /api/search/{id}\n          resp: http\n    annotations:\n      final: true\n  schedule_search:\n    handler: schedule_search.main\n    name: \"findme/schedule_search\"\n    events:\n      - http: POST /api/search\n    annotations:\n      final: true\n  twitter_search:\n    handler: twitter_search.main\n    name: \"findme/twitter_search\"\n    events:\n      - trigger: search_request\n    annotations:\n      final: true\n  compare_images:\n    handler: compare_images.main\n    name: \"findme/compare_images\"\n    image: jamesthomas/action-nodejs-v10:tfjs-faceapi\n    memory: 512\n    events:\n      - trigger: tweet_image\n    annotations:\n      final: true\n\ncustom: \n  credentials: ${file(creds.json)}\n\nresources:\n  packages:\n    findme:\n      parameters:\n        redis: ${self:custom.credentials.redis}\n        auth0: ${self:custom.credentials.auth0}\n        twitter_client: ${self:custom.credentials.twitter}\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":158269226,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serviceName\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  timeout: 30\n\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.default\n    events:\n      - http:\n          path: hello/{path+}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 3001\n  dynamodb:\n    start:\n      migrate: true\n      port: 8000\n  webpack:\n    includeModules: true\n"]},{"id":159688756,"files":["service: ssr-react-next\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  server:\n    handler: index.server\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  \nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN}\n    basePath: ''\n    stage: ${self:custom.secrets.NODE_ENV}\n    createRoute53Record: true\n    # endpointType: 'regional'\n    # if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`"]},{"id":54150474,"files":["frameworkVersion: \">=1.30.3 <2.0.0\"\n\nservice: serverless-authentication # change this\n\nprovider:\n  name: aws\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n    - Effect: Allow\n      Action:\n      - cognito-sync:*\n      - cognito-identity:*\n      Resource: arn:aws:cognito-identity:*:*:*\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n  runtime: nodejs8.10\n\npackage:\n  exclude:\n    - .git/**\n\n# Functions\n\nfunctions:\n  signin:\n    handler: handler.signin\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/signin/{provider}\n          method: get\n          integration: lambda-proxy\n  callback:\n    handler: handler.callback\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/callback/{provider}\n          method: get\n          integration: lambda-proxy\n  refresh:\n    handler: handler.refresh\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/refresh/{refresh_token}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: |\n                {\n                  \"refresh_token\":\"$input.params('refresh_token')\",\n                  \"id\":\"$input.params('id')\",\n                  \"state\":\"$input.params('state')\",\n                  \"host\":\"$input.params().header.get('host')\",\n                  \"stage\":\"$context.stage\"\n                }\n  authorize:\n    handler: handler.authorize\n\nplugins:\n  - deployment-info\n\nresources:\n  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template\n  # Condition is used to switch API Gateway custom domain creation\n  Conditions:\n    CreateCustomDomain:\n      Fn::Not:\n        - Fn::Equals:\n          - ${self:provider.environment.REDIRECT_DOMAIN_NAME, \"\"}\n          - \"\"\n  Resources:\n    AuthorizationFunctionArnParameter:\n      Type: AWS::SSM::Parameter\n      Properties:\n        Name: \"/authentication/${self:provider.environment.STAGE}/authorization-function-arn\"\n        Type: \"String\"\n        Value:\n          Fn::GetAtt:\n            - AuthorizeLambdaFunction\n            - Arn\n        Description: \"SSM Parameter for Authorization function arn\"\n    CacheTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: token\n          AttributeType: S\n        - AttributeName: type\n          AttributeType: S\n        KeySchema:\n        - AttributeName: token\n          KeyType: HASH\n        - AttributeName: type\n          KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.CACHE_DB_NAME}\n\n    # UsersTable:\n    #   Type: AWS::DynamoDB::Table\n    #   Properties:\n    #     SSESpecification:\n    #       SSEEnabled: true\n    #     AttributeDefinitions:\n    #     - AttributeName: userId\n    #       AttributeType: S\n    #     KeySchema:\n    #     - AttributeName: userId\n    #       KeyType: HASH\n    #     ProvisionedThroughput:\n    #       ReadCapacityUnits: 1\n    #       WriteCapacityUnits: 1\n    #     TableName: ${self:provider.environment.USERS_DB_NAME}\n\n# API Gateway Custom domain is created if \"REDIRECT_DOMAIN_NAME\" is defined in the env.yml\n    RedirectDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Condition: CreateCustomDomain\n      Properties:\n        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n        CertificateArn: ${self:provider.environment.REDIRECT_CERTIFICATE_ARN}\n    RedirectBasePathMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      Condition: CreateCustomDomain\n      DependsOn: RedirectDomainName\n      Properties:\n        Stage: ${self:provider.environment.STAGE}\n        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n        RestApiId:\n          Ref: ApiGatewayRestApi\n    RedirectRecordSetGroup:\n      Type: AWS::Route53::RecordSetGroup\n      Condition: CreateCustomDomain\n      Properties:\n        HostedZoneId: ${self:provider.environment.REDIRECT_HOSTED_ZONE_ID}\n        RecordSets:\n        - Name: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n          Type: A\n          AliasTarget:\n            HostedZoneId: Z2FDTNDATAQYW2 # don't change -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid\n            DNSName:\n              Fn::GetAtt:\n                - RedirectDomainName\n                - DistributionDomainName\n","service: serverless-authentication-test-token # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n  runtime: nodejs8.10\n\nfunctions:\n  testToken:\n    handler: handler.test\n    events:\n      - http:\n          path: test-token\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n          authorizer:\n            arn: ${ssm:/authentication/${opt:stage, self:provider.stage}/authorization-function-arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n","name: placeholder-for-install\n"]},{"id":135306312,"files":["service: express-sls-app\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  app:\n    handler: app.server\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\n# plugins:\n#   - serverless-offline"]},{"id":88438307,"files":["service: serverless-dynalite-example\n\nplugins:\n  - serverless-offline\n  - serverless-dynalite\n\ncustom:\n  dynalite:\n    start:\n      port: 4567\n      region: us-east-1\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  \n# functions:\n#   rulesApi:\n#     handler: sample.handler\n#     events:\n#       - http:\n#           method: GET\n#           path: /\n#           cors: true\n\nresources:  \n  Resources:\n    ResultsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: SampleTable\n        AttributeDefinitions:\n          - AttributeName: unique_key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: unique_key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/SampleTable\n        Roles:\n          - Ref: IamRoleLambdaExecution"]},{"id":157885108,"files":["service: serverless-email-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: dev\n  # change this to use your own profile (https://serverless.com/framework/docs/providers/aws/guide/credentials#using-aws-profiles)\n  profile: winterwind_serverless_deployer\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"states:StartExecution\"\n      Resource:\n        - Ref: EmailSchedulingStateMachine\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/${self:custom.EMAIL_SENDER_ADDRESS}\n\ncustom:\n  EMAIL_SENDER_ADDRESS: \"paul@winterwindsoftware.com\"\n\npackage:\n  individually: true\n\nfunctions:\n  ScheduleEmail:\n    handler: src/lambdas/schedule-email.handle\n    environment:\n      STATEMACHINE_ARN: ${self:resources.Outputs.EmailSchedulingStateMachine.Value}\n  SendEmail:\n    handler: src/lambdas/send-email.handle\n    environment:\n      EMAIL_SENDER_ADDRESS: ${self:custom.EMAIL_SENDER_ADDRESS}\n\nstepFunctions:\n  stateMachines:\n    EmailSchedulingStateMachine:\n      name: EmailSchedulingStateMachine\n      definition:\n        Comment: \"Schedules an email to be sent at a future date\"\n        StartAt: WaitForDueDate\n        States:\n          WaitForDueDate:\n            Type: Wait\n            TimestampPath: \"$.dueDate\"\n            Next: SendEmail\n          SendEmail:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-SendEmail\"\n            End: true\n\nresources:\n  Outputs:\n    EmailSchedulingStateMachine:\n      Description: The ARN of the EmailSchedulingStateMachine\n      Value:\n        Ref: EmailSchedulingStateMachine\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-webpack # to keep package size low\n"]},{"id":71295310,"files":["service: ${self:custom.project.name}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:custom.project.provider.profile}\n  stage: ${self:custom.project.provider.stage}\n  region: ${self:custom.project.provider.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:GetObjectAcl\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.project.sourceBucket}\n            - \"/\"\n            - ${self:custom.project.sourcePrefix}\n            - \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n        - \"s3:GetObjectAcl\"\n        - \"s3:ListBucketMultipartUploads\"\n        - \"s3:ListMultipartUploadParts\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n        - \"s3:PutObjectTagging\"\n        - \"s3:PutObjectVersionAcl\"\n        - \"s3:PutObjectVersionTagging\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.project.destinationBucket}\n            - \"/\"\n            - ${self:custom.project.destinationPrefix}\n            - \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - rekognition:DetectFaces\n\n\n\ncustom:\n  webpackIncludeModules: false # disable auto including modules\n  project: ${file(src/config.js):serverless}\n\n\nplugins:\n  - serverless-webpack\n\npackage:\n  exclude:\n    - .serverless\n    - .webpack\n    - coverage\n    - .babelrc\n    - .eslintignore\n    - .eslintrc\n    - .gitignore\n    - LICENSE\n    - package.json\n    - README.md\n    - serverless.yml\n    - webpack.config.js\n\nfunctions:\n  sharpImage:\n    description: Resizes images\n    memorySize: 1024\n    timeout: 30\n    handler: handler.processImage\n    events:\n      - s3:\n          bucket: ${self:custom.project.sourceBucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.project.sourcePrefix}\n\n\n# Comment out the imageDestinationBucket section\n# if you want to use previously existing buckets\nresources:\n  Resources:\n    imageDestinationBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.project.destinationBucket}\n"]},{"id":125552122,"files":["service: test-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-local-schedule\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule:\n          rate: cron(0 10 * * ? *)\n          name: test-crontab\n          timezone: America/New_York\n      - schedule:\n          rate: cron(0 5 * * ? *)\n          timezone: America/New_York\n"]},{"id":139182412,"files":["{{#ant.service}}\nservice:\n  name: {{{ant.service}}}\n{{/ant.service}}\n\nprovider:\n  name: aws\n  {{#config.profile}}\n  profile: {{{config.profile}}}\n  {{/config.profile}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  graphQL:\n    handler: graphQL.run\n    runtime: nodejs8.10\n    package:\n      individually: true\n      exclude:\n        - ./**\n      include:\n        - node_modules/**\n        - ant.yml\n        - model.graphql\n        - graphQL.js\n    events:\n      - http:\n          path: graphql\n          method: get\n      - http:\n          path: graphql\n          method: post\n  graphiQL:\n    handler: graphiQL.run\n    runtime: nodejs8.10\n    package:\n      individually: true\n      exclude:\n        - ./**\n      include:\n        - node_modules/**\n        - graphiQL.js\n    events:\n      - http:\n          path: graphiql\n          method: get\n{{#functions.length}}\n{{#functions}}\n  {{{name}}}:\n    handler: libFunction.run\n    runtime: nodejs8.10\n    environment:\n      LIB: ./{{{handlerFileName}}}\n    package:\n      individually: true\n      artifact: {{{name}}}.zip\n{{/functions}}\n{{/functions.length}}\n"]},{"id":145315121,"files":["service: serverless-graphql\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n\nfunctions:\n  graphql:\n    handler: index.handler\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  playground:\n    handler: index.handler\n    events:\n      - http:\n          path: playground\n          method: get\n"]},{"id":155041668,"files":["service: aws-mfa-enforce\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  memorySize: 128\n  role: customRole\n\nfunctions:\n  cron:\n    handler: handler.handler\n    environment:\n      EMAIL: ${ssm:email}\n      PASSWORD: ${ssm:email_password}\n      EMAIL_SUBJECT: Activate Multi Factor Authentication to access AWS services\n      EMAIL_BODY: > \n        Hello,<br/>\n        <p>Your email was recently added our organizational AWS account. To enhance the security of your account Multi Factor Authentication (MFA) has been enforced. <b><i>You cannot access any AWS service until you activate MFA</i></b>.</p>\n        <p>To activate MFA for your AWS user account, please follow the steps provided at: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user</p><br/>\n        Regards,<br/>\n        Security Bot\n    events:\n      - schedule: rate(12 hours)\n\nresources:\n  Resources:\n    customRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ServerlessFrameworkRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ServerlessPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n              - Sid: AllowIAMForLambdaPolicy\n                Effect: Allow\n                Action:\n                - iam:GetGroup\n                - iam:ListUsers\n                - iam:AddUserToGroup\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n    mfaGroup:\n      Type: AWS::IAM::Group\n      Properties:\n        GroupName: MFA-enforced\n        Policies:\n        - PolicyName: MFA\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Sid: AllowAllUsersToListAccounts\n                Effect: Allow\n                Action:\n                - iam:ListAccountAliases\n                - iam:ListUsers\n                - iam:ListVirtualMFADevices\n                - iam:GetAccountPasswordPolicy\n                - iam:GetAccountSummary\n                Resource: \"*\"\n              - Sid: AllowIndividualUserToSeeAndManageOnlyTheirOwnAccountInformation\n                Effect: Allow\n                Action:\n                - iam:ChangePassword\n                - iam:CreateAccessKey\n                - iam:CreateLoginProfile\n                - iam:DeleteAccessKey\n                - iam:DeleteLoginProfile\n                - iam:GetLoginProfile\n                - iam:ListAccessKeys\n                - iam:UpdateAccessKey\n                - iam:UpdateLoginProfile\n                - iam:ListSigningCertificates\n                - iam:DeleteSigningCertificate\n                - iam:UpdateSigningCertificate\n                - iam:UploadSigningCertificate\n                - iam:ListSSHPublicKeys\n                - iam:GetSSHPublicKey\n                - iam:DeleteSSHPublicKey\n                - iam:UpdateSSHPublicKey\n                - iam:UploadSSHPublicKey\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n              - Sid: AllowIndividualUserToViewAndManageTheirOwnMFA\n                Effect: Allow\n                Action:\n                - iam:CreateVirtualMFADevice\n                - iam:DeleteVirtualMFADevice\n                - iam:EnableMFADevice\n                - iam:ListMFADevices\n                - iam:ResyncMFADevice\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:mfa/'\n                    - '${aws:username'\n                    - '}'\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n              - Sid: AllowIndividualUserToDeactivateOnlyTheirOwnMFAOnlyWhenUsingMFA\n                Effect: Allow\n                Action:\n                - iam:DeactivateMFADevice\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:mfa/'\n                    - '${aws:username'\n                    - '}'\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n                Condition:\n                  Bool:\n                    aws:MultiFactorAuthPresent: 'true'\n              - Sid: BlockMostAccessUnlessSignedInWithMFA\n                Effect: Deny\n                NotAction:\n                - iam:CreateVirtualMFADevice\n                - iam:DeleteVirtualMFADevice\n                - iam:ListVirtualMFADevices\n                - iam:EnableMFADevice\n                - iam:ResyncMFADevice\n                - iam:ListAccountAliases\n                - iam:ListUsers\n                - iam:ListSSHPublicKeys\n                - iam:ListAccessKeys\n                - iam:ListServiceSpecificCredentials\n                - iam:ListMFADevices\n                - iam:GetAccountSummary\n                - sts:GetSessionToken\n                Resource: \"*\"\n                Condition:\n                  BoolIfExists:\n                    aws:MultiFactorAuthPresent: 'false'"]},{"id":132734757,"files":["service: serverless-jwt-auth\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  env: ${file(env.${opt:STAGE, 'prod'}.yml), file(env.yml)}\n  dynamodb: ${file(config/dynamodb-offline.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:STAGE, self:custom.env.STAGE}\n  region: ${self:custom.env.REGION}\n  environment:\n    JWT_SECRET: ${self:custom.env.JWT_SECRET}\n    TABLENAME_USERS: ${self:service}-${self:provider.stage}-users\n    TABLENAME_TASKS: ${self:service}-${self:provider.stage}-tasks\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource:\n      # DynamoDB tables to provide access to\n      - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLENAME_USERS}\"\n      - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLENAME_TASKS}\"\n\nfunctions:\n  - ${file(routes/users.yml)}\n  - ${file(routes/tasks.yml)}\n\nresources:\n  Resources:\n    - ${file(config/dynamodb.yml)}\n"]},{"id":138269372,"files":["service: ServerlessHandsOnPart2\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  timeout: 30\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nfunctions:\n  crawler:\n    handler: handler.crawler\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":144443794,"files":["\n#    _____ _            _        \n#   /  ___| |          | |       \n#   \\ `--.| | __ _  ___| | __    \n#    `--. \\ |/ _` |/ __| |/ /    \n#   /\\__/ / | (_| | (__|   <     \n#   \\____/|_|\\__,_|\\___|_|\\_\\    \n#   ______           _   ___ _   \n#   |  _  \\         | | / (_) |  \n#   | | | |_____   _| |/ / _| |_ \n#   | | | / _ \\ \\ / /    \\| | __|\n#   | |/ /  __/\\ V /| |\\  \\ | |_ \n#   |___/ \\___| \\_/ \\_| \\_/_|\\__|\n#\n# This file is the main config file for your app.\n# You can always add more config options for more control.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n\nservice: slack-devkit\n\ncustom:\n  # The API Gateway path\n  slack_path: slack\n\n  # The dynamodb table to store OAuth access data\n  slack_table_name: Workspaces\n\n  # Space delimited scopes\n  slack_scope: \"commands,conversations:read\"\n\n  # The path to redirect to after an install\n  slack_redirect_uri: https://abcd123.execute-api.us-east-1.amazonaws.com/\n\n  # Signing Secret\n  slack_signing_secret: \"1111111111111\"\n  \n  # Client ID - quotes required\n  slack_client_id: \"22222222.33333333\"\n  \n  # Client Secret - quotes required\n  slack_client_secret: \"12341234123412341234\"\n  \n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n  environment:\n    SCOPE: ${self:custom.slack_scope}\n    TABLE_NAME: ${self:custom.slack_table_name}\n    CLIENT_ID: ${self:custom.slack_client_id}\n    CLIENT_SECRET: ${self:custom.slack_client_secret}\n    SIGNING_SECRET: ${self:custom.slack_signing_secret}\n    ENABLE_LOGGING: ${self:custom.slack_enable_logging}\n    REDIRECT_URI: ${self:custom.slack_redirect_uri}\n\nfunctions:\n  slack:\n    handler: examples/lambda.handler\n    events:\n      - http:\n          path: ${self:custom.slack_path}\n          method: ANY\n          integration: lambda\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n          request:\n            template:\n              application/x-www-form-urlencoded: >\n                {\n                  \"method\": \"$context.httpMethod\",\n                  \"body\": \"$util.escapeJavaScript($input.body).replace(\"\\'\", \"'\")\",\n                  \"query\": {\n                    #foreach($param in $input.params().querystring.keySet())\n                    \"$param\": \"$input.params().querystring.get($param)\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  },\n                  \"headers\": {\n                    #foreach($param in $input.params().header.keySet())\n                    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  }\n                }\n              application/json: >\n                {\n                  \"method\": \"$context.httpMethod\",\n                  \"body\": \"$util.escapeJavaScript($input.body).replace(\"\\'\", \"'\")\",\n                  \"query\": {\n                    #foreach($param in $input.params().querystring.keySet())\n                    \"$param\": \"$input.params().querystring.get($param)\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  },\n                  \"headers\": {\n                    #foreach($param in $input.params().header.keySet())\n                    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  }\n                }\n\n\nresources:\n  Resources:\n    TeamsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.slack_table_name}\n"]},{"id":99741083,"files":["service: stackOverflowMonitor\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    FAUNADB_SECRET: 'YOUR_OWN_SECRET'\n\nfunctions:\n  getStackOverflowQuestions:\n    handler: handler.getStackOverflowQuestions\n    events:\n      - http: GET getStackOverflowQuestions\n      - schedule: rate(20 minutes) # Change it to your own if needed\n    environment:\n       STACK_EXCHANGE_KEY: 'YOUR_STACK_OVERFLOW_KEY'\n       SLACK_WEBHOOK_URL: 'YOUR_SLACK_WEBHOOK_URL'\n       SLACK_CHANNEL: '#MY_CHANNEL'\n       SLACK_USERNAME: 'StackOverflow'\n       SLACK_ICON_URL: 'http://cdn.sstatic.net/stackexchange/img/logos/so/so-icon.png'\n       SEARCH_KEYWORD: 'MY_KEYWORD'\n"]},{"id":137424566,"files":["\nservice: ssr\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n\nfunctions:\n  app:\n    handler: handler.ssr\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\nplugins:\n  - serverless-offline"]},{"id":107423907,"files":["service: image-resize-on-the-fly-bucket\n\ncustom:\n  secrets: ${file(../secrets/secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  region: us-east-1\n  environment:\n    BUCKET: ${env:BUCKET}\n\nresources:\n  Resources:\n    ImageResizeOnTheFly:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicReadWrite\n        BucketName: ${env:BUCKET}\n        WebsiteConfiguration:\n          ErrorDocument: error.html\n          IndexDocument: index.html\n          RoutingRules:\n            - \n              RedirectRule:\n                HostName: ${self:custom.secrets.DOMAIN}\n                HttpRedirectCode: \"307\"\n                Protocol: \"https\"\n                ReplaceKeyPrefixWith: \"${self:provider.stage}/resize?key=\"\n              RoutingRuleCondition:\n                HttpErrorCodeReturnedEquals: \"404\"\n                KeyPrefixEquals: \"\"\n    ImageResizeOnTheFlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties: \n        Bucket: \n          Ref: ImageResizeOnTheFly\n        PolicyDocument: \n          Statement: \n            - \n              Action: \n                - \"s3:*\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join: \n                  - \"\"\n                  - \n                    - \"arn:aws:s3:::\"\n                    - \n                      Ref: ImageResizeOnTheFly\n                    - \"/*\"\n              Principal: \"*\"","service: image-resize-on-the-fly-functions\n\nplugins:\n  - serverless-plugin-tracing\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  tracing: true\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n    REGION: ${env:REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  resize:\n    handler: resize.handler\n    events:\n      - http:\n          path: resize\n          method: get"]},{"id":93872934,"files":["\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n\nservice: lambda-probot-express\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\nfunctions:\n\n  router:\n    handler: handler.router\n\n    environment:\n      WEBHOOK_SECRET: development\n      APP_ID: 0000\n      SENTRY_DSN: https://<user>:<key>@sentry.io/0000\n\n    events:\n      - http:\n         path: \"{page+}\"\n         method: get\n      - http:\n         path: /\n         method: get\n      - http:\n         path: /\n         method: post\n"]},{"id":146214910,"files":["service: lambda-sns-dlq-error-handling\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nplugins:\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  profile: ${self:custom.secrets.profile, 'dev'}\n  memorySize: 128\n  environment:\n    accountId: '#{AWS::AccountId}'\n    region: ${self:provider.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  init:\n    handler: init.handler\n    events:\n      - http:\n          path: init\n          method: post\n          cors: true\n  calculate:\n    handler: calculate.handler\n    events:\n      - sns: calculate-topic\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:dlq-topic\n  error:\n    handler: error.handler\n    events:\n      - sns: dlq-topic\n    \n# TODO - ADD SQS QUEUE\n# resources:\n#   Resources:\n#     SQSDLQStream:"]},{"id":101673357,"files":["service: serverless-medium-transcriptions\n\npackage:\n  exclude:\n    - front/**\n    - assets/**\n    - LICENSE\n    - README.md\n    - sample-article.json\n\ncustom:\n  serverless-offline:\n    port: 1337\n  s3:\n    bucket: serverless-medium-transcriptions-${opt:stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    TRANSCRIPTS_BUCKET: ${self:custom.s3.bucket}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:*'\n      Resource: '*'\n    - Effect: 'Allow'\n      Action:\n        - 'polly:SynthesizeSpeech'\n      Resource: '*'\n\nfunctions:\n  transcoder:\n    handler: transcoder.handle\n    events:\n      - http:\n          path: transcode\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3.bucket}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\n"]},{"id":139438884,"files":["service: ${file(./serverless-vpc-variables.yml):serviceName}\n\n\nplugins:\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\n\ncustom:\n  region: ${file(./serverless-vpc-variables.yml):region}\n  accountId: ${file(./serverless-vpc-variables.yml):accountId}\n  domain:\n    staging: staging-${self:service}.${file(./serverless-vpc-variables.yml):baseDomain}\n    production: production-${self:service}.${file(./serverless-vpc-variables.yml):baseDomain}\n  subnetId:\n    staging: ${file(./serverless-vpc-variables.yml):subnetId.staging}\n    production: ${file(./serverless-vpc-variables.yml):subnetId.production}\n  securityGroup:\n    staging: ${file(./serverless-vpc-variables.yml):securityGroup.staging}\n    production: ${file(./serverless-vpc-variables.yml):securityGroup.production}\n  customDomain:\n    basePath: ''\n    domainName: ${self:custom.domain.${opt:stage}}\n    certificateName: '*.${file(./serverless-vpc-variables.yml):baseDomain}'\n    stage: ${opt:stage}\n    createRoute53Record: true\n  apigwBinary:\n    types:\n      - '*/*'\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${file(./serverless-vpc-variables.yml):region}\n  memorySize: 128\n  environment:\n    DB_PREFIX: \"${opt:stage}_${self:service}_\"\n    SERVICE_AWS_REGION: \"${file(./serverless-vpc-variables.yml):region}\"\n    NODE_ENV: 'production'\n    STATIC_PATH: ''\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:BatchGetItem\"\n        - \"dynamodb:BatchWriteItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:DescribeTimeToLive\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:UpdateTable\"\n      Resource: \"arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${opt:stage}_${self:service}_*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:CreateTable\"\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:ListTables\"\n      Resource: \"*\"\n\n\n\nfunctions:\n  app:\n    handler: lambda.handler\n    vpc:\n      securityGroupIds: ${self:custom.securityGroup.${opt:stage}}\n      subnetIds: ${self:custom.subnetId.${opt:stage}}\n    events:\n      - http:\n          method: ANY\n          path: /\n          contentHandling: CONVERT_TO_BINARY\n      - http:\n          method: ANY\n          path: '{proxy+}'\n          contentHandling: CONVERT_TO_BINARY\n","---\n\nserviceName: \"dog\"\nbaseDomain: \"domain.io\"\nregion: \"ap-southeast-1\"\naccountId: \"111111111111\"\n\nsubnetId:\n  staging:\n    - \"subnet-aaaaaaaa\"\n    - \"subnet-bbbbbbbb\"\n  production:\n    - \"subnet-cccccccc\"\n    - \"subnet-dddddddd\"\n\nsecurityGroup:\n  staging:\n    - \"sg-eeeeeeee\"\n  production:\n    - \"sg-ffffffff\"\n"]},{"id":145358908,"files":["service: serverless-custom-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  stage: dev\n  region: us-east-1\n  timeout: 300\n  memorySize: 1024\n\nfunctions:\n  auth:\n    handler: index.auth\n    \n  private:\n    handler: index.private\n    events:\n      - http:\n          path: private\n          method: get\n          authorizer: auth   #https://serverless.com/framework/docs/providers/aws/events/apigateway/#http-endpoints-with-custom-authorizers\n          cors: true\n\n  public:\n    handler: index.public\n    events:\n      - http:\n          path: public\n          method: get\n          cors: true\n\n#https://github.com/serverless/serverless/issues/3896#issuecomment-326721971\n#https://github.com/serverless/examples/blob/master/aws-node-auth0-custom-authorizers-api/serverless.yml#L33\nresources:\n  Resources:\n    ExpiredGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        ResponseTemplates:\n          application/json: |\n            {\n              \"success\":false,\n              \"message\":\"Token Expired\"\n            }\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseTemplates:\n            application/json: |\n              {\n                \"success\":false,\n                \"message\":$context.error.messageString\n              }\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    DenyFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseTemplates:\n            #https://stackoverflow.com/a/49806967/10212963\n            application/json: |\n              {\n                \"success\":false,\n                \"message\":\"$context.authorizer.customErrorMessage\"\n              }\n        ResponseType: ACCESS_DENIED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '403'\n    \n\nplugins:\n  - serverless-offline\n"]},{"id":102906669,"files":["frameworkVersion: '>=1.28.0'\n\n# NOTE: update this with your service name\nservice: serverless-webpack-babel-boilerplate\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: ['env', 'flow']\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  versionFunctions: false\n  environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  houses:\n    handler: src/handlers/houses.handler\n    events:\n      - http:\n          method: get\n          path: houses\n  heir:\n    handler: src/handlers/heir.handler\n    events:\n      - http:\n          method: get\n          path: heir\n\npackage:\n  individually: true\n"]},{"id":99590290,"files":["service: Image-Resizer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  memorySize: 1024 # optional, default is 1024\n  timeout: 100 # optional, default is 6\n\n  stage: dev\n  region: eu-west-1\n\n  role: BucketAccess\n\n  environment:\n    BUCKET: \"sample-bucket\"\n    SLS_DEBUG: \"*\"\n    RESIZE_LAMBDA: ${self:provider.stage}-resizeImage\n\n\npackage:\n  individually: true\n  # exclude:\n  #   - bin/**\n  #   - functions/**\n\nplugins:\n  - serverless-plugin-browserify\n\nfunctions:\n  getImage:\n    name: ${self:service}-${self:provider.stage}-getImage\n    handler: functions/getImage/index.handler\n    events:\n      - http: GET {proxy+}\n    package:\n      include:\n        - functions/getImage/**\n  resizeImage:\n    name: ${self:provider.environment.RESIZE_LAMBDA}\n    handler: functions/resizeImage/index.handler\n    package:\n      include:\n        - functions/resizeImage/**\n  uploadImage:\n    name: ${self:service}-${self:provider.stage}-uploadImage\n    handler: functions/uploadImage/index.handler\n    events:\n      - http: POST /upload\n    package:\n      include:\n        - functions/uploadImage/**\n\n\n\n# you can add CloudFormation resource templates here\n\nresources:\n  Resources:\n    BucketAccess:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:provider.environment.BUCKET}-S3-BUCKET-ACCESS-${self:service}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:provider.environment.BUCKET}-access-bucket-${self:service}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.BUCKET}/*\"]]\n                - Effect: Allow\n                  Action:\n                    - \"lambda:InvokeFunction\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:lambda:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":function:${self:provider.environment.RESIZE_LAMBDA}\"]]\n"]},{"id":140978466,"files":["service: lambda-mailer\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    EMAIL: ${self:custom.secrets.EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n  sendFormEncoded:\n    handler: handler.sendFormEncoded\n    events:\n      - http:\n          path: email/send/formencoded\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":85000185,"files":["service: sqs-worker-serverless\n\nplugins:\n  - serverless-sqs-alarms-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n    Resource: arn:aws:dynamodb:*:*:table/${self:custom.config}\n  - Effect: Allow\n    Action:\n      - lambda:InvokeFunction\n    Resource: arn:aws:lambda:*:*:function:${self:custom.process}\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: arn:aws:sqs:*:*:${self:custom.sqs}\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  config: ${self:custom.prefix}-config\n  sns: ${self:custom.prefix}-trigger\n  sqs: ${self:custom.prefix}-messages\n\n  sqs-alarms:\n    - queue: ${self:custom.sqs}\n      topic: ${self:custom.sns}\n      thresholds:\n        - 1\n        - 50\n        - 100\n        - 500\n        - 1000\n        - 5000\n\npackage:\n  exclude:\n    - docs/**\n    - helpers/**\n    - node_modules/**\n    - test/**\n\nfunctions:\n  scale:\n    timeout: 10\n    handler: functions/scale.handler\n    name: ${self:custom.prefix}-scale\n    environment:\n      config: ${self:custom.config}\n    events:\n      - sns: ${self:custom.sns}\n\n  worker:\n    timeout: 10\n    handler: functions/worker.handler\n    name: ${self:custom.prefix}-worker\n    environment:\n      config: ${self:custom.config}\n      process: ${self:custom.process}\n    events:\n      - schedule: rate(1 minute)\n\n  process:\n    timeout: 60\n    handler: functions/process.handler\n    name: ${self:custom.prefix}-process\n    environment:\n      region: ${self:custom.region}\n      sqs: ${self:custom.sqs}\n\nresources:\n  Resources:\n\n    Messages:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - MessagesDeadLetterQueue\n            - Arn\n          maxReceiveCount: 10\n\n    MessagesDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: 1209600\n\n    Config:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.config}\n        AttributeDefinitions:\n          - AttributeName: key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n"]},{"id":106048902,"files":["service: landsat-tiler\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: production\n\n  region: us-west-2\n\n  iamRoleStatements:\n  -  Effect: \"Allow\"\n     Action:\n       - \"s3:GetObject\"\n     Resource:\n       - \"arn:aws:s3:::landsat-pds/*\"\n\n  environment:\n    GDAL_CACHEMAX: 75%\n    GDAL_TIFF_OVR_BLOCKSIZE: 512\n    VSI_CACHE: TRUE\n    VSI_CACHE_SIZE: 536870912\n    GDAL_DISABLE_READDIR_ON_OPEN: true\n    CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".TIF,.ovr\"\n\n  #Optional Bucket where you store your lambda package\n  # deploymentBucket: {YOUR-BUCKET}\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nplugins:\n  - serverless-apigw-binary\n\npackage:\n  artifact: package.zip\n\nfunctions:\n  landsat-tiler:\n    handler: app.landsat.APP\n    memorySize: 1536\n    timeout: 20\n    events:\n      - http:\n          path: landsat/{proxy+}\n          method: get\n          cors: true\n"]},{"id":138298442,"files":["service: serverless-next-js\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: development\n  region: us-east-1\n  environment:\n    NODE_ENV: production\n    LAMBDA: true\n\nfunctions:\n  next:\n    handler: lambda.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: /{any+}"]},{"id":105545043,"files":["service: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: dev\n  region: eu-central-1\n  \nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello/get\n          method: get\nplugins:\n  - serverless-offline"]},{"id":76161834,"files":["service: slack-to-opsgenie-alert-creator\n\nprovider:\n  name: aws\n#  region: us-west-2\n  runtime: nodejs4.3\n  memorySize: 256\n  timeout: 10\n  stage: dev\n#  profile: customProfile\n  environment:\n      slackToken: yourSlackToken\n      opsgenieApiKey: yourOpsGenieApiKey\n\nfunctions:\n  main:\n    name: SlackToOpsGenieAlertCreator\n    description: Creates alert for messages sent to a channel\n    handler: main.handler\n    events:\n      - http: POST slack-to-opsgenie-alert-create\n"]},{"id":97662190,"files":["# Serverless configuration for the geotemporal service\n# For full config options, check the docs:\n#    docs.serverless.com\n\n# Pin the serverless version\nframeworkVersion: \"=1.17.0\"\n\nservice: here-one-geotemporal\n\n# Plugins\nplugins:\n  - serverless-offline\n  - serverless-plugin-offline-kinesis-events\n  - serverless-plugin-bind-deployment-id\n  - serverless-plugin-git-variables\n  - serverless-plugin-cloudwatch-sumologic\n  - serverless-plugin-deploy-environment\n  - serverless-plugin-aws-alerts\n\ncustom:\n  # See: https://github.com/elastic-coders/serverless-webpack\n  webpack: webpack.config.js\n  webpackIncludeModules: true\n  # If you want to ship logs to sumologic\n  # shipLogs:\n  #   collectorUrl: ${self:deployVariables.collector}\n  #   filterPattern: \"\"\n  #   function:\n  #     name: ${self:provider.stage}-${self:service}-cloudwatch-sumologic\n  #     description: Sync logs from cloudwatch to sumologic. COMMIT ${git:sha1}, BRANCH ${git:branch}\n  #     memorySize: 128\n  defaults:\n    log_level: INFO\n    stage: dev\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\n  offlineKinesisEvents:\n    host: ${self:deployEnvironment.LAMBDA_KINESIS_HOST}\n    port: ${self:deployEnvironment.LAMBDA_KINESIS_PORT}\n    region: ${self:deployEnvironment.LAMBDA_REGION}\n    # How often to poll the Kinesis stream\n    intervalMillis: 5000\n\n  notifications:\n    - protocol: https\n      endpoint: https://events.pagerduty.com/exampleIntegration\n  alerts:\n    stages:\n      - production\n      - staging\n    topics:\n      ok:\n        topic: ${self:provider.stage}-${self:service}-alerts-ok\n        notifications: ${self:custom.notifications}\n      alarm:\n        topic: ${self:provider.stage}-${self:service}-alerts-alarm\n        notifications: ${self:custom.notifications}\n      insufficientData: ${self:provider.stage}-${self:service}-alerts-insufficientData\n    definitions:\n      functionDuration:\n        evaluationPeriods: 5\n        threshold: 1000\n      functionErrors:\n        evaluationPeriods: 2\n    global:\n      - functionThrottles\n      - functionErrors\n    function:\n      - functionDuration\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.defaults.stage}\n  region: us-west-2\n  # In normal use, these would be set in config/deploy.yml\n  # domain: ${self:deployVariables.domain}\n  # role: ${self:deployVariables.role}\n\nfunctions:\n  putEvents:\n    # This is only triggered by puts to the event log\n    private: true\n    name: ${self:provider.stage}-${self:service}-put-events\n    description: Example of put events COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handlers.putEvents\n    memorySize: 128\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          arn: ${self:deployVariables.streamArn}\n          batchSize: 100\n          startingPosition: LATEST\n"]},{"id":132361937,"files":["# NOTE: update this with your service name\nservice: grocery-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-south-1\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 30 # the timeout is 10 seconds (default is 6 seconds)\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - cloudformation:DescribeStackResource\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  getGrocery:\n    handler: api/groceries/getGrocery.main\n    events:\n      - http:\n          path: grocery\n          method: get\n          cors: true\n  getGroceries:\n    handler: api/groceries/getGroceries.main\n    events:\n      - http:\n          path: groceries\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  updateStock:\n      handler: api/groceries/stock.updateStock\n      events:\n        - http:\n            path: updateStock\n            method: post\n            cors: true\n            authorizer:\n              arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  createCart:\n    handler: api/cart/createCart.main\n    events:\n      - http:\n          path: cart\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getCart:\n    handler: api/cart/getCart.main\n    events:\n      - http:\n          path: cart\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getCartWithDetails:\n    handler: api/cart/getCartWithDetails.main\n    events:\n      - http:\n          path: cartDetails\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  createOrder:\n    handler: api/order/createOrder.main\n    events:\n      - http:\n          path: createOrder\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getUserOrders:\n    handler: api/order/getOrders.main\n    events:\n      - http:\n          path: getOrders\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  cancelOrder:\n    handler: api/order/cancelOrder.main\n    events:\n      - http:\n          path: cancelOrder\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  makePayment:\n    handler: api/pay/makePayment.main\n    events:\n      - http:\n          path: pay\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG"]},{"id":120666358,"files":["service: bovine\nprovider:\n  name: aws\n  runtime: python2.7\n  profile: ${opt:profile}\n  role: lambdaAuditRole\n  stage: ${opt:stage}\n  environment:\n    S3_BUCKET: ${file(config/config.${self:provider.stage}.json):s3bucket}\n    REPORTS_BUCKET: ${file(config/config.${self:provider.stage}.json):reportsBucket}\n    STAGE: ${opt:stage, self:provider.stage}\n    RULES_BUCKET: ${file(config/config.${self:provider.stage}.json):rulesBucket}\n    AUDIT_LAMBDA: ${file(config/config.${self:provider.stage}.json):auditLambda}\n    ASSUME_ROLE: ${file(config/config.${self:provider.stage}.json):lambdaAssumeRole}\n    AUTH_URL: ${file(config/config.${self:provider.stage}.json):authUrl}\n    URL: ${file(config/config.${self:provider.stage}.json):domainName}\ncustom: \n  lambdaRole: ${file(config/config.${self:provider.stage}.json):lambdaRole}\n  accountId: ${file(config/config.${self:provider.stage}.json):accountId}\n  domainName: ${file(config/config.${self:provider.stage}.json):domainName}\n  authorizerArn: ${file(config/config.${self:provider.stage}.json):authorizerArn}\n  region: ${file(config/config.${self:provider.stage}.json):region}\n  s3bucket: ${file(config/config.${self:provider.stage}.json):s3bucket}\n  reportsBucket: ${file(config/config.${self:provider.stage}.json):reportsBucket}\n  rulesBucket: ${file(config/config.${self:provider.stage}.json):rulesBucket}\n  auditLambda: ${file(config/config.${self:provider.stage}.json):auditLambda}\npackage:\n  include:\n    - lib/**\n  exclude:\n    - README.md\n\nfunctions:\n  ping:\n    name: ${self:service}-ping\n    handler: ping.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/ping\n  main:\n    name: ${self:service}-main\n    handler: main.lambda_handler\n    role: lambdaAuditRole\n    timeout: 15\n    events:\n      - http: GET {proxy+}\n      - http: GET /\n  login:\n    name: ${self:service}-login\n    handler: login.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: login\n  dashboard:\n    name: ${self:service}-dashboard\n    handler: dashboard.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/dashboard\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  rules:\n    name: ${self:service}-rules\n    handler: getcompliancerules.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/rules\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  reports:\n    name: ${self:service}-reports\n    handler: getreports.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/reports\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  runreport:\n    name: ${self:service}-runreport\n    handler: runreport.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/reports/run\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  accountcount:\n    name: ${self:service}-accountcount\n    handler: accountcount.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: api/summary/accountcount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  usercount:\n    name: ${self:service}-usercount\n    handler: usercount.lambda_handler\n    timeout: 60\n    events:\n      - http:\n          method: get\n          path: api/summary/usercount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instancecount:\n    name: ${self:service}-instancecount\n    handler: instancecount.lambda_handler\n    timeout: 60\n    events:\n      - http:\n          method: get\n          path: api/summary/instancecount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  accounts:\n    name: ${self:service}-accounts\n    handler: getaccounts.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: api/accounts\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  account:\n    name: ${self:service}-account\n    handler: getaccount.lambda_handler\n    timeout: 10\n    events:\n      - http:\n          method: get\n          path: api/account\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  addAccount:\n    name: ${self:service}-addAccount\n    handler: add_account.lambda_handler\n    timeout: 10\n    events:\n      - http:\n          method: post\n          path: api/addAccount\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  users:\n    name: ${self:service}-users\n    handler: getusers.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/users\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  user:\n    name: ${self:service}-user\n    handler: getuser.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/user\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  roles:\n    name: ${self:service}-roles\n    handler: getroles.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/roles\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  publicips:\n    name: ${self:service}-publicips\n    handler: getpublicips.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/publicips\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instances:\n    name: ${self:service}-instances\n    handler: getinstances.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/instances\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instance:\n    name: ${self:service}-instance\n    handler: getinstance.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/instance\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  securitygroups:\n    name: ${self:service}-securitygroups\n    handler: getsecuritygroups.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/securitygroups\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  securitygroup:\n    name: ${self:service}-securitygroup\n    handler: getsecuritygroup.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/securitygroup\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  elbs:\n    name: ${self:service}-elbs\n    handler: getelbs.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/elbs\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  elb:\n    name: ${self:service}-elb\n    handler: getelb.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/elb\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  dbs:\n    name: ${self:service}-databases\n    handler: getdbs.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/databases\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  dynamotables:\n    name: ${self:service}-dynamotables\n    handler: getdynamotables.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/dynamotables\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  redshift:\n    name: ${self:service}-redshift\n    handler: getredshiftclusters.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/redshiftclusters\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  s3buckets:\n    name: ${self:service}-s3\n    handler: gets3buckets.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/s3\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  s3bucket:\n    name: ${self:service}-bucket\n    handler: gets3bucket.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/bucket    \n          authorizer:\n            arn: ${self:custom.authorizerArn}     \nresources:\n  Resources:\n    #pathmapping:\n    #  Type: AWS::ApiGateway::BasePathMapping\n    #  Properties:\n    #    DomainName: ${self:custom.${opt:stage, self:provider.stage}DomainName}\n    #    RestApiId: \n    #      Ref: ApiGatewayRestApi\n    #    Stage: ${opt:stage, self:provider.stage}\n    s3bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(config/config.${self:provider.stage}.json):s3bucket}\n    lambdaAuditRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${file(config/config.${self:provider.stage}.json):lambdaRole}\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: \n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${file(config/config.${self:provider.stage}.json):lambdaPolicy}\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sts:AssumeRole\n                    - sts:GetSessionToken\n                  Resource: '*'\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/*:*:*\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.reportsBucket}\"                         \n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.reportsBucket}\"\n                          - \"/*\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.rulesBucket}\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.rulesBucket}\"\n                          - \"/*\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.s3bucket}\"\n                          - \"/*\"                          \n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                    - dynamodb:DeleteItem\n                  Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/AWS-Accounts-Table*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:${self:service}-*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:${self:custom.auditLambda}\"   "]},{"id":114875074,"files":["service: graphql-api\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: rest-api\nprovider:\n    name: aws\n    runtime: nodejs6.10\n\nfunctions:\n    hello:\n        handler: handler.hello\n","service: auth\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: core\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: main\nprovider:\n    name: aws\n    runtime: nodejs6.10\n"]},{"id":133244213,"files":["service: serverless-pagespeed-monitoring\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n  iamRoleStatements:\n   -  Effect: \"Allow\"\n      Action:\n        - \"cloudwatch:PutMetricData\"\n        - \"cloudwatch:ListMetrics\"\n        - \"cloudwatch:ListMetrics\"\n      Resource: \"*\"  \n\nfunctions:\n  pagespeed:\n    handler: index.handler\n    events:\n      - schedule:\n          rate: ${file(./config.yml):rate}\n          enabled: true\n    environment:\n      DEBUG: 0\n      url: ${file(./config.yml):url}\n      metrics: ${file(./config.yml):metrics}\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n  - serverless-sam\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":74042923,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: contact-form\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendForm:\n    handler: handler.processFormData\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true"]},{"id":109306929,"files":["service: serverless-geoip\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 256\n  timeout: 30\n  region: us-east-1\n\npackage:\n  exclude:\n    - .gitignore\n    - CODE_OF_CONDUCT.md\n    - dist/**\n    - LICENSE.md\n    - README.md\n    - yarn.lock\n    - package.json\n    - package-lock.json\n\nfunctions:\n  lookup:\n    handler: src/lookup.run\n    events:\n      - http:\n          method: GET\n          path: /ip/{ip}\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                ip: true\n            template:\n              application/json: '{ \"ip\" : \"$input.params(''ip'')\" }'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n            template: $input.json('$')"]},{"id":83364312,"files":["service: serverless-activitypub\nframeworkVersion: \"^1.6.1\"\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\ncustom:\n  webpackIncludeModules: true\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  memorySize: 512\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${env:JWT_SECRET}\n    API_BASE: ${env:API_BASE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:UpdateItem\"\n      Resource: arn:aws:dynamodb:*:*:table/${self:service}-*\npackage:\n  include:\n    - serverlessLambda.json\n    - serverless.yml\n    - .env.example\n\nfunctions:\n  hello:\n    handler: src/lambdaFunctions/handler.hello\n    environment:\n      QUEUE_WORKER_NAME: ${self:service}-${self:provider.stage}-queueWorker\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n  actorOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: /{actor_username}\n          method: options\n  actorGET:\n    handler: src/lambdaFunctions/actor.get\n    timeout: 10\n    events:\n      - http:\n          path: /{actor_username}\n          method: get\n  loginOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: login\n          method: options\n  loginGET:\n    handler: src/lambdaFunctions/login.get\n    timeout: 10\n    events:\n      - http:\n          path: login\n          method: get\n  loginPOST:\n    handler: src/lambdaFunctions/login.post\n    timeout: 15\n    events:\n      - http:\n          path: login\n          method: post\n  authorizeOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: authorize/{username}\n          method: options\n  authorizeGET:\n    handler: src/lambdaFunctions/authorize.get\n    timeout: 10\n    events:\n      - http:\n          path: authorize/{username}\n          method: get\n  authorizePOST:\n    handler: src/lambdaFunctions/authorize.post\n    timeout: 25\n    events:\n      - http:\n          path: authorize/{username}\n          method: post\n  inboxOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: inbox/{username}\n          method: options\n  inboxPOST:\n    handler: src/lambdaFunctions/inbox.post\n    timeout: 15\n    events:\n      - http:\n          path: inbox/{username}\n          method: post\n  inboxGET:\n    handler: src/lambdaFunctions/inbox.get\n    timeout: 15\n    events:\n      - http:\n          path: inbox/{username}\n          method: get\n  outboxOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: outbox/{username}\n          method: options\n  outboxPOST:\n    handler: src/lambdaFunctions/outbox.post\n    timeout: 15\n    events:\n      - http:\n          path: outbox/{username}\n          method: post\n  outboxGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: outbox/{username}\n          method: get\n  followingOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: following/{username}\n          method: options\n  followingGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: following/{username}\n          method: get\n  followersOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: followers/{username}\n          method: options\n  followersGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: followers/{username}\n          method: get\n  likesOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: likes/{username}\n          method: options\n  likesGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: likes/{username}\n          method: get\n  objectOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: object/{objectID}\n          method: options\n  objectGET:\n    handler: src/lambdaFunctions/object.get\n    timeout: 10\n    events:\n      - http:\n          path: object/{objectID}\n          method: get\n  queueWorker:\n    handler: src/lambdaFunctions/queueWorker.handler\n    timeout: 200\n  queueConsumer:\n    handler: src/lambdaFunctions/queueConsumer.handler\n    timeout: 10\n    environment:\n      QUEUE_WORKER_NAME: ${self:service}-${self:provider.stage}-queueWorker\n\nresources:\n  Resources:\n    FileBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-user-files\n    FailedOutgoingNotifications:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-failed-outgoing-notifications\n        DelaySeconds: 300\n    OutgoingNotifications:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-outgoing-notifications\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - FailedOutgoingNotifications\n            - Arn\n          maxReceiveCount: 3\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: username\n          AttributeType: S\n        KeySchema:\n        - AttributeName: username\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-Users\n    Posts:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n        TableName: ${self:service}-Posts\n        AttributeDefinitions:\n        - AttributeName: username\n          AttributeType: S\n        - AttributeName: global_object_id\n          AttributeType: S\n        - AttributeName: modified\n          AttributeType: S\n        - AttributeName: join_collection_modified\n          AttributeType: S\n        - AttributeName: join_username_modified\n          AttributeType: S\n        - AttributeName: join_endpoint_modified\n          AttributeType: S\n        - AttributeName: actor_url\n          AttributeType: S        \n        KeySchema:\n        - AttributeName: global_object_id\n          KeyType: HASH\n        - AttributeName: join_username_modified\n          KeyType: RANGE\n        GlobalSecondaryIndexes:\n          - IndexName: user_collections_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: join_collection_modified\n                KeyType: RANGE\n          - IndexName: user_endpoints_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: join_endpoint_modified\n                KeyType: RANGE\n          - IndexName: user_posts_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: modified\n                KeyType: RANGE\n          - IndexName: actor_posts_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: actor_url\n                KeyType: HASH\n              - AttributeName: join_username_modified\n                KeyType: RANGE\n"]},{"id":107099894,"files":["service: alexa-skill-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 256\n  cfLogs: true\n\nfunctions:\n  skill:\n    handler: src/index.handler\n    description: Alexa hello world skill\n    events:\n      - alexaSkill\n"]},{"id":127030748,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n\n  helloAuthorizerWithFunctionName:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: handler.authFunction\n\n  hello500:\n    handler: handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n  basicAuthentication:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  catchAll:\n    handler: handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n  pathParams:\n    handler: handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Service Name\nservice: book-service\n\n# plugins\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    dbName: 'book'\n    dbUser: 'test'\n    dbPass: 'xyz'\n    dbHost: '0.0.0.0'\n\n# custom\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\", \"stage-2\"]\n\nfunctions:\n  \n  postBook:\n    handler: handler.postBook\n    name : postBook\n    events:\n      - http:\n          path: book\n          method: post\n    \n  deleteBook:\n    handler: handler.deleteBook\n    name: deleteBook\n    events:\n      - http:\n          path: book/{Id}\n          method: delete\n\n  updateBook:\n    handler: handler.updateBook\n    name: updateBook\n    events:\n      - http:\n          path: book/{Id}\n          method: put\n\n  getAllBooks:\n    handler: handler.getAllBooks\n    name: getAllBooks\n    events:\n      - http:\n          path: book\n          method: get"]},{"id":105154233,"files":["service: custom-user-pool\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-2\n\nfunctions:\n  cloudFormationCustomUserPool:\n    handler: cloudFormationCustomUserPool.handler\n    role: CustomUserPoolRole\n    timeout: 300\n\n  postConfirmation:\n    handler: postConfirmation.handler\n    events:\n      - cognitoUserPool:\n          pool: UserPool\n          trigger: PostConfirmation\n\nresources:\n  Resources:\n    CustomUserPoolRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:provider.stage}-custom-user-pool-role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:provider.stage}-custom-user-pool-policy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cognito-idp:CreateUserPool\n                    - cognito-idp:DeleteUserPool\n                    - cognito-idp:UpdateUserPool\n                    - cognito-idp:DescribeUserPool\n                  Resource: '*'\n\n    CognitoUserPoolUserPool:\n      Type: \"Custom::UserPool\"\n      Version: \"1.0\"\n      DependsOn: CloudFormationCustomUserPoolLambdaFunction\n      Properties:\n        ServiceToken: \n          Fn::GetAtt: [ \"CloudFormationCustomUserPoolLambdaFunction\", \"Arn\" ]\n        Region:\n          Ref: AWS::Region\n        AccountId:\n          Ref: AWS::AccountId\n        PoolProperties:\n          PoolName: ${self:service}-${self:provider.stage}-UserPool\n          MfaConfiguration: OFF\n          VerificationMessageTemplate:\n            DefaultEmailOption: \"CONFIRM_WITH_CODE\"\n          AdminCreateUserConfig:\n            UnusedAccountValidityDays: 7 \n            AllowAdminCreateUserOnly: false\n          AutoVerifiedAttributes:\n            - email\n          Policies:\n            PasswordPolicy:\n              RequireLowercase: true\n              RequireSymbols: true\n              RequireNumbers: true\n              MinimumLength: 8\n              RequireUppercase: true\n          UsernameAttributes:\n            - email\n          Schema:\n            - Name: name\n              AttributeDataType: String\n              Mutable: true\n              Required: true\n            - Name: email\n              AttributeDataType: String\n              Mutable: false\n              Required: true\n\n    CognitoUserPoolClientUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:service}-${self:provider.stage}-UserPoolClient\n        UserPoolId:\n          Ref: CognitoUserPoolUserPool\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n        GenerateSecret: false\n        RefreshTokenValidity: 30\n        ReadAttributes:\n          - name\n          - email\n\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: CognitoUserPoolUserPool\n    UserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClientUserPoolClient\n"]},{"id":108477597,"files":["service: microservice-notes\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n  iamRoleStatements:\n  - Effect: Allow\n    Action: \n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"*\"\n\nfunctions:\n  app:\n    name: microservice-notes-${self:provider.stage}\n    handler: src/handler.microservice\n    description: Microservice to notes\n    memorySize: 512\n    timeout: 150\n    events:\n      - http:\n          method: GET\n          path: notes\n          cors: true\n      - http:\n          method: GET\n          path: notes/{id}\n          cors: true\n      - http:\n          method: POST\n          path: notes\n          cors: true\n      - http:\n          method: PUT\n          path: notes/{id}\n          cors: true\n      - http:\n          method: DELETE\n          path: notes/{id}\n          cors: true\n\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${self:service}-${self:custom.stage}\n    #### Gateway Response INIT\n    GatewayResponseDefault400:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"4XX-generic\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseDefault500:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"5XX-generic\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAccessDeied:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: ACCESS_DENIED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-access-denied\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseApiConfigurationError:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: API_CONFIGURATION_ERROR\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-api-configuration-error\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAuthorizerConfigurationError:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: AUTHORIZER_CONFIGURATION_ERROR\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-authorizer-configuration-error\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAuthorizerFailure:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: AUTHORIZER_FAILURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-authorizer-failure\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseBadRequestBody:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: BAD_REQUEST_BODY\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"400-bad-request-body\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseBadRequestParameters:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: BAD_REQUEST_PARAMETERS\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"400-bad-request-parameters\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseExpiredToken:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: EXPIRED_TOKEN\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-expired-token\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseIntegrationFailure:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INTEGRATION_FAILURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"504-integration-failure\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseIntegrationTimeout:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INTEGRATION_TIMEOUT\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"504-integration-timeout\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseInvalidApiKey:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INVALID_API_KEY\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-invalid-api-key\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseInvalidSignature:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INVALID_SIGNATURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-invalid-signature\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseMissingAuthenticationToken:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: MISSING_AUTHENTICATION_TOKEN\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-missing-authentication-token\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseQuotaExceeded:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: QUOTA_EXCEEDED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"429-quota-exceeded\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseRequestTooLarge:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: REQUEST_TOO_LARGE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"413-request-too-large\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseResourceNotFound:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: RESOURCE_NOT_FOUND\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"404-resource-not-found\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseThrottled:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: THROTTLED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"429-throttled\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseUnauthorized:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: UNAUTHORIZED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"401-unauthorized\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseUnauthorizedMediType:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: UNSUPPORTED_MEDIA_TYPE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"415-unsupported-media-type\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    #### Gateway Response END\n\npackage:\n  exclude:\n    - .vscode/**\n    - .scripts/**\n    - tests/**\n    - coverage/**\n    - .travis.yml\n    - README.md"]},{"id":76302910,"files":["# 'service' is the name of the service\nservice: ${self:custom.repoName}-status-board\n\n# 'custom' is a place to define custom variables used elsewhere in the yaml config\ncustom:\n  repoName: ADD_YOUR_REPO_NAME_HERE\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n  openItemsTable: ${self:custom.repoName}-${self:custom.currentStage}-open-items\n  closedItemsTable: ${self:custom.repoName}-${self:custom.currentStage}-closed-items\n\n\n# 'provider' specifies where to deploy the service. Aka deploy to 'aws'\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # ${self:custom.currentRegion} references the 'custom' field in this file\n  # it grabs the 'currentRegion' key and places it in the 'region' key defined below\n  region: ${self:custom.currentRegion}\n  stage: ${self:custom.currentStage}\n  # 'environment' is where you define any process.env environment variables needed in code\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${file(./config.${self:custom.currentStage}.json):GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_TOKEN: ${file(./config.${self:custom.currentStage}.json):GITHUB_API_TOKEN}\n    GITHUB_USERNAME: ${file(./config.${self:custom.currentStage}.json):GITHUB_USERNAME}\n    REPO: ${file(./config.${self:custom.currentStage}.json):REPO}\n    OPEN_ITEMS_TABLE: ${self:custom.openItemsTable}\n    CLOSED_ITEMS_TABLE: ${self:custom.closedItemsTable}\n    DEBUG: false\n  # Set IAM permissions for the functions\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n      - dynamodb:BatchWriteItem\n    # Allow function to access only this database\n    Resource: [\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.openItemsTable}\",\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.closedItemsTable}\"\n      ]\n\n# 'functions' references all the functions and events in the service\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n  getOpenIssues:\n    handler: handler.getOpenIssues\n    events:\n      - http:\n          path: open\n          method: get\n          cors: true\n  getClosedIssues:\n    handler: handler.getClosedIssues\n    events:\n      - http:\n          path: closed\n          method: get\n          cors: true\n  setup:\n    handler: handler.setup\n    timeout: 40\n  teardown:\n    handler: handler.tearDown\n    timeout: 20\n\n# 'resources' defines any infrastructure needed for the service aka a database\nresources:\n  Resources:\n    OpenIssues:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.openItemsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    ClosedIssues:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.closedItemsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n"]},{"id":122336394,"files":["service: serverless-iot-metrics-dashboard\n\ncustom:\n  accountId: 085108115628\n  appSync:\n    apiId: l47kzdrb3zfhfegyjnpqr3kbse\n    name: serverless-iot-metrics-dashboard\n    authenticationType: API_KEY\n    serviceRole: \"AppSyncServiceRole\"\n    userPoolConfig:\n      awsRegion: us-east-1\n      defaultAction: ALLOW\n      userPoolId: us-east-1\n    mappingTemplates:\n      - dataSource: Metrics\n        type: Query\n        field: getDatapoints\n        request: \"getDatapoints-request-mapping-template.txt\"\n        response: \"getDatapoints-response-mapping-template.txt\"\n    schema: schema.graphql\n    dataSources:\n      - type: AMAZON_DYNAMODB\n        name: Metrics\n        description: Table containing all metrics\n        config:\n          tableName: 'Metrics'\n          serviceRoleArn: \"arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}\"\n\nplugins:\n  - serverless-appsync-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nresources:\n  Resources:\n    IotMetricsAllowConnectAndPublicPolicy:\n      Type: \"AWS::IoT::Policy\"\n      Properties:\n        PolicyName: IotMetricsAllowConnectAndPublicPolicy\n        PolicyDocument: \n          Version: \"2012-10-17\"\n          Statement: \n            - \n              Effect: \"Allow\"\n              Action: \n                - \"iot:Connect\"\n                - \"iot:Publish\"\n              Resource: \n                - \"*\"\n    IotMetricsTopicRule:\n      Type: \"AWS::IoT::TopicRule\"\n      Properties:\n        RuleName: IotMetricsTopicRule\n        TopicRulePayload:\n          RuleDisabled: \"false\"\n          Sql: >-\n            Select * FROM 'metrics'\n          Actions: \n            - \n              DynamoDBv2: \n                PutItem:\n                  TableName: Metrics\n                RoleArn: \n                  Fn::GetAtt: \n                    - \"IotTopicPutToDynamoDBServiceRole\"\n                    - \"Arn\"\n    IotMetricsPolicyPrincipalAttachment:\n      Type: \"AWS::IoT::PolicyPrincipalAttachment\"\n      Properties:\n        PolicyName: IotMetricsAllowConnectAndPublicPolicy\n        Principal: ${file(./certificateArn.yml):arn}\n    MetricsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        KeySchema:\n          -\n            AttributeName: createdAt\n            KeyType: HASH\n        AttributeDefinitions:\n          -\n            AttributeName: createdAt\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n        TableName: \"Metrics\"\n    IotTopicPutToDynamoDBServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"IotTopicPutToDynamoDBServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"iot.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"IotTopicPutToDynamoDBServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:PutItem\"\n                  Resource:\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics\"\n    AppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Dynamo-AppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Dynamo-AppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:Query\"\n                    - \"dynamodb:BatchWriteItem\"\n                    - \"dynamodb:GetItem\"\n                    - \"dynamodb:DeleteItem\"\n                    - \"dynamodb:PutItem\"\n                    - \"dynamodb:Scan\"\n                    - \"dynamodb:UpdateItem\"\n                  Resource:\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics\"\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics/*\"\n                    "]},{"id":110634628,"files":["service: serverless-cqrs-menu\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"MenuEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"MenuMenuItemsDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:menu-events\"\n  environment:\n    TOPIC_NAME: 'menu-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'menu-events-table-${self:provider.stage}'\n    MENU_ITEMS_TABLE: 'menu-menu-items-table-${self:provider.stage}'\n\nfunctions:\n  addMenuItem:\n    handler: api.handler\n    events:\n      - http: 'POST /menu/items/commands/add'\n  getMenuItem:\n    handler: api.handler\n    events:\n      - http: 'GET /menu/items/{proxy+}'\n  getMenuItems:\n    handler: api.handler\n    events:\n      - http: 'GET /menu/items/'\n  persistEvent:\n    handler: listeners.persistEvent\n    events:\n      - sns:\n          topicName: menu-events\n          displayName: \"Menu domain events\"\n  persistMenuItem:\n    handler: listeners.persistMenuItem\n    events:\n      - sns:\n          topicName: menu-events\n          displayName: \"Menu domain events\"\n\nresources:\n  Resources:\n    MenuEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'menu-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    MenuMenuItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'menu-menu-items-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n","service: serverless-cqrs-customers\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"CustomersEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"CustomersCustomersDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:customers-events\"\n  environment:\n    TOPIC_NAME: 'customers-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'customers-events-table-${self:provider.stage}'\n    CUSTOMERS_TABLE: 'customers-customers-table-${self:provider.stage}'\n\nfunctions:\n  signUpCustomer:\n    handler: api.handler\n    events:\n      - http: 'POST /customers/commands/signup'\n  getCustomer:\n    handler: api.handler\n    events:\n      - http: 'GET /customers/{proxy+}'\n  getCustomers:\n    handler: api.handler\n    events:\n      - http: 'GET /customers'\n  persistEvent:\n    handler: listeners.persistEvent\n    events:\n      - sns:\n          topicName: customers-events\n          displayName: \"Customers domain events\"\n  persistCustomer:\n    handler: listeners.persistCustomer\n    events:\n      - sns:\n          topicName: customers-events\n          displayName: \"Customers domain events\"\n\nresources:\n  Resources:\n    CustomersEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'customers-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    CustomersCustomersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'customers-customers-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n","service: serverless-cqrs-orders\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"OrdersEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersOrdersDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersMenuItemsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersCustomersDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:orders-events\"\n  environment:\n    TOPIC_NAME: 'orders-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'orders-events-table-${self:provider.stage}'\n    ORDERS_TABLE: 'orders-orders-table-${self:provider.stage}'\n    MENU_ITEMS_TABLE: 'orders-menu-items-table-${self:provider.stage}'\n    CUSTOMERS_TABLE: 'orders-customers-table-${self:provider.stage}'\n\nfunctions:\n  openOrder:\n    handler: index.handleCommand\n    events:\n      - http: 'POST /orders/commands/open'\n  getOrder:\n    handler: index.handleQuery\n    events:\n      - http: 'GET /orders/{proxy+}'\n  getOrders:\n    handler: index.handleQuery\n    events:\n      - http: 'GET /orders'\n  persistEvent:\n    handler: index.persistEvent\n    events:\n      - sns:\n          topicName: orders-events\n          displayName: \"Orders domain events\"\n  persistOrder:\n    handler: index.persistOrder\n    events:\n      - sns:\n          topicName: orders-events\n          displayName: \"Orders domain events\"\n  persistMenuItem:\n    handler: index.persistMenuItem\n    events:\n      - sns:\n          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:menu-events'\n  persistCustomer:\n    handler: index.persistCustomer\n    events:\n      - sns:\n          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:customers-events'\n\nresources:\n  Resources:\n    OrdersEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersOrdersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-orders-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersMenuItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-menu-items-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersCustomersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-customers-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":121515741,"files":["service: serverless-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: aws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: gcloud\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n","service: marketing\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: marketing-department-utils\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  vipNotifier:\n    handler: vipNotifier\n    events:\n      - some.event\n","service: newsletter\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - some.event\n","service: analytics\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: ${file(./config.json):PROJECT_ID}\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    CREDENTIALS_FILE: ${file(./config.json):CREDENTIALS_FILE}\n    PROJECT_ID: ${file(./config.json):PROJECT_ID}\n    DATASET_ID: ${file(./config.json):DATASET_ID}\n    TABLE_ID: ${file(./config.json):TABLE_ID}\n\nfunctions:\n  analytics:\n    handler: recordEvents\n    events:\n      - user.registered\n      - user.clicked\n","service:\n  name: crm\n  description: 'A service connecting the app to the CRM system'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  addUserToCrm:\n    handler: handler.addUserToCrm\n    events:\n      - user.registered\n","# A serverless service that sends out emails via Mailgun\n\nservice:\n  name: emails\n  description: 'A service that sends out emails.'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  sendWelcomeEmail:\n    handler: handler.sendWelcomeEmail\n    events:\n      - user.registered\n","service:\n  name: errors\n  description: 'A service to act on Event Gateway system errors'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  alertAdmin:\n    handler: handler.alertAdmin\n    events:\n      - gateway.info.functionError\n","# users-api crud service\n\nservice:\n  name: users\n  description: 'Users CRUD service.'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - http:\n          path: /users\n          method: POST\n          # cors has to be commented out until we change how data is sent to the Event Gateway\n          # cors: true\n","service: vision\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: ${file(./config.json):PROJECT_ID}\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    API_KEY: ${file(./config.json):API_KEY}\n\nfunctions:\n  annotate:\n    handler: annotateUser\n    events:\n      - user.registered\n"]},{"id":82608997,"files":["# 'service' is the name of the service\nservice: ${file(./config.${self:custom.currentStage}.json):serviceName}\n\n# 'custom' = define custom variables used elsewhere in the yaml config\ncustom:\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n  scheduledPostsTable: ${self:service}-${self:custom.currentStage}-scheduled-posts\n\n# 'provider' specifies where to deploy the service. Aka deploy to 'aws'\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # ${self:custom.currentRegion} references the 'custom' field in this file\n  # it grabs the 'currentRegion' key and places it in the 'region' key defined below\n  region: ${self:custom.currentRegion}\n  stage: ${self:custom.currentStage}\n  # 'environment' is where you define any process.env environment variables needed in code\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${file(./config.${self:custom.currentStage}.json):GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_TOKEN: ${file(./config.${self:custom.currentStage}.json):GITHUB_API_TOKEN}\n    GITHUB_USERNAME: ${file(./config.${self:custom.currentStage}.json):GITHUB_USERNAME}\n    GITHUB_REPO: ${file(./config.${self:custom.currentStage}.json):GITHUB_REPO}\n    TIMEZONE: ${file(./config.${self:custom.currentStage}.json):TIMEZONE}\n    SCHEDULED_POSTS_TABLE: ${self:custom.scheduledPostsTable}\n\n  # Set IAM permissions for the functions\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n      - dynamodb:BatchWriteItem\n    # Allow function to access only this database\n    Resource: [\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.scheduledPostsTable}\"\n      ]\n\n# 'functions' references all the functions and events in the service\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n  publishScheduledPostCron:\n    handler: handler.publishScheduledPost\n    events:\n      - schedule: ${file(./config.${self:custom.currentStage}.json):CRON}\n\n# 'resources' defines any infrastructure needed for the service aka a database\nresources:\n  Resources:\n    ScheduledPostsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.scheduledPostsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":120125128,"files":["service:\n  name: atomic-algolia\n\nprovider:\n  name: webtasks\n  environment: \n    ALGOLIA_APP_ID: \"${env:ALGOLIA_APP_ID, opt:ALGOLIA_APP_ID, self:custom.ALGOLIA_APP_ID}\"\n    ALGOLIA_ADMIN_KEY: \"${env:ALGOLIA_APP_ID, opt:ALGOLIA_APP_ID, self:custom.ALGOLIA_ADMIN_KEY}\"\n    DEBOUNCE: \"${env:DEBOUNCE, opt:DEBOUNCE, self:custom.DEBOUNCE}\"\n    INDEXES: ${file(./config/indexes.js)}\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n  ALGOLIA_APP_ID: ${file(./config/secrets.yml):ALGOLIA_APP_ID}\n  ALGOLIA_ADMIN_KEY: ${file(./config/secrets.yml):ALGOLIA_ADMIN_KEY}\n  DEBOUNCE: ${file(./config/secrets.yml):DEBOUNCE}\n\nfunctions:\n  main:\n    handler: handler\n    events:\n      - schedule: rate(1 day)\n\nplugins:\n  - '@webtask/serverless-webtasks'"]},{"id":120137065,"files":["service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v8.9.4-linux-x64/bin/node\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - \"**/**\"\n  include:\n    - node-v8.9.4-linux-x64/bin/node\n    - src/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n","service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v9.5.0-linux-x64/bin/node\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - \"**/**\"\n  include:\n    - node-v9.5.0-linux-x64/bin/node\n    - src/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n","service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v9.5.0-linux-x64/bin/node\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n"]},{"id":118756656,"files":["service: order-rest-api\n\npackage:\n  exclude:\n    - lib/**\n    - data-local\n    - node_modeules\n  include:\n    - dist\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 20\n  versionFunctions: false\n  memorySize: 512\n  environment:\n    NODE_ENV: production\n\nfunctions:\n\n  create:\n    handler: dist/create.create\n    events:\n      - http:\n          path: v1/orders\n          method: post\n\n  list:\n    handler: dist/list.list\n    events:\n      - http:\n          path: v1/orders\n          method: get\n          request:\n            parameters:\n              querystrings:\n                limit: false\n                offset: false\n\n  get:\n    handler: dist/get.get\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n\n  update:\n    handler: dist/update.update\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true      \n\n  delete:\n    handler: dist/delete.delete\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n"]},{"id":115530102,"files":["\n# Service name\nservice: serverless-ffmpeg\n\ncustom:\n  # Configure these\n  source_bucket: ${file(./config.yml):source_bucket}\n  destination_bucket: ${file(./config.yml):destination_bucket}\n  ffmpeg_params: ${file(./config.yml):ffmpeg_params}\n  # Leave as is\n  remover:\n     buckets:\n       - ${self:custom.source_bucket}\n       - ${self:custom.destination_bucket}\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-remover\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  timeout: 300\n  stage: ${file(./config.yml):stage}\n  region: ${file(./config.yml):region}\n  memorySize: ${file(./config.yml):memorySize}\n  environment:\n    DESTINATION_BUCKET: ${self:custom.destination_bucket}\n    FFMPEG_PARAMS: ${self:custom.ffmpeg_params}\n  iamRoleStatements:\n    # List buckets\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n      Resource:\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.source_bucket}\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.destination_bucket}\n    # Operate in buckets\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:DeleteObject\n      Resource:\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.source_bucket}\n            - \"/*\"\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.destination_bucket}\n            - \"/*\"\n\nfunctions:\n  ffmpeg:\n    handler: handler.main\n    events:\n      - s3:\n          bucket: ${self:custom.source_bucket} # This will create the source bucket\n          event: s3:ObjectCreated:*\n\n\nresources:\n  Resources:\n    # Make the output bucket\n    FfmpegDestination:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.destination_bucket}"]},{"id":68395169,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: trevorbot # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#defaults:\n#  stage: dev\n#  region: us-east-1\n\nfunctions:\n  trevorbot:\n    handler: handler.trevorbot\n    events:\n      - http:\n          path: trevorbot\n          method: POST\n","# This is the Serverless Environment File\n#\n# It contains listing of your stages and their regions\n# It also manages serverless variables at 3 levels:\n#    - common variables: variables that apply to all stages/regions\n#    - stage variables: variables that apply to a specific stage\n#    - region variables: variables that apply to a specific region\n\nvars:\nstages:\n  dev:\n    vars:\n    regions:\n      us-east-1:\n        vars:\n"]},{"id":79894290,"files":["service: nj2jp\n\npackage:\n  exclude:\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: ${opt:stage}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DetachNetworkInterface\n        - ec2:DeleteNetworkInterface\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n        - ses:SendEmail\n        - ses:SendRawEmail\n        - lambda:InvokeFunction\n  environment:\n    MONGO_URI: ${file(./config.${self:provider.stage}.yml):mongoURI}\n    AUTH0_JWT_SECRET: ${file(./config.${self:provider.stage}.yml):auth0JwtSecret}\n    MARKET_HERO_API_KEY: ${file(./config.${self:provider.stage}.yml):marketHeroApiKey}\n    SQUARE_ENV: ${file(./config.${self:provider.stage}.yml):squareEnv}\n    US_SQUARE_LOCATION: ${file(./config.${self:provider.stage}.yml):usSquareLocation}\n    US_SQUARE_ACCESS_TOKEN: ${file(./config.${self:provider.stage}.yml):usSquareAccessToken}\n    US_SQUARE_APPLICATION_ID: ${file(./config.${self:provider.stage}.yml):usSquareApplicationId}\n    JP_SQUARE_LOCATION: ${file(./config.${self:provider.stage}.yml):jpSquareLocation}\n    JP_SQUARE_ACCESS_TOKEN: ${file(./config.${self:provider.stage}.yml):jpSquareAccessToken}\n    JP_SQUARE_APPLICATION_ID: ${file(./config.${self:provider.stage}.yml):jpSquareApplicationId}\n    JWT_SECRET: ${file(./config.${self:provider.stage}.yml):jwtSecret}\n    SAGAWA_ENV: ${file(./config.${self:provider.stage}.yml):sagawaEnv}\n    SAGAWA_JAPANESE: ${file(./config.${self:provider.stage}.yml):sagawaJapanese}\n    SAGAWA_ENGLISH: ${file(./config.${self:provider.stage}.yml):sagawaEnglish}\n    SLACK_SUPPORT_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackSupportWebhook}\n    SLACK_ERROR_NOTIFICATION_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackErrorNotificationWebhook}\n    SLACK_GENERAL_NOTIFICATION_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackGeneralNotificationWebhook}\n    LAMBDA_ENV: ${file(./config.${self:provider.stage}.yml):lambdaEnv}\n    LAMBDA_SECRET_ACCESS_KEY: ${file(./config.${self:provider.stage}.yml):lambdaSecretAccessKey}\n    LAMBDA_ACCESS_KEY_ID: ${file(./config.${self:provider.stage}.yml):lambdaAccessKeyId}\n    BASE_URL: ${file(./config.${self:provider.stage}.yml):baseUrl}\n    CEO_EMAIL: ${file(./config.${self:provider.stage}.yml):ceoEmail}\n    CTO_EMAIL: ${file(./config.${self:provider.stage}.yml):ctoEmail}\n    CDO_EMAIL: ${file(./config.${self:provider.stage}.yml):cdoEmail}\n    AWS_SES_REGION: ${file(./config.${self:provider.stage}.yml):awsSesRegion}\n    RECAPTCHA_SECRET_KEY: ${file(./config.${self:provider.stage}.yml):recaptchaSecretKey}\n    SAGAWA_SHIPPER_1: ${file(./config.${self:provider.stage}.yml):shipper1}\n    # SAGAWA_SHIPPER_2: ${file(./config.${self:provider.stage}.yml):shipper2}\n    # SAGAWA_SHIPPER_3: ${file(./config.${self:provider.stage}.yml):shipper3}\n    # SAGAWA_SHIPPER_4: ${file(./config.${self:provider.stage}.yml):shipper4}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n  graphiql:\n    babelOptions:\n      presets: [es2015, es2016, stage-0]\n      plugins: [transform-runtime]\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    memorySize: 1024\n    timeout: 20\n    vpc:\n      securityGroupIds:\n        - ${file(./config.${self:provider.stage}.yml):securityGroupId}\n      subnetIds:\n        - ${file(./config.${self:provider.stage}.yml):subnetId}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n          - ses:SendEmail\n          - ses:SendRawEmail\n          - lambda:InvokeFunction\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n\n  sagawa:\n    handler: handler.sagawa\n    memorySize: 1024\n    timeout: 20\n    vpc:\n      securityGroupIds:\n        - ${file(./config.${self:provider.stage}.yml):securityGroupId}\n      subnetIds:\n        - ${file(./config.${self:provider.stage}.yml):subnetId}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n          - ses:SendEmail\n          - ses:SendRawEmail\n          - lambda:InvokeFunction\n    events:\n      - schedule:\n          name: ${self:provider.stage}-weekly-upload\n          description: Upload weekend orders to sagawa\n          rate: cron(0 13 ? * MON *)\n          enabled: true\n          input:\n            type: weekly upload\n      - schedule:\n          name: ${self:provider.stage}-notify-sagawa\n          description: Send mail to sagawa of pending orders\n          rate: cron(0 14 * * ? *)\n          enabled: true\n          input:\n            type: notify sagawa\n"]},{"id":61052298,"files":["service: ec2-event-slack-notifier\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  role: # your IAM role ARN\n  region: ap-northeast-1 # your AWS region\n\nfunctions:\n  main:\n    handler: index.handler\n    environment:\n      TIMEZONE: Asia/Tokyo # your timezone\n      WEBHOOK_URL: # your Slack Webhook URL\n    events:\n    - schedule: cron(30 0 * * ? *) # every 9:30 JST (0:30 GMT)\n"]},{"id":79551173,"files":["service: coaching-chatbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  cfLogs: true\n  environment:\n    STAGE: ${opt:stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\nfunctions:\n  facebookMessenger:\n    handler: src/facebook-messenger/handler.handler\n    memorySize: 128\n    timeout: 15\n    events:\n      - http:\n          path: facebook-bot\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$.response')\n      - http:\n          path: facebook-bot\n          method: post\n          integration: lambda\n  facebookReminder:\n    handler: src/facebook-messenger/handler.meetingCheck\n    memorySize: 128\n    timeout: 15\n    events:\n      - schedule: rate(1 hour)\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-sessions-${opt:stage, self:provider.stage}\n    PairsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-pairs-${opt:stage, self:provider.stage}\n    FeedbackTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-feedback-${opt:stage, self:provider.stage}\n\nplugins:\n  - serverless-webpack\n"]},{"id":115541982,"files":["service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id}\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline"]},{"id":109041397,"files":["service: graphql-api\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  signup:\n    handler: src/handler.signup\n    events:\n      - http:\n          path: signup\n          method: post\n          cors: true\n  signin:\n    handler: src/handler.signin\n    events:\n      - http:\n          path: signin\n          method: post\n          cors: true\n  record:\n    handler: src/handler.record\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - AuthorsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - PostsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    AuthorsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: 'test_authors'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    PostsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: 'test_posts'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n"]},{"id":104791880,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-teams-gitlab-connector\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: events\n          method: post\n    environment:\n      channel_incoming_webhook_url: ${env:channel_incoming_webhook_url}\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n    #  environment:\n    #    variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":73001448,"files":["service: serverless-image-resizer\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ${env:AWS_REGION}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n  environment:\n    SOURCE_S3_BUCKET_NAME: ${env:SOURCE_S3_BUCKET_NAME}\n    SOURCE_S3_PREFIX: ${env:SOURCE_S3_PREFIX}\n    RESIZE_OPTION: ${env:RESIZE_OPTION}\n    DEST_S3_BUCKET_NAME: ${env:DEST_S3_BUCKET_NAME}\n    DEST_S3_PREFIX: ${env:DEST_S3_PREFIX}\n\nfunctions:\n  imageResizer:\n    handler: index.handle\n    events:\n      - s3:\n          bucket: ${env:SOURCE_S3_BUCKET_NAME}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${env:SOURCE_S3_PREFIX}\n      - http:\n          method: post\n          path: /api/v1.0/resized_image\n          integration: aws_proxy\n          request:\n            parameters:\n              querystrings:\n                source_url: true\n                resize_option: false\n                dest_s3_bucket: false\n                dest_s3_prefix: false\n          response:\n            headers:\n              Content-Type: application/json\n            template: $input.path('$')\n            statusCodes:\n              201:\n                pattern: ''\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-remover\n\ncustom:\n  webpack: webpack.config.js\n  webpackIncludeModules: true\n  remover:\n    buckets:\n      - ${env:SOURCE_S3_BUCKET_NAME}\n      - ${env:DEST_S3_BUCKET_NAME}\n\nresources:\n  Resources:\n    DestImageBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${env:DEST_S3_BUCKET_NAME}\n"]},{"id":92459273,"files":["service: ${self:provider.environment.UTSUSEMI_SERVICE_NAME}\n\nframeworkVersion: \">=1.23.0 <2.0.0\"\n\nprovider:\n  name: aws\n  environment:\n    UTSUSEMI_STAGE: ${env:UTSUSEMI_STAGE, 'v0'}\n    UTSUSEMI_SERVICE_NAME: ${env:UTSUSEMI_SERVICE_NAME, file(./config.yml):serviceName, 'utsusemi'}\n    UTSUSEMI_REGION: ${env:UTSUSEMI_REGION, file(./config.yml):region, 'ap-northeast-1'}\n    UTSUSEMI_TARGET_HOST: ${env:UTSUSEMI_TARGET_HOST, file(./config.yml):targetHost}\n    UTSUSEMI_BUCKET_NAME: ${env:UTSUSEMI_BUCKET_NAME, file(./config.yml):bucketName}\n    UTSUSEMI_WORKER_PROCESS: ${env:UTSUSEMI_WORKER_PROCESS, file(./config.yml):workerProcess, '2'}\n    UTSUSEMI_WORKER_DELAY: ${env:UTSUSEMI_WORKER_DELAY, file(./config.yml):workerDelay, '100'}\n    UTSUSEMI_THREADS_PER_WORKER: ${env:UTSUSEMI_THREADS_PER_WORKER, file(./config.yml):threadsPerWorker, '1'}\n    UTSUSEMI_FORCE_TRAILING_SLASH: ${env:UTSUSEMI_FORCE_TRAILING_SLASH, file(./config.yml):forceTrailingSlash, '1'}\n    UTSUSEMI_WITH_QUERY_STRING: ${env:UTSUSEMI_WITH_QUERY_STRING, file(./config.yml):withQueryString, '0'}\n    UTSUSEMI_USE_API_KEY: ${env:UTSUSEMI_USE_API_KEY, file(./config.yml):useApiKey, '0'}\n    UTSUSEMI_CRAWLER_USER_AGENT: ${env:UTSUSEMI_CRAWLER_USER_AGENT, file(./config.yml):crawlerUserAgent, ''}\n  runtime: nodejs6.10\n  stage: ${self:provider.environment.UTSUSEMI_STAGE}\n  region: ${self:provider.environment.UTSUSEMI_REGION}\n  timeout: 10\n  cfLogs: true\n  apiKeys:\n    - \"${self:service}-${self:provider.stage}-apiKey\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\"] ] }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\", \"/*\"] ] }\n    - Effect: Allow\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n      Resource:\n        - \"arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-*\"\n    - Effect: Allow\n      Action:\n        - \"sqs:*\"\n      Resource:\n        - \"arn:aws:sqs:${self:provider.region}:*:${self:service}-${self:provider.stage}-Channel\"\n\nplugins:\n  - utsusemi-env-checker\n  - utsusemi-use-api-key\n  - serverless-s3-remover\n\ncustom:\n  remover:\n    prompt: true\n    buckets:\n      - \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\"\n\npackage:\n  include:\n    - package.json\n    - src/**\n  exclude:\n    - .git/**\n    - doc/**\n    - node_modules/aws-sdk/**\n\nfunctions:\n  starter:\n    handler: src/handler/starter.handler\n    timeout: 15\n    name: ${self:service}-${self:provider.stage}-starter\n    events:\n      - http:\n          path: /in\n          method: get\n          integration: lambda-proxy\n          private: false\n  purge:\n    handler: src/handler/purge.handler\n    events:\n      - http:\n          path: /purge\n          method: get\n          integration: lambda-proxy\n          private: false\n  delete:\n    handler: src/handler/delete.handler\n    timeout: 30\n    name: ${self:service}-${self:provider.stage}-delete\n    events:\n      - http:\n          path: /delete\n          method: get\n          integration: lambda-proxy\n          private: false\n  status:\n    handler: src/handler/status.handler\n    events:\n      - http:\n          path: /status\n          method: get\n          integration: lambda-proxy\n          private: false\n  nstarter:\n    handler: src/handler/nstarter.handler\n    events:\n      - http:\n          path: /nin\n          method: post\n          integration: lambda-proxy\n          private: false\n  worker:\n    handler: src/handler/worker.handler\n    timeout: 15\n    name: ${self:service}-${self:provider.stage}-worker\n  s3worker:\n    handler: src/handler/s3worker.handler\n    name: ${self:service}-${self:provider.stage}-s3worker\n\nresources:\n  Resources:\n    HostingBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.UTSUSEMI_BUCKET_NAME}\n        AccessControl: Private\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    HostingBucketPolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      Properties:\n        Bucket: { Ref: HostingBucket }\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:GetObject\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join:\n                  - \"\"\n                  -\n                    - \"arn:aws:s3:::\"\n                    -\n                      Ref: HostingBucket\n                    - \"/*\"\n              Principal: \"*\"\n    Channel:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        DelaySeconds: 0\n        MaximumMessageSize: 262144\n        MessageRetentionPeriod: 3600\n        QueueName: ${self:service}-${self:provider.stage}-Channel\n        ReceiveMessageWaitTimeSeconds: 0\n        VisibilityTimeout: 30\n  Outputs:\n    UtsusemiWebsiteURL:\n      Value: { \"Fn::GetAtt\" : [ HostingBucket, WebsiteURL ] }\n      Description: \"URL for website hosted on S3\"\n"]},{"id":88442673,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-facebook-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_STAGE}\n    FACEBOOK_BOT_VERIFY_TOKEN: ${self:custom.secrets.FACEBOOK_BOT_VERIFY_TOKEN}\n    FACEBOOK_BOT_PAGE_ACCESS_TOKEN: ${self:custom.secrets.FACEBOOK_BOT_PAGE_ACCESS_TOKEN}\n    DOWNLOAD_TOPIC: ${self:provider.environment.SERVERLESS_PROJECT}-download-topic-${opt:stage, self:provider.stage}\n    RENDER_BUCKET:\n      Fn::ImportValue: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    SOURCE_BUCKET:\n      Fn::ImportValue: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\npackage:\n  exclude:\n    - test/**\n    - .git/**\n    - templates\n  individually: true\n\nfunctions:\n  facebook:\n    handler: facebook/index.handler\n    timeout: 15\n    events:\n      - http:\n          path: facebook\n          method: get\n      - http:\n          path: facebook\n          method: post\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:video-render-ready-topic-${opt:stage, self:provider.stage} # fn import value not yet working in serverless\n  download:\n    handler: download/index.handler\n    timeout: 300\n    events:\n      - sns: ${self:provider.environment.DOWNLOAD_TOPIC}\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}\n","frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-upload-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    STATUS_TOPIC_NAME: video-status-topic-${opt:stage, self:provider.stage}\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_STAGE}\n    SOURCE_BUCKET:\n      Fn::ImportValue: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    RENDER_BUCKET:\n      Fn::ImportValue: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - S3:ListBucket\n      - S3:GetObject\n      - S3:PutObject\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\npackage:\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n  status:\n    handler: status/index.handler\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:video-render-ready-topic-${opt:stage, self:provider.stage} # fn import value not yet working in serverless\n  get-metadata:\n    handler: get-metadata/index.handler\n    events:\n      - http:\n          path: metadata/{session}\n          method: get\n          cors: true\n    timeout: 30\n  signed-url:\n    handler: signed-url/index.handler\n    events:\n      - http:\n          path: signed-url\n          method: get\n          cors: true\n    timeout: 20\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  webpackIncludeModules: true\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}","frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-video-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    ACCOUNT: ${self:custom.secrets.ACCOUNT} # Using AWS::Account with SNS fails\n    STATUS_TOPIC: video-status-topic-${opt:stage, self:provider.stage}\n    SESSION_TOPIC_NAME: video-session-topic-${opt:stage, self:provider.stage}\n    CAPTURE_TOPIC_NAME: video-capture-topic-${opt:stage, self:provider.stage}\n    RENDER_START_TOPIC_NAME: video-render-start-topic-${opt:stage, self:provider.stage}\n    RENDER_READY_TOPIC_NAME: video-render-ready-topic-${opt:stage, self:provider.stage}\n    SOURCE_BUCKET:\n      Ref: SourceBucket\n    RENDER_BUCKET:\n      Ref: RenderBucket\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n    LABELS_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-labels-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n    VIDEO_MAX_DURATION: 30 # (in seconds) limit video duration (0 = no limit)\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:DeleteObject\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - rekognition:DetectLabels\n      Resource: \"*\"\n\npackage:\n  exclude:\n    - test/**\n    - .git/**\n    - templates\n    - ffmpeg/**\n  individually: true\n\nfunctions:\n  create-session:\n    handler: create-session/index.handler\n    timeout: 15\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.SESSION_TOPIC_NAME}\n  status:\n    handler: status/index.handler\n    timeout: 30\n    events:\n      - sns: ${self:provider.environment.STATUS_TOPIC}\n      - schedule: rate(1 minute)\n  get-labels:\n    handler: get-labels/index.handler\n    timeout: 30\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.CAPTURE_TOPIC_NAME}\n  create-captures:\n    handler: create-captures/index.handler\n    memorySize: 1536\n    timeout: 300\n    optimize:\n      includePaths:\n        - ffmpeg/ffmpeg\n        - ffmpeg/ffprobe\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}\n  create-gif:\n    handler: create-gif/index.handler\n    memorySize: 1536\n    timeout: 300\n    optimize:\n      includePaths:\n        - ffmpeg/ffmpeg\n        - ffmpeg/ffprobe\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Outputs:\n    RenderBucket:\n      Value:\n        Ref: RenderBucket\n      Export:\n        Name: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    SourceBucket:\n      Value:\n        Ref: SourceBucket\n      Export:\n        Name: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    RenderReadyTopicArn:\n      Value:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:sns\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - Ref: RenderReadyTopic\n      Export:\n        Name: video-service-render-ready-topic-${self:provider.environment.SERVERLESS_STAGE}\n  Resources:\n    CaptureTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.CAPTURE_TOPIC_NAME}\n        TopicName: ${self:provider.environment.CAPTURE_TOPIC_NAME}\n    RenderStartTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.RENDER_START_TOPIC_NAME}\n        TopicName: ${self:provider.environment.RENDER_START_TOPIC_NAME}\n    RenderReadyTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}\n        TopicName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}\n    SessionTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.SESSION_TOPIC_NAME}\n        TopicName: ${self:provider.environment.SESSION_TOPIC_NAME}\n    CaptureTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: CaptureTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: CaptureTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: CaptureTopic\n        Topics:\n          - Ref: CaptureTopic\n    RenderStartTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: RenderStartTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: RenderStartTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: RenderStartTopic\n        Topics:\n          - Ref: RenderStartTopic\n    RenderReadyTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: RenderReadyTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: RenderReadyTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: RenderReadyTopic\n        Topics:\n          - Ref: RenderReadyTopic\n    SessionTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: SessionTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: SessionTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: SessionTopic\n        Topics:\n          - Ref: SessionTopic\n    SourceBucket:\n      Type: AWS::S3::Bucket\n      DependsOn:\n        - SessionTopic\n        - CaptureTopic\n      Properties:\n        AccessControl: BucketOwnerFullControl\n        # clean the bucket\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled\n        CorsConfiguration:\n          CorsRules:\n          - AllowedHeaders:\n              - '*'\n            AllowedMethods:\n              - PUT\n            AllowedOrigins:\n              - '*'\n            ExposedHeaders:\n              - Date\n            Id: CorsRule1\n            MaxAge: '3600'\n        NotificationConfiguration:\n          TopicConfigurations:\n            - Topic:\n                Ref: SessionTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: prefix\n                      Value: videos/\n            - Topic:\n                Ref: CaptureTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: prefix\n                      Value: captures/\n    RenderBucket:\n      Type: AWS::S3::Bucket\n      DependsOn:\n        - RenderReadyTopic\n      Properties:\n        AccessControl: BucketOwnerFullControl\n        # clean the bucket\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled\n        NotificationConfiguration:\n          TopicConfigurations:\n            - Topic:\n                Ref: RenderReadyTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: suffix\n                      Value: \"metadata.json\"\n\n    CreateDashgifLambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Fn::Join:\n            - \":\"\n            - - arn:aws:sns\n              - Ref: AWS::Region\n              - Ref: AWS::AccountId\n              - Ref: RenderStartTopic\n        FunctionName:\n          Fn::GetAtt:\n          - CreateDashgifLambdaFunction\n          - Arn\n    CreateDashcapturesLambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Fn::Join:\n            - \":\"\n            - - arn:aws:sns\n              - Ref: AWS::Region\n              - Ref: AWS::AccountId\n              - Ref: RenderStartTopic\n        FunctionName:\n          Fn::GetAtt:\n          - CreateDashcapturesLambdaFunction\n          - Arn\n    StatusTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}\n    LabelsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: frame\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: frame\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.LABELS_TABLE_NAME}\n"]},{"id":106114725,"files":["service: deploy-with-serverless\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  queueName: serverless-projects-batch-queue\n  projectsTableName: serverless-projects\n  jobDefinitionName: serverless-batch-job-definition\n  keyPair: RafalWilinski-personal-ssh-key\n\n  output:\n    handler: scripts/deploy-proxy.handler\n    file: user-data.json\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    PROJECTS_TABLE: ${self:custom.projectsTableName}\n    JOB_QUEUE: ${self:custom.queueName}\n    JOB_DEFINITON_NAME: ${self:custom.jobDefinitionName}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'dynamodb:GetItem'\n        - 'dynamodb:PutItem'\n        - 'batch:SubmitJob'\n        - 'lambda:InvokeFunction'\n        - 's3:*'\n      Resource: '*'\n\nfunctions:\n  handler:\n    handler: functions/handler.run\n    memory: 128\n  image-proxy:\n    handler: functions/image-proxy.run\n    memory: 128\n    events:\n      - http:\n          path: /image\n          method: GET\n          cors: true\n  href:\n    handler: functions/href.run\n    memory: 128\n    events:\n      - http:\n          path: /template\n          method: GET\n          cors: true\n\nresources:\n  Resources:\n\n    # S3\n    DeployWithServerlessBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: deploy-with-serverless\n        AccessControl: PublicRead\n\n    # DynamoDB\n    ServerlessTemplatesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.projectsTableName}\n        AttributeDefinitions:\n          - AttributeName: url\n            AttributeType: S\n        KeySchema:\n          - AttributeName: url\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    # Networking\n    ServerlessBatchVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchInternetGateway:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchVPCIPGWAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        InternetGatewayId:\n          Ref: ServerlessBatchInternetGateway\n        VpcId:\n          Ref: ServerlessBatchVPC\n      DependsOn:\n        - ServerlessBatchInternetGateway\n        - ServerlessBatchVPC\n    ServerlessBatchRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessBatchVPC\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchSubnetRouteTableAssoc:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: ServerlessBatchRouteTable\n        SubnetId:\n          Ref: ServerlessBatchSubnet\n    ServerlessBatchInternetRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: ServerlessBatchInternetGateway\n        RouteTableId:\n          Ref: ServerlessBatchRouteTable\n      DependsOn: ServerlessBatchInternetGateway\n    ServerlessBatchSubnet:\n      Type: AWS::EC2::Subnet\n      Properties:\n        CidrBlock: \"10.0.0.0/24\"\n        MapPublicIpOnLaunch: true\n        VpcId:\n          Ref: ServerlessBatchVPC\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupName: ServerlessBatchSecurityGroup\n        GroupDescription: Security Group for AWS Batch for Serverless-deploy-button project\n        VpcId:\n          Ref: ServerlessBatchVPC\n        SecurityGroupEgress:\n          -\n            IpProtocol: tcp\n            FromPort: \"0\"\n            ToPort: \"60000\"\n            CidrIp: \"0.0.0.0/0\"\n        SecurityGroupIngress:\n          -\n            IpProtocol: tcp\n            FromPort: \"22\"\n            ToPort: \"22\"\n            CidrIp: \"0.0.0.0/0\"\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n\n    # ECR Repository\n    ServerlessBatchRepository:\n      Type: AWS::ECR::Repository\n      Properties:\n        RepositoryName: \"serverless-batch\"\n        RepositoryPolicyText: \n          Version: \"2012-10-17\"\n          Statement: \n            - \n              Sid: AllowPushPull\n              Effect: Allow\n              Principal: \n                AWS: \n                  - 'Fn::GetAtt':\n                    - ServerlessBatchUser\n                    - Arn\n              Action: \n                - \"ecr:GetDownloadUrlForLayer\"\n                - \"ecr:BatchGetImage\"\n                - \"ecr:BatchCheckLayerAvailability\"\n                - \"ecr:PutImage\"\n                - \"ecr:InitiateLayerUpload\"\n                - \"ecr:UploadLayerPart\"\n                - \"ecr:CompleteLayerUpload\"\n      DependsOn: ServerlessBatchUser\n    \n    # IAM\n    ServerlessBatchUser:\n      Type: AWS::IAM::User\n      Properties:\n        LoginProfile:\n          Password: ${file(./password.yml):password}\n        UserName: ServerlessBatchUser\n    ServerlessBatchUserPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: ServerlessBatchUserPolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Action:\n                - ecr:GetAuthorizationToken\n                - ecr:InitiateLayerUpload\n              Resource: \"*\"\n        Users:\n          - Ref: ServerlessBatchUser\n      DependsOn: ServerlessBatchUser\n    ServerlessBatchUserKeys:\n      Type: AWS::IAM::AccessKey\n      Properties:\n        UserName: ServerlessBatchUser\n      DependsOn: ServerlessBatchUser\n    ServerlessBatchServiceRole: # Standard AWS Batch Role\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ServerlessBatchServiceRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - batch.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ServerlessBatchPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Resource: '*'\n                  Action:\n                    - ec2:DescribeAccountAttributes\n                    - ec2:DescribeInstances\n                    - ec2:DescribeSubnets\n                    - ec2:DescribeSecurityGroups\n                    - ec2:DescribeKeyPairs\n                    - ec2:DescribeImages\n                    - ec2:DescribeImageAttribute\n                    - ec2:DescribeSpotFleetInstances\n                    - ec2:DescribeSpotFleetRequests\n                    - ec2:DescribeSpotPriceHistory\n                    - ec2:RequestSpotFleet\n                    - ec2:CancelSpotFleetRequests\n                    - ec2:ModifySpotFleetRequest\n                    - ec2:TerminateInstances\n                    - autoscaling:DescribeAccountLimits\n                    - autoscaling:DescribeAutoScalingGroups\n                    - autoscaling:DescribeLaunchConfigurations\n                    - autoscaling:DescribeAutoScalingInstances\n                    - autoscaling:CreateLaunchConfiguration\n                    - autoscaling:CreateAutoScalingGroup\n                    - autoscaling:UpdateAutoScalingGroup\n                    - autoscaling:SetDesiredCapacity\n                    - autoscaling:DeleteLaunchConfiguration\n                    - autoscaling:DeleteAutoScalingGroup\n                    - autoscaling:CreateOrUpdateTags\n                    - autoscaling:SuspendProcesses\n                    - autoscaling:PutNotificationConfiguration\n                    - autoscaling:TerminateInstanceInAutoScalingGroup\n                    - ecs:*\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:DescribeLogGroups\n                    - iam:GetInstanceProfile\n                    - iam:PassRole\n                    - ecr:*\n                    - dynamodb:PutItem\n                    - dynamodb:DescribeTable\n\n    # AWS Batch\n    ServerlessBatchComputeEnvironment:\n      Type: AWS::Batch::ComputeEnvironment\n      Properties:\n        Type: MANAGED\n        ComputeEnvironmentName: ServerlessBatchComputeEnvironment\n        ServiceRole:\n          Fn::GetAtt:\n            - ServerlessBatchServiceRole\n            - Arn\n        State: ENABLED\n        ComputeResources:\n          MinvCpus: 0\n          MaxvCpus: 4\n          DesiredvCpus: 0\n          Ec2KeyPair: ${self:custom.keyPair}\n          Type: \"EC2\"\n          ImageId: ami-ec33cc96 # ECS Optimized AMI\n          InstanceRole: ecsInstanceRole\n          InstanceTypes:\n            - m3.medium\n          SecurityGroupIds:\n            - Ref: ServerlessBatchSecurityGroup\n          Subnets:\n            - Ref: ServerlessBatchSubnet\n    ServerlessBatchJobQueue:\n      Type: \"AWS::Batch::JobQueue\"\n      Properties:\n        ComputeEnvironmentOrder:\n          - ComputeEnvironment: ServerlessBatchComputeEnvironment\n            Order: 1\n        Priority: 1\n        State: ENABLED\n        JobQueueName: ${self:custom.queueName}\n      DependsOn: ServerlessBatchComputeEnvironment\n    ServerlessBatchJobDefinition:\n      Type: 'AWS::Batch::JobDefinition'\n      Properties:\n        Type: container\n        JobDefinitionName: ${self:custom.jobDefinitionName}\n        ContainerProperties:\n          Memory: 1024\n          Privileged: true\n          Vcpus: 1\n          Image: \n            Fn::Join:\n              - \"\"\n              - - Ref: AWS::AccountId\n                - '.dkr.ecr.us-east-1.amazonaws.com/serverless-batch:latest'\n        RetryStrategy:\n          Attempts: 1\n  Outputs:\n    accessKey:\n      Description: Access Key\n      Value:\n        Ref: ServerlessBatchUserKeys\n    secretKey:\n      Description: Secret Key\n      Value:\n        Fn::GetAtt:\n          - ServerlessBatchUserKeys\n          - SecretAccessKey\n      "]},{"id":109232445,"files":["service: serverless-wechat\n\nplugins:\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 5\n  region: us-east-1\n\nfunctions:\n  runserver:\n    handler: handler.runserver\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      TOKEN: ${file(./config.yml):TOKEN}\n      APP_ID: ${file(./config.yml):APP_ID}\n      AESKey: ${file(./config.yml):AESKey}\n\ncustom:\n  customDomain:\n    domainName: wechat.wdsm.io\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n"]},{"id":108816237,"files":["service: serverless-react-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  lambda:\n    handler: dist/lambda.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":72059906,"files":["service: circleci-build-trigger\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${env:AWS_DEFAULT_REGION, env:AWS_REGION}\n\ncustom: ${file(serverless.env.yml)}\n\nfunctions:\n  trigger:\n    handler: handler.trigger\n    description: ${self:custom.PROJECT}\n    environment: ${self:custom}\n    events:\n      - schedule: ${self:custom.SCHEDULE_EXPRESSION}\n","CIRCLE_TOKEN:\nPROJECT:\nBRANCH:\nTRIGGER_NAME:\nCIRCLE_JOB:\nSCHEDULE_EXPRESSION:\n"]},{"id":95754625,"files":["service: ${file(package.json):name}\n\nplugins:\n  # - serverless-plugin-diff\n  - serverless-webpack\n\ncustom:\n  cloudWatchNamespace: Coinboss\n  highBuyPriceTopicName: ${self:service}-high-buy-price-${self:custom.stage}\n  lowBuyPriceTopicName: ${self:service}-low-buy-price-${self:custom.stage}\n  highSellPriceTopicName: ${self:service}-high-sell-price-${self:custom.stage}\n  lowSellPriceTopicName: ${self:service}-low-sell-price-${self:custom.stage}\n  stage: ${env:STAGE}\n  webpackIncludeModules: true\n\nprovider:\n  cfLogs: true\n  environment:\n    ENVIRONMENT: ${self:custom.stage}\n    NODE_ENV: ${self:custom.stage}\n    REGION: ${self:provider.region}\n    SERVICE_NAME: ${self:service}\n    STAGE: ${self:custom.stage}\n    VERSION: ${file(package.json):version}\n    # API Providers\n    COINBASE_API_KEY: ${env:COINBASE_API_KEY}\n    COINBASE_API_SECRET: ${env:COINBASE_API_SECRET}\n    # Exchange/Buy Settings\n    PREFERRED_CRYPTO_CURRENCY: ${env:PREFERRED_CRYPTO_CURRENCY}\n    PREFERRED_LOCAL_CURRENCY: ${env:PREFERRED_LOCAL_CURRENCY}\n    PREFERRED_WALLET: ${env:PREFERRED_WALLET}\n    BUY_AMOUNT: ${env:BUY_AMOUNT}\n    SELL_AMOUNT: ${env:SELL_AMOUNT}\n    # Alarm settings\n    CLOUDWATCH_NAMESPACE: ${self:custom.cloudWatchNamespace}\n    LOW_BUY_PRICE_THRESHOLD: ${env:LOW_BUY_PRICE_THRESHOLD}\n    HIGH_BUY_PRICE_THRESHOLD: ${env:HIGH_BUY_PRICE_THRESHOLD}\n    LOW_SELL_PRICE_THRESHOLD: ${env:LOW_SELL_PRICE_THRESHOLD}\n    HIGH_SELL_PRICE_THRESHOLD: ${env:HIGH_SELL_PRICE_THRESHOLD}\n    # SMS Settings\n    AWS_SMS_REGION: ${env:AWS_SMS_REGION}\n    AWS_SMS_TO: ${env:AWS_SMS_TO}\n  iamRoleStatements: ${file(cloudformation/iam.yml)}\n  name: aws\n  profile: ${env:AWS_PROFILE}\n  region: ${env:REGION}\n  runtime: nodejs6.10\n  versionFunctions: false\n\nfunctions:\n  getExchangeRates:\n    handler: handler.getExchangeRates\n    memorySize: 128\n    timeout: 5\n    events:\n      - schedule:\n          rate: rate(1 minute)\n          enabled: true\n      # - http:\n      #     method: GET\n      #     path: getExchangeRates\n\n  exchangeRateAlarm:\n    handler: handler.exchangeRateAlarm\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: HighBuyPriceTopic\n          topicName: ${self:custom.highBuyPriceTopicName}\n      - sns:\n          arn:\n            Ref: LowSellPriceTopic\n          topicName: ${self:custom.lowSellPriceTopicName}\n\n  buy:\n    handler: handler.buy\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: LowBuyPriceTopic\n          topicName: ${self:custom.lowBuyPriceTopicName}\n      # - http:\n      #     method: GET\n      #     path: buy\n\n  sell:\n    handler: handler.sell\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: HighSellPriceTopic\n          topicName: ${self:custom.highSellPriceTopicName}\n      # - http:\n      #     method: GET\n      #     path: sell\n\nresources: ${file(cloudformation/template.yml)}\n"]},{"id":99412053,"files":["service: s3-directory-list\n\nplugins:\n  - serverless-external-s3-event\n  - serverless-webpack\n\ncustom:\n  bucketName: ${file(custom.yml):bucketName}\n  darkTheme: ${file(custom.yml):darkTheme, 'false'}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 256\n\n  stage: dev\n  region: eu-west-1\n  profile: serverless\n\n\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:ListBucket\"\n     Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:PutObject\"\n     Resource:\n       Fn::Join:\n         - \"\"\n         - - \"arn:aws:s3:::\"\n           - \"Ref\" : \"ServerlessDeploymentBucket\"\n           - \"/*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:ListBucket\"\n     Resource: \"arn:aws:s3:::${self:custom.bucketName}\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:GetObject\"\n       - \"s3:PutObject\"\n     Resource: \"arn:aws:s3:::${self:custom.bucketName}/*\"\n\n   - Effect: \"Allow\"\n     Action:\n      - \"s3:PutBucketNotification\"\n     Resource:\n      Fn::Join:\n        - \"\"\n        - - \"arn:aws:s3:::${self:custom.bucketName}\"\n\nfunctions:\n  generateListing:\n    handler: src/handler.generateListing\n    environment:\n      darkTheme: ${self:custom.darkTheme}\n    events:\n      - existingS3:\n          bucket: ${self:custom.bucketName}\n          events:\n            - s3:ObjectCreated:*\n            - s3:ObjectRemoved:*\n      # - s3:\n      #     bucket: ${self:custom.bucketName}\n      #     events:\n      #       - s3:ObjectCreated:*\n      #       - s3:ObjectRemoved:*\n"]},{"id":73700047,"files":["service: movie-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n  region: eu-central-1\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  movies:\n    handler: index.movies\n    events:\n      - http: get movies\n"]},{"id":95308252,"files":["service: twitter-growth-tool\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n\ncustom:\n  serverless-offline:\n    port: 1337\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    TWITTER_API_KEY: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):TWITTER_API_KEY}\n    TWITTER_CONSUMER_SECRET: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):TWITTER_CONSUMER_SECRET}\n    OAUTH_LOGIN_SUCCESS_REDIRECT: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):OAUTH_LOGIN_SUCCESS_REDIRECT}\n    DYNAMODB_URL: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):DYNAMODB_URL}\n    DYNAMODB_REGION: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):DYNAMODB_REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/users\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/oauth\"\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nfunctions:\n  graphql:\n    handler: build/src/functions/graphql.handler\n    memorySize: 128\n    timeout: 5\n    package:\n      include:\n        - build/**\n        - front/**\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  searcher:\n    handler: build/src/functions/searcher.handler\n    memorySize: 512\n    timeout: 60\n    events:\n      - schedule: rate(1 hour)\n    package:\n      include:\n        - build/**\n        - front/**\n  oauthCallback:\n    handler: build/src/functions/oauthCallback.handler\n    memorySize: 128\n    timeout: 5\n    events:\n      - http:\n          path: oauth/callback\n          method: get\n          cors: true\n    package:\n      include:\n        - build/**\n        - front/**\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          - AttributeName: screenName\n            AttributeType: S\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: screenName\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    # Table with temporary OAuth Access Token/Secret values\n    # It is recommended to enable TTL on this table by hand\n    oauthTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: oauth\n        AttributeDefinitions:\n          - AttributeName: token\n            AttributeType: S\n        KeySchema:\n          - AttributeName: token\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    campaignsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: campaigns\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":103318200,"files":["service: \n  name: cryptolambda \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n\n  region: eu-west-1\n\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - KMS:Decrypt\n    Resource: \"arn:aws:kms:eu-west-1:::blablabla-your-key-ARN-here\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      FIAT_CURRENCY: EUR\n      BTC_ORDER: 10\n      ETH_ORDER: 6\n\n    events:\n      - schedule: rate(1 day)\n"]},{"id":67196668,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: interns-portal-test # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#defaults:\n#  stage: dev\n#  region: us-east-1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  Users:\n    handler: users/usersHandler.users\n    events:\n      - http:\n          path: users\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/user\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/status/{status}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/user/{id}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/stat/{stat}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n\n\n  Tasks:\n    handler: tasks/tasksHandler.tasks\n    events:\n      - http:\n          path: tasks/all\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/newTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/userTask/{id}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/update/userTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/disableTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n\n\n\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    newResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: newBucket"]},{"id":76106805,"files":["service: aws-iam-manager\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 30\n  stackTags: aws-iam-manager\n  region: us-east-1\n  profile: netguru_rnd\n  deploymentBucket: aws-iam-manager-deploys\n  environment:\n    GITHUB_ACCESS_TOKEN: ${file(./secrets.yml):GITHUB_ACCESS_TOKEN}\n    USERS_PATH: /aim-managed/\n    MAIL_SENDER: rafal.wilinski@netguru.co\n    EMAIL_DOMAIN: netguru.co\n    REGION: us-east-1\n    ROOT_ACCOUNT: netguru_rnd_account\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iam:ListUsers\n        - iam:DeleteUser\n        - iam:CreateUser\n        - iam:ListAccessKeys\n        - iam:CreateLoginProfile\n        - iam:DeleteLoginProfile\n        - iam:CreateAccessKey\n        - iam:DeleteAccessKey\n        - iam:AddUserToGroup\n        - iam:RemoveUserFromGroup\n        - iam:ListPolicies\n        - iam:ListEntitiesForPolicy\n        - iam:CreatePolicy\n        - iam:DeletePolicy\n        - iam:GetPolicy\n        - iam:ListAccessKeys\n        - iam:ListGroups\n        - iam:ListGroupsForUser\n        - iam:GetGroup\n        - iam:CreateGroup\n        - iam:ListGroupsForUser\n        - iam:DeleteGroup\n        - iam:DeleteLoginProfile\n        - iam:DeleteGroupPolicy\n        - iam:AttachGroupPolicy\n        - iam:DetachGroupPolicy\n        - ses:SendEmail\n        - dynamodb:GetItem\n      Resource: \"*\"\n\npackage:\n  exclude:\n    - '*.png'\n\nregion: us-east-1\n\nfunctions:\n  IAMManagerSNSHandler:\n    handler: build/src/index.handler\n    events:\n      - sns:\n          topicName: IAMManagerNotifyTopic\n          displayName: IAMManagerNotifyTopic\n\nresources:\n  Resources:\n    # Create Role that will be used to Push Messages on Github's behalf\n    IAMManagerUser:\n      Type: \"AWS::IAM::User\"\n      Properties:\n        UserName: IAMManagerUser\n        Policies:\n          - PolicyName: IAMManagerGithubHookAllowSNSSubscriptionPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sns:Publish\n                  Resource:\n                    Ref: SNSTopicIAMManagerNotifyTopic\n    IAMDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: account_name\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: account_name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'aim_roles'\n\n  Outputs:\n    IAMManagerNotifyTopicARN:\n      Description: ARN of Github Hook topic, (SNS topic on GitHub)\n      Value:\n        Ref: SNSTopicIAMManagerNotifyTopic\n"]},{"id":86979819,"files":["service: aws-ses-serverless-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: development\n  region: ap-northeast-1\n\nplugins:\n  - serverless-webpack\n\nfunctions:\n  sendMail:\n    handler: handler.sendMail\n    description: Send email using SES service.\n    memorySize: 1024\n    timeout: 5\n    events:\n      - http:\n          path: sendMail\n          method: post\n          integration: lambda\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n"]},{"id":100717516,"files":["\nservice: push-notification-service\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  stage: dev\n\nfunctions:\n  notification:\n    handler: index.sendNotification\n    events:\n      - http:\n          path: notification\n          method: post\n"]},{"id":95876882,"files":["service: aws-lambda-static-ip\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  vpc:\n    securityGroupIds:\n      - Fn::GetAtt: [VPCStaticIP, DefaultSecurityGroup]\n    subnetIds:\n      - Ref: SubnetPrivate\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DeleteNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n      Resource: '*'\n\nfunctions:\n  logger:\n    handler: functions/logger/logger.handler\n    events:\n      - http:\n          path: log\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"sourceIp\" : \"$context.identity.sourceIp\" }'\n  caller:\n    environment:\n      URI:\n        Fn::Join: ['', [https://, Ref: ApiGatewayRestApi, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/log']]\n    handler: functions/caller/caller.handler\n    events:\n      - http:\n          path: call\n          method: get\n\nresources:\n  Resources:\n    # Resources created according to blog post:\n    # http://techblog.financialengines.com/2016/09/26/aws-lambdas-with-a-static-outgoing-ip/\n    \n    # Step 1: Create a new VPC\n    VPCStaticIP:\n      Type: AWS::EC2::VPC\n      Properties: \n        CidrBlock: 11.0.0.0/16\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-vpc\n    \n    # Step 2: Create 2 Subnets\n    SubnetPublic:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        CidrBlock: 11.0.0.0/24\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-public-subnet\n        VpcId:\n          Ref: VPCStaticIP\n\n    SubnetPrivate:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        CidrBlock: 11.0.1.0/24\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-private-subnet\n        VpcId:\n          Ref: VPCStaticIP\n    \n    # Step 3: Create an Internet Gateway\n    InternetGateway:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-igw\n\n    # Attach Internet Gateway to VPC\n    VPCGatewayAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        InternetGatewayId:\n          Ref: InternetGateway\n        VpcId:\n          Ref: VPCStaticIP\n  \n    # Step 4: Create a public Route Table and Assign it to our public route\n    RouteTablePublic:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: VPCStaticIP\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-public-route\n  \n    RoutePublic:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: InternetGateway\n        RouteTableId:\n          Ref: RouteTablePublic\n  \n    SubnetRouteTableAssociationPublic:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: RouteTablePublic\n        SubnetId:\n          Ref: SubnetPublic\n    \n    # Step 5: Create a NAT Gateway\n    # Before creating NAT Gateway, we need to create Elastic IP with vpc scope\n    EIP:\n      Type: AWS::EC2::EIP\n      Properties:\n        Domain: vpc\n  \n    NatGateway:\n      Type: AWS::EC2::NatGateway\n      Properties:\n        AllocationId:\n          Fn::GetAtt: [EIP, AllocationId]\n        SubnetId:\n          Ref: SubnetPublic\n\n    # In tutorial NAT Gateway is attached as default route 0.0.0.0/0 in main Route Table.\n    # Main Route Table is created implicitely during VPC creation and CloudFormation\n    # has no access to its ID. To overcome this limitation we create additional Route Table.\n    RouteTablePrivate:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: VPCStaticIP\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-private-route\n\n    RoutePrivate:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        NatGatewayId:\n          Ref: NatGateway\n        RouteTableId:\n          Ref: RouteTablePrivate\n\n    SubnetRouteTableMainAssociationPrivate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: RouteTablePrivate\n        SubnetId:\n          Ref: SubnetPrivate\n"]},{"id":57897285,"files":["---\nservice: bitbucket2sns\n\nplugins:\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: ${opt:stage,self:custom.defaults.stage}\n  region: ${opt:region,self:custom.defaults.region}\n  profile: ${opt:profile,env:AWS_PROFILE,self:custom.defaults.profile}\n  environment: ${file(./${opt:env,self:custom.defaults.env}.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:ListTopics\n        - sns:CreateTopic\n        - sns:Publish\n        - sns:Subscribe\n      Resource:\n        - arn:aws:sns:${self:provider.region}:*:BITBUCKET2SNS_TOKEN\n\ncustom:\n  defaults:\n    stage: dev\n    region: eu-central-1\n    env: env\n    profile: default\n\nfunctions:\n  webhook:\n    description: Handle incoming POST request from Bitbucket\n    handler: functions/handle-webhook/handler.handler\n    events:\n      - http: POST webhook\n\n"]},{"id":92947815,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-next\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n\nfunctions:\n  web:\n    handler: aws/web.handler\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: get\n          path: /_next/{proxy+}\n    package:\n      include:\n        - ../.next/**\n        - ../static/**\n\n  api:\n    handler: aws/api.handler\n    events:\n      - http:\n          method: any\n          path: /n/{proxy+}\n          authorizer: authorization\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\n  authentication:\n    handler: aws/authentication.handler\n    events:\n      - http:\n          method: post\n          path: /auth\n\n  authorization:\n    handler: aws/authorization.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-jest-plugin\n  - serverless-plugin-webpack\n"]},{"id":58233888,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-contact-form\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs6.10\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action: \n         - \"ses:SendEmail\"\n         - \"ses:SendRawEmail\"\n       Resource: \"*\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  contact:\n    handler: handler.contact\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true\n"]},{"id":89801584,"files":["service: hapi-serverless\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: development\n  profile: default\n  region: eu-west-1\n\nfunctions:\n  api:\n    handler: src/api/index.handler\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":73399315,"files":["service: my-gcf-service # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project-1234\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  \n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  \n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n      \n"]},{"id":90670104,"files":["service: vidhub-img # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n\n  stage: production\n  region: us-east-1 # Update to whatever region you would like\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"Ref\" : \"ServerlessDeploymentBucket\"\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource: arn:aws:s3:::img.vidhub.co/* # the bucket ARN to store images in\n\nfunctions:\n  index:\n    handler: handler.index\n    events:\n      - http:\n          path: /{img}\n          method: get\n    environment:\n      S3_BUCKET: img.vidhub.co # bucket name to store images\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Aliases:\n              - img.vidhub.co # DNS to replace CloudFront's\n          Origins:\n              - DomainName: { \"Fn::Join\": [ \".\", [ { \"Ref\": \"ApiGatewayRestApi\" }, \"execute-api\", \"us-east-1\", \"amazonaws.com\" ] ] }\n                OriginPath: /production\n                Id: vidhub-img\n                CustomOriginConfig:\n                  HTTPPort: 80\n                  HTTPSPort: 443\n                  OriginProtocolPolicy: https-only\n                  OriginSSLProtocols:\n                    - TLSv1\n                    - TLSv1.1\n                    - TLSv1.2\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            TargetOriginId: vidhub-img\n            ViewerProtocolPolicy: redirect-to-https\n            ForwardedValues:\n              Cookies:\n                Forward: none\n              QueryString: true\n          Enabled: true\n          Comment: Vidhub Img  # Can be whatever\n          DefaultRootObject: index.html\n          ViewerCertificate:\n            AcmCertificateArn: arn:aws:acm:us-east-1:563115270151:certificate/826e8b5b-3ace-4fdf-83be-330a66a27ee7 # A certificate in ACM for the DNS being used\n            SslSupportMethod: sni-only\n          PriceClass: PriceClass_100\n"]},{"id":83279521,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-pdf\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: stage\n  region: us-west-2\n  profile: serverless\n\nfunctions:\n  print:\n    handler: handler.print\n    events:\n      - http:\n          method: post\n          path: print\n          cors: true\n\n# plugins:\n#   - serverless-webpack\n\npackage:\n  exclude:\n    - node_modules/**\n    - bin/**\n  include:\n    - bin/phantomjs-linux\n    - lib/rasterize.js\n"]},{"id":86656916,"files":["\nservice: ses-forwarder \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action: \n        - s3:GetObject\n        - s3:PutObject\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"SesForwarderBucket\" }, \"/*\" ] ]  }\n\nfunctions:\n  sesForwarder:\n    handler: handler.handle\n    timeout: 10\n    memorySize: 128\n    environment:\n      emailBucket: \n         Ref: SesForwarderBucket\n\nresources:\n Resources:\n   SesForwarderBucket:\n     Type: AWS::S3::Bucket\n     Properties:\n      BucketName: \n        Fn::Join: [\"\", [\"sesforwarder-\",{ \"Ref\" : \"AWS::AccountId\" }  ] ]\n      LifecycleConfiguration:\n        Rules:\n           - ExpirationInDays: 3\n             Status: Enabled\n   SesForwarderBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: \n           Ref: SesForwarderBucket\n        PolicyDocument:\n\n          Version: '2012-10-17'\n          Statement:\n          - Sid: GiveSESPermissionToWriteEmail\n            Effect: Allow\n            Principal:\n              Service: ses.amazonaws.com\n            Action: s3:PutObject\n            Resource: \n               Fn::Join: [\"\", [\"arn:aws:s3:::\",{\"Ref\":\"SesForwarderBucket\" },\"/*\"]]\n            Condition:\n              StringEquals:\n                aws:Referer:\n                    Ref: AWS::AccountId   \n     \n Outputs:\n    SesForwarderBucket:\n      Description: \"Forwarder Bucket Name\"\n      Value:\n         Ref: SesForwarderBucket\n"]},{"id":81870506,"files":["service: test\nprovider:\n    name: google\n    runtime: nodejs4.3\n    project: your-project-name\n    credentials: '~/.gcloud/keyfile.json'\nplugins:\n    - serverless-google-cloudfunctions\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: test, availableMemoryMb: 512, events: [{http: /}]}\n","service: amazon\nprovider:\n    name: aws\n    runtime: nodejs4.3\n    stage: dev\n    region: us-east-1\n    memorySize: 512\nfunctions:\n    test-fppbjs: {handler: handler.test, events: [{http: {path: /test, method: post, private: false}}]}\n","service: ibm\nprovider:\n    name: openwhisk\nfunctions:\n    test: {handler: handler.test, memory: 512, events: [{http: 'POST test'}]}\nplugins:\n    - serverless-openwhisk\n","service: your-service-name\nprovider:\n    name: azure\n    location: 'East US'\nplugins:\n    - serverless-azure-functions\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: handler.test, events: [{http: true, x-azure-settings: {authLevel: anonymous}}]}\n","service: prototype\nprovider:\n    name: prototype\n    location: 'East US'\nplugins:\n    - serverless-prototype-plugin\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: index.js, memorySize: 512}\n"]},{"id":83428108,"files":["service: assignment-build-executor-service\n\nprovider:\n  name: aws\n  runtime: java8\n  stage: dev\n  region: us-east-1\n  environment:\n    LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-submissions-${self:provider.stage}\"\n    LCRE_CANDIDATE_BUILD_REPORTS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-build-reports-${self:provider.stage}\"\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:*\"\n        Resource: \"*\"\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"*\"\n\ncustom:\n  s3BucketPrefix: lcre\n\npackage:\n  artifact: build/distributions/assignment-build-executor-service.zip\n\nfunctions:\n  assignment-build-executor:\n    handler: xebia.lcre.BuildHandler\n    memorySize: 704\n    timeout: 300\n    events:\n      - s3:\n          bucket: ${self:provider.environment.LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET}\n          event: s3:ObjectCreated:*\n          \nresources:\n  Resources:\n    S3BucketForBuildReports:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.LCRE_CANDIDATE_BUILD_REPORTS_S3_BUCKET}\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\n","service: assignment-sender-service\n\nprovider:\n  name: aws\n  runtime: java8\n  region: us-east-1\n  stage: dev\n  environment:\n    LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-submissions-${self:provider.stage}\"\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n    LCRE_ASSIGNMENTS_BUCKET: \"${self:custom.s3BucketPrefix}-assignments-${self:provider.stage}\"\n    SOURCE_EMAIL: ${self:custom.sourceEmail}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\ncustom:\n  awsAccountNumber: ${file(./env.yml):awsAccountNumber}\n  candidateTableStreamTimestamp: ${file(./env.yml):candidateTableStreamTimestamp}\n  s3BucketPrefix: lcre\n  sourceEmail: ${file(./env.yml):sourceEmail}\n\npackage:\n  artifact: target/scala-2.11/assignment-sender-service.jar\n\nfunctions:\n  sendAssignment:\n    handler: assignmentsender.AssignmentSenderHandler\n    events:\n      - stream: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountNumber}:table/${self:provider.environment.CANDIDATE_TABLE}/stream/${self:custom.candidateTableStreamTimestamp}\n","service: candidate-service\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n    CANDIDATE_EMAIL_TABLE: \"candidate-email-${opt:stage, self:provider.stage}\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/candidate-*\"\n\nfunctions:\n  candidateSubmission:\n    handler: api/candidate.submit\n    memorySize: 128\n    description: Submit candidate information and starts interview process.\n    events:\n      - http: \n          path: candidates\n          method: post\n          cors: true\n  listCandidates:\n    handler: api/candidate.list\n    memorySize: 128\n    description: List all candidates\n    events:\n      - http: \n          path: candidates\n          method: get\n          cors: true     \n  candidateDetails:\n    handler: api/candidate.get\n    events:\n      - http:\n          path: candidates/{id}\n          method: get\n          cors: true             \n\nresources:\n  Resources:\n    CandidatesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"id\"\n            AttributeType: \"S\"   \n        KeySchema:\n          -\n            AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: \"NEW_IMAGE\"\n        TableName: ${self:provider.environment.CANDIDATE_TABLE}\n    CandidateEmailDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"email\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"email\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: ${self:provider.environment.CANDIDATE_EMAIL_TABLE}","service: ui-service\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: lcre-website\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n"]},{"id":60664832,"files":["service: bittman\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n  calculateVolatility:\n    handler: calculateVolatility/handler.calculate\n    include:\n      - calculateVolatility/**\n      - node_modules\n    events:\n      - http: GET calculate\n      - schedule: cron(30 21 ? * WED *)\n\n  calculateTriggers:\n    handler: calculateTriggers/handler.calculate\n    include:\n      - calculateTriggers/**\n      - node_modules\n    events:\n      - http: GET triggers\n      - schedule: cron(31 14 ? * THU *)\n\nresources:\n  Resources:\n    BittmanDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":82747467,"files":["service: azure-functions-app1234\n\nprovider:\n  name: azure\n  location: West US\n  #armTemplate:\n     #file: YourARMTemplate.json\n     #parameters:\n      #VariableNameToUserInArmTemplate: Value\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  httpjs: \n     handler: handler.hello\n     events: \n       - http: true\n         x-azure-settings:\n           authLevel : anonymous\n           \n  queuejs: \n     handler: handler.helloQueue\n     events: \n       - queue: SampleQueue\n         x-azure-settings:\n           name: queueItem\n           connection : AzureWebJobsStorage\n       - blob:\n         x-azure-settings:\n           name: blobOut\n           direction: out\n           connection : AzureWebJobsStorage\n     \n "]},{"id":78345620,"files":["service: aws-stepfunctions-demo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::stepfunctions-demo-source-bucket/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::stepfunctions-demo-target-bucket/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"states:*\"\n      Resource: \"*\" \n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"      \n    - Effect: \"Allow\"\n      Action:\n        - \"ses:*\"\n      Resource: \"*\"            \n\nfunctions:\n  processFile:\n    timeout: 30\n    memory: 256\n    handler: handler.processFile\n  moveFile:\n    handler: handler.moveFile\n    environment:\n      TARGET_BUCKET: stepfunctions-demo-target-bucket    \n  sendEmail:\n    handler: handler.sendEmail\n    environment:\n      DEST_EMAIL: test@example.com    \n  executeWorkflow:\n    handler: handler.executeWorkflow\n    environment:\n      STEP_FUNCTION_NAME: aws-stepfunctions-demo-dev-stepfunctionsdemo   \n    events:\n      - s3:\n          bucket: stepfunctions-demo-source-bucket\n          event: s3:ObjectCreated:*        \n\n\nstepFunctions:\n  stateMachines:\n    stepfunctionsdemo:\n      Comment: \"Example StepFunction\"\n      StartAt: ProcessFile\n      States: \n        ProcessFile: \n          Type: Task\n          Resource: processFile\n          Next: MoveFile      \n        MoveFile: \n          Type: Task\n          Resource: moveFile\n          Next: Wait10Minutes\n        Wait10Minutes:\n          Type: Wait\n          Seconds: 600\n          Next: SendEmail          \n        SendEmail:\n          Type: Task\n          Resource: sendEmail\n          End: true\n\nresources:\n  Resources:\n    TargetBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: stepfunctions-demo-target-bucket        \n    SensorDataTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"sensor_id\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"sensor_id\"\n          KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5        \n        TableName: \"sensor_data\"\n\n\nplugins:\n  - serverless-step-functions"]},{"id":72846881,"files":["service: serverless-notifications\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - 'iot:DescribeEndpoint'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 'sts:AssumeRole'\n      Resource: \"*\"\n\nfunctions:\n  auth:\n    handler: handler.auth\n    events:\n      - http: GET iot/keys\n    memorySize: 128\n    timeout: 10\n\npackage:\n  exclude:\n    - .git/**\n    - create-role/**\n    - frontend/**\n    - iot/**\n    - LICENSE\n    - README.md"]},{"id":71724082,"files":["service: serverless-multiplayer-game\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sdb:PutAttributes\"\n        - \"sdb:Select\"\n      Resource: \"arn:aws:sdb:${self:provider.region}:*:domain/bombermon\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:DescribeEndpoint\"\n      Resource: \"*\"    \n    - Effect: \"Allow\"\n      Action:\n        - \"sts:AssumeRole\"\n      Resource: \"*\"      \n\nfunctions:\n  game:\n    handler: handler.game\n    events:\n      - http: GET iot/keys\n      - http: POST avatars/available\n      - http: PUT avatars/available\n      - http: OPTIONS avatars/available"]},{"id":127404028,"files":["service: serverless-nodejs-starter\n\n\nplugins:\n  - serverless-webpack # Use serverless-webpack plugin to transpile ES6/ES7\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-plugin-aws-alerts\n\ncustom:\n  customDomain:\n      domainName: shane.shanelee.xyz\n      certificateName: '*.shanelee.xyz'\n      basePath: ''\n      stage: ${self:provider.stage}\n      createRoute53Record: true\n      endpointType: 'regional'\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn'\n    package:\n        individually: true #Webpack compiles and optimizes each function individually,\n        # removing unnecessary imports and reducing code sizes significantly\n\n  alerts:\n    stages:\n      - dev\n    topics:\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: shanelee007@gmail.com # Change this to your email address\n    definitions:  # these defaults are merged with your definitions\n      # functionErrors:\n        # period: 300 # override period\n      customAlarm:\n        description: 'My custom alarm'\n        namespace: 'AWS/Lambda'\n        metric: exceptions\n        threshold: 0\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanThreshold\n        pattern: 'exception Bar'\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - customAlarm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\nregion: ap-southeast-2\n\n\nfunctions:\n  hello:\n    handler: src/hello.default\n    events:\n          - http:\n              path: hello\n              method: get\n              cors: true\n  app:\n    handler: src/index.handler\n    events:\n          - http: ANY /\n          - http: 'ANY {proxy+}'\n"]},{"id":115604958,"files":["service:\n  name: appsync-example\n  publish: false # disable auto-publishing to the Serverless platform\n\nplugins:\n  - serverless-appsync-plugin\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n\ncustom:\n  accountId: abc\n  appSync:\n    # name:  # defaults to api\n    authenticationType: AMAZON_COGNITO_USER_POOLS\n    userPoolConfig:\n      awsRegion: # defaults to provider region\n      defaultAction: # ALLOW\n      userPoolId: # required # user pool ID\n    # mappingTemplatesLocation: # defaults to mapping-templates\n    mappingTemplates:\n      - dataSource: Users\n        type: Query\n        field: getUserInfo\n        request: \"getUserInfo-request-mapping-template.vtl\"\n        response: \"getUserInfo-response-mapping-template.vtl\"\n      - dataSource: Lambda_MeInfo\n        type: Query\n        field: meInfo\n        request: \"meInfo-request-mapping-template.vtl\"\n        response: \"meInfo-response-mapping-template.vtl\"\n      - dataSource: ElasticSearch\n        type: Query\n        field: searchAllTweetsByKeyword\n        request: \"searchAllTweetsByKeyword-request-mapping-template.vtl\"\n        response: \"searchAllTweetsByKeyword-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: User\n        field: topTweet\n        request: \"topTweet-request-mapping-template.vtl\"\n        response: \"topTweet-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: User\n        field: tweets\n        request: \"tweets-request-mapping-template.vtl\"\n        response: \"tweets-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: Mutation\n        field: createTweet\n        request: \"createTweet-request-mapping-template.vtl\"\n        response: \"createTweet-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: Mutation\n        field: deleteTweet\n        request: \"deleteTweet-request-mapping-template.vtl\"\n        response: \"deleteTweet-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: Mutation\n        field: reTweet\n        request: \"reTweet-request-mapping-template.vtl\"\n        response: \"reTweet-response-mapping-template.vtl\"\n      - dataSource: Tweets\n        type: Mutation\n        field: updateTweet\n        request: \"updateTweet-request-mapping-template.vtl\"\n        response: \"updateTweet-response-mapping-template.vtl\"\n      - dataSource: Users\n        type: Mutation\n        field: updateUserInfo\n        request: \"updateUserInfo-request-mapping-template.vtl\"\n        response: \"updateUserInfo-response-mapping-template.vtl\"\n    # schema: # defaults schema.graphql\n    dataSources:\n      - type: AMAZON_DYNAMODB\n        name: Users\n        description: 'Users table'\n        config:\n          tableName: { Ref: UserTable }\n          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }\n      - type: AMAZON_DYNAMODB\n        name: Tweets\n        description: 'Tweets table'\n        config:\n          tableName: { Ref: TweetsTable }\n          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }\n      - type: AMAZON_ELASTICSEARCH\n        name: ElasticSearch\n        description: 'ElasticSearch'\n        config:\n          endpoint: # required # \"https://{DOMAIN}.{REGION}.es.amazonaws.com\"\n          serviceRoleArn: { Fn::GetAtt: [AppSyncESServiceRole, Arn] }\n      - type: AWS_LAMBDA\n        name: Lambda_MeInfo\n        description: 'Lambda DataSource'\n        config: # Either of functionName or lambdaFunctionArn must tbe provided. When both are present, lambdaFunctionArn is used.\n          functionName: graphql\n          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } #\n          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }\n\n\nresources:\n  Resources:\n    UserTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        KeySchema:\n          -\n            AttributeName: handle\n            KeyType: HASH\n        AttributeDefinitions:\n          -\n            AttributeName: handle\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'Users'\n    TweetsTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        KeySchema:\n          -\n            AttributeName: tweet_id\n            KeyType: HASH\n        AttributeDefinitions:\n          -\n            AttributeName: tweet_id\n            AttributeType: S\n          -\n            AttributeName: handle\n            AttributeType: S\n          -\n            AttributeName: retweet_count\n            AttributeType: N\n          -\n            AttributeName: created_at\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'Tweets'\n        GlobalSecondaryIndexes:\n          -\n            IndexName: top-index\n            KeySchema:\n              -\n                AttributeName: handle\n                KeyType: HASH\n              -\n                AttributeName: retweet_count\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n          -\n            IndexName: tweet-index\n            KeySchema:\n              -\n                AttributeName: handle\n                KeyType: HASH\n              -\n                AttributeName: created_at\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n    AppSyncDynamoDBServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Dynamo-${self:custom.appSync.serviceRole}\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Dynamo-${self:custom.appSync.serviceRole}-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:Query\"\n                    - \"dynamodb:BatchWriteItem\"\n                    - \"dynamodb:GetItem\"\n                    - \"dynamodb:DeleteItem\"\n                    - \"dynamodb:PutItem\"\n                    - \"dynamodb:Scan\"\n                    - \"dynamodb:UpdateItem\"\n                  Resource:\n                    # TODO replace with { \"Ref\" : \"AWS::AccountNumber\" }\n                    - \"arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/Users\"\n                    - \"arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/Users/*\"\n                    - \"arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/Tweets\"\n                    - \"arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/Tweets/*\"\n    AppSyncLambdaServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Lambda-${self:custom.appSync.serviceRole}\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Lambda-${self:custom.appSync.serviceRole}-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"lambda:invokeFunction\"\n                  Resource:\n                    - \"arn:aws:lambda:us-east-1:${self:custom.accountId}:function:appsync-example-dev-graphql\"\n                    - \"arn:aws:lambda:us-east-1:${self:custom.accountId}:function:appsync-example-dev-graphql:*\"\n    AppSyncESServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"ElasticSearch-${self:custom.appSync.serviceRole}\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"ElasticSearch-${self:custom.appSync.serviceRole}-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"es:*\"\n                  Resource:\n                    - \"arn:aws:es:us-east-1:${self:custom.accountId}:domain/appsync/*\"\n"]},{"id":143019862,"files":["service: skill-backspace-fm\n\nplugins:\n  - serverless-plugin-warmup\n  - serverless-plugin-tracing\n\nprovider:\n  name: aws\n  region: ap-northeast-1\n  runtime: nodejs12.x\n  memorySize: 128\n  timeout: 30\n  environment:\n    PODCAST_FEED_CACHE_TABLE: backspace-fm-cache-${opt:stage, self:provider.stage}\n    PERSISTENT_STORE_TABLE: backspace-fm-user-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:CreateTable\"\n        - \"dynamodb:DeleteTable\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:GetItem\"\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - Fn::Join:\n          - \":\"\n          -\n            - arn:aws:lambda\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - function:${self:service}-${opt:stage, self:provider.stage}-*\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource: \"*\"\n\ncustom:\n  warmup:\n    memorySize: 128\n\npackage:\n  include:\n    - node_modules/\n\nfunctions:\n  main:\n    warmup: true\n    tracing: true\n    handler: index.handler\n    events:\n      - alexaSkill:\n          appId: ${env:SKILL_ID}\n          enabled: true\n  cacheUpdator:\n    handler: cacheUpdator.handler\n    timeout: 60\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":183067479,"files":["service: cloudwatch-alarm-to-slack\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'production'}\n  runtime: nodejs10.x\n  region: ${file(share/terraform/terraform.json):aws_region}\n  memorySize: 128\n  versionFunctions: false\n  role: ${file(share/terraform/terraform.json):aws_iam_role_arn}\n  environment:\n    SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}\n  tracing:\n    lambda: true\n\nplugins:\n  - serverless-plugin-include-dependencies\n\npackage:\n  exclude:\n    - node_modules/**\n    - .serverless/**\n    - serverless.yml\n    - .git/**\n    - .gitignore\n    - .idea/**\n    - '*.iml'\n    - test/**\n    - package.json\n    - .babelrc\n    - .eslintignore\n    - .eslintrc\n    - README.md\n    - src/**\n    - coverage/**\n    - share/**\n\nfunctions:\n  handler:\n    handler: build/index.handler\n    events:\n      - sns: ${file(share/terraform/terraform.json):aws_sns_topic_arn}\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Type: AWS::Logs::LogGroup\n      Properties:\n        RetentionInDays: 30\n"]},{"id":171305570,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-south-1\n # profile: developer-prateek\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  # hello: # a function\n  #   handler: handler.hello\n  #   events:\n  #     - http:\n  #        path: /\n  #        method: get\n  get:\n    handler: employee/get.get\n    events:\n      - http:\n         path: get-all\n         method: get\n         cors: true\n  create:\n    handler: employee/create.create\n    events:\n      - http:\n         path: add-entity\n         method: post\n         cors: true\n  delete:\n    handler: employee/delete.delete\n    events:\n      - http:\n         path: delete-entity/{id}\n         method: delete\n         cors: true\n  edit:\n    handler: employee/edit.edit\n    events:\n      - http:\n         path: edit-entity\n         method: post\n         cors: true        \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    \n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":232101530,"files":["service:\n  name: shared-api-base\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  stage: ${opt:stage,'dev'}\n  region: eu-north-1\n  runtime: nodejs12.x\n  memorySize: 512\n  timeout: 5\n  logRetentionInDays: 14\n  versionFunctions: false\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\npackage:\n  individually: true\n\nresources:\n  Resources:\n    SharedApiGW: # This name is what the actual API Gateway will be named\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: SharedApiGW\n\n  Outputs:\n    apiGatewayRestApiId:\n      Value:\n        Ref: SharedApiGW\n      Export:\n        Name: MyApiGateway-restApiId\n\n    apiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt:\n          - SharedApiGW\n          - RootResourceId\n      Export:\n        Name: MyApiGateway-rootResourceId\n","service:\n  name: shared-api-func\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  stage: ${opt:stage,'dev'}\n  region: eu-north-1\n  runtime: nodejs12.x\n  memorySize: 512\n  timeout: 5\n  logRetentionInDays: 14\n  versionFunctions: false\n  apiGateway:\n    restApiId: ${self:custom.apiIds.${self:provider.stage}.api}\n    restApiRootResourceId: ${self:custom.apiIds.${self:provider.stage}.resource}\n\ncustom:\n  apiIds:\n    dev:\n      api: abcdefghij # CHANGE THIS TO YOUR VALUE\n      resource: abcdefghij # CHANGE THIS TO YOUR VALUE\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\npackage:\n  individually: true\n\nfunctions:\n  sharedFunction:\n    handler: functions/sharedFunction.handler\n    events:\n      - http:\n          method: GET\n          path: sharedFunction\n"]},{"id":99282579,"files":["\n# see limits on Lambda@Edge http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-lambda-at-edge\n\nservice: Lambda-Edge-Prerendercloud\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n  memorySize: 128\n  role: LambdaEdgeRole\n\n# you can overwrite defaults here\n#  stage: dev\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n exclude:\n   - spec/**\n   - package-lock.json\n   - yarn.lock\n   - README.md\n   - deploy.js\n   - create-invalidation.js\n   - LICENSE\n   - Makefile\n\nfunctions:\n  viewerRequest:\n    handler: handler.viewerRequest\n    timeout: 5\n  originRequest:\n    handler: handler.originRequest\n    timeout: 30\n  originResponse:\n    handler: handler.originResponse\n    timeout: 5\n\n# I created a Lambda@Edge function via the wizard in Lambda Console\n# and then copied the role and pasted it here\nresources:\n  Resources:\n    LambdaEdgeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - edgelambda.amazonaws.com\n                - lambda.amazonaws.com\n            Action:\n            - sts:AssumeRole\n        Policies:\n          - PolicyName: LambdaEdgeExecutionRole\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \"arn:aws:logs:*:*:*\"\n"]},{"id":164877075,"files":["service: ws-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"execute-api:ManageConnections\"\n      Resource:\n        - \"arn:aws:execute-api:*:*:**/@connections/*\"\n\n  websocketsApiRouteSelectionExpression: $request.body.message\n\nfunctions:\n  handler:\n    handler: src/index.handler\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n      - websocket:\n          route: message\n      - websocket: $default\n"]},{"id":158434935,"files":["service: keyforge-decks\n\ncustom:\n  registeredDeckCountsTable: 'keyforge-decks-${self:provider.stage}-registereddeckcounts'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"RegisteredDeckCountsTable\", \"Arn\" ] }\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  deckCount:\n    handler: stats/decks.registeredCount\n    name: ${opt:stage, self:provider.stage}-keyforge-decks-count\n    description: Get the count of registered Keyforge Decks\n    memorySize: 128\n    timeout: 6\n    events:\n      - schedule: rate(5 minutes)\n    environment:\n        REGISTERED_DECKS_COUNT_TABLE: ${self:custom.registeredDeckCountsTable}\n\nresources:\n  Resources:\n    RegisteredDeckCountsTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: ${self:custom.registeredDeckCountsTable}\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n\nOutputs:\n  DeckCountsTableName:\n    Description: \"Table Name for registered deck counts\"\n    Value: !Ref RegisteredDeckCountsTable\n"]},{"id":197646545,"files":["service:\n  name: aws-lambda-nodejs-crud-api\n\nframeworkVersion: \">=1.45.1 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment:\n    DYNAMO_DB_TABLE: ${self:service.name}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TABLE}\n\nfunctions:\n  list:\n    handler: src/list.main\n    events:\n      - http:\n          path: orders\n          method: GET\n          cors: true\n    package:\n      include:\n        - src/list.js\n\n  create:\n    handler: src/create.main\n    events:\n      - http:\n          path: orders\n          method: POST\n          cors: true\n    package:\n      include:\n        - src/create.js\n        - src/validator.js\n        - node_modules/uuid/**\n\n  get:\n    handler: src/get.main\n    events:\n      - http:\n          path: orders/{id}\n          method: GET\n          cors: true\n    package:\n      include:\n        - src/get.js\n\n  update:\n    handler: src/update.main\n    events:\n      - http:\n          path: orders/{id}\n          method: PUT\n          cors: true\n    package:\n      include:\n        - src/update.js\n        - src/validator.js\n\n  delete:\n    handler: src/delete.main\n    events:\n      - http:\n          path: orders/{id}\n          method: DELETE\n          cors: true\n    package:\n      include:\n        - src/delete.js\n  \npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - src/**\n    - .git/**\n    - .serverless/**\n    - .idea/**\n    - .vs/**\n    - node_modules/**\n    - babel.config.js\n    - yarn.lock\n    - package.json\n    - README.md\n    - LICENSE\n  include:\n    - src/cors.js\n\nresources:\n  Resources:\n    OrdersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: ${self:provider.environment.DYNAMO_DB_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":197832368,"files":["service:\n  name: aws-lambda-nodejs-graphql\n\nframeworkVersion: \">=1.45.1 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment:\n    DYNAMO_DB_TABLE: ${self:service.name}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TABLE}\n\nfunctions:\n  query:\n    handler: src/handler.main\n    events:\n      - http:\n          path: query\n          method: GET\n          cors: true\n    package:\n      include:\n        - src/handler.js\n        - src/graphql.js\n        - src/dynamodb.js\n        - node_modules/uuid/**\n        - node_modules/graphql/**\n        - node_modules/iterall/**\n  \npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - src/**\n    - .git/**\n    - .serverless/**\n    - .idea/**\n    - .vs/**\n    - node_modules/**\n    - babel.config.js\n    - yarn.lock\n    - package.json\n    - README.md\n    - LICENSE\n\nresources:\n  Resources:\n    OrdersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: ${self:provider.environment.DYNAMO_DB_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":101783798,"files":["service: felix\nplugins:\n  - serverless-plugin-common-excludes\npackage:\n  exclude:\n    - test/**\n    - reports/**\n    - .gitlab/**\n    - node_modules/.bin/**\n    - node_modules/**/tests/**\n    - node_modules/**/tst/**\n    - node_modules/**/spec/**\n  excludeDevDependencies: true\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prd\n  region: us-east-1\n  custom:\n    defaultAdmin: root\n    kmsAdminName: ${env:AWS_KMS_ADMIN_ROLE, self:provider.custom.defaultAdmin}\n  iamRoleStatements:\n     - Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n     - Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::\"\n             - \"Ref\" : \"ServerlessDeploymentBucket\"\n     - Effect: \"Allow\"\n       Action:\n         - \"iam:CreateAccessKey\"\n         - \"iam:UpdateAccessKey\"\n         - \"iam:DeleteAccessKey\"\n         - \"iam:ListUsers\"\n         - \"iam:GetUser\"\n         - \"iam:ListAccessKeys\"\n         - \"iam:GetAccessKeyLastUsed\"\n       Resource: { \"Fn::Join\" : [\"\", [ \"arn:aws:iam:\", \":\", { Ref: \"AWS::AccountId\" }, \":user/service/*\" ] ] }\n     - Effect: \"Allow\"\n       Action:\n         - \"ssm:DescribeParameters\"\n       Resource: { \"Fn::Join\" : [\"\", [ \"arn:aws:ssm\", \":\", { Ref: \"AWS::Region\" }, \":\", { Ref: \"AWS::AccountId\" }, \":parameter/*\" ] ] }\n     - Effect: \"Allow\"\n       Action:\n         - \"ssm:GetParameters\"\n         - \"ssm:GetParametersByPath\"\n       Resource: { \"Fn::Join\" : [\"\", [ \"arn:aws:ssm\", \":\", { Ref: \"AWS::Region\" }, \":\", { Ref: \"AWS::AccountId\" }, \":parameter/felix/*\" ] ] }\n     - Effect: \"Allow\"\n       Action:\n         - \"kms:decrypt\"\n       Resource: { \"Fn::GetAtt\": [\"felixKey\", \"Arn\"] }\n     - Effect: \"Allow\"\n       Action:\n         - \"sns:Publish\"\n       Resource: { \"Ref\": \"reportsTopic\" }\n\nfunctions:\n  rotate:\n    handler: handler.rotate\n    timeout: 30\n    events:\n      - schedule: cron(0 8 1 * ? *)\n\nresources:\n  Resources:\n    reportsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: Felix\n        TopicName: FelixReports\n    felixKeyAlias:\n      Type: AWS::KMS::Alias\n      Properties:\n        AliasName: 'alias/felix/settings'\n        TargetKeyId: { Ref: \"felixKey\" }\n    felixKey:\n      Type: AWS::KMS::Key\n      Properties:\n        Description: For encrypting SSM Parameters used by Felix\n        Enabled: true\n        EnableKeyRotation: true\n        KeyPolicy:\n          Version: \"2012-10-17\"\n          Id: 'felix-key-policy'\n          Statement:\n            -\n              Sid: \"allow-account-owner-admin\"\n              Effect: Allow\n              Principal:\n                AWS: { \"Fn::Join\" : [\"\", [ \"arn:aws:iam:\", \":\", { Ref: \"AWS::AccountId\" }, \":root\" ] ] }\n              Action:\n                - \"kms:*\"\n              Resource: \"*\"\n            -\n              Sid: \"allow-admin-access\"\n              Effect: Allow\n              Principal:\n                AWS: { \"Fn::Join\" : [\"\", [ \"arn:aws:iam:\", \":\", { Ref: \"AWS::AccountId\" }, \":${self:provider.custom.kmsAdminName}\" ] ] }\n              Action:\n                - \"kms:Create*\"\n                - \"kms:Describe*\"\n                - \"kms:Enable*\"\n                - \"kms:List*\"\n                - \"kms:Put*\"\n                - \"kms:Update*\"\n                - \"kms:Revoke*\"\n                - \"kms:Disable*\"\n                - \"kms:Get*\"\n                - \"kms:Delete*\"\n                - \"kms:TagResource\"\n                - \"kms:UntagResource\"\n                - \"kms:ScheduleKeyDeletion\"\n                - \"kms:CancelKeyDeletion\"\n              Resource: \"*\"\n            -\n              Sid: \"allow-ssm-use\"\n              Effect: Allow\n              Principal:\n                AWS: \"*\"\n              Action:\n                - kms:Encrypt\n                - kms:Decrypt\n                - kms:ReEncrypt\n                - kms:GenerateDataKey\n                - kms:DescribeKey\n              Resource: \"*\"\n              Condition:\n                StringEquals:\n                  \"kms:CallerAccount\": { Ref: \"AWS::AccountId\" }\n                  \"kms:ViaService\": { \"Fn::Join\" : [\"\", [ \"ssm.\", { Ref: \"AWS::Region\" }, \".amazonaws.com\" ]]}\n"]},{"id":226065326,"files":["service: gbkel-thumb\n\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - 'image/jpeg'\n      - 'text/html'\n  \nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: thumb\n  region: us-west-2\n  memorySize: 1024\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - s3:GetObject\n      Resource:\n        - \"arn:aws:s3:::*\"\n\nfunctions:\n  thumb:\n    handler: thumb.handle\n    environment:\n      S3_BUCKET: raw.guilherr.me\n      S3_REGION: us-west-2\n      SENTRY_DSN: https://6f9c84a039644b67ae20e8f9ebfab8dd@sentry.io/1857374\n    events:\n      - http:\n          method: get\n          cors: true\n          path: /{proxy+}"]},{"id":228700429,"files":["service: sync-fastly-ips\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: ${file(./serverless-inputs.yml):aws_region}\n\n  # you can overwrite defaults here\n  #  stage: dev\n\n  # you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeSecurityGroups\"\n        - \"ec2:RevokeSecurityGroupIngress\"\n        - \"ec2:AuthorizeSecurityGroupEgress\"\n        - \"ec2:AuthorizeSecurityGroupIngress\"\n        - \"ec2:UpdateSecurityGroupRuleDescriptionsEgress\"\n        - \"ec2:CreateSecurityGroup\"\n        - \"ec2:RevokeSecurityGroupEgress\"\n        - \"ec2:UpdateSecurityGroupRuleDescriptionsIngress\"\n      Resource: \"*\"\n\nfunctions:\n  sync:\n    handler: handler.sync\n    events:\n      - schedule: ${file(./serverless-inputs.yml):schedule}\n    environment:\n      REGION: ${file(./serverless-inputs.yml):aws_region}\n      VPC_ID: ${file(./serverless-inputs.yml):vpc_id}\n","schedule: rate(1 hour)\naws_region: us-west-2\nvpc_id: vpc-123abc\n"]},{"id":172625253,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: text-members # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\n# you can overwrite defaults here\n#  stage: dev\n\nfunctions:\n  text-members:\n    handler: lambdas/handlers/textMembers.handler\n    timeout: 5\n    events:\n      - http:\n          path: members/text\n          method: post\n          cors: true\n    environment:\n      AUTH_TOKEN: ${env:AUTH_TOKEN}\n\n  update-members:\n    handler: lambdas/handlers/updateMembers.handler\n    timeout: 30\n    environment:\n      CHOIR_GENIUS_USERNAME: ${env:CHOIR_GENIUS_USERNAME}\n      CHOIR_GENIUS_PASSWORD: ${env:CHOIR_GENIUS_PASSWORD}\n    events:\n        - schedule: rate(1 day)\n\nresources:\n  Resources:\n    MembersTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-members\n    MenTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-men\n    WomenTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-women\n    BoardTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-board\n    CommunicationsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-communications\n    BarlockTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: hca-text-barlock\n"]},{"id":109388925,"files":["service: rct\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: production\n  region: eu-central-1\n  memorySize: 128\n  timeout: 10\n  versionFunctions: false\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n  tickersContainerBucketName: ${opt:host-s3-bucket-name}\n  nodeEnv:\n    Fn::If: [IsProductionStage, 'production', 'development']\n\nfunctions:\n  tickersGenerator:\n    handler: tickers-generator.Handler\n    description: Random Capital Tickers generator.\n    environment:\n      NODE_ENV: ${self:custom.nodeEnv}\n      HOST_S3_BUCKET_NAME: ${self:custom.tickersContainerBucketName}\n    events:\n      - schedule: rate(7 days)\n\nresources:\n  Conditions:\n    IsProductionStage:\n      Fn::Equals:\n        - ${self:custom.myStage}\n        - 'production'\n  Resources:\n    TickersBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.tickersContainerBucketName}\n        WebsiteConfiguration:\n          IndexDocument: 'tickers.html'\n          ErrorDocument: 'tickers.html'\n    TickersBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: TickersBucket\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action: 's3:GetObject'\n              Resource:\n                Fn::Join:\n                  - ''\n                  -\n                    - 'arn:aws:s3:::'\n                    - Ref: TickersBucket\n                    - '/*'\n              Principal: '*'\n            - Effect: Allow\n              Action: 's3:PutObject'\n              Resource:\n                Fn::Join:\n                  - ''\n                  -\n                    - 'arn:aws:s3:::'\n                    - Ref: TickersBucket\n                    - '/*'\n              Principal:\n                AWS:\n                  - Fn::GetAtt: [IamRoleLambdaExecution, Arn]\n"]},{"id":221713905,"files":["service: auth\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-reviews\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-central-1\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: ${self:custom.stage}-UserPool\n        UsernameAttributes:\n          - email\n        AutoVerifiedAttributes:\n          - email\n    \n    CognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: ${self:custom.stage}-UserPoolClient\n        UserPoolId:\n          Ref: CognitoUserPool\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n        GenerateSecret: false\n\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: CognitoUserPool\n      Export:\n        Name: ${self:custom.stage}-UserPoolId\n    \n    UserPoolArn:\n      Value:\n        'Fn::GetAtt': [CognitoUserPool, Arn]\n      Export:\n        Name: ${self:custom.stage}-UserPoolArn\n    \n    UserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClient\n      Export:\n        Name: ${self:custom.stage}-UserPoolClientId\n","service: client-review-database\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-reviews\n\nprovider:\n  name: aws\n  stage: dev\n  region: eu-central-1\n\nresources:\n  Resources:\n    ReviewsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n  Outputs:\n    ReviewsTableArn:\n      Value:\n         Fn::GetAtt:\n          - ReviewsTable\n          - Arn\n      Export:\n        Name: ${self:custom.stage}-ReviewsTableArn\n    ReviewsTableStreamArn:\n      Value:\n         Fn::GetAtt:\n          - ReviewsTable\n          - StreamArn\n      Export:\n        Name: ${self:custom.stage}-ReviewsTableStreamArn","service: email-service\n\nplugins:\n  - serverless-bundle\n  - serverless-offline\n\ncustom: ${file(../../serverless.common.yml):custom}\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-central-1\n\n  # best practice: roles per function\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:ListStreams\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-ReviewsTableArn\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \n        - \"*\"\n      Condition:\n        StringEquals:\n          ses:FromAddress:\n            - 'mldnmilosevic@gmail.com'\n\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n\n# best practice: exclude/include per function\nfunctions:\n  notify:\n    handler: handler.notify\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 1\n          startingPosition: LATEST\n          arn: \n            'Fn::ImportValue': ${self:custom.stage}-ReviewsTableStreamArn\n\n  contact:\n    handler: handler.contact\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true\n          authorizers: aws_iam","service: reviews-api\n\nplugins:\n  - serverless-bundle\n  - serverless-offline\n  - serverless-mocha-plugin\n\ncustom: ${file(../../serverless.common.yml):custom}\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-central-1\n\n  environment:\n    stage: ${self:custom.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:Scan\n        - dynamodb:PutItem\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-ReviewsTableArn\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n      Resource:\n        - Fn::Join: [\"/\", [Fn::ImportValue: \"${self:custom.stage}-ReviewsBucketArn\", \"*\"]]\n\nfunctions:\n  create:\n    handler: handlers/create/index.handler\n    events:\n      - http:\n          path: reviews\n          method: post\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  list:\n    handler: get.getAll\n    events:\n      - http:\n          path: reviews\n          method: get\n          cors: true\n          authorizers: aws_iam\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n  - ${file(resources/cognito-authorizer.yml)}\n\n  - Outputs:\n      ApiGatewayRestApiId:\n        Value:\n          Ref: ApiGatewayRestApi\n        Export:\n          Name: ${self:custom.stage}-ApiGatewayRestApiId\n      \n      ApiGatewayRestApiRootResourceId:\n        Value:\n          Fn::GetAtt:\n            - ApiGatewayRestApi\n            - RootResourceId\n        Export:\n          Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId","service: client-review-storage\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-reviews\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-central-1\n\nresources:\n  Resources:\n    ReviewsBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.stage}-reviews-bucket\n  Outputs:\n     ReviewsBucketArn:\n        Description: \"S3 Reviews Bucket ARN\"\n        Value:\n          Fn::GetAtt:\n            - ReviewsBucket\n            - Arn\n        Export:\n          Name: ${self:custom.stage}-ReviewsBucketArn","custom:\n  stage: ${opt:stage, self:provider.stage}\n"]},{"id":168779830,"files":["frameworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  mobilizeAmerica:\n    dev: ${ssm:MOBILIZE_AMERICA_DEV}\n    staging: ${ssm:MOBILIZE_AMERICA_PROD}\n    prod: ${ssm:MOBILIZE_AMERICA_PROD}\n  mongo:\n    dev: ${ssm:TOOLS_SHARED_MONGO_DEV~true}\n    staging: ${ssm:TOOLS_SHARED_MONGO_PROD~true}\n    prod: ${ssm:TOOLS_SHARED_MONGO_PROD~true}\n  customDomain:\n    domainName: api.elizabethwarren.codes\n    basePath: ${self:custom.stage}-events-v2\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  serverless-offline:\n    host: 0.0.0.0\n    port: 3001\n  logForwarding:\n    destinationARN: ${cf:lambda-papertrail-prod.ForwarderLambdaArn}\n\nservice: events-api-v2\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    MONGODB_URI: ${self:custom.mongo.${self:custom.stage}}\n    MOBILIZE_AMERICA_API_KEY: ${self:custom.mobilizeAmerica.${self:custom.stage}}\n\nplugins:\n  - serverless-domain-manager\n  - serverless-offline\n  - serverless-log-forwarding\n\nfunctions:\n  api:\n    handler: src/handler.router\n    events:\n      - http:\n          path: /\n          method: any\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: any\n          cors: true\n  importEvents:\n    timeout: 600  # Timeout after 10 minutes\n    handler: src/handler.importEvents\n    events:\n      - schedule: rate(5 minutes)\n\npackage:\n  exclude:\n    - data/**\n"]},{"id":216897033,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: alexa-skills\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    memorySize: 128\n    timeout: 3\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n        - alexaSkill: amzn1.ask.skill.f484368c-79b4-4df0-9bda-56c27119d677\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":219826047,"files":["service: infrastructure-stop-start-instances\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${env:REGION}\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:Start*\n        - ec2:Stop*\n      Resource: \"*\"\n\nfunctions:\n  startOrStop:\n    name: ${self:service}_${self:provider.stage}\n    handler: src/handler.startOrStop\n    description: Function to stop or start instances EC2\n    timeout: 10\n    memorySize: 256\n    events:\n      - schedule: # start\n          name: schedule_start-instances\n          rate: cron(00 11 * * MON-FRI *) # 08h timezone brazil\n          enabled: true\n          input:\n            start: true\n      - schedule: # stop\n          name: schedule_stop-instances\n          rate: cron(00 22 * * ? *) # 19h timezone brazil\n          enabled: true\n          input:\n            start: false\n    environment:\n      INSTANCE_IDS: ${env:INSTANCE_IDS}\n\nresources:\n  Resources:\n    StartOrStopLogGroup:\n      Properties:\n        RetentionInDays: 7\n\npackage:\n excludeDevDependencies: true\n exclude:\n   - .git/**\n   - .vscode/**\n   - deploy.sh\n   - README.md"]},{"id":218933452,"files":["service: ddns-function\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  private: true\n\nfunctions:\n  DDNSUpdate:\n    handler: handler.DDNSUpdate\n    events:\n      - http:\n          path: /{domain}\n          method: get\n          private: ${self:custom.private}\n\npackage:\n  exclude:\n    - README.md\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  stage: production\n  region: eu-west-1\n  runtime: nodejs10.x\n\n  environment:\n    HOSTED_ZONE_ID: Z1Q4UPOMVSH8DJ\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"route53:ChangeResourceRecordSets\"\n      Resource: \"arn:aws:route53:::hostedzone/${self:provider.environment.HOSTED_ZONE_ID}\"\n\n  apiKeys:\n    - ${self:service}-${self:custom.stage}-api-key\n"]},{"id":164735694,"files":["service: middy-reroute-demo\n\nframeworkVersion: \">=1.9.0 <2.0.0\"\n\ncustom:\n  vars: ${file(vars.yml):${opt:stage, self:provider.stage}, file(vars.yml):dev}\n  scriptHooks:\n    after:deploy:deploy:\n      - sh ./scripts/deploy_static_files.sh ${self:custom.vars.STACKNAME} ${opt:aws-profile}\n    before:remove:remove:\n      - sh ./scripts/remove_static_files.sh ${self:custom.vars.STACKNAME} ${opt:aws-profile}\n  lambdaAtEdge:\n    retain: true\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs10.x\n  stackTags:\n    STAGE: ${self:custom.vars.STAGE}\n    SERVICE: ${self:service}\n\nfunctions:\n  originrequest:\n    handler: functions/reroute/index.handler\n    memorySize: 512\n    timeout: 5\n    role: RerouteRole\n    lambdaAtEdge:\n      - distribution: WebsiteDistribution\n        eventType: origin-request\n    package:\n      include:\n        - functions/reroute/**/*\n\nresources:\n  Description: middy-reroute-demo\n  Conditions:\n    isProd: { \"Fn::Equals\": [\"${self:custom.vars.STAGE_FLAG}\", \"prod\"] }\n    isDev: { \"Fn::Equals\": [\"${self:custom.vars.STAGE_FLAG}\", \"dev\"] }\n  Resources:\n    CloudfrontOAI:\n      Type: \"AWS::CloudFront::CloudFrontOriginAccessIdentity\"\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: Created for ${self:custom.vars.STACKNAME}\n    DefaultBucket:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: Private\n        BucketEncryption:\n          ServerSideEncryptionConfiguration:\n            - ServerSideEncryptionByDefault:\n                SSEAlgorithm: AES256\n        Tags: ${self:custom.vars.TAGS}\n    BucketOne:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: Private\n        BucketEncryption:\n          ServerSideEncryptionConfiguration:\n            - ServerSideEncryptionByDefault:\n                SSEAlgorithm: AES256\n        Tags: ${self:custom.vars.TAGS}\n    BucketTwo:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: Private\n        BucketEncryption:\n          ServerSideEncryptionConfiguration:\n            - ServerSideEncryptionByDefault:\n                SSEAlgorithm: AES256\n        Tags: ${self:custom.vars.TAGS}\n    RerouteRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        RoleName: ${self:custom.vars.STACKNAME}-reroute\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n                  - edgelambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:custom.vars.STACKNAME}-reroute\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:DescribeLogStreams\n                  Resource: \"arn:aws:logs:*:*:*\"\n                - Effect: Allow\n                  Action:\n                    - s3:GetObject\n                    - s3:ListBucket\n                  Resource:\n                    - {\n                        \"Fn::Join\":\n                          [\"\", [\"arn:aws:s3:::\", { Ref: DefaultBucket }]],\n                      }\n                    - {\n                        \"Fn::Join\":\n                          [\"\", [\"arn:aws:s3:::\", { Ref: DefaultBucket }, \"/*\"]],\n                      }\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetItem\n                    - dynamodb:Query\n                    - dynamodb:DescribeStream\n                    - dynamodb:GetRecords\n                    - dynamodb:GetShardIterator\n                    - dynamodb:ListStreams\n                  Resource:\n                    - \"Fn::Join\":\n                        - \"\"\n                        - - \"arn:aws:dynamodb:\"\n                          - { Ref: \"AWS::Region\" }\n                          - \":\"\n                          - { Ref: \"AWS::AccountId\" }\n                          - \":table/\"\n                          - ${self:custom.vars.TABLENAMEFORMAT}\n                    - \"Fn::Join\":\n                        - \"\"\n                        - - \"arn:aws:dynamodb:\"\n                          - { Ref: \"AWS::Region\" }\n                          - \":\"\n                          - { Ref: \"AWS::AccountId\" }\n                          - \":table/\"\n                          - ${self:custom.vars.TABLENAMEFORMAT}\n                          - \"/index/*\"\n    BucketPolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      Properties:\n        Bucket: { Ref: DefaultBucket }\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                CanonicalUser:\n                  { \"Fn::GetAtt\": [CloudfrontOAI, S3CanonicalUserId] }\n              Action:\n                - s3:ListBucket\n                - s3:GetObject\n              Resource:\n                - {\n                    \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", { Ref: DefaultBucket }]],\n                  }\n                - {\n                    \"Fn::Join\":\n                      [\"\", [\"arn:aws:s3:::\", { Ref: DefaultBucket }, \"/*\"]],\n                  }\n    BucketOnePolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      Properties:\n        Bucket: { Ref: BucketOne }\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - { \"Fn::GetAtt\": [RerouteRole, Arn] }\n                CanonicalUser:\n                  { \"Fn::GetAtt\": [CloudfrontOAI, S3CanonicalUserId] }\n              Action:\n                - s3:ListBucket\n                - s3:GetObject\n              Resource:\n                - { \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", { Ref: BucketOne }]] }\n                - {\n                    \"Fn::Join\":\n                      [\"\", [\"arn:aws:s3:::\", { Ref: BucketOne }, \"/*\"]],\n                  }\n    BucketTwoPolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      Properties:\n        Bucket: { Ref: BucketTwo }\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - { \"Fn::GetAtt\": [RerouteRole, Arn] }\n                CanonicalUser:\n                  { \"Fn::GetAtt\": [CloudfrontOAI, S3CanonicalUserId] }\n              Action:\n                - s3:ListBucket\n                - s3:GetObject\n              Resource:\n                - { \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", { Ref: BucketTwo }]] }\n                - {\n                    \"Fn::Join\":\n                      [\"\", [\"arn:aws:s3:::\", { Ref: BucketTwo }, \"/*\"]],\n                  }\n    WebsiteDistribution:\n      Type: \"AWS::CloudFront::Distribution\"\n      Properties:\n        DistributionConfig:\n          Aliases: ${self:custom.vars.ALIASES}\n          ViewerCertificate: ${self:custom.vars.VIEWER_CERT}\n          Enabled: true\n          HttpVersion: http2\n          PriceClass: PriceClass_100\n          IPV6Enabled: true\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            CachedMethods:\n              - GET\n              - HEAD\n            Compress: true\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: none\n              Headers:\n                - Host\n                - CloudFront-Viewer-Country\n                - Accept-Language\n            DefaultTTL: 0\n            MaxTTL: 0\n            MinTTL: 0\n            # PathPattern: String\n            # SmoothStreaming: Boolean\n            TargetOriginId: WebsiteBucketOrigin\n            # TrustedSigners:\n            #   - String\n            ViewerProtocolPolicy: redirect-to-https\n          Origins:\n            - DomainName: { \"Fn::GetAtt\": [DefaultBucket, DomainName] }\n              Id: WebsiteBucketOrigin\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  {\n                    \"Fn::Join\":\n                      [\n                        \"\",\n                        [\n                          \"origin-access-identity/cloudfront/\",\n                          { Ref: CloudfrontOAI },\n                        ],\n                      ],\n                  }\n        Tags: ${self:custom.vars.TAGS}\n    DnsRecords:\n      Condition: isProd\n      Type: \"AWS::Route53::RecordSetGroup\"\n      Properties:\n        HostedZoneName: danvanbrunt.com.\n        Comment: \"DNS records associated with ${self:custom.vars.STACKNAME}\"\n        RecordSets:\n          - Name: reroute.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n          - Name: red.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n          - Name: green.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n          - Name: blue.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n          - Name: origin-one.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n          - Name: origin-two.danvanbrunt.com\n            Type: A\n            AliasTarget:\n              DNSName: { \"Fn::GetAtt\": WebsiteDistribution.DomainName }\n              HostedZoneId: Z2FDTNDATAQYW2\n    SSLCert:\n      Condition: isProd\n      Type: \"AWS::CertificateManager::Certificate\"\n      Properties:\n        DomainName: \"reroute.danvanbrunt.com\"\n        SubjectAlternativeNames:\n          - red.danvanbrunt.com\n          - green.danvanbrunt.com\n          - blue.danvanbrunt.com\n          - origin-one.danvanbrunt.com\n          - origin-two.danvanbrunt.com\n    DomainMapTBL:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:custom.vars.STACKNAME}-domainmap\n        AttributeDefinitions:\n          - AttributeName: Host\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Host\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 300\n          WriteCapacityUnits: 5\n\n  Outputs:\n    SiteUrl:\n      Value:\n        {\n          \"Fn::Join\":\n            [\n              \"\",\n              [\"https://\", { \"Fn::GetAtt\": [WebsiteDistribution, DomainName] }],\n            ],\n        }\n      Description: URL of the website\n    WebsiteBucket:\n      Value: { Ref: DefaultBucket }\n    BucketOne:\n      Value: { Ref: BucketOne }\n    BucketTwo:\n      Value: { Ref: BucketTwo }\n    DistributionId:\n      Value: { Ref: WebsiteDistribution }\n      Description: ID of the Website Distribution\n\nplugins:\n  - serverless-scriptable-plugin\n  - serverless-plugin-cloudfront-lambda-edge\n  - serverless-print-dots\n\npackage:\n  individually: true\n  exclude:\n    - \"**/*\"\n"]}]