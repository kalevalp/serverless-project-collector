[{"id":115562713,"files":["service:\n  name: ${opt:name, file(./config.yml):SERVICE_NAME, 'mailchimp-service'}\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, file(./config.yml):STAGE, 'dev'}\n  region: ${opt:region, file(./config.yml):REGION, 'ca-central-1'}\n  memorySize: 128\n\n  environment:\n    SLACK_HOOKS_URL: ${file(./config.yml):SLACK_HOOKS_URL}\n    MAILCHIMP_API_KEY: ${file(./config.yml):MAILCHIMP_API_KEY}\n    MAILCHIMP_LIST_ID: ${file(./config.yml):MAILCHIMP_LIST_ID}\n\nfunctions:\n  # sls webpack invoke -f subscribe\n  subscribe:\n    handler: handler.subscribe\n    events:\n      - http:\n          method: post\n          path: subscribe\n          resp: json\n          cors: true\n"]},{"id":199417248,"files":["service: image-search-bot\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  stage: production\n  region: ap-northeast-2\n  memorySize: 128\n\nplugins:\n  - serverless-dotenv-plugin\n\nfunctions:\n  hook:\n    handler: lib/serverless.handler\n    events:\n      - http:\n          path: hook\n          method: post\n"]},{"id":199379740,"files":["service: lambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  geo-list:\n    handler: handler.list\n    events:\n      - http:\n          path: geo\n          method: get\n          cors: true\n\n  geo-create:\n    handler: handler.create\n    events:\n      - http:\n          path: geo\n          method: post\n          cors: true\n\n  geo-detail:\n    handler: handler.detail\n    events:\n      - http:\n          path: geo/{key}\n          method: get\n          cors: true"]},{"id":189861267,"files":["service: serverless-framework-javascript # NOTE: update this with your service name\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.16\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n  environment:\n    NODE_ENV: ${opt:stage, 'dev'}\n\nfunctions:\n  ping:\n    handler: functions/ping.handler\n    events:\n      - http:\n          path: /\n          method: get\n\ncustom:\n  serverless-offline-sns:\n    port: 4002 # a free port for the sns server to run on\n    debug: false\n    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline\n    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint\n    # accountId: 123456789012 # Optional\n\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sns\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":198515222,"files":["service: sls-week\n\nplugins:\n  - serverless-webpack\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - kinesis:PutRecord\n        - kinesis:GetRecords\n        - kinesis:GetShardIterator\n        - kinesis:DescribeStream\n        - kinesis:ListStreams\n      Resource:\n        \"arn:aws:kinesis:*:*:stream/sls-week-stream\"\n\nfunctions:\n  producer:\n    handler: producer.main\n    events:\n      - http:\n          path: produce/\n          method: post\n\n  consumer:\n    handler: consumer.main\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - KinesisStream\n              - Arn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: sls-week-stream\n        ShardCount: 1\n"]},{"id":150789576,"files":["service: tic-tac-toe-api\n\ncustom:\n  resourcePrefix: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev\n  region: us-west-2\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action: \"s3:*\"\n     Resource: \"arn:aws:s3:::${self:custom.resourcePrefix}/*\"\n   - Effect: \"Allow\"\n     Action: \"sqs:CreateQueue\"\n     # allow the service to create queues with names like \"tic-tac-toe-api-dev*\"\n     Resource: \"arn:aws:sqs:*:*:${self:custom.resourcePrefix}*\"\n   - Effect: \"Allow\"\n     Action: \"sns:Publish\"\n     Resource: \"arn:aws:sns:*:*:*\"\n   - Effect: \"Allow\"\n     Action: \"apigateway:GET\"\n     Resource: \"arn:aws:apigateway:*:*:**/apis\"\n  environment:\n    RESOURCE_PREFIX: ${self:custom.resourcePrefix}\n    INCOMING_COMMANDS_TOPIC_ARN:\n      Ref: IncomingCommandsTopic\n    EVENTS_TOPIC_ARN:\n      Ref: EventsTopic\n    # WEBSOCKETS_API_NAME is really only needed to allow EventDispatcher to find\n    # the websockets API endpoint URL. Would be great to discover something more\n    # standardized!\n    WEBSOCKETS_API_NAME: ${self:provider.stage}-${self:service}-websockets\n\n\nfunctions:\n  Sessions:\n    handler: src/framework/session-manager.handler\n    events:\n      - websocket: $connect\n      - websocket: $disconnect\n  CommandReceiver:\n    handler: src/framework/command-receiver.handler\n    events:\n      - websocket: $default\n  CommandProcessor:\n    handler: src/tic-tac-toe-command-processor.handler\n    events:\n      - sqs:\n         arn:\n           \"Fn::GetAtt\": [ CommandDispatchQueue, Arn ]\n  EventDispatch:\n    handler: src/framework/event-dispatcher.handler\n    events:\n      - sqs:\n         arn:\n           \"Fn::GetAtt\": [ EventDispatchQueue, Arn ]\n\n\nresources:\n  Resources:\n    AppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: Private\n        BucketName: ${self:custom.resourcePrefix}\n        VersioningConfiguration:\n          Status: Enabled\n    IncomingCommandsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.resourcePrefix}-incoming-commands\n        Subscription:\n        - Endpoint:\n            \"Fn::GetAtt\": [ CommandDispatchQueue, Arn ]\n          Protocol: sqs\n    EventsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.resourcePrefix}-events\n        Subscription:\n        - Endpoint:\n            \"Fn::GetAtt\": [ EventDispatchQueue, Arn ]\n          Protocol: sqs\n    CommandDispatchQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.resourcePrefix}-command-dispatch\n        ReceiveMessageWaitTimeSeconds: 20\n    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-sqs-policy\n    # and https://github.com/neillturner/cfndsl_examples/blob/master/IAM/IAM_Policies_SNS_Publish_To_SQS.yml\n    CommandDispatchQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues:\n        - Ref: CommandDispatchQueue\n        PolicyDocument:\n          Id: CommandDispatchQueuePolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: Allow-IncomingCommandsTopic-Send-To-CommandDispatchQueue\n            Effect: Allow\n            Principal:\n              AWS: '*'\n            Action:\n            - sqs:SendMessage\n            Resource:\n              \"Fn::GetAtt\": [CommandDispatchQueue, Arn]\n            Condition:\n              ArnEquals:\n                aws:SourceArn:\n                  Ref: IncomingCommandsTopic\n    EventDispatchQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.resourcePrefix}-event-dispatch\n        ReceiveMessageWaitTimeSeconds: 20\n    EventDispatchQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues:\n        - Ref: EventDispatchQueue\n        PolicyDocument:\n          Id: EventDispatchQueuePolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: Allow-OutgoingEventsTopic-Send-To-EventDispatchQueue\n            Effect: Allow\n            Principal:\n              AWS: '*'\n            Action:\n            - sqs:SendMessage\n            Resource:\n              \"Fn::GetAtt\": [EventDispatchQueue, Arn]\n            Condition:\n              ArnEquals:\n                aws:SourceArn:\n                  Ref: EventsTopic\n"]},{"id":198414420,"files":["list:\n  handler: backend/authorCrud.list\n  events:\n    - http: get /authors\n\nget:\n  handler: backend/authorCrud.get\n  events:\n    - http:\n        path: authors/{id}\n        method: get\n\ncreate:\n  handler: backend/authorCrud.create\n  events:\n    - http: post /authors\n\n","service: authors-demo\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nfunctions:\n  - '${file(backend/serverless.yml)}'\n\ncustom:\n  dynamodb:\n    # If you only want to use DynamoDB Local in some stages, declare them here\n    stages:\n      - dev\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: backend/offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":190211511,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: Sample-MobileFlows-Serverless-Connector # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# List of plugins to be used\nplugins:\n  - serverless-offline\n\ncustom:\n    authorizer:\n        arn: arn:aws:lambda:us-east-1:485793342887:function:SampleJwtAuthorizer\n        resultTtlInSeconds: 0\n        identitySource: method.request.header.Authorization\n        identityValidationExpression: '.*'\n\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n  stage: dev\n\n\n  apiGateway:\n    binaryMediaTypes:\n      - image/*\n\n  \nfunctions:\n  app:\n    handler: app.server \n    events: \n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /images/{any+}\n          method: GET\n          cors: true   \n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n          authorizer: ${self:custom.authorizer}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n# functions:\n#   discover:\n#     handler: connector.discover\n#     events:\n#       - http:\n#           path: connector/discovery\n#           method: get\n#           cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":185439844,"files":["service: image-processor\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1024\n  timeout: 30\n  stage: dev\n  region: us-east-1\n  role: BucketAccess\n  apiName: ${self:service}\n  endpointType: regional\n  environment:\n    BUCKET: ${self:service}-assets\n    SLS_DEBUG: \"*\"\n    RESIZE_LAMBDA: ${self:service}-resizeImage\n  deploymentBucket:\n    name: ${self:provider.environment.BUCKET}\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  \nfunctions:\n  getImage:\n    name: ${self:service}-getImage\n    handler: src/getImage.handler\n    events:\n      - http:\n          method: get\n          path: /{proxy+}\n    package:\n      include:\n        - src/getImage.js\n  resizeImage:\n    name: ${self:provider.environment.RESIZE_LAMBDA}\n    handler: src/resizeImage.handler\n    package:\n      include:\n        - src/resizeImage.js\n  uploadImage:\n    name: ${self:service}-uploadImage\n    handler: src/uploadImage.handler\n    events:\n      - http:\n          method: post\n          path: /upload\n    package:\n      include:\n        - src/uploadImage.js\n\nresources:\n  Resources:\n    BucketAccess:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:provider.environment.BUCKET}-S3-BUCKET-ACCESS-${self:service}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:provider.environment.BUCKET}-access-bucket-${self:service}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.BUCKET}/*\"]]\n                - Effect: Allow\n                  Action:\n                    - \"lambda:InvokeFunction\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:lambda:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":function:${self:provider.environment.RESIZE_LAMBDA}\"]]"]},{"id":184317810,"files":["\nservice: hds-payerConfigVersion\n\nframeworkVersion: \">=1.41.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::560395879688:role/Hds-Lambda\n# cfnRole: arn:aws:iam::560395879688:role/Hds-Developer\n  stackName: hds-${self:provider.stage}-${self:service}\n  deploymentBucket: \n    name: hds-chc-dev-medicaltransactions\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      Usage: DevOps\n\n# you can overwrite defaults here\n  stage: ${opt:stage, 'dev'} \n  region: ${opt:region, 'us-east-1'}\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"hds-chc-dev-medicaltransactions\" ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"hds-chc-dev-medicaltransactions\"\n            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DEBUG: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  payerConfigVersionLambda:\n    handler: handler.processVersion\n    tags:\n      AppId: \"38\"\n      Billing: \"MedicalTransactions/HDS\"\n      Description: \"env=dev/appid=38/monitor=false/team=HDS\"\n      Zone: us-east-1\n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n       - stream:\n            batchSize: 1\n            arn:\n              arn:aws:dynamodb:us-east-1:560395879688:table/hds_payer/stream/2019-04-29T04:13:51.403\n#       - stream:\n#           type: dynamodb\n#           batchSize: 1\n#           startingPosition: LATEST\n#           arn:\n#             Fn::GetAtt: [ \"hds_payer\", StreamArn ]\n#      - cloudwatchLog: '/aws/lambda/hds-payerConfigVersion'\n#\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n"]},{"id":94394642,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-es6-webpack # NOTE: update this with your service name\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # Name of webpack configuration file\n    includeModules: true # Node modules configuration for packaging\n    packager: 'npm' # Packager that will be used to package your external modules\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 30 # The default is 6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":195612229,"files":["service: futsaltokyo-agent\napp: futsaltokyo-agent\ntenant: kelvintaywl\n\nplugins:\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  stage: dev\n  region: ap-northeast-1\n\n  memorySize: 512\n  timeout: 30\n  cfLogs: true\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  auth:\n    handler: auth.authorize\n    cors: true\n    environment: ${file(env-http-handlers.yml)}\n  createBonfimFixtureById:\n    handler: http.createBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim\n          method: post\n          authorizer: auth\n  showBonfimFixtureById:\n    handler: http.showBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim/{id}\n          method: get\n          authorizer: auth\n          request:\n            parameters:\n              paths:\n                id: true\n  deleteBonfimFixtureById:\n    handler: http.deleteBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim/{id}\n          method: delete\n          authorizer: auth\n          request:\n            parameters:\n              paths:\n                id: true\n\npackage:\n  exclude:\n    - '!node_modules/**'\n    - .DS_Store\n  include:\n    - package.json\n    - handler.js\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":197570677,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: message-api # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-central-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - dynamodb:PutItem\n      - dynamodb:Scan*\n      - dynamodb:GetItem\n      - dynamodb:UpdateItem\n      - dynamodb:Deletetem\n    Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-message-${opt:stage}\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DYNAMOSB_MESSAGE_TABLE: ${self:service}-message-${opt:stage}\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\nplugins:\n  - serverless-pseudo-parameters\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /v1/message\n          method: post\n  list:\n    handler: handler.list\n    events:\n      - http:\n          path: /v1/message\n          method: get\n  # get:\n  #   handler: handler.get\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: get\n  # update:\n  #   handler: handler.update\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: put\n  # delete:\n  #   handler: handler.delete\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: delete\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    messageTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: ${self:service}-message-${opt:stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: 'S'\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":197221023,"files":["events:\n  - http:\n      path: /\n      method: get\n      cors: true\n","service: localLambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: local\n\nplugins:\n  - serverless-localstack\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n\ncustom:\n  localstack:\n    debug: true\n    host: http://localhost\n    stages:\n      - local\n    autostart: true\n  lambda:\n    mountCode: true\n\nfunctions:"]},{"id":181857154,"files":["service:\n  name: serverless-typescript-starter\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n"]},{"id":195305693,"files":["service: coderecipe-appsync-cognito\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  guestsHandler:\n    handler: guestsHandler.graphqlHandler\n  registeredHandler:\n    handler: registeredHandler.graphqlHandler\n\nplugins:\n  - serverless-appsync-plugin\n  - serverless-pseudo-parameters\n\ncustom:\n  defaultStage: rbeta\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  userPoolName: appSync-user-pool-${self:custom.currentStage}\n  userPoolClientName: appSync-user-pool-client-${self:custom.currentStage}  \n  appSync:\n    - name: ${self:custom.currentStage}-private-appsync-endpoint\n      schema: schema.graphql\n      authenticationType: AMAZON_COGNITO_USER_POOLS\n      userPoolConfig:\n        awsRegion: ${self:provider.region}\n        defaultAction: ALLOW\n        userPoolId: \"#{CognitoUserPool}\"\n      serviceRole: \"PrivateAppSyncServiceRole\"\n      mappingTemplates:\n        - dataSource: Lambda\n          type: Query\n          field: getMessage\n          request: \"getMessage-request-mapping-template.txt\"\n          response: \"getMessage-response-mapping-template.txt\"  \n      dataSources:\n        - type: AWS_LAMBDA\n          name: Lambda\n          description: 'Lambda DataSource'\n          config:\n            functionName: registeredHandler\n    - name: ${self:custom.currentStage}-public-appsync-endpoint\n      schema: schema.graphql\n      authenticationType: API_KEY\n      serviceRole: \"PublicAppSyncServiceRole\"\n      mappingTemplates:\n        - dataSource: Lambda\n          type: Query\n          field: getMessage\n          request: \"getMessage-request-mapping-template.txt\"\n          response: \"getMessage-response-mapping-template.txt\" \n      dataSources:\n        - type: AWS_LAMBDA\n          name: Lambda\n          description: 'Lambda DataSource'\n          config:\n            functionName: guestsHandler\nresources:\n  Resources:\n    PrivateAppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Lambda-PrivateAppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Lambda-PrivateAppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"lambda:invokeFunction\"\n                  Resource:\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-registeredHandler\"\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-registeredHandler:*\"\n    PublicAppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Lambda-PublicAppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Lambda-PublicAppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"lambda:invokeFunction\"\n                  Resource:\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-guestsHandler\"\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-guestsHandler:*\"                    \n    CognitoUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        MfaConfiguration: OFF\n        UserPoolName: ${self:custom.userPoolName}\n        UsernameAttributes:\n          - email\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: False\n            RequireUppercase: True\n    CognitoUserPoolGroupReaders:\n      Type: AWS::Cognito::UserPoolGroup\n      Properties: \n        GroupName: \"Readers\"\n        UserPoolId:\n          Ref: CognitoUserPool\n    CognitoUserPoolGroupWriters:\n      Type: AWS::Cognito::UserPoolGroup\n      Properties: \n        GroupName: \"Writers\"\n        UserPoolId:\n          Ref: CognitoUserPool          \n    CognitoUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.userPoolClientName}\n        GenerateSecret: False\n        UserPoolId:\n          Ref: CognitoUserPool"]},{"id":195278146,"files":["service: zaptalk-notification-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  notification:\n    handler: notification.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":111291441,"files":["service: bandonfews-serverless\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n      \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    FEWS_URL: \"http://www.bandonfloodwarning.ie/main.php\"\n    FUSIONTABLES_ID: \"103YIcARoxuaWT7NfZ8mVBzY554sF_3ONYC1N3DE\"\n\nfunctions:\n  check:\n    handler: check.check\n    events:\n      - http:\n          path: bandonfews\n          method: get\n          cors: true\n  cron:\n    handler: check.check\n    events:\n      # Invoke Lambda function every 15 mins\n      - schedule: rate(15 minutes)\n"]},{"id":134513264,"files":["service: example-api\n\ncustom:\n  tableName: 'example-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-west-2\n  profile: example-deploy\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"ExampleDynamoDBTable\", \"Arn\" ] }\n  environment:\n    EXAMPLE_TABLE: ${self:custom.tableName}\n    LOGGING_LEVEL: \"silly\"\n\nfunctions:\n  example:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    ExampleDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}\n"]},{"id":195052915,"files":["service: serverless-book-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: development\n  region: eu-west-1\n  environment:\n    BOOKS_TABLE: \"books\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:dynamodb:*:*:table/\"\n            - Ref: BooksTable\n\nfunctions:\n  create:\n    handler: books/create.handler\n    events:\n      - http:\n          path: books\n          method: post\n          cors: true\n\n  update:\n    handler: books/update.handler\n    events:\n      - http:\n          path: books/{id}\n          method: put\n          cors: true\n\n  list:\n    handler: books/list.handler\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n\n  get:\n    handler: books/get.handler\n    events:\n      - http:\n          path: books/{id}\n          method: get\n          cors: true\n\n  delete:\n    handler: books/delete.handler\n    events:\n      - http:\n          path: books/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    BooksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.BOOKS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":195044337,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nplugins:\n#  - serverless-plugin-typescript\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":194028599,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: myweb-api # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: ${env:STAGE}\n  region: ${env:AWS_REGION} us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\nfunctions:\n  api:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":144491259,"files":["service: brianpatrickkemper\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  # Use an existing AWS profile defined in ~/.aws/credentials\n  # see, https://serverless.com/framework/docs/providers/aws/guide/credentials#use-an-existing-aws-profile\n  profile: brianpatrickkemper\n\n  # One Custom IAM Role For All Functions\n  # note, can easily tweak the role in AWS console\n  # see, https://serverless.com/framework/docs/providers/aws/guide/credentials#one-custom-iam-role-for-all-functions\n  role: arn:aws:iam::862171441940:role/storeFitbitHeartRate\n\nfunctions:\n  storeFitbitHeartRate:\n    handler: handler.storeFitbitHeartRate\n    events:\n      - schedule: cron(0,5,10,15,20,25,30,35,40,45,50,55,59 * * * ? *)\n    environment:\n      BUCKET: bpk-heartrate\n    memorySize: 512\n  storeGithubEvents:\n    handler: handler.storeGithubEvents\n    events:\n      - schedule: cron(0,10,20,30,40,50,59 * * * ? *)\n    environment:\n      BUCKET: bpk-github-events\n    memorySize: 512\n  storeSpotifySongs:\n    handler: handler.storeSpotifySongs\n    events:\n      - schedule: cron(0,5,10,15,20,25,30,35,40,45,50,55,59 * * * ? *)\n    environment:\n      BUCKET: bpk-spotify-songs\n    memorySize: 512\n"]},{"id":185631411,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: portfolio-website # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":181052102,"files":["\n# Service specifications\n\nservice: eliot\nframeworkVersion: \">=1.42.0 <2.0.0\"\n\nplugins:\n  - serverless-iam-roles-per-function\n  - serverless-plugin-dynamodb\n  - serverless-plugin-share\n\npackage:\n  exclude:\n    - 'credentials.yml'\n    - 'modules/**'\n\n# Configurations\n\ncustom: \n  stage: iot\n  region: eu-west-1\n  credentials: ${file(./credentials.yml)}\n  share: ${file(./share.yml)}\n  skipTablePolicy: true\n  tables:\n    authCodes:\n      name: ${self:service}-${self:provider.stage}-authCodes\n      primaryKey:\n        name: authCode\n        type: 'S'\n      ttl: \n        attribute: ttl\n    refreshTokens:\n      name: ${self:service}-${self:provider.stage}-refreshTokens\n      primaryKey:\n        name: provider\n        type: 'S'\n      rangeKey:\n        name: refreshToken\n        type: 'S'\n    accessTokens:\n      name: ${self:service}-${self:provider.stage}-accessTokens\n      primaryKey:\n        name: provider\n        type: 'S'\n      rangeKey:\n        name: accessToken\n        type: 'S'\n      ttl: \n        attribute: ttl\n\n# Provider\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage,self:custom.stage}\n  region: ${opt:region,self:custom.region}\n\n# Functions\n\nfunctions:\n  auth:\n    handler: auth/auth.handler\n    environment:\n      CLIENT_ID: \n        Ref: ClientId\n      GOOGLE_PROJECT_ID:\n        Ref: GoogleProjectId\n      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAuthCodes\", \"Arn\"]\n    events:\n      - http:\n          path: auth\n          method: get\n\n  token:\n    handler: auth/token.handler\n    environment:\n      CLIENT_ID: \n        Ref: ClientId\n      CLIENT_SECRET: \n        Ref: ClientSecret\n      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAuthCodes\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n    events:\n      - http:\n          path: token\n          method: post\n\n  authorizer:\n    handler: auth/authorizer.handler\n    environment:\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n\n  googleHome:\n    handler: googleHome/fulfillment.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - http:\n          path: google/fulfillment\n          method: post\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  \n  googleHomeResync:\n    handler: googleHome/resync.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n      GOOGLE_APY_KEY:\n        Ref: GoogleAPIKey\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/events/thing/#'\"\n          enabled: true\n\n  googleHomeReport:\n    handler: googleHome/report.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n      GOOGLE_JWT:\n        Ref: GoogleJWT\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''\"\n          enabled: true\n\n  alexa:\n    handler: alexa/fulfillment.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n        Resource:\n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n  \n  alexaResync:\n    handler: alexa/resync.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n      ALEXA_ENDPOINT:\n        Ref: AlexaEndpoint\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/events/thing/#'\"\n          enabled: true\n  \n  alexaReport:\n    handler: alexa/report.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n      ALEXA_ENDPOINT:\n        Ref: AlexaEndpoint\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''\"\n          enabled: true\n\n# Resources\n\nresources:\n  - ${file(parameters.yml)}\n  - ${file(resources.yml)}\n  - ${file(outputs.yml)}\n"]},{"id":192338323,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mail-server # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.mailSend\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":121222339,"files":["service: \"${env:SERVICE_NAME}\"\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    forceExclude:\n      - aws-sdk\n      - serverless\n    packager: 'yarn'\n\nplugins:\n  - serverless-plugin-existing-s3\n  - serverless-webpack\n\nprovider:\n  name: aws\n  region: ${env:REGION}\n  stage: ${env:STAGE}\n  runtime: nodejs10.x\n  memorySize: 256\n  timeout: 30\n  versionFunctions: false\n  deploymentBucket:\n    name: \"${env:SERVICE_NAME}-${env:REGION}-deployment\"\n  environment:\n    DYNAMO_TABLE: ${env:DYNAMO_TABLE}\n    S3_BUCKET: ${env:S3_BUCKET}\n    EMAIL_DOMAIN: ${env:EMAIL_DOMAIN}\n  cfnRole: ${env:CLOUDFORMATION_ROLE_ARN}\n  role: ${env:LAMBDA_EXECUTION_ROLE_ARN}\n  stackTags:\n    KeboolaStack: ${env:KEBOOLA_STACK}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutBucketNotification\"\n       Resource:\n         - \"arn:aws:s3:::${env:S3_BUCKET}\"\n\npackage:\n  include:\n    - src/handler.js\n    - node_modules/**\n  exclude:\n    - .env\n    - docker-compose.yml\n    - Dockerfile\n    - package.json\n    - yarn.lock\n\nfunctions:\n\n  s3Handler:\n    handler: src/handler.handler\n    tags:\n      KeboolaStack: ${env:KEBOOLA_STACK}\n    events:\n      -\n        existingS3:\n          bucket: \"${env:S3_BUCKET}\"\n          events:\n            - \"s3:ObjectCreated:*\"\n          rules:\n            - prefix: _incoming/\n\n"]},{"id":191887403,"files":["service: serverless-nodejs-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n\nfunctions:\n  app:\n    handler: app.server # reference the file and exported method\n    events: # events trigger lambda functions\n      - http: # this is an API Gateway HTTP event trigger\n          path: /\n          method: ANY\n          cors: true\n      - http: # all routes get proxied to the Express router\n          path: /{proxy+}\n          method: ANY\n          cors: true"]},{"id":191645294,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  # 'iamRoleStatement' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":190888704,"files":["service: lambda-apollo\n\n# enable required plugins, in order to make what we want\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless supports different cloud environments to run at.\n# we will be deploying and running this project at AWS cloud with Node v8.10 environment\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n\n# here we describe our lambda function\nfunctions:\n  hello: # function name\n    handler: src/handler.main # where the actual code is located\n    # to call our function from outside, we need to expose it to the outer world\n    # in order to do so, we create a REST endpoint\n    events:\n      - http:\n          path: graphql # path for the endpoint\n          method: any # HTTP method for the endpoint, could be only 'post' or 'get', etc\n          # cors: true\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # name of webpack configuration file\n    includeModules: true # add excluded modules to the bundle\n    packager: 'npm' # package manager we use\n"]},{"id":166207446,"files":["# NOTE: update this with your service name\nservice: serverless-api-2\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\n#\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  \n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName: ${self:custom.tableName}\n    stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [NotesTable, Arn]\n\nfunctions:\n\n\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  billing:\n    handler: billing.main\n    events:\n      - http: \n          path: billing\n          method: post\n          cors: true\n          authorizer: aws_iam\n          \n\n\nresources:\n        - ${file(resources/dynamodb-table.yml)}\n        - ${file(resources/s3-bucket.yml)}\n        - ${file(resources/cognito-user-pool.yml)}\n        - ${file(resources/cognito-identity-pool.yml)}  \n\n"]},{"id":188787534,"files":["service: serverless-izettle-integrations\n\nplugins:\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  postWebhook:\n    handler: handler.postWebhook\n    events:\n      - http:\n          path: /webhook\n          method: post\n          cors: true\n    environment:\n      SLACK_WEBHOOK_URL:  ${env:SLACK_WEBHOOK_URL}\n      SLACK_WEBHOOK_ICON:  ${env:SLACK_WEBHOOK_ICON}\n"]},{"id":162208337,"files":["service: ec2-instances-switcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeInstances\"\n        - \"ec2:StartInstances\"\n        - \"ec2:StopInstances\"\n      Resource: \"*\"\n  environment:\n    tag_name: ec2-instances-switcher-isenabled\n    public_holiday_api: ${opt:public-holiday-api}\n\npackage:\n  exclude:\n    - README.md\n    - template.yaml\n\nlayers:\n  ec2InstancesSwitcher:\n    path: layer\n\nfunctions:\n  start:\n    handler: instances/start.handler\n    layers:\n      - {Ref: Ec2InstancesSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 23 ? * SUN-THU *)\n  stop:\n    handler: instances/stop.handler\n    layers:\n      - {Ref: Ec2InstancesSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 12 ? * MON-FRI *)\n"]},{"id":167894284,"files":["service: ecs-service-switcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ecs:listClusters\"\n        - \"ecs:listTagsForResource\"\n        - \"ecs:listServices\"\n        - \"ecs:updateService\"\n      Resource: \"*\"\n  environment:\n    tag_name: ecs-service-switcher-isenabled\n    public_holiday_api: ${opt:public-holiday-api}\n\npackage:\n  exclude:\n    - README.md\n\nlayers:\n  ecsServiceSwitcher:\n    path: layer\n\nfunctions:\n  start:\n    handler: ecs-services/start.handler\n    layers:\n      - {Ref: EcsServiceSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 23 ? * SUN-THU *)\n  stop:\n    handler: ecs-services/stop.handler\n    layers:\n      - {Ref: EcsServiceSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 12 ? * MON-FRI *)\n"]},{"id":184788195,"files":["service: public-holiday-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - !Ref CsvBucketName\n            - \"/*\"\n  environment:\n    holiday_csv_url: 'https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv'\n    csv_bucket_name: !Ref CsvBucketName\n    csv_bucket_expiration_in_days: ${opt:bucket-expiration-in-days, '1'}\n    TZ: 'Asia/Tokyo'\n\npackage:\n  exclude:\n    - README.md\n\nlayers:\n  publicHolidayApi:\n    path: layer\n\nfunctions:\n  search:\n    handler: handler.search\n    layers:\n      - {Ref: PublicHolidayApiLambdaLayer}\n    events:\n      - http:\n          path: holiday\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"date\" : \"\" }'\n      - http:\n          path: holiday/{date}\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"date\" : \"$input.params(''date'')\" }'\nresources:\n  Resources:\n    CsvBucketName:\n      Type: AWS::S3::Bucket\n      Properties:\n        LifecycleConfiguration:\n          Rules:\n          - Status: Enabled\n            ExpirationInDays: ${self:provider.environment.csv_bucket_expiration_in_days}\n            NoncurrentVersionExpirationInDays: 1\n            AbortIncompleteMultipartUpload:\n              DaysAfterInitiation: 1\n"]},{"id":189902275,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: summovwag-serverless\n\ncustom: ${file(./env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:putObject\n      Resource: \"arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*\"\n  stage: prod\n  region: us-east-1\n  profile: serverless\n\nfunctions:\n  hello:\n    handler: handler.scraper\n    memorySize: 1536MB\n    timeout: 15\n    events:\n      - schedule: ${self:custom.globalSchedule}\n      # - http:\n      #     path: /\n      #     method: get\n    environment:\n      S3_BUCKET_NAME: ${self:custom.S3_BUCKET_NAME}\n      SUMMER_MOVIE_PAGE: ${self:custom.SUMMER_MOVIE_PAGE}\n      SUMMER_MOVIE_FILE_NAME: ${self:custom.SUMMER_MOVIE_FILE_NAME}\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.S3_BUCKET_NAME}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods:\n              - GET\n              AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\"\n    UploadBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: UploadBucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n                - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-chrome\n\npackage:\n  exclude:\n    - node_modules/puppeteer/.local-chromium/**"]},{"id":176387277,"files":["plugins:\n  - serverless-finch\n\nservice: EasyMetaFields\n\nprovider:\n  name: aws\n  runtime: go1.x\n  stage: prod\n  region: eu-west-1\n\n  environment:\n    SHOPIFY_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_KEY}\n    SHOPIFY_API_SECRET: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_SECRET}\n    SHOPIFY_SCOPE: \"read_script_tags,write_script_tags,read_orders,write_orders,read_products,write_products\"\n    DYNAMODB_TABLE: \"easymetafields\"\n\n\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - s3:Get*\n        - s3:List*\n      Resource:\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:s3:::${self:provider.environment.DYNAMODB_TABLE}-bucket\", \"/*\" ] ]\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\n\n\nfunctions:\n\n  index:\n    handler: index\n    name: ${self:provider.environment.DYNAMODB_TABLE}_index\n    description: First step of the OAuth Handshake\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n    package:\n      include:\n        - index\n  auth:\n    handler: auth\n    name: ${self:provider.environment.DYNAMODB_TABLE}_auth\n    description: First step of the OAuth Handshake\n    events:\n      - http:\n          path: /auth\n          method: get\n          cors: true\n    package:\n      include:\n        - auth\n\n  auth_callback:\n    handler: auth_callback\n    name: ${self:provider.environment.DYNAMODB_TABLE}_auth_callback\n    description: Callback function for the OAuth Handshake\n\n    events:\n      - http:\n          path: /auth/callback\n          method: get\n          cors: true\n    package:\n      include:\n        - auth_callback\n\n  uninstall:\n    handler: webhooks/uninstall\n    name: ${self:provider.environment.DYNAMODB_TABLE}_webhooks_uninstall\n    description: Callback function for the OAuth Handshake\n\n    events:\n      - http:\n          path: /webhooks/uninstall\n          method: post\n          cors: true\n    package:\n      include:\n        - webhooks/uninstall\n\n\nresources:\n  Resources:\n\n    ShopsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n        AttributeDefinitions:\n          -\n            AttributeName: shopid\n            AttributeType: S\n\n        KeySchema:\n          -\n            AttributeName: shopid\n            KeyType: HASH\n\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    S3Bucket:\n      Type: AWS::S3::Bucket\n\n      Properties:\n        BucketName: ${self:provider.environment.DYNAMODB_TABLE}-bucket\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n\n    S3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: S3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n                - s3:GetObject\n              Resource: arn:aws:s3:::${self:provider.environment.DYNAMODB_TABLE}-bucket/*\n\n  Outputs:\n\n    ShopsTable:\n      Description: \"The name of the Shops Table\"\n      Value:\n        Ref: ShopsTable\n\n    ShopsTableArn:\n      Description: \"The ARN for the Shops Table\"\n      Value:\n        Fn::GetAtt:\n          - ShopsTable\n          - Arn\n      Export:\n        Name: ShopsTableArn\n\ncustom:\n  client:\n    bucketName: ${self:provider.environment.DYNAMODB_TABLE}-bucket\n    manageResources: false"]},{"id":188473454,"files":["tenant: rafischer1\napp: stream-challenge-be\nservice: stream-challenge-be\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  credentials: ${file(./.env.yml):credentials}\ncustom:\n  writeEnvVars:\n    NODE_ENV: ${file(./.env.yml):${opt:stage}.NODE_ENV}\n    DATABASE_URL: ${file(./.env.yml):${opt:stage}.DATABASE_URL}\n    STREAM_KEY: ${file(./.env.yml):${opt:stage}.STREAM_KEY}\n    STREAM_SECRET: ${file(./.env.yml):${opt:stage}.STREAM_SECRET}\nplugins:\n  - serverless-plugin-write-env-vars\nfunctions:\n  api:\n    handler: lambda.handler\n    events:\n      - http: ANY {proxy+}"]},{"id":188120791,"files":["service: notes-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n  getUser:\n    handler: handler.getUser\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":187812793,"files":["service: ec2-scheduler # NOTE: update this with your service name\n\nframeworkVersion: \"=1.41.1\"\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-include-dependencies\n  # - serverless-plugin-optimize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  versionFunctions: false\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:StartInstances\n        - ec2:StopInstances\n        # - ec2:RebootInstances\n        # - ec2:TerminateInstances\n      Resource: \"arn:aws:ec2:${opt:region, self:provider.region}:*:instance/*\"\n    - Effect: Allow\n      Action:\n        - ec2:DescribeInstances\n      Resource: \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - .git\n    - .gitignore\n\nfunctions:\n  stopInstances:\n    handler: src/stopInstances.handler\n    description: Stop Instances with matching Tag\n    events:\n      - schedule:\n          rate: cron(00 18 * * ? *)\n          enabled: false\n    memorySize: 128\n    timeout: 30\n  startInstances:\n    handler: src/startInstances.handler\n    description: Start Instances with matching Tag\n    events:\n      - schedule:\n          rate: cron(00 06 * * ? *)\n          enabled: false\n    memorySize: 128\n    timeout: 30\n"]},{"id":135855116,"files":["service: serverless-proj\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n  # serverless-dynamodb-local config\n  dynamodb:\n    start:\n      migrate: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n\n  # role for DynamoDB\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n\n  # POST API\n  post:\n    handler: functions/post.main\n    events:\n      - http:\n          path: courses/{courseId}\n          method: post\n          cors: true\n\n  # GET API\n  get:\n    handler: functions/get.main\n    events:\n      - http:\n          path: courses/{courseId}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    taskDB:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: courseId\n            AttributeType: S\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: courseId\n            KeyType: HASH\n          -\n            AttributeName: userId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: courses"]},{"id":185096800,"files":["# https://medium.com/a-man-with-no-server/deploying-a-serverless-application-using-webpack-and-babel-to-support-es2015-to-aws-2f61cff8bafb\nservice: api-gateway\nframeworkVersion: '>=1.21.0 <2.0.0'\nprovider:\n  name: aws\n  # https://statsbot.co/blog/a-crash-course-on-serverless-with-aws-running-node11-on-lambda/\n  # https://github.com/lambci/node-custom-lambda\n  # runtime: provided\n  runtime: nodejs8.10.0 # has to be >8 for Koa\n  stage: dev\n  region: us-west-1\n  # timeout: 10\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  # - serverless-domain-manager\ncustom:\n  serverless-offline:\n    port: 8000\n  webpack:\n    includeModules: true # if necessary\n    webpackConfig: 'scripts/webpack/webpack.handler.js'\n  # customDomain:\n  #   domainName: api.nodejs.com\n  #   stage: ci\n  #   basePath: api\n  #   certificateName: '*.nodejs.com'\n  #   createRoute53Record: true\n  #   endpointType: 'regional'\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html\n          path: '{proxy+}'\n          method: any\n          cors: true\n    # layers: # add layer\n      # - arn:aws:lambda:<region>:553035198032:layer:nodejs12:2\n  playground:\n    handler: src/handler.playground\n    events:\n      - http:\n          path: '/playground'\n          method: get\n          cors: true\n    # layers: # add layer\n      # - arn:aws:lambda:<region>:553035198032:layer:nodejs12:2\n# usagePlan: # Optional usage plan config\n#   quota:\n#     limit: 50000\n#     offset: 2\n#     period: MONTH\n#   throttle:\n#     burstLimit: 200\n#     rateLimit: 100"]},{"id":174001114,"files":["service: samples-step-functions\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  createMessage:\n    handler: index.createMessage\n  toUppercase:\n    handler: index.toUppercase\n\nstepFunctions:\n  stateMachines:\n    createMessage:\n      name: ${self:service}-${self:provider.stage}-createMessage\n      events:\n        - http:\n            path: /messages\n            method: POST\n      definition:\n        Comment: A sample state machine that creates a Hello World message and converts it to uppercase.\n        StartAt: CreateMessage\n        States:\n          CreateMessage:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-createMessage\"\n            Next: ToUppercase\n          ToUppercase:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-toUppercase\"\n            End: true\n","service: samples-stepf-api-sync\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - states:StartExecution\n      Resource:\n        - ${self:resources.Outputs.CreateMessageStateMachineArn.Value}\n    - Effect: Allow\n      Action:\n        - states:GetExecutionHistory\n      Resource:\n        - \"*\"\n\nfunctions:\n  createMessage:\n    handler: handler/createMessage.handle\n    environment:\n      STATE_MACHINE_ARN: ${self:resources.Outputs.CreateMessageStateMachineArn.Value}\n    events:\n      - http:\n          path: /messages\n          method: POST\n  formatMessage:\n    handler: handler/formatMessage.handle\n  toUppercase:\n    handler: handler/toUpperCase.handle\n\nstepFunctions:\n  stateMachines:\n    createMessage:\n      name: ${self:service}-${self:provider.stage}-createMessage\n      definition:\n        Comment: A sample state machine that creates a Hello World message and converts it to uppercase.\n        StartAt: FormatMessage\n        States:\n          FormatMessage:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-formatMessage\"\n            Next: ToUppercase\n          ToUppercase:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-toUppercase\"\n            Next: EndState\n          EndState:\n            Type: Pass\n            End: true\n\nresources:\n  Outputs:\n    CreateMessageStateMachineArn:\n      Description: ARN of the CreateMessage Step Functions State Machine\n      Value:\n        Ref: SamplesDashstepfDashapiDashsyncDashdevDashcreateMessage","service: samples-rest-cognito-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 6\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: \n          path: hello\n          method: get\n          authorizer: \n            arn: arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_07ksBD9fu\n","service: samples-rest-dynamodb-modular\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-lambda-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: \n          path: hello\n          method: get\n          authorizer: \n            name: simpleTokenAuthorizer\n            resultTtlInSeconds: 300     # default response cache time-to-live is 5 minutes\n            identitySource: method.request.header.Authorization     # default token location is Authorization header\n  simpleTokenAuthorizer:\n    handler: authorizer.authorize\n","service: samples-rest-dynamodb-multi-fn\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-environment\n\ncustom:\n  audience:\n    dev: 'Developers'\n    qa: 'Testers'\n    prod: 'World'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  environment:\n    GREETING_AUDIENCE: ${self:custom.audience.${self:provider.stage}}\n\nfunctions:\n  hello:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Hello'\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Goodbye'\n    events:\n      - http: GET /goodbye\n","service: samples-rest-dynamodb\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-hello\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'","service: samples-lambda-authorizer-jwt\n\ncustom:\n  audience:     # token audience attribute\n    dev: \"https://api-dev.leanstacks.net\"\n    qa: \"https://api-qa.leanstacks.net\"\n    prod: \"https://api.leanstacks.net\"\n  issuer:     # token issuer attribute\n    dev: \"https://api-dev.leanstacks.net\"\n    qa: \"https://api-qa.leanstacks.net\"\n    prod: \"https://api.leanstacks.net\"\n  publicKey:     # public key for JWT verification\n    dev: |\n      -----BEGIN PUBLIC KEY-----\n      MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJWICeIzMDhWHH25LcJVY6N7hc76HnY4\n      nZIarSgfhFJDRyFyvfAzB6F9R+TWUH+kGB1ypd+jgNLpyGHt3YloKtsCAwEAAQ==\n      -----END PUBLIC KEY-----\n    qa: \"\"\n    prod: \"\"\n  privateKey:     # private key for JWT signing\n    dev: |\n      -----BEGIN RSA PRIVATE KEY-----\n      MIIBOgIBAAJBAJWICeIzMDhWHH25LcJVY6N7hc76HnY4nZIarSgfhFJDRyFyvfAz\n      B6F9R+TWUH+kGB1ypd+jgNLpyGHt3YloKtsCAwEAAQJAbN2oZHlkJ//5qkcB27ST\n      YFj0KKbNOsEpZ0/otYeMrN6MphIt8D3IICyBQVej0C/U3cjox3aeC5phVVeqP9u6\n      EQIhAPt8G95qZ2rID7S7C8E29+M0xS7TGkbkxpejuhzHIbynAiEAmDdTI4qrJpDt\n      vobEYibiSIQJVmINLCPlP5L8EvU2oq0CIQCKTsBY+zXzMSIKKJCXa667I0uKrAkY\n      kjtyLFZv+0hfowIgGHy1/D6/n9mq1X66swuMVZwgIGxvsA0qQRr1QFuAaZUCIGh4\n      hIZ+dYvpHIvAn819aKFqi4dBeJ/PMxqYTCSseWi5\n      -----END RSA PRIVATE KEY-----\n    qa: \"\"\n    prod: \"\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  getMessage:\n    handler: handler/messages.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n          authorizer: \n            name: tokenAuthorizer\n            resultTtlInSeconds: 300     # default response cache time-to-live is 5 minutes\n            identitySource: method.request.header.X-Auth-Token     # default token location is X-Auth-Token header\n  listMessages:\n    handler: handler/messages.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n          authorizer: \n            name: tokenAuthorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.X-Auth-Token\n  requestToken:\n    handler: handler/tokens.handler\n    environment:\n      AUDIENCE: ${self:custom.audience.${self:provider.stage}}          # issuer placed within the token\n      ISSUER: ${self:custom.issuer.${self:provider.stage}}              # issuer placed within the token\n      PRIVATE_KEY: ${self:custom.privateKey.${self:provider.stage}}     # private key to sign the token\n    events:\n      - http: \n          path: /auth/request_token\n          method: post\n  tokenAuthorizer:\n    handler: handler/authorizer.handler\n    environment:\n      AUDIENCE: ${self:custom.audience.${self:provider.stage}}        # issuer placed within the token\n      ISSUER: ${self:custom.issuer.${self:provider.stage}}            # issuer to verify the token\n      PUBLIC_KEY: ${self:custom.publicKey.${self:provider.stage}}     # public key to verify the token\n","service: samples-environment-ssm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  environment:\n    GREETING_AUDIENCE: ${ssm:/${self:service}/${self:provider.stage}/greeting-audience}\n\nfunctions:\n  hello:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Hello'\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Goodbye'\n    events:\n      - http: GET /goodbye\n","##\n# The API project creates the API Gateway API and root resource, i.e. \"/\".\n# A simple \"info\" function with a HTTP event ensures a API Gateway REST API is \n#  deployed to AWS.\n# The API and root resource identifiers are explicitly output from this project \n#  so that they may be used within the \"messages\" serverless.yml configuration.\n##\nservice: samples-shared-api-base\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  info:\n    handler: index.handler\n    environment:\n      API_VERSION_MAJOR: 1\n      API_VERSION_MINOR: 0\n      API_VERSION_PATCH: 0\n    events:\n      - http: \n          path: /info\n          method: get\n\n# The resources block contains raw AWS CloudFormation markup.\nresources:\n  Outputs:\n    RestApiId:\n      Description: API Gateway REST API Identifier\n      Value: \n        Ref: ApiGatewayRestApi\n    RestApiRootResourceId:\n      Description: API Root Resource Identifier\n      Value:\n        \"Fn::GetAtt\": [ ApiGatewayRestApi, RootResourceId ]\n","##\n# The \"messages\" service project defines the functions and API endpoints for \n#  a REST \"messages\" resource.\n# Rather than deploying an entirely new API within API Gateway, the messages \n#  endpoints will be created within the API whose identifer was exported from \n#  the \"api\" project.\n##\nservice: samples-shared-api-messages\n\ncustom:\n  apiStackName: samples-shared-api-base   # The CloudFormation stack name (minus stage) where the API is created.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:   # Specify the API to which HTTP endpoints are attached. Reference the Outputs from the API project.\n    restApiId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiId}\n    restApiRootResourceId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiRootResourceId}\n\nfunctions:\n  getMessage:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n  listMessages:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n","##\n# The API project creates the API Gateway API and root resource, i.e. \"/\".\n# A simple \"info\" function with a HTTP event ensures a API Gateway REST API is \n# deployed to AWS.\n#\n# This project uses the serverless-domain-manager plugin to associate the API \n# with a custom domain. \n#\n# The API and root resource identifiers are explicitly output from this project \n# so that they may be used within the \"messages\" serverless.yml configuration.\n##\nservice: samples-sacd-base\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:provider.stage}}\n    certificateName: '*.leanstacks.net'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:\n    description: \"Serverless Sample: Shared API with Custom Domain Name\"\n\nfunctions:\n  info:\n    handler: index.handler\n    environment:\n      API_VERSION_MAJOR: 1\n      API_VERSION_MINOR: 0\n      API_VERSION_PATCH: 0\n    events:\n      - http: \n          path: /info\n          method: get\n\n# The resources block contains raw AWS CloudFormation markup.\nresources:\n  Outputs:\n    RestApiId:\n      Description: API Gateway REST API Identifier\n      Value: \n        Ref: ApiGatewayRestApi\n    RestApiRootResourceId:\n      Description: API Root Resource Identifier\n      Value:\n        \"Fn::GetAtt\": [ ApiGatewayRestApi, RootResourceId ]\n","##\n# The \"messages\" service project defines the functions and API endpoints for \n#  a REST \"messages\" resource.\n# Rather than deploying an entirely new API within API Gateway, the messages \n#  endpoints will be created within the API whose identifer was exported from \n#  the \"api\" project.\n##\nservice: samples-sacd-messages\n\ncustom:\n  apiStackName: samples-sacd-base   # The CloudFormation stack name (minus stage) where the API is created.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:   # Specify the API to which HTTP endpoints are attached. Reference the Outputs from the API project.\n    restApiId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiId}\n    restApiRootResourceId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiRootResourceId}\n\nfunctions:\n  getMessage:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n  listMessages:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n","service: samples-dynamodb-ondemand\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableName}","service: samples-test-jest\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'","service: samples-custom-domain-products\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'products'\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  getProducts:\n    handler: index.handler\n    events:\n      - http: GET /\n","service: samples-custom-domain-users\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'users'\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  getUsers:\n    handler: index.handler\n    events:\n      - http: GET /\n","plugins:\n  - serverless-dynamodb-local\n  - serverless-offline # must be last plugin in list\n\nservice: samples-rest-dynamodb-local\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n  dynamodb:\n    start:\n      migrate: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","plugins:\n  - serverless-domain-manager\n\nservice: samples-custom-domain\n\ncustom:\n  customDomain:\n    domainName: serverless-samples.leanstacks.net\n    basePath: ''\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    events:\n      - http: GET /goodbye\n"]},{"id":182375209,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bridge # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  exclude:\n    - yarn-error.log\n    - yarn.lock\n    - test/**\n\nfunctions:\n  app:\n    handler: lambda_handler.echoBridge\n    events:\n      - http: 'GET {parameters+}'\n  getDetail1:\n    handler: lambda_handler.echoBridge\n    events:\n      - http: 'GET /test/echo/{id+}'\n  getDetail:\n    handler: lambda_handler.echoBridge\n    events:\n      - http:\n          path: /test/echo/{id}\n          method: GET\n          cors: true\n  postExample:\n    handler: lambda_handler.echoBridge\n    events:\n      - http:\n          path: /test/echo/\n          method: POST\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline"]},{"id":185347064,"files":["#serverless.yml\n\nservice: plant-logger\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n  environment:\n    USER_TABLE: users-table-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}\"\n\nresources:\n  Resources:\n    UserTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: ID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: ID\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          path: query\n          method: get\n          cors: true\n      - http:\n          path: query\n          method: post\n          cors: true\n"]},{"id":184376329,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ip2geo # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  exclude:\n    - yarn-error.log\n    - yarn.lock\n    - test/**\n\nfunctions:\n  ip2Geo:\n    handler: lambda_handler.ip2GeoBridge\n    events:\n      - http:\n          path: /{ip}\n          method: GET\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n#  - serverless-offline\n"]},{"id":184384784,"files":["##################################################################################\n# CodeRecipe - a marketplace for developers to grab ready to use cloud solutions #\n# More details at: https://coderecipe.ai/architectures/47740119                  #\n##################################################################################\n\nservice: CodeRecipeSample-Image-Compression\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  environment:\n    COMPRESSED_BUCKET_NAME: ${opt:COMPRESSED_BUCKET_NAME}\n    UNCOMPRESSED_BUCKET_NAME: ${opt:UNCOMPRESSED_BUCKET_NAME}\nfunctions:\n  ImageHandler:\n    handler: index.handler\n    name: ${self:provider.stage}-ImageHandler\n    environment:\n      Stage: ${self:provider.stage}\n      COMPRESSED_BUCKET_NAME: \"#{CompressedImageBucket}\"\n    events:\n      - s3:\n          bucket: ${self:provider.stage}-${self:provider.environment.UNCOMPRESSED_BUCKET_NAME}\n    iamRoleStatementsName: ${self:provider.stage}-ImageHandler-role\n    iamRoleStatements:\n        - Effect: Allow\n          Action:\n            - s3:PutObject\n          Resource: \"arn:aws:s3:::${self:provider.stage}-${self:provider.environment.COMPRESSED_BUCKET_NAME}/*\"\n        - Effect: Allow\n          Action:\n            - s3:GetObject\n          Resource: \"arn:aws:s3:::${self:provider.stage}-${self:provider.environment.UNCOMPRESSED_BUCKET_NAME}\"\n\nresources:\n  Resources:\n    CompressedImageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}-${self:provider.environment.COMPRESSED_BUCKET_NAME}\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-scripts\n\ncustom:\n  scripts:\n    hooks:\n      'package:cleanup': 'docker pull amazonlinux; docker run --rm -v $PWD:/data -w /data node:8.10 npm install imagemin imagemin-mozjpeg'\n"]},{"id":183978208,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hds-simple-nodejs-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::560395879688:role/Hds-Lambda\n# cfnRole: arn:aws:iam::560395879688:role/Hds-Developer\n  stackName: hds-${self:provider.stage}-${self:service}\n  deploymentBucket: \n    name: hds-chc-dev-medicaltransactions\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      Usage: DevOps\n\n# you can overwrite defaults here\n  stage: ${opt:stage, 'dev'} \n  region: ${opt:retion, 'us-east-1'}\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"hds-chc-dev-medicaltransactions\" ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"hds-chc-dev-medicaltransactions\"\n            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DEBUG: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n       - stream:\n            batchSize: 1\n            arn:\n              arn:aws:dynamodb:us-east-1:560395879688:table/hds_payer/stream/2019-04-29T04:13:51.403\n#       - stream:\n#           type: dynamodb\n#           batchSize: 1\n#           startingPosition: LATEST\n#           arn:\n#             Fn::GetAtt: [ \"hds_payer\", StreamArn ]\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":101689501,"files":["service: vatsim-data\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: arn:aws:s3:::${self:custom.bucket}/*\n\ncustom:\n  bucket: vatsim-data-${opt:stage, self:provider.stage}\n  stage: ${opt:stage, self:provider.stage}\n  prd:\n    schedule:\n      rate: rate(1 minute)\n  dev:\n    schedule:\n\nfunctions:\n  store:\n    handler: handler.store\n    environment:\n      BUCKET: ${self:custom.bucket}\n    events:\n      - schedule: ${self:custom.${self:custom.stage}.schedule}\n"]},{"id":179729414,"files":["service: serverless-code-pipeline-cicd\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - codedeploy:*\n      Resource:\n        - \"*\"\nplugins:\n  - serverless-plugin-aws-alerts\n  - serverless-plugin-canary-deployments\n\ncustom:\n  alerts:\n    dashboards: false\n  deploymentSettings:\n    stages:\n      - dev\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello  \n    alarms:\n      - name: foo\n        namespace: 'AWS/Lambda'\n        metric: Errors\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanOrEqualToThreshold\n    deploymentSettings:\n      type: Canary10Percent5Minutes\n      alias: Live\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      alarms:\n        - HelloFooAlarm\n  preHook:\n    handler: hooks.pre\n  postHook:\n    handler: hooks.post\n"]},{"id":177981953,"files":["service: contact-form-api\n\ncustom:\n  secrets: ${file(config.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment: \n    EMAILS: ${self:custom.secrets.EMAILS}\n    DOMAINS: ${self:custom.secrets.DOMAINS}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n  sendFormEncoded:\n    handler: handler.sendFormEncoded\n    events:\n      - http:\n          path: email/send/formencoded\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":180548291,"files":["# serverless.yml\n\nservice: hello-world-express-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:*:*:table/${self:custom.tableName}\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n  dynamodb:\n    start:\n      migrate: true\n"]},{"id":179474490,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hello-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":179014771,"files":["service: awscn-nodejs # 替换成你的服务名称\n\nplugins:\n  - serverless-plugin-aws-cn-principal # 解决中国区部署报错，见 issue https://github.com/serverless/serverless/issues/5365\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: cn-north-1\n  endpointType: regional\n  deploymentBucket:\n    name: serverless.deployment.bucket # 将程序包上传到此 S3 bucket ，可自定义\n    serverSideEncryption: AES256\n\nfunctions:\n  hello:\n    description: 实例函数\n    handler: app/handler/hello.fn\n    events:\n      - http:\n          path: /hello\n          method: get\n          cors: true\n    # 更多 events 类型的配置方式请查看\n    # Serverless 文档：https://serverless.com/framework/docs/providers/aws/events/\n    # AWS 文档：https://docs.amazonaws.cn/lambda/latest/dg/use-cases.html\n\n# 中国区暂不支持 Lambda environment\n\n# 可以配置打包部署时需要包含的文件\npackage:\n exclude:\n   - app/**/*.ts\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n\n\n\n# 可以添加 CloudFormation 资源模板\n# resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: Description for the output\n#       Value: Some output value\n"]},{"id":168595909,"files":["service: slack-bot\n\nprovider:\n  name: google\n  runtime: nodejs8\n  memorySize: 128\n  project: my-personal-project\n  region: us-central1\n  credentials: ./serverless-config.json\n  environment:\n    SLACK_TOKEN: XXX\n    BITBUCKET_HOST: bitbucket.org\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  slack:\n    handler: slack\n    events:\n      - http: path"]},{"id":176054417,"files":["service: yelp-scraper\n\nplugins:\n  - serverless-offline-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DYNAMODB_TABLE: yelp-ratings\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\npackage:\n  include:\n    - utilities/**\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n\n  launch_scraper:\n    handler: handler.launch_scrapers\n    events:\n      - schedule: cron(0 9 ? * 2#1 *) # 9am UTC - First Monday of Each Month\n"]},{"id":176836884,"files":["service: twilio-nts-serverless # NOTE: update this with your service name\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - README.md\n    - .eslintrc.json\n    - .gitignore\n    - test/**\n\nfunctions:\n  getToken:\n    handler: handler.getToken\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res"]},{"id":129701427,"files":["service: sync-ecs-dns\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  environment:\n    DNS_SUFFIX: example.local\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ecs:Describe*\n        - ecs:List*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - route53:Change*\n        - route53:Get*\n        - route53:List*\n      Resource: \"*\"\n\nfunctions:\n  sync-dns:\n    handler: src/index.sync\n    description: 'sync ecs dns records from cloudwatch events'\n    events:\n     - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ecs\"\n            detail-type:\n              - \"ECS Task State Change\"\n            detail:\n              clusterArn:\n                - Fn::Join: [ \"\", [ \"arn:aws:ecs:\", Ref: \"AWS::Region\", \":\", Ref: \"AWS::AccountId\", \":cluster/my-cluster\" ] ]\n"]},{"id":114699953,"files":["service: ausgaben\n\ncustom:\n  config: ${file(./serverless.dev.yml)}\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - If-Match\n      - Accept\n    allowCredentials: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-central-1\n  timeout: 60\n  environment:\n    TABLE_EVENTS: ${self:service}-${self:provider.stage}-events\n    TABLE_INDEX: ${self:service}-${self:provider.stage}-index\n    API_ENDPOINT: ${self:custom.config.apiEndpoint}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-*\n\nfunctions:\n  apiIndex:\n    handler: handler/api.index\n    events:\n    - http:\n        path: api\n        method: get\n        cors: ${self:custom.cors}\n  me:\n    handler: handler/user.me\n    events:\n    - http:\n        path: api\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createCheckingAccount:\n    handler: handler/checkingAccount.create\n    events:\n    - http:\n        path: checking-account\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchCheckingAccount:\n    handler: handler/checkingAccount.search\n    events:\n    - http:\n        path: checking-account/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getCheckingAccount:\n    handler: handler/checkingAccount.get\n    events:\n    - http:\n        path: checking-account/{id}\n        method: get\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createSpending:\n    handler: handler/spending.create\n    events:\n    - http:\n        path: checking-account/{id}/spending\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createPeriodical:\n    handler: handler/periodical.create\n    events:\n    - http:\n        path: checking-account/{id}/periodical\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  updateCheckingAccount:\n    handler: handler/checkingAccount.update\n    events:\n    - http:\n        path: checking-account/{id}/{property}\n        method: put\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  deleteCheckingAccount:\n    handler: handler/checkingAccount.delete\n    events:\n    - http:\n        path: checking-account/{id}\n        method: delete\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchSpending:\n    handler: handler/spending.search\n    events:\n    - http:\n        path: checking-account/{id}/spending/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchPeriodical:\n    handler: handler/periodical.search\n    events:\n    - http:\n        path: checking-account/{id}/periodical/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchTitles:\n    handler: handler/checkingAccount.searchTitles\n    events:\n    - http:\n        path: checking-account/{id}/titles/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  updateSpending:\n    handler: handler/spending.update\n    events:\n    - http:\n        path: spending/{id}\n        method: put\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getSpending:\n    handler: handler/spending.get\n    events:\n    - http:\n        path: spending/{id}\n        method: get\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  deleteSpending:\n    handler: handler/spending.delete\n    events:\n    - http:\n        path: spending/{id}\n        method: delete\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getReport:\n    handler: handler/report.get\n    events:\n    - http:\n        path: checking-account/{id}/report\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\nresources:\n  Resources:\n    eventsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-events\n        KeySchema:\n        - AttributeName: Id\n          KeyType: HASH\n        - AttributeName: Version\n          KeyType: RANGE\n        AttributeDefinitions:\n        - AttributeName: Id\n          AttributeType: S\n        - AttributeName: Version\n          AttributeType: N\n        - AttributeName: AggregateName\n          AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n        - IndexName: Aggregate-index\n          KeySchema:\n          - AttributeName: AggregateName\n            KeyType: HASH\n          Projection:\n            ProjectionType: INCLUDE\n            NonKeyAttributes:\n            - AggregateId\n          ProvisionedThroughput:\n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n    indexTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-index\n        KeySchema:\n        - AttributeName: IndexName\n          KeyType: HASH\n        - AttributeName: IndexKey\n          KeyType: RANGE\n        AttributeDefinitions:\n        - AttributeName: IndexName\n          AttributeType: S\n        - AttributeName: IndexKey\n          AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":173178271,"files":["service: sls-ts-starter\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\nfunctions:\n  hello:\n    handler: handler.start\n    events:\n      - http:\n          path: resource\n          method: get\n      - cloudwatchLog: 'lambda/sls-ts-starter'\n"]},{"id":150956134,"files":["service:\n  name: serverless-http-echo\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":175929710,"files":["service: users-api\n\nframeworkVersion: \">=1.3.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n\n  environment:\n    USERS_TABLE: ${self:service}-${self:provider.stage}-${self:custom.usersTable}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}'\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USERS_TABLE}\npackage:\n  exclude:\n    - seed/**\n    - coverage/**\n    - .vscode/**\n    - .dockerignore\n    - .editorconfig\n    - .env\n    - .gitignore\n    - Dockerfile\n    - README.MD\n    - docker-compose.yaml\n    - '*.{ts,js,json,yml}'\n\n  include:\n    - src/**\n    - '!src/**/*.spec.js'\n    - '!src/**/*.serverless.yml'\n\nfunctions:\n  - '${file(src/handlers/users/users.serverless.yml)}'\n\nplugins:\n  - serverless-offline\n\ncustom:\n  usersTable: 'users'\n  serverless-offline:\n    host: 0.0.0.0\n","list:\n  handler: src/handlers/users/list.handler\n  events:\n    - http: get /users\nget:\n  handler: src/handlers/users/get.handler\n  events:\n    - http: get /user/{id}\nadd:\n  handler: src/handlers/users/add.handler\n  events:\n    - http: post /user\nupdate:\n  handler: src/handlers/users/update.handler\n  events:\n    - http: put /user/{id}\ndelete:\n  handler: src/handlers/users/delete.handler\n  events:\n    - http: delete /user/{id}\n"]},{"id":175600980,"files":["service: developer-jobs-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\ncustom:\n  environment: ${file(env.yml):default}\n\nfunctions:\n  search:\n    handler: handler.search\n    environment:\n      reedAPIKey: ${self:custom.environment.REED_API_KEY}\n    events:\n      - http:\n          path: search\n          method: get\n          cors: true"]},{"id":154477950,"files":["service: mountain-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-warmup\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  # Stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load secret environment variables based on the current stage.\n  # Fallback to default if not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  apiKeys:\n    - ${self:custom.stage}-developer\n    - ${self:custom.stage}-demo-key\n  environment:\n    MONGO_URI: ${self:custom.environment.MONGO_URI}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: \"*\"\n\nfunctions:\n  createMountain:\n    handler: methods/mountains/create.main\n    warmup: true\n    events:\n      - http:\n          path: mountains\n          method: post\n          private: true\n          cors: true\n  getMountain:\n    handler: methods/mountains/get.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: get\n          private: true\n          cors: true\n  listMountains:\n    handler: methods/mountains/list.main\n    warmup: true\n    events:\n      - http:\n          path: mountains\n          method: get\n          private: true\n          cors: true\n  updateMountain:\n    handler: methods/mountains/update.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: put\n          private: true\n          cors: true\n  deleteMountain:\n    handler: methods/mountains/delete.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: delete\n          private: true\n          cors: true\n"]},{"id":121947933,"files":["# NOTE: update this with your service name\nservice: sls-chrome-dom\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  chrome:\n    flags:\n      - --window-size=1280x1696\n      - --hide-scrollbars\n    functions:\n      - version\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  timeout: 30\n\nfunctions:\n  dom:\n    handler: src/handlers/dom.default\n    events:\n      - http:\n          path: dom\n          method: get\n\n  version:\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version\n          method: get\n"]},{"id":168502415,"files":["service: sls-dictionary-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_DEFAULT_REGION, 'eu-west-1'}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:*:*:table/${self:custom.dynamoDbTableName}\"\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.s3DefinitionBucketName}/*\"\n\npackage:\n  exclude:\n    - assets/**\n    - test/**\n    - .circleci/**\n    - .nyc_output/**\n    - .secrets/**\n    - .gitignore\n    - Makefile\n    - serverless.yml\n\nfunctions:\n  dictionary:\n    name: ${opt:stage, 'local'}-dictbot-read\n    handler: handlers/read.handler\n    description: \"a dictionary bot for Slack in ${opt:stage, 'local'}\"\n    memorySize: 128\n    timeout: 30\n    events:\n    - http:\n        path: dictionary\n        method: post\n    environment:\n      TABLE_NAME: ${self:custom.dynamoDbTableName}\n      BUCKET_NAME: ${self:custom.s3DefinitionBucketName}\n      BOT_TOKEN: ${env:SLACK_BOT_TOKEN}\n      CHALLENGE_TOKEN: ${env:SLACK_CHALLENGE_TOKEN}\n  update:\n    name: ${opt:stage, 'local'}-dictbot-update\n    handler: handlers/update.handler\n    description: \"updates the definitions for dictbot in ${opt:stage, 'local'}\"\n    memorySize: 512\n    timeout: 20\n    events:\n    - s3:\n        bucket: ${self:custom.s3DefinitionBucketName}\n        event: s3:ObjectCreated:*\n        rules:\n          - suffix: .json\n    environment:\n      TABLE_NAME: ${self:custom.dynamoDbTableName}\n      BUCKET_NAME: ${self:custom.s3DefinitionBucketName}\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  dynamoDbTableName: ${env:DYNAMODB_TABLE_NAME}\n  s3DefinitionBucketName: ${env:S3_DEFINITION_BUCKET_NAME}\n  output:\n    file: ./serverless-info.json\n\nresources:\n  Resources:\n    DefinitionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamoDbTableName}\n        AttributeDefinitions:\n          - AttributeName: Term\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Term\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n  Outputs:\n    DefinitionBucketName:\n      Value: ${self:custom.s3DefinitionBucketName}\n      Export:\n        Name: ${opt:stage, 'local'}DefinitionBucketName\n    DefinitionTableName:\n      Value: ${self:custom.dynamoDbTableName}\n      Export:\n        Name: ${opt:stage, 'local'}DefinitionTableName\n    "]},{"id":110466185,"files":["service: articles-dispenser-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    CONSUMER_KEY: \"SECRET\"\n    CLIENT_URL: \"URL\"\n\nplugins:  \n  - serverless-offline\n\nfunctions:\n  getRequestToken:\n    handler: handler.getRequestToken\n    events:\n      - http:\n          path: getRequestToken\n          method: get\n  getAccessToken:\n    handler: handler.getAccessToken\n    events:\n      - http:\n          path: getAccessToken\n          method: get\n          request: \n            parameters:\n              querystrings:\n                url: true\n  getArticles:\n    handler: handler.getArticles\n    events:\n      - http:\n          path: getArticles\n          method: get\n          request: \n            parameters:\n              querystrings:\n                url: true"]},{"id":171118301,"files":["service: serverless-google-photos-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-3\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n"]},{"id":162538060,"files":["service: cloudwatch-alarm-to-slack\n\ncustom:\n  config: ${file(./config.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeInstances\"\n        - \"codebuild:BatchGetProjects\"\n        - \"ecs:DescribeClusters\"\n        - \"ecs:ListTagsForResource\"\n        - \"codepipeline:GetPipeline\"\n      Resource: \"*\"\n  environment:\n    slack_path: ${self:custom.config.slack_path}\n    tag_name: cloudwatch-alarm-to-slack-isenabled\n\npackage:\n  exclude:\n    - README.md\n    - config.yml\n\nlayers:\n  cloudWatchAlarmToSlack:\n    path: layer\n\nfunctions:\n  ec2:\n    handler: events/ec2.handler\n    environment:\n      template_path: 'templates/events/ec2.tpl'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ec2\"\n            detail-type:\n              - \"EC2 Instance State-change Notification\"\n            detail:\n              state:\n                #- pending\n                - running\n                #- shutting-dwon\n                - stopped\n                #- stopping\n                #- terminated\n  codebuild:\n    handler: events/codebuild.handler\n    environment:\n      template_path: 'templates/events/codebuild.tpl'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - FAILED\n                - IN_PROGRESS\n                - STOPPED\n                - SUCCEEDED\n  ecs:\n    handler: events/ecs.handler\n    layers:\n      - {Ref: CloudWatchAlarmToSlackLambdaLayer}\n    environment:\n      template_path: 'templates/events/ecs.tpl'\n      emoji_running: \":runner::runner:\"\n      emoji_stopped: \":skull_and_crossbones:\"\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ecs\"\n            detail-type:\n              - \"ECS Task State Change\"\n  codepipeline:\n    handler: events/codepipeline.handler\n    layers:\n      - {Ref: CloudWatchAlarmToSlackLambdaLayer}\n    environment:\n      template_path: 'templates/events/codepipeline.tpl'\n      emoji_started: ':seedling:'\n      emoji_succeeded: ':rainbow::rainbow::rainbow:'\n      emoji_failed: \":sweat_drops:\"\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codepipeline\"\n            detail-type:\n              - \"CodePipeline Pipeline Execution State Change\"\n            detail:\n              state:\n                - CANCELED\n                - FAILED\n                - RESUMED\n                - STARTED\n                - SUCCEEDED\n                - SUPERSEDED\n"]},{"id":168984973,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: bad-curl # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  badCurl:\n    handler: handler.badCurl\n    events:\n      - http:\n          path: howdy.sh\n          method: get"]},{"id":164942356,"files":["service: uniqlo-product-search # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  checkstock:\n    handler: handler.checkstock\n"]},{"id":155314535,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-example # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  - ${file(./routes.yml)}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-plugin-include-dependencies\n\npackage:\n  individually: true\n\ncustom:\n  webpackIncludeModules:\n      packagePath: './package.json'"]},{"id":167232090,"files":["service:                   sirris-cloud-sec-demo\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage:                   ${opt:stage, self:provider.stage}\n  appName: sirrissecuritydemo\n    # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-secdemo\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  amplify:\n    - filename: ../frontend/src/aws-exports.js\n      type: javascript\n      appClient: CognitoUserPoolClient\n      s3bucket: disabled\n  fullstack:\n    domain: demo.security.denbot.co\n    certificate: arn:aws:acm:us-east-1:564006752217:certificate/788aca6a-2730-475e-a01b-f24aaac5ae97     # The ARN for the SSL cert to use form AWS CertificateManager\n    bucketName: roomba-demo-${self:custom.stage}                  # Unique name for the S3 bucket to host the client assets\n    distributionFolder: ../frontend/build            # Path to the client assets to be uploaded to S3\n    indexDocument: index.html                  # The index document to use\n    errorDocument: error.html                  # The error document to use\n    singlePageApp: true                       # If true 403 errors will be rerouted (missing assets) to your root index document to support single page apps like React and Angular where the js framework handles routing\n    apiPath: api                               # The path prefix for your API Gateway lambdas. The path for the lambda http event trigger needs to start with this too eg. api/myMethod\n    clientCommand: npm run build                   # Command to generate the client assets. Defaults to doing nothing\n    clientSrcPath: ../frontend                      # The path to where you want to run the clientCommand\n    # waf: 00000000-0000-0000-0000-000000000000  # ID of the Web Application Firewall. Defaults to not used\n    logging:\n      bucket: accesslogs-sirris-cloud.s3.amazonaws.com\n      prefix: ${self:custom.appName}-${self:custom.stage}\n\nprovider:\n  name:                    aws\n  runtime:                 nodejs8.10\n  stage:                   dev\n  region:                  eu-west-1\n  environment:\n    tableName: ${self:custom.tableName}\n  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [ NotesTable, Arn ]\n\nfunctions:\n  listNotes:\n    handler:               list.main\n    timeout:               3\n    memorySize:            128\n    events:\n      - http:\n          path:            api/notes\n          method:          get\n          authorizer:      aws_iam\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n\n  createNote:\n    handler:               create.main\n    timeout:               3\n    memorySize:            128\n    events:\n      - http:\n          path:            api/notes\n          method:          post\n          authorizer:      aws_iam\n          cors:\n              origin: '*'\n              headers:\n                - Content-Type\n                - X-Amz-Date\n                - Authorization\n                - X-Api-Key\n                - X-Amz-Security-Token\n                - X-Amz-User-Agent\n              allowCredentials: false\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # dynamodb table\n  - ${file(resources/dynamodb-notes-table.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\nplugins:\n  - serverless-webpack\n  - aws-amplify-serverless-plugin\n  - fullstack-serverless\n"]},{"id":107531749,"files":["provider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: \"*\"\n\nservice: s3-signature\nfunctions:\n  sign:\n    handler: handler.sign\n    warmup: true\n    events:\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: ${file(./config.yml):AccessControlAllowOrigin}\n            headers:\n              - Content-Type\n              - Origin\n              - X-Amz-ACL\n              - X-Amz-Date\n              - Authorization\n              - X-Requested-With\n              - Cache-Control\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n    environment:\n      AccessControlAllowOrigin: ${file(./config.yml):AccessControlAllowOrigin}\n\nplugins:\n  - serverless-plugin-warmup"]},{"id":144123928,"files":["service: media-scraper\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}\n    AWS_S3_REGION: ${env:AWS_S3_REGION}\n    AWS_S3_ACCESS_KEY_ID: ${env:AWS_S3_ACCESS_KEY_ID}\n    AWS_S3_SECRET_ACCESS_KEY: ${env:AWS_S3_SECRET_ACCESS_KEY}\n  memorySize: 256\n\nfunctions:\n  pull:\n    handler: src/handler.pull\n    timeout: 300\n    events:\n      - http:\n          path: /pull\n          method: post\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 3000\n    host: \"0.0.0.0\"\n\n  webpack:\n    webpackConfig: webpack.config.js\n"]},{"id":166602594,"files":["service: catsPlease\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-2\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'yarn'\nfunctions:\n  catsPlease:\n    handler: handler.sendCats\n    events:\n      - http:\n          path: cats\n          method: get\nplugins:\n- serverless-webpack\n"]},{"id":129308810,"files":["service: newrelic-sms-alerts\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \"*\"\n\nfunctions:\n  webhook:\n    name: newrelic-sms-alerts-webhook\n    memorySize: 128\n    timeout: 120\n    handler: index.handler\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true"]},{"id":166656787,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\napp: APPNAME # NOTE: update this with your app name\ntenant: TENENT # NOTE: update this with your tenant name\nservice: SERVICENAME # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  # you can overwrite defaults here\n  stage: STAGENAME # NOTE: update this with your stage name\n  region: REGIONNAME # NOTE: update this with aws region\n\n# you can add packaging information here\npackage:\n  include:\n    - .env\n    - actions/**\n    - bin/**\n    - config/**\n    - graphql/**\n    - lib/**\n    - package.json\n  excludeDevDependencies: false\n\nfunctions:\n  hello:\n    handler: index.exe\n    events:\n      - http:\n          method: post\n          path: /\n          integration: lambda\n          response:\n            statusCodes:\n              200:\n                pattern: '' # Default response method\n                template:\n                  application/json: $input.path(\"$.body\") # JSON return object\n            headers:\n              Content-Type: \"'application/json'\"\n\n\n    #    Define function environment variables here\n    environment:\n      TOKEN: GITHUB_TOKEN # NOTE: update this with your github access token\n      WEBHOOK_SECRET: GITHUB_WEBHOOK_SECRET # NOTE: update this with your github webhook secret\n      SLS_DEBUG: SERVERLESS_DEBUG_VALUE # NOTE: update this with serverless debug value\n"]},{"id":164812110,"files":["service: site-ses\n\n# Use the `serverless-webpack` plugin to transpile ES6.\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# `serverless-webpack` configuration\n# Enable auto-packing of external modules.\ncustom:\n  environment: ${file(env.yml):${self:provider.stage}}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: ${self:custom.environment.REGION}\n  environment: ${self:custom.environment}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n\nfunctions:\n  siteMailer:\n    handler: handler.siteMailer\n    events:\n      - http:\n          method: post\n          path: site-mailer\n          cors: true\n"]},{"id":165039320,"files":["service: sls-ci\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\npackage:\n  include:\n    - handler.js\n    - LICENSE\n    - package.json\n    - \"package-lock.json\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n    - http:\n        path: hello\n        method: get\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  output:\n    file: ./serverless-info.json"]},{"id":123687149,"files":["service: serverless-example\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: yarn\n  functionPrefix: serverless-example-${ self:provider.stage }\n  cognitoUserPoolId: ap-northeast-1_XXXXXXXXX\n  cognitoUserPoolArn: arn:aws:cognito-idp:ap-northeast-1:XXXXXXXXX:userpool/${ self:custom.cognitoUserPoolId }\n  RDSVPC:\n    securityGroupIds:\n      - sg-xxxxxxxx\n    subnetIds:\n      - subnet-xxxxxxxx\n      - subnet-xxxxxxxx\n  iamLambdaCloudWatchRoleAction:\n    - logs:CreateLogGroup\n    - logs:CreateLogStream\n    - logs:PutLogEvents\n  authorizer:\n    name: authorizer\n    type: TOKEN\n    identitySource: method.request.header.Authorization\n    identityValidationExpression: Bearer (.*)\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-1\n  stage: ${ opt:stage, 'dev' }\n  apiKeys:\n    - ServerlessExample\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iot:Connect\n        - iot:Publish\n      Resource:\n        - '*'\n  environment:\n    IOT_ENDPOINT: xxxxxxxxxxxxxx-ats.iot.ap-northeast-1.amazonaws.com\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n\nfunctions:\n  authorizer:\n    handler: functions/authorizer.handler\n    name: ${ self:custom.functionPrefix }-authorizer\n    description: Authorizer\n\n  hello:\n    handler: functions/hello.handler\n    name: ${ self:custom.functionPrefix }-hello\n    description: Hello\n    vpc: ${ self:custom.RDSVPC }\n    events:\n      - http:\n          path: hello\n          method: get\n          private: true\n          authorizer: ${ self:custom.authorizer }\n\n  cognitoSignIn:\n    handler: functions/cognitoSignIn.handler\n    name: ${ self:custom.functionPrefix }-cognito-sign-in\n    description: Authorize token\n    role: IamRoleLambdaCognitoAdminInitiateAuth\n    events:\n      - http:\n          path: signin\n          method: post\n          private: true\n\n  cognitoAuthHello:\n    handler: functions/cognitoAuthHello.handler\n    name: ${ self:custom.functionPrefix }-cognito-auth-hello\n    description: Cognito Auth Hello\n    events:\n      - http:\n          path: cognito-hello\n          method: get\n          private: true\n          authorizer:\n            arn: ${ self:custom.cognitoUserPoolArn }\n\n  iotPublishData:\n    handler: functions/iotPublishData.handler\n    name: ${ self:custom.functionPrefix }-iot-publish-data\n    description: IoT publish data.\n\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${ self:service }-${ self:provider.stage }\n        Description: ServerlessExample\n    IamRoleLambdaCognitoAdminInitiateAuth:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${ self:service }-${ self:provider.stage }-cognito-admin-initiate-auth\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        Policies:\n          - PolicyName: AmazonCognitoAdminInitiateAuth\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - cognito-idp:AdminInitiateAuth\n                  Resource: ${ self:custom.cognitoUserPoolArn }\n                - Effect: Allow\n                  Action: ${ self:custom.iamLambdaCloudWatchRoleAction }\n                  Resource:\n                  - 'Fn::Join':\n                    - ':'\n                    -\n                      - 'arn:aws:logs'\n                      - Ref: 'AWS::Region'\n                      - Ref: 'AWS::AccountId'"]},{"id":164882273,"files":["service: chatbot\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: yarn\n  functionPrefix: chatbot-${ self:provider.stage }\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-1\n  stage: ${ opt:stage, 'dev' }\n  memorySize: 128\n  environment:\n    LINE_CHANNEL_ACCESS_TOKEN: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    LINE_CHANNEL_SECRET: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    DEFAULT_RICH_MENU: richmenu-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n\nfunctions:\n  lineWebhook:\n    handler: functions/lineWebhook.handler\n    name: ${ self:custom.functionPrefix }-lineWebhook\n    description: LINE webhook.\n    events:\n      - http:\n          path: webhook/line\n          method: post\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${ self:service }-${ self:provider.stage }\n        Description: Chatbot API\n"]},{"id":164843444,"files":["service: ps-slack\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10 \n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:SendMessage\"\n        - \"sqs:GetQueueUrl\"\n      Resource: \n        Fn::GetAtt:\n          - CommandQueue\n          - Arn  \n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:ListQueues\"\n      Resource: \n         Fn::GetAtt:\n          - CommandQueue\n          - Arn       \n\ncustom:\n  baseUrl: v1\n  mosUrl: https://www.oracle.com/search/results/_/N-33y?No=0&Nr=106&Nrpp=5&Ntk=SI-ALL5&Ntt=\n  product: E92519_02\n\nfunctions:\n  pbSlackCommand:\n    handler: handler.pbCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/pb-search\n          method: post\n    environment:\n      QUEUE: \n        Ref: CommandQueue\n\n  mosSlackCommand:\n    handler: handler.mosCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/mos-search\n          method: post\n    environment:\n      QUEUE:\n        Ref: CommandQueue\n\n  commandHandler:\n    handler: handler.commandHandler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CommandQueue\n              - Arn\n          batchSize: 1\n    environment:\n      PRODUCT:  ${self:custom.product}\n      MOSURL:  ${self:custom.mosUrl}\n      \nresources:\n  Resources:\n    CommandQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"PS-BOT-COMMANDS\"\n        VisibilityTimeout: 60\n        MessageRetentionPeriod: 120\n\n"]},{"id":164398248,"files":["---\nservice: gateway # NOTE: Don't put the word \"google\" in here\n\nframeworkVersion: \"=1.35.1\"\n\nprovider:\n  name: google\n  runtime: nodejs8\n  project: addianto\n  credentials: ../keyfile.json\n  memorySize: 128\n  timeout: 30s\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - ./*.test.js\n    - .gitignore\n    - .git/**\n\nfunctions:\n  postmark:\n    handler: postmark\n    events:\n      - http: path\n  storePostmark:\n    handler: storePostmark\n    events:\n      - event:\n          eventType: providers/cloud.pubsub/eventTypes/topic.publish\n          resource: projects/addianto/topics/postmark\n          # resource: projects/*/topics/postmark (FAULT: RESOURCE_ERROR)\n","---\nservice: pushbullet # NOTE: Don't put the word \"google\" in here\n\nframeworkVersion: \"=1.35.1\"\n\nprovider:\n  name: google\n  runtime: nodejs8\n  project: addianto\n  credentials: ../keyfile.json\n  memorySize: 128\n  timeout: 30s\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - ./*.test.js\n\nfunctions:\n  pushPostmark:\n    handler: pushPostmark\n    environment:\n      PUSHBULLET_API_TOKEN: ${file(../.env.yml):PUSHBULLET_API_TOKEN, \"\"}\n      PUSHBULLET_EMAIL: ${file(../.env.yml):PUSHBULLET_EMAIL, \"\"}\n    events:\n      - event:\n          eventType: providers/cloud.firestore/eventTypes/document.create\n          resource: projects/addianto/databases/(default)/documents/postmark/{email}\n"]},{"id":164192940,"files":["service: serverless-authentication # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  profile: serverless-authentication\n  runtime: nodejs8.10\n  stage: ${opt:stage,'development'}\n  region: us-west-2\n  environment: ${file(secrets.yml):${self:provider.stage}}\n\ncustom:\n  webpack:\n    includeModules: true\n    packager: yarn\n    packagePath: './package.json'\n  authorizers:\n    user:\n      name: userAuthHandler\n      identitySource: method.request.header.Authorization\n      type: request        \n\npackage:\n  individually: true\n  exclude:\n    - 'node_modules/**'\n    - 'secrets.yml'\n    - '.git/**'\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nfunctions:\n  - ${file(./src/routes/auth.routes.yml)}\n  - ${file(./src/routes/users.routes.yml)}\n      "]},{"id":137493334,"files":["service: my-service\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-s3-cloudfront-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'staging'}\n  region: us-east-2\n\ncustom:\n  s3Bucket: my-service-${self:provider.stage}\n  distFolder: build\n  distroId: MyWebApp\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - s3:GetObject\n              Effect: Allow\n              Principal: \"*\"\n              Sid: PublicReadGetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n            - Action: \n                - s3:*\n              Effect: Deny\n              Principal: \"*\"\n              Condition:\n                Bool:\n                  aws:SecureTransport: false\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          PriceClass: PriceClass_100 # PriceClass_100 | PriceClass_200 | PriceClass_All\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: ${self:custom.distroId}\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: ${self:custom.distroId}\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info -v` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebsiteDistribution:\n      Value:\n        'Fn::GetAtt': [ WebsiteDistribution, DomainName ]\n"]},{"id":161864787,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-offline\n\nregion: ap-northeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":163147869,"files":["service: highcharts\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: us-east-1\n  memorySize: 512\n  timeout: 10\n\nlayers:\n  phantomjs:\n    path: bin\n\nfunctions:\n  graph:\n    handler: handler.graph\n    events:\n      - http:\n          path: /\n          method: ANY\n          contentHandling: CONVERT_TO_BINARY\n          cors:\n            origin: '*'\n            maxAge: 86400\n            allowCredentials: true\n    layers:\n      - {Ref: PhantomjsLambdaLayer}\n"]},{"id":163147731,"files":["service: polyfill\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment:\n    NODE_ENV: production\n\npackage:\n  exclude:\n  - test/\n\nfunctions:\n  minified:\n    handler: handler.mininify\n    events:\n    - http:\n        path: polyfill.min.js\n        method: GET\n        cors:\n          origin: '*'\n          maxAge: 86400\n          allowCredentials: true\n\n  normal:\n    handler: handler.normal\n    events:\n    - http:\n        path: polyfill.js\n        method: GET\n        cors:\n          origin: '*'\n          maxAge: 86400\n          allowCredentials: true\n"]},{"id":92340656,"files":["service: garden-api\n#exclude everything that's not our bundle to save lots of disk space.\npackage:\n    exclude:\n        - ./**\n    include:\n        - build/**\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  #generates an api key, we need to do some quick manual work to get this working with our functions.\n  apiKeys:\n    - garden-api-${opt:stage, self:provider.stage}-secret\n  #dynamic environemental variables for our table names because hard coding is bad\n  environment:\n    GARDEN_TABLE: garden-${self:service}-${opt:stage, self:provider.stage}\n    SENSOR_DATA_TABLE: sensordata-${self:service}-${opt:stage, self:provider.stage}\n  #Quick and dirty db permissions for our functions. This would be dangerous if dealing with important data.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GARDEN_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SENSOR_DATA_TABLE}\"\nfunctions:\n  #public functions\n  getGardenList:\n    handler: build/bundle.getGardenList\n    events:\n      - http:\n          path: garden\n          method: get\n          cors: true\n  getGarden:\n    handler: build/bundle.getGarden\n    events:\n      - http:\n          path: garden/{gardenId}\n          method: get\n          cors: true\n  getSensorData: \n      handler: build/bundle.getSensorData\n      events:\n        - http:\n            path: garden/{gardenId}/sensor/{sensorType}\n            method: get\n            cors: true\n  #private functions\n  createGarden:\n    handler: build/bundle.createGarden\n    events:\n      - http:\n          path: garden\n          method: post\n          cors: true\n          private: true\n  postSensorData: \n      handler: build/bundle.postSensorData\n      events:\n        - http:\n            path: garden/{gardenId}/sensor/{sensorType}\n            method: post\n            cors: true\n            private: true\nresources:\n  Resources:\n    GardenTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.GARDEN_TABLE}\n    SensorDataTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: garden\n            AttributeType: S\n          -\n            AttributeName: ts \n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: garden\n            KeyType: HASH\n          -\n            AttributeName: ts\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SENSOR_DATA_TABLE}\n"]},{"id":161861382,"files":["service: pinpoint-autoevent\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\n# plugins:\n#   - serverless-dynamodb-local\n#   - serverless-offline\n#   - serverless-plugin-multiple-responses\n\nplugins:\n  - serverless-sam\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\npackage:\n  exclude:\n    - CognitoUserPool\n\nprovider:\n  name: aws\n  timeout: 300\n  profile: ${file(./config/aws_params.yml):profile}\n  region: ${file(./config/aws_params.yml):region}\n  stage: ${file(./config/aws_params.yml):stage}\n  tags: \n    env: ${file(./config/aws_params.yml):stage}\n  memorySize: 1536\n  stackTags: \n    projectname: pinpoint-autoevent\n  deploymentBucket: ${file(./config/aws_params.yml):DEPLOYMENT_S3_BUCKET}\n  versionFunctions: false\n  runtime: nodejs6.10\n  # apiKeys: false\n # role: arn:aws:iam::765167583057:role/bing-scraper-pr-us-east-2-lambdaRole\n # cfnRole: arn:aws:iam::765167583057:role/bing-scraper-pr-us-east-2-lambdaRole\n  # apiKeys:\n  #   - googlesearchkey1\n  #   - googlesearchkey2\n  #   - googlesearchkey3\n  # usagePlan:\n  #   quota:\n  #     limit: 1000\n  #     offset: 2\n  #     period: DAY\n  #   throttle:\n  #     burstLimit: 200\n  #     rateLimit: 100\n  #arn:aws:mobiletargeting:us-east-1:${file(./config/aws_params.yml):AWS_ACCOUNT_ID}:apps/${file(./config/aws_params.yml):PINPOINT_APP_ID}/events\n  environment:\n    PINPOINT_APP_ID: ${file(./config/aws_params.yml):PINPOINT_APP_ID}\n    AWS_REGION_NAME: ${file(./config/aws_params.yml):region}\n    PINPOINT_API_ENDPOINT: ${file(./config/aws_params.yml):PINPOINT_ENDPOINT}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - mobiletargeting:PutEvents\n      Resource: \"arn:aws:mobiletargeting:us-east-1:${file(./config/aws_params.yml):AWS_ACCOUNT_ID}:*\"\n  stackPolicy: \n    - Effect: Allow\n      Principal: \"*\"\n      Action: \"Update:*\"\n      Resource: \"*\"\n    - Effect: Deny\n      Principal: \"*\"\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n\nfunctions:\n  pinpointAddevent:\n    handler: src/pinpoint/addEvent.addEvent\n    events:\n      - http:\n          path: pinpoint/addEvent\n          method: get\n          cors: true\n          integration: lambda\n"]},{"id":161361636,"files":["service: replaceninja\n\nframeworkVersion: \">=1.34.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n  environment:\n    LINK_TABLE: ${self:custom.linkTable}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n      Resource: \"arn:aws:dynamodb:us-east-2:334069501049:table/ProdNinjaLinkTable\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Query\"\n      Resource: \"arn:aws:dynamodb:us-east-2:334069501049:table/ProdNinjaLinkTable/index/ByLocation\"\n\ncustom:\n  linkTable: ProdNinjaLinkTable\n\nfunctions:\n  index:\n    handler: src/index.handler\n    events:\n      - http:\n          path: '/'\n          method: 'get'\n  replace:\n    handler: src/handler.handler\n    events:\n      - http:\n          path: '/{key+}'\n          method: get\n          cors: true\n  update:\n    handler: src/update.handler\n    events:\n      - http:\n          path: 'update'\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    LinkTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ProdNinjaLinkTable\n        KeySchema:\n          - AttributeName: Key\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: Key\n            AttributeType: S\n          - AttributeName: location\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: ByLocation\n            KeySchema: \n              - AttributeName: location\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n"]},{"id":131467646,"files":["service: rs-input-fetcher\nprovider:\n  name: aws\n  runtime: go1.x\n  region: us-east-1\n  profile: na_staging\n  stage: global\n  memorySize: 128\n  vpc:\n    securityGroupIds:\n      - sg-c54d7c8c\n    subnetIds:\n      - subnet-e10b0db9\n      - subnet-17d4225e\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\nfunctions:\n  fetch_elsm_acct:\n    handler: bin/fetcher\n    events:\n      - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_ELSM_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_ELSM_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-3.rightscale.com\"\n    timeout: 300\n  fetch_gcc_acct:\n    handler: bin/fetcher\n    events:\n    - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_GCC_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_GCC_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-4.rightscale.com\"\n    timeout: 300\n  fetch_s1naprod_acct:\n    handler: bin/fetcher\n    events:\n    - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_S1NAPROD_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_S1NAPROD_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-4.rightscale.com\"\n    timeout: 300"]},{"id":152767306,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-user-mgmt-2 # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:ENV_STAGE}\n  region: ${env:ENV_REGION}\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:us-east-1:656168058398:table/users\"\n        - \"arn:aws:dynamodb:us-east-1:656168058398:table/users/index/emailIndex\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  ping:\n    handler: homeHandler.ping\n    events:\n      - http:\n          path: ping\n          method: get\n          cors: true\n  register:\n    handler: homeHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n  login:\n    handler: homeHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n  refreshToken:\n    handler: homeHandler.refreshToken\n    events:\n      - http:\n          path: refreshtoken\n          method: post\n          cors: true\n  changePassword:\n    handler: homeHandler.changePassword\n    events:\n      - http:\n          path: changepassword\n          method: post\n          cors: true\n\n  getUsers:\n    handler: apiHandler.getUsers\n    events:\n      - http:\n          path: api/v1/users\n          method: get\n          cors: true\n  getUser:\n    handler: apiHandler.getUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: get\n          cors: true\n  postUser:\n    handler: apiHandler.postUser\n    events:\n      - http:\n          path: api/v1/users\n          method: post\n          cors: true\n  putUser:\n    handler: apiHandler.putUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: put\n          cors: true\n  deleteUser:\n    handler: apiHandler.deleteUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: delete\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\ncustom:\n  serverless-offline:\n    port: 5000\n"]},{"id":94977834,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-webpack-pluginless-starter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  serverless-offline:\n    host: ${file(./env.js):devServer.host}\n    port: ${file(./env.js):devServer.port}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  exclude:\n   - node_modules/**\n   - functions/**\n\nfunctions:\n  hello:\n    handler: dist/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":159585157,"files":["service: ${self:custom.name}\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n  timeout: 30\n  memorySize: 512\n  apiKeys:\n    - ${self:custom.stackName}-key\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: 'arn:aws:s3:::${self:custom.s3BucketName}*'\n\npackage:\n  individually: true\n\nfunctions:\n  api:\n    handler: src/api.handler\n    events:\n      # - http:\n      #     method: any\n      #     path: /{proxy+}\n      #     private: true\n      #     cors: true\n      # - http:\n      #     method: any\n      #     path: /\n      #     private: true\n      #     cors: true\n      - http:\n          method: POST\n          path: /\n          private: true\n          cors: true\n      - http:\n          method: POST\n          path: /getSignedUrl\n          private: true\n          cors: true\n      - http:\n          method: GET\n          path: /ping\n          private: true\n          cors: true\n\n    environment:\n      S3_BUCKET_NAME: ${self:custom.s3BucketName}\n      MAX_FILE_SIZE_MB: 10\n      MAX_WIDTH_PIXELS: 10000\n      MAX_HEIGHT_PIXELS: 10000\n      ALLOWED_IMAGE_TYPES: jpeg,jpg,png\ncustom:\n  name: christian-test\n  region: ${opt:region, 'ap-southeast-2'}\n  stage: ${opt:stage, 'tst'}\n  stackName: ${self:service}-${self:custom.stage}\n  s3BucketName: fileupload-bucket-christian-test\n  webpack:\n    includeModules:\n      forceExclude:\n      - aws-sdk\n      - serverless\n    webpackConfig: ${self:custom.webpack.webpackConfigMap.${self:custom.stage}}\n    webpackConfigMap:\n      tst: ./internals/webpack/webpack.dev.config.js\n      stg: ./internals/webpack/webpack.dev.config.js\n      prd: ./internals/webpack/webpack.prod.config.js\nresources:\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3BucketName}\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins: ['*']\n              AllowedHeaders: ['*']\n              AllowedMethods: ['GET', 'PUT']\n"]},{"id":160588008,"files":["service: auto-checker-visa\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\nusagePlan: \n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n      \nfunctions:\n\n  checker:\n    handler: handler.checker \n    events:\n      - schedule: rate(60 minutes)\n"]},{"id":85357068,"files":["service: demo\n\ncustom:\n  local:\n    accountId: {this will be yours}\n    emailAlert: {this will be yours}\n    emailSource: alertsdemo@mobileposse.com\n    logGroup: arn:aws:logs:us-east-1:local:log-group:/aws/lambda/*:*:*\n    redisHost: localhost\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: {this will be yours}\n    stage: local\n    stream: arn:aws:kinesis:us-east-1:{this will be yours}:stream/demo-test\n    streamName: demo-local\n    subnet: {this will be yours}\n  test:\n    accountId: {this will be yours}\n    emailAlert: {this will be yours}\n    emailSource: {this will be yours}\n    logGroup: arn:aws:logs:us-east-1:test:log-group:/aws/lambda/*:*:*\n    redisHost: demo-test.z6hach.0001.use1.cache.amazonaws.com\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: {this will be yours}\n    stage: test\n    stream: arn:aws:kinesis:us-east-1:{this will be yours}:stream/demo-test\n    streamName: demo-test\n    subnet: {this will be yours}\n\nprovider:\n  name: aws\n  runtime: ${self:custom.${opt:stage}.runtime}\n  region: ${self:custom.${opt:stage}.region}\n  stage: ${self:custom.${opt:stage}.stage}\n  environment:\n    EMAIL_ALERT: ${self:custom.${opt:stage}.emailAlert}\n    EMAIL_SOURCE: ${self:custom.${opt:stage}.emailSource}\n    REDIS_HOST: ${self:custom.${opt:stage}.redisHost}\n    REDIS_PORT: ${self:custom.${opt:stage}.redisPort}\n    REGION: ${self:custom.${opt:stage}.region}\n    STAGE: ${opt:stage}\n    STREAM: ${self:custom.${opt:stage}.streamName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: ${self:custom.${opt:stage}.logGroup}\n    - Effect: \"Allow\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:AttachNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n        - ec2:DetachNetworkInterface\n        - ec2:ModifyNetworkInterfaceAttribute\n        - ec2:ResetNetworkInterfaceAttribute\n        - autoscaling:CompleteLifecycleAction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - kinesis:*\n      Resource: ${self:custom.${opt:stage}.stream}\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\n# items under stream must be indented four spaces\n# or \"EventSourceMapping\" will not be created (as\n# arn is a property of stream, not a peer)\nfunctions:\n  publish:\n    name: demo-publish-${opt:stage}\n    handler: publish.publishStream\n    description: ${self:service} - publish device stream\n    events:\n      - schedule: rate(1 minute)\n  consume:\n    handler: consume.consumeStream\n    name: demo-consume-${opt:stage}\n    description: ${self:service} - consume device stream\n    memorySize: 1024\n    timeout: 300\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n    events:\n      - stream:\n          arn: ${self:custom.${opt:stage}.stream}\n          batchSize: 2\n          startingPosition: TRIM_HORIZON\n  configure:\n    handler: configure.configureKeywords\n    name: demo-config-${opt:stage}\n    description: ${self:service} - configure keywords\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  report:\n    handler: report.reportMetrics\n    name: demo-report-${opt:stage}\n    description: ${self:service} - report metrics\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  reset:\n    handler: reset.resetCache\n    name: demo-reset-${opt:stage}\n    description: ${self:service} - flush cache\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n","service: demo\n\ncustom:\n  local:\n    accountId: MISSING_ACCOUNT\n    emailAlert: MISSING_SES_VALIDATED_EMAIL\n    emailSource: MISSING_SES_VALIDATED_EMAIL.com\n    logGroup: arn:aws:logs:us-east-1:local:log-group:/aws/lambda/*:*:*\n    redisHost: localhost\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: MISSING_SECURITY_GROUP\n    stage: local\n    stream: MISSING_STREAM_ARN\n    streamName: demo-local\n    subnet: MISSING_PRIVATE_SUBNET\n  test:\n    accountId: MISSING_ACCOUNT\n    emailAlert: MISSING_SES_VALIDATED_EMAIL\n    emailSource: MISSING_SES_VALIDATED_EMAIL\n    logGroup: arn:aws:logs:us-east-1:test:log-group:/aws/lambda/*:*:*\n    redisHost: demo-test.z6hach.0001.use1.cache.amazonaws.com\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: MISSING_SECURITY_GROUP\n    stage: test\n    stream: MISSING_STREAM_ARN\n    streamName: demo-test\n    subnet: MISSING_PRIVATE_SUBNET\n\nprovider:\n  name: aws\n  runtime: ${self:custom.${opt:stage}.runtime}\n  region: ${self:custom.${opt:stage}.region}\n  stage: ${self:custom.${opt:stage}.stage}\n  environment:\n    EMAIL_ALERT: ${self:custom.${opt:stage}.emailAlert}\n    EMAIL_SOURCE: ${self:custom.${opt:stage}.emailSource}\n    REDIS_HOST: ${self:custom.${opt:stage}.redisHost}\n    REDIS_PORT: ${self:custom.${opt:stage}.redisPort}\n    REGION: ${self:custom.${opt:stage}.region}\n    STAGE: ${opt:stage}\n    STREAM: ${self:custom.${opt:stage}.streamName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: ${self:custom.${opt:stage}.logGroup}\n    - Effect: \"Allow\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:AttachNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n        - ec2:DetachNetworkInterface\n        - ec2:ModifyNetworkInterfaceAttribute\n        - ec2:ResetNetworkInterfaceAttribute\n        - autoscaling:CompleteLifecycleAction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - kinesis:*\n      Resource: ${self:custom.${opt:stage}.stream}\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\n# items under stream must be indented four spaces\n# or \"EventSourceMapping\" will not be created (as\n# arn is a property of stream, not a peer)\nfunctions:\n  publish:\n    name: demo-publish-${opt:stage}\n    handler: publish.publishStream\n    description: ${self:service} - publish device stream\n    events:\n      - schedule: rate(1 minute)\n  consume:\n    handler: consume.consumeStream\n    name: demo-consume-${opt:stage}\n    description: ${self:service} - consume device stream\n    memorySize: 1024\n    timeout: 300\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n    events:\n      - stream:\n          arn: ${self:custom.${opt:stage}.stream}\n          batchSize: 2\n          startingPosition: TRIM_HORIZON\n  configure:\n    handler: configure.configureKeywords\n    name: demo-config-${opt:stage}\n    description: ${self:service} - configure keywords\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  report:\n    handler: report.reportMetrics\n    name: demo-report-${opt:stage}\n    description: ${self:service} - report metrics\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  reset:\n    handler: reset.resetCache\n    name: demo-reset-${opt:stage}\n    description: ${self:service} - flush cache\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n"]},{"id":160203905,"files":["service: templateService # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  individually: true\n\nfunctions:\n  getExample:\n    handler: src/getHandler.getFunction\n    package:\n      exclude:\n        - ./**\n      include:\n        - src/getHandler.js\n    events:\n      - http:\n          path: get/{name}\n          method: get\n          request: \n            parameter:\n              paths:\n                name: true\n  postExample:\n    handler: src/postHandler.postFunction\n    package:\n      exclude:\n        - ./**\n      include:\n        - src/postHandler.js\n    events:\n      - http:\n          path: post\n          method: post\n"]},{"id":160204914,"files":["service: serverless-qiita-advent-sample\n\ncustom:\n  defaultStage: dev\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n  environment: \n    SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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\n\npackage:\n  exclude:\n    - .git/**\n\nfunctions:\n  postSlack:\n    handler: handler.postSlack\n    events:\n      - http:\n          path: slack\n          method: post\n          cors: true\n"]},{"id":72126987,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: blake-devmtn-imgur\n# NOTE: update this with your service name\n\n# It will be the base of the CloudFormation stack name, and bucket of where\n# files are stored. Please pick something globally unique.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: dev\n  region: us-west-2\n  # you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        {\n          'Fn::Join':\n            ['', ['arn:aws:s3:::', { 'Ref': 'ServerlessDeploymentBucket' }]],\n        }\n    - Effect: 'Allow'\n      Action:\n        - 's3:PutObject'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'ServerlessDeploymentBucket'\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'S3Bucket'\n    - Effect: 'Allow'\n      Action:\n        - 's3:PutObject'\n        - 's3:GetObject'\n        - 's3:PutObjectAcl'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'S3Bucket'\n            - '/*'\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  appBucket: ${self:service}-store-${self:custom.stage}\n  writeEnvVars:\n    SERVERLESS_STAGE: ${self:custom.stage}\n    SERVERLESS_SERVICE_NAME: ${self:service}\n    SERVICE_BUCKET: ${self:custom.appBucket}\n    SERVICE_S3_URL_PREFIX: https://s3-${self:provider.region}.amazonaws.com/${self:custom.appBucket}/\n\n# you can add packaging information here\npackage:\n  exclude:\n    - node_modules/aws-sdk/*\n#  artifact: my-service-code.zip\n\nplugins:\n  - serverless-plugin-write-env-vars\n  - serverless-run-function-plugin\n\nfunctions:\n  sign:\n    handler: handler.sign\n    package:\n      exclude:\n        - node_modules/aws-sdk/*\n\n    #    The following are a few example events you can configure\n    #    NOTE: Please make sure to change your handler code to work with those events\n    #    Check the event documentation for details\n    events:\n      - http:\n          path: uploads/sign\n          method: POST\n          cors: true\n          #  integration: lambda\n          #  request:\n          #    parameters:\n          #      headers:\n          #        contentType: true\n          #  response:\n          #    headers:\n          #      Content-Type: \"'application/json'\"\n#   - s3: ${env:BUCKET}\n#   - schedule: rate(10 minutes)\n#   - sns: greeter-topic\n#   - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\nresources:\n  Parameters:\n    S3BucketParam:\n      Type: String\n      MaxLength: 128\n      MinLength: 1\n      Default: ${self:custom.appBucket}\n      AllowedPattern: '.*'\n      Description: 'The name of the bucket where stuff is stored'\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.appBucket}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - 'POST'\n                - 'PUT'\n              AllowedOrigins:\n                - '*.cloudfront.net'\n                - '*.s3.amazonaws.com'\n                - '*.s3-us-west-2.amazonaws.com'\n              Id: myCORSRuleId1\n              MaxAge: 600\n            - AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - 'GET'\n              AllowedOrigins:\n                - '*'\n              Id: myCORSRuleId2\n              MaxAge: 600\n      DeletionPolicy: Delete\n    S3BucketPolicy:\n      Type: 'AWS::S3::BucketPolicy'\n      Properties:\n        Bucket:\n          Ref: 'S3Bucket'\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'S3Bucket'\n                    - '/*'\n  Outputs:\n    BucketName:\n      Description: 'The bucket for ${self:custom.appBucket}.'\n      Value:\n        Ref: S3Bucket\n"]},{"id":160147692,"files":["service: cross-stack-demo-dynamodb-stack \n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\ncustom:\n  serviceName: CrossStackDemo\n  ddbUserTable: ${self:custom.serviceName}-${opt:stage, self:provider.stage}-UserTable\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  stage: dev\n  #deploymentBucket: com.stanleyyong.serverless-deployments\n\nresources:\n  Resources:\n\n    #################\n    # DynamoDB config\n    #################\n    UserTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:custom.ddbUserTable}\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S   \n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n  Outputs:\n    UserTableArn:\n      Value: !GetAtt UserTable.Arn\n      Export:\n        Name: ${self:custom.ddbUserTable}Arn\n\n","service: cross-stack-demo-lambda-stack \n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\ncustom:\n  serviceName: CrossStackDemo\n  ddbUserTable: ${self:custom.serviceName}-${opt:stage, self:provider.stage}-UserTable\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  stage: dev\n  #deploymentBucket: com.stanleyyong.serverless-deployments\n  environment:\n    DYNAMODB_USER_TABLE: ${self:custom.ddbUserTable}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \n        - Fn::ImportValue: ${self:custom.ddbUserTable}Arn\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n"]},{"id":159502374,"files":["service: ciacka-net-api\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  environment:\n    SENDER_EMAIL: ${ssm:contactFormSenderEmail}\n    RECEIVER_EMAIL: ${ssm:contactFormReceiverEmail}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendMailApp:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":106862044,"files":["service: favi\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: tremorlab\n  apiKeys:\n    - favi-web-key\n    - favi-seed-key\n  usagePlan:\n    quota:\n      limit: 1000\n      period: DAY\n    throttle:\n      rateLimit: 5\n      burstLimit: 10\n  environment:\n    DEBUG: \"*\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n        - dynamodb:BatchWriteItem\n        - dynamodb:BatchGetItem\n      Resource: arn:aws:dynamodb:*:*\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::favi-*/*\n    - Effect: \"Allow\"\n      Action:\n        - sns:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: \"*\"\n\nplugins:\n  - serverless-plugin-custom-domain\n\ncustom:\n  domain: \"favi-api.andrhamm.com\"\n\npackage:\n  exclude:\n    - app\n    - seed.rb\n    - '*.csv*'\n    - ruby\n    - vendor\n    - .bundle \n    - '*.rb'\n    - 'Gemfile*'\n\nfunctions:\n  readFave:\n    description: HTTP-event function to lookup favicon data by hostname\n    handler: handlers/handler.readFave\n    events:\n      - http:\n          path: /faves\n          method: get\n          private: true\n          request:\n            parameters:\n              querystrings:\n                hostname: true\n  createFave:\n    description: HTTP-event function to queue a hostname for favicon scraping\n    handler: handlers/handler.createFave\n    events:\n      - http:\n          path: /faves\n          method: post\n          private: true\n      - http:\n          path: /faves\n          method: options\n          private: false\n  createFaveBatch:\n    description: Stream-event function to queue bulk hostnames for favicon scraping\n    handler: handlers/seed.createFaveBatch\n    events:\n      - sns: FaveSeeds\n  seedFaves:\n    description: HTTP-event function to queue a batch of hostnames for favicon scraping\n    handler: handlers/handler.seedFaves\n    timeout: 60\n    environment:\n      FAVI_SEED_KEY: ${file(env.yml):FAVI_SEED_KEY}\n      SNS_TOPIC_ARN: { \"Ref\": \"SNSTopicFaveSeeds\" }\n    events:\n      - http:\n          path: /seed\n          method: post\n          private: true\n      - http:\n          path: /seed\n          method: options\n          private: false\n  streamFaves:\n    description: HTTP-event function to queue a request to stream all faves to websocket\n    handler: handlers/handler.streamFaves\n    timeout: 60\n    events:\n      - http:\n          path: /faves/stream\n          method: post\n          private: true\n      - http:\n          path: /faves/stream\n          method: options\n          private: false\n  scrapeDynamoToSns:\n    description: Stream-event function to send dynamodb stream events to SNS\n    handler: handlers/handler.scrapeDynamoToSns\n    environment:\n      SNS_TOPIC_ARN: { \"Ref\": \"SNSTopicFaveScrapeJobs\" }\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 25\n  scrapeFavicon:\n    description: Stream-event function to scrape favicons in a headlesss browser\n    handler: handlers/scrape.scrapeFavicon\n    timeout: 180\n    events:\n      - sns: FaveScrapeJobs\n  cacheFavicon:\n    description: Stream-event function to save copies of favicon images to S3\n    handler: handlers/cache.cacheFavicon\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 25\n  notifyPusher:\n    description: Stream-event function to push dynamodb events to websockets\n    handler: handlers/notify.notifyPusher\n    environment:\n      PUSHER_APP_ID: ${file(env.yml):PUSHER_APP_ID}\n      PUSHER_KEY: ${file(env.yml):PUSHER_KEY}\n      PUSHER_SECRET: ${file(env.yml):PUSHER_SECRET}\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 100\n  notifyPusherAll:\n    description: Function to push all faves to websockets\n    handler: handlers/notify.notifyPusherAll\n    environment:\n      PUSHER_APP_ID: ${file(env.yml):PUSHER_APP_ID}\n      PUSHER_KEY: ${file(env.yml):PUSHER_KEY}\n      PUSHER_SECRET: ${file(env.yml):PUSHER_SECRET}\n\nresources:\n  Resources:\n    FavesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: FaveRecords\n        AttributeDefinitions:\n          - AttributeName: hostname\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: hostname\n            KeyType: HASH\n        StreamSpecification:\n            StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 25\n          WriteCapacityUnits: 25\n    S3BucketFaviApp:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: favi-app\n    S3BucketFaviCache:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: favi-cache\n    SNSTopicFaveSeeds:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: FaveSeeds\n    SNSTopicFaveScrapeJobs:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: FaveScrapeJobs\n    # KinesisTestMap:\n    #   Type: AWS::Lambda::EventSourceMapping\n    #   DependsOn : \n    #     - \"CreateFaveBatchLambdaFunction\"\n    #     - \"IamPolicyLambdaExecution\"\n    #   Properties:\n    #     BatchSize: 10\n    #     EventSourceArn:\n    #       Fn::GetAtt:\n    #         - \"KinesisStreamFaveSeeds\"\n    #         - \"Arn\"\n    #     FunctionName:\n    #       Fn::GetAtt:\n    #         - \"CreateFaveBatchLambdaFunction\"\n    #         - \"Arn\"\n    #     StartingPosition: \"TRIM_HORIZON\"\n    # CloudFrontDistributionFaviApp:\n    #   Type: AWS::CloudFront::Distribution\n    #   Properties:\n    #     DistributionConfig:\n    #       Aliases:\n    #         - favi.andrhamm.com\n    #       DefaultRootObject: index.html\n    #       Origins:\n    #         - DomainName: favi.andrhamm.com\n    #           Id: favi\n    #           S3OriginConfig:\n"]},{"id":158070934,"files":["service: api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  apiKeys:\n    - ${file(../serverless.env.yml):${opt:stage, self:provider.stage}.API_KEY}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action: sns:Publish\n      Sid: VisualEditor0\n      Resource:\n        - \"*\"\n        - \"arn:aws:sns:*:*:*\"\n\npackage:\n  exclude:\n    - node_modules/**/README.*\n    - node_modules/**/test/**\n    - node_modules/aws-sdk/** # aws-sdk is in lambda's envrionment\n\nfunctions:\n  auth-sendSMSToken:\n    handler: auth/sendSMSToken.sendSMSToken\n    events:\n      - http:\n          path: ${self:service}/v1/auth/sendSMSToken\n          method: post\n          private: true\n  auth-sendEmailToken:\n    handler: auth/sendEmailToken.sendEmailToken\n    events:\n      - http:\n          path: ${self:service}/v1/auth/sendEmailToken\n          method: post\n          private: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2"]},{"id":157160070,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: imageGetter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: ap-northeast-2\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  imgs:\n    handler: app/handler.imgs\n    events:\n      - http:\n          path: imgs/{encodedURI}\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":158001746,"files":["service: sls-tweet-img-rekognition \nprovider:\n  \n  name: aws  \n  runtime: nodejs8.10 \n  stage: prod\n  region: us-east-1\n  \n  environment:\n    CONSUMERKEY: #twitter customer key\n    CONSUMERSECRET: #twitter customer secret\n    ACCESSTOKENKEY: #twitter access token key\n    ACCESSTOKENSECRET: #twitter access token secret\n    MONGOURL: #Mongodb URL\n    USERNAME: # Twitter username\n    MAXLABELS: 7 # You can alter this value of labels finded by AWS Rekognition\n    MINCONFIDENCE: 80 # You can alter this value of confidence for AWS Rekognition\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - rekognition:DetectLabels\n      Resource: \"*\"  \n\nfunctions:\n  imagebot:\n    handler: handler.imagebot \n    events:\n      - schedule: rate(15 minutes)\n"]},{"id":157320647,"files":["service: ps-slack\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10 \n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:SendMessage\"\n        - \"sqs:GetQueueUrl\"\n      Resource: \n        Fn::GetAtt:\n          - CommandQueue\n          - Arn  \n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:ListQueues\"\n      Resource: \n         Fn::GetAtt:\n          - CommandQueue\n          - Arn       \n\ncustom:\n  baseUrl: v1\n  mosUrl: https://www.oracle.com/search/results/_/N-33y?No=0&Nr=106&Nrpp=5&Ntk=SI-ALL5&Ntt=\n  product: E92519_02\n\nfunctions:\n  pbSlackCommand:\n    handler: handler.pbCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/pb-search\n          method: post\n    environment:\n      QUEUE: \n        Ref: CommandQueue\n\n  mosSlackCommand:\n    handler: handler.mosCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/mos-search\n          method: post\n    environment:\n      QUEUE:\n        Ref: CommandQueue\n\n  commandHandler:\n    handler: handler.commandHandler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CommandQueue\n              - Arn\n          batchSize: 1\n    environment:\n      PRODUCT:  ${self:custom.product}\n      MOSURL:  ${self:custom.mosUrl}\n      \nresources:\n  Resources:\n    CommandQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"PS-BOT-COMMANDS\"\n        VisibilityTimeout: 60\n        MessageRetentionPeriod: 120\n\n"]},{"id":157647455,"files":["service: geonet-alexa\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  geonet:\n    handler: index.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":156997541,"files":["# Serverless.yml Reference\n# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\n# Switch between credentials\n# https://serverless.com/framework/docs/providers/aws/guide/credentials/\n\nservice: test-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-jest-plugin\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  jest:\n    collectCoverage: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n      Resource: arn:aws:s3:::bucket*\n    - Effect: Allow\n      Action:\n        - sns:publish\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  auth:\n    handler: src/auth.handler\n    events:\n      - http:\n          path: auth\n          method: post\n          cors: true\n    environment:\n      UserPoolId: # Pool ID\n      ClientId: # Client ID\n\n  graphql:\n    handler: src/graphql.handler\n    events:\n      - http:\n          path: graphQL\n          method: post\n          cors: true\n          authorizer:\n            arn: # arn of authorizer (typically cognito user pool)\n    environment:\n      Region: # Region\n      UserPoolId: # UserPoolId\n      ClientId: # ClientId\n      ArangoDBName: # ArangoDBName \n      ArangoURL: # ArangoURL\n      ArangoUser: # ArangoUser\n      ArangoPW: # ArangoPW\n      Bucket: # Bucket\n\n  triggers:\n    handler: src/auth-triggers.handler\n    environment:\n      AppUrl: # AppUrl\n      ChangePasswordRoute: # ChangePasswordRoute\n      ResetPasswordRoute: # ResetPasswordRoute\n      UserPoolId: # UserPoolId\n\n  define-auth-challenge:\n    handler: src/define-auth-challenge.handler\n\n  create-auth-challenge:\n    handler: src/create-auth-challenge.handler\n    environment:\n      AppUrl: # AppUrl\n\n  verify-auth-challenge:\n    handler: src/verify-auth-challenge.handler\n\n  files:\n    handler: src/files.handler\n    events:\n      - http:\n          path: files\n          method: get\n          cors: true\n          authorizer:\n            arn: arn of authorizer (typically cognito user pool)\n    environment:\n      Region: # Region\n      Bucket: # Bucket\n      UserPoolId: # UserPoolId"]},{"id":157026590,"files":["service: apollo-lambda\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-offline  \nfunctions:\n  graphql:\n    handler: src/graphql.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get        "]},{"id":155065429,"files":["service:\n  name: my-new-service\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":154220938,"files":["service: aws-node-alexa-skill\n\nplugins:\n  - serverless-alexa-skills\n\ncustom:\n  skillName: My Health\n  alexa:\n    vendorId: nope\n    clientId: nope\n    clientSecret: nope\n    skills:\n      - id: amzn1.ask.skill.fd64f0a3-298e-43e5-bce3-58862dbf0c59\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: ${self:custom.skillName}\n          apis:\n            custom: \n              endpoint:\n                uri: arn:aws:lambda:eu-west-1:731778311494:function:aws-node-alexa-skill-dev-healthHandler\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: how is my health\n                intents:\n                  - name: AMAZON.HelpIntent\n                    samples: \n                    - 'help'\n                  - name: AMAZON.CancelIntent\n                    samples: \n                    - 'cancel'\n                  - name: AMAZON.StopIntent\n                    samples: \n                    - 'stop'\n                  - name: ${self:provider.environment.HEALTH_INTENT}\n                    samples:\n                      - 'give me my last health records'\n                  - name: ${self:provider.environment.FOOD_INTENT}\n                    slots:\n                    - name: when\n                      type: AMAZON.DATE\n                    - name: food\n                      type: AMAZON.Food\n                    - name: exercise\n                      type: AMAZON.Sport\n                    samples:\n                      - 'I had {food} {when} how much do I have to {exercise}'\n                      - 'I had {food} on {when} how much do I have to {exercise}'\n                      - 'I had {food} how much do I have to {exercise}'\n                      - 'I had {food}'\n                      - '{when} I had {food}'\n                      - 'If I eat {food} how much do I have to {exercise}'\n        \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: serverless-admin\n  environment: \n    SKILL_NAME: ${self:custom.skillName}\n    HEALTH_INTENT: myHealth\n    FOOD_INTENT: iAteFood\n\nfunctions:\n  healthHandler:\n    handler: handler.handler\n    events:\n      - alexaSkill: amzn1.ask.skill.fd64f0a3-298e-43e5-bce3-58862dbf0c59\n"]},{"id":124991239,"files":["service: meetup-api-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, file(config.json):stage, 'dev'}\n  region: ${opt:region, file(config.json):region, 'us-east-1'}\n\nfunctions:\n  call:\n    handler: src/call.handler\n    name: ${self:provider.stage}-${self:service}-call\n    memorySize: 128\n    events:\n      - http:\n          path: call\n          method: any\n\nplugins:\n- serverless-offline # plugin to run the offline emulation\n"]},{"id":153509983,"files":["service: serverless-image-upload\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  environment:\n    BUCKET: tayzlor-serverless-image-upload\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:*'\n      Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'\n\nresources:\n  - ${file(resources/s3-bucket.yml)}\n\npackage:\n  exclude:\n    - .serverless\n    - .webpack\n    - coverage\n    - .babelrc\n    - .gitignore\n    - package.json\n    - README.md\n    - serverless.yml\n    - webpack.config.js\n\nfunctions:\n  fetch:\n    handler: handler.fetch\n    events:\n      - http:\n          path: fetch\n          method: get\n  upload:\n    handler: handler.upload\n    events:\n      - http:\n          path: upload\n          method: post\n"]},{"id":153146475,"files":["service: express-demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-south-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n\n      - http: \"ANY {proxy+}\"\n"]},{"id":152801288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: node-ipset-filter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http: 'ANY /api/ipcheck'\n      - http: 'ANY {proxy+}'\n\nplugins:\n  - serverless-offline\n"]},{"id":148964234,"files":["service: wild-rides-serverless-demo\napp: serverless-demo\ntenant: karuppiah7890\nframeworkVersion: '=1.32.0'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  RequestUnicorn:\n    handler: handler.handler\n    role: WildRydesLambdaRole\n    memorySize: 128\n    events:\n      - http:\n          path: ride\n          method: post\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: WildRydesApiGatewayAuthorizer\nresources:\n  Resources:\n    WildRydesBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: wildrydes-karuppiah-natarajan\n        WebsiteConfiguration:\n          IndexDocument: index.html\n    WildRydesBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: 'WildRydesBucket'\n        PolicyDocument:\n          Statement:\n            - Effect: 'Allow'\n              Principal: '*'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'WildRydesBucket'\n                    - '/*'\n    WildRydesCognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: WildRydes\n    WildRydesCognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: WildRydesWebApp\n        GenerateSecret: false\n        UserPoolId:\n          Ref: 'WildRydesCognitoUserPool'\n    WildRydesDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Rides\n        AttributeDefinitions:\n          - AttributeName: RideId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: RideId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    WildRydesLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: WildRydesLambda\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: DynamoDBWriteAccess\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                        - ':'\n                        - - 'arn:aws:logs'\n                          - Ref: 'AWS::Region'\n                          - Ref: 'AWS::AccountId'\n                          - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - dynamodb:PutItem\n                  Resource:\n                    'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]\n    WildRydesApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      Properties:\n        Name: WildRydes\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Type: COGNITO_USER_POOLS\n        ProviderARNs:\n          - Fn::GetAtt: [WildRydesCognitoUserPool, Arn]\n        IdentitySource: method.request.header.Authorization\n  Outputs:\n    WildRydesBucketURL:\n      Description: 'Wild Rydes Bucket Website URL'\n      Value:\n        'Fn::GetAtt': [WildRydesBucket, WebsiteURL]\n    WildRydesCognitoUserPoolId:\n      Description: 'Wild Rydes Cognito User Pool ID'\n      Value:\n        Ref: 'WildRydesCognitoUserPool'\n    WildRydesCognitoUserPoolClientId:\n      Description: 'Wild Rydes Cognito User Pool Client ID'\n      Value:\n        Ref: 'WildRydesCognitoUserPoolClient'\n    WildRydesDynamoDbARN:\n      Description: 'Wild Rydes DynamoDB ARN'\n      Value:\n        'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]\n"]},{"id":150877345,"files":["service: serverless-graphql-api-demo\n\nframeworkVersion: \">=1.26.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    includeModules: true\n\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  graphiql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: get\n        cors: true"]},{"id":149020250,"files":["# NOTE: update this with your service name\nservice: lambda-template\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  render:\n    handler: handler.render\n    events:\n      - http:\n          path: render/{bucket}\n          method: any\n          cors: true\n          request:\n            parameters:\n              paths:\n                bucket: true\n"]},{"id":149008124,"files":["service: url-shortner\n\nplugins:\n  - serverless-webpack\ncustom:\n  webpack:\n    packager: 'yarn'      # Defaults to npm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n     - Effect: Allow\n       Action:\n         - 'dynamodb:PutItem'\n         - 'dynamodb:GetItem'\n       Resource:\n         'Fn::Join':\n           - ''\n           - - 'arn:aws:dynamodb:'\n             - Ref: 'AWS::Region'\n             - ':'\n             - Ref: 'AWS::AccountId'\n             - ':table/'\n             - Ref: RedirectionsTable\n  environment:\n    TOKEN_SIZE: 10\n    TABLE_NAME:\n      Ref: RedirectionsTable\n\nfunctions:\n  create_redirection:\n    handler: redirector.redirector\n    events:\n      - http:\n          path: /submit\n          method: post\n          cors: true\n  redirect:\n    handler: redirector.redirect\n    events:\n      - http:\n          path: /{key+}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    RedirectionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":149339011,"files":["# serverless.yml\n\nservice: contact-form-api\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment:\n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    EMAIL: ${self:custom.secrets.EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  send:\n    handler: handler.send\n    events:\n      - http:\n          path: email/send\n          method: post\n          cors: true\n"]},{"id":147190255,"files":["service: DomTesting\n\nframeworkVersion: \">=1.27.2 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: \"${opt:stage, 'test'}\"\n  region: eu-central-1\n  timeout: 2\n  environment:\n    SELF_ENDPOINT:\n      Fn::Join:\n        - \"\"\n        - - \"https://\"\n          - Ref: \"ApiGatewayRestApi\"\n          - \".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/\"\n\npackage:\n  individually: true\n  exclude:\n    - \".*/**\"\n\nplugins:\n  - serverless-plugin-git-variables\n\nfunctions:\n  - ${file(serverless_resources/base/functions.yml)}\n  - ${file(serverless_resources/sub/functions.yml)}\n\nresources:\n  - ${file(serverless_resources/base/role.yml)}\n  - ${file(serverless_resources/sub/role.yml)}\n"]},{"id":149055136,"files":["service: sanamdeep-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  deploymentBucket: ${self:custom.stageVars.serverlessDeploymentBucket}\n  profile: default\n  stage: ${opt:stage}\n  stackName: ${self:service}-stack-${self:custom.stageVars.envName}\n  stackTags: ${self:custom.stageVars.tags}\n  \ncustom: \n  stageVars: ${file(serverless/stageVars/${self:provider.stage}.yml)}\nfunctions: ${file(serverless/functions.yml)}\nresources: ${file(serverless/cft.yml)}"]}]