[{"id":82411457,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-west-2\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action: \n       - \"logs:*\"\n     Resource: \"*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:ListBucket\"\n     Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n   - Effect: \"Allow\"\n     Action:\n       - \"dynamodb:*\"\n     Resource: \"*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:PutObject\"\n     Resource:\n       Fn::Join:\n         - \"\"\n         - - \"arn:aws:s3:::\"\n           - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n         path: hello/499\n         method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n  searchTime:\n    handler: handler.queryBusInfo\n    events:\n      - http:\n         path: hello/businfo/\n         method: get\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":206376399,"files":["service: airtable-backups-demo\n\nframeworkVersion: \"=1.46.0\"\n\nplugins:\n  - serverless-plugin-epsagon # Must be first, see https://github.com/epsagon/serverless-plugin-epsagon\n  - serverless-bundle # See https://github.com/AnomalyInnovations/serverless-bundle\n  - serverless-offline # See https://github.com/dherault/serverless-offline\n  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin\n  - serverless-dotenv-plugin # See https://www.npmjs.com/package/serverless-dotenv-plugin\n\ncustom:\n  epsagon:\n    token: '' # TODO Set your Epsagon token - Won't be applied if not provided\n    appName: ${self:service}-${self:custom.environment}\n  environment: ${env:NODE_ENV, 'development'} # Defaults to \"development\" if not provided (see package.json scripts)\n  envs:\n    development: # Necessary for running SLS scripts locally, but not shouldn't be used to deploy anything\n      profile:\n      memorySize:\n    staging:\n      profile: sandbox # TODO replace by your own serverless profile, or provide AWS credentials directly if you don't use profiles\n      memorySize: 256\n    production:\n      profile: sandbox # TODO replace by your own serverless profile, or provide AWS credentials directly if you don't use profiles\n      memorySize: 256\n  bucket: ${self:service}-${self:custom.environment}\n  serverless-offline:\n    port: 3000\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  versionFunctions: false\n  logRetentionInDays: 60\n  timeout: 30\n  memorySize: ${self:custom.envs.${self:provider.stage}.memorySize, '128'}\n  stage: ${self:custom.environment} # XXX The stage directly depends on the environment, it's the same thing\n  region: ${opt:region, 'eu-west-1'} # Ireland by default, change as you need\n  environment:\n    NODE_ENV: ${self:custom.environment}\n    SERVICE: ${self:service}\n    S3_BUCKET: ${self:custom.bucket}\n  profile: ${self:custom.envs.${self:provider.stage}.profile, ''}\n  logs:\n    restApi: true # Enable logs in other services, such as API GW - See https://serverless.com/blog/framework-release-v142/\n  apiGateway:\n    binaryMediaTypes:\n      - '*/*' # Allow to return all binary response types - See https://serverless.com/blog/framework-release-v142/\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n  deploymentBucket:\n    serverSideEncryption: AES256\n  stackTags:\n    env: ${self:custom.environment}\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    service: ${self:service}\n    runtime: ${self:provider.runtime}\n\nfunctions:\n  status:\n    handler: src/functions/status.handler\n    events:\n      - http:\n          path: status\n          method: get\n\n  airtableBackups: # The same lambda is used to configure all backups (each backup is a distinct \"scheduled event\", AKA \"cron\")\n    handler: src/functions/makeAirtableBackup.handler\n    events:\n      - schedule:\n          description: \"Airtable backups for the 'Airtable backups boilerplate' base (demo)\"\n          rate: rate(5 minutes) # TODO Set your own rate : https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n          enabled: true\n          input:\n            AIRTABLE_BASE: \"app7nfLmoVHva1Vdv\" # TODO Set your own base id\n            AIRTABLE_TABLES: \"Video tracker;Staff directory;Agencies;Agency contacts;Scenes;Shots;Locations;Props and equipment\" # TODO Set your table names\n            S3_DIRECTORY: \"airtableBackupsBoilerplate/\" # TODO Set the s3 sub-directory you want the backups to be stored in\n            STORAGE_CLASS: 'STANDARD_IA' # Set the storage class to use within those values: \"STANDARD\"|\"REDUCED_REDUNDANCY\"|\"STANDARD_IA\"|\"ONEZONE_IA\"|\"INTELLIGENT_TIERING\"|\"GLACIER\"|\"DEEP_ARCHIVE\" - See https://aws.amazon.com/en/s3/storage-classes/\n\n# XXX You can configure another scheduled backup just by creating another \"event\"\n#      - schedule:\n#          description: \"Another backup for another Airtable base\"\n#          rate: rate(5 minutes) # TODO Set your own rate : https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n#          enabled: true\n#          input:\n#            AIRTABLE_BASE: \"app7nfLmoVHva1Vdv\" # TODO Set your own base id\n#            AIRTABLE_TABLES: \"Video tracker;Staff directory;Agencies;Agency contacts;Scenes;Shots;Locations;Props and equipment\" # TODO Set your table names\n#            S3_DIRECTORY: \"airtableBackupsBoilerplate/\" # TODO Set the s3 sub-directory you want the backups to be stored in\n#            STORAGE_CLASS: 'STANDARD_IA' # Set the storage class to use within those values: \"STANDARD\"|\"REDUCED_REDUNDANCY\"|\"STANDARD_IA\"|\"ONEZONE_IA\"|\"INTELLIGENT_TIERING\"|\"GLACIER\"|\"DEEP_ARCHIVE\" - See https://aws.amazon.com/en/s3/storage-classes/\n"]},{"id":188039330,"files":["# NOTE: update this with your service name\nservice: serverless-graphql-nodejs-starter\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    port: 4000\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  graphql:\n    handler: src/graphql.graphqlHandler\n    environment:\n      SLS_DEBUG: true\n    events:\n      - http:\n          path: graphql\n          method: post \n          cors: true \n          integration: lambda-proxy\n\n      - http:\n          path: graphql\n          method: get \n          cors: true\n          integration: lambda-proxy\n"]},{"id":155035349,"files":["service: test\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${self:provider.stage}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'npm'   # Packager that will be used to package your external modules\n  \nplugins:\n  - serverless-webpack\n  \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1000\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment:\n      region: ${self:custom.region}\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http: GET /ping\n\n","service: question53072843\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${self:provider.stage}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'npm'   # Packager that will be used to package your external modules\n  \nplugins:\n  - serverless-webpack\n  \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1000\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment:\n      region: ${self:custom.region}\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http: GET /ping\n\n","service: question54935161\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${self:provider.stage}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'npm'   # Packager that will be used to package your external modules\n  \nplugins:\n  - serverless-webpack\n  \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1000\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:${self:custom.region}:*:table/TableTest\n  environment:\n      region: ${self:custom.region}\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http: GET /ping\n\nresources:\n  Resources:\n    TestTableDynamoDBTable:\n       Type: 'AWS::DynamoDB::Table'\n       Properties:\n         TableName: TableTest\n         AttributeDefinitions:\n             - AttributeName: email\n               AttributeType: S\n         KeySchema:\n           - AttributeName: email\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 1\n           WriteCapacityUnits: 1","service: question53109644\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${self:provider.stage}\n  bucket: ${self:provider.bucket}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'npm'   # Packager that will be used to package your external modules\n  \nplugins:\n  - serverless-webpack\n  \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1000\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  bucket: ${opt:bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${opt:bucket}\"\n  environment:\n      region: ${self:custom.region}\nfunctions:\n  ping:\n    handler: handler.ping\n    environment:\n      bucket: ${opt:bucket}\n    events:\n      - http: GET /ping\n\n"]},{"id":154228688,"files":["service: \"scryfall-api\"\n\nprovider:\n  name: aws\n  runtime: \"nodejs8.10\"\n  region: \"us-west-2\"\n  stage: ${opt:stage, \"dev\"}\n  environment:\n    stage: ${self:provider.stage}\n\nplugins:\n  - \"serverless-webpack\"\n  - \"serverless-offline\"\n\npackage:\n  exclude:\n    - \"./ node_modules/**\"\n    - \"./.eslintrc.json\"\n    - \"./webpack.config.js\"\n\ncustom:\n  serverless-offline:\n    port: 1337\n  webpack:\n    includeModules: true\n    webpackConfig: \"webpack.config.js\"\n\nfunctions:\n  graphql:\n    handler: \"src/index.graphqlHandler\"\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n"]},{"id":142181956,"files":["service: polyfill\n\nplugins:\n  - '@silvermine/serverless-plugin-cloudfront-lambda-edge'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'production'}\n  region: us-east-1\n\npackage:\n  exclude:\n  - server.js\n  - coverage/\n  - test/\n\nfunctions:\n  polyfill:\n    handler: handler.handle\n    lambdaAtEdge:\n      distribution: PolyfillDistribution\n      eventType: origin-request\n\nresources:\n  Resources:\n    PolyfillBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(./serverless-env.yml):bucket.name}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    PolyfillDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Aliases:\n          - ${file(./serverless-env.yml):distribution.alias}\n          DefaultCacheBehavior:\n            Compress: true\n            ForwardedValues:\n              Cookies:\n                Forward: none\n              Headers:\n                - User-Agent\n              QueryString: true\n            TargetOriginId: polyfill-lambda\n            ViewerProtocolPolicy: redirect-to-https\n          DefaultRootObject: index.html\n          Enabled: true\n          HttpVersion: http2\n          Origins:\n          - DomainName:\n              Fn::GetAtt:\n                - PolyfillBucket\n                - DomainName\n            Id: polyfill-lambda\n            S3OriginConfig:\n              OriginAccessIdentity: \"\"\n          ViewerCertificate:\n            AcmCertificateArn: ${file(./serverless-env.yml):distribution.cert-arn}\n            SslSupportMethod: sni-only\n","bucket:\n  name: [mydomain]-polyfill-production\n\ndistribution:\n  alias: polyfill.[mydomain].com\n  cert-arn: arn:aws:acm:us-east-1:012345:certificate/012345-0123-012345\n"]},{"id":90561970,"files":["service: serverless-url-shortener\n\nplugins:\n  - serverless-webpack\n  - serverless-finch\n  - serverless-cloudfront-invalidate\n  - serverless-plugin-reducer\n  - serverless-domain-manager\n  - serverless-scriptable-plugin\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  endpointType: edge\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'staging'}\n  region: ${env:REGION}\n  profile: ${env:AWS_PROFILE}\n  memorySize: 128\n  timeout: 30\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    API_URL: ${env:API_URL}\n    API_DOMAIN: ${env:API_DOMAIN}\n    SHORT_URL: ${env:SHORT_URL}\n    SHORT_DOMAIN: ${env:SHORT_DOMAIN}\n    REGION: ${env:REGION}\n    BUCKET: ${self:custom.bucketBaseName}-origin\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'\n\ncustom:\n  bucketBaseName: ${self:service}-${self:provider.stage}\n  scriptHooks:\n    before:deploy:deploy:\n      - sls create_domain -v -s ${self:provider.stage}\n    before:client:deploy:deploy:\n      - STAGE=${self:provider.stage} API_URL=${env:API_URL} yarn build\n    after:deploy:finalize:\n      - echo Y | sls client deploy -v -s ${self:provider.stage}\n    after:client:deploy:deploy:\n      - sls cloudfrontInvalidate -v -s ${self:provider.stage}\n  webpack:\n    webpackConfig: webpack.config.js\n    packager: yarn\n    includeModules: false\n    # excludeFiles:\n  cloudfrontInvalidate:\n    # Output key\n    distributionIdKey: ClientDistributionId\n    items:\n      - /\n      - /index.html\n  customDomain:\n    domainName: ${env:API_DOMAIN}\n    certificateName: ${env:API_CERTIFICATE_NAME}\n    hostedZoneId: ${env:API_HOSTED_ZONE}\n    createRoute53Record: true\n    endpointType: edge\n    basePath: ${env:API_BASE_ENDPOINT}\n  client:\n    manageResources: false\n    bucketName: ${self:provider.environment.BUCKET}\n    distributionFolder: ./build/\n    # objectHeaders:\n    #   # Don't cache index so invalidation is not necessary\n    #   # See: https://github.com/fernando-mc/serverless-finch/issues/40#issuecomment-406274331\n    #   '*.html':\n    #     - name: Cache-Control\n    #       value: no-cache\n    #   ALL_OBJECTS:\n\nfunctions:\n  store:\n    handler: api/store.handle\n    events:\n      - http:\n          path: /store\n          method: post\n          cors: true\n\n# See: https://github.com/sprockow/serverless-finch-example\nresources:\n  - Parameters:\n      BucketName:\n        Type: String\n        Default: ${self:provider.environment.BUCKET}\n      LogBucketName:\n        Type: String\n        Default: ${self:custom.bucketBaseName}-logs\n      TargetOriginId:\n        Type: String\n        Default: ${self:custom.bucketBaseName}-target\n      DomainName:\n        Type: String\n        Default: ${env:SHORT_DOMAIN}\n      DomainNameHostedZoneId:\n        Type: String\n        Default: ${env:SHORT_HOSTED_ZONE}\n      CustomErrorResponsePagePath:\n        Type: String\n        Default: /index.html\n      ClientDistributionCertificate:\n        Type: String\n        Default: ${env:SHORT_DOMAIN_ACM_ARN}\n\n  - ${file(./resources/s3-bucket.yml)}\n  - ${file(./resources/s3-policies.yml)}\n  - ${file(./resources/dns-records.yml)}\n  - ${file(./resources/cf-distribution.yml)}\n  - ${file(./resources/outputs.yml)}\n"]},{"id":198268125,"files":["service:\n  name: pdf\n\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: ${opt:stage, 'development'}\n  environment:\n    ENV: ${self:provider.stage}\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  pdf:\n    handler: pdf.pdf\n    events:\n      - http:\n          path: pdf/{yearMonth}\n          method: get\n          cors: true\n          parameters:\n            paths:\n              yearMonth: true\n"]},{"id":186697118,"files":["service: saaghibot\n\nprovider:\n  name: aws\n  region: eu-central-1\n  runtime: nodejs10.x\n  memorySize: 128\n  environment:\n    SAAGHIBOT_TOKEN: ${ssm:/saaghibot_token}\n\nfunctions:\n  saaghia:\n    handler: handler.saaghia\n    events:\n      - http:\n          path: saaghia\n          method: post\n          cors: true\n      - schedule: rate(5 minutes)\n"]},{"id":180856508,"files":["service: mattermost-metrics-server\n\npackage:\n    individually: true\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    # Enable if AWS profile is available in local dev\n    # profile: dev-aws\n    region: us-east-1\n    apiKeys:\n        - metricsServerKey\n\ncustom:\n    webpackIncludeModules: true\n    webpack:\n        webpackConfig: ./webpack.config.js\n        packager: 'npm'\n\nfunctions:\n    index:\n        handler: src/ping.default\n        events:\n            - http:\n                  path: /\n                  method: get\n                  private: true\n                  cors: true\n\n    get_metrics:\n        handler: src/get_metrics.default\n        timeout: 20\n        events:\n            - http:\n                  path: metrics\n                  method: get\n                  private: false\n                  cors: true\n            - throttle:\n                  burstLimit: 100\n                  rateLimit: 100\n\n    get_metric:\n        handler: src/get_metric.default\n        timeout: 20\n        events:\n            - http:\n                  path: metric/{id}\n                  method: get\n                  private: false\n                  cors: true\n            - throttle:\n                  burstLimit: 100\n                  rateLimit: 100\n\n    post_metric:\n        handler: src/post_metric.default\n        timeout: 20\n        events:\n            - http:\n                  path: metric\n                  method: post\n                  private: true\n                  cors: true\n            - schedule:\n                  rate: rate(5 minutes)\n                  enabled: true\n\n    get_traces_per_device:\n        handler: src/get_traces_per_device.default\n        timeout: 20\n        events:\n            - http:\n                  path: traces/{device_unique_id}\n                  method: get\n                  private: true\n                  cors: true\n\nplugins:\n    - serverless-webpack\n    - serverless-offline\n    - serverless-dotenv-plugin\n"]},{"id":114898277,"files":["service: iam\n\nprovider:\n  name: aws\n  region: eu-central-1\n  \n  stage: prod\n  runtime: nodejs6.10\n  \n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iam:Get*\"\n        - \"iam:List*\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:GetObject\"\n        - \"s3:DeleteObject\"\n      Resource: \n        - \"arn:aws:s3:::<S3Bucket>\"\n        - \"arn:aws:s3:::<S3Bucket>/*\"\n\npackage:\n  individually: true\n  \nfunctions:\n  syncSSHKeysToS3:\n    memorySize: 128\n    timeout: 60 \n    handler: handler.syncSSHKeysToS3\n    package:\n      exclude:\n        - ./**\n      include:\n        - handler.js\n    environment:\n      S3_BUCKET: <S3Bucket>\n    events:            \n      - schedule: rate(5 minutes)\n    \n"]},{"id":192533055,"files":["service: serverless-multicloud-example \nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-southeast-2\n  environment:\n    MONGO_URL: 'mongodb://username:password@mongo:27017/todolist'\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /documents/all\n          method: GET\n      - http:\n          path: /documents/id\n          method: GET \n      - http:\n          path: /documents/new\n          method: POST\n      - http:\n          path: /documents/id\n          method: DELETE \n      - http:\n          path: /documents/id\n          method: PATCH \nplugins:\n  - serverless-express\n  - serverless-offline","service: serverless-multicloud-example \nprovider:\n  name: azure\n  location: Australia East\n  environment:\n    MONGO_URL: 'mongodb://username:password@mongo:27017/todolist'\nplugins:\n  - serverless-azure-functions\n  - serverless-express\npackage:\n  exclude:\n    - local.settings.json\n    - .gitignore\n    - .git/**\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n          name: req\n          methods:\n            - get\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n  getall:\n    handler: handler.handler\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n          name: req\n          methods:\n            - get\n          route: app/documents/all\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n  id:\n    handler: handler.handler\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n          name: req\n          methods:\n            - get\n            - delete\n            - patch\n          route: app/documents/id\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n  postnew:\n    handler: handler.handler\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n          name: req\n          methods:\n            - post\n          route: app/documents/new\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n","service: serverless-multicloud-example \nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: asia-northeast1\n  project: serverless-multicloud-example\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    MONGO_URL: 'mongodb://username:password@mongo:27017/todolist'\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-express\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\nfunctions:\n  app:\n    handler: handler\n    events:\n      - http: path\n"]},{"id":128418510,"files":["service: nuxt-serverless\n\nplugins:\n  - serverless-s3-sync\n  - serverless-apigw-binary\n  - serverless-dotenv-plugin\n\npackage:\n  individually: true\n  excludeDevDependencies: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n\ncustom:\n  #######################################\n  # Unique ID included in resource names.\n  # Replace it with a random value for every first distribution.\n  # https://www.random.org/strings/?num=1&len=6&digits=on&loweralpha=on&unique=on&format=html&rnd=new\n  stackId: lxpmd3\n  #######################################\n\n  buckets:\n    ASSETS_BUCKET_NAME: ${self:service}-${self:custom.stackId}-${self:provider.stage}-assets\n    STATIC_BUCKET_NAME: ${self:service}-${self:custom.stackId}-${self:provider.stage}-static\n  s3Sync:\n    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}\n      localDir: .nuxt/dist/client\n    - bucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}\n      localDir: static\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  renderer:\n    name: ${self:service}-${self:custom.stackId}-${self:provider.stage}-renderer\n    handler: .nuxt/dist/serverless.handler\n    memorySize: 2048\n    timeout: 30\n    environment:\n      NODE_ENV: production\n    package:\n      include:\n        - .nuxt/dist/serverless.js\n        - .nuxt/dist/server/**\n      exclude:\n        - .nuxt/**\n        - src/**\n        - app.js\n        - nuxt.config.js\n        - nuxt.d.ts\n        - README.md\n        - server.js\n        - serverless.js\n        - serverless.yml\n        - tsconfig.json\n        - tslint.json\n        - webpack.config.js\n        - yarn-error.log\n    events:\n      - http:\n          path: /\n          method: any\n      - http:\n          path: /{proxy+}\n          method: any\n      - http:\n          path: /_nuxt/{proxy+}\n          method: any\n          integration: http-proxy\n          request:\n            uri: https://${self:custom.buckets.ASSETS_BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com/{proxy}\n            parameters:\n              paths:\n                proxy: true\n      - http:\n          path: /static/{proxy+}\n          method: any\n          integration: http-proxy\n          request:\n            uri: https://${self:custom.buckets.STATIC_BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com/{proxy}\n            parameters:\n              paths:\n                proxy: true\n\nresources:\n  Resources:\n    ClientAssetsBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - HEAD\n                - PUT\n                - POST\n                - DELETE\n              MaxAge: 3000\n              ExposedHeaders:\n                - x-amz-server-side-encryption\n                - x-amz-request-id\n                - x-amz-id-2\n    ClientAssetsBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: ClientAssetsBucket\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement: [\n            {\n              Action: ['s3:GetObject'],\n              Effect: 'Allow',\n              Resource: {\n                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientAssetsBucket' }, '/*']],\n              },\n              Principal: '*'\n            },\n          ]\n    ClientStaticBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - HEAD\n                - PUT\n                - POST\n                - DELETE\n              MaxAge: 3000\n              ExposedHeaders:\n                - x-amz-server-side-encryption\n                - x-amz-request-id\n                - x-amz-id-2\n    ClientStaticBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: ClientStaticBucket\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement: [\n            {\n              Action: ['s3:GetObject'],\n              Effect: 'Allow',\n              Resource: {\n                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientStaticBucket' }, '/*']],\n              },\n              Principal: '*'\n            },\n          ]\n"]},{"id":145720042,"files":["service: tesseract-ocr-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'prod'}\n  region: ap-southeast-1\n\nfunctions:\n  handler:\n    name: tesseract-ocr-service-handler\n    description: Performs OCR on an image hosted at a URL and returns its text\n    handler: dist/ocr.ocr\n    events:\n      - http:\n          path: /ocr\n          method: get\n    memorySize: 1536\n    timeout: 20\n\nplugins:\n  - serverless-offline\n"]},{"id":81686372,"files":["service: LabelBot\n\ncustom: ${file(./config.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  LabelBot:\n    handler: \"handler.receiveWebhook\"\n    description: A Lambda function to label things on Home Assistant repositories\n    memorySize: 128\n    timeout: 10\n    environment:\n      STAGE: ${self:provider.stage}\n      GITHUB_TOKEN: ${self:custom.github_token}\n      GITHUB_SECRET: ${self:custom.github_secret}\n    events:\n      - http: POST github/webhook\n"]},{"id":127151509,"files":["service:\n  name: requestbin\n\npackage:\n  individually: true\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\ncustom:\n  bucket: MY_BUCKET-requestbin\n  IOPIPE_TOKEN: MY_ACCESS_TOKEN\n\nenvironment:\n  IOPIPE_TOKEN: ${self:custom.IOPIPE_TOKEN}\n  S3BUCKET: ${self:custom.bucket}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  getrequesturl:\n    handler: index.getRequestURL\n    events:\n      - http:\n          method: get\n          path: /geturl\n          cors: true\n  requestbin:\n    handler: index.handleRequest\n    events:\n      - http:\n          method: any\n          path: '/req/{token}'\n          cors: true\n  s3auth:\n    handler: s3auth.handler\n    memory: 128\n\nresources:\n  Resources:\n    newResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucket}\n        LifecycleConfiguration:\n          Rules:\n          - Id: ExpirationRule\n            Status: Enabled\n            ExpirationInDays: '1'\n"]},{"id":107591574,"files":["service: iot-chat-api\n\nplugins:\n  - serverless-webpack\n  - serverless-hooks-plugin\n\ncustom:\n  webpackIncludeModules: true # enable auto-packing of external modules\n  variables: ${file(./config.yml)}\n  hooks:\n    after:aws:deploy:finalize:cleanup:\n      - ./scripts/attachConfirmUserTrigger.sh ${self:provider.profile}\n      - ./../client/scripts/setup.sh ${self:provider.profile}\n    before:remove:remove:\n      - ./scripts/detach_policies.sh\n\nprovider:\n  name: aws\n  profile: default\n  runtime: nodejs8.10\n  stage: prod\n  region: ${opt:region, self:custom.variables.region}\n\n  # Defines permission policy for the Lambda functions.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        {\n          \"Fn::Join\":\n            [\"\", [\"arn:aws:dynamodb:\", { \"Ref\": \"AWS::Region\" }, \":*:*\"]],\n        }\n    - Effect: Allow\n      Action:\n        - iot:AttachPrincipalPolicy\n        - iot:DetachPrincipalPolicy\n        - iot:CreatePolicy\n      Resource:\n        - \"*\"\n\nfunctions:\n  CreateUser:\n    handler: src/user/create.main\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  GetMe:\n    handler: src/user/getMe.main\n    events:\n      - http:\n          path: users/me\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  GetUser:\n    handler: src/user/get.main\n    events:\n      - http:\n          path: users/{identityId}\n          method: get\n          cors: true\n          authorizer: aws_iam\n          request:\n            parameters:\n              paths:\n                identityId: true\n\n  ListUsers:\n    handler: src/user/list.main\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  AttachConnectPolicy:\n    handler: src/policy/attachConnect.main\n    events:\n      - http:\n          path: policy/attach_connect\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  AttachPublicPublishPolicy:\n    handler: src/policy/attachPublicPublish.main\n    events:\n      - http:\n          path: policy/attach_public_publish\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  AttachPublicSubscribePolicy:\n    handler: src/policy/attachPublicSubscribe.main\n    events:\n      - http:\n          path: policy/attach_public_subscribe\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  AttachPublicReceivePolicy:\n    handler: src/policy/attachPublicReceive.main\n    events:\n      - http:\n          path: policy/attach_public_receive\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  AutoConfirmUser:\n    handler: src/user/confirm.main\n\n  CreateChat:\n    handler: src/chat/create.main\n    events:\n      - http:\n          path: chats\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  ListChats:\n    handler: src/chat/list.main\n    events:\n      - http:\n          path: chats\n          method: get\n          cors: true\n          authorizer: aws_iam\n\nresources:\n  Resources:\n    UserTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: \"IotChatUsers\"\n        AttributeDefinitions:\n          - AttributeName: identityId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: identityId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n    ChatTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: \"IotChatChats\"\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n    ConnectPolicy:\n      Type: \"AWS::IoT::Policy\"\n      Properties:\n        PolicyName: IotChatConnectPolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action:\n                - \"iot:Connect\"\n              Resource:\n                - \"*\"\n\n    PublicSubscribePolicy:\n      Type: \"AWS::IoT::Policy\"\n      Properties:\n        PolicyName: IotChatPublicSubscribePolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action:\n                - \"iot:Subscribe\"\n              Resource:\n                {\n                  \"Fn::Join\":\n                    [\n                      \"\",\n                      [\n                        \"arn:aws:iot:\",\n                        { \"Ref\": \"AWS::Region\" },\n                        \":\",\n                        { \"Ref\": \"AWS::AccountId\" },\n                        \":topicfilter/room/public/*\",\n                      ],\n                    ],\n                }\n\n    PublicReceivePolicy:\n      Type: \"AWS::IoT::Policy\"\n      Properties:\n        PolicyName: IotChatPublicReceivePolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action:\n                - \"iot:Receive\"\n              Resource:\n                {\n                  \"Fn::Join\":\n                    [\n                      \"\",\n                      [\n                        \"arn:aws:iot:\",\n                        { \"Ref\": \"AWS::Region\" },\n                        \":\",\n                        { \"Ref\": \"AWS::AccountId\" },\n                        \":topic/room/public/*\",\n                      ],\n                    ],\n                }\n\n    UserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        UserPoolName: iot_chat_api_user_pool\n        AutoVerifiedAttributes:\n          - email\n        MfaConfiguration: OFF\n        Schema:\n          - AttributeDataType: String\n            Name: email\n            Required: true\n\n    ReactAppClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        GenerateSecret: false\n        RefreshTokenValidity: 200\n        UserPoolId:\n          Ref: UserPool\n\n    IdentityPool:\n      Type: \"AWS::Cognito::IdentityPool\"\n      Properties:\n        IdentityPoolName: iot_chat_api_identity_pool\n        AllowUnauthenticatedIdentities: false\n        CognitoIdentityProviders:\n          - ClientId:\n              Ref: ReactAppClient\n            ProviderName:\n              Fn::GetAtt: UserPool.ProviderName\n        SupportedLoginProviders:\n          graph.facebook.com: ${self:custom.variables.facebook_app_id}\n          accounts.google.com: ${self:custom.variables.google_app_id}\n\n    IdentityPoolAuthRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Federated:\n                  - \"cognito-identity.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRoleWithWebIdentity\"\n              Condition:\n                StringEquals:\n                  cognito-identity.amazonaws.com:aud:\n                    Ref: IdentityPool\n                ForAnyValue:StringLike:\n                  cognito-identity.amazonaws.com:amr: authenticated\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/AWSIoTDataAccess\n        Path: \"/\"\n        Policies:\n          - PolicyName: iot-chat-invoke-api-gateway\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - execute-api:Invoke\n                  Resource:\n                    {\n                      \"Fn::Join\":\n                        [\n                          \"\",\n                          [\n                            \"arn:aws:execute-api:\",\n                            { \"Ref\": \"AWS::Region\" },\n                            \":\",\n                            { \"Ref\": \"AWS::AccountId\" },\n                            \":\",\n                            { \"Ref\": \"ApiGatewayRestApi\" },\n                            \"/*\",\n                          ],\n                        ],\n                    }\n\n    IdentityPoolRoleAttachment:\n      Type: AWS::Cognito::IdentityPoolRoleAttachment\n      Properties:\n        IdentityPoolId:\n          Ref: IdentityPool\n        Roles:\n          authenticated:\n            Fn::GetAtt:\n              - IdentityPoolAuthRole\n              - Arn\n\n    ConfirmUserInvocationPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::GetAtt: AutoConfirmUserLambdaFunction.Arn\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:\n          Fn::GetAtt: UserPool.Arn\n\n  Outputs:\n    UserPoolId:\n      Description: \"The ID of the user pool that is created.\"\n      Value:\n        Ref: UserPool\n\n    ReactAppClientId:\n      Description: \"The ID of the user pool react app client id.\"\n      Value:\n        Ref: ReactAppClient\n\n    IdentityPoolId:\n      Description: \"The ID of the identity pool that is created.\"\n      Value:\n        Ref: IdentityPool\n\n    AutoConfirmUserFnArn:\n      Description: \"The ARN of the Auto Confirm User Lambda function\"\n      Value:\n        Fn::GetAtt:\n          - AutoConfirmUserLambdaFunction\n          - Arn\n\n    FacebookAppId:\n      Description: \"Facebook App Id\"\n      Value: ${self:custom.variables.facebook_app_id}\n\n    GoogleAppId:\n      Description: \"Google App Id\"\n      Value: ${self:custom.variables.google_app_id}\n"]},{"id":184687918,"files":["##################################################################################\n# CodeRecipe - a marketplace for developers to grab ready to use cloud solutions #\n# More details at: https://coderecipe.ai/architectures/57148351                  #\n##################################################################################\n\nservice: CodeRecipeSample-Web3-Serverless\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  ROPSTEN_INFURA_URL: ${opt:ROPSTEN_INFURA_URL}\n  ETH_PRIV_KEY: ${opt:ETH_PRIV_KEY}\n  ETH_FROM_ADDRESS: ${opt:ETH_FROM_ADDRESS}\n  apiKeys:\n    - ${opt:stage}-Web3-Serverless\n  usagePlan:\n    quota:\n      limit: 5000\n      offset: 0\n      period: DAY\n    throttle:\n      burstLimit: 1\n      rateLimit: 1\n\nfunctions:\n  EthHandler:\n    handler: handler.handler\n    runtime: nodejs8.10\n    name: ${self:provider.stage}-EthHandler\n    environment:\n      Stage: ${self:provider.stage}\n      ROPSTEN_INFURA_URL: ${self:provider.ROPSTEN_INFURA_URL}\n      ETH_PRIV_KEY: ${self:provider.ETH_PRIV_KEY}\n      ETH_FROM_ADDRESS: ${self:provider.ETH_FROM_ADDRESS}\n    events:\n      - http:\n          path: send-eth\n          method: POST\n          cors: true\n          integration: lambda\n          private: true        \n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-plugin-scripts\n\ncustom:\n  scripts:\n    hooks:\n      'package:cleanup': 'docker pull amazonlinux; docker run --rm -v $PWD:/data -w /data node:8.10 npm install scrypt web3 ethereumjs-tx'\n  pythonRequirements:\n    noDeploy: []\n    dockerizePip: false"]},{"id":74290256,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-php\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\npackage:\n  exclude:\n    - '*'\n    - '**'\n  include:\n    - handler.js\n    - index.php\n    - php\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\""]},{"id":117057281,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rg-video-to-thumbnail\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n  bucket: ${file(./config.${self:custom.currentStage}.json):bucket}\n  thumbnails_folder: ${file(./config.${self:custom.currentStage}.json):thumbnails_folder}\n  thumbnails_path: ${self:custom.bucket}/${self:custom.thumbnails_folder}\n  ecsTaskName: ${file(./config.${self:custom.currentStage}.json):ecsTaskName}\n  ecsTaskVpcSubnet1: ${file(./config.${self:custom.currentStage}.json):ecsTaskVpcSubnet1}\n  ecsTaskVpcSubnet2: ${file(./config.${self:custom.currentStage}.json):ecsTaskVpcSubnet2}\n  clusterName: ${file(./config.${self:custom.currentStage}.json):clusterName}\n  # clusterArn: { \"Fn::Join\" : [\"\", [ \"arn:aws:ecs:\", { \"Ref\" : \"AWS::Region\" }, \":\", { \"Ref\" : \"AWS::AccountId\" }, \":cluster/default\" ] ] }\n  # taskDefArn: { \"Fn::Join\" : [\"\", [ \"arn:aws:ecs:\", { \"Ref\" : \"AWS::Region\" }, \":\", { \"Ref\" : \"AWS::AccountId\" }, \":task-definition/*:*\" ] ] }\n  execRoleArn: { \"Fn::Join\" : [\"\", [ \"arn:aws:iam::\", { \"Ref\" : \"AWS::AccountId\" }, \":role/ecsTaskExecutionRole\" ] ] }\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${self:custom.currentStage}\n  region: ${self:custom.currentRegion}\n  environment:\n    ECS_CLUSTER_NAME: ${self:custom.clusterName}\n    ECS_TASK_DEFINITION: ${self:custom.ecsTaskName}\n    ECS_TASK_VPC_SUBNET_1: ${self:custom.ecsTaskVpcSubnet1}\n    ECS_TASK_VPC_SUBNET_2: ${self:custom.ecsTaskVpcSubnet2}\n    OUTPUT_S3_PATH: ${self:custom.thumbnails_path}\n    OUTPUT_S3_AWS_REGION: ${self:custom.currentRegion}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - ecs:RunTask\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - iam:PassRole\n      Resource: ${self:custom.execRoleArn}\n    - Effect: \"Allow\"\n      Action:\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  triggerOnUploadVideo:\n    handler: handler.triggerOnUploadVideo\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .mp4\n  triggerOnThumbnailCreation:\n    handler: handler.triggerOnThumbnailCreation\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.thumbnails_folder}/\n            - suffix: .png\n"]},{"id":176066172,"files":["service: mobilepayments\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: lambda.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":160605477,"files":["---\n\nservice: SampleDataPartitioner\n\nplugins:\n  - serverless-plugin-existing-s3\n\ncustom:\n  bucketName: \"FILL_ME\"\n  sourcePrefix: sample_data_firehose\n  database: default\n  table: sample_data_firehose\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:ListBucketVersions\"\n        - \"s3:GetObject\"\n        - \"s3:GetObjectVersion\"\n        - \"s3:PutObject\"\n      Resource:\n        - \"arn:aws:s3:::${self:custom.bucketName}\"\n        - \"arn:aws:s3:::${self:custom.bucketName}/*\"\n    - Effect: Allow\n      Action:\n        - \"athena:StartQueryExecution\"\n        - \"glue:GetDatabase\"\n        - \"glue:GetDatabases\"\n        - \"glue:GetTable\"\n        - \"glue:GetTables\"\n        - \"glue:BatchCreatePartition\"\n        - \"glue:CreatePartition\"\n      Resource:\n        - \"*\"\n\n  environment:\n    NODE_ENV: ${self:provider.stage}\n    BUCKET_NAME: ${self:custom.bucketName}\n    DATABASE: ${self:custom.database}\n    TABLE: ${self:custom.table}\n\nfunctions:\n  main:\n    handler: src/handler.main\n    events:\n      - existingS3:\n          bucket: ${self:custom.bucketName}\n          events:\n            - s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.sourcePrefix}/\n","---\n\nservice: SampleDataCollector\n\ncustom:\n  awsAccountId: \"FILL_ME\"\n  firehoseName: sample_data_firehose\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"firehose:PutRecord\"\n        - \"firehose:PutRecordBatch\"\n      Resource:\n        - \"arn:aws:firehose:us-west-2:${self:custom.awsAccountId}:deliverystream/${self:custom.firehoseName}\"\n\n  environment:\n    NODE_ENV: ${self:provider.stage}\n    FIREHOSE_NAME: ${self:custom.firehoseName}\n\nfunctions:\n  main:\n    handler: src/handler.main\n    events:\n      - http:\n          path: /collect\n          method: POST\n          cors: true\n"]},{"id":156771759,"files":["service: cognito-autoconfirm-user\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  CognitoAutoconfirmUser:\n    handler: handler.confirm\n\n"]},{"id":124069979,"files":["service: dynamoose-crud\npackage:\n  individually: true\n  excludeDevDependencies: true\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    packager: 'yarn'\n    packExternalModulesMaxBuffer: 200 * 1024   # Size of stdio buffers for spawned child processes\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  environment:\n      ITEM_TABLE: item-dynacrud-${opt:stage, self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}\"\n\nfunctions:\n  getById:\n    handler: handlers/get.getById\n    events:\n      - http:\n          path: api/item/{id}\n          method: get\n          cors: true\n\n  listAll:\n    handler: handlers/list.listAll\n    events:\n      - http:\n          path: api/items\n          method: get\n          cors: true\n\n  addOne:\n    handler: handlers/add.addOne\n    events:\n      - http:\n          path: api/add/one\n          method: post\n          cors: true\n\n  batchAdd:\n    handler: handlers/batchAdd.batchAdd\n    events:\n      - http:\n          path: api/add/batch\n          method: post\n          cors: true\n\n  updateOne:\n    handler: handlers/update.updateOne\n    events:\n      - http:\n          path: api/item/{id}\n          method: put\n          cors: true\n\n  deleteOne:\n    handler: handlers/delete.deleteOne\n    events:\n      - http:\n          path: api/item/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    userTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.ITEM_TABLE}\n"]},{"id":146931098,"files":["service: lambda-edge-auth-server # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  authOnly:\n    handler: handler.authOnly\n    memorySize: 128\n    timeout: 1\n    lambdaAtEdge:\n      distribution: \"App1Distribution\"\n      eventType: \"viewer-request\"\n      pathPattern: \"private/*\"\n\nplugins:\n  - serverless-s3-sync\n  - serverless-plugin-cloudfront-lambda-edge\n\ncustom:\n  s3Sync:\n    - bucketName: public-app # required\n      localDir: ../build/signIn # required\n      acl: public-read # optional\n      followSymlinks: true # optional\n      defaultContentType: text/html # optional\n      params: # optional\n        - index.html:\n            CacheControl: \"no-cache\"\n        - \"*.js\":\n            CacheControl: \"public, max-age=31536000\"\n    - bucketName: private-app\n      localDir: ../build/main\n\nresources:\n  Resources:\n    PublicAppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: public-app\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    PrivateAppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: private-app\n    App1Distribution:\n      Type: \"AWS::CloudFront::Distribution\"\n      Properties:\n        DistributionConfig:\n          DefaultCacheBehavior:\n            TargetOriginId: \"PublicAppOrigin\"\n            ViewerProtocolPolicy: \"redirect-to-https\"\n            DefaultTTL: 600 # ten minutes\n            MaxTTL: 600 # ten minutes\n            Compress: true\n            ForwardedValues:\n              QueryString: false\n              Cookies:\n                Forward: \"none\"\n          CacheBehaviors:\n            - TargetOriginId: PrivateAppOrigin\n              DefaultTTL: 600 # ten minutes\n              MaxTTL: 600 # ten minutes\n              ViewerProtocolPolicy: \"redirect-to-https\"\n              ForwardedValues:\n                QueryString: false\n                Cookies:\n                  Forward: \"none\"\n              PathPattern: private/*\n          DefaultRootObject: \"index.html\"\n          Enabled: true\n          PriceClass: \"PriceClass_100\"\n          HttpVersion: \"http2\"\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n          Origins:\n            - DomainName: public-app.s3.amazonaws.com\n              Id: \"PublicAppOrigin\"\n              S3OriginConfig: {}\n            - DomainName: private-app.s3.amazonaws.com\n              Id: \"PrivateAppOrigin\"\n              S3OriginConfig: {}\n"]},{"id":129516308,"files":["service: test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  # vpc:\n  #   securityGroupIds:\n  #     - your-security-group-id\n  #   subnetIds:\n  #     - your-subnet-id\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n         path: /\n         method: get\n\nplugins:\n  - serverless-offline\n"]},{"id":78805763,"files":["service: ${self:custom.skillNamespace}-service\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\npackage:\n  exclude:\n    - npm-scripts/**\n    - s3-cors.json\n    - config/dev.skill.config.json\n    - config/prod.skill.config.json    \n    # remove node modules only needed for npm scripts\n    - node_modules/attrs.argv/**\n    - node_modules/cp/**\n    - node_modules/npm-run-script/**\n    - node_modules/prompt/**\n    - node_modules/mocha/**\n    - node_modules/urldecode/**\n    - node_modules/opn/**\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: YOUR_REGION\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:custom.profiles.${self:provider.stage}}\n  memorySize: 128\n\ncustom:\n  skillNamespace: YOUR_NAMESPACE\n  defaultStage: dev\n  profiles:\n    dev: ${self:custom.skillNamespace}-profile-dev\n    prod: ${self:custom.skillNamespace}-profile-prod\n\nfunctions:\n  skill:\n    handler: main.handler\n    role:\n      'Fn::GetAtt': [ lambdaRole, Arn ]\n    events:\n      - alexaSkill \n\nresources:\n  Resources:\n    lambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole\n        Path: \"/\"\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:provider.stage}-lambdaPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'logs:CreateLogGroup'\n                    - 'logs:CreateLogStream'\n                    - 'logs:PutLogEvents'\n                  Resource: arn:aws:logs:${self:provider.region}:*:*\n"]},{"id":135499502,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: expensybot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\ncustom:\n  configbucketname: configbucket\n  configsavebucketname: savebucket\n  snstextreg: textreg\n  snslexbot: lexbot\n  snsdbase: dbasebot\n  snsreport: reportbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  timeout: 10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    DYNAMODB_INDEX: receiptdateyear-receiptdatemonth-index\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - \"logs:CreateLogGroup\"\n       - \"logs:CreateLogStream\"\n       - \"logs:PutLogEvents\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"lex:PostText\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"rekognition:DetectText\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n      Resource:\n       - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/${self:provider.environment.DYNAMODB_INDEX}\"\n       - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - \"SNS:Publish\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snstextreg}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snslexbot}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsdbase}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsreport}\" ] ]  }\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::${self:service}-${self:provider.stage}-${self:custom.configbucketname}/*\"\n        - \"arn:aws:s3:::${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}/*\"\n\nfunctions:\n  expensybot: # Main handler and communication with the Telegram Bot\n    handler: handler.expensy_bot\n    memorySize: 128\n    environment:\n     BOT_NAME: expensy_bot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     CONFIG_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configbucketname}\n     CONFIG_FILE: config.json\n     SNS_TOPIC_TEXTREG: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snstextreg}\" ] ]  }\n     SNS_TOPIC_LEXREG: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snslexbot}\" ] ]  }\n    events:\n     - http:\n        path: telegram/sendmessage\n        method: post\n        integration: lambda\n        request:\n          template:\n            application/json: '{\"body\": $input.json(\"$\")}'\n  expensybot-init: # Lambada function for Input validation of the lex bot from AMAZON Lex Service\n    handler: handler-init.expensy_init\n    memorySize: 128\n    environment:\n     BOT_NAME: expensy_bot\n  expensybot-dbase: # Lambada function for communcation with the AMAZON Dynmodb Service\n    handler: handler-dbase.expensy_bot_dbase\n    environment:\n     MY_AWS_REGION: ${self:provider.region}\n     DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsdbase}\n  expensybot-report: # Lambada function to generate PDF report\n    timeout: 60\n    handler: handler-report.expensy_bot_report\n    environment:\n     MY_AWS_REGION: ${self:provider.region}\n     CONFIG_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configbucketname}\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}\n     DYNAMODB_INDEX: ${self:provider.environment.DYNAMODB_INDEX}\n     HTML_TEMPLATE_FILE: template.html\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsreport}\n  expensybot-textreg: # Lambada function for text extraction using AMAZON Rekognition Service\n    handler: handler-textreg.expensy_bot_textreg\n    environment:\n     BOT_NAME: expensy_bot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     API_FILE_GATEWAY_URL: https://api.telegram.org/file/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     CONFIG_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configbucketname}\n     SAVE_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}\n     CONFIG_FILE: config.json\n     SNS_TOPIC_LEXREG: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snslexbot}\" ] ]  }\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snstextreg}\n  expensybot-snslexbot: # Lambada function for communication to the AMAZON Lex Service\n    handler: handler-snslexbot.expensy_bot_snslexbot\n    environment:\n     BOT_NAME: expensy_bot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     API_FILE_GATEWAY_URL: https://api.telegram.org/file/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SNS_TOPIC_DBASE: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsdbase}\" ] ]  }\n     SNS_TOPIC_REPORT: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsreport}\" ] ]  }\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snslexbot}\n  expensybot-savefile: # Lambada function to store a file into the AMAZON S3 Service\n    handler: handler-savefile.expensy_bot_savefile\n    memorySize: 128\n    environment:\n     BOT_NAME: expensy_bot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     API_FILE_GATEWAY_URL: https://api.telegram.org/file/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SAVE_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snstextreg}\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: receiptdatemonth\n            AttributeType: S\n          - AttributeName: receiptdateyear\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.DYNAMODB_INDEX}\n            KeySchema:\n            - AttributeName: receiptdateyear\n              KeyType: HASH\n            - AttributeName: receiptdatemonth\n              KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: '1'\n              WriteCapacityUnits: '1'\n    configbucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-${self:custom.configbucketname}\n    configsavebucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}\n"]},{"id":99837886,"files":["service: aws-lambda-infra-functions\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: qa\n\npackage:\n  exclude:\n    - .git/**\n    - coverage/**\n    - .nyc_output/**\n    - packages/**\n  excludeDevDependencies: true\n\nfunctions:\n  execGraphql:\n    handler: lambda.execGraphql\n  sqsToGraphql:\n    handler: lambda.sqsToGraphql\n  sendMsgGraphql:\n    handler: lambda.sendMsgGraphql\n  kinesisToGraphql:\n    handler: lambda.kinesisToGraphql\n"]},{"id":129608565,"files":["service: todo-lambda-restapi # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \n        - { \"Fn::GetAtt\": [\"TodosDynamoDbTable\", \"Arn\" ] }\n\nfunctions:\n  app:\n    handler: todos/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n  create:\n    handler: todos/index.handler\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/index.handler\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/index.handler\n    events:\n      - http:\n          path: todos/{proxy+}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/index.handler\n    events:\n      - http:\n          path: todos/{proxy+}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/index.handler\n    events:\n      - http:\n          path: todos/{proxy+}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":122126204,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: storage\n\nplugins:\n  - serverless-dotenv-plugin\n\ncustom:\n  dotenv:\n    path: ../.env\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\nfunctions:\n  sendBankValue:\n    timeout: 30\n    handler: sendBankValue.handler\n    environment:\n      INFURA_API_KEY : ${env:INFURA_API_KEY}\n      MNEMONIC : ${env:MNEMONIC}\n    events:\n      - http:\n          path: send\n          method: get\n          cors: false # TODO\n  setBankHash:\n    timeout: 30\n    handler: setBankHash.handler\n    events:\n      - http:\n          path: set\n          method: get\n          cors: false # TODO\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":97378119,"files":["service: shrink\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  vars: ${file(vars/${self:custom.stage}.yml)}\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  environment:\n    SLS_STAGE: ${self:custom.stage}\n    ROOT_PATH: ${self:custom.vars.DomainName}\n    DDB_Table: {Ref: LinkDB}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - Ref: LinkDB\n      Effect: Allow\n\nfunctions:\n  create:\n    handler: funcs/create.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: funcs/redirect.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput: ${self:custom.vars.DynamoCapacity}\n    # To avoid bug: https://github.com/serverless/serverless/issues/2233\n    # Deploy with the CustomDomainMap section commented out, then redeploy with it uncommented\n    # There is a bug in the build dependencies and this is created too early\n    CustomDomainMap:\n      Type: \"AWS::ApiGateway::BasePathMapping\"\n      Properties:\n        DomainName: ${self:custom.vars.DomainName}\n        Stage: ${self:custom.stage}\n        RestApiId: {Ref: ApiGatewayRestApi}\n"]},{"id":106895186,"files":["service: reactionary\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: us-east-1\n\n  environment:\n    TOKEN: \"${env:TOKEN}\"\n\npackage:\n  exclude:\n    - .env\n\nfunctions:\n  api:\n    handler: src/index.handler\n\n    events:\n     - http:\n        method: GET\n        path: /{id}\n     - http:\n        method: GET\n        path: /\n\nplugins:\n  - serverless-webpack\n  - serverless-dotenv-plugin\n  - serverless-domain-manager\n\ncustom:\n  webpackIncludeModules: true # enable auto-packing of external modules\n  dotenv:\n    path: .env\n    include:\n      - TOKEN\n  customDomain:\n    domainName: api.theweb.rocks\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n    certificateName: '*.theweb.rocks'\n"]},{"id":95286601,"files":["service: stakinet-wakeup\n\npackage:\n  exclude:\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: production\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n  environment:\n    NJ2JP_WAKEUP: ${file(./config.yml):nj2jpWakeup}\n    LONESMOKE_WAKEUP: ${file(./config.yml):lonesmokeWakeup}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n\nfunctions:\n  wakeup:\n    handler: handler.wakeup\n    events:\n      - schedule: rate(20 minutes)\n"]},{"id":103774441,"files":["service: auth\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n\n  auth-request-verification-code:\n    name: auth-request-verification-code\n    description: Takes a phoneNumber and creates a verification code/challenge\n    role: lambdaAuthRequestVerificationCodeRole\n    handler: request-verification-code.requestVerificationCode\n    events:\n      - http:\n          path: auth/request-verification-code\n          method: post\n\n  auth-send-sms-verification-code:\n    name: auth-send-sms-verification-code\n    description: Takes a verification code/challenge and sends verification code to its phoneNumber\n    role: lambdaAuthSendSMSVerificationCodeRole\n    handler: send-sms-verification-code.sendSMSVerificationCode\n\n    #\n    # Serverless doesn't support kinesis event mapping currently\n    # This needs to be run in command line to establish kinesis event mapping\n    #\n    #aws lambda create-event-source-mapping \\\n    #--region < region > \\\n    #--function-name auth-send-sms-verification-code \\\n    #--event-source  arn:aws:kinesis:< region >:< AWS account ID >:stream/phone-verification-stream \\\n    #--starting-position TRIM_HORIZON\n    #\n\n  auth-verify-verification-code:\n    name: auth-verify-verification-code\n    description: Takes a verificationCode and if it matches, marks the challenge verified\n    role: lambdaAuthVerifyVerificationCodeRole\n    handler: verify-verification-code.verifyVerificationCode\n    events:\n      - http:\n          path: auth/verify-verification-code\n          method: post\n\nresources:\n  Resources:\n\n    lambdaAuthSendSMSVerificationCodeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /lambda/auth/\n        RoleName: lambdaAuthSendSMSVerificationCodeRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: lambdaAuthSendSMSVerificationCodeRolePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \"arn:aws:logs:*:*:*\"\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogStream\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*\n                - Effect: Allow\n                  Action:\n                    - logs:PutLogEvents\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*:*\n                - Effect: Allow\n                  Action:\n                    - kinesis:GetShardIterator\n                    - kinesis:GetRecords\n                    - kinesis:DescribeStream\n                    - kinesis:ListStreams\n                  Resource: arn:aws:kinesis:< region >:< AWS account ID >:stream/VerificationChallenges\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                  Resource: arn:aws:dynamodb:< region >:< AWS account ID >:table/VerificationChallenges\n\n    lambdaAuthRequestVerificationCodeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /lambda/auth/\n        RoleName: lambdaAuthRequestVerificationCodeRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: lambdaAuthRequestVerificationCodeRolePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \"arn:aws:logs:*:*:*\"\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogStream\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*\n                - Effect: Allow\n                  Action:\n                    - logs:PutLogEvents\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*:*\n                - Effect: Allow\n                  Action:\n                    kinesis:*\n                  Resource:\n                    arn:aws:kinesis:< region >:< AWS account ID >:stream/phone-verification-stream\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                  Resource: arn:aws:dynamodb:< region >:< AWS account ID >:table/VerificationChallenges\n\n    lambdaAuthVerifyVerificationCodeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /lambda/auth/\n        RoleName: lambdaAuthVerifyVerificationCodeRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: lambdaAuthVerifyVerificationCodeRolePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \"arn:aws:logs:*:*:*\"\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogStream\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*\n                - Effect: Allow\n                  Action:\n                    - logs:PutLogEvents\n                  Resource:\n                    - arn:aws:logs:< region >:< AWS account ID >:log-group:/aws/lambda/verificationEventLog:*:*\n                - Effect: Allow\n                  Action:\n                    kinesis:*\n                  Resource:\n                    arn:aws:kinesis:< region >:< AWS account ID >:stream/VerificationChallenges\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                  Resource: arn:aws:dynamodb:< region >:< AWS account ID >:table/VerificationChallenges\n\n\n"]},{"id":100724072,"files":["# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\nservice: serverless-shop\n\n# Configuration variables\ncustom:\n  secrets: ${file(secrets.json)}\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  profile: personal\n  region: eu-west-1\n  environment:\n    STRIPE_SECRET_KEY: ${self:custom.secrets.stripeSecretKey} # Stripe secret API key\n\n# The `functions` block defines what code to deploy\nfunctions:\n  createCharge:\n    handler: functions/createCharge.handler\n    # The `events` block defines how to trigger the handler.createCharge code\n    events:\n      - http:\n          path: charges\n          method: post\n          cors: true\n  fetchProducts:\n    handler: functions/fetchProducts.handler\n    events:\n      - http:\n          path: products\n          method: get\n          cors: true\n"]},{"id":82256302,"files":["service: aws-nodejs\n\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: \"stripe001\"\n  region: us-east-1\n  profile: perceptionz\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:DeleteItem\"\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/*\"\nfunctions:\n  receivepaymentevent:\n    handler: handler.receivepayment\n    events:\n      - http:\n          path: /receive-payment-event\n          method: post\n"]},{"id":83508852,"files":["service: backslack\n\nframeworkVersion: \">=1.17.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v0\n  region: ap-northeast-1\n  cfLogs: true\n  apiKey: false\n\nfunctions:\n  hook:\n    handler: handler.hook\n    events:\n      - http:\n          path: hook\n          method: post\n          cors: false\n          integration: lambda-proxy\n"]},{"id":82109289,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: kick-comment\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  exclude:\n    - .git/**\n    - src/**\n    - test/**\n\nfunctions:\n  getComments:\n    handler: handler.getComments\n    events:\n      - http:\n          path: comments\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                id: true\n                name: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":63055145,"files":["service: xd-trello-weekmenu\n\nprovider:\n  name: aws\n  profile: serverless-personal\n  region: eu-west-1\n  stage: prod\n  runtime: nodejs4.3\n  memorySize: 128\n  timeout: 10\n  versionFunctions: false\n\nfunctions:\n  main:\n    description: Rearranges the lists of a Trello board so that the current day comes first & resets the board on Saturday.\n    handler: handler.hello\n    environment:\n      TRELLO_BOARD_ID: ${file(./config.yml):TRELLO_BOARD_ID}\n      TRELLO_API_TOKEN: ${file(./config.yml):TRELLO_API_TOKEN}\n      TRELLO_API_KEY: ${file(./config.yml):TRELLO_API_KEY}\n    events:\n      - schedule: cron(5 0 * * ? *) # Run it every day at 00:05 GMT"]},{"id":95389737,"files":["service: lambda-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  lambda-example:\n    handler: lambda.handler\n","service: lambda-data-consumer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  lambda-data-consumer:\n    handler: lambda.handler\n"]},{"id":83755829,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":94358988,"files":["service: LucyAlexaService\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    AWS_IOT_ENDPOINT: xxxxxxxxxxxxx.iot.us-east-1.amazonaws.com\n    RESIN_DEVICE_ID: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"iot:Publish\"\n       Resource: \"*\"\n\nfunctions:\n  flyDrones:\n    handler: handler.flyDrones\n    events:\n      - alexaSkill\n\nplugins:\n  - serverless-offline\n","service: ResinAWSLambdaService\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    RESIN_EMAIL: you@email.com\n    RESIN_PASSWORD: xxxxxxxxxxxxxxxx\n    RESINRC_DATA_DIRECTORY: /tmp\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"iot:*\"\n       Resource: \"*\"\n\nfunctions:\n  provision:\n    handler: index.provision\n    events:\n      - http:\n          path: provision\n          method: post\n\nplugins:\n  - serverless-offline\n"]},{"id":70944421,"files":["  # Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: session\ncustom:\n  config: ${file(./config/${opt:stage}.js):config}\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs4.3\n  cfLogs: true \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:PutItem\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchGetItem\n        - dynamodb:BatchWriteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n    - Effect: Allow\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n      Resource: \"*\"\n  environment:\n    STAGE: ${opt:stage}\n    USERS_TABLE: ${self:custom.config.UsersTable}\n    REFRESH_TOKEN_TABLE: ${self:custom.config.RefreshTokenTable}\n    ACCESS_TOKEN_EXPIRATION: ${self:custom.config.AccessTokenExpiration}\n    REFRESH_TOKEN_EXPIRATION: ${self:custom.config.RefreshTokenExpiration}\n    LOG_LEVEL: ${self:custom.config.LogLevel}\n    API_ID_SALT: ${self:custom.config.ApiIdSalt} # salts must be encrypted in configs - use AWS KMS to decrypt at run-time\n    PASSWORD_SALT: ${self:custom.config.PasswordSalt} # salts must be encrypted in configs - use AWS KMS to decrypt at run-time\n\n# NOTE: vpc deployment can fail due to a race condition in CFT: functions are being created before the role permissions are ready\n# see: https://github.com/serverless/serverless/issues/2780\n# until this is fixed, you have to do an initial sls deploy in 2 passes:\n# 1. sls deploy with iamRoleStatements including the proper ec2 actions\n# 2. then sls deploy with vpc configs\n# if you don't want to run your function from a VPC, set config.VPC to an empty object:\n  vpc: ${self:custom.config.VPC}\n  #profile: ko-playground-admin\n\npackage:\n  exclude:\n    - gulpfile.js\n    - lambda_functions/**/*.test.js\n    - lib/**/*.test.js\n    - config\n\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http:\n          path: ping\n          method: GET\n          cors: true\n  getSession:\n    handler: handler.getSession\n    events:\n        - http: \n            path: session\n            method: GET\n            cors: true\n            authorizer: \n              name: authorizer\n              resultTtlInSeconds: 3\n              identitySource: method.request.header.Authorization\n  createSession:\n    handler: handler.createSession\n    events:\n        - http:\n            path: session\n            method: POST\n            cors: true\n            authorizer:\n              name: clientIdAuthorizer\n              resultTtlInSeconds: 300\n              identitySource: method.request.header.x-koms-clientid\n  refreshSession:\n    handler: handler.refreshSession\n    events:\n        - http:\n            path: session\n            method: PUT\n            cors: true\n            authorizer:\n              name: clientIdAuthorizer\n              resultTtlInSeconds: 300\n              identitySource: method.request.header.x-koms-clientid\n  deleteSession:\n    handler: handler.deleteSession\n    events:\n        - http:\n            path: session\n            method: DELETE\n            cors: true\n            authorizer: \n              name: clientIdAuthorizer\n              resultTtlInSeconds: 300\n              identitySource: method.request.header.x-koms-clientid\n  createUser:\n    handler: handler.createUser\n    events:\n        - http: \n            path: user\n            method: POST\n            cors: true\n            authorizer: \n              name: clientIdAuthorizer\n              resultTtlInSeconds: 300\n              identitySource: method.request.header.x-koms-clientid\n  getUser:\n    handler: handler.getUser\n    events:\n        - http:\n            path: user\n            method: GET\n            cors: true\n            authorizer: \n              name: authorizer\n              resultTtlInSeconds: 3\n              identitySource: method.request.header.Authorization\n  authorizer:\n    handler: handler.authorizer\n  clientIdAuthorizer:\n    handler: handler.clientIdAuthorizer\n\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: Email\n          AttributeType: S\n        - AttributeName: Id\n          AttributeType: S\n        GlobalSecondaryIndexes:\n        - IndexName: Email-index\n          Projection:\n            ProjectionType: ALL\n          ProvisionedThroughput:\n            WriteCapacityUnits: 5\n            ReadCapacityUnits: 5\n          KeySchema:\n          - KeyType: HASH\n            AttributeName: Email\n        ProvisionedThroughput:\n          WriteCapacityUnits: 5\n          ReadCapacityUnits: 5\n        TableName: ${self:custom.config.UsersTable}\n        KeySchema:\n        - KeyType: HASH\n          AttributeName: Id\n    TokenTable:\n      Type: AWS::DynamoDB::Table\n      Properties:        \n        AttributeDefinitions:\n        - AttributeName: PrincipalId\n          AttributeType: S\n        - AttributeName: RefreshToken\n          AttributeType: S\n        - AttributeName: AccessToken\n          AttributeType: S\n        GlobalSecondaryIndexes:\n        - IndexName: PrincipalId-index\n          Projection:\n            ProjectionType: ALL\n          ProvisionedThroughput:\n            WriteCapacityUnits: 5\n            ReadCapacityUnits: 5\n          KeySchema:\n          - KeyType: HASH\n            AttributeName: PrincipalId\n        - IndexName: AccessToken-index\n          Projection:\n            ProjectionType: ALL\n          ProvisionedThroughput:\n            WriteCapacityUnits: 5\n            ReadCapacityUnits: 5\n          KeySchema:\n          - KeyType: HASH\n            AttributeName: AccessToken\n        ProvisionedThroughput:\n          WriteCapacityUnits: 5\n          ReadCapacityUnits: 5\n        TableName: ${self:custom.config.RefreshTokenTable}\n        KeySchema:\n        - KeyType: HASH\n          AttributeName: RefreshToken\n"]},{"id":81505486,"files":["service: lambda-facebook-oauth\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 1536\n  timeout: 10\n  versionFunctions: false\n    \nfunctions:\n  auth:\n    handler: index.auth\n    events: \n      - http:\n          path: auth/facebook\n          method: get\n    environment:\n      appKey: <YOUR-FACEBOOK-APP-KEY>\n      appSecret: <YOUR-FACEBOOK-APP-SECRET>\n      redirectUrl: <THE-APIGW-URL-FOR-THIS-LAMBDA-FUNCTION>\n      appUrl: <YOUR-APP-URL-THAT-YOU-WANT-TO-REDIRECT-TO-AFTER-SUCCESSFUL-AUTHN>\n"]}]