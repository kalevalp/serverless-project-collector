[{"id":209775667,"files":["service: doodle-hours\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  memorySize: 128\n  timeout: 30\n  stage: ${opt:stage, 'dev'}\n  environment:\n    NODE_ENV: ${self:custom.nodeEnv.${opt:stage, self:provider.stage}, 'development'}\n    AIRTABLE_API_KEY: ${env:AIRTABLE_API_KEY}\n    AIRTABLE_BASE_ID: ${env:AIRTABLE_BASE_ID}\n\nfunctions:\n  app:\n    handler: ./functions/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\ncustom:\n  nodeEnv:\n    dev: \"development\"\n    prod: \"production\"\n  serverless-offline:\n    port: 9000"]},{"id":209345724,"files":["service: ecupcakes-sls-nodejs-aws-demo\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  memorySize: 2048\n  timeout: 15\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - lambda:InvokeFunction\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n  usagePlan:\n    throttle:\n      burstLimit: 500\n      rateLimit: 1000\n  tracing:\n    apiGateway: true\n    lambda: true\n\nfunctions:\n  create:\n    handler: orders/create.create\n    events:\n      - http:\n          path: api/v1/ecupcakes/order\n          method: post\n          cors: true\n\n  list:\n    handler: orders/list.list\n    events:\n      - http:\n          path: api/v1/ecupcakes/order\n          method: get\n          cors: true\n\nresources:\n Resources:\n   UserOrders:\n     Type: AWS::DynamoDB::Table\n     DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy\n     Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n"]},{"id":187526935,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-domain-manager\n\n# The `service` block is the name of the service\nservice: serverless-exyos\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\ncustom:\n  customDomain:\n    domainName: exyos.acari.io\n    basePath: ''\n    stage: prd\n    createRoute53Record: true\n\n# The `functions` block defines what code to deploy\nfunctions:\n  API:\n    handler: src/api/index.handler\n    events:\n      - http:\n          path: /api # this matches the base path\n          method: ANY\n      - http:\n          path: /api/{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n  exyos:\n    handler: src/index.handler\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: / # this matches the base path\n          method: ANY\n      - http:\n          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n"]},{"id":183602834,"files":["# Service\nservice: project-name\n\n# plugins\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 120\n  stage: dev\n  region: ap-northeast-1\n  profile: ${file(env.yml):profile}\n  environment: ${file(env.yml):environment}\n  apiKeys:\n    - your-key-name # this will be auto created when you deploy\n  usagePlan:\n    quota:\n      limit: 50000\n      offset: 1\n      period: MONTH\n    throttle:\n      burstLimit: 2000\n      rateLimit: 1000\n\n# custom\ncustom:\n  serverless-offline:\n    port: 4000\n  # splitStacks:\n  #   perFunction: true\n  #   perType: true\n  webpack:\n    webpackConfig: ./webpack.config.js\n\n  webpackIncludeModules:\n      forceInclude:\n        - pg\n  # originHeader:\n  #   - ${file(env.yml):originHeader.DOMAIN_DEV}\n  #   - ${file(env.yml):originHeader.DOMAIN_STG}\n  #   - ${file(env.yml):originHeader.DOMAIN_PROD}\n  #   - ${file(env.yml):originHeader.DOMAIN_LOCAL}\n  headersHeader:\n    - Content-Type\n    - X-Amz-Date\n    - Authorization\n    - X-Api-Key\n    - X-Amz-Security-Token\n    - X-Amz-User-Agent\n    - Access-Control-Allow-Origin\n    - Access-Control-Allow-Credentials\n    - Access-Control-Allow-Headers\n\nfunctions:\n  authorize:\n    handler: middleware/Authentication.handler\n  app:\n    handler: controller/HomeController.index\n    name: homepage\n    events:\n      - http: \n          path: /\n          method: get\n\n  login:\n    handler: controller/AuthController.login\n    name: login\n    events:\n      - http:\n          path: /api/login\n          method: post\n          cors: true\n\n  getUser:\n    handler: controller/AuthController.getUser\n    name: getUser\n    events:\n      - http:\n          path: /api/auth/getUser\n          method: get\n          cors: true\n          authorizer:\n            name: authorize\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n\n"]},{"id":97581690,"files":["service:\n  name: aws-nodejs-typescript\n#app: your-app-name\n#tenant: your-tenant-name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":205576931,"files":["service: sls-migrate-plugin-example\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DATABASE_NAME: content\ncustom:\n  migrate:\n    store: .migrate2\n    lastRunIndicator: <\n    noDescriptionText: '?'\n    ignoreMissing: true\n    dateFormat: \"yyyy-MM-dd hh:mm:ssZ\"\n    templateFile: \"my-project-template.js\"\n    # fileExtension: .ss  # Uncomment to check it will not work\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  - serverless-migrate-plugin\n"]},{"id":200303097,"files":["service: gcms-cache\n#tenant: your-serverless-framework-enterprise-tenant # TODO Enable this if you want to use the SLS Framework Enterprise for monitoring (not required, may help troubleshoot issues, need to be configured first though)\n#app: gcms-cache\nframeworkVersion: \"=1.49.0\"\n\nplugins:\n  - serverless-webpack # https://github.com/serverless-heaven/serverless-webpack\n  - serverless-sentry # https://github.com/arabold/serverless-sentry-plugin/issues/30 (https://github.com/arabold/serverless-sentry-plugin)\n  - serverless-offline # See https://github.com/dherault/serverless-offline\n  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin\n  - serverless-domain-manager # See https://github.com/amplify-education/serverless-domain-manager\n  - serverless-dotenv-plugin # See https://www.npmjs.com/package/serverless-dotenv-plugin\n\npackage:\n  individually: true\n\ncustom:\n  serverless-offline:\n    port: 8085\n    showDuration: true\n  environment: ${env:NODE_ENV, 'development'}\n  envs:\n    development: # XXX Kept for compatibility but useless, development stage doesn't go to AWS\n      profile:\n      domain:\n        name:\n      memorySize:\n    staging:\n      profile: 'tfp-staging' # TODO use the AWS profile your want (we split staging/prod between different AWS accounts, but feel free to use the same if you don't do it our way)\n      domain:\n        name: staging.cache.your-org.com # TODO use the domain name you want, see https://github.com/amplify-education/serverless-domain-manager\n      memorySize: 128\n    production:\n      profile: 'tfp-production' # TODO use the AWS profile your want (we split staging/prod between different AWS accounts, but feel free to use the same if you don't do it our way)\n      domain:\n        name: cache.your-org.com # TODO use the domain name you want, see https://github.com/amplify-education/serverless-domain-manager\n      memorySize: 128\n  sentry: # XXX Duplicated in .sentryclirc and both must be updated accordingly\n    dsn: https://xxx:xxx@sentry.io/xxxxxx # TODO\n    organization: your-org # TODO\n    project: gcms-cache # TODO\n    authToken: xxxx # TODO 64 chars token\n    release: # https://github.com/arabold/serverless-sentry-plugin#releases\n      version: true\n    filterLocal: true # Filter local errors to avoid noise in localhost\n    environment: ${self:custom.environment}\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: 'yarn'\n    packagerOptions: {}\n    excludeFiles: src/**/*.test.js\n    keepOutputDirectory: true\n  customDomain:\n    enabled: true\n    domainName: ${self:custom.envs.${self:provider.stage}.domain.name}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # AWS keeps up to date with the latest v10 version - See https://forum.serverless.com/t/node-10-lambdas-on-aws/8302/2\n  versionFunctions: false # See https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions\n  logRetentionInDays: 60\n  stage: ${self:custom.environment}\n  region: eu-west-1\n  memorySize: ${self:custom.envs.${self:provider.stage}.memorySize, '128'}\n  timeout: 30\n  logs:\n    restApi: true # Enable logs in other services, such as API GW - See https://serverless.com/blog/framework-release-v142/\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    NODE_ENV: ${self:custom.environment}\n  profile: ${self:custom.envs.${self:provider.stage}.profile, ''}\n  stackTags:\n    env: ${self:custom.environment}\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    service: ${self:service}\n    service-type: api\n    runtime: ${self:provider.runtime}\n\nfunctions:\n  cache-query:\n    handler: src/functions/cache-query.cacheQuery\n    events:\n      - http:\n          method: POST\n          path: /cache-query\n          cors: true\n\n  refresh-cache:\n    handler: src/functions/refresh-cache.refreshCache\n    events:\n      - http:\n          method: POST\n          path: /refresh-cache\n          cors: true\n\n  status:\n    handler: src/functions/status.status\n    events:\n      - http:\n          method: GET\n          path: /status\n          cors: true\n\n  read-cache:\n    handler: src/functions/read-cache.readCache\n    events:\n      - http:\n          method: GET\n          path: /read-cache\n          cors: true\n          authorizer: # See https://medium.com/@Da_vidgf/http-basic-auth-with-api-gateway-and-serverless-5ae14ad0a270\n            name: authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            type: request\n  authorizer:\n    handler: src/authorizers/basic-auth.handler\n\nresources:\n  Conditions:\n    IsProduction:\n      Fn::Equals:\n        - ${self:custom.environment}\n        - \"production\"\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.WWW-Authenticate: \"'Basic'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    healthCheck:\n      Condition: IsProduction # Only deploy HealthCheck in production environment\n      Type: \"AWS::Route53::HealthCheck\"\n      Properties:\n        HealthCheckConfig:\n          EnableSNI: true\n          FailureThreshold: \"3\"\n          FullyQualifiedDomainName: ${self:custom.envs.${self:provider.stage}.domain.name}\n          ResourcePath: \"/status\" # XXX Optimize cost by hitting a simple endpoint which doesn't download anything and avoid cost due to data transfer (S3, API Gateway)\n          MeasureLatency: false # XXX Cost $1/stage/month ($2/month for staging + production)\n          Port: \"80\"\n          Regions: # XXX Only check from UE/US (minimum 3 regions is required), cost much less money and not useful to check from all datacenters in the world\n            - 'eu-west-1' # Ireland\n            - 'us-west-1' # California\n            - 'us-east-1' # Virginia\n          RequestInterval: \"30\" # 30 is the max allowed\n          Type: \"HTTPS\"\n        HealthCheckTags:\n          - Key: \"env\"\n            Value: ${self:custom.environment}\n          - Key: \"stage\"\n            Value: ${self:provider.stage}\n          - Key: \"region\"\n            Value: ${self:provider.region}\n          - Key: \"service\"\n            Value: ${self:service}\n          - Key: \"service-type\"\n            Value: api\n"]},{"id":82894842,"files":["service: versionwatcher\n\nprovider:\n    name: aws\n    runtime: nodejs6.10\n    profile: versionwatcher\n    stage: stage\n    region: eu-west-1\n    apiKeys:\n        - ${opt:stage}-VersionWatcher\n    environment:\n        TABLE_VERSION: ${file(./serverless.env.yml):${opt:stage}.TABLE_VERSION}\n        TABLE_PACKAGE: ${file(./serverless.env.yml):${opt:stage}.TABLE_PACKAGE}\n        TABLE_STABLE: ${file(./serverless.env.yml):${opt:stage}.TABLE_STABLE}\n        WATCH_WEBHOOK: ${env:WATCH_WEBHOOK}\n        IFTTT_KEY: ${env:IFTTT_KEY}\n\nfunctions:\n    watchVersion:\n        handler: handlers.watchHandler\n        description: Inspect and notify about old package versions\n        events:\n            #- schedule:\n                #rate: cron(0 12 * * ? *)\n            - http:\n                path: tracker/watch\n                method: get\n                private: true\n\n    trackWp:\n        handler: handlers.wp\n        description: Track Wordpress dependencies\n        events:\n            - http:\n                path: tracker/wp\n                method: post\n                private: true\n\n    trackNode:\n        handler: handlers.node\n        description: Track Node.js dependencies\n        events:\n            - http:\n                path: tracker/node\n                method: post\n                private: true\n\n    trackPython:\n        handler: handlers.python\n        description: Track python dependencies\n        events:\n            - http:\n                path: tracker/python\n                method: post\n                private: true\n\n    stableHandler:\n        handler: handlers.stableHandler\n        description: List stable versions\n        events:\n            - http:\n                path: tracker/stable\n                method: get\n                private: true\n\n    corsProxyHandler:\n        handler: handlers.corsHandler\n        description: Small proxy to bypass cors for frontend\n        events:\n            - http:\n                path: tracker/cors\n                method: get\n                private: true\n\nresources:\n  Resources:\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:PutItem\n                - dynamodb:GetItem\n                - dynamodb:Query\n                - dynamodb:Scan\n              Resource:\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherVersion\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherStable\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherPackage\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherVersion\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherStable\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherPackage\n        Roles:\n          - Ref: IamRoleLambdaExecution\n","stage:\n    TABLE_VERSION: 'stage-VersionWatcherVersion'\n    TABLE_PACKAGE: 'stage-VersionWatcherPackage'\n    TABLE_STABLE: 'stage-VersionWatcherStable'\n\nprod:\n    TABLE_VERSION: 'prod-VersionWatcherVersion'\n    TABLE_PACKAGE: 'prod-VersionWatcherPackage'\n    TABLE_STABLE: 'prod-VersionWatcherStable'\n"]},{"id":205958653,"files":["service:\n  name: sls-vscode-debug-ts\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 1234\n    printOutput: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":158203926,"files":["service: ynab-stock-update\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  timeout: 5\n  versionFunctions: false\n  environment:\n    YNAB_API_TOKEN: ${file(serverless.env.yml):YNAB_API_TOKEN, env:YNAB_API_TOKEN}\n    AUTOMATIC_APPROVAL: ${file(serverless.env.yml):AUTOMATIC_APPROVAL, env:AUTOMATIC_APPROVAL}\n\ncustom:\n  alerts:\n    topics:\n      alarm:\n        topic: ${self:service}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: ${file(serverless.env.yml):ALARM_EMAIL, env:ALARM_EMAIL}\n    definitions:\n      functionErrors:\n        period: 86400 # 1 day\n        treatMissingData: notBreaching\n    alarms:\n      - functionErrors\n\nfunctions:\n  ynab-stock-update:\n    handler: src/index.run\n    events:\n      - schedule: cron(0 23 ? * 2-6 *)\n\nplugins:\n  - serverless-plugin-aws-alerts\n","# YNAB personal access token: https://app.youneedabudget.com/settings/developer\nYNAB_API_TOKEN:\n\n# Should the newly created balance transactions be automatically approved?\nAUTOMATIC_APPROVAL: true\n\n# If the serverless function starts throwing errors - what email should be notified?\nALARM_EMAIL: john@example.com\n"]},{"id":128003685,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-aws-node-chrome # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\ncustom:\n  chrome:\n    functions:\n      - hello\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\nfunctions:\n  hello:\n    memorySize: 1024\n    timeout: 45\n    handler: handler.default\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(1 hour)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":106547107,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-dynamodb-triggers\n\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: prod\n  environment:\n    # Login to AWS, go to DynamoDB, create a table\n    # In Table Details, the Resource is listed under \"Amazon Resource Name (ARN)\"\n    DYNAMODB_TABLE: \"arn:aws:dynamodb:eu-west-1:123456789:table/TABLENAME\"\n    # Enable streams for the table\n    # The Resource should be the full \"Latest stream ARN\" value\n    DYNAMODB_STREAM: \"arn:aws:dynamodb:eu-west-1:123456789:table/TABLENAME/stream/2017-10-11T09:32:34.385\"\n  # you can use an either existing IAM role, or create a statement. But not both\n  # In this example, we're using `iamRoleStatements`, which is why `role` is commented out\n  # If you want to use `role`, comment out all of the `iamRoleStatements` rules\n  # role: arn:aws:iam::123456789:role/ROLENAME\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n      Resource: ${self:provider.environment.DYNAMODB_TABLE}\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: ${self:provider.environment.DYNAMODB_STREAM}\n\n\n# The `functions` block defines what code to deploy\nfunctions:\n  receiveOrder:\n    description: Save orders to a database\n    handler: handler.receiveOrder\n    events:\n      - http:\n          path: receiveOrder\n          method: post\n          cors: true\n\n  processOrder:\n    description: Process orders\n    handler: handler.processOrder\n    events:\n      - stream: ${self:provider.environment.DYNAMODB_STREAM}\n\n\npackage:\n  include:\n    - node_modules/**\n    - events/**"]},{"id":142443153,"files":["service: github-webhook-listener\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: ${env:SERVERLESS_STAGE, 'dev'}\n  # optional, in MB, default is 1024\n  memorySize: 128\n  # optional, in seconds, default is 6\n  timeout: 3\n  # optional, default is true\n  versionFunctions: false\n\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${env:GITHUB_WEBHOOK_SECRET}\n    TRELLO_TOKEN: ${env:TRELLO_TOKEN}\n    TRELLO_KEY: ${env:TRELLO_KEY}\n    TRELLO_BOARD: ${env:TRELLO_BOARD}\n    TRELLO_CARD_PREFIX: ${env:TRELLO_CARD_PREFIX}\n\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n"]},{"id":203832321,"files":["name: serverless-cloudmap-component\n\ncreateUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.createUser\n\nfetchUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.fetchUser\n\nuserTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n    region: eu-west-1\n\nUserService:\n  component: ../\n  inputs:\n    service: 'user-service'\n    namespace: 'test'\n    resources:\n      create:\n        resource: ${createUser}\n      fetch:\n        resource: ${fetchUser}\n      userTable:\n        resource: ${userTable}\n"]},{"id":194949568,"files":["service: handle-email-bounces-aws-ses \n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${{opt:stage}}\n  region: ${{opt:region}}\n  variableSyntax: '\\${{([\\s\\S]+?)}}'\n\nfunctions:\n\n  handle-bounces:\n    handler: bounces.handler\n    role: HandleBouncesLambdaRole\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - EmailBouncesQueue\n              - Arn\n\nresources:\n  Resources:\n\n    EmailBouncesQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"EmailBouncesQueue\"\n\n    EmailBouncesTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"Bounces topic\"\n        TopicName: \"EmailBouncesTopic\"\n\n    BouncesQueueSubscription:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: \n          Ref: EmailBouncesTopic\n        Endpoint: \n          Fn::GetAtt:\n            - EmailBouncesQueue\n            - Arn\n        Protocol: sqs\n        RawMessageDelivery: 'true' \n\n    SnsToSqsSendMessagePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Sid: \"allow-sns-messages\"\n              Effect: Allow\n              Principal: \"*\"\n              Resource: !GetAtt\n                - EmailBouncesQueue\n                - Arn\n              Action: \"SQS:SendMessage\"\n              Condition:\n                ArnEquals:\n                  \"aws:SourceArn\": !Ref EmailBouncesTopic\n        Queues:\n          - Ref: EmailBouncesQueue\n\n    HandleBouncesLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /bounces/\n        RoleName: HandleBouncesLogAccessRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n\n          - PolicyName: HandleBouncesLogPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n\n          - PolicyName: HandleBouncesSQSPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sqs:SendMessage\n                    - sqs:ReceiveMessage\n                    - sqs:DeleteMessage\n                    - sqs:GetQueueAttributes\n                    - sqs:ChangeMessageVisibility\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:sqs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'EmailBouncesQueue'       \n\n          - PolicyName: HandleBouncesLambdaPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - lambda:CreateEventSourceMapping\n                    - lambda:ListEventSourceMappings\n                    - lambda:ListFunctions\n                  Resource: \n                    Fn::Sub: 'arn:aws:lambda:${{opt:region}}:${AWS::AccountId}:function:handle-email-bounces-aws-ses-${{opt:stage}}-handle-bounces'  "]},{"id":130523290,"files":["service: contactless\n\nframeworkVersion: \">=1.1.0 < 2.0.0\"\n#plugins:\n#  - serverless-domain-manager\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  basestackname: contact\n\n  domainname: ${ssm:/${self:custom.basestackname}/domainName}\n  hostname: ${ssm:/${self:custom.basestackname}/apiHostName}\n  acmarn: ${ssm:/${self:custom.basestackname}/apiAcmArn}\n\n  #customDomain:\n  #    domainName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    certificateName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    createRoute53Record: attribute\n  #    endpointType: regional\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n  environment:\n    STAGE: ${self:custom.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n\n\nfunctions:\n  contactus:\n    handler: handler.handle\n    tags:\n      created: serverless for Contact Us\n      Name: contact for serverless\n\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n\nresources:\n  Resources:\n\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: ContactlessServiceEndpoint\n","service: tms\n\nframeworkVersion: \">=1.1.0 < 2.0.0\"\n#plugins:\n#  - serverless-domain-manager\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  extra: ${file(serverless-${self:custom.stage}.json)}\n  basestackname: tmsbase\n\n  domainname: ${ssm:/${self:custom.basestackname}/domainName}\n  hostname: ${ssm:/${self:custom.basestackname}/apiHostName}\n  acmarn: ${ssm:/${self:custom.basestackname}/apiAcmArn}\n\n  #customDomain:\n  #    domainName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    certificateName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    createRoute53Record: attribute\n  #    endpointType: regional\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n  environment:\n    STAGE: ${self:custom.stage}\n    DYNAMODB_TABLE: {Ref: MainDB}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - Ref: MainDB\n            - \"*\"\n\n\nfunctions:\n  mainapi:\n    handler: resthandler.handle\n    tags:\n      created: serverless for Customer REST API\n      Name: REST Customer  Lambda Function\n\n    events:\n      - http:\n          path: /{ObjectType}\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /{ObjectType}\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n      - http:\n          path: /{ObjectType}\n          method: delete\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n      - http:\n          path: /{ObjectType}\n          method: put\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n\nresources:\n  Resources:\n    MainDB:\n      Type: 'AWS::DynamoDB::Table'\n      #DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: ObjectType\n            AttributeType: S\n          - AttributeName: Id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: ObjectType\n            KeyType: HASH\n          - AttributeName: Id\n            KeyType: RANGE\n        Tags:\n          - Key: \"Created\"\n            Value: \"part of TMS API SLS stack\"\n          - Key: \"Name\"\n            Value: \"TMS Main Serverless DB\"\n        #ProvisionedThroughput: ${self:custom.extra.DynamoCapacity}\n        ProvisionedThroughput: { \"ReadCapacityUnits\": \"1\", \"WriteCapacityUnits\": \"1\"}\n\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: TMSCustomerServiceEndpoint\n"]},{"id":140796492,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n#\n# opt params\n#  - stack - pulls AWS(SSM) from cloud formation setup\n#  - stage - gets appended to service name 'polly-api'\n#  - region - AWS region to use\n#\nservice: polly-api\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  stack: ${opt:stack, 'pollybase'} # base reference stack\n\n  pollydb: ${ssm:/${self:custom.stack}/pollyDB}\n  audiobucket: ${ssm:/${self:custom.stack}/audioBucketName}\n  newpoststopic: ${ssm:/${self:custom.stack}/newPostsTopic}\n  domainname: ${ssm:/${self:custom.stack}/domainName}\n  hostname: ${ssm:/${self:custom.stack}/apiHostName}\n  acmarn: ${ssm:/${self:custom.stack}/apiAcmArn}\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - ${self:custom.pollydb}\n            - \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetBucketLocation\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:s3:::\"\n            - ${self:custom.audiobucket}\n            - \"*\"\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource: \"${self:custom.newpoststopic}\"\n    - Effect: Allow\n      Action:\n        - polly:SynthesizeSpeech\n      Resource: \"*\"\n\n  environment:\n    STAGE: ${self:custom.stage}\n    DB_TABLE_NAME: ${self:custom.pollydb}\n    SNS_TOPIC: ${self:custom.newpoststopic}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  pollyapi:\n    handler: handler.apihandler\n    tags:\n      created: serverless.yaml from polly project\n      Name: handles API calls for Polly UI\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n  convertaudio:\n    handler: convert_audio.lambda_handler\n    tags:\n      created: serverless.yaml from polly project\n      Name: Lambda function to convert text to audio\n    events:\n      - sns: ${self:custom.newpoststopic}\n    environment:\n      BUCKET_NAME: ${self:custom.audiobucket}\n\n\n\nresources:\n  Resources:\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: ${self:service}-${self:custom.stage}-PollyServiceEndPoint\n"]},{"id":192492399,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: Trello-Bug-Reporting\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n  environment:\n    TOKEN: '<TRELLO_API_TOKEN>'\n    KEY: '<TRELLO_API_KEY>'\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  initialise: \n    handler: bug/handler.initialise\n    events:\n      - http:\n          path: bug/init\n          method: POST\n          cors: true\n\n  create_bug: \n    handler: bug/handler.create_bug\n    events:\n      - http:\n          path: bug/create\n          method: POST\n          cors: true\n  \n  retrieve_all: \n    handler: bug/handler.retrieve_all\n    events:\n      - http:\n          path: bug\n          method: GET\n          cors: true\n\n  retrieve_bug: \n    handler: bug/handler.retrieve_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: GET\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\n  update_bug: \n    handler: bug/handler.update_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: PUT\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\n  delete_bug: \n    handler: bug/handler.delete_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: DELETE\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\nresources:\n  Resources:\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: ApiGatewayRestApi\n\n#Plugins\nplugins:\n  - serverless-offline"]},{"id":137588614,"files":["service: carbon\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-central-1:*:*\"\n\nfunctions:\n  put:\n    handler: handler.put\n    events:\n      - http:\n          method: PUT\n          path: carbon/{id}\n          cors: true\n  sum:\n    handler: handler.sum\n    events:\n      - http:\n          method: GET\n          path: carbon\n          cors: true\n  one:\n    handler: handler.one\n    events:\n      - http:\n          method: GET\n          path: carbon/{id}\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          method: DELETE\n          path: carbon/{id}\n          cors: true\nresources:\n  Resources:\n    CarbonDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'carbon'\n"]},{"id":177579611,"files":["service: release-verfication\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:10\n\nfunctions:\n  versions:\n    handler: index.versions\n    events:\n      - http: GET /api/versions\n  version_files:\n    handler: index.version_files\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}\n          resp: http\n  validate_version_file:\n    handler: index.validate_version_file\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}/validate\n          resp: http\n  version_vote_text:\n    handler: index.version_vote_text\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}/vote\n          resp: http\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":200533685,"files":["service: scrapeit-serverless\n\nprovider:\n  stage: prod\n  name: aws\n  runtime: nodejs8.10\n  timeout: 480\n  region: us-east-1\n\nfunctions:\n  scrapeit:\n    handler: handler.scrapeit\n    events:\n      - http:\n          path: scraper/scrapeit\n          method: post"]},{"id":144790427,"files":["service: serverless-rekognition\n\nprovider: \n  name: aws\n  runtime: nodejs8.10\n  stage: test\n  environment:\n    ACCESS_KEY_ID: ${file(./serverless.env.yml):prd.ACCESS_KEY_ID}\n    SECRET_ACCESS_KEY: ${file(./serverless.env.yml):prd.SECRET_ACCESS_KEY}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nfunctions:\n  rekognition:\n    handler: src/api.default\n    events:\n      - http: ANY /\n      - http: 'ANY {proxi+}'\n\ncustom:\n  webpackIncludeModules:\n    forceInclude:\n      - request\n"]},{"id":154864247,"files":["# Serverless - Box Skills AWS Lambda deployment config\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Service and provider configuration\nservice: government-id-skill\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n  environment:\n     ASSURE_ID_ENDPOINT: https://services.assureid.net\n     ASSURE_ID_USERNAME: CHANGE_ME\n     ASSURE_ID_PASSWORD: CHANGE_ME\n     ASSURE_ID_SUBSCRIPTION_ID: CHANGE_ME\n# Environment Variables\n\n\n# Function Configuration\nfunctions:\n  index:\n    handler: index.handler\n    runtime: nodejs8.10\n    timeout: 60\n    events:\n      - http:\n          method: POST\n          path: government-id-skill\n          cors: true\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-redact-skill-demo\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10 # server should still acknowledge Box skills engine within 10 seconds of receiving the event\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# packaging information\npackage:\n  include:\n    - index.js\n    - package.json\n    - node_modules\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: exiftool-metainfo-extraction\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10 # server should still acknowledge Box skills engine within 10 seconds of receiving the event\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# packaging information\npackage:\n  include:\n    - index.js\n    - skills-kit-2.0.js\n    - package.json\n    - node_modules\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","service: HiveCustomSkill\nprovider:\n  name: aws\n  runtime: nodejs8.10  \n  region: us-east-1\n\nfunctions:\n  index:\n    handler: index.handler\n    name: HiveCustomSkill\n    runtime: nodejs8.10\n    timeout: 120\n    events:\n      - http:\n          method: POST\n          path: HiveCustomSkill\n          cors: true\n    environment:\n      HIVE_API_ENDPOINT: YOUR_HIVE_API_ENDPOINT\n      HIVE_API_KEY: YOUR_HIVE_API_KEY","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-google-image\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-east-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    GCV_PROJECT_ID: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    GCV_PRIVATE_KEY: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    GCV_CLIENT_EMAIL: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    SKILL_FILE_SIZE_LIMIT_MB: '10'\n    SKILL_ACCEPTED_FORMATS: 'ai,bmp,gif,eps,heic,jpeg,jpg,png,ps,psd,svg,tif,tiff,dcm,dicm,dicom,svs,tga'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'jpg,jpeg,png,gif,bmp,webp,ico'\n\n# packaging information\npackage:\n  artifact: ./gcv-image-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-image\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 30 # attached to API Gateway so it's automatically limited to 30 seconds.\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    AMS_DEPLOYMENT_LOCATION: ${opt:location, 'westus2'}\n    MICROSOFT_KEY: ADD_YOUR_KEY_HERE\n    SKILL_FILE_SIZE_LIMIT_MB: '4'\n    SKILL_ACCEPTED_FORMATS: 'ai,bmp,gif,heic,jpeg,jpg,png,ps,psd,svg,tif,tiff,dcm,dicm,dicom,svs,tga'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'jpeg,jpg,png,gif,bmp,tif'\n\n\n\n# packaging information\npackage:\n  artifact: ./ams-image-nodejs.zip\n\nfunctions:\n  skill:\n    handler: intrinsic.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: google-product-search-integration\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: google\n  runtime: nodejs8\n  project: YOUR_PROJECT_NAME\n  # the path to the credentials file needs to be absolute\n  credentials: ./privatekey.json\n  environment:\n     PROJECT_ID: CHANGE_ME\n     LOCATION: CHANGE_ME\n     SET_ID: CHANGE_ME\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: skills\n    events:\n      - http: path"]},{"id":180276648,"files":["service: twitter-collection-gateway\npackage:\n  exclude:\n      - node_modules/oauth/examples/**\n      - node_modules/oauth/tests/**\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  endpointType: REGIONAL\n  stage: devs\n  region: ap-southeast-2\n  logRetentionInDays: 5\n  apiKeys:\n    - iautomate.cloud\n  usagePlan:\n    quota:\n      limit: 300\n      offset: 0\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 10\nfunctions:\n  getCuratedTweets:\n    handler: handler.getCuratedTweets\n    events:\n      - http: \n            method: GET\n            path: getCuratedTweets\n            cors: true\n            private: true\n    timeout: 5\n    environment:\n        ConsumerAPIKey: ${ssm:/twittergateway/ConsumerAPIKey~true}\n        APISecretKey: ${ssm:/twittergateway/APISecretKey~true}\n        OAuthAccessToken: ${ssm:/twittergateway/OAuthAccessToken~true}\n        OAuthTokenSecret: ${ssm:/twittergateway/OAuthTokenSecret~true}\n        twitterCollectionUUID: https://api.twitter.com/1.1/collections/entries.json?id=custom-${ssm:/twittergateway/twitterCollectionUUID~true}&tweet_mode=extended"]},{"id":131112120,"files":["service:\n  name: serverless-polly\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:s3:::\"\n            - Ref : AudioBucket\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:ListStreams\"\n      Resource:\n        - 'Fn::Join':\n          - ':'\n          -\n            - 'arn:aws:dynamodb'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'Fn::Join':\n              - \"\"\n              - \n                - 'table/'\n                - Ref: PollyTable\n    - Effect: \"Allow\"\n      Action:\n        - \"polly:*\"\n      Resource: \"*\"\n\nfunctions:\n  getpost:\n    handler: getpost.main\n    description: Gets posts from dynamodb\n    events:\n      - http:\n          method: get\n          path: /\n          integration: lambda\n          cors: true\n          request:\n            passThrough: WHEN_NO_MATCH\n            parameters:\n              querystrings:\n                postId: true\n            template:\n              application/json: '{ \"postId\" : \"$input.params(''postId'')\" }'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n    environment:\n      tableName:\n        Ref: PollyTable\n  newpost:\n    handler: newpost.main\n    description: Adds new posts to dynamodb\n    events:\n      - http:\n          method: post\n          path: /\n          integration: lambda\n          cors: true\n          request:\n            passThrough: WHEN_NO_MATCH\n            template:\n              application/json: ''\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n    environment:\n      tableName:\n        Ref: PollyTable\n  convertaudio:\n    handler: convertaudio.main\n    description: Converts text to mp3 voices throught Polly\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 1\n          arn:\n            Fn::GetAtt:\n              - PollyTable\n              - StreamArn\n    environment:\n      tableName:\n        Ref: PollyTable\n      audioBucket:\n        Ref: AudioBucket\n      region: ${self:provider.region}\n\nresources:\n  Resources:\n    PollyTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    StaticBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    AudioBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n"]},{"id":171045395,"files":["service: node-simple-http-endpoint # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: probot-welcome-app\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n"]},{"id":189866954,"files":["service: secret-santa\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n\nfunctions:\n  wishlist:\n    handler: handler.wishlist\n    events:\n      - http:\n          path: /wishlist/{id}\n          method: get\n          cors: true\n\n  index:\n    handler: handler.index\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n\n  handleWishlistSubmision:\n    handler: handler.handleWishlistSubmision\n    events:\n      - http:\n          path: /wishlist/{id}/form\n          method: post\n          cors: true\n\n  handlePairCreation:\n    handler: handler.handlePairCreation\n    events:\n      - http:\n          path: /form\n          method: post\n          cors: true\n"]},{"id":196246021,"files":["name: sls-es-demo\nstage: dev\nregion: eu-west-1\n\nAwsEcsTaskDefinition:\n  component: \"../\"\n  inputs:\n    region: ${region}\n    taskDefinition:\n      family: my-task\n      cpu: \"1024\"\n      memory: \"2048\"\n      volumes:\n          - name: foo\n            host:\n              sourcePath: /home/foo\n          - name: bar\n            host:\n              sourcePath: /home/bar\n      containerDefinitions:\n          - name: myContainer\n            portMappings:\n              - hostPort: 80\n                containerPort: 80\n                protocol: tcp\n            cpu: 0\n            environment:\n              - name: FOO\n                value: BAR\n            mountPoints:\n              - containerPath: /var/www/foo\n                sourceVolume: foo\n              - containerPath: /var/www/bar\n                sourceVolume: bar\n            memory: 768\n            image: alpine:latest\n            essential: true\n"]},{"id":195915755,"files":["service: lambda-waf-demo\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: demo\n  region: us-east-1\n  deploymentBucket: lambda-waf-demo-us-east-1\n  # This API Key prevents requests targeting APIG directly to skip the WAF\n  apiKeys:\n    - value: mySecretApiKeyThatOnlyCloudFrontKnows\n      description: Api key that ensures that APIG is only accessed through CloudFormation\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          private: true\n\nresources:\n  Resources:\n    # S3 bucket that stores the CloudFront logs\n    CloudFrontAccessLogBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: lambda-waf-cloudfront-logs\n        AccessControl: Private\n\n    # WAF Security Automations stack\n    WafStack:\n      Type: \"AWS::CloudFormation::Stack\"\n      Properties:\n        TemplateURL: \"https://s3.amazonaws.com/lambda-waf-demo-us-east-1/aws-waf-security-automations/v2.3.0/aws-waf-security-automations.template\"\n        Parameters:\n          # We don't need this honeyepot for our API\n          ActivateBadBotProtectionParam: \"no\"\n          EndpointType: \"CloudFront\"\n          AppAccessLogBucket: !Ref CloudFrontAccessLogBucket\n          # We want to use Athena to query the access logs using SQL\n          ActivateHttpFloodProtectionParam: \"yes - Amazon Athena log parser\"\n          ActivateScannersProbesProtectionParam: \"yes - Amazon Athena log parser\"\n\n    # CloudFront distribution\n    # https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudfront-distribution/\n    ApiDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          # Associates the distribution with the WAF\n          WebACLId:\n            Fn::GetAtt: [WafStack, Outputs.WAFWebACL]\n          Origins:\n            - Id: ApiGateway\n              DomainName:\n                Fn::Join:\n                  - \"\"\n                  - - Ref: ApiGatewayRestApi\n                    - \".execute-api.\"\n                    - Ref: AWS::Region\n                    - \".amazonaws.com\"\n              OriginPath:\n                Fn::Join:\n                  - \"\"\n                  - - \"/\"\n                    - ${self:provider.stage}\n              OriginCustomHeaders:\n                - HeaderName: X-API-Key\n                  HeaderValue: mySecretApiKeyThatOnlyCloudFrontKnows\n              CustomOriginConfig:\n                OriginProtocolPolicy: https-only\n          Enabled: true\n          HttpVersion: http2\n          PriceClass: PriceClass_100\n          Logging:\n            Bucket: !GetAtt CloudFrontAccessLogBucket.DomainName\n            IncludeCookies: true\n            Prefix: \"\"\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            CachedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            ForwardedValues:\n              QueryString: true\n              # Required when using cloufront.net domain\n              # on a custom domain ou can set \"*\" and disable caching\n              Headers:\n                - Accept\n                - Referer\n                - Athorization\n                - Content-Type\n              Cookies:\n                Forward: all\n            Compress: true\n            MinTTL: \"0\"\n            MaxTTL: \"0\"\n            DefaultTTL: \"0\"\n            TargetOriginId: ApiGateway\n            ViewerProtocolPolicy: https-only\n"]},{"id":101948705,"files":["service: letterpost-docx\n# plugins:\n#   - serverless-pseudo-parameters\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  region: 'us-east-1'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    AWS_BUCKET: letterpost\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\n# package:\n#   exclude:\n#     - libre-office-layer/**\n\nfunctions:\n  handler:\n    timeout: 300\n    handler: src/handler.handler\n    events:\n      - sns: letterpost-docx\n\n# layers:\n#   libre-office:\n#     path: libre-office-layer\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-messages\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  bucket: 'letterpost-messages'\n\nprovider:\n  stage: dev\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    AWS_IOT_HOST: 'adx5fx5ykfiey-ats.iot.us-east-1.amazonaws.com'\n    DYNAMODB_PREFIX: 'letterpost-api-prod'\n    AWS_BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - iot:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - sns:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - sns: letterpost-messages\n","service: letterpost-ghostscript\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom: \n  bucket: 'global-deployment-bucket'\n  region: 'us-east-1'\n  thumbnailsBucket: 'letterpost'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  timeout: 300\n  environment:\n    AWS_BUCKET: ${self:custom.thumbnailsBucket}\n    WRAPUP_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-wrapup\n    GHOSTSCRIPT_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-ghostscript\n    VERAPDF_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-verapdf\n\n  deploymentBucket:\n    name: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  worker: \n    handler: src/worker.handler\n    timeout: 300\n    events:\n      - sns: letterpost-ghostscript\n  pdfThumbnail:\n    handler: src/pdf-thumbnail.handler\n    timeout: 300\n    events:\n      - sns: letterpost-pdf-thumbnail\n\nresources:\n  Resources:\n    WorkerLogGroup:\n      Properties:\n        RetentionInDays: 7\n    PdfThumbnailLogGroup:\n      Properties:\n        RetentionInDays: 7\n","service: letterpost-verapdf\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  bucket: global-deployment-bucket\n  topic: letterpost-verapdf\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  environment:\n    SNS_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topic}\n    VERAPDF_ZIP_URL: https://s3.amazonaws.com/aws-lambda-binaries/verapdf.zip \n  deploymentBucket:\n    name: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  worker:\n    timeout: 300\n    handler: src/worker.handler\n    memorySize: 2048\n    events:\n      - sns: ${self:custom.topic}\n  handler: \n    handler: src/handler.handler\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7\n    WorkerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-chromeless\n\ncustom:\n  stage: prod\n  debug: \"*\"\n  deploymentBucket: 'global-deployment-bucket'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"s3:*\"\n\nfunctions:\n  handler:\n    memorySize: 1536\n    timeout: 180\n    handler: handler.handler\n    events:\n      - sns: letterpost-process-html\n    environment:\n      CHROMELESS_S3_BUCKET_NAME: 'letterpost'\n      CHROMELESS_S3_OBJECT_KEY_PREFIX: 'letterpost/'\n      CHROMELESS_S3_OBJECT_ACL: 'public-read'\n      CHROMELESS_S3_BUCKET_URL: 's3.amazonaws.com/letterpost'\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-email\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  email: 'no-reply@letterpost.co'\n  region: 'us-east-1'\n  website: 'https://letterpost.co'\n  address: '8705 COLESVILLE RD STE B #325, Silver Spring, MD 20910'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    MAILING_ADDRESS: ${self:custom.address}\n    WEBSITE: ${self:custom.website}\n    SOURCE_EMAIL: ${self:custom.email}\n    SOURCE_EMAIL_ARN: 'arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/${self:custom.email}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - sns: letterpost-email\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-session\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: api.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n    basePath: 'session'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    CLIENT_SESSION_ID: ${ssm:/printawesome-api/CLIENT_SESSION_ID}\n    CLIENT_SESSION_SECRET: ${ssm:/printawesome-api/CLIENT_SESSION_SECRET~true}\n    CLIENT_AUTH_ID: ${ssm:/printawesome-api/CLIENT_AUTH_ID}\n    DYNAMODB_PREFIX: 'letterpost-graphql-prod'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n\nfunctions:\n  handle: \n    handler: handler.handler\n    events: \n      - http:\n          path: token\n          method: post\n          integration: lambda-proxy\n          cors: true\n\nresources:\n  Resources:\n    HandleLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-webhook\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  prefix: letterpost-graphql-prod\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: webhook.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket: \n    name: ${self:custom.deploymentBucket}\n  environment: \n    DYNAMODB_TABLE: ${self:custom.prefix}\n    DEBUG: 'true'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n\nfunctions:\n  handler: \n    handler: handler.handler\n    events: \n      - http:\n          path: /\n          method: post\n          integration: lambda-proxy\n          cors: true\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-graphql\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-domain-manager\npackage:\n  individually: true\n  exclude:\n    - \"**/*\"\n\ncustom:\n  region: us-east-1\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: graphql.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n  \nprovider:\n  stage: prod\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    DYNAMODB_PREFIX: ${self:service}-${opt:stage, self:provider.stage}\n    CLIENT_SESSION_ID: ${ssm:/printawesome-api/CLIENT_SESSION_ID}\n    CLIENT_SESSION_SECRET: ${ssm:/printawesome-api/CLIENT_SESSION_SECRET~true}\n    CLIENT_AUTH_ID: ${ssm:/printawesome-api/CLIENT_AUTH_ID}\n    STRIPE_TEST_API_KEY: ${ssm:/printawesome-api/STRIPE_TEST_API_KEY~true}\n    STRIPE_PRODUCTION_API_KEY: ${ssm:/printawesome-api/STRIPE_PRODUCTION_API_KEY~true}\n    LOB_PRODUCTION_API_KEY: ${ssm:/printawesome-api/LOB_PRODUCTION_API_KEY~true}\n    LOB_TEST_API_KEY: ${ssm:/printawesome-api/LOB_TEST_API_KEY~true}\n    PRINTAWESOME_API_KEY: ${ssm:/printawesome-api/PRINTAWESOME_API_KEY~true}\n    HEAL_SQS_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/#{AWS::AccountId}/letterpost-heal\n    AWS_BUCKET: letterpost\n    SES_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-email\n    AWS_ACCOUNT_ID: '#{AWS::AccountId}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  heal:\n    handler: src/heal/handler.handler\n    package:\n      include:\n        - src/heal/**\n        - node_modules/dynamodb-tools/**\n    events:\n      - schedule: rate(5 minutes)\n  graphql:\n    handler: src/graphql/handler.handler\n    package:\n      include:\n        - src/graphql/**\n        - node_modules/**\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda-proxy\n          authorizer: auth\n          cors: true\n      - http:\n          path: graphql\n          method: get\n          integration: lambda-proxy\n          authorizer: auth\n          cors: true\n      - http:\n          path: graphiql\n          method: get\n          cors: true\n  auth:\n    handler: src/authorizer/handler.handler\n    package:\n      include:\n        - src/authorizer/**\n        - node_modules/**\n\n  record:\n    handler: src/record/handler.handler\n    package:\n      include:\n        - src/record/**\n        - node_modules/dynamodb-tools/**\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - UsersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - UploadsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - OrdersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - ContactsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - CardsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - ChargesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - LettersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - EventsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - MessagesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - AddressesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - OptionsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    GraphqlLogGroup:\n      Properties:\n        RetentionInDays: 7\n    HealLogGroup:\n      Properties:\n        RetentionInDays: 7\n    AuthLogGroup:\n      Properties:\n        RetentionInDays: 7\n    RecordLogGroup:\n      Properties:\n        RetentionInDays: 7\n    MessagesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-messages\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    UsersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-users\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: emailAddress\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: emails-index\n            KeySchema: \n            - AttributeName: emailAddress\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1      \n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    ChargesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-charges\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    EventsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-events\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    OptionsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-options\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    AddressesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-addresses\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    LettersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-letters\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    OrdersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-orders\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n          - AttributeName: contact\n            AttributeType: S\n          - AttributeName: upload\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n        - IndexName: users-index\n          KeySchema: \n          - AttributeName: user\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        - IndexName: contacts-index\n          KeySchema: \n          - AttributeName: contact\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        - IndexName: uploads-index\n          KeySchema: \n          - AttributeName: upload\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    UploadsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-uploads\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    ContactsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-contacts\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    CardsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-cards\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES"]},{"id":195413998,"files":["service: hybrid-load-balancing\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.handle\n    events:\n      - alb:\n          listenerArn:\n            Ref: albListener\n          priority: 1\n          conditions:\n            path: /lambda\n\nresources:\n  - ${file(./infra/alb.yml)}\n  - ${file(./infra/ec2.yml)}\n  - ${file(./infra/vpc.yml)}\n"]},{"id":195278448,"files":["service: zaptalk-checkout-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    snsTopic: ${self:custom.secrets.aws.snsTopic}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  init:\n    handler: checkout.handle\n    events:\n      - http:\n          path: checkout\n          method: post\n          cors: true"]},{"id":195278307,"files":["service: zaptalk-invoice-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    bucket: ${self:custom.secrets.aws.bucket}\n    snsTopicToListen: ${self:custom.secrets.aws.snsTopicToListen}\n    snsTopicErrorHandling: ${self:custom.secrets.aws.snsTopicErrorHandling}\n    notificationSNS: ${self:custom.secrets.aws.notificationSNS}\n    loggerSNS: ${self:custom.secrets.aws.loggerSNS}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.secrets.aws.bucket}/*\"\n\nfunctions:\n  invoice:\n    handler: invoice.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":92340150,"files":["service: kapbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    TWITCH_CLIENT_ID: XXXXX\n\nfunctions:\n  live:\n    handler: kapbot.live\n    events:\n      - http:\n          path: /live\n          method: get\n  game:\n    handler: kapbot.game\n    events:\n      - http:\n          path: /game\n          method: get\n  random:\n    handler: kapbot.random\n    events:\n      - http:\n          path: /random\n          method: get\n  popular:\n    handler: kapbot.popular\n    events:\n      - http:\n          path: /popular\n          method: get\n"]},{"id":192565509,"files":["service: jira-github-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-dotenv-plugin\n\n# you can add packaging information here\npackage:\n  include:\n    - pr-lambda.js\n    - branch-lambda.js\n    - pr-handler.js\n    - branch-handler.js\n    - client.js\n    - node_modules/**\n\nfunctions:\n  pr-github-jira-hook:\n    handler: pr-lambda.handler\n    environment:\n      JIRA_DOMAIN: ${env:JIRA_DOMAIN}\n      TOKEN: ${env:TOKEN}\n      USERNAME: ${env:USERNAME}\n      GITHUB_PR_OPEN: ${env:GITHUB_PR_OPEN}\n      GITHUB_BRANCH_OPEN: ${env:GITHUB_BRANCH_OPEN}\n      GITHUB_PR_MERGED: ${env:GITHUB_PR_MERGED}\n\n  branch-github-jira-hook:\n    handler: branch-lambda.handler\n    environment:\n      JIRA_DOMAIN: ${env:JIRA_DOMAIN}\n      TOKEN: ${env:TOKEN}\n      USERNAME: ${env:USERNAME}\n      GITHUB_PR_OPEN: ${env:GITHUB_PR_OPEN}\n      GITHUB_BRANCH_OPEN: ${env:GITHUB_BRANCH_OPEN}\n      GITHUB_PR_MERGED: ${env:GITHUB_PR_MERGED}\n"]},{"id":161074266,"files":["service: exampleapi\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  region: eu-west-1\n  memorySize: 512\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n  apiKeys:\n    - ${opt:stage}-ExampleApi\n\nplugins:\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-Employee\n  tableThroughputs:\n    prod: 1\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\nfunctions:\n  createLocalDb:\n    handler: handlers.createLocalDb\n    events:\n      - http:\n          path: create-local-db\n          method: get\n  getAppVersion:\n    handler: handlers.getAppVersion\n    events:\n      - http:\n          path: version\n          method: get\n          private: true\n  getEmployee:\n    handler: handlers.getEmployee\n    events:\n      - http:\n          path: employees\n          method: get\n  createEmployee:\n    handler: handlers.createEmployee\n    events:\n      - http:\n          path: employees\n          method: post\n          cors: true\n\nresources:\n  - ${file(resources/dynamodb-table.yml)}\n"]},{"id":191153551,"files":["\nservice: rest-api # NOTE: update this with your service name\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n\ncustom:\n  packageExternal:\n    external:\n      - '../../api'\n\nfunctions:\n  app:\n    handler: handler.handler\n    # The `events` block defines how to trigger the http events\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\n\n\nplugins:\n  # - serverless-offline\n  - serverless-package-external\n","service: single-page-app-via-cloudfront7\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: lf-serverless-frontend\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]"]},{"id":102319190,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: getAwsRoleCred\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\n\ncustom:\n  aws_region: us-east-1\n  user_pool_id: us-east-1_XXXXXXXXXX\n  identity_pool_id: us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\n\nfunctions:\n  getAwsRoleCred:\n    handler: getAwsRoleCred.getAwsRoleCred\n    environment:\n      REGION: ${self:custom.aws_region}\n      USER_POOL_ID: ${self:custom.user_pool_id}\n      IDENTITY_POOL_ID: ${self:custom.identity_pool_id}\n      admin_group_name: arn:aws:iam::XXX456789:role/my-admin-role\n    events:\n      - http:\n          path: getAwsRoleCred\n          method: post\n          cors: true\n          authorizer: aws_iam\n  adminOnlyFcn:\n    handler: adminOnly.adminOnlyFcn\n    environment:\n      REGION: ${self:custom.aws_region}\n      USER_POOL_ID: ${self:custom.user_pool_id}\n      IDENTITY_POOL_ID: ${self:custom.identity_pool_id}      \n    events:\n      - http:\n          path: adminOnly\n          method: get\n          cors: true\n          authorizer: aws_iam\n"]},{"id":154864389,"files":["service: LevertonCustomSkill\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n\nfunctions:\n  leverton-custom-skill:\n    handler: index.handler\n    name: leverton-custom-skill\n    runtime: nodejs8.10\n    timeout: 300\n    events:\n      - http:\n          method: POST\n          path: skill\n          cors: true\n    environment:\n      LEVERTON_AUTH_TOKEN: <your-leverton-auth-token>\n      LEVERTON_PROJECT_ID: <your-project-id>\n      DEFAULT_COLLECTION_ID: <your-default-collection-id>\n"]},{"id":107918407,"files":["service: sample-lambda-app\n\ncustom: ${file(conf.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  stage: ${opt:stage, 'dev'}\n\npackage:\n  exclude:\n    - scripts/**\n    - .serverless/**\n    - README.md\n    - spec/**\n    - .travis.yml\n    - node_modules/**  # our code doesn't use any runtime dependency\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n  healthcheck:\n    handler: handler.healthcheck\n    events:\n      - http:\n          path: /healthcheck\n          method: get\n  metadata:\n    handler: handler.metadata\n    environment:\n      GIT_ENV: ${git:sha1}\n    events:\n      - http:\n          path: /metadata\n          method: get\n\nplugins:\n  - serverless-plugin-git-variables\n\nresources:\n  Resources:\n   DnsEntry:\n     Type: 'AWS::Route53::RecordSet'\n     Properties:\n       HostedZoneId: ${self:custom.zoneId}\n       Name: \"${self:provider.stage}.${self:custom.zoneName}\"\n       Type: \"A\"\n       AliasTarget:\n         DNSName: { Fn::GetAtt: [ ApiGatewayDomainName, 'DistributionDomainName'] }\n         HostedZoneId: 'Z2FDTNDATAQYW2'    # https://forums.aws.amazon.com/message.jspa?messageID=493441\n   ApiGatewayDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.certificate}\n        DomainName: \"${self:provider.stage}.${self:custom.zoneName}\"\n   ApiGatewayBase:\n      Type: \"AWS::ApiGateway::BasePathMapping\"\n      DependsOn: HelloLambdaPermissionApiGateway  #https://github.com/serverless/serverless/issues/2233\n      Properties:\n        BasePath: ''\n        DomainName: \"${self:provider.stage}.${self:custom.zoneName}\"\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Stage: ${self:provider.stage}\n"]},{"id":95963131,"files":["service: outlook-google-sync\n\ncustom:\n  host_zone: ''\n  custom_domain: ''\n  certificate_arn: ''\n  outlook_redirect_path: 'outlook/authorize'\n  google_redirect_path: 'google/authorize'\n  outlook_login_path: 'outlook/login'\n  google_login_path: 'google/login'\n  outlook_scope: 'openid,offline_access,Calendars.Read'\n  google_scope: 'https://www.googleapis.com/auth/calendar'\n  outlook_client_key: 'config/users/=USER=/client/outlook.json'\n  outlook_token_key: 'config/users/=USER=/token/outlook.json'\n  google_client_key: 'config/users/=USER=/client/google.json'\n  google_token_key: 'config/users/=USER=/token/google.json'\n  user_info_key: 'config/users/=USER=/info.json'\n  attendees_key: 'config/attendees.json'\n  processed_events_key: 'cache/events.json'\n  user_home_key: 'config/users/'\n  sync_days: 14\n  home_bucket: 'outlook-google-sync-stg'\n  outlook_client_id: ''\n  outlook_client_secret: ''\n  google_client_id: ''\n  google_client_secret: ''\n  token_key: ''\n  email_address: ''\n  email_password: ''\n  stageVariables:\n    home_bucket: ${self:custom.home_bucket}\n    attendees_key: ${self:custom.attendees_key}\n    user_info_key: ${self:custom.user_info_key}\n    google_client_key: ${self:custom.google_client_key}\n    google_token_key: ${self:custom.google_token_key}\n    outlook_client_key: ${self:custom.outlook_client_key}\n    outlook_token_key: ${self:custom.outlook_token_key}\n    user_home_key: ${self:custom.user_home_key}\n    outlook_login_path: ${self:custom.outlook_login_path}\n    google_login_path: ${self:custom.google_login_path}\n    token_key: ${self:custom.token_key}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: stg\n  region: ap-northeast-2\n  timeout: 30\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:Put*\"\n        - \"s3:GetObject\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:*\"\n      Resource: \"*\"\n\nfunctions:\n  outlookLogin:\n    handler: app.login\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.outlook_redirect_path}\n      scope: ${self:custom.outlook_scope}\n      client_key: ${self:custom.outlook_client_key}\n    events:\n      - http:\n          path: ${self:custom.outlook_login_path}\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  outlookAuthorize:\n    handler: app.authorize\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.outlook_redirect_path}\n      scope: ${self:custom.outlook_scope}\n      client_key: ${self:custom.outlook_client_key}\n      token_key: ${self:custom.outlook_token_key}\n    events:\n      - http:\n          path: ${self:custom.outlook_redirect_path}\n          method: get\n          cors: true\n          private: false\n  googleLogin:\n    handler: app.login\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.google_redirect_path}\n      scope: ${self:custom.google_scope}\n      client_key: ${self:custom.google_client_key}\n    events:\n      - http:\n          path: ${self:custom.google_login_path}\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  googleAuthorize:\n    handler: app.authorize\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.google_redirect_path}\n      scope: ${self:custom.google_scope}\n      client_key: ${self:custom.google_client_key}\n      token_key: ${self:custom.google_token_key}\n    events:\n      - http:\n          path: ${self:custom.google_redirect_path}\n          method: get\n          cors: true\n          private: false\n  addAttendee:\n    handler: app.add_attendee\n    timeout: 15\n    events:\n      - http:\n          path: add/attendee\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  deleteAttendee:\n    handler: app.delete_attendee\n    timeout: 15\n    events:\n      - http:\n          path: delete/attendee\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  userLogin:\n    handler: app.login_user\n    timeout: 15\n    events:\n      - http:\n          path: user/login\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  getUserConfig:\n    handler: app.get_user_config\n    timeout: 15\n    events:\n      - http:\n          path: user/config\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  saveUserConfig:\n    handler: app.save_user_config\n    timeout: 15\n    events:\n      - http:\n          path: user/config\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  resetPassword:\n    handler: app.reset_password\n    timeout: 15\n    events:\n      - http:\n          path: user/password/reset\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  addUser:\n    handler: app.add_user\n    timeout: 15\n    environment:\n      outlook_client_id: ${self:custom.outlook_client_id}\n      outlook_client_secret: ${self:custom.outlook_client_secret}\n      google_client_id: ${self:custom.google_client_id}\n      google_client_secret: ${self:custom.google_client_secret}\n    events:\n      - http:\n          path: add/user\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  refreshOutlookToken:\n    handler: app.refresh_token \n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      user_home_key: ${self:custom.user_home_key}\n      client_key: ${self:custom.outlook_client_key}\n      token_key: ${self:custom.outlook_token_key}\n    events:\n      - schedule: rate(30 minutes)\n  refreshGoogleToken:\n    handler: app.refresh_token \n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      user_home_key: ${self:custom.user_home_key}\n      client_key: ${self:custom.google_client_key}\n      token_key: ${self:custom.google_token_key}\n    events:\n      - schedule: rate(30 minutes)\n  syncEvents:\n    handler: app.sync_events\n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      processed_events_key: ${self:custom.processed_events_key}\n      user_home_key: ${self:custom.user_home_key}\n      user_info_key: ${self:custom.user_info_key}\n      src_token_key: ${self:custom.outlook_token_key}\n      tgt_token_key: ${self:custom.google_token_key}\n      attendees_key: ${self:custom.attendees_key}\n      sync_days: ${self:custom.sync_days}\n      email_address: ${self:custom.email_address}\n      email_password: ${self:custom.email_password}\n    events:\n      - schedule: rate(60 minutes)\nresources:\n  Resources:\n    OutlookLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    OutlookAuthorizeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GoogleLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GoogleAuthorizeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    AddAttendeeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    DeleteAttendeeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    UserLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GetUserConfigLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    SaveUserConfigLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    ResetPasswordLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    AddUserLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    RefreshOutlookTokenLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    RefreshGoogleTokenLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    SyncEventsLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    HomeS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.home_bucket}\n    myDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.certificate_arn}\n        DomainName: ${self:custom.custom_domain}\n    myMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      Properties:\n        BasePath: ${self:provider.stage}\n        DomainName:\n          Ref: myDomainName\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Stage: ${self:provider.stage}\n    myDNSRecord:\n      Type: AWS::Route53::RecordSet\n      Properties:\n        HostedZoneName: ${self:custom.host_zone}\n        Comment: DNS name for ebot.\n        Name: ${self:custom.custom_domain}\n        Type: CNAME\n        TTL: 300\n        ResourceRecords:\n          - Fn::GetAtt:\n            - myDomainName\n            - DistributionDomainName\nplugins:\n  - serverless-webpack\n  - serverless-plugin-stage-variables\n"]},{"id":127115507,"files":["service:\n  name: newsbot\n\ncustom: ${file(./config.${opt:stage}.js)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${self:custom.aws.profile}\n  stage: ${opt:stage}\n  region: ${self:custom.aws.region}\n  role: ${self:custom.aws.role}\n  description: News Feeder via Serverless\n  environment:\n    STAGE: ${opt:stage}\n\npackage:\n  exclude:\n    - .git/**\n    - \"**test**\"\n\nfunctions:\n  feed:\n    handler: index.feed\n    events:\n      - schedule: rate(${self:custom.newsapi.refresh} minutes)\n"]},{"id":175439836,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: base-app # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  home:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: micro-1 # NOTE: update this with your service name\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  batch:\n    handler: src/batch.handler\n    events:\n      - http:\n          path: batch\n          method: POST\n  repos:\n    handler: src/repos.handler\n    events:\n      - http:\n          path: repos\n          method: GET\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":112973130,"files":["service: dmoney-serverless-boilerplate\n\nprovider:\n    name: aws\n    runtime: nodejs10.x\n    stage: dev\n    # Create your env file and add it to .gitignore\n    # environment: ${file(./.env.json)}\n\nfunctions:\n  main:\n    handler: handler.main\n    events:\n      - http:\n          path: main\n          method: get\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n    printOutput: true\n    location: './bin/'\n\n"]},{"id":152843532,"files":["service: serverless-terraform-variables-example\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-terraform-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${terraform:aws_profile}\n  region: ${terraform:aws_region}\n  deploymentBucket: ${terraform:serverless_bucket}\n\nfunctions:\n  ping:\n    handler: handler.endpoint\n    vpc:\n      subnetIds:\n        — ${terraform:ping_subnet_id}\n    events:\n      - http:\n          path: ping\n          method: get\n"]},{"id":186234480,"files":["service: ocr-scanner\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - textract:AnalyzeDocument\n        - textract:DetectDocumentText\n        - textract:GetDocumentAnalysis\n        - textract:GetDocumentTextDetection\n        - textract:StartDocumentAnalysis\n        - textract:StartDocumentTextDetection\n      Resource: \"*\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  getImageText:\n    handler: handler.getImageText\n    events:\n      - http:\n          path: image-text\n          method: post\n          cors: true\n  ping:\n    handler: handler.ping\n    events:\n      - http:\n          path: ping\n          method: get\n          cors: true\n"]},{"id":140910897,"files":["service: namewhisk-api\n\nplugins:\n  - serverless-dotenv-plugin\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  dotenv:\n    path: ./.env\n    include:\n      - WEBKNOX_API_KEY\n      - GREPWORDS_API_KEY\n      - DNS_SIMPLE_ENDPOINT\n      - DNS_SIMPLE_TOKEN\n      - AWS_IOT_HOST\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  timeout: 15\n  deploymentBucket: \n    name: ${self:custom.deploymentBucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - route53domains:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  trends:\n    handler: src/handler.trends\n    events:\n      - http:\n          path: trends/{id}\n          method: get\n          cors: true\n  lookup:\n    handler: src/handler.lookup\n    events:\n      - http:\n          path: lookup/{id}\n          method: get\n          cors: true\n  stats:\n    handler: src/handler.stats\n    events:\n      - http:\n          path: stats/{id}\n          method: get\n          cors: true\n  synonyms:\n    handler: src/handler.synonyms\n    events:\n      - http:\n          path: synonyms/{id}\n          method: get\n          cors: true\n   ","service: namewhisk-pubsub\n\nplugins:\n  - serverless-dotenv-plugin\n\ncustom:\n  stage: dev\n  debug: \"*\"\n  deploymentBucket: 'global-deployment-bucket'\n  dotenv:\n    path: ./.env\n    include:\n      - AWS_IOT_HOST\n  namewhisk:\n    functions:\n      - run\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: us-east-1\n  profile: default\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    DEBUG: ${self:custom.debug}\n  apiKeys:\n    - ${self:custom.stage}-namewhisk-session-key\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Connect\"\n        - \"iot:Publish\"\n        - \"iot:Subscribe\"\n        - \"iot:Receive\"\n        - \"iot:GetThingShadow\"\n        - \"iot:UpdateThingShadow\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::AccountId\n            - \"-\"\n            - Ref: AWS::Region\n            - -namewhisk\n            - /*\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"route53domains:*\"\n\nfunctions:\n  run:\n    memorySize: 1536\n    timeout: 300\n    handler: src/run.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'namewhisk/new-session'\"\n    environment:\n      namewhisk_S3_BUCKET_NAME:\n        Fn::Join:\n          - \"\"\n          - - Ref: AWS::AccountId\n            - \"-\"\n            - Ref: AWS::Region\n            - -namewhisk\n      namewhisk_S3_OBJECT_KEY_PREFIX: \"\"\n      namewhisk_S3_OBJECT_ACL: \"public-read\"\n      namewhisk_S3_BUCKET_URL:\n        Fn::GetAtt:\n          - Bucket\n          - DomainName\n  version:\n    memorySize: 128\n    handler: src/version.handler\n    events:\n    - http:\n        path: /version\n        method: GET\n  session:\n    memorySize: 128\n    timeout: 10\n    handler: src/session.handler\n    events:\n      - http:\n          method: OPTIONS\n          path: /\n          cors: true\n      - http:\n          method: GET\n          path: /\n          cors: true\n  disconnect:\n    memorySize: 256\n    handler: src/disconnect.handler\n    timeout: 10\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'namewhisk/last-will'\"\n\nresources:\n  Resources:\n    RunLogGroup:\n      Properties:\n        RetentionInDays: 7\n    VersionLogGroup:\n      Properties:\n        RetentionInDays: 7\n    SessionLogGroup:\n      Properties:\n        RetentionInDays: 7\n    DisconnectLogGroup:\n      Properties:\n        RetentionInDays: 7\n    Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName:\n          Fn::Join:\n            - \"\"\n            - - Ref: AWS::AccountId\n              - \"-\"\n              - Ref: AWS::Region\n              - -namewhisk\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled"]},{"id":109876636,"files":["# Welcome to Serverless!\n# Happy Coding!\n\nservice: comic-fetcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/comics\"\n      Action:\n        - \"dynamodb:*\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - handler.js\n    - services/**\n    - node_modules/**\n  exclude:\n    - tests/**\n\nfunctions:\n  comicFetch:\n    handler: handler.checkComics\n    events:\n          - schedule: cron(10 10 ? * * *)\n\n"]},{"id":157034200,"files":["\nservice: presidential-alert-app\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\ncustom:\n  s3Sync:\n    - bucketName: ${file(env.yml):S3_BUCKET_NAME}\n      localDir: app\n  cloudfrontInvalidate:\n    distributionIdKey: 'CDNDistributionId'\n    items:\n      - '/*'\n\nplugins:\n  - serverless-s3-sync\n  - serverless-cloudfront-invalidate\n    \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-profile--presidential-alert-app\n  stage: ${file(env.yml):ENVIRONMENT}\n  environment:\n    S3_BUCKET_NAME: ${file(env.yml):S3_BUCKET_NAME}\n  \nresources:\n  Resources:\n    \n    ## CloudFront Origin Access Identity\n    PAAOriginAccessIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${file(env.yml):S3_BUCKET_NAME}\n\n    ## S3 Bucket\n    PAAS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(env.yml):S3_BUCKET_NAME}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    \n    ## S3 Bucket Policy\n    PAAS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: PAAS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal:\n                CanonicalUser: !GetAtt [PAAOriginAccessIdentity, S3CanonicalUserId]\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${file(env.yml):S3_BUCKET_NAME}/*\n\n    ## CloudFront Distribution\n    PAACloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${file(env.yml):S3_BUCKET_NAME}.s3.amazonaws.com\n              S3OriginConfig:\n                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'PAAOriginAccessIdentity']]\n              Id: ${file(env.yml):CLOUDFRONT_DISTRIBUTION_ID}\n          Enabled: 'true'\n          HttpVersion: http2\n          Aliases:\n          - www.presidentialalert.app\n          - presidentialalert.app\n          PriceClass: PriceClass_100\n          DefaultRootObject: index.html\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            DefaultTTL: 86400\n            MinTTL: 86400\n            TargetOriginId: ${file(env.yml):CLOUDFRONT_DISTRIBUTION_ID}\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ViewerProtocolPolicy: redirect-to-https\n          ViewerCertificate:\n            MinimumProtocolVersion: TLSv1.1_2016\n            SslSupportMethod: 'sni-only'\n            AcmCertificateArn: ${file(env.yml):SSL_CERTIFICATE_ARN}\n\n  Outputs:\n    ## CloudFront Distribution Id\n    CDNDistributionId:\n      Description: 'CDN Distribution Id'\n      Value: !Ref PAACloudFrontDistribution\n"]},{"id":73100746,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: tobaccobot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  cfLogs: true\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  botConversation:\n    handler: src/serverless/index.botConversation\n    events:\n      - http:\n          method: POST\n          integration: lambda\n          path: bot_conversation\n          cors: true\n  getBotConversation:\n    handler: src/serverless/index.botConversation\n    events:\n      - http:\n          method: GET\n          integration: lambda\n          path: bot_conversation\n          cors: true\n  dailyMessage:\n    handler: src/serverless/index.dailyMessage\n    events:\n      - schedule:\n            rate: cron(0 8 ? * * *)\n            enabled: true\n  setupTables:\n    handler: src/serverless/index.setupTables\n  subscribe:\n    handler: src/serverless/index.subscribe\n    events:\n      - http:\n          method: POST\n          integration: lambda\n          path: subscribe\n          cors: true\n  reportData:\n    handler: src/serverless/index.reportData\n    events:\n        - http:\n            method: POST\n            integration: lambda\n            path: report_data\n            cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    DynamoDbSmokerTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: smoker\n        AttributeDefinitions:\n          - AttributeName: phone\n            AttributeType: S\n        KeySchema:\n          - AttributeName: phone\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBSmokerIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbSmokerTable\n      Properties:\n        PolicyName: lambda-dynamodb-smoker\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/smoker\n        Roles:\n          - Ref: IamRoleLambdaExecution\n    DynamoDbArchiveTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: archive\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBArchiveIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbArchiveTable\n      Properties:\n        PolicyName: lambda-dynamodb-archive\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/archive\n        Roles:\n          - Ref: IamRoleLambdaExecution\nplugins:\n  - serverless-webpack\n  - serverless-offline\ncustom:\n  webpack: ./webpack.config.serverless.js\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015-node4\", \"es2016\"]\n      plugins: [\"add-module-exports\", \"transform-runtime\"]\n"]},{"id":181374324,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: blixen-api # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: ANY /\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n# Allow offline development on local devices\nplugins:\n  - serverless-offline\n"]},{"id":181245319,"files":["service: boardless-backend # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-db\n\n  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/test\n          method: get\n          cors:\n                origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects\n                allowCredentials: true\n                headers: # <-- Specify allowed headers\n                  - Access-Control-Allow-Origin\n                  - Access-Control-Allow-Credentials\n\n  getBoards:\n    handler: handler.getBoards\n    events:\n      - http:\n          origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects\n          path: api/getBoards\n          method: get\n          cors: #Removed origin parameter to see if this still works\n                allowCredentials: true\n                headers: # <-- Specify allowed headers\n                  - Access-Control-Allow-Origin\n                  - Access-Control-Allow-Credentials\n\nresources:\n  Resources:\n    DBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuid\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:provider.environment.DB_TABLE}"]},{"id":151431490,"files":["service: lambda-form\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-plugin-existing-s3\n  - serverless-apigw-binary\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    host: 0.0.0.0\n    port: 5000\n    corsAllowOrigin: \"*\"\n    corsAllowHeaders: \"Origin, X-Requested-With, Content-Type, Accept\"\n  apigwBinary:\n    types:\n      - 'application/x-www-form-urlencoded'\n      - 'multipart/form-data'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource:\n        - \"*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  environment: ${file(env.yml):${self:provider.stage}}\n\npackage:\n  exclude:\n    - demo/**\n    - node_modules/**\n    - tests/**\n    - .babelrc\n    - .d*\n    - .e*\n    - .g*\n    - .git/**\n    - .DS_*\n    - docker*.yml\n    - run-*.sh\n\nfunctions:\n  formPostHandler:\n    handler: handler.formPostHandler\n    events:\n      - http:\n            method: post\n            path: form/{id}\n            cors: true\n            request:\n              parameters:\n                paths:\n                  id: true\n\n  submissionHandler:\n    handler: handler.submissionHandler\n    events:\n      - existingS3:\n            bucket: ${file(env.yml):${self:provider.stage}.FORMBUCKET}\n            events:\n              - s3:ObjectCreated:*\n            rules:\n              - suffix: .submit\n\n  authHandler:\n    handler: handler.authHandler\n    events:\n      - http:\n            method: post\n            path: auth/{id}/{type}\n            cors: true\n            request:\n              parameters:\n                paths:\n                  id: true\n                  type: true\n"]},{"id":179751915,"files":["service: translatetts\npackage:\n  exclude:\n    - env.yml\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment: ${file(env.yml):${self:provider.stage}}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - lambda:InvokeFunction\n        - polly:SynthesizeSpeech\n        - translate:TranslateText\n      Resource: '*'\n\nfunctions:\n  postTranslateTTS:\n    handler: index.postTranslateTTS\n    events:\n      - http:\n          path: translatetts\n          method: post\n          cors: true\nresources:\n  Resources:\n    audioBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n      Properties:\n        AccessControl: PublicRead\n        BucketName: translatetts-audio-${self:provider.stage}\ncustom:\n  prune:\n    automatic: true\n    number: 2\n\nplugins:\n  - serverless-prune-plugin\n"]},{"id":178620954,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lamda-test-rahul # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n     - http:\n         path: users/create\n         method: get\n\n  imageResize:\n    handler: handler.imageResize\n    events:\n     - http:\n         path: /imageResize\n         method: get       \n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":174171579,"files":["service: lambda-cwlogs-to-logsene\n\nplugins:\n  - serverless-iam-roles-per-function\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ${self:custom.secrets.REGION, \"us-east-1\"}\n  versionFunctions: false\n\nfunctions:\n  shipper:\n    handler: shipper.handler\n    description: Sends CloudWatch logs from Kinesis to Sematext Elastic Search API\n    memorySize: 128\n    timeout: 3\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - LogsKinesisStream\n              - Arn\n          batchSize: ${self:custom.secrets.BATCH_SIZE}\n          startingPosition: LATEST\n          enabled: true\n    environment:\n      LOGS_TOKEN: ${self:custom.secrets.LOGS_TOKEN}\n      LOGS_RECEIVER_URL: ${self:custom.secrets.LOGS_RECEIVER_URL}\n      LOGS_BULK_SIZE: 100\n      LOG_INTERVAL: 2000\n      SPM_TOKEN: ${self:custom.secrets.SPM_TOKEN}\n      SPM_RECEIVER_URL: ${self:custom.secrets.SPM_RECEIVER_URL}\n  \n  subscriber:\n    handler: subscriber.handler\n    description: Subscribe all CloudWatch log groups to Kinesis\n    memorySize: 128\n    timeout: 30\n    events:\n      - http:\n          path: subscribe\n          method: get\n      - cloudwatchEvent:\n          event:\n            source:\n              - aws.logs\n            detail-type:\n              - AWS API Call via CloudTrail\n            detail:\n              eventSource:\n                - logs.amazonaws.com\n              eventName:\n                - CreateLogGroup\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"iam:PassRole\"\n          - \"sts:AssumeRole\"\n          - \"logs:PutSubscriptionFilter\"\n          - \"logs:DeleteSubscriptionFilter\"\n          - \"logs:DescribeSubscriptionFilters\"\n          - \"logs:DescribeLogGroups\"\n          - \"logs:PutRetentionPolicy\"\n        Resource: \"*\"\n    environment:\n      filterName: ${self:custom.stage}-${self:provider.region}\n      region: ${self:provider.region}\n      shipperFunctionName: \"shipper\"\n      subscriberFunctionName: \"subscriber\"\n      prefix: ${self:custom.secrets.PREFIX, \"/aws/lambda\"}\n      retentionDays: ${self:custom.secrets.LOG_GROUP_RETENTION_IN_DAYS}\n      kinesisArn: \n        Fn::GetAtt:\n          - LogsKinesisStream\n          - Arn\n      roleArn: \n        Fn::GetAtt:\n          - CloudWatchLogsRole\n          - Arn\n\nresources:\n  Resources:\n    LogsKinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties: \n        Name: ${self:service}-${self:custom.stage}-logs\n        ShardCount: ${self:custom.secrets.KINESIS_SHARD_COUNT}\n        RetentionPeriodHours: ${self:custom.secrets.KINESIS_RETENTION_IN_HOURS}\n\n    CloudWatchLogsRole:\n      Type: AWS::IAM::Role\n      Properties: \n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement: \n            - Effect: Allow\n              Principal: \n                Service: \n                  - logs.amazonaws.com\n              Action: \n                - sts:AssumeRole\n        Policies:\n          - PolicyName: root\n            PolicyDocument: \n              Version: \"2012-10-17\"\n              Statement: \n                - Effect: Allow\n                  Action: \n                    - kinesis:PutRecords\n                    - kinesis:PutRecord\n                  Resource:\n                    Fn::GetAtt:\n                      - LogsKinesisStream\n                      - Arn\n        RoleName: ${self:service}-${self:custom.stage}-cloudwatchrole"]},{"id":147960482,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: todo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_REGION, 'eu-west-1'}\n  stage: dev\n  stackTags:\n    STACK: \"todo\"\n  # optional, in MB, default is 1024, min 128\n  memorySize: 128\n  # optional, in seconds, default is 6\n  timeout: 6\n  # optional, default is true\n  versionFunctions: false\n  # IAM custom roles\n  iamRoleStatements:\n    # Allow access to DynamoDB in role\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [ \"TodoDynamoDBTable\", \"Arn\" ] }\n    # Allow publishing message in our own queue\n    - Effect: Allow\n      Action:\n        - sqs:GetQueueAttributes\n        - sqs:SendMessage\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:GetQueueUrl\n      Resource:\n        - { \"Fn::GetAtt\": [ \"TodoEventQueue\", \"Arn\" ] }\n        \n  # Define additional env vars for deployment\n  environment:\n    TODO_TABLE: ${self:custom.todoTable}\n    TODO_EVENT_QUEUE: ${self:custom.todoEventQueue}\n    API_URL: ${self:custom.apiUrlByCustomDomain.${env:CUSTOM_DOMAIN_ENABLED, 'false'}}\n\ncustom:\n  todoTable: 'todos'\n  todoEventQueue: 'todos-events'\n  # If set, CDN bucket will be created\n  cdnBucketName: ${env:CDN_BUCKET, ''}\n  # Set API_URL by custom domain here\n  apiUrlByCustomDomain:\n    true: https://${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}/api\n    false: 'http://localhost:3000/api'\n  # Make special webpack transpiling for Serverless\n  webpack:\n    webpackConfig: ./webpack.serverless.js\n    includeModules: true\n    packager: 'npm'\n  # Create custom domain and serve it using https://$CUSTOM_DOMAIN/* -> <api endpoint>/*\n  customDomain:\n    domainName: ${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}\n    createRoute53Record: true\n    enabled: ${env:CUSTOM_DOMAIN_ENABLED, 'false'}\n  # Add binary images as handled in API gateway\n  apigwBinary:\n    types:\n      - 'image/*'\n      - 'application/font*'\n      - 'application/pdf'\n  s3Sync:\n    - bucketName: ${self:custom.cdnBucketName, 'undefined'}\n      localDir: ./dist\n      acl: public-read\n      followSymlinks: true\n      defaultContentType: application/octet-stream\n      params:\n        - \"*.*\":\n            CacheControl: 'no-cache'\n\npackage:\n  exclude:\n    - tmp/**\n    - node_modules/aws_sdk/**\n\nfunctions:\n  app:\n    handler: server.serverless\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n      - http:\n          # List all todos\n          path: api/todo\n          method: get\n      - http:\n          # Get all queue\n          path: api/queue\n          method: get\n      - http:\n          # Add new todo\n          path: api/todo\n          method: post\n      - http:\n          # Get one todo\n          path: api/todo/{any+}\n          method: get\n      - http:\n          # Update todo\n          path: api/todo/{any+}\n          method: post\n      - http:\n          # Update todo\n          path: api/todo/{any+}\n          method: delete\n      - http:\n          # Reinit todo db\n          path: api/init\n          method: post\n  event:\n    handler: server.receiveEvent\n    events:\n      - sqs:\n          # Invoke function once for every message\n          batchSize: 1\n          arn:\n            Fn::GetAtt:\n              - TodoEventQueue\n              - Arn\nplugins:\n  - serverless-webpack\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-offline\n  - serverless-s3-sync\n\nresources:\n  Conditions:\n    CreateCdnBucket:\n      Fn::Not:\n        - Fn::Equals:\n          - ${self:custom.cdnBucketName, ''}\n          - ''\n  Resources:\n    TodoDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 3\n        TableName: ${self:custom.todoTable}\n    TodoEventQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ${self:custom.todoEventQueue}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n    CdnBucket:\n      Type: AWS::S3::Bucket\n      Condition: CreateCdnBucket\n      Properties:\n        BucketName: ${self:custom.cdnBucketName, 'undefined'}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n"]},{"id":171656170,"files":["service: my-telegram-bot\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  environment:\n    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}\n    TELEGRAM_PROXY: ${env:TELEGRAM_PROXY}\n\nfunctions:\n  processWebhook:\n    handler: handler.processWebhook\n    events:\n      - http:\n          path: /\n          method: post\n"]},{"id":174887609,"files":["service: mercury-parser\napp: mercury-parser\n\nprovider:\n  name: aws\n  region: eu-central-1\n  runtime: nodejs8.10\n  stage: prod\n  environment:\n    # SECRET_KEY: REPLACE_YOUR_SECRET_KEY_HERE\n\nfunctions:\n  parser:\n    handler: handler.parser\n    events:\n      - http:\n          path: /parser\n          method: get\n\nplugins:\n  - serverless-offline\n"]},{"id":173962875,"files":["service: aws-iot-api\n\nprovider:\n  name: aws\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - \"arn:aws:iot\"\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - \"topic/devopstar/alexa/esp8266-group\"\n  runtime: nodejs8.10\n  environment:\n    IOT_ENDPOINT: xxxxxxxxxxxx.iot.us-east-1.amazonaws.com\n    IOT_TOPIC: devopstar/alexa/esp8266-group\n\nfunctions:\n  lights:\n    handler: handler.lights\n    events:\n      - http:\n          path: lights\n          method: post\n"]},{"id":154863935,"files":["# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ibm-audio\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-east-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    BOX_SKILLS_IBM_SPEECH_TO_TEXT_KEYWORDS_CALLBACK_ENDPOINT: { \"Fn::Join\" : [\"\", [ \"https://\", { \"Ref\" : \"ApiGatewayRestApi\" }, \".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/${self:service}\" ] ]  }\n    BOX_SKILLS_IBM_SPEECH_TO_TEXT_RESULTS_TTL_MINUTES: ${opt:resultsTtl, '720'} # make 5mins for prod\n    SKILL_ACCEPTED_FORMATS: 'aac,aif,aifc,aiff,amr,au,flac,m4a,mp3,ra,wav,wma'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'flac,mp3,wav'\n    SKILL_FILE_SIZE_LIMIT_MB: '1000'\n    SPEECH_TO_TEXT_USERNAME: 'ADD_FROM_YOUR_IBM_ACCOUNT'\n    SPPECH_TO_TEXT_PASSWORD: 'ADD_FROM_YOUR_IBM_ACCOUNT'\n    SIGNATURE_HASH_KEY: ${opt:signatureHashKey, 'MANUALLY_ADD_SIGNATURE_HASH_KEY_FOR_DEV'}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'MANUALLY_ADD_SYMMETRIC_ENCRYPTION_KEY_FOR_DEV'}\n\n# packaging information\npackage:\n  artifact: ./watson-audio-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-video-audio\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: 'prod'\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    ARM_AAD_AUDIENCE: https://management.core.windows.net/\n    AAD_ENDPOINT: https://login.microsoftonline.com/\n    ARM_ENDPOINT: https://management.azure.com/\n    AAD_CLIENT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_SECRET: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_TENANT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    SUBSCRIPTION_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    RESOURCE_GROUP: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    ACCOUNT_NAME: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    REGION: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    STAGE: 'prod'\n    AUDIO_FILE_EXTENSIONS: \"3g2,asf,m2tf,mod,ts,xesc,mpeg,m2v,aiff,mp3,m4b,wma,wav,m4a,flac\"\n    SKILL_FILE_SIZE_LIMIT_MB: \"10240\"\n    LANGUAGE: ${opt:language, 'en-US'}\n    SERVICE: ${self:service}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'REPLACE_WITH_OWN_KEY_HASH'}\n\n# packaging information\npackage:\n  artifact: ./ms-ams-audio-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n"]},{"id":154862924,"files":["# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-video-audio\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: 'prod'\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    ARM_AAD_AUDIENCE: https://management.core.windows.net/\n    AAD_ENDPOINT: https://login.microsoftonline.com/\n    ARM_ENDPOINT: https://management.azure.com/\n    AAD_CLIENT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_SECRET: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_TENANT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    SUBSCRIPTION_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    RESOURCE_GROUP: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    ACCOUNT_NAME: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    REGION: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    STAGE: 'prod'\n    SKILL_ACCEPTED_FORMATS: \"3gp,3gp2,mts,avi,dv,vob,mp4,mpg,ismv,ac3,bwf,mov,wmv\"\n    SKILL_FILE_SIZE_LIMIT_MB: \"10240\"\n    LANGUAGE: ${opt:language, 'en-US'}\n    SERVICE: ${self:service}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'REPLACE_WITH_OWN_KEY_HASH'}\n\n# packaging information\npackage:\n  artifact: ./ms-ams-video-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n"]},{"id":164102969,"files":["service:\n  name: ${self:custom.serviceName}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:REGION}\n  profile: ${env:PROFILE}\n  environments:\n    GLOBAL_SECRET: ${ssm:/${self:custom.serviceName}/${env:STAGE}/onekey~true}\n\ncustom:\n  serviceName: fii-sls\n  stage: ${opt:stage, self:custom.defaultStage}\n  defaultStage: dev\n  stages:\n    - ${opt:stage}\n    - dev\n    - integration\n    - production\n\nfunctions:\n  hello:\n    handler: src/handlers/authorizer/index.default\n    events:\n      - http:\n          path: /slshello\n          method: get\n    environment:\n      HELLO_SECRET: ${ssm:/${self:custom.serviceName}/${env:STAGE}/onekey~true}\n    layers:\n      - arn:aws:lambda:us-east-1:568614285549:layer:dbconnection:1\n"]},{"id":173566889,"files":["service: websockets\n\nframeworkVersion: \">=1.38.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"dynamodb:*\"\n    Resource: \"*\"\n  - Effect: Allow\n    Action:\n      - \"execute-api:ManageConnections\"\n    Resource:\n      - \"arn:aws:execute-api:*:*:**/@connections/*\"\n\nfunctions:\n  wsConnectionHandler:\n    handler: handler.wsConnectionHandler\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n  wsDefaultHandler:\n    handler: handler.wsDefaultHandler\n    events:\n      - websocket:\n          route: $default\n  wsSendMessageHandler:\n    handler: handler.wsSendMessageHandler\n    events:\n      - websocket:\n          route: sendMessage\n\n\nresources:\n  Resources:\n    UsersConnectionsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"userId\"\n          AttributeType: \"S\"\n        - AttributeName: \"connectionId\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"userId\"\n          KeyType: \"HASH\"\n        BillingMode: PROVISIONED\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: websocket-users-connections\n        GlobalSecondaryIndexes:\n          - IndexName: websocket-users-connections-connectionId-GSI\n            KeySchema:\n              - AttributeName: connectionId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":169236762,"files":["service: todo-app-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: server.run\n    events:\n      - http:\n          path: api/todos\n          method: any\n          cors: \n            allowCredentials: true\n            origin: '*'\n            headers: \n              - accept\n              - Content-Type\n              - Origin\n              - User-Agent\n              - Referer\n      - http:\n          path: api/todos/{id}\n          method: any\n          request:\n            parameters:\n              paths:\n                id: true\n          cors: \n            allowCredentials: true\n            origin: '*'\n            headers: \n              - accept\n              - Content-Type\n              - Origin\n              - User-Agent\n              - Referer"]},{"id":111154808,"files":["service: aws-node-rest-api-mongodb\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user/create\n          method: post\n          cors: true\n\n  updateUser:\n    handler: handler.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n\n  deleteUser:\n    handler: handler.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\n\n  user:\n    handler: handler.user\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n\n  alluser:\n    handler: handler.alluser\n    events:\n      - http:\n          path: user/all\n          method: get\n          cors: true\n\n"]},{"id":130111645,"files":["service: serverless-graphql-rest-api\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  stage: ${env:SLS_STAGE, opt:stage, self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: \"${self:custom.stage}.users\"\n            sources: [dynamodb/seed-data/users.json]\n          - table: \"${self:custom.stage}.companies\"\n            sources: [dynamodb/seed-data/companies.json]\n          - table: \"${self:custom.stage}.contacts\"\n            sources: [dynamodb/seed-data/contacts.json]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  role: defaultRole\n  environment:\n    STAGE: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  \n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n\n\nresources:\n  Resources:\n\n    ##\n    # Tables\n    ##\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.users\"\n        AttributeDefinitions:\n          - AttributeName: uid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n    companiesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.companies\"\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n    contactsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.contacts\"\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n          - AttributeName: companyId\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        GlobalSecondaryIndexes:\n          - IndexName: companyId-index\n            KeySchema:\n              - AttributeName: companyId\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 10\n              WriteCapacityUnits: 10\n\n    ##\n    # IAM ROLE\n    ##\n    defaultRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:custom.stage}-${self:provider.region}-defaultRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:custom.stage}-defaultServerlessPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - SNS:Publish\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                    - dynamodb:DeleteItem\n                    - dynamodb:BatchGetItem\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetRecords\n                    - dynamodb:GetShardIterator\n                    - dynamodb:DescribeStream\n                    - dynamodb:ListStreams\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                    - lambda:InvokeAsync\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                    - xray:PutTelemetryRecords\n                  Resource:\n                    - \"*\""]},{"id":163331142,"files":["service: excalibur\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512 # uses ~250MB from testing\n  timeout: 29 # limited by api gateway, hard limit is 29s\n  logRetentionInDays: 7\n  region: ap-southeast-1\n  \nplugins:\n- serverless-webpack\n\ncustom:\n  webpack:\n    includeModules: true\n\nfunctions:\n  excalibur:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n"]},{"id":85559476,"files":["service: smsbot\n\nprovider:\n  name: openwhisk\n\ncustom: \n  credentials: ${file(credentials.yml)}\n\nfunctions:\n  incoming:\n    handler: handler.incoming\n    parameters:\n      numbers: ${self:custom.credentials.numbers}\n      slack: ${self:custom.credentials.slack}\n    annotations:\n      web-export: true\n  reply:\n    handler: handler.reply\n    parameters:\n      twilio: ${self:custom.credentials.twilio}\n    annotations:\n      web-export: true\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":167280786,"files":["service: mmi-alert\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  profile: serverless\nfunctions:\n  mmiAlert:\n    handler: handler.mmiAlert\n    events:\n    - schedule:\n        rate: cron(30 5 ? * MON-FRI *)\n        enabled: true\npackage:\n  exclude:\n    - images/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - LICENSE\n"]},{"id":168569031,"files":["service:\n  name: serverless-aws-nodejs-2019\n  publish: false\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    packager: yarn\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  environment: ${file(env.yml):${self:custom.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${opt:region, 'us-west-2'}\n  environment: ${self:custom.environment}\n\nfunctions:\n  getFunction:\n    description: Response a JSON with the GET params received\n    handler: handlers/getFunction.handler\n    events:\n      - http:\n          path: get-function\n          method: get\n          cors: true\n\n  postFunction:\n    description: Response a JSON with the POST params received\n    handler: handlers/postFunction.handler\n    events:\n      - http:\n          path: post-function\n          method: post\n          cors: true\n"]},{"id":106003039,"files":["service: boilerplate-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  memorySize: 128\n\nfunctions:\n  houses:\n    handler: src/handlers/houses.handler\n    events:\n      - http:\n          method: get\n          path: houses\n          cors: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: webpack.config.js\n    includeModules:\n      forceExclude:\n        - aws-sdk\n"]},{"id":142079991,"files":["service: lilium\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  usagePlans:\n    throttle:\n      burstLimit: 50\n      rateLimit: 80\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nresources:\n  Resources:\n#    GraphQLPostLambdaFunction:\n#      Type: AWS::Lambda::Function\n\nfunctions:\n  GraphQLPost:\n    handler: src/function-handlers/graphql.handle\n    events:\n    - http:\n        path: /graphql\n        method: post\n        cors: true\n  GraphQLPlayground:\n    handler: src/function-handlers/graphql.handle\n    events:\n    - http:\n        path: /graphql\n        method: get\n        cors: true\n"]},{"id":164350784,"files":["type: participation-api\nservice: participation-api\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:us-east-1:942252418694:table/participationsDB\nfunctions:\n  participationsGet:\n    handler: code/api.get\n    events:\n      - http:\n          path: /\n          method: get\n  participationsPost:\n    handler: code/api.post\n    events:\n       - http:\n           path: /\n           method: post\n  participationsDelete:\n    handler: code/api.delete\n    events:\n      - http:\n          path: /\n          method: delete\n\nresources:   \n  Resources:     \n    ParticipationsTable:       \n      Type: 'AWS::DynamoDB::Table'       \n      Properties:        \n        TableName: participationsDB        \n        AttributeDefinitions:           \n          -             \n            AttributeName: id             \n            AttributeType: S         \n        KeySchema:           \n          -             \n            AttributeName: id             \n            KeyType: HASH         \n        ProvisionedThroughput:            \n          ReadCapacityUnits: 1           \n          WriteCapacityUnits: 1"]},{"id":139242080,"files":["service: serverless-apollo-datasource-dynamodb\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  profile: ${opt:stage}\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: ${opt:region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n  environment:\n    SERVERLESS_PROJECT: serverless-apollo-datasource-dynamodb\n    SERVERLESS_STAGE: ${opt:stage}\n    SERVERLESS_REGION: ${opt:region}    \n    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR\n    # SLS_DEBUG: true\nplugins:\n  - serverless-dynamodb-local\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4200\n  webpackIncludeModules: true\n  dynamodb:\n    noStart: false\n    start:\n      # host: localhost\n      port: 8000\n      sharedDb: true\n      migrate: true\n      seed: false\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get\n        cors: true       \n\n\nResources:\n  psqTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Delete\n    Properties:\n      TableName: psq\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: 1\n        WriteCapacityUnits: 1"]},{"id":162069056,"files":["service: demo-option1-binarymediatypes\napp: demo-option1-binarymediatypes\ntenant: activescott\n\nplugins:\n  - serverless-apigw-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n","service: demo-option2-contenthandling\napp: demo-option2-contenthandling\ntenant: activescott\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-apigwy-binary\n\nfunctions:\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: binary/{pathvar+}\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'application/octet-stream'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png/\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'image/png'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg/\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'image/jpeg'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n          integration: lambda\n          # NOTE: No contentHandling\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'text/html'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n            template: $input.path('$.body')\n"]},{"id":161805450,"files":["# serverless.yml\n\nservice: stargazing\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    WEBHOOK_URL: \"https://hooks.slack.com/services/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\"\n\nfunctions:\n  stargazer:\n    handler: handler.stargazer\n    events:\n      - http: POST stargazer\n"]},{"id":161118164,"files":["service: at2gh\n\nplugins:\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    GITHUB_API_KEY: ${self:custom.secrets.GITHUB_API_KEY}\n    AIRTABLE_API_KEY: ${self:custom.secrets.AIRTABLE_API_KEY}\n    REPO_OWNER: ${self:custom.secrets.REPO_OWNER}\n    REPO_NAME: ${self:custom.secrets.REPO_NAME}\n    AIRTABLE_BASE: ${self:custom.secrets.AIRTABLE_BASE}\n    AIRTABLE_LINK_PRE: ${self:custom.secrets.AIRTABLE_LINK_PRE}\n\nfunctions:\n  # init:\n  #   handler: handler.init\n  cron:\n    handler: handler.transferTasks\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":161697084,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# The `service` block is the name of the service\nservice: serverless-services\n\nplugins:\n  # - serverless-dynamodb-local #  DYNAMODB plugin\n  # - serverless-offline-scheduler # SCHEDULING plugin\n  - serverless-offline\n  - serverless-aws-documentation\n\n# exclude the code coverage files, examples and circle ci files\npackage:\n  exclude:\n    - .circleci/**\n    - examples/**\n\ncustom:\n\n  # You must have the documentation object\n  documentation:\n    # this is general info about the API\n    api:\n      info:\n        version: '2'\n        title: Serverless API\n        description: Some example API\n        termsOfService: https://innovic.io\n        contact:\n          name: Miroslav Maksimovic\n          url: https://innovic.io\n          email: miroslavmaksimovic95@gmail.com\n        license:\n          name: The license\n          url: https://www.github.com\n      tags:\n        - name: Tag1\n          description: The first tag\n        - name: Tag2\n          description: That other tag that we all love\n    # Now we describe all the models that we use\n    models:\n      - name: getCryptoCurrency\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: getCryptoCurrencyBitcoinValue\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: getCurrentWeather\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecast\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecastDaily\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecastDaily\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getIP\n          contentType: \"application/json\"\n          schema:\n            type: object\n\n\n      # serverless-offline:\n      #   provider:\n      #     environment: ${file(env.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=1.27.3\"\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage} # set the stage based on what Circle Branch is deploying\n  region: eu-west-2 # default is us-east-1\n    # environment: ${file(env.yml)} # for dev - serverless-offline, alternatively pass env vals as options\n    # environment:\n  # SERVICE_USER: ${opt:service_user} # pass in your environment variables as options from Circle\n  # SERVICE_SEC: ${opt:service_sec}\n  # SERVICE_URL: https://innovic.io/\n  cfLogs: true # enable logging\n  apiKeys:\n    -api-key # https://serverless.com/framework/docs/providers/aws/events/apigateway#setting-api-keys-for-your-rest-api\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # logging permissions\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:DescribeLogStreams\n        - logs:PutLogEvents\n        - logs:CreateSubscriptionFilter\n        - logs:PutSubscriptionFilter\n      Resource: \"arn:aws:logs:${opt:region, self:provider.region}:serverless:log-group:/aws/cognito/*\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  getCryptoCurrency:\n    handler: services/cryptocurrency/cryptocurrency.getCryptoCurrency\n    events:\n      - http:\n          path: /cryptocurrency\n          method: get\n          private: true\n          cors: true\n  getCryptoCurrencyBitcoinValue:\n    handler: services/cryptocurrency/cryptocurrency.getCryptoCurrencyBitcoinValue\n    events:\n      - http:\n          path: /cryptocurrency/bitcoinvalue\n          method: get\n          private: true\n          cors: true\n  getCurrentWeather:\n    handler: services/weather/weather.getWeather\n    events:\n      - http:\n          path: /weather\n          method: get\n          private: true\n          cors: true\n  getWeatherForecast:\n    handler: services/weather/weather.getWeatherForecast\n    events:\n      - http:\n          path: /forecast\n          method: get\n          private: true\n          cors: true\n  getWeatherForecastDaily:\n    handler: services/weather/weather.getWeatherForecastDaily\n    events:\n      - http:\n          path: /forecast/daily\n          method: get\n          private: true\n          cors: true\n  getIP:\n    handler: services/ip/ip.getIP\n    events:\n      - http:\n          path: /ip\n          method: get\n          private: true\n          cors: true\n"]},{"id":94524953,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-webpack-starter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  webpack: webpack/${self:provider.stage}.config.js\n  webpackIncludeModules: true\n  serverless-offline: ${file(./env.yml):serverless-offline}\n  cors:\n    origins:\n      - '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Requested-With\n      - X-Requested-By\n    allowCredentials: false\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    NODE_ENV: ${self:provider.stage}\n\n# you can add packaging information here\npackage:\n  individual: true\n\nfunctions:\n  hello:\n    handler: src/functions/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n  first:\n    handler: src/functions/first/handler.hello\n    events:\n      - http:\n          path: first\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n  second:\n    handler: src/functions/second/handler.hello\n    events:\n      - http:\n          path: second\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":121390115,"files":["service: ${env:SERVICE_NAME}\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    forceExclude:\n      - aws-sdk\n      - serverless\n    packager: 'yarn'\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - X-StorageApi-Token\n      - X-Amz-Date\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n    allowCredentials: false\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:REGION}\n  stage: ${env:STAGE}\n  memorySize: 128\n  timeout: 30\n  versionFunctions: false\n  deploymentBucket:\n    name: \"${env:SERVICE_NAME}-${env:REGION}-deployment\"\n  cfnRole: ${env:CLOUDFORMATION_ROLE_ARN}\n  role: ${env:LAMBDA_EXECUTION_ROLE_ARN}\n  stackTags:\n    KeboolaStack: ${env:KEBOOLA_STACK}\n  environment:\n\npackage:\n  individually: true\n  include:\n    - src/**\n    - node_modules/**\n  exclude:\n    - .codeclimate.yml\n    - .env\n    - .env.template\n    - .eslintignore\n    - .eslintrc.json\n    - .git/**\n    - .gitignore\n    - .travis.yml\n    - cf-stack.json\n    - docker-compose.yml\n    - Dockerfile\n    - LICENSE\n    - README.md\n    - yarn.lock\n    - test/**\n\nfunctions:\n\n  handler:\n    handler: src/lambda.handler\n    tags:\n      KeboolaStack: ${env:KEBOOLA_STACK}\n    events:\n      -\n        http:\n          method: get\n          path: \"/\"\n          cors: ${self:custom.cors}\n"]},{"id":160097218,"files":["service: ox-banking-chile\n\nprovider:\n name: aws\n runtime: nodejs8.10\n memorySize: 128\n timeout: 15 # optional, in seconds, default is 6\n stage: prod\n region: us-west-2\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-offline-scheduler\n\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n"]},{"id":131755069,"files":["service: ecs-events\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:publish\"\n      Resource:\n        - Ref: ECSStateChangeTopic\n\nfunctions:\n  state-change:\n    handler: state-change/index.handler\n    environment:\n      TOPIC_ARN:\n        Ref: ECSStateChangeTopic\n      MODE: errors # possible other values are 'all' and 'success'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - aws.ecs\n            detail-type:\n              - ECS Task State Change\n            detail:\n              # clusterArn:\n              #   - arn:aws:ecs:eu-west-1:000000000000:cluster/example-cluster-arn\n              lastStatus:\n                - STOPPED\n              stoppedReason:\n                - Essential container in task exited\n                # - Task stopped by user\n\nresources:\n  Outputs:\n    ECSStateChangeTopic:\n      Description: ECS State Change Topic ARN\n      Value:\n        Ref: ECSStateChangeTopic\n  Resources:\n    ECSStateChangeTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ECS State Change\n        TopicName: ECSStateChangeTopic\n    # # Subscribe to SNS topic -> remove #s to enable resource\n    # ECSStateChangeSubscription:\n    #   Type: AWS::SNS::Subscription\n    #   Properties:\n    #     Endpoint: my.email@example.com\n    #     Protocol: email\n    #     TopicArn:\n    #       Ref: ECSStateChangeTopic\n"]},{"id":159796445,"files":["service:\n  name: multipart-forms-handling\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  test:\n    handler: first.hello\n    events:\n      - http:\n          method: post\n          path: test\ncustom:\n  "]},{"id":136099685,"files":["service: serverless-municipios-por-estado\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    packager: 'yarn'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  getStates:\n    handler: src/endpoint/getStates.func\n    events:\n       - http:\n           path: getStates\n           method: get\n\n  getCities:\n    handler: src/endpoint/getCities.func\n    events:\n       - http:\n           path: getCities/{stateId}\n           method: get\n"]},{"id":159141041,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: service-name-js # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":155386580,"files":["service: sls-boilerplate-sequilize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  teamsAll:\n    handler: handler.teamsAll\n    events:\n    - http:\n        path: teams\n        method: get\n  createTeam:\n    handler: handler.createTeam\n    events:\n    - http:\n        path: teams\n        method: post\n\n\nplugins:\n  - serverless-offline"]},{"id":156773926,"files":["service: image-processing-bucket\n\ncustom:\n  secrets: ${file(../secrets/secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n\nresources:\n  Resources:\n    ImageProcessingOnTheFly:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicReadWrite\n        BucketName: ${env:BUCKET}\n        WebsiteConfiguration:\n          ErrorDocument: error.html\n          IndexDocument: index.html\n          RoutingRules:\n            -\n              RedirectRule:\n                HostName: ${self:custom.secrets.DOMAIN}\n                HttpRedirectCode: \"307\"\n                Protocol: \"https\"\n                ReplaceKeyPrefixWith: \"${self:provider.stage}/processing\"\n              RoutingRuleCondition:\n                HttpErrorCodeReturnedEquals: \"404\"\n                KeyPrefixEquals: \"\"\n    ImageProcessingOnTheFlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: ImageProcessingOnTheFly\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:*\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join:\n                  - \"\"\n                  -\n                    - \"arn:aws:s3:::\"\n                    -\n                      Ref: ImageProcessingOnTheFly\n                    - \"/*\"\n              Principal: \"*\"","service: image-processing-functions\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  tracing: true\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n    REGION: ${env:REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  processing:\n    handler: processing.handler\n    events:\n      - http:\n          path: processing\n          method: get\n          contentHandling: CONVERT_TO_BINARY"]},{"id":84245175,"files":["service: droid\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DROID_TABLE: \"${self:service}-${opt:stage, self:provider.stage}-droids\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DROID_TABLE}\"\n    - Effect: Allow\n      Action:\n        - iot:*\n      Resource: \"arn:aws:iot:${opt:region, self:provider.region}:*:*\"\n\npackage:\n  include:\n    - dao/droid-dao.js\n\nfunctions:\n  create:\n    handler: admin/create.create\n    events:\n      - http:\n          path: droids\n          method: post\n          cors: true\n  delete:\n    handler: admin/delete.delete\n    events:\n      - http:\n          path: droids/{id}\n          method: delete\n          cors: true\n  get:\n    handler: admin/get.get\n    events:\n      - http:\n          path: droids/{id}\n          method: get\n          cors: true\n  list:\n    handler: admin/list.list\n    events:\n      - http:\n          path: droids\n          method: get\n          cors: true\n  update:\n    handler: admin/update.update\n    events:\n      - http:\n          path: droids/{id}\n          method: put\n          cors: true\n  color:\n    handler: control/color.color\n    events:\n      - http:\n          path: droids/color/{thingName}\n          method: post\n          cors: true\n  move:\n    handler: control/move.move\n    events:\n      - http:\n          path: droids/move/{thingName}\n          method: post\n          cors: true\n  stop:\n    handler: control/stop.stop\n    events:\n      - http:\n          path: droids/stop/{thingName}\n          method: post\n          cors: true\n      - iot:\n          sql: \"SELECT topic(3) AS thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported.speed > 200\"\n          enabled: true\n\nresources:\n  Resources:\n    DroidsDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: \"${self:provider.environment.DROID_TABLE}\"\n","service: frontend\n\ncustom:\n  bucket: \"${self:service}-${opt:stage, self:provider.stage}-web\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n\n    # Create S3 bucket to store the web application in\n    S3BucketWeb:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.bucket}\n\n    # Create S3 bucket policy to allow CloudFront to access the content\n    S3BucketPolicyWeb:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: S3BucketWeb\n        PolicyDocument:\n          Statement:\n            - Action:\n                - s3:GetObject\n              Effect: Allow\n              Principal: \"*\"\n              Resource: arn:aws:s3:::${self:custom.bucket}/*\n\n    # Create a CloudFront Distribution to serve the application\n    CloudFrontDistributionWeb:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n\n          # Let the web application handle routing\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n\n          DefaultCacheBehavior:\n            ForwardedValues:\n              Cookies:\n                Forward: none\n              QueryString: false\n            TargetOriginId: Web\n            ViewerProtocolPolicy: redirect-to-https\n          DefaultRootObject: index.html\n          Enabled: true\n          HttpVersion: http2\n          Origins:\n            - DomainName: ${self:custom.bucket}.s3.amazonaws.com\n              Id: Web\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n\n  Outputs:\n\n    # Include the domain name in the outputs to show it when running `serverless info --verbose`\n    CloudFrontDistributionDomainName:\n      Value:\n        'Fn::GetAtt': [ CloudFrontDistributionWeb, DomainName ]\n"]},{"id":99659438,"files":["service: ddns-updater\nplugins:\n  - serverless-domain-manager\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 3\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - lambda:InvokeFunction\n    Resource: arn:aws:lambda:*:*:function:${self:custom.process}\n  - Effect: Allow\n    Action:\n      - route53:ListHostedZones\n      - route53:ListResourceRecordSets\n      - route53:ChangeResourceRecordSets\n    Resource: \"*\"\n\ncustom:\n  domain: ${file(config.json):update_endpoint}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  customDomain:\n      basePath: \"\"\n      domainName: ${self:custom.domain}\n      stage: ${self:custom.stage}\n      createRoute53Record: true\n\npackage:\n include:\n    - handler.js\n    - auth.js\n    - ddns-updater.js\n\nfunctions:\n  index:\n    timeout: 10\n    handler: handler.index\n    events:\n      - http:\n          path: \"/\"\n          method: any\n  update:\n    timeout: 10\n    handler: handler.update\n    events:\n      - http:\n          path: update\n          method: any\n          authorizer: auth\n  auth:\n    handler: auth.auth\n"]},{"id":151255994,"files":["service: simple-dynamic-webpage\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  homepage:\n    handler: controller/homeController.home\n    events:\n      - http:\n          method: GET\n          path: '/'\n\ncustom:\n  serverless-offline:\n    port: 4000\n\nplugins:\n  - serverless-offline","service: simple-dynamic-webpage-backend\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  configurationStyle:\n    handler: handlers/configuration.getStyle\n    events:\n      - http:\n          path: '/config/style'\n          method: GET\n\n  configurationContent:\n    handler: handlers/configuration.getContent\n    events:\n      - http:\n          path: '/config/content'\n          method: GET\n\n  configurationFlags:\n    handler: handlers/configuration.getFeatureFlags\n    events:\n      - http:\n          path: '/config/featureflags'\n          method: GET\n\n  data:\n    handler: handlers/retrieveData.getData\n    events:\n      - http:\n          path: '/data'\n          method: GET\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4001\n  \n","service: a-simple-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: '/'\n          method: GET\n\n  myfunction:\n    handler: another-handler.myexample\n    events:\n      - http:\n          path: '/myAPI/{mypath1}/{mypath2}'\n          method: GET\n  \n  appendExtension:\n    handler: another-handler.appendExtension \n    events: \n      - http:\n          path: '/append/{extension}'\n          method: POST\n\nplugins:\n  - serverless-offline\n  \n"]},{"id":124181916,"files":["service: slack-send-app\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    stage: dev\n    region: us-east-1\n    memorySize: 128\n    versionFunctions: false\n    cfLogs: true\n    iamRoleStatements:\n        - Effect: \"Allow\"\n          Action:\n              - \"dynamodb:*\"\n          Resource: \"*\"\n    environment:\n        DDB_TOKENS: slack-send-server-${opt:stage, self:provider.stage}-v0.0-tokens\n        DDB_MESSAGES: ${self:service}-${opt:stage, self:provider.stage}-v0.0-messages\npackage:\n    exclude:\n        - .npmignore\n        - fixtures/**\n        - .git/**\nfunctions:\n    schedule:\n        handler: handler.scheduled_event\n        description: Handle scheduled event\n        timeout: 30\n        events:\n            - schedule:\n                name: ${self:service}-${opt:stage, self:provider.stage}-every-5-mins\n                description: Every 5 minutes\n                rate: rate(5 minutes)\n                enabled: true\n            - http:\n                path: slack/send/run\n                method: get\n                private: false\n    command:\n        handler: handler.slack_command\n        description: Handle slash commands from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/command\n                method: post\n                private: false\n            - schedule:\n                rate: rate(5 minutes)\n                description: keeps lambda warm\n                enabled: true\n                input:\n                  inputpath: \"/slack/send/command\"\n    actions:\n        handler: handler.slack_actions\n        description: Handle interactive message actions from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/actions\n                method: post\n                private: false\n            - schedule:\n                rate: rate(5 minutes)\n                description: keeps lambda warm\n                enabled: true\n                input:\n                  inputpath: \"/slack/send/actions\"\n    options:\n        handler: handler.slack_options\n        description: Handle interactive message options from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/options\n                method: post\n                private: false\n    events:\n        handler: handler.slack_events\n        description: Handle events from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/events\n                method: post\n                private: false\nresources:\n    Resources:\n        TableScheduledMessages:\n            Type: AWS::DynamoDB::Table\n            Properties:\n                TableName: ${self:provider.environment.DDB_MESSAGES}\n                AttributeDefinitions:\n                    - AttributeName: ymd\n                      AttributeType: S\n                    - AttributeName: id\n                      AttributeType: S\n                    - AttributeName: date_id\n                      AttributeType: S\n                    - AttributeName: team_id\n                      AttributeType: S\n                    - AttributeName: user_id\n                      AttributeType: S\n                KeySchema:\n                    - AttributeName: ymd\n                      KeyType: HASH\n                    - AttributeName: date_id\n                      KeyType: RANGE\n                ProvisionedThroughput:\n                    ReadCapacityUnits: 20\n                    WriteCapacityUnits: 5\n                GlobalSecondaryIndexes:\n                    - IndexName: team_user_index\n                      KeySchema:\n                          - AttributeName: team_id\n                            KeyType: HASH\n                          - AttributeName: user_id\n                            KeyType: RANGE\n                      Projection:\n                          ProjectionType: ALL\n                      ProvisionedThroughput:\n                          ReadCapacityUnits: 20\n                          WriteCapacityUnits: 0\n                    - IndexName: team_id_index\n                      KeySchema:\n                          - AttributeName: team_id\n                            KeyType: HASH\n                          - AttributeName: id\n                            KeyType: RANGE\n                      Projection:\n                          ProjectionType: ALL\n                      ProvisionedThroughput:\n                          ReadCapacityUnits: 20\n                          WriteCapacityUnits: 0\n        ScheduleLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        CommandLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        ActionsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        OptionsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        EventsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n"]},{"id":113234453,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: santas-assistant-skill\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\n# The `functions` block defines what code to deploy\nfunctions:\n  handler:\n    handler: index.handler\n    events:\n      - alexaSkill\n\nplugins:\n  serverless-webpack\n\npackage:\n  exclude: \n    - front-end/**\n\ncustom:\n  webpackIncludeModules: true # enable auto-packing of external modules"]},{"id":156440126,"files":["service: serverless-offline-sqs-tutorial\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: local\n  region: eu-west-2\n\npackage:\n  individually: true\n  exclude:\n  - functions/**\n  - stage_variables/**\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sqs\n  - serverless-domain-manager\n\ncustom:\n  stage: ${file(stage_variables/${opt:stage, self:provider.stage}.yaml)}\n  serverless-offline-sqs:\n    endpoint: http://0.0.0.0:9324\n    region: ${self:provider.region}\n    accessKeyId: root\n    secretAccessKey: root\n\nfunctions:\n  message_producer:\n    handler: functions/function_producer/handler_producer.producer\n    package:\n      include:\n      - functions/function_producer/**/*\n    environment:\n      CAT_FACTS_QUEUE_URL: ${self:custom.stage.sqs.cat_facts.url}\n    events:\n    - http:\n        path: api/cat_facts\n        method: get\n        integration: lambda\n  message_consumer:\n    handler: functions/function_consumer/handler_consumer.consumer\n    package:\n      include:\n      - functions/function_consumer/**/*\n    events:\n      - sqs: ${self:custom.stage.sqs.cat_facts.arn}\n\nresources:\n  Resources:\n    cat_facts:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: cat_facts"]},{"id":139470020,"files":["service: serverless-by-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DB_URL: ${env:DB_URL}\n    JWT_SECRET: ${opt:jwt-secret}\n\nfunctions:\n  basics-aws-based:\n    handler: functions/basics/aws-based.handler\n    events:\n      - http:\n          method: get\n          path: basics/aws-based\n\n  basics-express-based:\n    handler: functions/basics/express-based.handler\n    events:\n      - http:\n          method: get\n          path: basics/express-based\n\n  auth-jwt-generate:\n    handler: functions/auth/jwt/generate.handler\n    events:\n      - http:\n          method: post\n          path: auth/jwt/generate\n\n  auth-jwt-verify:\n    handler: functions/auth/jwt/verify.handler\n    events:\n      - http:\n          method: get\n          path: auth/jwt/verify\n\n  auth:\n    handler: functions/auth/index.handler\n    events:\n      - http:\n          method: get\n          path: auth\n\n  db-mongo:\n    handler: functions/db/mongo.handler\n    events:\n      - http:\n          method: get\n          path: db/mongo\n\n  graphql:\n    handler: functions/graphql/apollo-server.handler\n    events:\n      - http:\n          method: ANY\n          path: graphql\n\nplugins:\n  - serverless-offline\n"]},{"id":143595022,"files":["service: mini-movie-db\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  stage: ${opt:stage, \"dev\"}\n  environment:\n    stage: ${self:provider.stage}\n    MOVIE_DB_API_KEY: ${file(./serverless.env.yml):MOVIE_DB_API_KEY, \"\"}\n    ENGINE_API_KEY: ${file(./serverless.env.yml):ENGINE_API_KEY, \"\"}\n    SENTRY_FILTER_LOCAL: false\n    S3_BUCKET: ${self:service}-image-storage\n    S3_HOST: localhost\n    S3_PORT: 8000\n\nplugins:\n  - serverless-sentry\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-scripts\n\npackage:\n  exclude:\n    - ./node_modules/**\n    - ./.eslintrc.json\n    - ./webpack.config.js\n\ncustom:\n  serverless-offline:\n    port: 1337\n  config:\n    CACHE_INSTANCE_SIZE: cache.t2.micro\n  sentry:\n    dsn: ${file(./serverless.env.yml):SENTRY_DSN, \"\"}\n    environment: ${opt:stage, self:provider.stage}\n    organization: saerisio\n    project: ${self:service}\n    authToken: ${file(./serverless.env.yml):SENTRY_AUTH_TOKEN, \"\"}\n    release:\n      version: git\n    filterLocal: false\n  webpack:\n    includeModules: true\n    webpackConfig: 'webpack.config.js'\n\nfunctions:\n  graphql:\n    handler: src/index.graphqlHandler\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n"]},{"id":155135052,"files":["# Serving HTML through API Gateway for AWS Lambda\nservice: redirector\n\ncustom:\n  bucket: redirector-111222333 # change name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  environment:\n    BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: 'arn:aws:s3:::${self:custom.bucket}/*'\n\nfunctions:\n  redirect:\n    handler: lib/handlers.redirect\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: get\n          path: /{any+}\n\nresources:\n  Resources:\n    redirect:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucket}\n"]},{"id":154576692,"files":["service:\n  name: nametag-example\n\n\nplugins:\n  localPath: ../../\n  modules:\n    - serverless-plugin-nametag\n\n\npackage:\n  include:\n    - \"handler.js\"\n\n\ncustom:\n  nametag:\n    tag: true\n\n\nprovider:\n  name: aws\n  stage: ${opt:stage, \"dev\"}\n  region: ${opt:region, \"us-east-1\"}\n  logRetentionInDays: 30\n  runtime: python3.6\n\n  tags:\n    MyTag: IsCool\n    AnotherTag: there\n\n  environment:\n\n\nfunctions:\n  ExampleOne:\n    description: 'Tags will be { \"Name\": \"nametag-example-dev-ExampleOneLambdaFunction\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n  ExampleTwo:\n    description: 'Tags will be { \"CustomName\": \"nametag-example-dev-ExampleTwoLambdaFunction\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tagName: CustomName\n  ExampleThree:\n    description: 'Tags { \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tag: false\n      tagName: DoesNotMatter\n  ExampleFour:\n    description: >-\n      Tags will be { \"Name\": \"nametag-example-dev-ExampleFourLambdaFunction\", \"AnotherTag\": \"here\", \"MyTag\": \"IsCool\" }\n    handler: handler.foo\n    tags:\n      AnotherTag: here\n  ExampleFive:\n    description: 'Tags will be { \"AnotherTag\": \"here\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tag: false\n    tags:\n      AnotherTag: here\n"]},{"id":154091757,"files":["service: sls-pg\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  vpc:\n    securityGroupIds:\n      - sg-0e567b68\n    subnetIds:\n      - subnet-0a053c6e\n      - subnet-7a427e0c\n      - subnet-95dfa5cd\n\nfunctions:\n  books-post-resource:\n    handler: src/books/functions/post-resource.handler\n    events:\n      - http:\n          path: books\n          method: post\n          cors: true\n\n  books-get-collection:\n    handler: src/books/functions/get-collection.handler\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n\n  books-get-resource:\n    handler: src/books/functions/get-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: get\n          cors: true\n\n  books-put-resource:\n    handler: src/books/functions/put-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: put\n          cors: true\n\n  books-delete-resource:\n    handler: src/books/functions/delete-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: delete\n          cors: true\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\ncustom:\n  serverless-offline:\n    port: ${env:OFFLINE_PORT}\n"]},{"id":153861195,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    # Restrict our IAM role permissions to\n    # the specific table for the stage\n    Resource:\n      - \"Fn::GetAtt\": [NotesTable, Arn]\n\n# These environment variables are made available to our functions\n# under process.env.\nenvironment:\n  tableName: ${self:custom.tableName}\n  stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\nbilling:\n  handler: billing.main\n  events:\n    - http:\n        path: billing\n        method: post\n        cors: true\n        authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]}]