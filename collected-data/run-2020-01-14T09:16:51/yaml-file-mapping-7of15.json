[{"id":150218642,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: certificate-creator-example\napp: certificate-creator-example-app\n\nplugins:\n  - serverless-certificate-creator\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n     - http:\n         path: example/something\n         method: get\n\ncustom:\n  customDomain:\n    domainName: certcreatorsample.greenelephant.io\n    certificateName: 'certcreatorsample.greenelephant.io'\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  customCertificate:\n    certificateName: 'certcreatorsample.greenelephant.io'\n    idempotencyToken: 'certcreatorsamplegreenelephantio'\n    writeCertInfoToFile: true\n    certInfoFileName: \"certs/${self:provider.stage}/cert-info.yml\"\n    hostedZoneNames: 'greenelephant.io.'\n    subjectAlternativeNames : \n      - 'certcreatorsample1.greenelephant.io'\n      - 'certcreatorsample2.greenelephant.io'\n    tags:\n      Name: 'somedomain.com'\n      Environment: 'prod'\n    rewriteRecords: false"]},{"id":76279881,"files":["service: emojibot\n\npackage:\n  exclude:\n    - \"**\"\n  include:\n    - node_modules/**\n    - \"!node_modules/aws-sdk/**\"\n    - \"!node_modules/@types/**\"\n    - \"!node_modules/jasmine*/**\"\n    - src/**\n\nprovider:\n  name: aws\n  region: eu-west-1\n  stage: dev\n  runtime: nodejs10.x\n  environment:\n    CLIENT_ID: ${file(local.yml):${opt:stage, self:provider.stage}.slack.clientId}\n    CLIENT_SECRET: ${file(local.yml):${opt:stage, self:provider.stage}.slack.clientSecret}\n    ACCESS_TOKEN_TABLE_NAME: ${self:resources.Resources.accessTokenTable.Properties.TableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n\nfunctions:\n  install:\n    handler: src/handler.install\n    events:\n      - http: GET install\n  authorized:\n    handler: src/handler.authorized\n    events:\n      - http: GET authorized\n  event:\n    handler: src/handler.event\n    events:\n      - http: POST event\n  explain:\n    handler: src/handler.explain\n    events:\n      - http: POST explain\n\nresources:\n  Resources:\n    accessTokenTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${opt:stage, self:provider.stage}-accessTokenTable\n        AttributeDefinitions:\n          - AttributeName: teamId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: teamId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":157638526,"files":["service: serverless-loopback\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: us-east-1\n\ncustom:\n  defaultStage: dev\n  DB:\n    dev:\n      # HOST: MY_HOST # provide this information if DB already exists\n      # PORT: MY_PORT # provide this information if DB already exists\n      NAME: MY_TEST_DB\n      USERNAME: admin\n      PASSWORD: password\n\nfunctions:\n  loopback:\n    handler: lambda-wrapper.handler\n    name: '${self:provider.stage}-loopback'\n    description: Sample loopback running in AWS lambda\n    memorySize: 512\n    timeout: 60\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n    environment:\n      DB_HOST: { 'Fn::GetAtt': ['mySqlDb', 'Endpoint.Address' ] }\n      DB_PORT: { 'Fn::GetAtt': ['mySqlDb', 'Endpoint.Port' ] }\n      DB_NAME: '${self:custom.DB.${self:provider.stage}.NAME}'\n      DB_USERNAME: '${self:custom.DB.${self:provider.stage}.USERNAME}' # this will show in clear text in CloudFormation\n      DB_PASSWORD: '${self:custom.DB.${self:provider.stage}.PASSWORD}' # this will show in clear text in CloudFormation\n    vpc:\n      securityGroupIds:\n        - { 'Fn::GetAtt' : ['myVPC', 'DefaultSecurityGroup'] }\n      subnetIds:\n        - Ref: mySubnet1\n        - Ref: mySubnet2\n\nresources:\n  Resources:\n    # https://serverless.com/framework/docs/providers/aws/guide/resources#aws-cloudformation-resource-reference\n    # uses CloudFormation syntax - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\n    myVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: 172.31.0.0/16\n        Tags:\n        - Key: Name\n          Value: ${self:service}-vpc\n\n    mySubnet1:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}a\n        VpcId:\n          Ref: myVPC\n        CidrBlock: 172.31.0.0/20\n\n    mySubnet2:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        VpcId:\n          Ref: myVPC\n        CidrBlock: 172.31.16.0/20\n\n    myDBSubnetGroup:\n      Type: 'AWS::RDS::DBSubnetGroup'\n      Properties:\n        DBSubnetGroupDescription: 'description'\n        SubnetIds:\n          - Ref: mySubnet1\n          - Ref: mySubnet2\n\n    mySqlDb:\n      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html\n      Type: AWS::RDS::DBInstance\n      Properties:\n        AllocatedStorage: '5' # minimal size for this sample\n        BackupRetentionPeriod: 0 # disabling backups for this sample\n        DBInstanceClass: 'db.t2.micro' # minimal size for this sample\n        DBName: '${self:custom.DB.${self:provider.stage}.NAME}' # creating a database for this sample\n        DBSubnetGroupName: { 'Ref' : 'myDBSubnetGroup' }\n        Engine: 'mysql'\n        MasterUsername: '${self:custom.DB.${self:provider.stage}.USERNAME}' # this will show in clear text in CloudFormation\n        MasterUserPassword: '${self:custom.DB.${self:provider.stage}.PASSWORD}' # this will show in clear text in CloudFormation\n        MultiAZ: false # disabling for this sample\n        PubliclyAccessible: false\n        VPCSecurityGroups:\n          - { 'Fn::GetAtt' : ['myVPC', 'DefaultSecurityGroup'] }\n\n  # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    RdsDBInstanceIdentifier:\n      Description: The DB Name for the (MySQL) RDS created\n      Value:\n        Ref: mySqlDb\n"]},{"id":67488466,"files":["service: ${self:provider.environment.FAULTLINE_SERVICE_NAME}\n\nframeworkVersion: \">=1.24.1 <2.0.0\"\n\nprovider:\n  name: aws\n  environment:\n    FAULTLINE_STAGE: ${env:FAULTLINE_STAGE, file(./config.yml):stage, 'dev'}\n    FAULTLINE_SERVICE_NAME: ${env:FAULTLINE_SERVICE_NAME, file(./config.yml):serviceName, 'faultline'}\n    FAULTLINE_REGION: ${env:FAULTLINE_REGION, file(./config.yml):region, 'us-east-1'}\n    FAULTLINE_S3_BUCKET_NAME: ${env:FAULTLINE_S3_BUCKET_NAME, file(./config.yml):s3BucketName}\n    FAULTLINE_DEPLOYMENT_BUCKET: ${file(./config.yml):deploymentBucket, ''}\n    FAULTLINE_DYNAMODB_TABLE_PREFIX: ${env:FAULTLINE_DYNAMODB_TABLE_PREFIX, file(./config.yml):dynamodbTablePrefix, 'faultline'}\n    FAULTLINE_DYNAMODB_TABLE_SUFFIX: ${env:FAULTLINE_DYNAMODB_TABLE_SUFFIX, file(./config.yml):dynamodbTableSuffix, \"-${self:provider.environment.FAULTLINE_STAGE}\"}\n    FAULTLINE_DYNAMODB_READ_CAPACITY_UNITS: ${env:FAULTLINE_DYNAMODB_READ_CAPACITY_UNITS, file(./config.yml):dynamodbReadCapacityUnits, '1'}\n    FAULTLINE_DYNAMODB_WRITE_CAPACITY_UNITS: ${env:FAULTLINE_DYNAMODB_WRITE_CAPACITY_UNITS, file(./config.yml):dynamodbWriteCapacityUnits, '1'}\n    FAULTLINE_TIMEUNIT: ${env:FAULTLINE_TIMEUNIT, file(./config.yml):timeunit, 'minute'}\n    FAULTLINE_MASTER_API_KEY: ${env:FAULTLINE_MASTER_API_KEY, file(./config.yml):masterApiKey}\n    FAULTLINE_CLIENT_API_KEY: ${env:FAULTLINE_CLIENT_API_KEY, file(./config.yml):clientApiKey}\n    FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS: ${env:FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS, file(./config.yml):errorDataRetentionInDays, '-1'}\n    FAULTLINE_LOG_RETENTION_IN_DAYS: ${env:FAULTLINE_LOG_RETENTION_IN_DAYS, file(./config.yml):logRetentionInDays, '180'}\n    FAULTLINE_USE_KMS: ${env:FAULTLINE_USE_KMS, file(./config.yml):useKms, '0'}\n    FAULTLINE_KMS_KEY_ALIAS: ${env:FAULTLINE_KMS_KEY_ALIAS, file(./config.yml):kmsKeyAlias, 'faultline'}\n    FAULTLINE_VERSION: ${file(./package.json):version}\n  runtime: nodejs12.x\n  stage: ${self:provider.environment.FAULTLINE_STAGE}\n  region: ${self:provider.environment.FAULTLINE_REGION}\n  deploymentBucket: ${self:provider.environment.FAULTLINE_DEPLOYMENT_BUCKET}\n  timeout: 10\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: Allow\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:dynamodb:\", \"${self:provider.environment.FAULTLINE_REGION}\", \":*:*\" ] ] }\n      Action:\n        - \"dynamodb:*\"\n    - Effect: Allow\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}\"] ] }\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n      Resource:\n        - \"arn:aws:lambda:${self:provider.environment.FAULTLINE_REGION}:*:function:${self:provider.environment.FAULTLINE_SERVICE_NAME}-${self:provider.stage}-callNotifications\"\n    - Effect: Allow\n      Action:\n        - \"kms:Encrypt\"\n        - \"kms:Decrypt\"\n        - \"kms:ListAliases\"\n      Resource:\n        - \"*\"\n\npackage:\n  exclude:\n    - .github/**\n    - .nyc_output/**\n    - coverage/**\n    - docs/**\n    - src/**/__tests__/*.js\n\nplugins:\n  - faultline-env-checker\n  - faultline-resources\n  - serverless-prune-plugin\n\nfunctions:\n  projectsList:\n    handler: src/handlers/projectsList.handler\n    events:\n      - http:\n          path: projects\n          method: get\n          cors: true\n          integration: lambda-proxy\n  projectsDelete:\n    handler: src/handlers/projectsDelete.handler\n    timeout: 30\n    events:\n      - http:\n          path: projects/{project}\n          method: delete\n          cors: true\n          integration: lambda-proxy\n  errorsPost:\n    handler: src/handlers/errorsPost.handler\n    events:\n      - http:\n          path: projects/{project}/errors\n          method: post\n          integration: lambda-proxy\n  errorsList:\n    handler: src/handlers/errorsList.handler\n    events:\n      - http:\n          path: projects/{project}/errors\n          method: get\n          cors: true\n          integration: lambda-proxy\n  errorsGet:\n    handler: src/handlers/errorsGet.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: get\n          cors: true\n          integration: lambda-proxy\n  errorsPatch:\n    handler: src/handlers/errorsPatch.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: patch\n          cors: true\n          integration: lambda-proxy\n  errorsDelete:\n    handler: src/handlers/errorsDelete.handler\n    timeout: 30\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: delete\n          cors: true\n          integration: lambda-proxy\n  occurrencesList:\n    handler: src/handlers/occurrencesList.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}/occurrences\n          method: get\n          cors: true\n          integration: lambda-proxy\n  occurrencesGet:\n    handler: src/handlers/occurrencesGet.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}/occurrences/{reversedUnixtime}\n          method: get\n          cors: true\n          integration: lambda-proxy\n  callNotifications:\n    handler: src/handlers/callNotifications.handler\n    timeout: 30\n  deleteExpiredErrors:\n    handler: src/handlers/deleteExpiredErrors.handler\n    events:\n      - schedule:\n          rate: cron(0 0 * * ? *)\n          enabled: false # ${env:FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS, file(./config.yml):errorDataRetentionInDays, '-1'}\n  encrypt:\n    handler: src/handlers/encrypt.handler\n    events:\n      - http:\n          path: encrypt\n          method: post\n          integration: lambda-proxy\n  info:\n    handler: src/handlers/info.handler\n    events:\n      - http:\n          path: info\n          method: get\n          cors: true\n          integration: lambda-proxy\n"]},{"id":94588559,"files":["service: kinesis-stream-fanout\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  processPositive:\n    handler: lambda/handler.processPositive\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n          arn:\n            Fn::GetAtt:\n              - PositiveTransactionsStream\n              - Arn\n  processNegative:\n    handler: lambda/handler.processNegative\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n          arn:\n            Fn::GetAtt:\n              - NegativeTransactionsStream\n              - Arn\n\nresources:\n  Resources:\n    TransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: Transactions\n        ShardCount: 1\n    PositiveTransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: PositiveTransactions\n        ShardCount: 1\n    NegativeTransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: NegativeTransactions\n        ShardCount: 1\n    KinesisAnalyticsIAMRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Sid: 'KinesisAnalyticsAssumeRole'\n              Effect: Allow\n              Principal:\n                Service: kinesisanalytics.amazonaws.com\n              Action: 'sts:AssumeRole'\n        Policies:\n          - PolicyName: kinesis-stream-fanout-kinesis-analytics\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:GetShardIterator\"\n                    - \"kinesis:GetRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - TransactionsStream\n                      - Arn\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:PutRecord\"\n                    - \"kinesis:PutRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - PositiveTransactionsStream\n                      - Arn\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:PutRecord\"\n                    - \"kinesis:PutRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - NegativeTransactionsStream\n                      - Arn\n  Outputs:\n    TransactionsStreamARN:\n      Description: Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - TransactionsStream\n          - Arn\n    PositiveTransactionsStreamARN:\n      Description: Positive Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - PositiveTransactionsStream\n          - Arn\n    NegativeTransactionsStreamARN:\n      Description: Negative Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - NegativeTransactionsStream\n          - Arn\n    KinesisAnalyticsIAMRoleARN:\n      Description: IAM Role ARN for Kinesis Analytics\n      Value:\n        'Fn::GetAtt':\n          - KinesisAnalyticsIAMRole\n          - Arn\n"]},{"id":210917394,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: realtime-transport-dashboard\n\n# Serverless framework version\nframeworkVersion: \"=1.53.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: rtt-dashboard-${self:custom.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: prod\n  region: eu-west-1\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ RTTDashboardTable, Arn ]\n\nfunctions:\n  createDashboard:\n    handler: src/handler.createDashboard\n    events:\n      - http:\n          path: dashboard\n          method: POST\n  updateDashboard:\n    handler: src/handler.updateDashboard\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: POST\n  deleteDashboard:\n    handler: src/handler.deleteDashboard\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: DELETE\n  getDashboard:\n    handler: src/handler.getDashboard\n    timeout: 20\n    memory: 2048\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: GET\n  addWidget:\n    handler: src/handler.addWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget\n          method: POST\n  updateWidget:\n    handler: src/handler.updateWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget/{widget_id}\n          method: POST\n  deleteWidget:\n    handler: src/handler.deleteWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget/{widget_id}\n          method: DELETE\n\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    RTTDashboardTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":75615428,"files":["service: serverless-aws-documentation-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\n# Remember to reference the plugin\nplugins:\n  - serverless-aws-documentation\n\n# Let's keep this deployment lightweight. Probably not something you should copy\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n\ncustom:\n  # You must have the documentation object\n  documentation:\n    # this is general info about the API\n    api:\n      info:\n        version: '2'\n        title: Example API\n        description: Some example API\n        termsOfService: https://www.google.com\n        contact:\n          name: The contact person\n          url: https://www.serverless.com/framework\n          email: some-fake@email.com\n        license:\n          name: The license\n          url: https://www.github.com\n      tags:\n        -\n          name: Tag1\n          description: The first tag\n        -\n          name: Tag2\n          description: That other tag that we all love\n    # Now we describe all the models that we use\n    models:\n      -\n        name: MessageResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n      -\n        name: DoSomethingRequest\n        contentType: \"application/json\"\n        schema:\n          type: array\n          items:\n            type: string\n      -\n        name: DoSomethingResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            result:\n              type: string\n            submittedItems:\n              type: number\n      -\n        name: 400JsonResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n            statusCode:\n              type: number\n  commonModelSchemaFragments:\n    # defining common fragments means you can reference them with a single line\n    MethodResponse400Json:\n      statusCode: '400'\n      responseModels:\n        \"application/json\": 400JsonResponse\n\nfunctions:\n  theRouter:\n    handler: handler.router\n    events:\n      - http:\n          path: example/message\n          method: get\n          cors: true\n          documentation:\n            summary: Gets a simple message\n            tags:\n              - Tag1\n            description: >\n              Demonstrates a GET method. You can see query string parameters,\n              request headers, response body and response headers.\n            queryParams:\n              -\n                name: firstParam\n                description: The first param that we want, you MUST pass it\n                required: true\n              -\n                name: secondParam\n                description: The second param. This one is optional\n            methodResponses:\n              -\n                statusCode: '200'\n                responseModels:\n                  \"application/json\": MessageResponse\n                responseHeaders:\n                  -\n                    name: link\n                    description: describes other actions that can be taken\n                    type: string\n      - http:\n          path: example/do-something\n          method: post\n          cors: true\n          documentation:\n            summary: Takes a request body\n            tags:\n              - Tag2\n            description: Demonstrates a POST method. We show a request body here and have multiple response models.\n            requestModels:\n               \"application/json\": DoSomethingRequest\n            methodResponses:\n              -\n                statusCode: '200'\n                responseModels:\n                  \"application/json\": DoSomethingResponse\n              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}\n"]},{"id":104522306,"files":["service: flickr-wormhole\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 1337\n  webpackIncludeModules: true\n\nfunctions:\n  api:\n    handler: src/index.server\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n  playground:\n      handler: src/index.playground\n      events:\n        - http:\n            path: \"/playground\"\n            method: get\n            cors: true\n"]},{"id":73655892,"files":["service: service-test-alerts-plugin\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\npackage:\n  exclude:\n    - node_modules/**\n    - yarn.lock\n\ncustom:\n  notifications:\n    - protocol: email\n      endpoint: ${env:NOTIFICATION_EMAIL}\n\n\n  alerts:\n    stages: # Optionally - select which stages to deploy alarms to\n      - production\n      - staging\n\n    dashboards: true\n\n    topics:\n      ok:\n        topic: ${self:service}-${opt:stage}-alerts-ok\n        notifications: ${self:custom.notifications}\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications: ${self:custom.notifications}\n      insufficientData:\n        topic: ${self:service}-${opt:stage}-alerts-insufficientData\n        notifications: ${self:custom.notifications}\n\n    definitions:  # these defaults are merged with your definitions\n      functionErrors:\n        period: 600\n      functionInvocations:\n        threshold: 10\n        period: 600\n      customAlarm:\n        description: 'My custom alarm'\n        namespace: 'AWS/Lambda'\n        metric: duration\n        threshold: 200\n        statistic: Average\n        period: 300\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n    global:\n      - functionThrottles\n      - functionErrors\n    function:\n      - functionInvocations\n      - functionDuration\n\nplugins:\n  - serverless-plugin-aws-alerts\n\nfunctions:\n  foo:\n    handler: foo.handler\n    alarms: # merged with function alarms\n      - customAlarm\n      - name: fooAlarm\n        namespace: 'AWS/Lambda'\n        metric: errors # define custom metrics here\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n    events:\n      - http:\n          path: success\n          method: get\n\n  error:\n    handler: error.handler\n    alarms:\n      - customAlarm\n      - name: bunyanErrors\n        namespace: 'AWS/Lambda'\n        metric: BunyanErrors\n        threshold: 0\n        statistic: Sum\n        period: 60\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n        pattern: '{$.level > 40}'\n    events:\n      - http:\n          path: error\n          method: get\n\n  slow:\n    handler: slow.handler\n    alarms:\n      - customAlarm\n    events:\n      - http:\n          path: slow\n          method: get\n"]},{"id":147949005,"files":["service: contacts-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-west-2\n\nfunctions:\n  - '${file(src/handlers/contacts/contacts.serverless.yml)}'\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    host: 0.0.0.0 # for docker container hosting\n","\n# handler paths are relative to the root serverless.yml file that this is being merged into\n# they are also compiled by babel into a 'dist' folder at the root\nlist:\n  handler: src/handlers/contacts/list.handler\n  events:\n    - http: get /contacts\nget:\n  handler: src/handlers/contacts/get.handler\n  events:\n    - http: get /contact/{id}\nadd:\n  handler: src/handlers/contacts/add.handler\n  events:\n    - http: post /contact\nupdate:\n  handler: src/handlers/contacts/update.handler\n  events:\n    - http: put /contact/{id}\ndelete:\n  handler: src/handlers/contacts/delete.handler\n  events:\n    - http: delete /contact/{id}"]},{"id":129187816,"files":["\nservice: test-global-table-creation\nframeworkVersion: '>=1.1.0 <2.0.0'\nplugins:\n  - serverless-create-global-dynamodb-table\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  stage: ${opt:stage, 'dev'}\n  tracing: true\n  deploymentBucket:\n    name: aws-deployment-packages-dev-us-east-1\n\ncustom:\n  globalTables:\n    regions:\n      - us-east-2\n    createStack: true\n\nresources:\n  Resources:\n    TestTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: 'Id'\n            AttributeType: 'S'\n        KeySchema:\n          -\n            AttributeName: 'Id'\n            KeyType: 'HASH'\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        # ProvisionedThroughput:\n        #   ReadCapacityUnits: 5\n        #   WriteCapacityUnits: 5\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TableName: Test-Dynamodb-Table\n        Tags:\n          - Key: scheduler-ddb-thresholdminmax\n            Value: ''\n\n    # WriteCapacityScalableTarget:\n    #   Type: AWS::ApplicationAutoScaling::ScalableTarget\n    #   Properties:\n    #     MaxCapacity: 5\n    #     MinCapacity: 5\n    #     ResourceId:\n    #       Fn::Join:\n    #       - /\n    #       - - table\n    #         - Ref: TestTable\n    #     RoleARN:\n    #       Fn::GetAtt: ScalingRole.Arn\n    #     ScalableDimension: dynamodb:table:WriteCapacityUnits\n    #     ServiceNamespace: dynamodb\n\n    # ReadCapacityScalableTarget:\n    #   Type: AWS::ApplicationAutoScaling::ScalableTarget\n    #   Properties:\n    #     MaxCapacity: 5\n    #     MinCapacity: 5\n    #     ResourceId:\n    #       Fn::Join:\n    #       - /\n    #       - - table\n    #         - Ref: TestTable\n    #     RoleARN:\n    #       Fn::GetAtt: ScalingRole.Arn\n    #     ScalableDimension: dynamodb:table:ReadCapacityUnits\n    #     ServiceNamespace: dynamodb\n\n    # ScalingRole:\n    #   Type: AWS::IAM::Role\n    #   Properties:\n    #     AssumeRolePolicyDocument:\n    #       Version: \"2012-10-17\"\n    #       Statement:\n    #         -\n    #           Effect: \"Allow\"\n    #           Principal:\n    #             Service:\n    #               - application-autoscaling.amazonaws.com\n    #           Action:\n    #             - \"sts:AssumeRole\"\n    #     Path: \"/\"\n    #     Policies:\n    #       -\n    #         PolicyName: \"root\"\n    #         PolicyDocument:\n    #           Version: \"2012-10-17\"\n    #           Statement:\n    #             -\n    #               Effect: \"Allow\"\n    #               Action:\n    #                 - \"dynamodb:DescribeTable\"\n    #                 - \"dynamodb:UpdateTable\"\n    #                 - \"cloudwatch:PutMetricAlarm\"\n    #                 - \"cloudwatch:DescribeAlarms\"\n    #                 - \"cloudwatch:GetMetricStatistics\"\n    #                 - \"cloudwatch:SetAlarmState\"\n    #                 - \"cloudwatch:DeleteAlarms\"\n    #               Resource: \"*\"\n\n    # WriteScalingPolicy:\n    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    #   Properties:\n    #     PolicyName: WriteAutoScalingPolicy\n    #     PolicyType: TargetTrackingScaling\n    #     ScalingTargetId:\n    #       Ref: WriteCapacityScalableTarget\n    #     TargetTrackingScalingPolicyConfiguration:\n    #       TargetValue: 50.0\n    #       ScaleInCooldown: 60\n    #       ScaleOutCooldown: 60\n    #       PredefinedMetricSpecification:\n    #         PredefinedMetricType: DynamoDBWriteCapacityUtilization\n\n    # ReadScalingPolicy:\n    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    #   Properties:\n    #     PolicyName: ReadAutoScalingPolicy\n    #     PolicyType: TargetTrackingScaling\n    #     ScalingTargetId:\n    #       Ref: ReadCapacityScalableTarget\n    #     TargetTrackingScalingPolicyConfiguration:\n    #       TargetValue: 50.0\n    #       ScaleInCooldown: 60\n    #       ScaleOutCooldown: 60\n    #       PredefinedMetricSpecification:\n    #         PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n\n  Outputs:\n    TestTableName:\n      Description: The name of Test table\n      Value:\n        Fn::Join:\n          - ''\n          - - Ref: TestTable\n      Export:\n        Name: ${self:service}:${self:provider.stage}:TestTableName\n\n"]},{"id":142867308,"files":["service: school-menu\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-2\n\nfunctions:\n  api:\n    handler: lambda.handler\n    events:\n      - http:\n          method: GET\n          cors: true\n          path: /{proxy+}"]},{"id":192755684,"files":["service:\n  name: scaleway-container\n\nprovider:\n  name: scaleway\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\ncustom:\n  containers:\n    first:\n      directory: my-container\n      # minScale: 1\n      # memoryLimit: 256\n      # maxScale: 2\n      # timeout: 20000\n      # Local environment variables - used only in given function\n      env:\n        local: local\n","service:\n  name: scaleway-golang\n\nprovider:\n  name: scaleway\n  runtime: golang\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    # If handler is at the root of your serverless project\n    handler: \".\"\n    # Local environment variables - used only in given function\n    env:\n      local: local\n\n  mypackage:\n    # if your handler is in a custom package\n    handler: mypackage\n","service:\n  name: scaleway-node10\n\nprovider:\n  name: scaleway\n  runtime: node10\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-node8\n\nprovider:\n  name: scaleway\n  runtime: node8\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-python2\n\nprovider:\n  name: scaleway\n  runtime: python\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-python3\n\nprovider:\n  name: scaleway\n  runtime: python3\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n"]},{"id":208079767,"files":["service:\n  name: kitsune-routing-redis\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n  stage: ${opt:stage}\n  region: ap-south-1\n\n#  vpc:\n#    securityGroupIds:\n#      - sg-02f8ca2ff7284809f\n#    subnetIds:\n#      - subnet-0c590bbc8c3d7d349\n#      - subnet-0cc5bf167967ec726\n\n  endpointType: regional\n  environment: ${file(env.${self:provider.stage}.yml):environment}\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  matcher:\n    handler: bin/matcher\n    memorySize: 128\n    timeout: 6\n    events:\n      - http:\n          path: match\n          method: post\n    tags:\n      name: Kitsune_Routing_Matcher\n      team: KitsuneTeam\n\n  update-tree:\n    handler: bin/update_tree\n    memorySize: 128\n    timeout: 300\n    events:\n      - http:\n          path: update\n          method: post\n    tags:\n      name: Kitsune_Routing_Update_Tree\n      team: KitsuneTeam\n\n  create-and-match:\n    handler: bin/create_and_match\n    memorySize: 128\n    timeout: 300\n    events:\n      - http:\n          path: createAndMatch\n          method: post\n    tags:\n      name: Kitsune_Routing_Create_and_Match\n      team: KitsuneTeam\n\n  create-json:\n    handler: bin/create_json\n    memorySize: 128\n    timeout: 300\n    events:\n    - http:\n        path: createJSON\n        method: post\n    tags:\n      name: Kitsune_Routing_Create_JSON\n      team: KitsuneTeam\n"]},{"id":112726213,"files":["service: serverless-elasticache-vpc-nat\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n  stage: development\n  profile: default\n  environment:\n    REDIS_ENDPOINT:\n      \"Fn::Join\": [\":\", [\"Fn::GetAtt\": [ServerlessElasticacheCluster, RedisEndpoint.Address], \"Fn::GetAtt\": [ServerlessElasticacheCluster, RedisEndpoint.Port]]]\nfunctions:\n  hello:\n    handler: handler.hello\n    vpc:\n      securityGroupIds:\n        - \"Fn::GetAtt\": ServerlessSecurityGroup.GroupId\n      subnetIds:\n        - Ref: ServerlessPrivateSubnetA\n    events:\n      - http:\n          path: \"api/${env:API_PATH, self:custom.api.apiPath}\"\n          method: ${env:API_METHOD, self:custom.api.apiMethod}\n          cors: true\nresources:\n  Resources:\n    ServerlessVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n    ElasticIpLambda:\n      Type: AWS::EC2::EIP\n      Properties:\n        Domain: vpc\n    InternetGatewayLambda:\n      Type: AWS::EC2::InternetGateway\n    VPCGatewayAttachmentLambda:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        InternetGatewayId:\n          Ref: InternetGatewayLambda\n    NatGatewayLambda:\n      Type: AWS::EC2::NatGateway\n      Properties:\n        AllocationId:\n          Fn::GetAtt:\n            - ElasticIpLambda\n            - AllocationId\n        SubnetId:\n          Ref: ServerlessPublicSubnetA\n    ServerlessPrivateSubnetA:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        AvailabilityZone: ${self:provider.region}a\n        CidrBlock: \"10.0.1.0/24\"\n    ServerlessPublicSubnetA:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        AvailabilityZone: ${self:provider.region}a\n        CidrBlock: \"10.0.2.0/24\"\n    DefaultPrivateRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n    DefaultPrivateRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        RouteTableId:\n          Ref: DefaultPrivateRouteTable\n        DestinationCidrBlock: 0.0.0.0/0\n        NatGatewayId:\n          Ref: NatGatewayLambda\n    DefaultPublicRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n    DefaultPublicRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        RouteTableId:\n          Ref: DefaultPublicRouteTable\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: InternetGatewayLambda\n    SubnetRouteTableAssociationLambdaPrivateA:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        SubnetId:\n          Ref: ServerlessPrivateSubnetA\n        RouteTableId:\n          Ref: DefaultPrivateRouteTable\n    SubnetRouteTableAssociationLambdaPublicA:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        SubnetId:\n          Ref: ServerlessPublicSubnetA\n        RouteTableId:\n          Ref: DefaultPublicRouteTable\n    ServerlessSecurityGroup:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: SecurityGroup for Serverless Functions\n        VpcId:\n          Ref: ServerlessVPC\n    ServerlessStorageSecurityGroup:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: Ingress for Redis Cluster\n        VpcId:\n          Ref: ServerlessVPC\n        SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '6379'\n          ToPort: '6379'\n          SourceSecurityGroupId:\n            Ref: ServerlessSecurityGroup\n    ServerlessCacheSubnetGroup:\n      Type: AWS::ElastiCache::SubnetGroup\n      Properties:\n        Description: \"Cache Subnet Group\"\n        SubnetIds:\n        - Ref: ServerlessPrivateSubnetA\n    ServerlessElasticacheCluster:\n      DependsOn: ServerlessStorageSecurityGroup\n      Type: AWS::ElastiCache::CacheCluster\n      Properties:\n        AutoMinorVersionUpgrade: true\n        Engine: redis\n        CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}\n        NumCacheNodes: 1\n        VpcSecurityGroupIds:\n        - \"Fn::GetAtt\": ServerlessStorageSecurityGroup.GroupId\n        CacheSubnetGroupName:\n          Ref: ServerlessCacheSubnetGroup\nplugins:\n  - serverless-webpack\n  - serverless-offline\ncustom:\n  api:\n    apiPath: \"{proxy+}\"\n    apiMethod: \"any\"\n  config:\n    CACHE_INSTANCE_SIZE: cache.t2.micro\n  webpackIncludeModules:  true # enable auto-packing of external modules\n"]},{"id":149945031,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: utd-grades\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# Get environment variables\ncustom:\n  serverless-offline:\n    port: 4000\n  dbConfig: ${file(env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: utd-grades\n  region: us-east-2\n  stage: production\n  stackTags:\n    environment: production\n    project: utd-grades\n  environment:\n    dbName: ${self:custom.dbConfig.dbName}\n    dbUser: ${self:custom.dbConfig.dbUser}\n    dbPass: ${self:custom.dbConfig.dbPass}\n    dbHost: ${self:custom.dbConfig.dbHost}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n\nfunctions:\n  getSection:\n    handler: services/section/get.get\n    events:\n      - http:\n          path: section/{id}\n          method: get \n          request: \n            parameters: \n              paths: \n                id: true\n          cors: true\n  \n  findSection:\n    handler: services/section/find.find\n    events:\n      - http:\n          path: section\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: nlp\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: utd-grades\n  region: us-east-2\n  stage: production\n  stackTags:\n    environment: production\n    project: utd-grades\n\npackage:\n  exclude:\n    - venv/**\n\nfunctions:\n  parser:\n    handler: app.services.parser.find.find\n    events:\n      - http:\n          path: parser\n          method: get\n          cors: true\n\n# Un-comment the following lines\n# once we have external dependencies\n\n# plugins:\n#   - serverless-python-requirements\n\n# custom:\n#   pythonRequirements:\n#     dockerizePip: true\n"]},{"id":135475607,"files":["service: syncService\n\ncustom:\n  myRegion: us-east-1\n  myDDB: Users\n  myPool: my-userpool-name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  UserOnboardingLambda:\n    handler: cognitoToDDB.handler\n    events:\n      - cognitoUserPool:\n          pool: ${self:custom.myPool}\n          trigger: PostConfirmation\n          existing: true\n    role: CustomUserOnboardingRole\n    environment:\n      TABLE_NAME: ${self:custom.myDDB}\n      REGION: ${self:custom.myRegion}\n\nresources:\n  Resources:\n    CustomUserOnboardingRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: CustomUserOnboardingRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: CustomCloudWatchLogsPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n          - PolicyName: CustomUserOnboardingPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - dynamodb:PutItem\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:dynamodb'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'table/${self:custom.myDDB}'\n"]},{"id":92717859,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-aws-iot\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1 # Set your AWS region here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Connect\"\n        - \"iot:Publish\"\n        - \"iot:Subscribe\"\n        - \"iot:Receive\"\n        - \"iot:GetThingShadow\"\n        - \"iot:UpdateThingShadow\"\n      Resource: \"*\"\n\nfunctions:\n  iotPresignedUrl:\n    handler: src/iotPresignedUrl.handler\n    timeout: 30\n    events:\n      - http: OPTIONS /iot-presigned-url\n      - http:\n          method: GET\n          path: /iot-presigned-url\n    environment:\n      IOT_AWS_REGION: 'your-iot-region'\n      IOT_ENDPOINT_HOST: 'your-iot-host'\n      IOT_ACCESS_KEY: 'your-access-key'\n      IOT_SECRET_KEY: 'your-secret-key'\n  notifyDisconnect:\n    handler: src/notifyDisconnect.handler\n    timeout: 30\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'last-will'\"\n    environment:\n      IOT_AWS_REGION: 'your-iot-region'\n      IOT_ENDPOINT_HOST: 'your-iot-host'\n"]},{"id":86108846,"files":["# NOTE: update this with your service name\nservice: serverless-nodejs-starter\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to .env and uncomment\n  # the following line. Also, make sure to not\n  # commit your .env.\n  #\n  #environment:\n  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n"]},{"id":140825256,"files":["service: sls-test\n\nplugins:\n  - serverless-modular\n\nprovider:\n  name: aws\n  runtime: 'nodejs8.10'\n  stage: test\n\nfunctions: ${file(./sm.functions.yml)}\n\ncustom:   \n  smConfig:\n    esVersion: es5","service: sls-test\n\nplugins:\n  - serverless-modular\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: 'nodejs8.10'\n  stage: test\n\nfunctions: ${file(./sm.functions.yml)}\n\ncustom:   \n  customDomain:\n      domainName: 'api.sudofy.com'\n  smConfig:\n    esVersion: es6"]},{"id":117472908,"files":["service: api-with-auth\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}\n    DB: ${self:custom.secrets.DB}\n\nfunctions:\n  verify-token:\n    handler: auth/VerifyToken.auth\n\n  login:\n    handler: auth/AuthHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  register:\n    handler: auth/AuthHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n\n  me:\n    handler: auth/AuthHandler.me\n    events:\n      - http:\n          path: me\n          method: get\n          cors: true\n          authorizer: verify-token\n\n  getUsers:\n    handler: user/UserHandler.getUsers\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":122835814,"files":["service:\n  name: serverless-with-next\n\nframeworkVersion: \">=1.26.1\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-jest-plugin\n  - serverless-domain-manager\n\n# Enable auto-packing of external modules\n# See https://serverless-stack.com/chapters/add-support-for-es6-es7-javascript.html\ncustom:\n  serverless-offline:\n    port: 3000 # We run our SLS endpoints on another port (Next app will run on 3001)\n  webpackIncludeModules: true\n  domains:\n    enabled_development: false\n    url_development: '' # Unused, just avoid SLS warning variable not found\n    enabled_staging: true # TODO Pass this to false if you don't want to use a custom domain (custom domain is currently recommended because it fixes sub routes, but not really if you just wanna play around, see \"Known issues\")\n    url_staging: 'swn.dev.vadorequest.fr'\n    enabled_production: true\n    url_production: 'swn.prod.vadorequest.fr' # TODO change\n  memorySizes: # TODO Check how much is actually needed\n    development: 512 # Unused, just avoid SLS warning variable not found\n    staging: 512\n  customDomain:\n    enabled: ${self:custom.domains.enabled_${self:provider.stage}}\n    domainName: ${self:custom.domains.url_${self:provider.stage}}\n#    basePath: '' # This will be prefixed to all routes\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  timeout: 30 # 30 seconds is the maximal allowed by API Gateway\n  stage: ${opt:stage, 'development'}\n  region: ${opt:region, 'us-east-1'}\n  memorySize: ${self:custom.memorySizes.${self:provider.stage}}\n  environment:\n    NODE_ENV: ${self:provider.stage}\n\n#package:\n#  individually: true\n\nfunctions:\n  server:\n    handler: src/functions/server/server.handler\n    events:\n      - http:\n          method: GET\n          path: /\n      - http:\n          method: GET\n          path: /static/{any+}\n      - http:\n          method: GET\n          path: /_next/{proxy+} # Catch Next specific routes\n      - http:\n          method: ANY\n          path: /{any+} # Catch all unknown routes and redirect to main handler\n\n  status:\n    handler: src/functions/status/status.handler\n    events:\n      - http:\n          method: get\n          path: status\n\n"]},{"id":81650763,"files":["service: users\n\nfunctions:   \n usersCreate:\n   events:   \n     - http: post users/create\n usersCreate:\n   events:\n     - http: delete users/delete\n\nresource:\n","service: serverless-simple-http-endpoint\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n currentTime:\n   handler: handler.endpoint\n   events:\n     - http:\n         path: ping\n         method: get\n","service: aws-node-iot-event\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n log:\n   handler: handler.log\n   events:\n     - iot:\n         sql: \"SELECT * FROM 'mybutton'\"","service: scheduled-cron-example\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n cron:\n   handler: handler.run\n   events:\n     - schedule: rate(1 minute) \n secondCron:\n   handler: handler.run\n   events:\n     - schedule: cron(0/2 * ? * MON-FRI *) \n","service: aws-python-alexa-skill\n\nprovider:\n name: aws\n runtime: python2.7\n\nfunctions:\n luckyNumber:\n   handler: handler.lucky_number\n   events:\n     - alexaSkill\n","service: users\n\nprovider:\n name: aws\n runtime: nodejs4.3\n memorySize: 512\n\nfunctions:\n usersCreate:   \n   handler: index.create\n   events:      \n     - http:\n         path: users/create\n         method: post\n usersDelete:   \n   handler: index.delete\n   events:      \n     - http:\n         path: users/delete\n         method: delete\n\nresource:       \n Resource:\n   usersTable:\n     Type: AWS::DynamoDB::Table\n     Properties:\n       TableName: usersTable\n       AttributeDefinitions:\n         - AttributeName: email\n           AttributeType: S\n       KeySchema:\n         - AttributeName: email\n           KeyType: HASH\n       ProvisionedThroughput:\n         ReadCapacityUnits: 1\n         WriteCapacityUnits: 1\n"]},{"id":159799172,"files":["service: serverless-puppeteer-layers\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  exclude:\n    - chrome-aws-lambda/**\n    - node_modules/puppeteer/.local-chromium/**\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  puppeteer-orchestrator:\n    handler: handler.index\n    timeout: 30\n    memorySize: 2048\n    events:\n      - http:\n          method: GET\n          path: /screenshot\n          contentHandling: CONVERT_TO_BINARY\n    layers:\n      - { Ref: ChromeLambdaLayer }\n\nlayers:\n  chrome:\n    path: layer\n"]},{"id":89996569,"files":["service: serverless-sample\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: 'ap-south-1'\n  memorySize: 128\n  timeout: 10\n  cfLogs: true\n  deploymentBucket:\n    serverSideEncryption: AES256\n  stackTags:\n    environment: dev\n    serviceName: serverless-sample\n  environment:\n    cacheUrl: ${cf:serverless-sample-dev.cacheUrl}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DeleteNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n      Resource: '*'\n  vpc:\n    securityGroupIds:\n      - ${cf:serverless-sample-dev.VPCSecurityGroup}\n      - ${cf:serverless-sample-dev.RedisSecurityGroup}\n    subnetIds:\n      - ${cf:serverless-sample-dev.PrivateSubnetA}\n      - ${cf:serverless-sample-dev.PublicSubnetB}\npackage:\n  exclude:\n    - ./node_modules/**\n    - ./test/**\n    - ./.eslintrc.json\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\nfunctions:\n  getProductData:\n    handler: handler.getProductData\n    events:\n        - http:\n            path: product/data/{id}\n            method: GET\n  saveProductData:\n    handler: handler.saveProductData\n    events:\n        - http:\n            path: product/save\n            method: POST\n\nresources: ${file(./cf-resource.json)}\n"]},{"id":72240875,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-snyk-test # NOTE: update this with your service name\n\nplugins:\n   - serverless-snyk\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-snyk-test # NOTE: update this with your service name\n\nplugins:\n   - serverless-snyk\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\ncustom:\n  snyk:\n    breakOnVuln: false\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello"]},{"id":86390898,"files":["service: beatlemania\n\nprovider:\n  name: azure\n  region: East US\n  runtime: nodejs10.x\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: 53cd0336-4079-4703-b33b-28e6a6bd452a\n  stage: dev\n  # type: premium  # premium azure functions\n\n  #environment: # these will be created as application settings\n    #VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.js\n  #   - include-me-dir/**\n  exclude:\n    # - exclude-me.js\n    # - exclude-me-dir/**\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  sing:\n    handler: handlers/handler.sing\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n\n\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob.printMessage\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue.printMessage\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer.printMessage\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub.printMessage\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n","service: beatlemania\napp: beatlemania\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n\n# you can overwrite defaults here\nregion: us-east-1\n\nfunctions:\n  sing:\n    handler: handlers/handler.sing\n    events:\n      - http:\n          path: sing\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n","service: george # the word \"google\" can't be in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: beatlemania-182023 # your project on google - create this first\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/beatlemania.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  sing:\n    handler: sing\n    events:\n      - http: sing\n\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: paul\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  #ignore_certs: true\n  runtime: nodejs:6\n\nfunctions:\n  sing:\n    handler: handler.sing\n    events:\n      - http: GET sing\n\n# remember to run npm install to download the provider plugin.\nplugins:\n    - serverless-openwhisk\n\n\n"]},{"id":55360643,"files":["service: iopipe-lib-master-acceptance-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-west-2\n  role: ${env:IAM_ROLE}\n\nfunctions:\n  callback:\n    handler: acceptance/handler.callback\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextSuccess:\n    handler: acceptance/handler.succeed\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextFail:\n    handler: acceptance/handler.fail\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextDone:\n    handler: acceptance/handler.done\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":140448016,"files":["service: sheets-automation\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2    \n\nfunctions:\n  generate-next-newsletter:\n    handler: handler.generateNewsletter\n    events:\n      - schedule: cron(0 19 ? 1-10 THU *)\n    environment:\n      googleSheetId: <your-google-sheet-id>\n      mailChimpKey: <your-mailchimp-api-key>\n      mailchimpListId: <your-mailchimp-unique-list-id>\n"]},{"id":133990343,"files":["service: service-name\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-west-2'}\n  stage: ${opt:stage, 'dev'}\n  accountId:\n    Ref: AWS::AccountId\n  tracing: true\n  deploymentBucket:\n    name: deployment-packages-bucket\n\ncustom:\n  test : 1\n  apiKeys:\n    dev:\n    - name: let-aws-set-the-value-for-this-key\n    - name: i-am-proving-a-value-for-the-key\n      value: some-value-for-the-key\n    int:\n    - name: i-am-providing-encrypted-value-for-this-key\n      value:\n        encrypted: some-encrypted-value-for-the-key\n        kmsKeyRegion: us-west-2\n    - name: key-with-usage-plan-name-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n    prod:\n    - name: key-with-usage-plan-detail-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n        description: Description of first plan\n        quota:\n          limit: 1000\n          period: DAY\n        throttle:\n          burstLimit: 100\n          rateLimit: 20\n\npackage:\n  individually: true\n\nplugins:\n  - add-api-key-plugin\n\nfunctions:\n  test-fn:\n    handler: lambda/index.handler\n    role:\n        \"Fn::GetAtt\": [ LambdaExecutionRole, Arn ]\n    description: Function description.\n    memorySize: 1024\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Enable-Debug\n              - X-Trace-Context\n            allowCredentials: false\n\nresources:\n  Resources:\n    LambdaExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n        Policies:\n        - PolicyName: testLambdaPolicy-${self:provider.region}\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n              Resource: \"*\"\n","service: service-name\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-west-2'}\n  stage: ${opt:stage, 'dev'}\n  accountId:\n    Ref: AWS::AccountId\n  tracing: true\n  deploymentBucket:\n    name: deployment-packages-bucket\n\ncustom:\n  test : 1\n  apiKeys:\n    - name: let-aws-set-the-value-for-this-key\n    - name: i-am-proving-a-value-for-the-key\n      value: some-value-for-the-key\n    - name: i-am-providing-encrypted-value-for-this-key\n      value:\n        encrypted: some-encrypted-value-for-the-key\n        kmsKeyRegion: us-west-2\n    - name: key-with-usage-plan-name-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n    - name: key-with-usage-plan-detail-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n        description: Description of first plan\n        quota:\n          limit: 1000\n          period: DAY\n        throttle:\n          burstLimit: 100\n          rateLimit: 20\n\npackage:\n  individually: true\n\nplugins:\n  - add-api-key-plugin\n\nfunctions:\n  test-fn:\n    handler: lambda/index.handler\n    role:\n        \"Fn::GetAtt\": [ LambdaExecutionRole, Arn ]\n    description: Function description.\n    memorySize: 1024\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Enable-Debug\n              - X-Trace-Context\n            allowCredentials: false\n\nresources:\n  Resources:\n    LambdaExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n        Policies:\n        - PolicyName: testLambdaPolicy-${self:provider.region}\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n              Resource: \"*\"\n"]},{"id":63844996,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-first-service\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: todos\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          method: POST\n          path: todos\n          cors: true\n  readAll:\n    handler: handler.readAll\n    events:\n      - http:\n          method: GET\n          path: todos\n          cors: true\n  readOne:\n    handler: handler.readOne\n    events:\n      - http:\n          method: GET\n          path: todos/{id}\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          method: PUT\n          path: todos/{id}\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          method: DELETE\n          path: todos/{id}\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'todos'\n"]},{"id":113140402,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: hello-world-cd\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n"]},{"id":186597250,"files":["service: email\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-south-1\n  apiKeys:\n    - ${env:MY_API_KEY}\n  usagePlan:\n    quota:\n      limit: 50 #The maximum number of requests that can be made in a given time period.\n      offset: 2 #The number of requests subtracted from the given limit in the initial time period.\n      period: MONTH #The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".\n    throttle:\n      burstLimit: 10 #The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity. \n      rateLimit: 10 #The API request steady-state rate limit (average requests per second over an extended period of time)\n\nfunctions:\n  sendEmail:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: sendEmail\n          method: post\n          cors: true\n          private: true\n"]},{"id":76601709,"files":["#      _____                          _               \n#     / ____|                        | |              \n#    | (___   ___ _ ____   _____ _ __| | ___  ___ ___ \n#     \\___ \\ / _ \\ '__\\ \\ / / _ \\ '__| |/ _ \\/ __/ __|\n#     ____) |  __/ |   \\ V /  __/ |  | |  __/\\__ \\__ \\\n#    |_____/ \\___|_|    \\_/ \\___|_|  |_|\\___||___/___/\n#      _____ _               \n#     / ____| |          | |                          \n#    | (___ | | __ _  ___| | __                       \n#     \\___ \\| |/ _` |/ __| |/ /                       \n#     ____) | | (_| | (__|   <                        \n#    |_____/|_|\\__,_|\\___|_|\\_\\                       \n#                               \n#\n#\n# This file is the main config file for your bot.\n# You can always add more config options for more control.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n\nservice: serverless-slack\n\ncustom:\n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n  # The dynamodb table to store OAuth access data\n  slack_table_name: Teams\n\n  # The path used to post Slack events to\n  slack_event_path: slack\n\n  # The path used to install the Slack App\n  slack_install_path: slack\n\n  # The path to redirect to after an install\n  slack_install_redirect: https://slack.com\n\n  # Verification token\n  slack_verification_token: \"xxxxxxxxxxxxx\"            \n  \n  # Space delimited scopes\n  slack_client_scopes: \"bot commands incoming-webhook\"\n  \n  # Client ID - quotes required\n  slack_client_id: \"xxxxxxxxxx.xxxxxxxxxxxx\"\n  \n  # Client Secret - quotes required\n  slack_client_secret: \"xxxxxxxxxxxxxxxxxx\"\n  \n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n  environment:\n    TABLE_NAME: ${self:custom.slack_table_name}\n    CLIENT_ID: ${self:custom.slack_client_id}\n    CLIENT_SECRET: ${self:custom.slack_client_secret}\n    CLIENT_SCOPES: ${self:custom.slack_client_scopes}\n    INSTALL_REDIRECT: ${self:custom.slack_install_redirect}\n    VERIFICATION_TOKEN: ${self:custom.slack_verification_token}\n    ENABLE_LOGGING: ${self:custom.slack_enable_logging}\n\n\nfunctions:\n  slack:\n    handler: src/index.handler\n    events:\n      ## Slash Commands, Events, and Interactive Messages\n      - http:\n          path: ${self:custom.slack_event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      \n      ## OAuth Routes      \n      - http:\n          path: ${self:custom.slack_install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"      \n\n\nresources:\n  Resources:\n    TeamsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.slack_table_name}\n"]},{"id":74924589,"files":["service: ${file(config.json):SERVICE_NAME}\n\nplugins:\n  - serverless-plugin-include-dependencies\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${file(config.json):STAGE}\n  region: ${file(config.json):REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:*\"\n      Resource: ${file(config.json):SENDER_ARN}\n\nfunctions:\n  receive:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n          request:\n            parameters:\n              querystrings:\n                format: true\n"]},{"id":166302607,"files":["tenant: rpidanny\napp: nietzsche\nservice: nietzsche\n\nplugins:\n  - serverless-offline\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n  include:\n    - src/assets/**/*\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  region: eu-west-1\n  versionFunctions: false\n  stage: dev\n  tracing:\n    lambda: true\n    apiGateway: true\n  stackTags:\n    PROJECT: ${self:service}\n    STAGE: ${opt:stage, self:provider.stage}\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-quotes\n    SNS_SCRAP_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-scrap\n    SQS_QUOTES: ${self:service}-${opt:stage, self:provider.stage}-quotes\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - sns:Publish\n        - sns:Subscribe\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:provider.environment.SNS_SCRAP_TOPIC}\" ] ]  }\n    - Effect: Allow\n      Action:\n        - sqs:SendMessage\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:GetQueueUrl\n        - sqs:ListQueues\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:sqs:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:provider.environment.SQS_QUOTES}\" ] ]  }\n\nfunctions:\n  - ${file(functions/dispatchScrappers.yml)}\n  - ${file(functions/scrapQuotes.yml)}\n  - ${file(functions/saveQuotes.yml)}\n  - ${file(functions/tweetQuoteText.yml)}\n  - ${file(functions/tweetQuoteImage.yml)}\n  - ${file(functions/getQuotesByAuthor.yml)}\n  - ${file(functions/getRandomQuote.yml)}\n  - ${file(functions/incrementUsedCounter.yml)}\n  - ${file(functions/decideTweetMode.yml)}\n\nresources:\n  Resources:\n    quotesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: author\n            AttributeType: S\n          - AttributeName: quoteId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: author\n            KeyType: HASH\n          - AttributeName: quoteId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n    pagesSNSTopic:\n      Type: AWS::SNS::Topic\n      Properties: \n        DisplayName: ${self:provider.environment.SNS_SCRAP_TOPIC}\n        TopicName: ${self:provider.environment.SNS_SCRAP_TOPIC}\n    quotesQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        MessageRetentionPeriod: 345600\n        QueueName: ${self:provider.environment.SQS_QUOTES}\n        ReceiveMessageWaitTimeSeconds: 1\n        VisibilityTimeout: 300\n\ncustom:\n  optimize:\n    includePaths: ['src/assets']\n\nstepFunctions:\n  stateMachines:\n    tweetQuote:\n      name: ${self:service}-${opt:stage}-tweetQuoteStateMachine\n      events:\n        - schedule:\n            rate: cron(30 16 * * ? *)\n            enabled: true\n        - schedule:\n            rate: cron(30 07 * * ? *)\n            enabled: true\n        - schedule:\n            rate: cron(15 00 * * ? *)\n            enabled: true\n      definition:\n        Comment: \"Tweets random quote.\"\n        StartAt: GET_RANDOM_QUOTE\n        States:\n          GET_RANDOM_QUOTE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getRandomQuote\n            Retry:\n              - ErrorEquals:\n                - HandledError\n                IntervalSeconds: 5\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - NoQuoteError\n                IntervalSeconds: 5\n                MaxAttempts: 2\n                BackoffRate: 2\n            Next: DECIDE_TWEET_MODE\n          DECIDE_TWEET_MODE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-decideTweetMode\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: TWEET_MODE_CHOICE\n          TWEET_MODE_CHOICE:\n            Type: Choice\n            Choices:\n            - Variable: \"$.mode\"\n              StringEquals: \"text\"\n              Next: TWEET_QUOTE_TEXT\n            - Variable: \"$.mode\"\n              StringEquals: 'image'\n              Next: TWEET_QUOTE_IMAGE\n            Default: TWEET_QUOTE_TEXT\n          TWEET_QUOTE_TEXT:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteText\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: INCREMENT_QUOTE_COUNTER\n          TWEET_QUOTE_IMAGE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteImage\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: INCREMENT_QUOTE_COUNTER\n          INCREMENT_QUOTE_COUNTER:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-incrementUsedCounter\n            Retry:\n              - ErrorEquals:\n                - HandledError\n                IntervalSeconds: 1\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - States.TaskFailed\n                IntervalSeconds: 30\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - States.ALL\n                IntervalSeconds: 5\n                MaxAttempts: 5\n                BackoffRate: 2\n            End: true\n"]},{"id":134405296,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# The `service` block is the name of the service\nservice: serverless-starter\n\nplugins:\n  # - serverless-dynamodb-local #  DYNAMODB plugin\n  # - serverless-offline-scheduler # SCHEDULING plugin\n  - serverless-offline\n\n\n# exclude the code coverage files, examples and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n  - examples/**\n\ncustom:\n    # serverless-offline:\n    #   provider:\n    #     environment: ${file(env.yml)}\n  # dynamodb:\n  #   start:\n  #     port: 8080\n  #     inMemory: true\n  #     migrate: true\n  #   migration:\n  #     dir: migrations\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=1.27.3\"\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage} # set the stage based on what Circle Branch is deploying\n  region: eu-west-2 # default is us-east-1 \n  # environment: ${file(env.yml)} # for dev - serverless-offline, alternatively pass env vals as options\n  # environment:\n    # SERVICE_USER: ${opt:service_user} # pass in your environment variables as options from Circle\n    # SERVICE_SEC: ${opt:service_sec}\n    # SERVICE_URL: https://app.beapplied.com/api/\n  cfLogs: true # enable logging\n  apiKeys:\n    - starter-api-key # https://serverless.com/framework/docs/providers/aws/events/apigateway#setting-api-keys-for-your-rest-api\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # logging permissions\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:DescribeLogStreams\n        - logs:PutLogEvents\n        - logs:CreateSubscriptionFilter\n        - logs:PutSubscriptionFilter\n      Resource: \"arn:aws:logs:${opt:region, self:provider.region}:serverless:log-group:/aws/cognito/*\"\n    # - Effect: Allow\n    #   Action:\n    #     - dynamodb:Query\n    #     - dynamodb:Scan\n    #     - dynamodb:GetItem\n    #     - dynamodb:PutItem\n    #     - dynamodb:UpdateItem\n    #     - dynamodb:DeleteItem\n    #   Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/job-scores\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello:\n    handler: index.hello\n    events:\n     - http:\n         path: /\n         method: get\n         cors: true\n  getEpoch:\n    handler: index.getEpoch\n    timeout: 10 # optional, in seconds, default is 6\n    events:\n     - schedule: # SCHEDULING\n        name: get-epoch-every-minute\n        description: 'get-epoch-every-minute'\n        rate: rate(1 minute) # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#RateExpressions\n        enable: true\n     - http:\n         path: /get-epoch\n         method: get\n         cors: true\n  fkReadability:\n    handler: index.fkReadability\n    events:\n     - http:\n         path: /flesch-kincaid\n         method: post\n         private: true\n         cors: true\n  saveFkReadabilityScore:\n    handler: index.saveFkReadabilityScore\n    events:\n     - http:\n         path: /save-fkscore/{jobId}\n         method: post\n         private: true\n         cors: true\n         request:\n           parameters:\n             paths:\n               jobId: true\n\n# you can add CloudFormation resource templates here\n# resources:\n#   Resources:\n#     JobsScoresDynamoDbTable:\n#       Type: 'AWS::DynamoDB::Table'\n#       DeletionPolicy: Retain\n#       Properties:\n#         AttributeDefinitions:\n#           -\n#             AttributeName: job_id\n#             AttributeType: N\n#           -\n#             AttributeName: score\n#             AttributeType: N\n#         KeySchema:\n#           -\n#             AttributeName: job_id\n#             KeyType: HASH\n#           -\n#             AttributeName: score\n#             KeyType: RANGE\n#         ProvisionedThroughput:\n#           ReadCapacityUnits: 10\n#           WriteCapacityUnits: 10\n#         TableName: job-scores"]},{"id":83125150,"files":["service: YoYo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: us-east-1\n  environment:\n    YOYO_EMAIL: ${opt:YOYO_EMAIL}\n    YOYO_DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SITE_OWNER_EMAIL: ${opt:SITE_OWNER_EMAIL}\n    SENDGRID_API_KEY: ${opt:SENDGRID_API_KEY}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.YOYO_DB_TABLE}\"\n\npackage:\n  include:\n    - handler.js\n    - config.js\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /comments\n          method: post\n          cors: true\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: /comments\n          method: get\n          cors: true\n  get:\n    handler: handler.get\n    events:\n      - http:\n          path: /comments/{id}\n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          path: /comments/{id}\n          method: put\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: ${self:provider.environment.YOYO_DB_TABLE}\n"]},{"id":200002892,"files":["service: aws-secure-websockets\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nframeworkVersion: \">=1.38.0 <2.0.0\"\n\ncustom:\n  # This can be changed to the desired origin\n  # When using lambda proxy integration, you have to manually add the CORS headers to responses...\n  # https://github.com/serverless/serverless/issues/4681\n  corsOrigin: '*'\n  user: damoresa\n  dynamodb:\n    start:\n      port: 8700\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n  serverless-offline:\n    port: 3700\n\n# This article helped me find out how Serverless handles Cloud Formation naming\n# https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md\nprovider:\n  name: aws\n  memorySize: 256\n  runtime: nodejs8.10\n  region: eu-central-1\n  # API GW Websocket specific configuration\n  websocketsApiName: ${self:service}-apigw-websocket-${opt:stage, self:provider.stage}\n  # Custom routes are selected by the value of the action property in the body\n  websocketsApiRouteSelectionExpression: $request.body.action\n  # DynamoDB table name, as composed with parameters from this definition file\n  environment:\n    ENVIRONMENT: ${opt:stage, self:provider.stage}\n    COGNITO_USER_POOL:\n      Ref: CognitoUserPool\n    COGNITO_USER_POOL_CLIENT:\n      Ref: CognitoUserPoolClient\n    CORS_ORIGIN: ${self:custom.corsOrigin}\n    DYNAMODB_SOCKETS_TYPE_GSI: ${self:service}-sockets-type-gsi-${opt:stage, self:provider.stage}\n    DYNAMODB_SOCKETS_TABLE: ${self:service}-sockets-${opt:stage, self:provider.stage}\n    KEYS_URL: !Join ['', ['https://cognito-idp.', '${opt:region, self:provider.region}', '.amazonaws.com/', !Ref CognitoUserPool, '/.well-known/jwks.json']]\n    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', '${opt:region, self:provider.region}', '.amazonaws.com/', '${opt:stage, self:provider.stage}/']]\n  # Define the service IAM permissions\n  iamRoleStatements:\n    # Websocket permissions\n    - Effect: Allow\n      Action:\n        - \"execute-api:ManageConnections\"\n      Resource:\n        - \"arn:aws:execute-api:${opt:region, self:provider.region}:*:**/@connections/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}/index/${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}\"\n\nfunctions:\n  authUser:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_${opt:stage, self:provider.stage}\n    handler: handler.authUser\n    events:\n      - http:\n          path: auth\n          method: post\n          cors:\n            origin: ${self:custom.corsOrigin}\n  authWebsocket:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_websocket_${opt:stage, self:provider.stage}\n    handler: handler.authWebsocket\n    cors:\n      origin: ${self:custom.corsOrigin}\n  defaultSocketHandler:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_default_${opt:stage, self:provider.stage}\n    handler: handler.defaultSocketHandler\n    events:\n      - websocket:\n          route: $default\n  greeting:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_greeting_${opt:stage, self:provider.stage}\n    handler: handler.greeting\n    events:\n      - websocket:\n          route: GREETING\n  handleSocketConnect:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_connect_${opt:stage, self:provider.stage}\n    handler: handler.handleSocketConnect\n    events:\n      - websocket:\n          route: $connect\n          # references the authWebsocket function below, serverless doesn't provide any other\n          # way to perform this as of 01/07/2019\n          authorizer:\n            name: authWebsocket\n            identitySource:\n              - 'route.request.querystring.Authorizer'\n  handleSocketDisconnect:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_disconnect_${opt:stage, self:provider.stage}\n    handler: handler.handleSocketDisconnect\n    events:\n      - websocket:\n          route: $disconnect\n  refreshToken:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_refresh_${opt:stage, self:provider.stage}\n    handler: handler.refreshToken\n    events:\n      - http:\n          path: auth/refresh\n          method: post\n          cors:\n            origin: ${self:custom.corsOrigin}\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        AliasAttributes:\n          - preferred_username\n        MfaConfiguration: OFF\n        UserPoolName: ${self:service}-cognito-${opt:stage, self:provider.stage}\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: False\n            RequireUppercase: True\n    CognitoUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:service}-cognito-client-${opt:stage, self:provider.stage}\n        GenerateSecret: False\n        UserPoolId:\n          Ref: CognitoUserPool\n    SocketsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      # For a production deployment, you'd want to retain your DB\n      # in case of re-deployment or stack removal to avoid data loss.\n      # DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: connectionId\n            AttributeType: S\n          - AttributeName: type\n            AttributeType: S\n        KeySchema:\n          - AttributeName: connectionId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_SOCKETS_TABLE}\n        GlobalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}\n            KeySchema:\n              - AttributeName: type\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n  Outputs:\n    CognitoUserPoolId:\n      Value:\n        Ref: CognitoUserPool\n      Export:\n        Name: ASW-CognitoUserPoolId-${self:provider.stage}\n    CognitoUserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClient\n      Export:\n        Name: ASW-CognitoUserPoolClientId-${self:provider.stage}\n"]},{"id":77892734,"files":["# Adoptable Pet Bot\n\nservice: adoptable-pet-bot\nframeworkVersion: \">=1.8.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n\n# service wide environment variables\n  environment:\n    TWIT_API_KEY: ${file(./env.json):TWIT_API_KEY}\n    TWIT_API_KEY_SECRET: ${file(./env.json):TWIT_API_KEY_SECRET}\n    TWIT_ACCESS_TOKEN: ${file(./env.json):TWIT_ACCESS_TOKEN}\n    TWIT_ACCESS_TOKEN_SECRET: ${file(./env.json):TWIT_ACCESS_TOKEN_SECRET}\n    TWIT_TIMEOUT_MS: ${file(./env.json):TWIT_TIMEOUT_MS}\n    SHELTER_ID: ${file(./env.json):SHELTER_ID}\n    ADOPT_API_KEY: ${file(./env.json):ADOPT_API_KEY}\n    SHELTER_NAME: ${file(./env.json):SHELTER_NAME}\n\nfunctions:\n  tweetPet:\n    handler: handlers/tweetPet.tweetPet\n    description: Tweets Adoptable Pets on a Schedule\n    memorySize: 512 \n    timeout: 10\n    events:\n      - schedule: rate(6 hours)\n"]},{"id":176532971,"files":["name: my-chat-app\nstage: dev\n\nmyChatApp:\n  component: \"@serverless/realtime-app\"\n  inputs:\n    name: my-chat-app\n    description: My Chat App\n    region: us-east-1\n\n    # backend config to be passed to the socket component\n    backend:\n      code: ./backend\n      memory: 512\n      timeout: 10\n      env:\n        dbConnectionsName: ${comp:connectionsTable.name}\n\n    # frontend config to be passed to the website component\n    frontend:\n      code: ./frontend\n      build:\n        dir: ./build\n        command: npm run build\n        envFile: ./src/env.js\n\nconnectionsTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    name: ${name}-connections\n    attributeDefinitions:\n      - AttributeName: 'connectionId'\n        AttributeType: 'S'\n    keySchema:\n      - AttributeName: 'connectionId'\n        KeyType: 'HASH'\n    provisionedThroughput:\n      ReadCapacityUnits: 1\n      WriteCapacityUnits: 1\n"]},{"id":52991635,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: serverless-boilerplate # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  cfLogs: true\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n#    - Effect: Allow\n#      Action:\n#      - dynamodb:*\n#      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n#    - Effect: Allow\n#      Action:\n#      - SNS:*\n#      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\n#    - Effect: Allow\n#      Action:\n#      - KMS:Decrypt\n#      Resource: ${self:custom.kmsSecrets.keyArn}\npackage:\n  individually: true\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n  - serverless-kms-secrets\n  - serverless-plugin-custom-roles\n  - serverless-plugin-split-stacks\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n# Uncomment these if you need to run the service offline for testing\n#    preTestCommands:\n#      - bash .tools/startOffline.sh\n#    postTestCommands:\n#      - bash .tools/stopOffline.sh\n  webpackIncludeModules: true\n#  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}\n\n\n\n#resources:\n#  Resources:\n#    SessionsTable:\n#      Type: AWS::DynamoDB::Table\n#      DeletionPolicy: Delete\n#      Properties:\n#        AttributeDefinitions:\n#          - AttributeName: id\n#            AttributeType: S\n#        KeySchema:\n#          - AttributeName: id\n#            KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 1\n#          WriteCapacityUnits: 1\n#        TableName: ${self:provider.environment.TABLE_NAME}"]},{"id":67726068,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: wire-o # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\ncustom: ${file(./wire-o.yml)}\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: arn:aws:lambda:us-east-1::*:*\n    - Effect: Allow\n      Action:\n        - apigateway:POST\n      Resource: arn:aws:apigateway:us-east-1:*:*\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: dist/app.handler\n    events:\n      - http:\n          path: merge\n          method: POST\n          integration: lambda\n    environment:\n      s3BucketName: ${self:custom.s3BucketName}\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nresources:\n  Resources:\n    mergedPDFs:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3BucketName}\n"]},{"id":96726504,"files":["service: auth0-APIGateway-customAuthorizer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: dev\n  region: ap-northeast-1\n  environment:\n    AUTH0_DOMAIN: ${file(./config.yml):auth0Domain}\n    AUDIENCE: ${file(./config.yml):audience}\n    JWKS_URI: ${file(./config.yml):jwksUri}\n    TOKEN_ISSUER: ${file(./config.yml):tokenIssuer}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n  graphiql:\n    babelOptions:\n      presets: [es2015, es2016, stage-0]\n      plugins: [transform-runtime]  \n\nfunctions:\n  customAuthorizer:\n    handler: handler.auth\n  public:\n    handler: handler.public\n    events:\n      - http:\n          path: public\n          method: get\n          integration: lambda\n          cors: true\n  private:\n    handler: handler.private\n    events:\n      - http:\n          path: private\n          method: get\n          integration: lambda\n          authorizer: customAuthorizer\n          cors: true\n"]},{"id":119206991,"files":["service: serverless-image-rendering\n\ncustom:\n  envName: '${self:provider.stage}'\n  apigwBinary:\n    types:\n      - '*/*'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  timeout: 5 # optional, in seconds, default is 6\n\n  role: ImageRenderingRole\n\n  environment:\n    ENV_NAME: ${self:custom.envName}\n    APP_NAME: serverless-image-rendering\n    BUCKET: YOUR-S3-BUCKET-NAME\n\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\nfunctions:\n  resizeImage:\n    name: ${self:service}-${self:provider.stage}\n    description: real time image resizing\n    handler: handler.resizeImage\n    events:\n      - http:\n          path: resize-image\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n\nresources:\n  Resources:\n    ImageRenderingRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-S3-AND-LOG-ACCESS\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-s3-and-log-access\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"s3:GetObject\"\n                  Resource:\n                    - 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'\n"]},{"id":111685168,"files":["service: alexa-skills-test\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs6.10\nfunctions:\n  hello:\n    handler: handler.hello\nplugins:\n  - serverless-alexa-skills\n\ncustom:\n  alexa:\n#    vendorId: ${env:AMAZON_VENDOR_ID}\n#    clientId: ${env:AMAZON_CLIENT_ID}\n#    clientSecret: ${env:AMAZON_CLIENT_SECRET}\n    skills:\n      - id: ${env:ALEXA_SKILL_ID}\n        manifest:\n          publishingInformation:\n            locales:\n              ja-JP:\n                name: test3\n          apis:\n            custom: {}\n          manifestVersion: '1.0'\n        models:\n          ja-JP:\n            interactionModel:\n              languageModel:\n                invocationName: hello\n                intents:\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n                  - name: HelloWorldIntent\n                    samples:\n                    - hello\n                    - say hello\n                    - hello world\n                    - hello my world\n"]},{"id":149290556,"files":["service: rf-mir-lambda\n\nplugins:\n  - serverless-vault-plugin\n  - serverless-plugin-scripts\n\ncustom:\n  config: ${file(env/${opt:stage}.yml)}\n\n  vault:\n    token: ${env:TOKEN_VAULT}\n    url: \"https://localhost:8200\"\n    secret: ${self:custom.config.SecretVaultPath}\n    ssl_check: false\n  kms:\n    keyId: ${env:KEY_KMS_ID}\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment: ${self:custom.config.environmentVars}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  include:\n    - handler.py\n\n  exclude:\n    - '**/*'\n","service: rf-mir-lambda\n\nplugins:\n  - serverless-vault-plugin\n\ncustom:\n  config: ${file(env/${opt:stage}.yml)}\n\n  vault:\n    token: \"xxxxx\"\n    url: \"https://vault:8200\"\n    secret: \"secret/path\"\n    ssl_check: false\n  kms:\n    keyId: ${env:KEY_KMS_ID}  \n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment:\n    - FOO\n    - BAR\n    - VAR\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  include:\n    - handler.py\n\n  exclude:\n    - '**/*'\n"]},{"id":153585897,"files":["service: pokemon-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 512\n\nfunctions:\n  pokemonFunc:\n    handler: index.handler\n    events:\n      - http:\n          path: pokemon\n          method: get\n      - http:\n          path: pokemon/{id}\n          method: get\n      - http:\n          path: pokemon\n          method: post\n      - http:\n          path: pokemon/{id}\n          method: put\n      - http:\n          path: pokemon/{id}\n          method: delete\n\nplugins:\n  - serverless-offline"]},{"id":84279919,"files":["service: imageUploadDemo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # Provide permissions for this service to manipulate S3.\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::[bucketName]/*\"\n\n# Expose function to public API for POST requests.\nfunctions:\n  requestUploadURL:\n    handler: handler.requestUploadURL\n    events:\n      - http:\n          path: requestUploadURL\n          method: post\n          cors: true\n\n# Give service access to the specific S3 bucket.\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: [bucketName]\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n"]},{"id":117297620,"files":["service: serverless-gitlab-ci # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":82484365,"files":["service: serverless-slackbot\n\ncustom:\n  # debugging output\n  debug: '*'\n\n\n  services:\n    # The dynamodb table to store OAuth access data\n    table_name: slackbot-brain\n\n    # sns dispatch topic name\n    topic_name: dispatcher\n\n\n  nav:\n    # The path used to post Slack events to\n    event_path: callback\n\n    # The path used to install the Slack App\n    install_path: install\n\n    # The path to redirect to after an install\n    install_redirect: https://slack.com\n\n\n  slack:\n    # Verification token\n    verification_token: \"xxxxxxxxxxxxxxx\"\n    \n    # Space delimited scopes\n    client_scopes: \"bot commands\"\n    \n    # Client ID - quotes required\n    client_id: \"xxxxxxxxxxxxxxxxxx\"\n    \n    # Client Secret - quotes required\n    client_secret: \"xxxxxxxxxxxxxxxxxx\"\n\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: serverless\n  versionFunctions: false\n  iamRoleStatements:    \n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - sns:*\n        \nfunctions:\n  callbacks:\n    handler: src/index.handler\n    environment:\n      DEBUG: ${self:custom.debug}\n      TABLE_NAME: ${self:custom.services.table_name}\n      TOPIC_NAME: ${self:custom.services.topic_name}\n      CLIENT_ID: ${self:custom.slack.client_id}\n      CLIENT_SECRET: ${self:custom.slack.client_secret}\n      CLIENT_SCOPES: ${self:custom.slack.client_scopes}\n      INSTALL_REDIRECT: ${self:custom.nav.install_redirect}\n      VERIFICATION_TOKEN: ${self:custom.slack.verification_token}\n    events:\n      - sns: ${self:custom.services.topic_name}\n      - http:\n          path: ${self:custom.nav.event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      - http:\n          path: ${self:custom.nav.install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n\nresources:\n  Resources:\n    dynamodb:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: team_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: team_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.services.table_name}"]},{"id":186086500,"files":["service: ExampleMicroService-api-__SERVICE__\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  __FUNCTION__:\n    handler: index.handler\n    events:\n      - http:\n          path: /__PATH__\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-order\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  Order:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:Query\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      - Effect: Allow\n        Action:\n          - sqs:SendMessage\n        Resource:\n          - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    environment:\n      ordersTable: ${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      ordersQueue: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    events:\n      - http:\n          path: /order\n          method: post\n          cors: true\n      - http:\n          path: /order/{orderid}\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-user-order\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiResources:\n      /user/{userid}:\n        'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-ApiRootUserUseridVar-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  UserOrder:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n    environment:\n      ordersTable: ${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n    events:\n      - http:\n          path: /user/{userid}/orders\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-user\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  User:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Scan\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Users-${self:provider.stage}\n    environment:\n      usersTable: ${self:custom.${self:provider.stage}.Stack}-Users-${self:provider.stage}\n    events:\n      - http:\n          path: /user\n          method: get\n          cors: true\n      - http:\n          path: /user\n          method: post\n          cors: true\n      - http:\n          path: /user/{userid}\n          method: get\n          cors: true\n\nresources:\n  Outputs:\n    ApiRootUser:\n      Value:\n        Ref: ApiGatewayResourceUser\n      Export:\n        Name: ${self:custom.${self:provider.stage}.Stack}-ApiRootUser-${self:provider.stage}\n    ApiRootUserUseridVar:\n      Value:\n        Ref: ApiGatewayResourceUserUseridVar\n      Export:\n        Name: ${self:custom.${self:provider.stage}.Stack}-ApiRootUserUseridVar-${self:provider.stage}\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  # You can uncomment this and it will deploy to a custom website.\n  # Provided you give accurate variables in the custom.prod.ApiHostedZone,ApieSite, and ApiSite.\n  # customDomain:\n  #   domainName: ${self:custom.${self:provider.stage}.ApiSite}\n  #   stage: ${self:provider.stage}\n  #   basePath:\n  #   certificateArn: ${self:custom.${self:provider.stage}.ApiCert}\n  #   createRoute53Record: true\n  #   endpointType: 'edge'\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n    ApiHostedZone: examplesite.us.\n    ApiSite: \"prod.examplesite.us\"\n    ApiCert: \"arn:aws:acm:us-east-1:12345678901:certificate/12345678-b123-a123-c123-abcd1234efgh\"\n    OrdersTableRCU: 1\n    OrdersTableWCU: 1\n    UsersTableRCU: 1\n    UsersTableWCU: 1\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n    ApiHostedZone: examplesite.us.\n    ApiSite: \"dev.examplesite.us\"\n    ApiCert: \"arn:aws:acm:us-east-1:12345678901:certificate/12345678-b123-a123-c123-abcd1234efgh\"\n    OrdersTableRCU: 1\n    OrdersTableWCU: 1\n    UsersTableRCU: 1\n    UsersTableWCU: 1\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\n# This is to activate serverless-plugin-reducer.\npackage:\n  individually: true\n\nfunctions:\n  # API Root Function, for a health check.\n  Root:\n    handler: src/_root/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  # When an order is created, it will place a message in the OrdersQueue to fulfill the order.\n  Orders:\n    handler: src/orders/index.handler\n    environment:\n      ordersQueueUrl: !Ref OrdersQueue\n      ordersTable: !Ref OrdersTable\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:UpdateItem\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      - Effect: Allow\n        Action:\n          - sqs:ReceiveMessage\n          - sqs:DeleteMessage\n          - sqs:GetQueueAttributes\n        Resource:\n          - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - OrdersQueue\n              - Arn\n          batchSize: 1\nresources:\n  # API GW defined so you can export the restApiId, as well as name it.\n  - ${file(resources/apigateway/RestApi.yml)}\n\n  # Two DynamoDB tables\n  - ${file(resources/dynamodb/UsersTable.yml)}\n  - ${file(resources/dynamodb/OrdersTable.yml)}\n\n  # Platform for our two functions to communicate.\n  - ${file(resources/sqs/OrdersQueue.yml)}\n  # Here we are exporting the RestApiID and the RootResourceId to use in other API Endpoints.\n  - Outputs:\n      ApiGWRestApiId:\n        Value:\n          Ref: ApiGatewayRestApi\n        Export:\n          Name: ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n      ApiGWRootResourceId:\n        Value:\n          Fn::GetAtt:\n            - ApiGatewayRestApi\n            - RootResourceId\n        Export:\n          Name: ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\nplugins:\n  # This is for support of #{AWS::Region} when developing ARNs\n  - serverless-pseudo-parameters\n  # This is to provide a iam role per function.\n  - serverless-iam-roles-per-function\n  # Enable this if you want to have a custom domain.  Please be sure to ru serverless create_domain prior to serverless deploy\n  # - serverless-domain-manager\n  # This plugin helps reduce the dependencies for your lambda, speeding uploads and S3 storage.\n  - serverless-plugin-reducer\n"]},{"id":186600472,"files":["service: image-resize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-south-1\n  apiKeys:\n    - ${env:MY_API_KEY}\n  usagePlan:\n    quota:\n      limit: 50 #The maximum number of requests that can be made in a given time period.\n      offset: 2 #The number of requests subtracted from the given limit in the initial time period.\n      period: MONTH #The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".\n    throttle:\n      burstLimit: 10 #The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity. \n      rateLimit: 10 #The API request steady-state rate limit (average requests per second over an extended period of time)\n\n\nfunctions:\n  imageResize:\n    handler: handler.imageResize\n\n    events:\n      - http:\n          path: image/resize\n          method: get\n          cors: true\n          private: true\n\n"]},{"id":144729463,"files":["service: serverless-side-rendering-vue-nuxt\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  api:\n    handler: index.api\n    events:\n      - http: ANY /api\n      - http: ANY /api/{proxy+}\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN}\n    basePath: ''\n    stage: ${self:custom.secrets.NODE_ENV}\n    createRoute53Record: true\n    # endpointType: 'regional'\n    # if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`"]},{"id":127929051,"files":["service: cloudwatch-public-metrics\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    METRIC_NAME: ${opt:metricName, file(./config.yml):METRIC_NAME}\n    METRIC_TITLE: ${opt:metricTitle, file(./config.yml):METRIC_TITLE}\n    METRIC_DURATION: ${opt:metricDuration, file(./config.yml):METRIC_DURATION}\n    METRIC_STATISTIC: ${opt:metricStatistic, file(./config.yml):METRIC_STATISTIC}\n    METRIC_SUFFIX: ${opt:metricSuffix, file(./config.yml):METRIC_SUFFIX}\n    METRIC_DIMENSIONS: ${opt:metricDimensions, file(./config.yml):METRIC_DIMENSIONS}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"cloudwatch:GetMetricStatistics\"\n       Resource: \"*\"\n  usagePlan: ${file('./config.yml'):USAGE_PLAN}\n\npackage:\n  exclude:\n    - assets/\n    - src/\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  main:\n    handler: lambda.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{any+}\n          method: ANY\n"]},{"id":130598860,"files":["service: slack-lunch-club-backend\n\nframeworkVersion: \">=1.27.3 <2.0.0\"\n\nprovider:\n  name: aws\n  region: us-east-1\n  cfLogs: true\n  runtime: nodejs8.10\n  vpc:\n    securityGroupIds:\n      - ${self:custom.globalAws.LambdaSecurityGroup}\n    subnetIds:\n      - ${self:custom.globalAws.PrivateSubnet}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"apigateway:GET\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:getObject\"\n        - \"s3:putObject\"\n      Resource: \"arn:aws:s3:::${self:custom.secrets.DB_BACKUP_BUCKET_NAME}/*\"\n  stage: ${opt:stage}\n  deploymentBucket: ${self:service}-deployment\n  environment:\n    NODE_ENV: ${opt:stage}\n    DOMAIN_NAME: ${self:custom.secrets.DOMAIN_NAME}\n    FRONTEND_DOMAIN_NAME: ${self:custom.secrets.FRONTEND_DOMAIN_NAME}\n    COOKIE_DOMAIN_NAME: ${self:custom.secrets.COOKIE_DOMAIN_NAME}\n    DB_HOST: ${self:custom.secrets.DB_HOST}\n    DB_PASS: ${self:custom.secrets.DB_PASS}\n    DB_USER: ${self:custom.secrets.DB_USER}\n    DB_NAME: ${self:custom.secrets.DB_NAME}\n    DB_BACKUP_BUCKET_NAME: ${self:custom.secrets.DB_BACKUP_BUCKET_NAME}\n    SMTP_HOST: ${self:custom.secrets.SMTP_HOST}\n    SMTP_USER: ${self:custom.secrets.SMTP_USER}\n    SMTP_PASS: ${self:custom.secrets.SMTP_PASS}\n    NOREPLY_EMAIL_ADDRESS: ${self:custom.secrets.NOREPLY_EMAIL_ADDRESS}\n    TEST_EMAILS_ONLY: ${self:custom.secrets.TEST_EMAILS_ONLY}\n    TEST_EMAIL_DOMAIN: ${self:custom.secrets.TEST_EMAIL_DOMAIN}\n    SLACK_CLIENT_ID: ${self:custom.secrets.SLACK_CLIENT_ID}\n    SLACK_CLIENT_SECRET: ${self:custom.secrets.SLACK_CLIENT_SECRET}\n    AUTH_TOKEN_SECRET: ${self:custom.secrets.AUTH_TOKEN_SECRET}\n    APOLLO_ENGINE_API_KEY: ${self:custom.secrets.APOLLO_ENGINE_API_KEY}\n\nplugins: # order matters\n  - serverless-plugin-warmup\n  - \"@keboola/serverless-papertrail-logging\"\n  - serverless-webpack\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-content-encoding\n\npackage:\n  include:\n    - .webpack/node_modules\n\ncustom:\n  warmup:\n    enabled: false # don't warmup by default\n    folderName: \"_warmup\"\n    concurrency: 2\n    timeout: 30\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN_NAME}\n    hostedZoneId: ${self:custom.secrets.HOSTED_ZONE_ID}\n    createRoute53Record: true\n    endpointType: regional\n  papertrail:\n    host: ${self:custom.globalAws.PapertrailHost}\n    port: ${self:custom.globalAws.PapertrailPort}\n  secrets: ${file(./getSecrets.js)}\n  globalAws:\n    PrivateSubnet: ${cf:slack-lunch-club-global-aws.PrivateSubnet}\n    LambdaSecurityGroup: ${cf:slack-lunch-club-global-aws.LambdaSecurityGroup}\n    PapertrailHost: ${cf:slack-lunch-club-global-aws.PapertrailHost}\n    PapertrailPort: ${cf:slack-lunch-club-global-aws.PapertrailPort}\n    HostedZoneName: ${cf:slack-lunch-club-global-aws.HostedZoneName}\n    PrivateHostedZoneId: ${cf:slack-lunch-club-global-aws.PrivateHostedZoneId}\n    PublicHostedZoneId: ${cf:slack-lunch-club-global-aws.PublicHostedZoneId}\n  contentEncoding:\n    minimumCompressionSize: 0\n\nfunctions:\n  express-app:\n    description: \"Authentication and graphQL server.\"\n    handler: index.expressApp\n    memorySize: 3008\n    timeout: 30\n    events:\n      - http: any {proxy+}\n      - http: any /\n    warmup: true\n  match-mailer:\n    description: \"Email every user their weekly match.\"\n    handler: index.matchMailer\n    memorySize: 3008\n    timeout: 300 # 5 min\n    events:\n      - schedule: cron(0 12 ? * sat *) # every saturday at noon (UTC)\n  db-backup:\n    description: \"Backup the database to S3.\"\n    handler: index.dbBackup\n    memorySize: 3008\n    timeout: 300\n    events:\n      - schedule: cron(0 0 ? * * *) # every day at midnight\n  db-restore:\n    description: \"Restore the database from a backup. (must be triggered manually from AWS Console)\"\n    handler: index.dbRestore\n    memorySize: 3008\n    timeout: 300\n  publish-schema:\n    description: \"Publish the GraphQL schema to Apollo engine.\"\n    handler: index.publishSchema\n    memorySize: 3008\n    timeout: 300\n\nresources:\n  Conditions:\n    isProduction:\n      Fn::Equals:\n        - ${opt:stage}\n        - \"production\"\n  Resources: ${file(./resources.yml):Resources}\n","service: slack-lunch-club-frontend\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  # SSL certs can only be approved in us-east-1\n  # http://docs.aws.amazon.com/acm/latest/APIReference/API_RequestCertificate.html\n  region: us-east-1\n  cfLogs: true\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  deploymentBucket: ${self:service}-deployment\n\nplugins:\n  - serverless-s3-deploy\n\ncustom:\n  domainName: ${opt:domainName}\n  assets:\n    auto: true\n    targets:\n      - bucket: ${self:custom.domainName}\n        files:\n          - source: ./build\n            globs: \"**\"\n  globalAws:\n    HostedZoneName: ${cf:slack-lunch-club-global-aws.HostedZoneName}\n    PrivateHostedZoneId: ${cf:slack-lunch-club-global-aws.PrivateHostedZoneId}\n    PublicHostedZoneId: ${cf:slack-lunch-club-global-aws.PublicHostedZoneId}\n    PublicSubnet: ${cf:slack-lunch-club-global-aws.PublicSubnet}\n    PrivateSubnet: ${cf:slack-lunch-club-global-aws.PrivateSubnet}\n    RootSSLCertificate: ${cf:slack-lunch-club-global-aws.RootSSLCertificate}\n    WildcardSSLCertificate: ${cf:slack-lunch-club-global-aws.WildcardSSLCertificate}\n\nresources:\n  Conditions:\n    isProduction:\n      Fn::Equals:\n        - ${opt:stage}\n        - \"production\"\n    isNotProduction:\n      Fn::Not:\n        - Fn::Equals:\n            - ${opt:stage}\n            - \"production\"\n  Resources: ${file(./resources.yml):Resources}\n  Outputs: ${file(./resources.yml):Outputs}\n","service: slack-lunch-club-global\n\nframeworkVersion: \">=1.27.3 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: aws\n  deploymentBucket: ${self:service}-deployment\n\ncustom:\n  secrets: ${file(./getSecrets.js)}\n\nresources:\n  Resources: ${file(./resources.yml):Resources}\n  Outputs: ${file(./resources.yml):Outputs}\n"]},{"id":80246428,"files":["frameworkVersion: '>=1.20.2'\n\nplugins:\n  - environment-variables\n  - remove-storage\n  - serverless-webpack\n  - content-handling\n  - codebox-tools\n  - set-api-host\n\nservice: codebox-npm\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage}\n  region: ${env:CODEBOX_REGION}\n  environment:\n    admins: ${env:CODEBOX_ADMINS}\n    restrictedOrgs: ${env:CODEBOX_RESTRICTED_ORGS}\n    registry: ${env:CODEBOX_REGISTRY}\n    githubUrl: ${env:CODEBOX_GITHUB_URL}\n    githubClientId:  ${env:CODEBOX_GITHUB_CLIENT_ID}\n    githubSecret:  ${env:CODEBOX_GITHUB_SECRET}\n    bucket: ${env:CODEBOX_BUCKET}-${self:provider.stage}\n    region: ${self:provider.region}\n\n    clientId: ${env:CODEBOX_INSIGHTS_CLIENT_ID}\n    secret: ${env:CODEBOX_INSIGHTS_SECRET}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"sns:Publish\"\n      Resource:\n        - \"arn:aws:s3:::${self:provider.environment.bucket}*\"\n        - \"Fn::Join\":\n          - \"\"\n          - - \"arn:aws:sns:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":${self:service}-${opt:stage}-log\"\n\nfunctions:\n  authorizerGithub:\n    handler: authorizerGithub.default\n\n  put:\n    handler: put.default\n    events:\n      - http:\n          path: 'registry/{name}'\n          method: put\n          authorizer: authorizerGithub\n  get:\n    handler: get.default\n    events:\n      - http:\n          path: 'registry/{name}'\n          method: get\n          authorizer: authorizerGithub\n\n  distTagsGet:\n    handler: distTagsGet.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags'\n          method: get\n          authorizer: authorizerGithub\n  distTagsPut:\n    handler: distTagsPut.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags/{tag}'\n          method: put\n          authorizer: authorizerGithub\n  distTagsDelete:\n    handler: distTagsDelete.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags/{tag}'\n          method: delete\n          authorizer: authorizerGithub\n\n  userPut:\n    handler: userPut.default\n    events:\n      - http:\n          path: 'registry/-/user/{id}'\n          method: put\n\n  userDelete:\n    handler: userDelete.default\n    events:\n      - http:\n          path: 'registry/-/user/token/{token}'\n          method: delete\n          authorizer: authorizerGithub\n\n  whoamiGet:\n    handler: whoamiGet.default\n    events:\n      - http:\n          path: 'registry/-/whoami'\n          method: get\n          authorizer: authorizerGithub\n\n  tarGet:\n    handler: tarGet.default\n    events:\n      - http:\n          integration: lambda\n          authorizer: authorizerGithub\n          path: 'registry/{name}/-/{tar}'\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n          request:\n            template:\n              application/json: >\n                {\n                  \"name\": \"$input.params('name')\",\n                  \"tar\": \"$input.params('tar')\"\n                }\n\nresources:\n  Resources:\n    PackageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: Private\n        BucketName: ${self:provider.environment.bucket}\n    PackageStoragePolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      DependsOn: \"PackageStorage\"\n      Properties:\n        Bucket:\n          Ref: \"PackageStorage\"\n        PolicyDocument:\n          Statement:\n            - Sid: DenyIncorrectEncryptionHeader\n              Effect: Deny\n              Principal: \"*\"\n              Action: \"s3:PutObject\"\n              Resource: \"arn:aws:s3:::${self:provider.environment.bucket}/*\"\n              Condition:\n               StringNotEquals:\n                 \"s3:x-amz-server-side-encryption\": AES256\n            - Sid: DenyUnEncryptedObjectUploads\n              Effect: Deny\n              Principal: \"*\"\n              Action: \"s3:PutObject\"\n              Resource: \"arn:aws:s3:::${self:provider.environment.bucket}/*\"\n              Condition:\n                \"Null\":\n                 \"s3:x-amz-server-side-encryption\": true\n\ncustom:\n  webpackIncludeModules: true\n"]},{"id":108401424,"files":["service: my-service\n\nprovider:\n  name: aws\n  runtime: python2.7 # StackStorm runners are based on Python 2\n\nfunctions:\n  get_issue:\n    stackstorm: # `stackstorm` object replaces `handler`. The rest is the same.\n      action: github.get_issue\n      input:\n        user: \"{{ input.pathParameters.user }}\"\n        repo: \"{{ input.pathParameters.repo }}\"\n        issue_id: \"{{ input.pathParameters.issue_id }}\"\n      output:\n        statusCode: 200\n        body: \"{{ output }}\"\n    events:\n      - http:\n          method: GET\n          path: issues/{user}/{repo}/{issue_id}\n\ncustom:\n  stackstorm:\n    indexRoot: http://localhost:45032/v1/\n    st2common_pkg: /dist/st2/st2common\n    python_runner_pkg: /dist/st2/contrib/runners/python_runner\n    buildImage: slstest\n    runImage: slstest\n\nplugins:\n  - ../../../../index.js\n","service: my_service\n\nprovider:\n  name: aws\n  runtime: python2.7 # StackStorm runners are based on Python 2\n\nfunctions:\n  get_issue:\n    stackstorm: # `stackstorm` object replaces `handler`. The rest is the same.\n      action: github.get_issue\n      input:\n        user: \"{{ input.pathParameters.user }}\"\n        repo: \"{{ input.pathParameters.repo }}\"\n        issue_id: \"{{ input.pathParameters.issue_id }}\"\n      output:\n        statusCode: 200\n        body: \"{{ output.result.body }}\"\n      config:\n#        Optional: use token for private repos or actions requiring authorization\n#        token: ${env:GITHUB_TOKEN}\n\n    environment:\n      ${file(env.yml):github}\n      # Uncomment the following line to enable debug mode (log level will be set\n      # to debug and more debug related information will be logged)\n      # ST2_DEBUG: \"true\"\n\n    events:\n      - http:\n          method: GET\n          path: issues/{user}/{repo}/{issue_id}\n\n\ncustom:\n  # Optional settings, to adjust defaults to your liking\n  stackstorm:\n    runImage: 'lambci/lambda:python2.7'\n    buildImage: 'lambci/lambda:build-python2.7'\n    indexRoot: 'https://index.stackstorm.org/v1/'\n    st2common_pkg: 'git+https://github.com/stackstorm/st2.git#egg=st2common&subdirectory=st2common'\n    python_runner_pkg: 'git+https://github.com/StackStorm/st2.git#egg=python_runner&subdirectory=contrib/runners/python_runner'\n\nplugins:\n  - serverless-plugin-stackstorm\n"]},{"id":103012131,"files":["service: puppeteer-lambda-starter-kit\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n  # if needed (e.g. upload snapshot)\n  # iamRoleStatements:\n  #  -  Effect: \"Allow\"\n  #     Action:\n  #       - \"s3:PutObject\"\n  #     Resource: \"arn:aws:s3:::<bucket name>/*\"  \n\nfunctions:\n  test-function:\n    handler: index.handler\n    environment:\n      DEBUG: 0\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":116805724,"files":["service: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: us-east-1 # Lambda@Edge function must be us-east-1\n\n  environment:\n    WEBSITE_S3_BUCKET_NAME: ${env:WEBSITE_S3_BUCKET_NAME, 'sls-static-basic'}\n\nplugins:\n  - serverless-plugin-cloudfront-lambda-edge\n  - serverless-s3-sync\n\ncustom:\n  s3Sync:\n    - bucketName: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n      localDir: src\n\npackage:\n  exclude:\n    - src/*\n    - test/*\n    - package.json\n    - README.md\n\nfunctions:\n  basicAuth:\n    name: '${self:provider.environment.WEBSITE_S3_BUCKET_NAME}-viewer-request'\n    handler: handler.basicAuth\n    memorySize: 128\n    timeout: 1\n    lambdaAtEdge:\n      distribution: WebsiteDistribution\n      eventType: 'viewer-request'\n\nresources:\n  Resources:\n    WebsiteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n        AccessControl: Private\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    WebsiteBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: { Ref: WebsiteBucket }\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:GetObject\"\n              Effect: Allow\n              Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { Ref : WebsiteBucket }, \"/*\" ] ]  }\n              Principal:\n                AWS: { \"Fn::Join\" : [\" \", [\"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity\", { Ref: WebsiteOriginAccessIdentity } ] ] }\n    WebsiteOriginAccessIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: \"CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}\"\n    WebsiteDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          DefaultCacheBehavior:\n            AllowedMethods: [ \"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\" ]\n            CachedMethods:  [ \"GET\", \"HEAD\", \"OPTIONS\" ]\n            TargetOriginId: WebsiteBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            DefaultTTL: 0\n            MaxTTL: 0\n            MinTTL: 0\n            Compress: true\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: 'all'\n          CustomErrorResponses:\n            -\n              ErrorCode: '403'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '404'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '500'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '502'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '503'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '504'\n              ErrorCachingMinTTL: 1\n          DefaultRootObject: 'index.html'\n          Enabled: true\n          PriceClass: 'PriceClass_100'\n          HttpVersion: 'http2'\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n          Origins:\n            -\n              Id: 'WebsiteBucketOrigin'\n              DomainName: { 'Fn::GetAtt': [ WebsiteBucket, DomainName ] }\n              S3OriginConfig:\n                OriginAccessIdentity: { \"Fn::Join\" : [\"\", [\"origin-access-identity/cloudfront/\", { Ref: WebsiteOriginAccessIdentity } ] ]  }\n  Outputs:\n    WebsiteURL:\n      Value: { \"Fn::Join\" : [\"\", [\"https://\", { \"Fn::GetAtt\" : [ WebsiteDistribution, DomainName ] } ] ] }\n      Description: \"URL for website via CloudFront\"\n"]},{"id":134096392,"files":["service: serverless-graphql-rest-api\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  stage: ${env:SLS_STAGE, opt:stage, self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: \"${self:custom.stage}.users\"\n            sources: [dynamodb/seed-data/users.json]\n          - table: \"${self:custom.stage}.companies\"\n            sources: [dynamodb/seed-data/companies.json]\n          - table: \"${self:custom.stage}.positions\"\n            sources: [dynamodb/seed-data/positions.json]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  role: defaultRole\n  stage: dev\n  environment:\n    STAGE: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  \n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n\n\nresources:\n  Resources: ${file(./serverless-dynamic.js):resources}\n"]},{"id":168457489,"files":["service: spm\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: spm.wdsm.io\n    basePath: ''\n    certificateName: '*.wdsm.io'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  environment:\n    S3: ${self:service}-storage-${opt:stage, self:provider.stage}\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::${self:provider.environment.S3}/*\"\n\nfunctions:\n  auth:\n    handler: src/auth.authorize\n  index:\n    handler: src/home.handler\n    events:\n      - http:\n          path: /\n          method: get\n\n  verify:\n    handler: src/verify.handler\n    events:\n      - http:\n          path: /verify\n          method: get\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\n  sync:\n    handler: src/sync.handler\n    events:\n      - http:\n          path: /sync\n          method: ANY\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\n  batch:\n    handler: src/batch.handler\n    events:\n      - http:\n          path: /batch\n          method: ANY\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    SPMDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: token\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: token\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":121181914,"files":["service: owl-graphql\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  logRetentionInDays: 3\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n    STAGE: ${opt:stage, self:provider.stage}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  serverless-offline:\n    port: 4000\n  webpackIncludeModules: true\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  playground:\n    handler: src/handler.playgroundHandler\n    events:\n    - http:\n        path: playground\n        method: get\n        cors: true\n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n"]},{"id":80318005,"files":["service: lumo-example\n\ncustom:\n  cljsCompiler: lumo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  example:\n    cljs: lumo-example.core/example\n\npackage:\n  exclude:\n    - node_modules/.yarn*\n\nplugins:\n  - serverless-cljs-plugin\n"]},{"id":143485570,"files":["service: notes-app-mono-database\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-mono-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    NotesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        # Generate a name based on the stage\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: noteId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: noteId\n            KeyType: RANGE\n        # Set the capacity based on the stage\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.tableThroughput}\n          WriteCapacityUnits: ${self:custom.tableThroughput}\n\n  Outputs:\n    NotesTableArn:\n      Value:\n         Fn::GetAtt:\n          - NotesTable\n          - Arn\n      Export:\n        Name: ${self:custom.stage}-NotesTableArn\n","service: notes-app-mono-auth\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        # Generate a name based on the stage\n        UserPoolName: ${self:custom.stage}-mono-user-pool\n        # Set email as an alias\n        UsernameAttributes:\n          - email\n        AutoVerifiedAttributes:\n          - email\n\n    CognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        # Generate an app client name based on the stage\n        ClientName: ${self:custom.stage}-mono-user-pool-client\n        UserPoolId:\n          Ref: CognitoUserPool\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n        GenerateSecret: false\n\n    # The federated identity for our user pool to auth with\n    CognitoIdentityPool:\n      Type: AWS::Cognito::IdentityPool\n      Properties:\n        # Generate a name based on the stage\n        IdentityPoolName: ${self:custom.stage}MonoIdentityPool\n        # Don't allow unathenticated users\n        AllowUnauthenticatedIdentities: false\n        # Link to our User Pool\n        CognitoIdentityProviders:\n          - ClientId:\n              Ref: CognitoUserPoolClient\n            ProviderName:\n              Fn::GetAtt: [ \"CognitoUserPool\", \"ProviderName\" ]\n              \n    # IAM roles\n    CognitoIdentityPoolRoles:\n      Type: AWS::Cognito::IdentityPoolRoleAttachment\n      Properties:\n        IdentityPoolId:\n          Ref: CognitoIdentityPool\n        Roles:\n          authenticated:\n            Fn::GetAtt: [CognitoAuthRole, Arn]\n            \n    # IAM role used for authenticated users\n    CognitoAuthRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: 'Allow'\n              Principal:\n                Federated: 'cognito-identity.amazonaws.com'\n              Action:\n                - 'sts:AssumeRoleWithWebIdentity'\n              Condition:\n                StringEquals:\n                  'cognito-identity.amazonaws.com:aud':\n                    Ref: CognitoIdentityPool\n                'ForAnyValue:StringLike':\n                  'cognito-identity.amazonaws.com:amr': authenticated\n        Policies:\n          - PolicyName: 'CognitoAuthorizedPolicy'\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'mobileanalytics:PutEvents'\n                    - 'cognito-sync:*'\n                    - 'cognito-identity:*'\n                  Resource: '*'\n                \n                # Allow users to invoke our API\n                - Effect: 'Allow'\n                  Action:\n                    - 'execute-api:Invoke'\n                  Resource:\n                    Fn::Join:\n                      - ''\n                      -\n                        - 'arn:aws:execute-api:'\n                        - Ref: AWS::Region\n                        - ':'\n                        - Ref: AWS::AccountId\n                        - ':'\n                        - 'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId\n                        - '/*'\n                \n                # Allow users to upload attachments to their\n                # folder inside our S3 bucket\n                - Effect: 'Allow'\n                  Action:\n                    - 's3:*'\n                  Resource:\n                    - Fn::Join:\n                      - ''\n                      -\n                        - 'Fn::ImportValue': ${self:custom.stage}-AttachmentsBucketArn\n                        - '/private/'\n                        - '$'\n                        - '{cognito-identity.amazonaws.com:sub}/*'\n\n  # Print out the Id of the User Pool and Identity Pool that are created\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: CognitoUserPool\n\n    UserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClient\n\n    IdentityPoolId:\n      Value:\n        Ref: CognitoIdentityPool\n","service: notes-app-mono-uploads\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        # Set the CORS policy\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - PUT\n                - POST\n                - DELETE\n                - HEAD\n              MaxAge: 3000\n\n  # Print out the name of the bucket that is created\n  Outputs:\n    AttachmentsBucketArn:\n      Value:\n         Fn::GetAtt:\n          - S3Bucket\n          - Arn\n      Export:\n        Name: ${self:custom.stage}-AttachmentsBucketArn\n\n    AttachmentsBucketName:\n      Value:\n        Ref: S3Bucket\n      Export:\n        Name: ${self:custom.stage}-AttachmentsBucket\n\n","service: notes-app-mono-notes\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName:\n      ${file(../database/serverless.yml):custom.tableName}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-NotesTableArn\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: handler.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\nresources:\n  Outputs:\n    ApiGatewayRestApiId:\n      Value:\n        Ref: ApiGatewayRestApi\n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiId\n  \n    ApiGatewayRestApiRootResourceId:\n      Value:\n         Fn::GetAtt:\n          - ApiGatewayRestApi\n          - RootResourceId \n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n        \n","service: notes-app-mono-users\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName:\n      ${file(../database/serverless.yml):custom.tableName}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-NotesTableArn\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /users\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /users/{id}\n    # - method: GET request\n    handler: handler.main\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n"]},{"id":61877309,"files":["service: letsmeetup\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  cfLogs: true\n  stage: development\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"arn:aws:dynamodb:*:*:*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nplugins:\n  - serverless-webpack\n\n# neeed to work on these plugins to enable faster development\n# plugins:\n#   - serverless-dynamodb-local\n#   - serverless-offline\n\ncustom: ${file(./config.json)}\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda\n          memorySize: 256\n          timeout: 10\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n  secondLambda:\n    handler: handler.secondLambda\n    events:\n      - sns: slackbot\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"eventId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"eventId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: \"event\"\n"]},{"id":87950021,"files":["service: sls-iopipe-offline-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nplugins:\n  - serverless-plugin-iopipe/index.js\n  - serverless-offline\nfunctions:\n  index:\n    handler: handlers/index.handler\n    events:\n      - http:\n          path: /\n          method: get\ncustom:\n  serverless-offline:\n    port: 4982\n    host: 127.0.0.1\n  iopipeHandlerDir: iopipe_handlers\n","service: example\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  hello:\n    handler: index.handler\ncustom:\n  iopipeNoVerify: true\n","service: sls-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n","service: sls-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  NODE_ENV: ${env:NODE_ENV}\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\ncustom:\n  iopipeQuote: double\n  iopipeExclude: excluded,foo\n  iopipePlaceholder: false\n  extraCustomKey: true\n  iopipeTestInterpolate: ${env:NODE_ENV}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n  multiple:\n    handler: handlers/multiple.handler\n  multipleDifferentHandler:\n    handler: handlers/multiple.differentNameHandler\n  es5:\n    handler: handlers/es5.handler\n  multiple-dots-in-name:\n    handler: handlers/multiple.dots.in.name.handler\n  noModule:\n    handler: handlers/noModule.handler\n  excluded:\n    handler: handlers/excluded.handler\n  syntaxError:\n    handler: handlers/syntaxError.handler\n  es5Named:\n    handler: handlers/es5Named.handler\n  python:\n    handler: python/main.longRunning\n    runtime: python2.7\n  nameMismatch:\n    handler: handlers/differentName.wow\n","service: sls-iopipe\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nplugins:\n  - serverless-plugin-iopipe/index.js\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n","service: sls-iopipe\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  NODE_ENV: ${env:NODE_ENV}\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\ncustom:\n  iopipeQuote: double\n  iopipeExclude: excluded,foo\n  iopipePlaceholder: false\n  extraCustomKey: true\n  iopipeTestInterpolate: ${env:NODE_ENV}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n"]},{"id":79318226,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  graphql:\n    handler: foo/bah.graphql\n\nplugins:\n  - serverless-plugin-graphiql\n"]},{"id":71698545,"files":["service: docker\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n\nplugins:\n  - serverless-plugin-simulate\n\ncustom:\n  simulate:\n    services: docker-compose.yml\n\nfunctions:\n  authorizer:\n    handler: functions/authorizer.handler\n    type: 'TOKEN'\n    identitySource: method.request.header.Authorization\n\n  bffHandler:\n    handler: functions/bff.handler\n    environment:\n      BFF_BACKEND_FUNC: ${self:service}-${opt:stage, self:provider.stage}-bffBackend\n    events:\n      - http:\n          path: bff\n          method: GET\n\n  bffBackend:\n    handler: functions/bff.backend\n\n  error:\n    handler: functions/lambda-proxy.unhandled\n    events:\n      - http:\n          path: error/unhandled\n          method: GET\n\n  unauthorized:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: unauthorized\n          method: GET\n          authorizer: authorizer\n\n  lambda:\n    handler: functions/lambda.success\n    events:\n      - http:\n          integration: lambda\n          path: lambda/{part}\n          method: GET\n          authorizer:\n            name: authorizer\n            type: 'TOKEN'\n            identitySource: method.request.header.Authorization\n      - http:\n          integration: lambda\n          path: lambda\n          method: POST\n          authorizer: authorizer\n      - http:\n          integration: lambda\n          path: lambda\n          method: PUT\n          request:\n            template:\n              application/xml: '{ \"stage\" : \"$context.stage\" }'\n              application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            headers:\n              My-Header: \"'some value'\"\n            template: $input.path('$')\n\n  lambdaError:\n    handler: functions/lambda.error\n    events:\n      - http:\n          path: error/lambda\n          method: GET\n          request:\n            template:\n              application/xml: '{ \"stage\" : \"$context.stage\" }'\n              application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            template: $input.path('$')\n            statusCodes:\n                409:\n                    pattern: '.*\"statusCode\":409,.*'\n                    template:\n                      application/json: $input.path(\"$.errorMessage\") # JSON return object\n                      application/xml: $input.path(\"$.errorMessage\") # XML return object\n                    headers:\n                      My-Header: \"'some value'\"\n\n  lambdaProxy:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: lambda-proxy/{part}\n          method: GET\n          authorizer:\n            name: authorizer\n            type: 'TOKEN'\n            identitySource: method.request.header.Authorization\n      - http:\n          path: lambda-proxy\n          method: POST\n          authorizer: authorizer\n      - http:\n          path: lambda-proxy\n          method: PUT\n\n  lambdaProxyError:\n    handler: functions/lambda-proxy.error\n    events:\n      - http:\n          path: error/lambda-proxy\n          method: GET\n\n  python:\n    handler: functions/handler.endpoint\n    runtime: python2.7\n    events:\n      - http:\n          path: ping\n          method: GET\n\n  anyMethod:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: any/{greedy+}\n          method: ANY\n\n\n  timeout:\n    handler: functions/timeout.handler\n    timeout: 1\n    memorySize: 128\n"]},{"id":158044371,"files":["---\nservice: aws-lambda-edge\n\nframeworkVersion: '^1.33.2'\n\nplugins:\n  - serverless-finch\n  - serverless-plugin-cloudfront-lambda-edge\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_DEFAULT_REGION, 'us-east-1'}\n  stage: ${opt:stage, env:SERVERLESS_STAGE, 'live'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'ssm:GetParameters'\n      Resource:\n        - 'Fn::Join':\n          - ':'\n          - - 'arn:aws:ssm'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'parameter/app/${self:service}/${self:provider.stage}/*'\n\nfunctions:\n  app:\n    handler: handlers/app.${self:provider.stage}Handler\n    lambdaAtEdge:\n      distribution: AppDistribution\n      eventType: origin-request\n\ncustom:\n  organization: ${ssm:/app/${self:service}/organization}\n  hostedZoneId: ${ssm:/app/${self:service}/hostedZoneId}\n  certificateId: ${ssm:/app/${self:service}/certificateId}\n  appDomain: ${ssm:/app/${self:service}/${self:provider.stage}/appDomain}\n  assetDomain: ${ssm:/app/${self:service}/${self:provider.stage}/assetDomain}\n  client:\n    bucketName: ${self:custom.organization}-${self:service}-assets-${self:provider.stage}\n    distributionFolder: .bucket\n    objectHeaders:\n      ALL_OBJECTS:\n        - name: Cache-Control\n          value: 'public, max-age=31536000, immutable'\n\npackage:\n  exclude:\n    - '*/**'\n  include:\n    - 'handlers/*.js'\n    - 'lib/*.js'\n    - 'node_modules/mustache/mustache.js'\n    - 'node_modules/mustache/package.json'\n\nresources:\n  Resources:\n    AppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.organization}-${self:service}-app-${self:provider.stage}\n    AppDistributionIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${self:custom.organization}-${self:service}-app-${self:provider.stage}\n    AppBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: { Ref: 'AppBucket' }\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AppDistributionIdentity'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'AppBucket'\n                    - '/*'\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AppDistributionIdentity'\n              Action:\n                - 's3:ListBucket'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'AppBucket'\n    AppDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Enabled: true\n          PriceClass: PriceClass_100\n          HttpVersion: http2\n          Aliases:\n            - ${self:custom.appDomain}\n          ViewerCertificate:\n            SslSupportMethod: sni-only\n            AcmCertificateArn:\n              'Fn::Join':\n                - ':'\n                - - 'arn:aws:acm'\n                  - Ref: 'AWS::Region'\n                  - Ref: 'AWS::AccountId'\n                  - 'certificate/${self:custom.certificateId}'\n          DefaultCacheBehavior:\n            TargetOriginId: AppBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            MinTTL: 5\n            MaxTTL: 5\n            DefaultTTL: 5\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: all\n          Origins:\n            - Id: AppBucketOrigin\n              DomainName: { 'Fn::GetAtt': [ 'AppBucket', 'DomainName' ] }\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  'Fn::Join':\n                    - ''\n                    - - 'origin-access-identity/cloudfront/'\n                      - Ref: 'AppDistributionIdentity'\n    AppRecord:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.hostedZoneId}\n        RecordSets:\n          - Name: ${self:custom.appDomain}\n            Type: A\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2\n              DNSName: { 'Fn::GetAtt': [ 'AppDistribution', 'DomainName' ] }\n    AssetDistributionIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${self:custom.organization}-${self:service}-asset-${self:provider.stage}\n    AssetBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.client.bucketName}\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AssetDistributionIdentity'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - ${self:custom.client.bucketName}\n                    - '/*'\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AssetDistributionIdentity'\n              Action:\n                - 's3:ListBucket'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - ${self:custom.client.bucketName}\n    AssetDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Enabled: true\n          PriceClass: PriceClass_100\n          HttpVersion: http2\n          DefaultRootObject: index.html\n          Aliases:\n            - ${self:custom.assetDomain}\n          ViewerCertificate:\n            SslSupportMethod: sni-only\n            AcmCertificateArn:\n              'Fn::Join':\n                - ':'\n                - - 'arn:aws:acm'\n                  - Ref: 'AWS::Region'\n                  - Ref: 'AWS::AccountId'\n                  - 'certificate/${self:custom.certificateId}'\n          DefaultCacheBehavior:\n            TargetOriginId: AssetBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            Compress: true\n            MinTTL: 31536000\n            MaxTTL: 31536000\n            DefaultTTL: 31536000\n            ForwardedValues:\n              QueryString: false\n              Cookies:\n                Forward: 'none'\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            CachedMethods:\n              - GET\n              - HEAD\n          Origins:\n            - Id: AssetBucketOrigin\n              DomainName: ${self:custom.client.bucketName}.s3.amazonaws.com\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  'Fn::Join':\n                    - ''\n                    - - 'origin-access-identity/cloudfront/'\n                      - Ref: 'AssetDistributionIdentity'\n    AssetRecord:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.hostedZoneId}\n        RecordSets:\n          - Name: ${self:custom.assetDomain}\n            Type: A\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2\n              DNSName: { 'Fn::GetAtt': [ 'AssetDistribution', 'DomainName' ] }\n"]},{"id":110094684,"files":["service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  private: true # Change to 'false' to disable api-key authorization, for example, for non-production environments.\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:custom.stage}-todos\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"TodosDynamoDbTable\", \"Arn\"] }\n  apiKeys:\n    - ${self:service}-${self:custom.stage}-api-key\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n          private: ${self:custom.private}\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n          private: ${self:custom.private}\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n          private: ${self:custom.private}\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n          private: ${self:custom.private}\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n          private: ${self:custom.private}\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service:\n  name: ${self:custom.service}\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n\ncustom:\n  service: serverless-cognito-userpool\n  stage: ${opt:stage, self:provider.stage}\n\nresources:\n  Resources:\n    UserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        UserPoolName: ${self:custom.service}-${self:custom.stage}-user-pool\n        SmsVerificationMessage: \"Your verification code is {####}.\"\n        AutoVerifiedAttributes:\n          - email\n        MfaConfiguration: \"OFF\"\n        EmailVerificationSubject: \"Your api gateway verification code\"\n        EmailVerificationMessage: \"Your api gateway verification code is {####}\"\n        SmsAuthenticationMessage: \"Your api gateway authentication code is {####}\"\n        Schema:\n          - Name: name\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n          - Name: phone_number\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n        Policies:\n          PasswordPolicy:\n            RequireLowercase: true\n            RequireSymbols: false\n            RequireNumbers: true\n            MinimumLength: 8\n            RequireUppercase: true\n        AdminCreateUserConfig:\n          InviteMessageTemplate:\n            EmailMessage: \"Your Digispeaker username is {username} and temporary password is {####}.\"\n            EmailSubject: \"Your temporary api gateway password\"\n            SMSMessage: \"Your Digispeaker username is {username} and temporary password is {####}.\"\n          UnusedAccountValidityDays: 7\n          AllowAdminCreateUserOnly: false\n\n    # Creates a User Pool Client to be used by the identity pool\n    UserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.service}-${self:custom.stage}-client\n        GenerateSecret: false\n        UserPoolId: \n          Ref: UserPool\n\n    UserPoolGroupAdmin:\n      Type: \"AWS::Cognito::UserPoolGroup\"\n      Properties:\n        GroupName: ${self:custom.service}-${self:custom.stage}-group-admin\n        UserPoolId:\n          Ref: UserPool\n\n    UserPoolGroup01:\n      Type: \"AWS::Cognito::UserPoolGroup\"\n      Properties:\n        GroupName: ${self:custom.service}-${self:custom.stage}-group-1\n        UserPoolId:\n          Ref: UserPool\n\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: UserPool\n    UserPoolIdARN:\n      Value:\n        \"Fn::GetAtt\": [ UserPool, Arn ]\n    UserPoolClientId:\n      Value:\n        Ref: UserPoolClient    \n","service: serverless-authorizer\n\nframeworkVersion: \">=1.24.0 <2.0.0\"\n\nprovider: aws\n\nfunctions:\n  profile:\n    handler: index.profile\n    events:\n      - http:\n          path: profile\n          method: get\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            type: request\n  auth:\n    handler: index.auth\n\n","service: serverless-authorizer\n\nprovider: aws\n\nfunctions:\n  profile:\n    handler: index.profile\n    events:\n      - http:\n          path: profile\n          method: get\n          authorizer: auth\n\n  profile1:\n    handler: index.profile\n    events:\n      - http:\n          path: profile1\n          method: get\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  auth:\n    handler: index.auth\n\n"]},{"id":139373486,"files":["# serverless.yml\n\nservice: cosmic-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    COSMIC_BUCKET: ${env:COSMIC_BUCKET}\n    COSMIC_READ_KEY: ${env:COSMIC_READ_KEY}\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\nplugins:\n  - serverless-offline"]},{"id":55006901,"files":["service: open-api\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    AUTH0_CLIENT_ID: ${file(./src/config/secrets.js):getSecret.AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_SECRET: ${file(./src/config/secrets.js):getSecret.AUTH0_CLIENT_SECRET}\n    AUTH0_NAMESPACE: ${file(./src/config/secrets.js):getSecret.AUTH0_NAMESPACE}\n    GRAPHQL_ENDPOINT_URL: ${file(./src/config/secrets.js):getSecret.GRAPHQL_ENDPOINT_URL}\n    JWT_CERT: ${file(./src/config/secrets.js):getSecret.JWT_CERT}\n    MONGODB_URL: ${file(./src/config/secrets.js):getSecret.MONGODB_URL}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline-scheduler\n  - serverless-offline\n  - serverless-plugin-notification-ojongerius\n  - serverless-plugin-aws-alerts\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  notification: # serverless-plugin-notification-ojongerius\n    webhook:\n      url: ${env:GITTER_WEBHOOK}\n  aws-notifications:\n      - protocol: email\n        endpoint: ${env:SERVERLESS_EMAIL_NOTIFICATIONS}\n  alerts:\n    stages: # Optionally - select which stages to deploy alarms to\n      - prod\n      - stage\n    dashboards: true\n    topics:\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications: ${self:custom.aws-notifications}\n    alarms:\n      - functionThrottles\n      - functionErrors\n      - functionInvocations\n      - functionDuration\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n\n  api:\n    handler: src/handler.apiHandler\n    events:\n    - http:\n        path: api\n        method: get\n        cors: true\n"]}]