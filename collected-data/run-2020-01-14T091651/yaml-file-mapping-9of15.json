[{"id":112167495,"files":["service: gtmGithubHook\nplugins:\n  - serverless-webpack\n  - serverless-kms-secrets\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 2048 # optional, in MB, default is 1024\n  timeout: 60 # optional, in seconds, default is 6\n\n  stage: ${env:GTM_AWS_STAGE, 'dev'}\n  region: ${env:GTM_AWS_REGION}\n\n  environment: ${file(./serverless-aws-environment.yml):environment}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sqs:SendMessage\n      Resource:\n        Fn::GetAtt: [ PendingQueue, Arn ]\n\n    - Effect: Allow\n      Action:\n        - sqs:ReceiveMessage\n        - sqs:DeleteMessage\n      Resource:\n        Fn::GetAtt: [ ResultsQueue, Arn ]\n\n    - Effect: Allow\n      Action:\n        - dynamodb:UpdateItem\n      Resource:\n        Fn::GetAtt: [ EventsTable, Arn ]\n\n    - Effect: Allow\n      Action:\n        - dynamodb:UpdateItem\n      Resource:\n        Fn::GetAtt: [ AgentsTable, Arn ]\n\n\npackage:\n  individually: true\n  exclude:\n    - \".*/**\"\n\nfunctions:\n  gtmGithubHook:\n    handler: dist/src/serverless/gtmGithubHook/gtmGithubHook.listener\n    environment:\n      SQS_PENDING_QUEUE_URL:\n        Ref: PendingQueue\n\n    package:\n      include:\n        - dist/src/serverless/gtmGithubHook/**\n\n    events:\n      - http:\n          path: gtm-github-hook\n          method: post\n          cors: true\n\n  gtmGithubResults:\n    handler: dist/src/serverless/gtmGithubResults/gtmGithubResults.handle\n    environment:\n      SQS_RESULTS_QUEUE_URL:\n        Ref: ResultsQueue\n\n    package:\n      include:\n        - dist/src/serverless/gtmGithubResults/**\n\n    events:\n      - sns: ${env:GTM_SNS_RESULTS_TOPIC}\n\n  gtmGithubMetricCapture:\n    handler: dist/src/serverless/gtmGithubMetricCapture/gtmGithubMetricCapture.handler\n    environment:\n      DYNAMO_DB_TABLE_EVENTS:\n        Ref: EventsTable\n      DYNAMO_DB_TABLE_AGENTS:\n        Ref: AgentsTable\n\n    package:\n      include:\n        - dist/src/serverless/gtmGithubMetricCapture/**\n\n    events:\n      - cloudwatchLog:\n          logGroup: 'gtmAgent'\n          filter: '{$.resultType != \"\"}'\n\nresources:\n  Resources:\n    PendingQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${env:GTM_SQS_PENDING_QUEUE}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 7200\n\n    ResultsQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${env:GTM_SQS_RESULTS_QUEUE}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 7200\n\n    EventsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:GTM_DYNAMO_TABLE_EVENTS}\n        AttributeDefinitions:\n          - AttributeName: ghEventId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: ghEventId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n\n    AgentsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:GTM_DYNAMO_TABLE_AGENTS}\n        AttributeDefinitions:\n          - AttributeName: agentId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: agentId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n\n    GtmS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${env:GTM_S3_DEPENDENCY_BUCKET}\n            # add additional custom bucket configuration here\n\n#    DynamoVpcEndpoint:\n#      Type: AWS::EC2::VPCEndpoint\n#      Properties:\n#        ServiceName: com.amazonaws.${env:GTM_AWS_REGION}.dynamodb\n#        VpcId: ${env:GTM_AWS_VPC_ID}\n\ncustom:\n  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}\n","environment:\n  # encrypted env vars - use npm run sls-encrypt to populate json store for stage\n  GTM_CRYPT_AGENT_AWS_ACCESS_KEY_ID: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_AGENT_AWS_ACCESS_KEY_ID, env:GTM_CRYPT_AGENT_AWS_ACCESS_KEY_ID}\n  GTM_CRYPT_AGENT_AWS_SECRET_ACCESS_KEY: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_AGENT_AWS_SECRET_ACCESS_KEY, env:GTM_CRYPT_AGENT_AWS_SECRET_ACCESS_KEY}\n  GTM_CRYPT_GITHUB_WEBHOOK_SECRET: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_GITHUB_WEBHOOK_SECRET, env:GTM_CRYPT_GITHUB_WEBHOOK_SECRET}\n  GTM_CRYPT_GITHUB_TOKEN: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_GITHUB_TOKEN, env:GTM_CRYPT_GITHUB_TOKEN}\n  GTM_CRYPT_JENKINS_TOKEN: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_JENKINS_TOKEN, env:GTM_CRYPT_JENKINS_TOKEN}\n  GTM_CRYPT_LAUNCHDARKLY_API_TOKEN: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_LAUNCHDARKLY_API_TOKEN, env:GTM_CRYPT_LAUNCHDARKLY_API_TOKEN}\n  GTM_CRYPT_SONAR_GITHUB_OAUTH: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_SONAR_GITHUB_OAUTH, env:GTM_CRYPT_SONAR_GITHUB_OAUTH}\n  GTM_CRYPT_SONAR_LOGIN: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_SONAR_LOGIN, env:GTM_CRYPT_SONAR_LOGIN}\n  GTM_CRYPT_TEAMCITY_PASSCODE: ${self:custom.kmsSecrets.secrets.GTM_CRYPT_TEAMCITY_PASSCODE, env:GTM_CRYPT_TEAMCITY_PASSCODE}\n  # unencrypted env vars - add values to .env\n  GTM_AWS_REGION: ${env:GTM_AWS_REGION, 'ap-southeast-2'}\n  GTM_SQS_PENDING_QUEUE: ${env:GTM_SQS_PENDING_QUEUE, 'gtmPendingQueue'}\n  GTM_SQS_RESULTS_QUEUE: ${env:GTM_SQS_RESULTS_QUEUE, 'gtmResultsQueue'}\n  GTM_SNS_RESULTS_TOPIC: ${env:GTM_SNS_RESULTS_TOPIC, 'gtmResultsSNSTopic'}\n  GTM_GITHUB_HOST:  ${env:GTM_GITHUB_HOST, 'api.github.com'}\n  GTM_GITHUB_DEBUG: ${env:GTM_GITHUB_DEBUG, 'true'}\n  GTM_GITHUB_TIMEOUT: ${env:GTM_GITHUB_TIMEOUT, '5000'}\n  GTM_GITHUB_PATH_PREFIX: ${env:GTM_GITHUB_PATH_PREFIX}\n  GTM_GITHUB_PROXY: ${env:GTM_GITHUB_PROXY}\n  GTM_TASK_CONFIG_FILENAME: ${env:GTM_TASK_CONFIG_FILENAME, '.githubTaskManager.json'}\n  GTM_AGENT_PORT: ${env:GTM_AGENT_PORT, '9091'}\n  GTM_JENKINS_USER: ${env:GTM_JENKINS_USER}\n  GTM_JENKINS_URL: ${env:GTM_JENKINS_URL}\n  GTM_JENKINS_CSRF: ${env:GTM_JENKINS_CSRF}\n  GTM_TEAMCITY_USER: ${env:GTM_TEAMCITY_USER}\n  GTM_TEAMCITY_URL: ${env:GTM_TEAMCITY_URL}\n  GTM_DOCKER_IMAGE_WHITELIST: ${env:GTM_DOCKER_IMAGE_WHITELIST, 'alpine:*,zotoio/*'}\n  GTM_DOCKER_IMAGE_WHITELIST_FILE: ${env:GTM_DOCKER_IMAGE_WHITELIST_FILE, '.dockerImageWhitelistExample'}\n  GTM_DOCKER_COMMANDS_ALLOWED: ${env:GTM_DOCKER_COMMANDS_ALLOWED, 'true'}\n  GTM_DOCKER_ALLOW_PULL: ${env:GTM_DOCKER_ALLOW_PULL, 'true'}\n  GTM_DOCKER_DEFAULT_WORKER_IMAGE: ${env:GTM_DOCKER_DEFAULT_WORKER_IMAGE, 'zotoio/gtm-worker:latest'}\n  IAM_ENABLED: ${env:IAM_ENABLED}\n  GTM_LOGSTASH_HOST: ${env:GTM_LOGSTASH_HOST}\n  GTM_LOGSTASH_PORT: ${env:GTM_LOGSTASH_PORT}\n  GTM_SONAR_HOST_URL: ${env:GTM_SONAR_HOST_URL}\n  GTM_SONAR_GITHUB_ENDPOINT: ${env:GTM_SONAR_GITHUB_ENDPOINT}\n  GTM_SONAR_PROJECTNAME_PREFIX: ${env:GTM_SONAR_PROJECTNAME_PREFIX, 'github::'}\n  GTM_SONAR_ANALYSIS_MODE: ${env:GTM_SONAR_ANALYSIS_MODE, 'preview'}\n  GTM_SONAR_SOURCES: ${env:GTM_SONAR_SOURCES, 'src'}\n  GTM_SONAR_JAVA_BINARIES: ${env:GTM_SONAR_JAVA_BINARIES, 'target'}\n  GTM_SONAR_MODULES: ${env:GTM_SONAR_MODULES}\n  GTM_TASK_CONFIG_DEFAULT_URL: ${env:GTM_TASK_CONFIG_DEFAULT_URL}\n  GTM_TASK_CONFIG_DEFAULT_MESSAGE_PATH: ${env:GTM_TASK_CONFIG_DEFAULT_MESSAGE_PATH}\n  GTM_DYNAMO_TABLE_EVENTS: ${env:GTM_DYNAMO_TABLE_EVENTS, 'GtmEvents'}\n  GTM_DYNAMO_TABLE_AGENTS: ${env:GTM_DYNAMO_TABLE_AGENTS, 'GtmAgents'}\n  GTM_AWS_VPC_ID: ${env:GTM_AWS_VPC_ID}\n  GTM_BASE_URL: ${env:GTM_BASE_URL, 'http://localhost:9091'}\n  GTM_S3_DEPENDENCY_BUCKET: ${env:GTM_S3_DEPENDENCY_BUCKET, 'gtmstorage'}\n  GTM_WELCOME_MESSAGE_ENABLED: ${env:GTM_WELCOME_MESSAGE_ENABLED, 'true'}\n  GTM_REPO_BLACKLIST: ${env:GTM_REPO_BLACKLIST, '.*ignore-repo.*,.*another-repo.*'}\n  GTM_AWS_KMS_KEY_ID: ${env:GTM_AWS_KMS_KEY_ID}"]},{"id":123845999,"files":["service: image-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:provider.stage, 'default'}\n  endpointType: REGIONAL\n  timeout: 30\n  deploymentBucket:\n      name: \"pinster-serverless-deploy-${self:provider.stage}\"\n  package:\n    exclude:\n      - .git/**\n      - .circleci/\n      - lambda/test\n      - node_modules\n      - \"*.md\"\n      - \"*.rb\"\n      - Gemfile\n      - Gemfile.lock\n      - .eslintrc.json\n\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - \"sns:Publish\"\n      Resource:\n        - \"${self:custom.failure_notification_sns_arn}\"\n\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource:\n        - \"arn:aws:s3:::${self:custom.imageHostBucket}/*\"\n        - \"arn:aws:s3:::${self:custom.imageUploadBucket}/*\"\n        \n    - Effect: \"Allow\"\n      Action:\n        - \"states:StartExecution\"\n      Resource:\n        - \"*\"\n\n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource:\n        - \"*\"\n\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - \"arn:aws:lambda:::${self:custom.imageUploadBucket}/*\"\n\ncustom:\n  logRetentionInDays: 14\n  defaultStage: dev\n  customDomain:\n    domainName: images.image-service-${self:provider.stage}.pinster.io\n    basePath: '(none)'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n    certificateName: images.image-service-dev.pinster.io # This is the name of the cert, it covers prod too.\n    endpointType: 'regional'\n  failure_notification_sns: ImageServiceFailureSNS${self:provider.stage}\n  failure_notification_sns_arn:\n    Fn::Join:\n      - \":\"\n      - - arn\n        - aws\n        - sns\n        - Ref: AWS::Region\n        - Ref: AWS::AccountId\n        - ${self:custom.failure_notification_sns}\n  imageHostBucket: image-service-${self:provider.stage}.pinster.io\n  imageHostBucketUrl: https://${self:custom.imageHostBucket}\n  imageUploadBucket: image-service-upload-${self:provider.stage}.pinster.io\n  thumbnailProcessorName: thumbnail-processor-${self:provider.stage}\n  pinsterApiUrl: https://api-${self:provider.stage}.pinster.io\n  imageServiceUrl: https://${self:custom.customDomain.domainName}\n\nfunctions:\n  imageUploader:\n    handler: lambda/lambda.upload\n    events:\n      - http:\n          method: post\n          cors: true\n          path: /\n    memorySize: 1024\n    environment:\n          BUCKET_NAME: ${self:custom.imageUploadBucket}\n          API_PUBLIC_KEY: API_PUBLIC_KEY_CHANGE_ME\n          PINSTER_API_URL: ${self:custom.pinsterApiUrl}\n          IMAGE_SERVICE_URL: ${self:custom.imageServiceUrl}\n\n  startExecution:\n    handler: lambda/lambda.startExecution\n    events:\n      - s3:\n          bucket: ${self:custom.imageUploadBucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: raw/\n    memorySize: 128\n    environment:\n      STATEMACHINE_ARN: \"arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.thumbnailProcessorName}\"\n\n  generateThumbnail:\n    handler: lambda/lambda.generateThumbnail\n    events:\n      - http:\n          method: get\n          path: generate\n          cors: true\n    memorySize: 2048\n    environment:\n          BUCKET: ${self:custom.imageHostBucket}\n          URL: ${self:custom.imageHostBucketUrl}\n\n  moderate:\n    handler: lambda/lambda.moderate\n    memorySize: 128\n\n  moveImage:\n    handler: lambda/lambda.moveImage\n    memorySize: 512\n    environment:\n        BUCKET: ${self:custom.imageHostBucket}\n        PREFIX: \"\"\n        URL: ${self:custom.imageHostBucketUrl}\n\n  notifySuccess:\n    handler: lambda/lambda.notifySuccess\n    memorySize: 128\n    environment:\n      PINSTER_API_URL: ${self:custom.pinsterApiUrl}\n      PRIVATE_KEY: PRIVATE_KEY_CHANGE_ME\n      IMAGE_SERVICE_URL: ${self:custom.imageServiceUrl}\n\n  notifyFailure:\n    handler: lambda/lambda.notifyFailure\n    memorySize: 128\n    environment:\n      PINSTER_API_URL: ${self:custom.pinsterApiUrl}\n      SNS_ARN: ${self:custom.failure_notification_sns_arn}\n      PRIVATE_KEY: PRIVATE_KEY_CHANGE_ME\n      IMAGE_SERVICE_URL: ${self:custom.imageServiceUrl}\n\nstepFunctions:\n  stateMachines:\n    imageUploadHandlerMachine:\n      name: ${self:custom.thumbnailProcessorName}\n      definition:\n        Comment: \"StateMachine for images\"\n        StartAt: Moderate\n        States:\n          Moderate:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-moderate\"\n            Next: MoveImage\n            Catch:\n            - ErrorEquals:\n              - ModerationThresholdExceeded\n              Next: NotifyFailure\n          MoveImage:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-moveImage\"\n            Next: NotifySuccess\n          NotifySuccess:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifySuccess\"\n            End: true\n          NotifyFailure:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifyFailure\"\n            End: true\n\nresources:\n  Resources:\n  # if the bucket name is changed then this resource name must be changed! This is a stupid limitation of serverless\n  # This is handled by serverless.rb\n  # https://github.com/serverless/serverless/issues/2486\n  # https://github.com/serverless/serverless/issues/2749\n    S3BucketImageserviceuploadpinsterio:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:custom.imageUploadBucket}\n        AccessControl: PublicReadWrite\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders: ['*']\n              AllowedMethods: [PUT, POST]\n              AllowedOrigins: ['*']\n              MaxAge: '3600'\n    S3BucketPermissionsImageUpload:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.imageUploadBucket}\n        PolicyDocument:\n          Statement:\n            - Principal: \"*\"\n              Action:\n                - s3:PutObject\n              Effect: Allow\n              Sid: \"AddPerm\"\n              Resource: arn:aws:s3:::${self:custom.imageUploadBucket}/*\n\n    ImageHostBucket:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:custom.imageHostBucket}\n        AccessControl: PublicReadWrite\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders: ['*']\n              AllowedMethods: [GET, PUT, HEAD]\n              AllowedOrigins: ['*']\n              MaxAge: '3600'\n        WebsiteConfiguration:\n                IndexDocument: index.html\n                RoutingRules:\n                - RedirectRule:\n                    HostName: ${self:custom.customDomain.domainName}\n                    HttpRedirectCode: 307\n                    Protocol: https\n                    ReplaceKeyPrefixWith: generate?key=\n                  RoutingRuleCondition:\n                    HttpErrorCodeReturnedEquals: 404\n    S3BucketPermissionsImageHost:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.imageHostBucket}\n        PolicyDocument:\n          Statement:\n            - Principal: \"*\"\n              Action:\n                - s3:GetObject\n                - s3:PutObject\n              Effect: Allow\n              Sid: \"AddPerm\"\n              Resource: arn:aws:s3:::${self:custom.imageHostBucket}/*\n\n    ImageHostCloudfront:\n      Type: AWS::CloudFront::Distribution\n      DependsOn:\n        - ImageHostBucket\n      Properties:\n        DistributionConfig:\n          Aliases:\n            - ${self:custom.imageHostBucket}\n          Comment: \"Image hosting for ${self:provider.stage}\"\n          Origins:\n            - DomainName: \"${self:custom.imageHostBucket}.s3-website-us-east-1.amazonaws.com\"\n              Id: S3Origin\n              CustomOriginConfig:\n                HTTPPort: '80'\n                HTTPSPort: '443'\n                OriginProtocolPolicy: http-only\n          Enabled: true\n          HttpVersion: 'http2'\n          DefaultRootObject: index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n            Compress: true\n            #This prevents CloudFront from caching our 307 redirect when we need to create a thumbnail on the fly.\n            #This also means that any item we want to serve from CloudFront MUST have a Cache-Control header set.\n            #Otherwise CloudFront will not cache anything.\n            DefaultTTL: 0\n            TargetOriginId: S3Origin\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: none\n            ViewerProtocolPolicy: redirect-to-https\n          PriceClass: PriceClass_100\n          ViewerCertificate:\n            AcmCertificateArn: arn:aws:acm:us-east-1:582149114309:certificate/4527b2fc-14a6-417c-a35c-82f5426e516a\n            SslSupportMethod: sni-only\n\n    ImageHostDNSName:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneName: pinster.io.\n        RecordSets:\n        - Name: \"${self:custom.imageHostBucket}\"\n          Type: CNAME\n          TTL: 900\n          ResourceRecords:\n            - Fn::GetAtt:\n              - ImageHostCloudfront\n              - DomainName\n    ImageServiceFailureSNS:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: \"${self:custom.failure_notification_sns}\"\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-domain-manager\n  - serverless-plugin-log-retention\n"]},{"id":208902553,"files":["service: aws-lambda-layer-sharp\nframeworkVersion: '>=1.34.0 <2.0.0'\npublish: false\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: testSls\n  region: eu-west-1\n  apiGateway:\n    minimumCompressionSize: 1024\n    binaryMediaTypes:\n      - '*/*'\nfunctions:\n  test:\n    handler: src/handler.handler\n    events:\n      - http:\n          path: sharp\n          method: get\n    layers:\n      - arn:aws:lambda:eu-west-1:502686283826:layer:sharp:7\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # Name of webpack configuration file\n    # includeModules: true # Node modules configuration for packaging\n    includeModules:\n      forceExclude:\n        - sharp\n    packager: 'yarn' # Packager that will be used to package your external modules\n    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore\n\n  serverless-offline:\n    port: 4000\n    host: 0.0.0.0\n    dontPrintOutput: true\n    useSeparateProcesses: true\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\npackage:\n  individually: true\n","service: aws-lambda-layer-sharp\nframeworkVersion: '>=1.34.0 <2.0.0'\npublish: false\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: testSls\n  region: eu-west-1\n\nlayers:\n  sharp:\n    description: Sharp nodejs imaging library as a layer\n    package:\n      artifact: ./layers/sharp/out/sharp-0.23.0-aws-lambda-linux-x64-node-10.16.3.zip\n    compatibleRuntimes:\n      - nodejs10.x\n    allowedAccounts:\n      - '*'\n"]},{"id":177857633,"files":["frameworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  tableName: ${self:custom.stage}Stats\n  basePath: ${self:custom.stage}-stats\n  customDomain:\n    domainName: api.elizabethwarren.codes\n    basePath: ${self:custom.basePath}\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n\nservice: stats\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n  environment:\n    BASE_PATH: ${self:custom.basePath}\n    STATS_TABLE: ${self:custom.tableName}\n    STATS_CHALLENGE: ${ssm:STATS_CHALLENGE}\n\nplugins:\n  - serverless-domain-manager\n\nfunctions:\n  api:\n    handler: src/handler.router\n    events:\n      - http:\n          path: /\n          method: any\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: any\n          cors: true\n\nresources:\n  Resources:\n    StatsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: key\n            KeyType: HASH\n"]},{"id":197034892,"files":["# ##\n#     _______\n#    /      /,   Serverless Diary\n#   /      //       for Geeks\n#  /______//\n# (______(/      with Serverless\n#\n# ##\n\nservice: ServerlessDiary # NOTE: update this with your service name\n\nplugins:\n    localPath: \"./serverless_plugins\"\n    modules:\n        - custom-opts\n        - packager-plugin\n        - output-plugin\n        - client-deploy\n\ncustom:\n    api:\n        name: Serverless Diary\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    stage: ${opt:stage,'dev'}\n    salt: ${file(./serverless_plugins/utils.js):generateUniqueSalt}\n    versionFunctions: false\n\npackage:\n    individually: true\n    exclude:\n        - \"**/*\"\n\n# Lambda functions\nfunctions:\n    dataSource:\n        name: serverless-diary-datasource\n        handler: index.handler\n        role: RoleLambdaExecution\n        timeout: 300\n        environment:\n            DEBUG: app:error\n            NODE_ENV: production\n            STAGE: ${self:provider.stage}\n            BUCKET: !Ref S3Bucket\n            PASSWD: ${opt:passwd}\n            SALT: ${self:provider.salt}\n        package:\n            artifact: \".serverless/artifact.zip\"\n\n# CloudFormation architecture\nresources:\n    Resources:\n        S3Bucket:\n            Type: AWS::S3::Bucket\n            DeletionPolicy: Retain\n            Properties:\n                AccessControl: \"Private\"\n                WebsiteConfiguration:\n                    IndexDocument: \"index.html\"\n                    ErrorDocument: \"index.html\"\n\n        IAMUser:\n            Type: AWS::IAM::User\n            DependsOn: S3Bucket\n            Properties:\n                Policies:\n                    - PolicyName: AppSyncAccess\n                      PolicyDocument:\n                          Version: \"2012-10-17\"\n                          Statement:\n                              - Effect: \"Allow\"\n                                Action:\n                                    - \"appsync:*\"\n                                Resource: !Join\n                                    - \"\"\n                                    - - !GetAtt AppSyncApi.Arn\n                                      - \"/*\"\n\n        IAMUserKey:\n            Type: AWS::IAM::AccessKey\n            DependsOn: IAMUser\n            Properties:\n                UserName: !Ref IAMUser\n\n        RoleLambdaExecution:\n            Type: \"AWS::IAM::Role\"\n            Properties:\n                AssumeRolePolicyDocument:\n                    Version: \"2012-10-17\"\n                    Statement:\n                        - Effect: \"Allow\"\n                          Principal:\n                              Service:\n                                  - appsync.amazonaws.com\n                                  - lambda.amazonaws.com\n                                  - edgelambda.amazonaws.com\n                          Action:\n                              - \"sts:AssumeRole\"\n                Path: /\n                Policies:\n                    - PolicyName: logsAccess\n                      PolicyDocument:\n                          Version: \"2012-10-17\"\n                          Statement:\n                              - Effect: \"Allow\"\n                                Action:\n                                    - \"logs:*\"\n                                Resource: \"arn:aws:logs:*:*:*\"\n\n        AppSyncApi:\n            Type: \"AWS::AppSync::GraphQLApi\"\n            DependsOn:\n                - S3Bucket\n                - DataSourceLambdaFunction\n            Properties:\n                AuthenticationType: \"AWS_IAM\"\n                Name: ${self:custom.api.name}\n\n        AppSyncSchema:\n            Type: \"AWS::AppSync::GraphQLSchema\"\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                Definition: |\n                    type ConfigField {\n                        name: String!\n                        value: String\n                    }\n\n                    input ConfigFieldInput {\n                        name: String!\n                        value: String\n                    }\n\n                    type File {\n                        id: String!\n                        title: String\n                        size: Int!\n                        lastModified: String!\n                        content: String\n                    }\n\n                    type Mutation {\n                        createFile(title: String, content: String): File\n                        updateFile(id: String!, title: String, content: String): File\n                        deleteFile(id: String!): File\n                        setConfig(fields: [ConfigFieldInput]): [ConfigField]\n                    }\n\n                    type Query {\n                        signIn(passwd: String): String\n                        listFiles: [File]\n                        getContent(id: String): File\n                        getConfig: [ConfigField]\n                    }\n\n                    schema {\n                        query: Query\n                        mutation: Mutation\n                    }\n\n        RoleLambdaService:\n            Type: \"AWS::IAM::Role\"\n            DependsOn: DataSourceLambdaFunction\n            Properties:\n                AssumeRolePolicyDocument:\n                    Version: \"2012-10-17\"\n                    Statement:\n                        - Effect: \"Allow\"\n                          Principal:\n                              Service:\n                                  - appsync.amazonaws.com\n                                  - lambda.amazonaws.com\n                                  - edgelambda.amazonaws.com\n                          Action:\n                              - \"sts:AssumeRole\"\n                Path: /\n                Policies:\n                    - PolicyName: LambdaInvoke\n                      PolicyDocument:\n                          Version: \"2012-10-17\"\n                          Statement:\n                              - Effect: \"Allow\"\n                                Action:\n                                    - \"lambda:InvokeFunction\"\n                                Resource: !GetAtt DataSourceLambdaFunction.Arn\n\n        IAMS3AccessPolicy:\n            Type: \"AWS::IAM::Policy\"\n            DependsOn:\n                - IAMUser\n                - RoleLambdaService\n                - RoleLambdaExecution\n            Properties:\n                Users:\n                    - !Ref IAMUser\n                Roles:\n                    - !Ref RoleLambdaService\n                    - !Ref RoleLambdaExecution\n                PolicyName: S3Access\n                PolicyDocument:\n                    Version: \"2012-10-17\"\n                    Statement:\n                        - Effect: \"Allow\"\n                          Action:\n                              - \"s3:PutObject\"\n                              - \"s3:GetObject\"\n                              - \"s3:ListBucket\"\n                              - \"s3:DeleteObject\"\n                          Resource:\n                              - !GetAtt S3Bucket.Arn\n                              - !Join\n                                - \"\"\n                                - - !GetAtt S3Bucket.Arn\n                                  - \"/*\"\n\n        AppSyncDataSource:\n            Type: \"AWS::AppSync::DataSource\"\n            DependsOn: AppSyncSchema\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                Name: ServerlessDiaryDataSource\n                Description: \"AppSync Data Source for Serverless Diary application\"\n                Type: AWS_LAMBDA\n                ServiceRoleArn: !GetAtt RoleLambdaService.Arn\n                LambdaConfig:\n                    LambdaFunctionArn: !GetAtt DataSourceLambdaFunction.Arn\n\n        # Query resolvers\n        AppSyncQueryResolverSignIn:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Query\n                FieldName: signIn\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"payload\": {\n                                \"action\": \"signIn\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncQueryResolverListFiles:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Query\n                FieldName: listFiles\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"listFiles\"\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncQueryResolverGetContent:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Query\n                FieldName: getContent\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"getContent\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncQueryResolverGetConfig:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Query\n                FieldName: getConfig\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"getConfig\"\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        # Mutation resolvers\n        AppSyncMutateResolverCreateFile:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Mutation\n                FieldName: createFile\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"createFile\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncMutateResolverUpdateFile:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Mutation\n                FieldName: updateFile\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"updateFile\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncMutateResolverDeleteFile:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Mutation\n                FieldName: deleteFile\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"deleteFile\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n        AppSyncMutateResolverSetConfig:\n            Type: \"AWS::AppSync::Resolver\"\n            DependsOn: AppSyncDataSource\n            Properties:\n                ApiId: !GetAtt AppSyncApi.ApiId\n                TypeName: Mutation\n                FieldName: setConfig\n                DataSourceName: !GetAtt AppSyncDataSource.Name\n                RequestMappingTemplate: |\n                    {\n                        \"version\" : \"2017-02-28\",\n                        \"operation\": \"Invoke\",\n                        \"payload\": {\n                            \"headers\": {\n                                \"token\": $util.toJson($context.request.headers.token)\n                            },\n                            \"payload\": {\n                                \"action\": \"setConfig\",\n                                \"data\": $util.toJson($context.args)\n                            }\n                        }\n                    }\n                ResponseMappingTemplate: \"$util.toJson($ctx.result)\"\n\n    Outputs:\n        Bucket:\n            Description: The application bucket\n            Value: !Ref S3Bucket\n\n        User:\n            Description: The dedicated AppSync user\n            Value: !Ref IAMUser\n\n        AccessKeyId:\n            Description: The user access key\n            Value: !Ref IAMUserKey\n\n        SecretAccessKey:\n            Description: The user access secret\n            Value: !GetAtt IAMUserKey.SecretAccessKey\n\n        ApiEndpoint:\n            Description: The URL to the GraphQL Endpoint\n            Value: !GetAtt AppSyncApi.GraphQLUrl\n\n        ApiId:\n            Description: The API ID of the GraphQL API\n            Value: !GetAtt AppSyncApi.ApiId\n\n        LambdaName:\n            Description: The Lambda name used as GQL resolver\n            Value: !Ref DataSourceLambdaFunction\n\n        ClientUrl:\n            Description: Client application url\n            Value: !GetAtt S3Bucket.WebsiteURL\n"]},{"id":162500651,"files":["service: github-actions-badge\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'production'}\n  region: ${opt:region, 'us-west-2'}\n\npackage:\n  exclude:\n    - server.js\n\nfunctions:\n  badge:\n    handler: handler.handle\n    environment:\n      GITHUB_TOKEN: ${file(.env.yml):GITHUB_TOKEN}\n    events:\n      - http:\n          path: badge/{owner}/{repo}\n          method: get\n      - http:\n          path: results/{owner}/{repo}\n          method: get\n"]},{"id":193011433,"files":["service:\n  name: discord-lambda\n#app: your-app-name\n#tenant: your-tenant-name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n  stage: dev\n\npackage:\n  individually: true\n\nfunctions:\n  youtube:\n    handler: src/handler.youtubePlaylistChecker\n    events:\n      - schedule: cron(38 3 * * ? *)"]},{"id":110421054,"files":["service: smsAnnoyer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  versionFunctions: false\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \"SNS:Publish\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  handle:\n    handler: handler.handle\n    timeout: 10\n    events:\n      - schedule:\n          rate: rate(${opt:minutes, '15'} minutes)\n          input:\n            region: ${self:provider.region}\n            recipient: \"+${opt:recipient}\"\n            message: ${opt:message}\n            messagesInput: ${opt:messagesInput}"]},{"id":199523417,"files":["service: mjml\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: prod\n  region: sa-east-1\n\nfunctions:\n  to-html:\n    description: 'MJML to HTML'\n    handler: handler.convert\n"]},{"id":190988356,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: ImageUploaderService\n\n# The `provider` block defines where your service will be deployed\ncustom:\n  bucket: getting-started-lambda-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stackName: imageUploader\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - \"s3:PutObject\"  \n      Resource: \n        - \"arn:aws:s3:::${self:custom.bucket}/*\" \n\n# The `functions` block defines what code to deploy\nfunctions:\n  UploadImage:\n    handler: uploadImage.handler\n    # The `events` block defines how to trigger the uploadImage.handler code\n    events:\n      - http:\n          path: upload\n          method: post\n          cors: true\n    environment:\n      Bucket: ${self:custom.bucket}  \n          \nresources:\n  Resources:\n    StorageBucket:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        BucketName: ${self:custom.bucket}\n    \n \n\n\n"]},{"id":192724181,"files":["service: codeship-chain\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.vars.STAGE}\n  region: ${opt:region, self:custom.vars.REGION}\n  stackName: ${self:custom.vars.NAME}\n  apiName: ${self:custom.vars.NAME}\n  versionFunctions: true\n\nfunctions:\n  codeshipChain:\n    name: ${self:custom.vars.NAME}\n    handler: handler.chain\n    events:\n      - http: ANY /ft-ui/\n\ncustom:\n  vars: ${file(config/serverless.config.json)}\n"]},{"id":192043736,"files":["service: lambda-reports\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: 'us-east-1'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:GetItem\n        - dynamodb:BatchWriteItem\n        - dynamodb:Scan\n      Resource: 'arn:aws:dynamodb:us-east-1:289206222513:table/reports'\n\nfunctions:\n  Report:\n    handler: handler.report\n    events:\n      - http:\n          path: /report\n          method: post\n  GetReports:\n    handler: getReports.handler\n    events:\n      - http:\n          path: /report\n          method: get\n\nresources:\n  Resources:\n    ReportsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: reports\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n"]},{"id":93749854,"files":["service: Lena-bot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n\nfunctions:\n  favorite:\n    handler: handler.favourite\n  rt:\n    handler: handler.rt\n  follow:\n    handler: handler.follow\n\n    events:\n      - schedule: rate(60 minutes)\n"]},{"id":188536730,"files":["plugins:\n  - serverless-offline\n\nservice: slack-notifier\n\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-southeast-2 // Asia Pacific (Sydney)\n  environment:\n    TZ: NZ\n    notifierUrl: https://hooks.slack.com/services/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\n\nfunctions:\n  notifier:\n    handler: handler.notifier\n    events:\n      - http: POST notifier\n  test:\n    handler: handler.test\n    events:\n      - http: POST test\n    \n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n# functions:\n#   hello:\n#     handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":185663556,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: sa-east-1\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":182682875,"files":["service:\n  name: aws-serverless-typescript-template\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: src/handler/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":182492012,"files":["service: elastic-search\nprovider:\n  name: aws\n  cfLogs: true\n  runtime: nodejs8.10\n  profile: ${file(./aws_params.yml):profile}\n  stage: ${file(./aws_params.yml):stage}\n  region: ${file(./aws_params.yml):region}\n  iamRoleStatements:\n\n    ## ES Permissions\n    - Effect: Allow\n      Action:\n        - es:*\n      Resource: \"arn:aws:es:${file(./aws_params.yml):region}:${file(./aws_params.yml):ACCOUNT_ID}:domain/${file(./aws_params.yml):ES_DOMAIN_NAME}/*\"\n\n    ## UpdateUserPoolClient\n    - Effect: Allow\n      Action: 'cognito-idp:UpdateUserPoolClient'\n      Resource: 'arn:aws:cognito-idp:*:*:userpool/*'\n\n    ## ManageUserPoolDomain\n    -\n      Effect: Allow\n      Action: 'cognito-idp:CreateUserPoolDomain'\n      Resource: 'arn:aws:cognito-idp:*:*:userpool/*'\n    -\n      Effect: Allow\n      Action: 'cognito-idp:DeleteUserPoolDomain'\n      Resource: 'arn:aws:cognito-idp:*:*:userpool/*'\n    -\n      Effect: Allow\n      Action: 'cognito-idp:DescribeUserPoolDomain'\n      Resource: '*'\n\n    ## Assume role\n    -\n      Effect: Allow\n      Action: 'sts:AssumeRole'\n      Resource: 'arn:aws:lambda:*:*:function:*'\n\n    ## Invoke Lambda Function\n    -\n      Effect: Allow\n      Action: 'lambda:InvokeFunction'\n      Resource: 'arn:aws:lambda:*:*:function:*'\n\n    ## Update ES Domain Config\n    -\n      Effect: Allow\n      Action: \n        - 'es:UpdateElasticsearchDomainConfig'\n      Resource: 'arn:aws:es:${self:provider.region}:${file(./aws_params.yml):ACCOUNT_ID}:domain/${file(./aws_params.yml):ES_DOMAIN_NAME}'\n\n    -\n      Effect: Allow\n      Action: \n        - \"cognito-idp:DescribeUserPool\"\n        - \"cognito-idp:CreateUserPoolClient\"\n        - \"cognito-idp:DeleteUserPoolClient\"\n        - \"cognito-idp:DescribeUserPoolClient\"\n        - \"cognito-idp:AdminInitiateAuth\"\n        - \"cognito-idp:AdminUserGlobalSignOut\"\n        - \"cognito-idp:ListUserPoolClients\"\n        - \"cognito-identity:DescribeIdentityPool\"\n        - \"cognito-identity:UpdateIdentityPool\"\n        - \"cognito-identity:SetIdentityPoolRoles\"\n        - \"cognito-identity:GetIdentityPoolRoles\"\n        - \"iam:GetRole\"\n        - \"iam:PassRole\"\n        - \"iam:CreateRole\"\n        - \"iam:AttachRolePolicy\"\n        - \"ec2:DescribeVpcs\"\n        - \"cognito-identity:ListIdentityPools\"\n        - \"cognito-idp:ListUserPools\"\n      Resource: '*'\n\n    ## Update ES Domain Config pass role\n    -\n      Effect: Allow\n      Action: \n        - 'iam:PassRole'\n      Resource: 'arn:aws:iam::${file(./aws_params.yml):ACCOUNT_ID}:role/CognitoAccessForAmazonESearch'\n\nfunctions:\n  CFSendResponse:\n    handler: src/cloud-formation/sendResponse.handler\n  CFUserPoolClientSettings:\n    handler: src/cognito/cognitoUserPoolClientSettings.handler\n    DependsOn: \n      - \"CFSendResponseLambdaFunction\"\n      - !Ref ElasticSearchInstance\n\n    environment:\n      CFSendResponse: ${self:service}-${self:provider.stage}-CFSendResponse\n      elasticURL:\n        Fn::GetAtt: [ ElasticSearchInstance , DomainEndpoint ]\n\n  CFUserPoolDomain:\n    handler: src/cognito/cognitoUserPoolDomain.handler\n    DependsOn: \"CFSendResponseLambdaFunction\"\n    environment:\n      CFSendResponse: ${self:service}-${self:provider.stage}-CFSendResponse\n  CFESDomainConfig:\n    handler: src/elastic-search/updateElasticsearchDomainConfig.handler\n    DependsOn: \n      - \"CFSendResponseLambdaFunction\"\n      - !Ref ElasticSearchInstance\n    environment:\n      CFSendResponse: ${self:service}-${self:provider.stage}-CFSendResponse\n      ES_DOMAIN_NAME: ${file(./aws_params.yml):ES_DOMAIN_NAME}\n      elasticURL:\n        Fn::GetAtt: [ ElasticSearchInstance , DomainEndpoint ]\n\n  db_stream_processor:\n    handler: handler.main\n    environment:\n      ES_ASSIGNMENT_INDEX: ${file(./aws_params.yml):ES_ASSIGNMENT_INDEX}\n      elasticRegion: ${self:provider.region}\n      elasticURL:\n        Fn::GetAtt: [ ElasticSearchInstance , DomainEndpoint ]\n\n  test_processor:\n    handler: handler_test.main\n    environment:\n      ES_ASSIGNMENT_INDEX: ${file(./aws_params.yml):ES_ASSIGNMENT_INDEX}\n      elasticRegion: ${self:provider.region}\n      elasticURL:\n        Fn::GetAtt: [ ElasticSearchInstance , DomainEndpoint ]\n    events:\n      - http:\n          path: assignments/push\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    ElasticSearchInstance:\n      Type: AWS::Elasticsearch::Domain\n      Properties:\n        DomainName: ${file(./aws_params.yml):ES_DOMAIN_NAME}\n        # AccessPolicies: JSON object\n        EBSOptions:\n          EBSEnabled: true\n          VolumeType: gp2\n          #within free tier\n          VolumeSize: ${file(./aws_params.yml):ES_INSTANCE_VOLUME_SIZE}\n        ElasticsearchClusterConfig:\n          #T2.Small is within free tier\n          InstanceType: ${file(./aws_params.yml):ES_INSTANCE_TYPE}\n          InstanceCount: 1\n          DedicatedMasterEnabled: false\n          ZoneAwarenessEnabled: false\n        ElasticsearchVersion: ${file(./aws_params.yml):ES_VERSION}\n        # Tags:\n        #   - Resource Tag\n        # VPCOptions: \n        #   VPCOptions\n        AccessPolicies: \n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Federated: !Sub \"cognito-identity.amazonaws.com\"\n              Action: \"es:*\"\n              Resource: !Sub \"arn:aws:es:${file(./aws_params.yml):region}:${file(./aws_params.yml):ACCOUNT_ID}:domain/${file(./aws_params.yml):ES_DOMAIN_NAME}/*\"\n\n    UserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: ${file(./aws_params.yml):UserPoolName}\n        AdminCreateUserConfig:\n          AllowAdminCreateUserOnly: true\n        UsernameAttributes:\n          - email\n        AutoVerifiedAttributes:\n          - email\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 8\n        Schema:\n          - Name: email\n            AttributeDataType: String\n            DeveloperOnlyAttribute: false\n            Mutable: true\n            Required: true\n\n    IdentityPool:\n      Type: AWS::Cognito::IdentityPool\n      Properties:\n        IdentityPoolName: ${file(./aws_params.yml):IdentityPoolName}\n        AllowUnauthenticatedIdentities: false\n        # CognitoIdentityProviders:\n        #   - ClientId: !Ref UserPoolClientFirst\n        #     ProviderName: \"\"\n\n    AuthenticatedPolicy:\n      Type: AWS::IAM::ManagedPolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action:\n                - \"es:ESHttp*\"\n              Resource:\n                - \"*\"\n                \n    AuthenticatedRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Action: \"sts:AssumeRoleWithWebIdentity\"\n              Principal:\n                Federated: cognito-identity.amazonaws.com\n              Condition:\n                StringEquals:\n                  \"cognito-identity.amazonaws.com:aud\": !Ref IdentityPool\n                ForAnyValue:StringLike:\n                  \"cognito-identity.amazonaws.com:amr\": authenticated\n        ManagedPolicyArns: \n          - !Ref AuthenticatedPolicy\n    \n    CognitoAccessForAmazonESPolicy:\n      Type: AWS::IAM::ManagedPolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action: \n                - \"cognito-idp:DescribeUserPool\"\n                - \"cognito-idp:CreateUserPoolClient\"\n                - \"cognito-idp:DeleteUserPoolClient\"\n                - \"cognito-idp:DescribeUserPoolClient\"\n                - \"cognito-idp:AdminInitiateAuth\"\n                - \"cognito-idp:AdminUserGlobalSignOut\"\n                - \"cognito-idp:ListUserPoolClients\"\n                - \"cognito-identity:DescribeIdentityPool\"\n                - \"cognito-identity:UpdateIdentityPool\"\n                - \"cognito-identity:SetIdentityPoolRoles\"\n                - \"cognito-identity:GetIdentityPoolRoles\"\n                - \"iam:GetRole\"\n                - \"iam:PassRole\"\n                - \"iam:CreateRole\"\n                - \"iam:AttachRolePolicy\"\n                - \"ec2:DescribeVpcs\"\n                - \"cognito-identity:ListIdentityPools\"\n                - \"cognito-idp:ListUserPools\"\n              Resource: '*'\n\n    CognitoAccessForAmazonESRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Action: \n                - \"sts:AssumeRole\"\n              Principal: \n                Service:\n                  - \"es.amazonaws.com\"\n        ManagedPolicyArns: \n          - !Ref CognitoAccessForAmazonESPolicy\n\n    RoleAttachment:\n      Type: AWS::Cognito::IdentityPoolRoleAttachment\n      Properties:\n        IdentityPoolId: !Ref IdentityPool\n        Roles:\n          authenticated: !GetAtt AuthenticatedRole.Arn\n\n\n    UserPoolClientFirst:\n      Type: 'AWS::Cognito::UserPoolClient'\n      Properties:\n        ClientName: UserPoolTestClient\n        GenerateSecret: true\n        UserPoolId: !Ref UserPool\n\n    ##Cloudformation Custom Resources - start\n    UserPoolClientFirstSettings:\n      Type: 'Custom::CognitoUserPoolClientSettings'\n      DependsOn: \n        - \"CFUserPoolClientSettingsLambdaFunction\"\n        - ElasticSearchInstance\n\n      Properties:\n        ServiceToken: \"arn:aws:lambda:${file(./aws_params.yml):region}:${file(./aws_params.yml):ACCOUNT_ID}:function:${self:service}-${self:custom.stage}-CFUserPoolClientSettings\"\n        UserPoolId: !Ref UserPool\n        UserPoolClientId: !Ref UserPoolClientFirst\n        SupportedIdentityProviders:\n          - COGNITO\n        AllowedOAuthFlowsUserPoolClient: true\n        AllowedOAuthFlows:\n          - code\n        AllowedOAuthScopes:\n          - openid\n\n    UserPoolTestDomain:\n      Type: 'Custom::CognitoUserPoolDomain'\n      DependsOn: \"CFUserPoolDomainLambdaFunction\"\n      Properties:\n        ServiceToken: \"arn:aws:lambda:${file(./aws_params.yml):region}:${file(./aws_params.yml):ACCOUNT_ID}:function:${self:service}-${self:custom.stage}-CFUserPoolDomain\"\n        UserPoolId: !Ref UserPool\n        Domain: ${file(./aws_params.yml):USER_POOL_DOMAIN}\n\n    ElasticSearchDomainConfig:\n      Type: 'Custom::ElasticSearchDomainConfig'\n      DependsOn: \"CFESDomainConfigLambdaFunction\"\n      Properties:\n        ServiceToken: \"arn:aws:lambda:${file(./aws_params.yml):region}:${file(./aws_params.yml):ACCOUNT_ID}:function:${self:service}-${self:custom.stage}-CFESDomainConfig\"\n        UserPoolId: !Ref UserPool\n        IdentityPoolId: !Ref IdentityPool\n        RoleArn: !GetAtt CognitoAccessForAmazonESRole.Arn\n\n    ##Cloudformation Custom Resources - end\n\n    # - ${file(resources/es-cognito-setup.yml)}\n    # - ${file(resources/dynamodb-table.yml)}\n\ncustom:\n  defaultRegion: us-east-1\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-assignments\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n","service: assignments-app-api\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${file(./aws_params.yml):profile}\n  stage: ${file(./aws_params.yml):stage}\n  region: ${file(./aws_params.yml):region}\n  # deploymentBucket: ${file(./aws_params.yml):DEPLOYMENT_S3_BUCKET}\n  environment:\n    tableName: ${self:custom.tableName}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ AssignmentsTable, Arn ]\n    -\n      Effect: Allow\n      Action: \n        - 'es:*'\n      Resource: \n        - 'arn:aws:es:${self:provider.region}:${file(./aws_params.yml):ACCOUNT_ID}:domain/${file(./aws_params.yml):ES_DOMAIN_NAME}'\n        - 'arn:aws:es:${self:provider.region}:${file(./aws_params.yml):ACCOUNT_ID}:domain/${file(./aws_params.yml):ES_DOMAIN_NAME}/*'\n\nfunctions:\n  create:\n    handler: src/assignment-api/create.main\n    events:\n      - http:\n          path: assignments\n          method: post\n          cors: true\n          # authorizer: aws_iam\n  get:\n    handler: src/assignment-api/get.main\n    events:\n      - http:\n          path: assignments/{id}\n          method: get\n          cors: true\n          # authorizer: aws_iam\n  list:\n    handler: src/assignment-api/list.main\n    events:\n      - http:\n          path: assignments\n          method: get\n          cors: true\n          # authorizer: aws_iam\n  update:\n    handler: src/assignment-api/update.main\n    events:\n      - http:\n          path: assignments/{id}\n          method: put\n          cors: true\n          # authorizer: aws_iam\n  delete:\n    handler: src/assignment-api/delete.main\n    events:\n      - http:\n          path: assignments/{id}\n          method: delete\n          cors: true\n          # authorizer: aws_iam\n\n  db_stream_processor:\n    handler: src/dynamodb-stream-processor/push_to_es.main\n    environment:\n      ES_ASSIGNMENT_INDEX: ${file(./aws_params.yml):ES_ASSIGNMENT_INDEX}\n      elasticRegion: ${self:provider.region}\n      elasticURL: ${file(./aws_params.yml):ES_DOMAIN_ENDPOINT}\n    events:\n      - stream:\n          arn: !GetAtt AssignmentsTable.StreamArn\n          batchSize: 100\n          type: dynamodb\n          startingPosition: LATEST\n          enabled: true\n\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n  - ${file(resources/dynamodb-table.yml)}\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-assignments\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'npm'\n"]},{"id":144633747,"files":["service: saffron\n\ncustom:\n  debug: \"*\"\n  deploymentBucket: 'global-deployment-bucket'\n\nprovider:\n  stage: dev\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    AWS_IOT_HOST: 'adx5fx5ykfiey-ats.iot.us-east-1.amazonaws.com'\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - iot:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  handler:\n    memorySize: 1536\n    timeout: 300\n    handler: src/handler.mqtt\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'saffron/session'\"\n    \n  session:\n    handler: src/handler.session\n    events:\n      - http:\n          method: OPTIONS\n          path: /\n          cors: true\n      - http:\n          method: GET\n          path: /\n          cors: true"]},{"id":172582312,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: cucumber-lambda-spike # NOTE: update this with your service name\n\ncustom:\n  S3_BUCKET_NAME: 'cucumber-files'\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    S3_BUCKET_NAME: ${self:custom.S3_BUCKET_NAME}\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\npackage:\n  exclude:\n    - .git/**\n\nfunctions:\n  feature:\n    handler: handler.handler\n    #memorySize: 256\n    events:\n      - http:\n          path: /\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.S3_BUCKET_NAME} # Reference files such as Cucumber step definitions need to go inside this bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":178262915,"files":["service: sqs-lambda-consumer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:stage}\n  stage: ${opt:stage}\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sqs:SendMessageBatch\n        - sqs:ReceiveMessage\n        - sqs:DeleteMessage\n      Resource:\n        - { \"Fn::GetAtt\": [ \"ExampleQueue\", \"Arn\" ] }\n\nfunctions:\n  # Helper function to feed the queue for demonstration\n  # purposes\n  feed:\n    handler: src/handlers/feed.handler\n    environment:\n      EXAMPLE_QUEUE_URL:\n        Ref: ExampleQueue\n  # The main Queue worker\n  queueHandler:\n    handler: src/handlers/queueHandler.handler\n    # For the sake of this example, limit to 1 concurrent functions\n    reservedConcurrency: 1\n    environment:\n      EXAMPLE_QUEUE_URL:\n        Ref: ExampleQueue\n    # This function will wake it self every minute\n    # to check for messages. If it wakes up and another\n    # instance is running it will be throttled since we\n    # have limit concurrency so only one worker will be\n    # working at all times\n    events:\n      - schedule: rate(1 minute)\n\nresources:\n  Resources:\n\n    # Example queue\n    # Manualy fed by the Feed function\n    ExampleQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ExampleQueue\n        RedrivePolicy:\n          deadLetterTargetArn: { \"Fn::GetAtt\": [ \"ExampleDLQueue\", \"Arn\" ] }\n          maxReceiveCount: 3\n    ExampleDLQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ExampleDLQueue\n\n  Outputs:\n"]},{"id":175091028,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: remove-pdf-metadata # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.removeMetaData\n    timeout: 30\n    events:\n      - http:\n          method: POST\n          path: remove-meta-data\n          cors: true\n          contentHandling: CONVERT_TO_BINARY\n    \n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":170014087,"files":["service: lambda-file-upload-node\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: \"arn:aws:s3:::dev-file-artifact-store\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n        - \"s3:GetObject\"\n      Resource: \"arn:aws:s3:::dev-file-artifact-store/*\"\n\nfunctions:\n  file-upload:\n    handler: handler.upload\n    environment:\n      file_s3_bucket_name: dev-file-artifact-store\n    events:\n      - http:\n          path: upload\n          method: post\n\nresources:\n Resources:\n   NewResource:\n     Type: AWS::S3::Bucket\n     Properties:\n       BucketName: dev-file-artifact-store\n\nplugins:\n  - serverless-apigw-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - 'multipart/form-data'"]},{"id":162350050,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\nservice: fargate-dns-demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeNetworkInterfaces\"\n        - \"ecs:DescribeClusters\"\n        - \"ecs:ListTagsForResource\"\n        - \"route53:ChangeResourceRecordSets\"\n      Resource: \"*\"  \n\nfunctions:\n  registerPublicIp:\n    memorySize: 128\n    handler: src/update-task-dns.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ecs\"\n            detail-type:\n              - \"ECS Task State Change\"\n            detail:\n              desiredStatus:\n                - \"RUNNING\"\n              lastStatus:\n                - \"RUNNING\"\n\npackage:\n  exclude:\n    - \"**\"\n  include:\n    - src/**\n    - node_modules/**\n    - \"!node_modules/**/.serverless/**\""]},{"id":123177165,"files":["service: github-repos\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n\nfunctions:\n  app:\n    handler: index.handler\n    environment:\n      TOKEN: ${file(./secrets.yml):token}\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\ncustom:\n  customDomain:\n    domainName: oss-repos.filiosoft.com\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager"]},{"id":117039700,"files":["service: binance-registration-check\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  cron:\n    handler: index.handler\n    events:\n      -  schedule: rate(1 day)\n"]},{"id":152172347,"files":["AWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:\n  TagUpdateFunction:\n    Type: String\n    Description: 'Update the function code automatically'\n    Default: 'true'\n  TagTeamName:\n    Type: String\n    Description: 'Name of the team'\n    Default: '<your_team_name>'\n  TagAsset:\n    Type: String\n    Description: 'Name of the asset'\n    Default: 'visual-droid'  \n  TagWorkload:\n    Type: String\n    Description: 'Type of workload being supported by this resource'\n    Default: 'delivery'  \n  TagDataClassificationInternalUseOnly:\n    Type: String\n    Description: 'Data classification - public, internal-use-only etc'\n    Default: 'internal-use-only'  \n  TagDataClassificationNone:\n    Type: String\n    Description: 'Data classification - public, internal-use-only etc'\n    Default: 'none'  \n  CodeBucketKey:\n    Type: String\n    Description: 'Zip file containing all the lambda functions'\n    Default: 'visual-droid.zip'\n  CodeBucketName:\n    Type: String\n    Description: 's3 bucket for storing source code'\n  ImageBucketName:\n    Type: String\n    Description: 's3 bucket for storing images'\n  BasicAuthStringPassword:\n    Type: String\n    Description: 'Auth String password required by the auth function'\n  RoleName:\n    Type: String\n    Description: 'Name of the role'\nResources:\n  snsTopicImageUploaded:\n    Type: \"AWS::SNS::Topic\"\n    Properties:\n      DisplayName: visual_droid_sns_image_uploaded\n  snsTopicPolicyImageUploaded:\n    Type: \"AWS::SNS::TopicPolicy\"\n    Properties:\n      PolicyDocument:\n        Id: \"give-s3-image-bucket-publish-permission\"\n        Version: '2012-10-17'\n        Statement:\n        - Sid:  sns_topic_policy_image_uploaded_sid\n          Effect: Allow\n          Principal:\n            Service: s3.amazonaws.com\n          Action: SNS:Publish\n          Resource: !Ref snsTopicImageUploaded\n          Condition:\n            ArnLike:\n              aws:SourceArn: !Sub 'arn:aws:s3:::${ImageBucketName}'\n      Topics:\n        - !Ref snsTopicImageUploaded\n  s3ImageBucket:\n    Type: 'AWS::S3::Bucket'\n    DependsOn: snsTopicPolicyImageUploaded\n    Properties:\n      BucketName: !Ref ImageBucketName\n      NotificationConfiguration:\n        TopicConfigurations:\n          -\n            Event: s3:ObjectCreated:*\n            Topic: !Ref snsTopicImageUploaded\n      LifecycleConfiguration:\n              Rules:\n              - Id: DeleteAllObjectsInThreeMonths\n                Prefix: ''\n                Status: Enabled\n                ExpirationInDays: '90'\n      Tags:\n        - Key: \"asset\" \n          Value: !Ref TagAsset\n        - Key: \"workload\" \n          Value: !Ref TagWorkload\n        - Key: \"data-classification\" \n          Value: !Ref TagDataClassificationInternalUseOnly\n        - Key: \"TeamNameTag\" \n          Value: !Ref TagTeamName\n  lambdaCompareImagePermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      Principal: sns.amazonaws.com\n      SourceArn: !Ref snsTopicImageUploaded\n      FunctionName: !GetAtt [lambdaCompareImage, Arn]\n  lambdaCreateThumbnailPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      Principal: sns.amazonaws.com\n      SourceArn: !Ref snsTopicImageUploaded\n      FunctionName: !GetAtt [lambdaCreateThumbnail, Arn]\n  apiGatewayToCloudWatchLogsRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: ApiGatewayToCloudWatchLogsRole\n      AssumeRolePolicyDocument:\n       Version: \"2012-10-17\"\n       Statement:\n        - Effect: Allow\n          Principal:\n           Service:\n            - \"apigateway.amazonaws.com\"\n          Action: \"sts:AssumeRole\"\n      Policies:\n        -\n          PolicyName: \"logToCloudWatch\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:*\n                Resource: \"*\"\n  lambdaRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub '${RoleName}'\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        -\n          PolicyName: \"SSMReadOnlyAccess\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ssm:Describe*\n                  - ssm:Get*\n                  - ssm:List*\n                Resource:\n                  - arn:aws:ssm:*:*:parameter/visual-droid/api/\n        -\n          PolicyName: \"logToCloudWatch\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:*\n                Resource:\n                  - arn:aws:logs:*:*:/aws/lambda/visual_droid*\n        -\n          PolicyName: \"AccessImageBucket\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - s3:*\n                Resource:\n                  - !Sub 'arn:aws:s3:::${ImageBucketName}'\n                  - !Sub 'arn:aws:s3:::${ImageBucketName}/*'\n  apiGateway:\n    Type: AWS::Serverless::Api\n    Properties:\n      DefinitionBody:\n        Fn::Transform:\n          Name: AWS::Include\n          Parameters:\n            Location: !Sub s3://${CodeBucketName}/swagger.yml\n      StageName: Prod\n  lambdaGetTestStatus:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.getTestStatus\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        getTestStatus:\n          Type: Api\n          Properties:\n            Path: /getTestStatus\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_getTestStatus\n      Description: 'Get the test status of the project and the branch'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaSetTestStatus:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.setTestStatus\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        setTestStatus:\n          Type: Api\n          Properties:\n            Path: /setTestStatus\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_setTestStatus\n      Description: 'Set the test status of the project and the branch'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaDeleteFolder:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.deleteFolder\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        deleteFolder:\n          Type: Api\n          Properties:\n            Path: /deleteFolder\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_deleteFolder\n      Description: 'Delete the folder from s3 bucket'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaSaveImage:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.saveImage\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        saveImage:\n          Type: Api\n          Properties:\n            Path: /saveImage\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_saveImage\n      Description: 'Save an image in a s3 bucket'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaSaveAndCompareImage:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.saveAndCompareImage\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        saveAndCompareImage:\n          Type: Api\n          Properties:\n            Path: /saveAndCompareImage\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_saveAndCompareImage\n      Description: 'Save an image in a s3 bucket and compare it with the compare SHA image'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      MemorySize: 1024\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaListOfNewImages:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.listOfNewImages\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        listOfNewImages:\n          Type: Api\n          Properties:\n            Path: /listOfNewImages\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_listOfNewImages\n      Description: 'Return the list of new images found after image comparison'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaListOfImageDiff:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.listOfImageDiff\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        listOfImageDiff:\n          Type: Api\n          Properties:\n            Path: /listOfImageDiff\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_listOfImageDiff\n      Description: 'Return the list of image diff found after image comparison'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaImagesProcessed:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.imagesProcessed\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        imagesProcessed:\n          Type: Api\n          Properties:\n            Path: /imagesProcessed\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_imagesProcessed\n      Description: 'Return the status and the number of images processed'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaRetryCompareImage:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.retryCompareImage\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        retryCompareImage:\n          Type: Api\n          Properties:\n            Path: /retryCompareImage\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_retryCompareImage\n      Description: 'Retry any images that were not compared'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaListImages:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.listImages\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        deleteFolder:\n          Type: Api\n          Properties:\n            Path: /listImages\n            Method: post\n            RestApiId: !Ref apiGateway\n      FunctionName: visual_droid_listImages\n      Description: 'List images for the given folder/sha'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction      \n  lambdaCreateThumbnail:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.createThumbnail\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        createThumbnail:\n          Type: SNS\n          Properties:\n            Topic: !Ref snsTopicImageUploaded\n      FunctionName: visual_droid_createThumbnail\n      Description: 'Create thumbnails for images created'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaCompareImage:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.compareImage\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      Events:\n        compareImage:\n          Type: SNS\n          Properties:\n            Topic: !Ref snsTopicImageUploaded\n      FunctionName: visual_droid_compareImage\n      Description: 'Compare an image and create a diff'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      MemorySize: 1024\n      Environment:\n        Variables:\n          S3_BUCKET: !Ref ImageBucketName\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n  lambdaAuth:\n    Type: 'AWS::Serverless::Function'\n    Properties:\n      Handler: src/lambdas.auth\n      Runtime: nodejs8.10\n      CodeUri:\n        Bucket: !Ref CodeBucketName\n        Key: !Ref CodeBucketKey\n      FunctionName: visual_droid_auth\n      Description: 'Auth function for the authenticating api'\n      Role: !GetAtt [lambdaRole, Arn]\n      Timeout: 30\n      Environment:\n        Variables:\n          VISUAL_DROID_PASSWORD: !Ref BasicAuthStringPassword\n      Tags:\n        asset: !Ref TagAsset\n        workload: !Ref TagWorkload\n        data-classification: !Ref TagDataClassificationNone\n        TeamNameTag: !Ref TagTeamName\n        UpdateFunction: !Ref TagUpdateFunction\n"]},{"id":141997292,"files":["service: ci-cd-pipeline-example\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  stage: dev\n\n# The `functions` block defines what code to deploy\nfunctions:\n  Index:\n    handler: handler.Index\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n"]},{"id":158214303,"files":["service: my-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:PutItem\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:Scan\n      Resource: \"arn:aws:dynamodb:us-east-1:486218663474:table/todos\"\n\nfunctions:\n  listTodos:\n      handler: list.run\n      events:\n        - http:\n            path: todos\n            method: get\n  getTodo:\n    handler: get.run\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n  createTodo:\n    handler: create.run\n    events:\n      - http:\n          path: todos\n          method: post\n  updateTodo:\n    handler: update.run\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n  deleteTodo:\n    handler: delete.run\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\nresources:\n  Resources:\n    TodosTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: todos\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":156673753,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: helper # NOTE: update this with your service name\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    NODE_ENV: production\n\n    # db\n    DB_TYPE: dynamodb\n    DYNAMODB_TABLE_PREFIX: helper\n    DYNAMODB_REGION: us-east-1\n\n# you can add packaging information here\n# package:\n#  include:\n#    - lib/**\n#    -\nexclude:\n  - package-lock*\n  - serverless.sample.yml\n\nfunctions:\n  task:\n    handler: handler.task\n    timeout: 400\n  cron:\n    handler: handler.cron\n    timeout: 400\n    events:\n    - schedule:\n        rate: cron(*/5 * * * ? *)\n        enabled: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":157024859,"files":["service: lambda-bin-performance\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions: # sls deploy function -f myFuncName\n  # Invoke your function with the --log flag to display the logging output to your terminal\n  # sls invoke -f original --log\n  original:\n    handler: test-original.handler\n    memorySize: 128 # optional, in MB, default is 1024\n    timeout: 60 # optional, in seconds, default is 6\n    events:\n      - http: GET original\n\n  lambdaBin:\n    handler: test-lambdaBin.handler\n    memorySize: 128 # optional, in MB, default is 1024\n    timeout: 60 # optional, in seconds, default is 6\n    events:\n      - http: GET lambdaBin\n"]},{"id":152125417,"files":["service: set-syncer # NOTE: update this with your service name\n\napp: set-syncer-dev\ntenant: modahqi\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  profile: moda.hqi\n  environment:\n    SpotifyClientId:     ${file(./config.json):SPOTIFY_CLIENT_ID}\n    SpotifyClientSecret: ${file(./config.json):SPOTIFY_CLIENT_SECRET}\n    YoutubeApiKey:       ${file(./config.json):YOUTUBE_API_KEY}\n    AWSAccountID:        ${file(./config.json):AWS_ACCOUNT_ID}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:ListBucket\n      Resource: \"arn:aws:s3:::first-set\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nplugins:\n  - serverless-plugin-include-dependencies\n  - serverless-offline\n  - serverless-offline-sns\n # - serverless-webpack\n  \n\npackage:\n  include:\n    - binaries/*\n\nfunctions:\n  differ:\n    handler: src/handlers/Differ.diff\n    events:\n      - http:\n          path: ''\n          method: get\n  downloader:\n    handler: src/handlers/Downloader.download\n    events:\n      - sns: test-topic\n\ncustom:\n  serverless-offline-sns:\n    port: 4002 # a free port for the sns server to run on\n    debug: false\n    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline\n    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint\n    # accountId: 123456789012 # Optional\n"]},{"id":145297655,"files":["service: pathFinder\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  versionFunctions: false\n  stage: dev\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource:\n         - Ref: NotificationSNSTopic\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:sendMessageBatch\"\n      Resource:\n        Fn::GetAtt: [ JobQueue, Arn ]\n\n# you can define service wide environment variables here\n  environment:\n    MAX_IPS_TO_SCAN_PER_INSTANCE: 25000\n    MAX_JOBS_TO_CREATE: 10000\n    JOB_QUEUE:\n      Ref: JobQueue\n\npackage:\n  include:\n    - package.json\n    - package-lock.json\n    - jobExecutor.js\n    - gateway.js\n    - lib/**\n\nfunctions:\n  jobExecutor:\n    handler: jobExecutor.execute\n    memorySize: 192\n    timeout: 300\n    environment:\n      NOTIFICATION_SNS_TOPIC:\n        Ref: NotificationSNSTopic\n    events:\n      - sqs:\n          batchSize: 1\n          arn:\n            Fn::GetAtt: [ JobQueue, Arn ]\n  find:\n    handler: gateway.find\n    timeout: 10\n    memorySize: 128\n    events:\n      - http:\n          path: /find\n          method: post\n          request:\n            parameters:\n              querystrings:\n                path: true\n                from: true\n                to: true\n                regex: false\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    NotificationSNSTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: pathFinder-success-${self:provider.stage}\n    JobQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        MessageRetentionPeriod: 1209600\n        QueueName: ${self:provider.stage}-http-path-search-jobs\n        VisibilityTimeout: 300\n    JobQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties: \n        PolicyDocument: \n          Id: JobQueuePolicy\n          Statement:\n            Effect: Allow\n            Principal: \"*\"\n            Action: \n              - \"sqs:SendMessage\"\n              - \"sqs:deleteMessage\"\n              - \"sqs:getQueueUrl\"\n              - \"sqs:receiveMessage\"\n            Resource: \"*\"\n        Queues:\n          - Ref: JobQueue\n  Outputs:\n    NotificationSNSTopic:\n      Description: \"SNS topic that the events will be published to, once a matching response is found\"\n      Value:\n        Ref: NotificationSNSTopic\n    JobQueue:\n      Description: \"SQS queue that contains all the search jobs to be done\"\n      Value:\n        Ref: JobQueue\n"]},{"id":123976257,"files":["service: aws-lambda-opencage-geocoder\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\nplugins:\n  - serverless-env-generator\n  - serverless-offline # serverless-offline needs to be last in the list\n\n# Plugin config goes into custom:\ncustom:\n  envFiles: #YAML files used to create .env file\n    - environment.yml\n\n\nfunctions:\n  # hello:\n  #   handler: handler.hello\n  #   events: # The Events that trigger this Function\n  #     - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n  #         path: hello # Path for this endpoint\n  #         method: get # HTTP method for this endpoint\n  geocode:\n    handler: opencage.geocode\n    events: # The Events that trigger this Function\n      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n          path: geocode # Path for this endpoint\n          method: get # HTTP method for this endpoint\n"]},{"id":133946353,"files":["service: aws-apply-berin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-apartment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  post:\n    handler: handler.post\n    timeout: 300\n    events:\n      - http: GET post\n      - schedule: rate(5 minutes)\n\n\nresources:\n  Resources:\n    NicknamesTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: apartmentID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: apartmentID\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":136612094,"files":["service: moneiwallet\n\n#package:\n#  artifact: package/package.zip\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-plugin-stage-variables\n  - serverless-pseudo-parameters\n  - serverless-step-functions\n  - serverless-stack-output\n  - serverless-appsync-plugin\n  - serverless-iam-roles-per-function\n\npackage:\n  exclude:\n    - node_modules/aws-sdk\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${self:custom.config.REGION}\n  stage: ${self:custom.currentStage}\n  environment:\n    SLS_REGION: ${self:custom.config.REGION}\n    TRANSACTIONS_TABLE: ${self:custom.transactionsTable}\n    MNEMONIC_KEY: ${self:custom.config.MNEMONIC_KEY}\n    MONEI_CREDENTIALS_KEY: ${self:custom.config.MONEI_CREDENTIALS_KEY}\n    MONEI_API_URL: ${self:custom.config.MONEI_API_URL}\n    ENCRYPT_PASSWORD_KEY: ${self:custom.config.ENCRYPT_PASSWORD_KEY}\n    TOKEN_ADDRESS: ${self:custom.config.TOKEN_ADDRESS}\n    MASTER_ADDRESS: ${self:custom.config.MASTER_ADDRESS}\n    IOT_ENDPOINT: ${self:custom.config.IOT_ENDPOINT}\n    CHECK_TRANSACTIN_SM: ${self:resources.Outputs.CheckTransactionSM.Value}\n    ALLOW_TRANSFER_SM: ${self:resources.Outputs.AllowTransferSM.Value}\n    WITHDRAW_TOKENS_SM: ${self:resources.Outputs.WithdrawTokensSM.Value}\n    TRANSFER_TOKENS_SM: ${self:resources.Outputs.TransferTokensSM.Value}\n    USER_POOL_ID: ${self:resources.Outputs.UserPoolId.Value}\n    USER_POOL_CLIENT_ID: ${self:resources.Outputs.UserPoolClientId.Value}\n    USER_NOTIFICATIONS_POLICY: ${self:custom.resourcesPrefix}-UserNotificationsPolicy\n    INFURA_URL: ${self:custom.config.INFURA_URL}\n    ELASTICSEARCH: ${self:resources.Outputs.ElasticSearchIndexDomain.Value}\n    API_ENDPOINT: ${self:custom.apiEndpoint}\n    FONTEND_URL: ${self:custom.config.FONTEND_URL}\n    AUTHY_API_KEY: ${env:AUTHY_API_KEY}\n    TRANSFERWISE_CREDENTIALS_KEY: ${self:custom.config.TRANSFERWISE_CREDENTIALS_KEY}\n    TRANSFERWISE_API_URL: ${self:custom.config.TRANSFERWISE_API_URL}\n\n  timeout: 10\n  cfLogs: true\n\ncustom:\n  defaultStage: develop\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  transactionsTable: ${self:custom.resourcesPrefix}-Transactions\n  config: ${file(./config.yml):${self:custom.currentStage}}\n  elasticsearchDomain: ${self:provider.stage}-${self:service}\n  apiEndpoint:\n    Fn::Join:\n      - \"\"\n      - - \"https://\"\n        - { Ref : ApiGatewayRestApi }\n        - \".execute-api.${self:custom.config.REGION}.amazonaws.com/${self:custom.currentStage}\"\n\n  pseudoParameters:\n    skipRegionReplace: true\n\n  appSync: ${file(./config/app-sync.yml)}\n\n  output:\n    handler: scripts/output.handler\n\nfunctions: ${file(./config/functions.yml)}\n\nstepFunctions:\n  stateMachines:\n    AllowTransferSM: ${file(./config/state-machines/allow-transfer-sm.yml)}\n    CheckTransactionSM: ${file(./config/state-machines/check-transaction-sm.yml)}\n    TransferTokensSM: ${file(./config/state-machines/transfer-tokens-sm.yml)}\n    WithdrawTokensSM: ${file(./config/state-machines/withdraw-tokens-sm.yml)}\n\nresources:\n  Resources:\n    TransactionsTable: ${file(./config/dynamodb/transactions.yml)}\n    UserPool: ${file(./config/cognito/user-pool.yml)}\n    UserPoolClient: ${file(./config/cognito/user-pool-client.yml)}\n    IdentityPool: ${file(./config/cognito/identity-pool.yml)}\n    CognitoAuthorizedRole: ${file(./config/cognito/cognito-authorized-role.yml)}\n    IdentityPoolRoleMapping: ${file(./config/cognito/identity-pool-role-mapping.yml)}\n    ElasticSearchIndex: ${file(./config/elasticsearch.yml)}\n\n    PostAuthenticationPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName: { Fn::GetAtt: ['PostAuthenticationLambdaFunction', 'Arn'] }\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:  { Fn::GetAtt: ['UserPool', 'Arn'] }\n\n    DefineAuthChallengePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName: { Fn::GetAtt: ['DefineAuthChallengeLambdaFunction', 'Arn'] }\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:  { Fn::GetAtt: ['UserPool', 'Arn'] }\n\n    CreateAuthChallengePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName: { Fn::GetAtt: ['CreateAuthChallengeLambdaFunction', 'Arn'] }\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:  { Fn::GetAtt: ['UserPool', 'Arn'] }\n\n    VerifyAuthChallengePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName: { Fn::GetAtt: ['VerifyAuthChallengeLambdaFunction', 'Arn'] }\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:  { Fn::GetAtt: ['UserPool', 'Arn'] }\n\n    PreSignUpPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName: { Fn::GetAtt: ['PreSignUpLambdaFunction', 'Arn'] }\n        Principal: cognito-idp.amazonaws.com\n        SourceArn:  { Fn::GetAtt: ['UserPool', 'Arn'] }\n\n    UserNotificationsPolicy:\n      Type: AWS::IoT::Policy\n      Properties:\n        PolicyName: ${self:custom.resourcesPrefix}-UserNotificationsPolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n          - Effect: Allow\n            Action:\n              - \"iot:*\"\n            Resource: \"*\"\n\n    AppSyncLambdaServiceRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:custom.resourcesPrefix}-lambda-AppSyncServiceRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service: appsync.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:custom.resourcesPrefix}-lambda-AppSyncServicePolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: \"Allow\"\n                  Action: lambda:invokeFunction\n                  Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:*\"\n\n    AppSyncDynamoDBServiceRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:custom.resourcesPrefix}-dynamo-AppSyncServiceRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service: appsync.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:custom.resourcesPrefix}-dynamo-AppSyncServicePolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                    - dynamodb:DeleteItem\n                    - dynamodb:BatchWriteItem\n                    - dynamodb:BatchGetItem\n                  Resource: \"arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}\"\n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                  Resource: \"arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}/index/*\"\n\n    AppSyncESServiceRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:custom.resourcesPrefix}-es-AppSyncServiceRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service: appsync.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:custom.resourcesPrefix}-es-AppSyncServicePolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - es:ESHttpDelete\n                    - es:ESHttpHead\n                    - es:ESHttpGet\n                    - es:ESHttpPost\n                    - es:ESHttpPut\n                  Resource:  \"arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/${self:custom.elasticsearchDomain}/*\"\n\n\n  Outputs:\n    AllowTransferSM:\n      Value: {Ref: \"AllowTransferSMDash${self:service}Dash${opt:stage}\"}\n\n    TransferTokensSM:\n      Value: {Ref: \"TransferTokensSMDash${self:service}Dash${opt:stage}\"}\n\n    WithdrawTokensSM:\n      Value: {Ref: \"WithdrawTokensSMDash${self:service}Dash${opt:stage}\"}\n\n    CheckTransactionSM:\n      Value: {Ref: \"CheckTransactionSMDash${self:service}Dash${opt:stage}\" }\n\n    UserPoolId:\n      Value: { Ref: UserPool }\n\n    UserPoolClientId:\n      Value: { Ref: UserPoolClient }\n\n    IdentityPoolId:\n      Value: { Ref: IdentityPool }\n\n    ElasticSearchIndex:\n      Value: { Ref: \"ElasticSearchIndex\" }\n\n    ElasticSearchIndexARN:\n      Value: \"arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/${opt:stage}-${self:service}\"\n\n    ElasticSearchIndexDomain:\n      Value: { Fn::GetAtt: [ 'ElasticSearchIndex', 'DomainEndpoint' ] }\n\n"]},{"id":146838052,"files":["service: poc-lambda-ssm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  variableSyntax: \"\\\\${((?!AWS)[ ~:a-zA-Z0-9._'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}\"\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - ssm:GetParameter\n    Resource:\n      - 'Fn::Join':\n        - ':'\n        - - 'arn:aws:ssm'\n          - Ref: 'AWS::Region'\n          - Ref: 'AWS::AccountId'\n          - 'parameter/my-secure-param'\n  - Effect: Allow\n    Action:\n      - kms:Decrypt\n    Resource:\n      - 'Fn::Join':\n        - ':'\n        - - 'arn:aws:kms'\n          - Ref: 'AWS::Region'\n          - Ref: 'AWS::AccountId'\n          - 'key/alias/aws/ssm'\n\nfunctions:\n  hello_ssm:\n    handler: handler.hello_ssm"]},{"id":127973705,"files":["service: endpoint-heartbeat\n\ncustom: ${file(config.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # If you'd like to specify an existing IAM Role ARN for the lambda to execute as, put it here\n  # role: insertIAMRoleARNHere\n\nfunctions:\n  heartbeat:\n    name: endpoint-heartbeat\n    memorySize: 128\n    handler: handler.heartbeat\n    timeout: 60\n\n    environment:\n      serviceEndpoint: ${self:custom.serviceEndpoint}\n      slackEndpoint: ${self:custom.slackEndpoint}\n      httpMethod: ${self:custom.httpMethod}\n\n    events:\n      - schedule: ${self:custom.interval}\n"]},{"id":113004266,"files":["service: react-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n      - http:\n          path: /cool.js\n          method: get\n          cors: true"]},{"id":115001368,"files":["service: aws-waf-logger\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 3008\n  timeout: 300\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: 'arn:aws:s3:::${self:provider.environment.LOG_BUCKET}/*'\n    - Effect: Allow\n      Action:\n        - waf:*\n      Resource: '*'\n  environment: ${file(./env.yml)}\n\npackage:\n  exclude:\n    - env.yml\n    - env.yml.example\n    - README.md\n    - package.json\n\nfunctions:\n  log:\n    handler: handler.log\n    events:\n      - schedule:\n          rate: rate(${self:provider.environment.CHECK_EVERY_MINUTES} minutes)\n"]},{"id":75128457,"files":["# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-sample-custom-skill-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  timeout: 30 # attached to API Gateway so it's automatically limited to 30 seconds.\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# packaging information\npackage:\n  artifact: ./sample-custom-skill-nodejs.zip\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n"]},{"id":123480087,"files":["service: big-mouth\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-sam\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  get-index:\n    handler: functions/get-index.handler\n    events:\n      - http:\n          path: /\n          method: get\n    environment:\n      cognito_user_pool_id: us-east-1_XDkAXwUp5\n      cognito_client_id: 63c6bhcqs7m3qbu2t96ld0s012\n      restaurants_api: https://rz4fkgnyef.execute-api.us-east-1.amazonaws.com/dev/restaurants\n      orders_api: https://rz4fkgnyef.execute-api.us-east-1.amazonaws.com/dev/orders\n    iamRoleStatements:\n      - Effect: Allow\n        Action: execute-api:Invoke\n        Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants\n\n\n  get-restaurants:\n    handler: functions/get-restaurants.handler\n    events:\n      - http:\n          path: /restaurants/\n          method: get\n          authorizer: aws_iam\n    environment:\n      restaurants_table: restaurants\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants\n\n  search-restaurants:\n    handler: functions/search-restaurants.handler\n    events:\n      - http:\n          path: /restaurants/search/\n          method: post\n          authorizer: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-east-1_XDkAXwUp5\n    environment:\n      restaurants_table: restaurants\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants\n\n  place-order:\n    handler: functions/place-order.handler\n    events:\n      - http:\n          path: /orders/\n          method: post\n          authorizer: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-east-1_XDkAXwUp5\n    environment:\n      order_events_stream: order-events\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n\n  notify-restaurant:\n    handler: functions/notify-restaurant.handler\n    events:\n      - stream:\n          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n    environment:\n      order_events_stream: order-events\n      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification\n      restaurant_notification_retry_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification-retry\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: \n          - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification\n          - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification-retry\n\n  retry-notify-restaurant:\n    handler: functions/retry-notify-restaurant.handler\n    events:\n      - sns: restaurant-notification-retry\n    environment:\n      order_events_stream: order-events\n      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification-dlq\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: \n          - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification\n\n  accept-order:\n    handler: functions/accept-order.handler\n    events:\n      - http:\n          path: /orders/accept/\n          method: post\n    environment:\n      order_events_stream: order-events\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n\n  notify-users:\n    handler: functions/notify-user.handler\n    events:\n      - stream:\n          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n    environment:\n      order_events_stream: order-events  \n      user_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:user-notification\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: \n          - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:user-notification\n\n  fulfill-order:\n    handler: function/fulfill-order.handler\n    events:\n      - http:\n          path: /orders/complete/\n          method: post\n    environment:\n      order_events_stream: order-events\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events\n\nresources:\n  Resources:\n    restaurantsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: restaurants\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    orderEventsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: order-events\n        ShardCount: 1\n\n    restaurantNotificationTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: restaurant-notification\n        TopicName: restaurant-notification\n\n    restaurantNotificationDeadLetterQueueTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: restaurant-notification-dlq\n        TopicName: restaurant-notification-dlq\n\n    userNotificationTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: user-notification\n        TopicName: user-notification\n"]},{"id":140623688,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":140096152,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: proxy\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: eu-west-1\n  memorySize: 128 #Use a bigger memory size for better CPU performance\n\n\nfunctions:\n  get:\n    handler: handler.get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: get\n          method: get\n          cors: true\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ../webpack.config.js\n    includeModules: true\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n"]},{"id":138262414,"files":["service: serverless-apollo-datasource-redis\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  profile: ${opt:stage}\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: ${opt:region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n      Resource:\n        - \"arn:aws:ssm:*:*:parameter/apollo-test/${opt:stage}/*\"\n  environment:\n    SERVERLESS_PROJECT: serverless-apollo-datasource-redis\n    SERVERLESS_STAGE: ${opt:stage}\n    SERVERLESS_REGION: ${opt:region}    \n    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR\n    REDIS_HOST: ${ssm:/apollo-test/${opt:stage}/REDIS_HOST~true}\n    REDIS_PORT: ${ssm:/apollo-test/${opt:stage}/REDIS_PORT~true}\n    REDIS_PASSWORD: ${ssm:/apollo-test/${opt:stage}/REDIS_PASSWORD~true}\n    NY_TIMES_APIKEY: ${ssm:/apollo-test/${opt:stage}/NY_TIMES_APIKEY~true}\n    # SLS_DEBUG: true\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4200\n  webpackIncludeModules: true\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get\n        cors: true       "]},{"id":98106366,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  role: arn:aws:iam::282406301473:role/LambdaExecutionRole\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  handler:\n    handler: handler.autodeploy\n    description: This functions waits for S3 to Autodeploy new code\n    tags:\n      env: development\n    events:\n      - s3:\n          bucket: repos.dev\n          event: s3:ObjectCreated:*\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-webhook-github-push\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  push:\n    handler: handler.push\n    name: serverless-webhook-github-push\n    description: This endpoint reacts to pushes to a repo\n    tags:\n      service: GitHub\n    events:\n      - http:\n          path: /push\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":119391677,"files":["service: mail-sender-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: ${env:LAMBDA_MEMORY_SIZE}\n  stage: ${env:ENVIRONMENT}\n  region: ${env:AWS_REGION}\n  environment:\n    LAMBDA_PROJECT_NAME: ${env:LAMBDA_PROJECT_NAME}\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ses:*\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - sqs:*\n\nfunctions:\n  sender:\n    handler: handler.sender\n    events:\n       - sns: ${env:SNS_TOPIC_ARN}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ses:*\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - sqs:*"]},{"id":137447794,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-sns-lambda\ncustom:\n  topicName: topic-one\n  standAloneTopic: MyCustomTopic\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    TOPIC_NAME: ${self:custom.topicName}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: arn:aws:sns:${self:provider.region}:*:${self:custom.topicName}\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  topicOneProducer:\n    handler: handler.eventProducer\n    events:\n      - http:\n          path: trigger\n          method: get\n          cors: true\n  topicOneConsumer:\n    handler: handler.eventConsumer\n    events:\n      - sns: ${self:custom.topicName}\n  # topicTwoConsumer:\n  #   handler: handler.eventConsumer\n  #   events:\n  #     - sns:\n  #       arn: { \"Fn::Join\" : [\"\", [ \"arn:aws:sns:\", { \"Ref\" : \"AWS::Region\" }, \":\", { \"Ref\" : \"AWS::AccountId\" }, \":MyCustomTopic\" ] ]  }\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nresources:\n  Resources:\n    MyCustomTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"Second stand alone topic\"\n        TopicName: ${self:custom.standAloneTopic}\n"]},{"id":135196129,"files":["service: aws-nodejs \n\ncustom:\n  region: 'us-east-1'\n  dynamodb: 'pizzerias'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    YELP_API_KEY: ${opt:yelp}\n    DYNAMODB_TABLE: ${self:custom.dynamodb}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:ListTable\n        - dynamodb:CreateTable\n        - dynamodb:DescribeTable\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  getPizzerias:\n    handler: handler.getPizzerias\n    events:\n      - schedule:\n          name: get-current-pizzas\n          description: 'launch a lambda function to pull all pizza businesses around raleigh and save them into a dynamodb table'\n          rate: cron(0 0 * * ? *)\n          enabled: false\n"]}]