[{"id":112428566,"files":["service: aws-lambda-whereis\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-env-generator\n  - serverless-webpack\n  - serverless-offline # serverless-offline needs to be last in the list\n\n# Plugin config goes into custom:\ncustom:\n  webpackIncludeModules: true\n  envFiles: #YAML files used to create .env file\n    - environment.yml\n\nfunctions:\n  whereIs:\n    handler: src/handler.whereIs\n    events:\n      - http:\n          path: whereis\n          method: get\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                lat: false\n                lng: false\n                addr: false\n"]},{"id":145455241,"files":["service: aws\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless\n  stage: dev\n  region: us-east-1\n  environment:\n    # DEBUG: \"*\"\n    PAGE_LOAD_TIMEOUT: \"30000\"\n    LOGGING: \"true\"\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\npackage:\n  exclude:\n    - node_modules/puppeteer/.local-chromium/** # exclude puppeteer chrome if exists\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n\nfunctions:\n  screenshot:\n    description: Headless Chrome Serverless-framework screenshot example\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/screenshot.default\n    events:\n      - http:\n          path: screenshot\n          method: get\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Properties:\n        BinaryMediaTypes:\n          - \"*/*\"\n    # Enable X-Ray tracing on Lambda functions\n    # ScreenshotLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n    # PdfLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n"]},{"id":144588215,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: landing-page-lambda # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  createSubscriber:\n    handler: handler.createSubscriber\n    events:\n      - http:\n          path: subscriber/create\n          method: post\n          cors: true\n    environment:\n      API_KEY: ${env:EMAIL_OCTOPUS_API_KEY}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":143226755,"files":["service: crmbot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: dev-temp-ohio\n  timeout: 15 # optional, in seconds, default is 6\n  stage: ${opt:stage, 'dev-test'}\n  region: ${opt:region, 'us-east-2'}\n  environment: ${file(env.yml)}\n\nplugins:\n  - serverless-offline\npackage:\n  exclude:\n    - test/**\n\nfunctions:\n  search:\n    handler: handler.search\n    events:\n      - http:\n          path: api/search\n          method: get\n          cors: true\n  export:\n    handler: handler.export\n    events:\n      - http:\n          path: api/export\n          method: get\n          cors: true\n  import:\n    handler: handler.import\n    events:\n      - http:\n          path: api/import\n          method: post\n          cors: true"]},{"id":142730769,"files":["service: my-service-name    # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10       # NOTE: Your preferred NodeJS version\n  stage: dev                # NOTE: Yes! You can specify different environments\n  region: ap-southeast-1    # NOTE: Your preferred region name\n\nfunctions:\n  hello:\n    name: Hello-World\n    description: Says hello world to everyone\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n    memorySize: 256\n    timeout: 10\n"]},{"id":140541516,"files":["service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10 # set node.js runtime\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev # setting the env stage to dev, this will be visible in the routes\n  region: ap-south-1\n\npackage: # Optional deployment packaging configuration\n  include: # Specify the directories and files which should be included in the deployment package\n    - models/**\n    - handler.js\n  package:\n  individually: true\n\n  environment:\n    DB_PATH: your usrl for database\n    DB_NAME: collection name\n\n\nfunctions: # add 4 functions for CRUD\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id} # path will be domain.name.com/dev/notes/1\n         method: delete\n         cors: true\n\nplugins:\n  - serverless-offline # adding the plugin to be able to run the offline emulation\n # - serverless-plugin-optimize"]},{"id":120088486,"files":["service: alexa-fizzbuzz\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n#  environment:\n#   USE_DYNAMO_DB: true\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"dynamodb:DescribeTable\"\n#        - \"dynamodb:Query\"\n#        - \"dynamodb:Scan\"\n#        - \"dynamodb:GetItem\"\n#        - \"dynamodb:PutItem\"\n#        - \"dynamodb:UpdateItem\"\n#        - \"dynamodb:DeleteItem\"\n#        - \"dynamodb:CreateTable\"\n#      Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\nfunctions:\n  fizzbuzz:\n    handler: lambda/custom/index.handler\n    events:\n      - alexaSkill #: amzn1.ask.skill.d9eb0616-7adc-4467-9c08-330303b756a4\npackage:\n  include:\n    - lambda/custom/*.js\n    - lambda/custom/node_modules/ask-sdk-core/**\n    - lambda/custom/node_modules/ask-sdk-model/**\n  exclude:\n    - lambda/custom/node_modules/**\n    - .*/**\n"]},{"id":139081724,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-west-2\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":138601117,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: starter-nodejs-serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.27.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  profile: serverless\n\n  region: us-east-1\n  memorySize: 128\n\n  deploymentBucket: ${self:service}-${self:provider.stage}-deployment-bucket\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n\npackage:\n  include:\n    - handler.js\n    - src/**\n  exclude:\n    - .git/**\n    - .travis.yml\n\nfunctions:\n  helloName:\n    handler: handler.helloName\n    events:\n      - http:\n          path: hello-name\n          method: get\n          cors: true\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-jest-plugin\n\ncustom:\n  jest:\n    collectCoverage: true\n  \n"]},{"id":130138992,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: stealth-project # NOTE: update this with your service name\n\nplugins:\n  - serverless-webpack\n  - serverless-domain-manager\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # Name of webpack configuration file\n    includeModules: true # Node modules configuration for packaging\n    packager: 'npm' # Packager that will be used to package your external modules\n  customDomain:\n    domainName: 'vmchanger.abashina.org'\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 60 # The default is 6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # Gives permission to our DynamoDB table.\n        - dynamodb:DeleteItem\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n      Resource:\n        - \"arn:aws:dynamodb:*:*:table/voiceMailChangerTable\"\n        - \"arn:aws:dynamodb:*:*:table/voicemailChangerUsers\"\n    - Effect: Allow\n      Action: # Gives permission to generate audio.\n        - polly:SynthesizeSpeech\n      Resource: \"*\"\n    - Effect: Allow\n      Action: # Gives access to our s3 bucket.\n        - s3:GetObject\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource:\n        - \"arn:aws:s3:::voicemail-changer-bucket-mp3\"\n        - \"arn:aws:s3:::voicemail-changer-bucket-mp3/*\"\n    - Effect: Allow\n      Action: # Gives permission to publish messages.\n        - SNS:Publish\n      Resource: \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  call:\n    handler: src/handlers/call.call\n    events:\n      - http:\n          path: call\n          method: post\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$.body.message\")\n  changer:\n    handler: src/handlers/changer.changer\n    events:\n      - http:\n          path: changer\n          method: post\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$.body.message\")\n  submit:\n    handler: src/handlers/submit.submit\n    events:\n      - http:\n          path: submit\n          method: post\n  signup:\n    handler: src/handlers/signup.signup\n    events:\n      - http:\n          path: signup\n          method: post\n  login:\n    handler: src/handlers/login.login\n    events:\n      - http:\n          path: login\n          method: post\n  info:\n    handler: src/handlers/info.info\n    events:\n      - http:\n          path: info\n          method: post\n  generate:\n    handler: src/handlers/generate.generate\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 1\n          enabled: true\n          arn:\n            Fn::GetAtt:\n              - voiceMailChangerTable\n              - StreamArn\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    voiceMailChangerTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: voiceMailChangerTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n    voicemailChangerUsers:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: voicemailChangerUsers\n        AttributeDefinitions:\n          - AttributeName: phone\n            AttributeType: S\n        KeySchema:\n          - AttributeName: phone\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    S3BucketMP3:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: voicemail-changer-bucket-mp3\n"]},{"id":136782753,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-southeast-2\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName:\n      Ref: NotesTable\n    stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [ NotesTable, Arn ]\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete:\n      # Defines an HTTP API endpoint that calls the main function in delete.js\n      # - path: url path is /notes/{id}\n      # - method: DELETE request\n      handler: delete.main\n      events:\n        - http:\n            path: notes/{id}\n            method: delete\n            cors: true\n            authorizer: aws_iam\n  billing:\n    handler: billing.main\n    events:\n      - http:\n          path: billing\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}"]},{"id":136792568,"files":["service: PDPlatformEngineerProject\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    SNSTopicARN: \"${self:resources.Outputs.SNSTopicArn.Value}\"\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"sns:Publish\"\n         - \"sns:Subscribe\"\n         - \"sns:Unsubscribe\"\n         - \"sns:ListSubscriptionsByTopic\"\n       Resource:\n         - \"${self:resources.Outputs.SNSTopicArn.Value}\"\n\nfunctions:\n  sendDailyDadJoke:\n    handler: send_notification.sendDailyDadJoke\n    events:\n      # Invoke the Lambda function everyday\n      - schedule: rate(1 day)\n  subscribe:\n    handler: subscribe.subscribe\n    events:\n      - http:\n          path: api/subscribe\n          method: post\n          integration: lambda\n          cors: true  \n  unsubscribe:\n    handler: unsubscribe.unsubscribe\n    events:\n      - http:\n          path: api/unsubscribe\n          method: post\n          integration: lambda\n          cors: true  \nresources:\n  Resources:\n    SNSTopic:\n      Type: AWS::SNS::Topic\n      \n  Outputs:\n    SNSTopicArn:\n      Value:\n        Ref: SNSTopic\n"]},{"id":130738541,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bestsongs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment:\n    bucketName: ${self:service}-${self:provider.stage}-bucket\n    tableName: ${self:service}-${self:provider.stage}-table\n\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: arn:aws:s3:::${self:provider.environment.bucketName}/*\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}\"\n\nfunctions:\n  randomsong:\n    handler: handler.randomsong\n    events:\n      - http:\n          path: bestsongs\n          method: get\n\n  allsongs:\n    handler: handler.allsongs\n    events:\n      - http:\n          path: bestsongs/all\n          method: get\n\n  rankedsong:\n    handler: handler.rankedsong\n    events:\n      - http:\n          path: bestsongs/{rank}\n          method: get\n\n  loaddata:\n    handler: handler.loaddata\n    events:\n      - s3:\n          bucket: ${self:provider.environment.bucketName}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .csv\n\n\nresources:\n  Resources:\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions: \n          - AttributeName: \"rank\"\n            AttributeType: \"N\"\n        KeySchema: \n          - AttributeName: \"rank\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.tableName}          \n"]},{"id":129359494,"files":["service: aws-codebuild-slack-notify\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n  environment:\n      SLACK_URL: ${opt:slack_url, 'NOT-SET'}\n\nfunctions:\n  notify:\n    handler: handler.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n"]},{"id":130504376,"files":["service: web-monitoring\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${file(./config.js):region}\n  stage: ${file(./config.js):stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n  environment:\n    STAGE: ${file(./config.js):stage}\n    REGION: ${file(./config.js):region}\n\nfunctions:\n  requestUrl:\n    handler: handler.requestUrl\n    description: Requests the received url and check if it has received content within\n  scrape:\n    handler: handler.scrape\n    description: Iterate over a list urls at a set interval, defined on the schedule rate\n    events:\n      - schedule: ${file(./config.js):rate}\n\npackage:\n  exclude:\n    - tests/**"]},{"id":106044255,"files":["# Welcome to Serverless!\n#\n\nservice: aws-nodejs\n\npackage:\n  include:\n    - lib\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: ${env:AWS_REGION}\n  profile: ${env:AWS_PROFILE}\n\n  environment:\n    API_TOKEN: ${env:API_TOKEN}\n    NOTIFICATION_CHAT: ${env:NOTIFICATION_CHAT}\n    IOT_HOST: ${env:IOT_HOST}\n\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:Get*\"\n       Resource:\n         - \"arn:aws:s3:::${env:PHOTO_BUCKET}/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:*\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  telegramSendPhoto:\n    handler: photo.handler\n    events:\n      - s3:\n          bucket: ${env:PHOTO_BUCKET}\n          event: s3:ObjectCreated:Put\n\n  telegramMotionActivated:\n    handler: notify.motionActivated\n    environment:\n      MSG_MOTION_ACTIVATED: ${env:MSG_MOTION_ACTIVATED}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'motion-acivated'\"\n          enabled: true\n\n  telegramButtonClicked:\n    handler: button.handler\n    environment:\n      MSG_BUTTON_CLICKED: ${env:MSG_BUTTON_CLICKED}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'button-click'\"\n          enabled: true\n\n  telegramMotionDeactivated:\n    handler: notify.motionDectivated\n    environment:\n      MSG_MOTION_DEACTIVATED: ${env:MSG_MOTION_DEACTIVATED}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'motion-deactivated'\"\n          enabled: true\n\n  telegramAdminConnected:\n    handler: notify.adminConnected\n    environment:\n      MSG_ADMIN_CONNECTED: ${env:MSG_ADMIN_CONNECTED}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'modem-admin-connected'\"\n          enabled: true\n\n  telegramAdminDisconnected:\n    handler: notify.adminDisconnected\n    environment:\n      MSG_ADMIN_DISCONNECTED: ${env:MSG_ADMIN_DISCONNECTED}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'modem-admin-disconnected'\"\n          enabled: true\n\n  telegramCommand:\n    handler: command.elaborateCommand\n    environment:\n      ADMIN_USERNAME: ${env:ADMIN_USERNAME}\n      MSG_NOT_A_COMMAND: ${env:MSG_NOT_A_COMMAND}\n      MSG_COMMAND_NOT_FOUND: ${env:MSG_COMMAND_NOT_FOUND}\n      MSG_WELCOME: ${env:MSG_WELCOME}\n      MSG_ACK: ${env:MSG_ACK}\n    events:\n      - http:\n          path: bot/update\n          integration: lambda\n          method: post\n"]},{"id":109563795,"files":["service: alexa-skill-hello-world-advanced\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 256\n  cfLogs: true\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource:\n          - '*'\n\ncustom: ${file(./src/config.js)}\n\nplugins:\n  - serverless-webpack\n\nresources:\n  Resources:\n    HelloWorldAdvancedSessionTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n        TableName: ${self:custom.INFRASTRUCTURE.sessionTable}\n\n    HelloWorldAdvancedBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.INFRASTRUCTURE.fileStorage}\n        AccessControl: Private\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n              - GET\n            AllowedOrigins:\n              - http://ask-ifr-download.s3.amazonaws.com\n              - https://ask-ifr-download.s3.amazonaws.com\n    HelloWorldAdvancedBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: HelloWorldAdvancedBucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: HelloWorldAdvancedBucket\n                    - '/*'\n\nfunctions:\n  skill:\n    handler: src/index.handler\n    description: Alexa hello world skill\n    events:\n      - alexaSkill\n"]},{"id":114992743,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: holidayAPI\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: v0\n  region: eu-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n#  hello:\n#    handler: app.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n# NOTE SERVERLESS OFFILINE NEEDS TO BE TEH LAST PLUGIN GIVEN IN THE LIST!!!"]},{"id":123504835,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: alexia-starter-kit\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\npackage:\n  exclude:\n    - coverage\n    - speechAssets\n#   artifact: .serverless/alexia-starter-kit.zip\n\n#   plugins:\n    # - serverless-alexa-plugin\n\nfunctions:\n  alexa:\n    handler: server/lambda-handler.handler\n    # events:\n    #   - alexaSkillsKit\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":126483876,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: fm-kang-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-northeast-1\n  profile: kang-service\n  memorySize: 128\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  crawler:\n    handler: handler.crawler\n    events:\n      - http:\n          path: schedule\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(6 hours)\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-csharp # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore1.0\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp1.0/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-fsharp # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore1.0\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp1.0/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: FsharpHandlers::AwsDotnetFsharp.Handler::hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go-dep # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n  world:\n    handler: bin/world\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n  world:\n    handler: bin/world\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-groovy-gradle # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/hello.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-gradle # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/hello.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-maven # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-gradle # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/libs/hello-dev-all.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-maven # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-nodejs-gradle # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nfunctions:\n  hello:\n    handler: build/index.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service:\n  name: aws-nodejs-ecma-script\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n","service:\n  name: aws-nodejs-typescript\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python3 # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-scala-sbt # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n# Make sure to run \"sbt assembly\" to create a jar file\n# with all your dependencies and put that jar file name here.\npackage:\n  artifact: target/scala-2.12/hello.jar\n\nfunctions:\n  hello:\n    handler: hello.Handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n","service: gcf-nodejs # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: capitalize\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: nodejs6\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  capitalize:\n    handler: handler.capitalize\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: hello-world\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello:\n    handler: handler.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-nodejs # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    Functions can be defined using sequences rather than referring \n#    to a handler.\n#    sequence:\n#      - parse_input\n#      - do_some_algorithm\n#      - construct_output\n\n#    The following are a few example events you can configure\n#    Check the event documentation for details\n#    events:\n#      - http: GET /api/users/create\n#      - trigger: trigger_name\n\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters: \n#        hello: world    \n#    alarm_trigger:\n#      parameters: \n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters: \n#       cron: '*/8 * * * * *'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-php # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: php\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    Functions can be defined using sequences rather than referring \n#    to a handler.\n#    sequence:\n#      - parse_input\n#      - do_some_algorithm\n#      - construct_output\n\n#    The following are a few example events you can configure\n#    Check the event documentation for details\n#    events:\n#      - http: GET /api/users/create\n#      - trigger: trigger_name\n\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters: \n#        hello: world    \n#    alarm_trigger:\n#      parameters: \n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters: \n#       cron: '*/8 * * * * *'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-python # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: python\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    Functions can be defined using sequences rather than referring \n#    to a handler.\n#    sequence:\n#      - parse_input\n#      - do_some_algorithm\n#      - construct_output\n\n#    The following are a few example events you can configure\n#    Check the event documentation for details\n#    events:\n#      - http: GET /api/users/create\n#      - trigger: trigger_name\n\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters: \n#        hello: world    \n#    alarm_trigger:\n#      parameters: \n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters: \n#       cron: '*/8 * * * * *'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-swift # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: swift\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: ping.main\n\n#    Functions can be defined using sequences rather than referring \n#    to a handler.\n#    sequence:\n#      - parse_input\n#      - do_some_algorithm\n#      - construct_output\n\n#    The following are a few example events you can configure\n#    Check the event documentation for details\n#    events:\n#      - http: GET /api/users/create\n#      - trigger: trigger_name\n\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters: \n#        hello: world    \n#    alarm_trigger:\n#      parameters: \n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters: \n#       cron: '*/8 * * * * *'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-java8\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    #environment: <env-XXXX> # NOTE: Remember to add the environment ID\n\nfunctions:\n  hello:\n    runtime: java8\n    handler: com.serverless.Handler\n    memory: 128\n    timeout: 30\n    access: private\n#     cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables: {\n#      Key: \"Value\",\n#    }\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-nodejs # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    #environment: <env-XXXX> # NOTE: Remember to add the environment ID\n\nfunctions:\n  hello:\n    runtime: nodejs8.3\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#     cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables: {\n#      Key: \"Value\",\n#    }\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-python # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    #environment: <env-XXXX> # NOTE: Remember to add the environment ID\n\nfunctions:\n  hello:\n    runtime: python2.7\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#     cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables: {\n#      Key: \"Value\",\n#    }\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-ruby # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    #environment: <env-XXXX> # NOTE: Remember to add the environment ID\n\nfunctions:\n  hello:\n    runtime: ruby2.4.1\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    cron:  # Setup scheduled trigger with cron expression\n#     active: true\n#     value: '* * * * *'\n#    environmentVariables: {\n#      Key: \"Value\",\n#    }\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice:\n  name: webtasks-nodejs  # NOTE: update this with your service name\n\nprovider:\n  name: webtasks\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nfunctions:\n  main:\n    handler: handler\n\nplugins:\n  - '@webtask/serverless-webtasks'\n"]},{"id":127813458,"files":["service: lambda-debug-example\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-sam\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: dynamodb:scan\n      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/lotr\n\nfunctions:\n  findCharactersByTag:\n    handler: functions/findCharactersByTag.handler\n    events:\n      - http:\n          path: /lotr/search\n          method: post\n    environment:\n      LOTR_TABLE: lotr\n\nresources:\n  Resources:\n    lotrTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: lotr\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":119037152,"files":["service: skill-sample-nodejs-hello-world\n\nplugins:\n  - serverless-webpack\n  - serverless-mocha-plugin\n\ncustom: ${file(./.env.${opt:config, 'dev'}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stackTags:\n    APPLICATION: skill-sample-nodejs-hello-world\n    TYPE: skill\n\n  stage: ${opt:stage, 'dev'}\n  region: ${self:custom.AWS_REGION}\n  profile: ${self:custom.AWS_PROFILE}\n  memorySize: ${self:custom.AWS_MEMORY_SIZE, '256'}\n  cfLogs: true\n\nfunctions:\n  skill:\n    handler: index.handler\n    description: Alexa hello world skill\n    events:\n      - alexaSkill\n    environment:\n      DEBUG: ${self:custom.DEBUG}\n      NODE_ENV: ${self:custom.NODE_ENV, 'dev'}\n      SKILL_FILE_STORAGE: ${self:custom.SKILL_FILE_STORAGE}\n      SKILL_APP_ID: ${self:custom.SKILL_APP_ID}\n\nresources:\n  Resources:\n    SkillLogGroup:\n      Type: AWS::Logs::LogGroup\n      Properties:\n        RetentionInDays: \"30\"\n"]},{"id":126418556,"files":["service: the-best-sushi-app\npackage:\n  individually: true\n  excludeDevDependencies: true\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  environment:\n      ORDER_TABLE: order-theBestSushiApp-${opt:stage, self:provider.stage}\n      TOKEN_TABLE: token-theBestSushiApp-${opt:stage, self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource:\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TOKEN_TABLE}\"\n\nfunctions:\n  addOrder:\n    description: Adds a new order\n    handler: handlers/add.addOrder\n    events:\n      - http:\n          path: order/add\n          method: post\n          cors: true\n\n  setAsDelivered:\n    description: Updates an order as delivered\n    handler: handlers/delivered.setAsDelivered\n    events:\n      - http:\n          path: delivery/order/{id}/delivered\n          method: get\n          cors: true\n\n  setAsReceived:\n    description: Updates an order as received\n    handler: handlers/received.setAsReceived\n    events:\n      - http:\n          path: client/order/{id}/received\n          method: get\n          cors: true\n\n  notifyOwner:\n    description: Notifies the Sushi owner through Firebase Cloud Messaging whenever he gets a new order, or when that order is received or delivered\n    handler: handlers/notify.notifyOwner\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - orderTable\n              - StreamArn\n          batchSize: 1\n\n  addToken:\n    description: Saves the Sushi owner app token for receiving notifications that later the service notifyOwner uses for pushing new messages\n    handler: handlers/token.addToken\n    events:\n      - http:\n          path: subscriber/{token}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    orderTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.ORDER_TABLE}\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n    tokenTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.TOKEN_TABLE}\n        AttributeDefinitions:\n          -\n            AttributeName: subscriber\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: subscriber\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":124705177,"files":["service: notes-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\n  # 'iamRoleStatement' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam"]},{"id":126248044,"files":["service: happy-hacking-bro\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  happyHackingBro:\n    handler: handler.happyHackingBro\n    events:\n      - http:\n          path: bro\n          method: get"]},{"id":123314259,"files":["service:\n  name: serverless-ssr-hbs\n\nframeworkVersion: \">=1.26.1\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# Enable auto-packing of external modules\n# See https://serverless-stack.com/chapters/add-support-for-es6-es7-javascript.html\ncustom:\n  webpackIncludeModules: true\n  memorySizes: # TODO Check how much is actually needed\n    development: 256\n    production: 256\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'development'}\n#  region: ${opt:region, 'eu-west-3'}\n  memorySize: ${self:custom.memorySizes.${self:provider.stage}}\n#  deploymentBucket:\n#    name: serverless-ssr-hbs\n#    serverSideEncryption: AES256\n  environment:\n    NODE_ENV: ${self:provider.stage}\n\nfunctions:\n  status:\n    handler: src/functions/status/status.handler\n    events:\n      - http:\n          method: get\n          path: status\n\n  index:\n    handler: src/functions/index/index.handler\n    events:\n      - http:\n          method: get\n          path: /\n"]},{"id":122907094,"files":["service: aws-node-github-webhook-listener\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    GITHUB_WEBHOOK_SECRET: REPLACE-WITH-YOUR-SECRET-HERE\n\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n"]},{"id":122012629,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n\n  home:\n    handler: handler.home\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: home\n          method: get\n          cors: true\n"]},{"id":104140541,"files":["service: serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    ADMIN: ${file(env.yml):ADMIN}\n    SECRET: ${file(env.yml):SECRET}\n    API_URL: ${file(env.yml):API_URL}\n\nregion: us-east-1\n\nfunctions:\n  update:\n    handler: handler.update\n    events:\n      - schedule: rate(6 hours)\n"]},{"id":111259279,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: scrapeEvents\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  scrapeEvents:\n    handler: handler.scrapeEvents\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":106426458,"files":["service: serverless-graphql-apollo\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  serverless-offline:\n    port: 4000\n    babelOptions:\n      presets: [\"es2015\", \"stage-2\"]\n  webpackIncludeModules: true\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  graphiql:\n    handler: handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n"]},{"id":98817236,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n","service: gcp # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: gkr-demo\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/account.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  \n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  \n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n      \n"]},{"id":96210047,"files":["service: stakinet\n\npackage:\n  exclude:\n    - db.ref/**\n    - handler.ref.js\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: development\n  region: ap-northeast-1\n  environment:\n    LONESMOKE_MONGO_URI: ${file(./config.yml):lonesmokeMongoUri}\n    NJ2JP_MONGO_URI: ${file(./config.yml):nj2jpMongoUri}\n    PASSWORD: ${file(./config.yml):password}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n\nfunctions:\n  modifyMongo:\n    handler: handler.modifyMongo\n    vpc:\n      securityGroupIds:\n        - ${file(./config.yml):securityGroupId}\n      subnetIds:\n        - ${file(./config.yml):subnetId}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n    events:\n      - http:\n          path: modify\n          method: post\n          integration: lambda\n          memorySize: 256\n          timeout: 10\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n"]},{"id":79400252,"files":["service: website-location-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: dev\n  region: us-east-1\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:Query\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n  environment:\n    CURRENT_VERSION: ${env:CURRENT_VERSION}\n    LOCATION_TABLE: ${self:custom.table.locations}\n    NODE_ENV: ${self:custom.env.${self:custom.stage}}\n    UPDATE_USER: ${env:YO_UPDATE_USER}\n\nplugins:\n  - serverless-build-plugin\n  - serverless-dynamodb-local\n  - serverless-mocha-plugin\n  - serverless-offline\n\ncustom:\n  # variables\n  domain: thekelvinliu.com\n  env:\n    dev: development\n    prod: production\n  stage: ${opt:stage, self:provider.stage}\n  table:\n    locations: ${self:service}-${self:custom.stage}-locations\n  # serverless-dynamodb-local\n  dynamodb:\n    start:\n      migration: true\n  # serverless-build-plugin\n  build:\n    deploy: true\n    modules:\n      exclude:\n        - aws-sdk\n    method: bundle\n    babel: true\n    babili: true\n    sourceMaps: false\n    include:\n      - lib.js\n    functions:\n      getLocation:\n        include:\n          - getLocation.js\n      updateLocation:\n        include:\n          - updateLocation.js\n\nfunctions:\n  getLocation:\n    name: ${self:service}-${self:custom.stage}-get-handler\n    handler: getLocation.handler\n    events:\n      - http:\n          path: get\n          method: GET\n          cors: true\n  updateLocation:\n    name: ${self:service}-${self:custom.stage}-update-handler\n    handler: updateLocation.handler\n    events:\n      - http: GET update\n\nresources:\n  Resources:\n    locationsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.table.locations}\n        KeySchema:\n          - AttributeName: ver\n            KeyType: HASH\n          - AttributeName: createdDate\n            KeyType: RANGE\n        AttributeDefinitions:\n          - AttributeName: ver\n            AttributeType: N\n          - AttributeName: createdDate\n            AttributeType: N\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 1\n"]},{"id":98772197,"files":["\nservice: aws-start-rds\npackage:\n  include:\n   - lib/**\n  exclude:\n    - src/**\n    - test/**\n    - reports/**\n    - package.json\n    - .gitignore\n    - .babelrc\n    - .eslintrc.json\n    - README.md\n    - .gitignore\n    - .nvmrc\n    - yarn.lock\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # you can overwrite defaults here\n  #  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n        - rds:*\n    Resource: \"*\"\n\nfunctions:\n      start:\n        handler: lib/index.start\n        events:\n         - schedule:\n             name: start-rds-scheduler\n             description: 'scheduled start fn for rds instances'\n             rate: cron(0 21 ? * SUN-THU *)\n"]},{"id":98446069,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: button-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  # you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iot:UpdateCertificate\n        - iot:CreatePolicy\n        - iot:AttachPrincipalPolicy\n        - iot:AttachThingPrincipal\n        - iot:UpdateThingShadow\n        - iot:GetThingShadow\n      Resource: \"*\"\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-west-1\n\nplugins:\n  - serverless-plugin-scripts\n\ncustom:\n  scripts:\n    hooks:\n      'after:deploy:resources': ./init_iot_logging.sh\n  cacert: ${file(../cacert/cacertid.yml)}\n  jsvars: ${file(variables.js)}\n  stage: ${opt:stage, self:provider.stage}\n  topicNamePrefix: iotbutton\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  registerDevice:\n    handler: registerDevice/handler.registerDevice\n    environment:\n      region: ${self:provider.region}\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/events/certificates/registered/${self:custom.cacert.caCertificateId}'\"\n  updateButtonStatusFromIOTButton:\n    handler: updateButtonStatus/iotButtonHandler.pushHandler\n    environment:\n      region: ${self:provider.region}\n      iotEndpoint: ${self:custom.jsvars.iot.endpoint}\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'iotbutton/+'\"\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    iotLogRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"iot.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSIoTLogging\n    buttonThing:\n      Type: AWS::IoT::Thing\n      Properties:\n        ThingName: button\n    cognitoIdentityPoolForApp:\n      Type: \"AWS::Cognito::IdentityPool\"\n      Properties:\n        IdentityPoolName: ButtonAppIdentityPool\n        AllowUnauthenticatedIdentities: true\n    cognitoRoleAttachment:\n      Type: \"AWS::Cognito::IdentityPoolRoleAttachment\"\n      Properties:\n        IdentityPoolId:\n          Ref: cognitoIdentityPoolForApp\n        Roles:\n          unauthenticated:\n            Fn::GetAtt:\n              - appUnauthenticatedRole\n              - Arn\n          authenticated:\n            Fn::GetAtt:\n              - appUnauthenticatedRole\n              - Arn\n    appUnauthenticatedRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Action: sts:AssumeRoleWithWebIdentity\n              Effect: \"Allow\"\n              Condition:\n                StringEquals:\n                  cognito-identity.amazonaws.com:aud:\n                    Ref: cognitoIdentityPoolForApp\n                ForAnyValue:StringLike:\n                  cognito-identity.amazonaws.com:amr: \"unauthenticated\"\n              Principal:\n                Federated: \"cognito-identity.amazonaws.com\"\n        Policies:\n          - PolicyName: appUnauthenticatedPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: \"Allow\"\n                  Action:\n                    - iot:Connect\n                  Resource: \"arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:client/button/app/*\"\n                - Effect: \"Allow\"\n                  Action:\n                    - iot:GetThingShadow\n                    - iot:UpdateThingShadow\n                  Resource: \"arn:aws:iot:eu-west-1:${self:custom.jsvars.accountId}:thing/button\"\n                - Effect: \"Allow\"\n                  Action:\n                    - iot:Subscribe\n                  Resource:\n                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topicfilter/${self:custom.topicNamePrefix}/*\n                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topicfilter/$aws/things/button/*\n                - Effect: \"Allow\"\n                  Action:\n                    - iot:Receive\n                    - iot:Publish\n                  Resource:\n                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topic/${self:custom.topicNamePrefix}/*\n                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topic/$aws/things/button/*\n    appHostingBucket:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: PublicRead\n        Tags:\n          - Key: buttonApp\n            Value: ${self:custom.stage}\n    appHostingBucketPolicy:\n      Type: 'AWS::S3::BucketPolicy'\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Sid: PublicReadForGetBucketObjects\n              Effect: Allow\n              Principal: '*'\n              Action: 's3:GetObject'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: appHostingBucket\n                    - /*\n        Bucket:\n          Ref: appHostingBucket\n    appCloudFront:\n      Type: \"AWS::CloudFront::Distribution\"\n      Properties:\n        DistributionConfig:\n          Comment: CloudFront for button app mainly in order to enable HTTPS\n          DefaultCacheBehavior:\n            DefaultTTL: 60\n            ForwardedValues:\n              QueryString: true\n            MaxTTL: 60\n            MinTTL: 60\n            TargetOriginId: appBucket\n            ViewerProtocolPolicy: redirect-to-https\n          DefaultRootObject: index.html\n          Enabled: true\n          Origins:\n            - DomainName:\n                Fn::Join:\n                  - \"\"\n                  - - Ref: appHostingBucket\n                    - \".s3.amazonaws.com\"\n              Id: appBucket\n              S3OriginConfig:\n                OriginAccessIdentity: ''\n          PriceClass: PriceClass_200\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n\n  # iotPermission:\n  #   Type: \"AWS::Lambda::Permission\"\n  #   Properties:\n  #     Action: lambda:InvokeFunction\n  #     FunctionName:\n  #       Fn::GetAtt:\n  #         - \"RegisterDeviceLambdaFunction\"\n  #         - \"Arn\"\n  #     Principal: \"iot.amazonaws.com\"\n  #     SourceAccount:\n  #       Ref: \"AWS::AccountId\"\n  # registerDeviceRule:\n  #   Type: \"AWS::IoT::TopicRule\"\n  #   Properties:\n  #     RuleName: buttonRegisterDeviceRule\n  #     TopicRulePayload:\n  #       Actions:\n  #         - Lambda:\n  #             FunctionArn:\n  #               Fn::GetAtt:\n  #                 - \"RegisterDeviceLambdaFunction\"\n  #                 - \"Arn\"\n  #       Description: Trigger device auto registration function\n  #       RuleDisabled: False\n  #       Sql: \"SELECT * FROM '$aws/events/certificates/registered/${self:custom.cacert.caCertificateId}'\"\n\n  Outputs:\n    AppURL:\n      Description: \"URL for the button app\"\n      Value:\n        Fn::Join:\n          - \"\"\n          - - \"https://\"\n            - Fn::GetAtt:\n              - appCloudFront\n              - DomainName\n      Export:\n        Name:\n          Fn::Join:\n            - \"\"\n            - - Ref: AWS::StackName\n              - \":\"\n              - \"AppURL\"\n"]},{"id":92611652,"files":["service: nacarat\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    #port: 4001\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  query:\n    handler: handler.queryProducts\n    events:\n      - http:\n          path: /products\n          method: GET\n          cors: true\n  get:\n    handler: handler.getProduct\n    events:\n      - http:\n          path: /products/{id}\n          method: GET\n          cors: true\n  create:\n    handler: handler.createProduct\n    events:\n      - http:\n          path: /products\n          method: POST\n          cors: true\n"]},{"id":89024807,"files":["service: anikunchan-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  getToken:\n    handler: handlers/ani-handler.getToken\n    environment:\n      ANILIST_CLIENT_ID: ${file(env.yml):ANILIST_CLIENT_ID}\n      ANILIST_CLIENT_SECRET: ${file(env.yml):ANILIST_CLIENT_SECRET}\n    events:\n      - http:\n          path: token\n          method: get\n          cors: true\n  googleImageSearch:\n    handler: handlers/gi-handler.googleImageSearch\n    environment:\n      GOOGLE_CSE_KEY: ${file(env.yml):GOOGLE_CSE_KEY}\n      GOOGLE_CSE_CX: ${file(env.yml):GOOGLE_CSE_CX} \n    events:\n      - http:\n          path: image\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                q: true\n                start: true\n  youtubeSearch:\n    handler: handlers/yt-handler.youtubeSearch\n    environment:\n      YOUTUBE_KEY: ${file(env.yml):YOUTUBE_KEY}\n    events:\n      - http:\n          path: video\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                q: true\n                pageToken: false"]},{"id":89476292,"files":["service: ethan\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  region: ${env:AWS_REGION}\n  runtime: nodejs6.10\n  stage: beta\n\nfunctions:\n  hello:\n    description: Says hello!\n    handler: handler.hello\n  price:\n    description: Gets the current ether price for supported currencies\n    handler: handler.price\n"]},{"id":93245533,"files":["service: train-api\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n\nfunctions:\n  stations:\n    handler: handler.stations\n    events:\n      - http:\n          path: v1/stations\n          method: get\n          cors: true\n  current:\n    handler: handler.current\n    events:\n      - http:\n          path: v1/current\n          method: get\n          cors: true\n  stationData:\n    handler: handler.stationData\n    events:\n      - http:\n          path: v1/stationData\n          method: get\n          cors: true\n  stationSearch:\n    handler: handler.stationSearch\n    events:\n      - http:\n          path: v1/stationSearch\n          method: get\n          cors: true\n  trainMovements:\n    handler: handler.trainMovements\n    events:\n      - http:\n          path: v1/trainMovements\n          method: get\n          cors: true\n  haconTrains:\n    handler: handler.haconTrains\n    events:\n      - http:\n          path: v1/haconTrains\n          method: get\n          cors: true"]},{"id":95340690,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    TIMER_ARN: ${self:resources.Outputs.Timer.Value}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\ncustom:\n  accountId: 0\n\nfunctions:\n  startTimer:\n    handler: handler.startTimer\n    events:\n      - http:\n          path: start-timer\n          method: get\n  sendNotification:\n    handler: handler.sendNotification\n\nstepFunctions:\n  stateMachines:\n    timer:\n        name: timer\n        definition:\n          StartAt: wait_using_seconds\n          States: \n            wait_using_seconds: \n              Type: Wait\n              Seconds: 60\n              Next: notify\n            notify: \n              Type: Task\n              Resource: arn:aws:lambda:${opt:region}:${self:custom.accountId}:function:${self:service}-${opt:stage}-sendNotification\n              End: true\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n  Outputs:\n    Timer:\n      Description: The ARN of the timer machine\n      Value:\n        Ref: Timer\n\nplugins:\n  - serverless-offline\n  - serverless-step-functions"]},{"id":95264467,"files":["service: sudo-mongods-products-rest-api\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\ncustom:\n  config: ${file(./config/${opt:stage, self:provider.stage}.yml):config}\n  webpackIncludeModules: true\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:table/${self:provider.environment.PRODUCTS_TABLE}\n\nfunctions:\n  create:\n    handler: handler.createProduct\n    environment:\n      PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    events:\n      - http:\n          path: products\n          method: post\n          cors: true\n  list:\n    handler: handler.listProducts\n    environment:\n      PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    events:\n      - http:\n          path: products\n          method: get\n          cors: true\n  get:\n    handler: handler.getProduct\n    environment:\n      PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    events:\n      - http:\n          path: products/{id}\n          method: get\n          cors: true\n  update:\n    handler: handler.updateProduct\n    environment:\n      PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    events:\n      - http:\n          path: products/{id}\n          method: put\n          cors: true\n  delete:\n    handler: handler.deleteProduct\n    environment:\n      PRODUCTS_TABLE: ${self:custom.config.productsTable}\n    events:\n      - http:\n          path: products/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.config.productsTable}\n"]},{"id":94024287,"files":["service: alexa-helloworld\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  alexaHandler:\n    handler: index.handler\n    events:\n      - alexaSkill\n"]},{"id":84912514,"files":["service: internal-resource-monitor\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  secrets: ${file(secrets.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: \"${self:service}-${opt:stage}-resourcesTable\"\n    TIMEOUT: 15\n    # These should eventually be loaded from a file, but it seems like there are some issues\n    # preventing loading variables from files and I just gave up.\n    # Will probably fix eventually.\n    # https://github.com/serverless/serverless/issues/3369\n    PUSHOVER_APP_KEY: ${env:PUSHOVER_IRM_APP_KEY}\n    PUSHOVER_USER_KEY: ${env:PUSHOVER_USER_KEY}\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\n\nfunctions:\n  checkAvailability:\n    handler: functions/checkAvailability.handler\n    events:\n      - schedule: rate(15 minutes)\n\n  updateTimestamp:\n    handler: functions/updateTimestamp.handler\n    events:\n      - http:\n          path: update/{name}\n          method: get\n\n  \nresources:\n  Resources:\n    ResourcesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: name\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":91462848,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-meow\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless-meow\n  region: us-east-2\n\npackage:\n  exclude:\n    - scripts/**\n\nresources:\n  Resources:\n    KittehPhotoList:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: KittehPhotoList\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    KittehPhotoListIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: KittehPhotoList\n      Properties:\n        PolicyName: serverless-meow-lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/KittehPhotoList\n        Roles:\n          - Ref: IamRoleLambdaExecution\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  select_kitteh:\n    handler: handler.select_kitteh\n    events:\n      - s3: \n          bucket: ${env:BUCKET_NAME}\n          event: s3:ObjectRemoved:*\n      - s3: \n          bucket: ${env:BUCKET_NAME}\n          event: s3:ObjectCreated:*\n  hello_kitteh:\n    handler: handler.hello_kitteh\n    events:\n      - http:\n          path: /\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":90480770,"files":["service: reading-list-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\n\n  # 'iamRoleStatement' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the handdler functions\n  # - path: url endpoint\n  # - method: [GET, POST, DELETE] requests\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate the api via Cognito User Pool. Update the 'arn'\n  #     with your own User Pool ARN\n  create:\n      # Defines an HTTP API endpoint that calls the create function in create.js\n      # - path: url path is /reading/{id}\n      # - method: GET request\n      handler: create.create\n      events:\n          - http:\n              path: readings\n              method: post\n              cors: true\n              authorizer:\n                  arn: arn:aws:cognito-idp:us-west-2:017521755216:userpool/us-west-2_xGsPD7Fyy\n  get:\n      # Defines an HTTP API endpoint that calls the get function in get.js\n      # - path: url path is /reading/{id}\n      # - method: GET request\n      handler: get.get\n      events:\n          - http:\n              path: reading/{id}\n              method: get\n              cors: true\n              authorizer:\n                  arn: arn:aws:cognito-idp:us-west-2:017521755216:userpool/us-west-2_xGsPD7Fyy\n  getAll:\n      # Defines an HTTP API endpoint that calls the getAll function in list-reading.js\n      # - path: url path is /readings\n      # - method: GET request\n      handler: getAll.getAll\n      events:\n          - http:\n              path: readings\n              method: get\n              cors: true\n              authorizer:\n                  arn: arn:aws:cognito-idp:us-west-2:017521755216:userpool/us-west-2_xGsPD7Fyy\n  update:\n      # Defines an HTTP API endpoint that calls the update function in update.js\n      # - path: url path is /readings\n      # - method: GET request\n      handler: update.update\n      events:\n          - http:\n              path: readings/{id}\n              method: put\n              cors: true\n              authorizer:\n                  arn: arn:aws:cognito-idp:us-west-2:017521755216:userpool/us-west-2_xGsPD7Fyy\n  delete:\n      # Defines an HTTP API endpoint that calls the delete function in delete.js\n      # - path: url path is /readings\n      # - method: GET request\n      handler: delete.deleteItem\n      events:\n          - http:\n              path: readings/{id}\n              method: delete\n              cors: true\n              authorizer:\n                  arn: arn:aws:cognito-idp:us-west-2:017521755216:userpool/us-west-2_xGsPD7Fyy\n"]},{"id":81016210,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: myService\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n  region: eu-west-1\n\n# you can add statements to the Lambda function's IAM Role here\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/CedarUsers\"\n\n# you can define service wide environment variables here\n# environment:\n#  DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  contact:\n    handler: handler.contact\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nresources:\n  Resources:\n    CedarUserz:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: CedarUserz\n"]},{"id":84691248,"files":["service: serverless-slack\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \"=1.7.0\"\n\ncustom:\n  defaultRegion: us-east-1\n  defaultStage: dev\n  webpackIncludeModules: true # enable auto-packing of external modules\n\nprovider:\n  environment:\n    DYNAMODB_TABLE: ${{self:service}}-${{self:provider.stage}}-messages\n  memorySize: 256\n  name: aws\n  profile: serverless-slack\n  region: ${{opt:region, self:custom.defaultRegion}}\n  runtime: nodejs4.3\n  stage: ${{opt:stage, self:custom.defaultStage}}\n  timeout: 30\n  variableSyntax: '\\${{([\\s\\S]+?)}}'\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:DescribeEndpoint\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"sts:AssumeRole\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:provider.environment.DYNAMODB_TABLE}}\"\n\nfunctions:\n  iotKeys:\n    handler: handler.iotKeys\n    events:\n      - http:\n          path: iot/keys\n          method: get\n\nresources:\n  Resources:\n    ServerlessSlackMessages:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${{self:provider.environment.DYNAMODB_TABLE}}\n        AttributeDefinitions:\n          -\n            AttributeName: Topic\n            AttributeType: S\n          -\n            AttributeName: Timestamp\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: Topic\n            KeyType: HASH\n          -\n            AttributeName: Timestamp\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n\n    IoTRole:\n     Type: AWS::IAM::Role\n     Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: Allow\n              Principal:\n                Service:\n                  - iot.amazonaws.com\n              Action:\n                - sts:AssumeRole\n\n    IoTRolePolicies:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: IoTRole_Policy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: Allow\n              Action:\n                - dynamodb:PutItem\n              Resource: \"*\"\n        Roles: [{ Ref: IoTRole }]\n\n    IoTToDyanmoDBRule:\n      Type: AWS::IoT::TopicRule\n      Properties:\n        TopicRulePayload:\n          RuleDisabled: false\n          Sql: \"SELECT * FROM '${{self:provider.stage}}/serverlessslack/chat'\"\n          Actions:\n            -\n              DynamoDB:\n                TableName: { Ref: ServerlessSlackMessages }\n                HashKeyField: \"Topic\"\n                HashKeyValue: \"${topic()}\"\n                RangeKeyField: \"Timestamp\"\n                RangeKeyValue: \"${timestamp()}\"\n                RoleArn: { Fn::GetAtt: [ IoTRole, Arn ] }\n\nplugins:\n  - serverless-webpack\n"]},{"id":79406500,"files":["custom: ${file(./env.yml)}\n\nservice: ${self:custom.serviceName}\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n  memorySize: 128\n\nfunctions:\n  create:\n    handler: handlers/index.create\n    events:\n      - http:\n          path: lists\n          method: post\n          integration: lambda\n          cors: true\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  list:\n    handler: handlers/index.list\n    events:\n      - http:\n          path: lists\n          method: get\n          integration: lambda\n          cors: true\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  get:\n    handler: handlers/index.get\n    events:\n      - http:\n          path: lists/{id}\n          method: get\n          integration: lambda\n          cors: true\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  update:\n    handler: handlers/index.update\n    events:\n      - http:\n          path: lists/{id}\n          method: put\n          integration: lambda\n          cors: true\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  delete:\n    handler: handlers/index.deleteHandler\n    events:\n      - http:\n          path: lists/{id}\n          method: delete\n          integration: lambda\n          cors: true\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n\n# DynamoDB settings\nresources:\n  Resources:\n    ListsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n          -\n            AttributeName: userId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":81963776,"files":["service: hello-serverless\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: arn:aws:dynamodb:*:*:table/helloTable\n\nfunctions:\n  addHello:\n    handler: handler.hello\n    events:\n      - http:\n          method: post\n          path: hello\n          integration: lambda-proxy\n  getHellos:\n    handler: handler.hellos\n    events:\n      - http:\n          method: get\n          path: hellos/{messageId}\n          integration: lambda-proxy\n\nresources:\n  Resources:\n    helloTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: helloTable\n        AttributeDefinitions:\n          - AttributeName: messageId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: messageId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]}]