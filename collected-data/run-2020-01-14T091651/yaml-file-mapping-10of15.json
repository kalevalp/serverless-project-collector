[{"id":128714452,"files":["service:\n  name: what-im-reading-backend\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nfunctions:\n  prismic:\n    handler: prismic.webhook\n    events:\n      - http:\n          method: GET\n          path: prismic\n      - http:\n          method: POST\n          path: prismic\n  kentico:\n    handler: kentico.webhook\n    timeout: 5\n    events:\n      - http:\n          method: GET\n          path: kentico\n      - http:\n          method: POST\n          path: kentico\n\n\ncustom:\n  customDomain:\n    domainName: lambda.fox.engineer\n    basePath: 'reading'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n"]},{"id":123063401,"files":["service: microservice-todo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n\nfunctions:\n  microservice:\n    name: microservice-todo-${self:provider.stage}\n    description: Microservice to todos\n    handler: handler.microservice\n    events:\n      - http:\n          method: POST\n          path: todos\n          cors: true\n      - http:\n          method: GET\n          path: todos\n          cors: true\n    environment:\n      MONGODB_CONNECTION_STRING: ${env:MONGODB_CONNECTION_STRING}\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${self:service}-${self:custom.stage}\n\npackage:\n  exclude:\n    - .env\n    - .vscode/**\n    - scripts/**\n"]},{"id":90268793,"files":["service: users\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-west-2\n\nenvironment:\n  projectId: \"photodeck-f6521\"\n  clientEmail: \"firebase-adminsdk-3x9wd@photodeck-f6521.iam.gserviceaccount.com\"\n  # private key for a free account provided here.  Change to your own personal key.\n  privateKey: \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDqakvvFtiO+sLh\\nM4UnnmqLQpeTNr1RzUaqg9OdbmOFA//zr07CcE7XjPOSa2G+57RUai6f5cwNLIe8\\nAdDGFdh9zvBKQ8OnOs0bDpanp29JjORG8aHSJGb527Q3nu9un7tJiKITWfrdJaE3\\nzoyTjB74JVjniPCuoP+Vw276quh2Ys34+MK5Ny7+m8Xhwzb1hIPr8c6MR4LUqbWC\\n9ouJqJooVj6E5BrmNm/aCPgA8mS0/wsfynjMlK8sHcD68c49h2ScoqNGnSp56FsR\\nJKjp+bfsoDqndLEjGiCzdvqvg3hw6U4SNh9HTZWYuf5TQlRm/568b9fxAwrEuDbn\\nFtf6qEQdAgMBAAECggEALno46AS9l0u8y+3tHrfYJBhl+ThHPSrYMgLFOFekv8DV\\nRLmjggXGfBJkUMmdrb4/EOWkrOthE9OabfpmLIA0Vm1rUy4wYr3T4ON5l3ApLooS\\n0MYj8YhqKmwXRVfr3SEqfx/qErAqfyJw3qHDWZXUphqxj+ak4drmEgmXvXeZc68u\\nQQhHlDhK3UMqHlDH4lHLZPFwboCgK1bIT7oIg8wBA9dQYQpxxWysXKaBKMAbm5rN\\nDmgdINAwCAv+ou/CRpzoLClYLmrVz5+/zpBSBibfFiCjm+AK4Dnu7biMp1ySIjRh\\nixZSgP7JH4C4GkZsOb1eSOtzYU3jVKKt8VPCEJp4eQKBgQD6gtWh+S+NQP7a55vV\\nPrzIQ2aE+UOtJLqKQxd7x/5sMSPZnnpe9QZXGX9urGwyvJQ04V15QulQaVEw6gVI\\nA/kwe1XruLl3aLm+KVY6yzzYPnzo462E1aon/f3eeSGnIlDF95c6lwF3TilqDX0E\\n8Hz1eduoRfzALY9DVnMQWI9FnwKBgQDvjS1mZ4idfnMfq0BwHR2Y7hLYaRvlhyIz\\n1Et+SOKMiQ8+FNA0cEDOxFed6cHN+MOPGRaY1fd6z6TUzj8gy3DVRDhWySGYxsJE\\nNCCItSj4e/vNt0E6Z0UKA3YlygARtx8OyxGuhfQM/N2UfUdomUWMBHw5MEyc5IHp\\nXAr82/hEwwKBgDa320gM8OkOuFxCWNSEZqHrrvn+pFyueBx5OSjtb1JcjXMcXahe\\nJuthg2c+PEf8zvaZ/1vcVLAewQBJLawkSgrf9c2ORNyjQGccCly/ReQKCiioip9I\\nOGmR3iD5HnOuWCxVv2+pykUwCnXCynsIuJK58lPYLbQgf3l66Zk5btoLAoGBAL6i\\nQPDvj56WFJOtOth9syISw9iIvPSJ98P7PCDBa9ie8gxbj91LP6fMRFWcwuhhAW+N\\nbZgvHoUTXX8kqsQ0YhS194fJA/2Knuqb+RAR6wrjz91D6prJt/1iB9HG0QtICWVC\\nYU3bt/3l9YfHst4gq2Hj59+y+iUZC/FjmDLl8sr1AoGBAIro1eekxY7xggswhrIx\\nO1Jy+k8LwHR6C2Wfwdgb4QkXKAv8BQvviMvkOUF9Xchuxfx6i75NuN3x6OiEH94p\\nJdYVGiUKRxABcQ6Tlh/NJlNqBrpkd0qLawtqbSpfw1V6g7Tr0JQvrFuFBBFvBcEd\\nk+HLwJGVqyJ8iTNvDjXVtsq4\\n-----END PRIVATE KEY-----\\n\"\n\nfunctions:\n  userWithPhoneExists:\n    handler: handler.userWithPhoneExists\n    events:\n      - http:\n          path: users/exists\n          method: get\n          integration: lambda-proxy\n          cors: true\n\n  userCreate:\n    handler: handler.userCreate\n    events:\n      - http:\n          path: users\n          method: post\n          integration: lambda-proxy\n          cors: true\n\n  sendOneTimePass:\n    handler: handler.sendOneTimePass\n    events:\n      - http:\n          path: users/send\n          method: post\n          integration: lambda-proxy\n          cors: true\n\n  verifyOneTimePass:\n    handler: handler.verifyOneTimePass\n    events:\n      - http:\n          path: users/verify\n          method: post\n          integration: lambda-proxy\n          cors: true\n"]},{"id":120010807,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-test\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n include:\n   - config/default.json\n exclude:\n   - src\n   - src/**\n#    - exclude-me-dir/**\n\nfunctions:\n  # getVenuesJSON:\n  #   handler: handler.getVenuesJSON\n  #   events:\n  #    - http:\n  #        path: venues.json\n  #        method: post\n  # getVenuesCSV:\n  #   handler: handler.getVenuesCSV\n  #   events:\n  #    - http:\n  #        path: venues.csv\n  #        method: post\n  getVenuesCSVNext:\n    handler: handler.getVenuesCSVNext\n    events:\n     - http:\n         path: v2/venues\n         method: post\n  # getVenuesJSONNext:\n  #   handler: handler.getVenuesJSONNext\n  #   events:\n  #    - http:\n  #        path: v2/venues/json\n  #        method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":113540261,"files":["service: greet\n\nprovider:\n  name: aws\n  description: Greet Service\n  runtime: nodejs6.10\n  stage: prod\n  region: ap-southeast-1\n  profile: email-delivery # Your AWS Profile that contains both the secret and access key\n  memorySize: 128\n  stackTags:\n    Application: 'Salle'\n    Environment: ${self:provider.stage}\n\n  # NOTE: The lambda will be stored in S3 Bucket which we defined.\n  # We do not want every deployment to create a new bucket.\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Sid: LambdaDLQPermissions\n      Effect: Allow\n      Action:\n        - sqs:SendMessage\n      Resource:\n        - Fn::GetAtt:\n          - LambdaFunctionDeadLetterQueue\n          - Arn\n\npackage:\n  exclude:\n    - copyright.js\n    - src/**\n    - .env\n\nfunctions:\n  greet:\n    handler: dist/index.greet\n    # NOTE: Uncomment this to pass environment variables to your application\n    # environment:\n      # API_KEY: ${env:API_KEY}\n    # NOTE: Create a new SNS topic with the name `email-prod`. The function\n    # will be called every time a message is sent to the `email-prod` topic.\n    events:\n      - sns: greet-prod\n    # NOTE: Send the error to dead letter queue\n    # onError: arn:aws:sqs:ap-southeast-1:*:email-dead-letter-queue-${self:provider.stage}\n    # onError currently only supports SNS topic arns due to a race condition when using SQS queue arns and updating the IAM role. Please check the docs for more info.\n\nresources:\n  Resources:\n    GreetLambdaFunction:\n      Type: AWS::Lambda::Function\n      Properties:\n        DeadLetterConfig:\n          TargetArn:\n            Fn::GetAtt:\n              - LambdaFunctionDeadLetterQueue\n              - Arn\n\n    LambdaFunctionDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: greet-dead-letter-queue-${self:provider.stage}\n        MessageRetentionPeriod: 1209600 # 14 days in seconds"]},{"id":112585395,"files":["service: remarkable-place\n\npackage:\n  exclude:\n    - .git/**\n    - .circleci/**\n    - .coverage/**\n    - .docker/**\n    - .dynamodb_data/**\n    - .nyc_output/**\n\ncustom:\n  authorsTableName: ${self:service}-authors-${opt:stage, self:provider.stage}\n  pagesTableName: ${self:service}-pages-${opt:stage, self:provider.stage}\n  sessionsTableName: ${self:service}-sessions-${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/${self:custom.authorsTableName}*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/${self:custom.pagesTableName}*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/${self:custom.sessionsTableName}*\"]]\n\n  environment:\n    # Tables\n    AUTHORS_TABLE: ${self:custom.authorsTableName}\n    PAGES_TABLE: ${self:custom.pagesTableName}\n    SESSIONS_TABLE: ${self:custom.sessionsTableName}\n    # Session\n    SESSION_SECRET: ${ssm:/${self:service}-session-secret-${opt:stage, self:provider.stage}~true}\n    # Github OAuth\n    GITHUB_ORG: ${ssm:/${self:service}-github-org-${opt:stage, self:provider.stage}~true}\n    GITHUB_CLIENT_ID: ${ssm:/${self:service}-github-oauth-client-id-${opt:stage, self:provider.stage}~true}\n    GITHUB_CLIENT_SECRET: ${ssm:/${self:service}-github-oauth-client-secret-${opt:stage, self:provider.stage}~true}\n    GITHUB_OAUTH_REDIRECT_URI: ${ssm:/${self:service}-github-oauth-callback-${opt:stage, self:provider.stage}~true}\n\nfunctions:\n  api:\n    handler: src/app-api/index.handler\n    events:\n      - http: ANY /api\n      - http: 'ANY /api/{proxy+}'\n  oauth:\n    handler: src/app-oauth/index.handler\n    events:\n      - http: ANY /oauth\n      - http: 'ANY /oauth/{proxy+}'\n  web:\n    handler: src/app-web/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    # Authors table\n    AuthorsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: githubId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: GithubIdIndex\n            KeySchema:\n              - AttributeName: githubId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        TableName: ${self:custom.authorsTableName}\n\n    # Pages table\n    PagesDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: authorId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: AuthorIdIndex\n            KeySchema:\n              - AttributeName: authorId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        TableName: ${self:custom.pagesTableName}\n\n    # Sessions table\n    SessionsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.sessionsTableName}\n"]},{"id":110364477,"files":["service: github-shiba-api\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-northeast-1\n\nfunctions:\n  postList:\n    handler: handler.index\n    events:\n      - http:\n          path: users/{id}\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n"]},{"id":103943503,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: \n  name: ${self:custom.serviceName}\n  awsKmsKeyArn: ${self:custom.kmsKeyArn}\n\npackage:\n  individually: true\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  environment:\n    jwtSecret: ${s3:${self:custom.serviceName}-${opt:stage}-secrets/jwtSecret}\n    LOG_LEVEL: debug\n  \n\n  iamRoleStatements:\n    -\n      Effect: Allow\n      Action:\n          - 'kms:Decrypt'\n      Resource: ${self:custom.kmsKeyArn}\n    -\n      Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region}:${self:custom.accountId}:table/*\"\n    -\n      Effect: Allow\n      Action:\n        - rekognition:ListCollections\n        - rekognition:CreateCollection\n        - rekognition:IndexFaces\n        - rekognition:SearchFacesByImage\n      Resource: \"arn:aws:rekognition:${opt:region}:${self:custom.accountId}:collection/*\"\n    -\n      Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.serviceName}-${opt:stage}-photos/*\"\n\n    -\n      Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: ${self:custom.matchesSNSTopicArn}\n\nplugins:\n  - serverless-webpack\n  - serverless-aws-documentation\n  - serverless-dynamodb-autoscaling\n\ncustom:\n  serviceName: ratio-amz-rekognition\n  accountId: ${env:${opt:stage}_AWS_ACCOUNT_ID}\n  kmsKeyArn: ${env:${opt:stage}_AWS_KMS_KEY_ARN}\n  facesMetadataTableName: ${self:custom.serviceName}-${opt:stage}-faces-metadata\n  matchesSNSTopicName: ${self:custom.serviceName}-${opt:stage}-matches-topic\n  matchesSNSTopicArn: arn:aws:sns:${opt:region}:${self:custom.accountId}:${self:custom.matchesSNSTopicName}\n  serviceVersion: ${env:SERVICE_VERSION}\n  capacities:\n    - table: facesMetadataTable\n      read:\n        minimum: 10       # Minimum read capacity\n        maximum: 1000     # Maximum read capacity\n        usage: 0.75       # Targeted usage percentage\n      write:\n        minimum: 10       # Minimum write capacity\n        maximum: 200      # Maximum write capacity\n        usage: 0.5        # Targeted usage percentage\n\n\nfunctions:\n  indexFace:\n    handler: src/handlers/indexFace/index.default\n    memorySize: 128\n    timeout: 30\n    events:\n      - s3:\n          bucket: ${self:custom.serviceName}-${opt:stage}-photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: indexFaces/\n            - suffix: .jpg\n    environment:\n      facesMetadataTable: ${self:custom.facesMetadataTableName}\n\n  searchFaces:\n    handler: src/handlers/searchFaces/index.default\n    memorySize: 128\n    timeout: 30\n    events:\n      - s3:\n          bucket: ${self:custom.serviceName}-${opt:stage}-photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: searchFaces/\n            - suffix: .jpg\n    environment:\n      facesMetadataTable: ${self:custom.facesMetadataTableName}\n      matchesSNSTopic: ${self:custom.matchesSNSTopicArn}\n\n  serviceStatus:\n    handler: src/handlers/serviceStatus/index.default\n    memorySize: 128\n    timeout: 5\n    events:\n      - http:\n          path: /\n          method: GET\n          authorizer: apiAuthorizer\n    environment:\n      serviceVersion: ${self:custom.serviceVersion}\n\n  apiAuthorizer:\n    handler: src/handlers/apiAuthorizer/index.default\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    facesMetadataTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties: \n        AttributeDefinitions: \n          - \n            AttributeName: \"faceId\"\n            AttributeType: \"S\"\n        KeySchema: \n          - \n            AttributeName: \"faceId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput: \n          ReadCapacityUnits: \"10\"\n          WriteCapacityUnits: \"10\"\n        TableName: \"${self:custom.facesMetadataTableName}\"\n\n    matchesSNSTopic:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: \"${self:custom.matchesSNSTopicName}\"\n        Subscription:\n          - Endpoint: \"${env:${opt:stage}_SNS_EMAIL}\"\n            Protocol: \"email\""]},{"id":99463804,"files":["service: thumbnail\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${env:AWS_REGION}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n  environment:\n    SOURCE_BUCKET: ${env:SOURCE_BUCKET}\n    SIZES: ${env:SIZES}\n    DESTINATION_BUCKET: ${env:DESTINATION_BUCKET}\n\nfunctions:\n  thumbnails:\n    handler: index.handler\n    events:\n      - s3:\n          bucket: ${env:SOURCE_BUCKET}\n          event: s3:ObjectCreated:*\nresources:\n  Resources:\n    DestImageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${env:DESTINATION_BUCKET}\n"]},{"id":106291668,"files":["service: serverless-chatbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless-chatbot\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - rekognition:DetectFaces\n      Resource: '*'\n    - Effect: \"Allow\"\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource: arn:aws:s3:::${self:custom.uploadBucket}/*\n    - Effect: \"Allow\"\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource: arn:aws:s3:::${self:custom.transformBucket}/*\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource:\n        - arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-teams\ncustom:\n  uploadBucket: ${self:service}-${self:provider.stage}-dev-uploads-bjm\n  transformBucket: ${self:service}-${self:provider.stage}-dev-transformed-bjm\nfunctions:\n  install:\n    handler: install.endpoint\n    events:\n      - http:\n          path: install\n          method: get\n    environment:\n      CLIENT_ID: <TOKEN>\n      CLIENT_SECRET: <TOKEN>\n      SLACK_OAUTH: 'https://slack.com/api/oauth.access?'\n      TABLE_NAME: ${self:service}-${self:provider.stage}-teams\n  hello:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: echo\n          method: post\n    environment:\n      POST_MESSAGE_URL: 'https://slack.com/api/chat.postMessage?'\n      VERIFICATION_TOKEN: 'Nv55nOIwyOPNBzCyqFOnjvGk'\n      UPLOAD_BUCKET: ${self:custom.uploadBucket}\n      SLACK_HOSTNAME: 'files.slack.com'\n      TEMP_FOLDER: '/tmp/'\n      TEAMS_TABLE: ${self:service}-${self:provider.stage}-teams\n  faceswap:\n    handler: faceswap.execute\n    environment:\n      TEMP_FOLDER: '/tmp/'\n      OUTPUT_PREFIX: 'output-'\n      UPLOAD_BUCKET: ${self:custom.uploadBucket}\n      TRANSFORM_BUCKET: ${self:custom.transformBucket}\n    events:\n      - s3:\n          bucket: ${self:custom.uploadBucket}\n          event: s3:ObjectCreated:*\n  slackupdate:\n    handler: slackupdate.execute\n    environment:\n      POST_MESSAGE_URL: 'https://slack.com/api/chat.postMessage?'\n      BOT_ACCESS_TOKEN: <TOKEN>\n      CHANNEL_ID: 'C7FF0N492'\n      SHORTENER_API_KEY: <TOKEN>\n      SHORTENER_API_URL: 'https://www.googleapis.com/urlshortener/v1/url?'\n    events:\n      - s3:\n          bucket: ${self:custom.transformBucket}\n          event: s3:ObjectCreated:*\nresources:\n  Resources:\n    TeamsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-teams\n        AttributeDefinitions:\n          - AttributeName: team_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: team_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":102606110,"files":["service: movies-api\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: movies/create.create\n    events:\n      - http:\n          path: movies\n          method: post\n          cors: true\n\n  list:\n    handler: movies/list.list\n    events:\n      - http:\n          path: movies\n          method: get\n          cors: true\n\n  get:\n    handler: movies/get.get\n    events:\n      - http:\n          path: movies/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: movies/update.update\n    events:\n      - http:\n          path: movies/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: movies/delete.delete\n    events:\n      - http:\n          path: movies/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    moviesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":101556730,"files":["service: backlog2slack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  backlog2slack:\n    handler: index.handler\n    description: \"backlog to slack\"\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          path: backlog2slack/{room}\n          method: post\n    environment:\n      WEBHOOKURI: https://hooks.slack.com/services/xxxxx\n      BASEURL: https://xxxxx.backlog.jp/\n      BOTNAME: backlogbot\n"]},{"id":100772622,"files":["service: zemog\n\npackage:\n  exclude:\n    - \"node_modules/**\"\n    - \"*\"\n\ncustom: ${file(./environments/${opt:stage}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  role: ${self:custom.role}\n  region: ap-southeast-2\n  memorySize: 128\n  deploymentBucket: ${self:custom.deploymentBucket}\n\nfunctions:\n  master:\n    name: ${opt:stage}-zemog-master\n    handler: src/master.master\n    events:\n      - schedule:\n          name: ${opt:stage}-zemog-master-schedule-event-0\n          rate: ${self:custom.schedule.0.rate}\n          enabled: true\n          input:\n            QUEUE_NAME: ${self:custom.queueName}\n            TESTS: ${self:custom.schedule.0.tests}\n\n      - schedule:\n          name: ${opt:stage}-zemog-master-schedule-event-1\n          rate: ${self:custom.schedule.1.rate}\n          enabled: true\n          input:\n            QUEUE_NAME: ${self:custom.queueName}\n            TESTS: ${self:custom.schedule.1.tests}\n\n      - schedule:\n          name: ${opt:stage}-zemog-master-schedule-event-2\n          rate: ${self:custom.schedule.2.rate}\n          enabled: true\n          input:\n            QUEUE_NAME: ${self:custom.queueName}\n            TESTS: ${self:custom.schedule.2.tests}\n\n"]},{"id":98764571,"files":["service: safeword\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: \"*\"\n  environment:\n    PHONE_NUMBER: ${opt:number}\n    NAME: ${opt:name}\n    PI_ENDPOINT: \"https://748bbbf3.ngrok.io/start\"\n    VIDEO_ENDPOINT: \"https://kf9zxc5wj0.execute-api.us-east-1.amazonaws.com/safeword/videos\"\n    TEXT_ENDPOINT:  \"https://kf9zxc5wj0.execute-api.us-east-1.amazonaws.com/safeword/text\"\n    BUCKET_NAME: \"safeword-storage\"\n    APP_ID: 'amzn1.ask.skill.80e3c59c-3c64-400e-ab87-134d4a1ac1b4'\n    MOTION_DETECTION_ON_ENDPOINT: \"https://27213d64.ngrok.io/motion/on\"\n    MOTION_DETECTION_OFF_ENDPOINT: \"https://27213d64.ngrok.io/motion/off\"\n\nfunctions:\n  main:\n    handler: main/index.handler\n  recordVideo:\n    handler: recordVideo/index.handler\n  text:\n    handler: text/index.handler\n    events:\n      - http:\n          path: /text\n          method: post\n  getVideos:\n    handler: getVideos/index.handler\n    events:\n      - http:\n          path: /videos\n          method: get\n  getSnapshots:\n    handler: getSnapshots/index.handler\n    events:\n      - http:\n          path: /cam\n          method: get\n  getMotionDetection:\n    handler: getMotionDetection/index.handler\n    events:\n      - http:\n          path: /motion\n          method: get\n"]},{"id":98635608,"files":["service: cloudwatch-slack-alerts\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 256\n  timeout: 60\n  versionFunctions: false\n  environment:\n    SLACK_WEB_HOOK: ${file(./env.json):SLACK_WEB_HOOK}\n\nfunctions:\n\n  alert:\n    handler: handler.alert\n    events:\n      - http:\n          path: /\n          method: post\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n\ncustom:\n  serverless-offline:\n    port: 3020\n    babelOptions:\n      presets: [\"es2015\"]\n  webpackIncludeModules:\n    packagePath: './package.json'\n"]},{"id":98249243,"files":["service: spotiwatcher\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n      PLAYLIST_CONTENTS_TABLE: spotiwatcher-playlist-contents-${opt:stage, self:provider.stage}\n      PLAYLISTS_TO_WATCH_TABLE: spotiwatcher-playlists-to-watch-${opt:stage, self:provider.stage}\n      PLAYLIST_DIFFS_TABLE: spotiwatcher-playlist-diffs-${opt:stage, self:provider.stage}\n      SPOTIFY_CLIENT_ID: ${file(./keys.yml):SPOTIFY_CLIENT_ID}\n      SPOTIFY_CLIENT_SECRET: ${file(./keys.yml):SPOTIFY_CLIENT_SECRET}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"*\"\nfunctions:\n  diff:\n    handler: handler.calculateDiffs\n    events:\n    - schedule: rate(15 minutes)\n  fetch:\n    handler: handler.fetchAllPlaylists\n    events:\n    - schedule: rate(30 minutes)\n  watching:\n      handler: handler.getWatchingPlaylists\n      events:\n        - http: GET playlists/watching\n          cors: true\n  feed:\n      handler: handler.userFeed\n      events:\n        - http: GET feed\n          cors: true\n  getPlaylist:\n      handler: handler.getPlaylist\n      events:\n        - http: GET playlists\n        - http: OPTIONS playlists\n          cors: true\n  addPlaylist:\n      handler: handler.addPlaylist\n      events:\n        - http: GET addPlaylist\n        - http: OPTIONS addPlaylist\n        - http: PUT addPlaylist\n          cors: true\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    PlaylistContentsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"id\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: ${self:provider.environment.PLAYLIST_CONTENTS_TABLE}\n    PlaylistsToWatchDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"id\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: ${self:provider.environment.PLAYLISTS_TO_WATCH_TABLE}\n    PlaylistDiffsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"id\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: ${self:provider.environment.PLAYLIST_DIFFS_TABLE}"]},{"id":98048740,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: static-outbound-ip\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  vpc:\n    securityGroupIds:\n      - Ref: LambdaSecGp\n    subnetIds:\n      - Ref: VpcSubnetPrivateA\n      - Ref: VpcSubnetPrivateB\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: handler.index\n    events:\n      - http:\n          method: get\n          path: /\n          inegration: lambda\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    Vpc:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n        InstanceTenancy: \"default\"\n    VpcSubnetPublicA:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId: \n          Ref: Vpc\n        CidrBlock: \"10.0.1.0/24\"\n        AvailabilityZone: \"us-east-1a\"\n    VpcSubnetPublicB:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId: \n          Ref: Vpc\n        CidrBlock: \"10.0.2.0/24\"\n        AvailabilityZone: \"us-east-1b\"\n    VpcSubnetPrivateA:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId: \n          Ref: Vpc\n        CidrBlock: \"10.0.11.0/24\"\n        AvailabilityZone: \"us-east-1a\"\n    VpcSubnetPrivateB:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId: \n          Ref: Vpc\n        CidrBlock: \"10.0.12.0/24\"\n        AvailabilityZone: \"us-east-1b\"\n\n    VpcPrivateRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: Vpc\n        Tags:\n          - Key: Name\n            Value: Private-route-table\n\n    VpcPublicRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: Vpc\n        Tags:\n          - Key: Name\n            Value: Public-route-table\n\n    IntlGW:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: Name\n            Value: Internet_Gateway\n\n    IntlGWAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        InternetGatewayId:\n          Ref: IntlGW\n        VpcId:\n          Ref: Vpc\n\n    VpcPublicRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: \"0.0.0.0/0\"\n        GatewayId: \n          Ref: IntlGW\n        RouteTableId: \n          Ref: VpcPublicRouteTable\n\n    EIP:\n      Type: AWS::EC2::EIP\n      Properties:\n        Domain: vpc\n\n    NatGW:\n      Type: AWS::EC2::NatGateway\n      DependsOn: IntlGWAttachment\n      Properties:\n        AllocationId:\n          Fn::GetAtt:\n            - EIP\n            - AllocationId\n        SubnetId:\n          Ref: VpcSubnetPublicA\n\n    VpcPrivateRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: \"0.0.0.0/0\"\n        NatGatewayId: \n          Ref: NatGW\n        RouteTableId: \n          Ref: VpcPrivateRouteTable\n\n    VpcSubnetPublicAAssociate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: VpcPublicRouteTable\n        SubnetId:\n          Ref: VpcSubnetPublicA\n\n    VpcSubnetPublicBAssociate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: VpcPublicRouteTable\n        SubnetId:\n          Ref: VpcSubnetPublicB\n\n    VpcSubnetPrivateAAssociate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: VpcPrivateRouteTable\n        SubnetId:\n          Ref: VpcSubnetPrivateA\n\n    VpcSubnetPrivateBAssociate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: VpcPrivateRouteTable\n        SubnetId:\n          Ref: VpcSubnetPrivateB\n\n    LambdaSecGp:\n      Type:  AWS::EC2::SecurityGroup\n      Properties:\n        GroupName: \"lambda-sec-gp\"\n        GroupDescription: \"...\"\n        SecurityGroupEgress:\n          - CidrIp: \"0.0.0.0/0\"\n            IpProtocol: \"tcp\"\n            FromPort: 0\n            ToPort: 65535\n        SecurityGroupIngress:\n          - CidrIp: \"0.0.0.0/0\"\n            IpProtocol: \"tcp\"\n            FromPort: 0\n            ToPort: 65535\n        VpcId:\n          Ref: Vpc\n\n  Outputs:\n    NatGatewayIP:\n      Description: \"Description for the output\"\n      Value:\n        Ref: EIP\n"]},{"id":95296658,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: slash-command-lambda-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless\n  region: eu-central-1\n\nfunctions:\n  echo:\n    handler: handler.echo\n    events:\n      - http:\n          path: echo\n          method: post\n  ls:\n    handler: handler.ls\n    events:\n      - http:\n          path: ls\n          method: post\n  whitelist:\n    handler: handler.whitelist\n    events:\n      - http:\n          path: whitelist\n          method: post\n  whitepaper:\n    handler: handler.whitepaper\n    events:\n      - http:\n          path: whitepaper\n          method: post        \n"]},{"id":92925457,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: dynamoDB # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: eu-central-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-central-1:*:*\"\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: \"arn:aws:logs:eu-central-1:*:*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  LambdaNodeJsToDynamoDB:\n    handler: handler.LambdaNodeJsToDynamoDB\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: LambdaNodeJsToDynamoDB\n          method: any\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    CloudCornerDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"CloudCorner\"\n        AttributeDefinitions:\n          - AttributeName: \"UserID\"\n            AttributeType: \"N\"\n        KeySchema:\n          - AttributeName: \"UserID\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":92213338,"files":["service: starwars\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-2\n  credentials: ${file(./.env.yml):credentials}\nfunctions:\n  swapi:\n    handler: lambda.handler\n    events:\n      - http: ANY {proxy+}\npackage:\n  exclude:\n    - .vscode/**\n    - .env.yml\n    - package.json\n    - yarn.lock"]},{"id":77089365,"files":["service: skpm-registry\n\ncustom:\n  tableName: ${opt:stage, self:provider.stage}-plugins\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  profile: perso\n  region: eu-west-1\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n    GITHUB_AUTH_TOKEN: ${env:GITHUB_AUTH_TOKEN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"apigateway:POST\"\n      Resource:\n        - arn:aws:dynamodb:*:*:table/${self:custom.tableName}\n        - \"arn:aws:apigateway:*\"\n\npackage:\n  exclude:\n    - \"node_modules/aws-sdk/**\"\n    - \"node_modules/serverless/**\"\n    - \"node_modules/chai/**\"\n    - \"node_modules/injectr/**\"\n    - \"node_modules/mocha/**\"\n    - \"node_modules/nsp/**\"\n    - \"node_modules/standard/**\"\n    - \"node_modules/sinon*/**\"\n    - \"test/**\"\n    - \"**/spec.js\"\n\nfunctions:\n  packageSearch:\n    handler: api/search.handler\n    events:\n      - http:\n          path: /registry\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                q: true\n            template:\n              application/json: >\n                {\n                  \"q\": \"$input.params('q')\"\n                }\n  packageGet:\n    handler: api/get.handler\n    events:\n      - http:\n          path: /registry/{name}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"name\": \"$input.params('name')\"\n                }\n  packagePut:\n    handler: api/put.handler\n    events:\n      - http:\n          path: /registry/{name}\n          method: put\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"name\": \"$input.params('name')\",\n                  \"body\": \"$util.escapeJavaScript($input.json('$'))\"\n                }\n  packageSync:\n    handler: api/sync.handler\n    timeout: 300\n    events:\n      - schedule:\n          rate: cron(0 12 * * ? *)\n          enabled: false\n\nresources:\n  Resources:\n    PluginsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: name\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}\n"]},{"id":82475705,"files":["service: my-lambda-cron-http-trigger\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-central-1\n\nfunctions:\n  functionName:\n    handler: handler.run\n    environment:\n      URL: YOUR_URL\n    events:\n      # Invoke Lambda function every day at 9:30am\n      - schedule: cron(30 9 * * ? *)"]},{"id":81703558,"files":["service: serverless-brewerydb-for-breweryup-app\nframeworkVersion: \">=1.1.0 < 2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: v2\n  cfLogs: true\n  region: us-west-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n        - \"cloudwatch:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-plugin-optimize\n\nfunctions:\n  getOne:\n    handler: handlers/beers/getBeer.getBeer\n    events:\n      - http:\n          method: GET\n          path: beers/{id}\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n  getBreweries:\n    handler: handlers/beers/breweries/getBreweries.getBreweries\n    events:\n      - http:\n          method: GET\n          path: beers/{id}/breweries\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n\n  getBrewery:\n    handler: handlers/beers/breweries/getBrewery.getBrewery\n    events:\n      - http:\n          method: GET\n          path: beers/{id}/breweries/{brid}\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n                brewery_id: true\n\n  getAwardEvents:\n    handler: handlers/beers/events/getEvents.getEvents\n    events:\n      - http:\n          method: GET\n          path: beers/{id}/events\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n\n  getYeats:\n    handler: handlers/beers/yeats/getYeats.getYeats\n    events:\n      - http:\n          method: GET\n          path: beers/{id}/yeasts\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n\n  getIngredients:\n    handler: handlers/beers/ingredients/getIngredients.getIngredients\n    events:\n      - http:\n          method: GET\n          path: beers/{id}/ingredients\n          integration: lambda\n          cors: true\n          request:\n            parameteres:\n              paths:\n                id: true\n\n  getAll:\n    handler: handlers/beers/getBeers.getBeers\n    events:\n      - http:\n          method: GET\n          path: beers\n          integration: lambda\n          cors: true\n"]},{"id":82505121,"files":["service: dco-bot\nprovider:\n    name: aws\n    runtime: nodejs4.3\n    stage: dev\n    profile: default\n    memorySize: 128\n    timeout: 10\n    environment:\n        GITHUB_WEBHOOK_SECRET: SOMEWEBHOOKSECRET\n        GITHUB_SECRET: SOMESECRET\n\nfunctions:\n  dcobot:\n    handler: handler.dcobot\n    events:\n      - http:\n          path: dco-bot\n          method: post\n          integration: lambda\n          cors: true\n"]},{"id":82098531,"files":["service: lambda-test-v1\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 512 # optional, default is 1024\n  timeout: 10 # optional, default is 6\n  stage: dev\n  profile: dev\n\nfunctions:\n  test:\n    handler: src/handler.test # required, handler set in AWS Lambda\n    name: ${self:provider.stage}-lambda-test-v1 # optional, Deployed Lambda name\n    description: Description of what the lambda function does # optional, Description to publish to AWS\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n\npackage:\n  exclude:\n    - '!node_modules/node-fetch/**'\n    - .git/**\n    - tmp/**\n    - test/**\n    - .gitignore\n    - LICENSE\n  include:\n    - src/controller/**\n    - src/utils/**\n    - src/handler.nodejs"]},{"id":82316312,"files":["service: CloudsearchCloudformationResource\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - cloudsearch:*\n      Resource:\n        - \"*\"\n\nplugins:\n  - serverless-webpack\n  - serverless-jest-plugin\n\nfunctions:\n  CloudsearchDomain:\n    handler: handler.CloudsearchDomain\n\nresources:\n  Outputs:\n    CloudsearchDomainArnRef:\n      Description: Exported Ref value for CloudsearchDomain\n      Value:\n        Fn::GetAtt: [CloudsearchDomainLambdaFunction, Arn]\n      Export:\n        Name: CloudsearchDomainResourceArn\n"]},{"id":83924242,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-node-alexa-skill # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  justmeet:\n    handler: handler.justmeet\n    events: \n      - alexaSkill\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":83730409,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":73181362,"files":["service: alexa-skill-cuecloud\n\npackage:\n  exclude:\n    - bin/ffmpeg_mac\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: prod\n  region: eu-west-1\n  memorySize: 512\n  cfLogs: true\n\nresources:\n  Resources:\n    Mp3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: spotify-preview-mp3s-for-alexa\n        AccessControl: PublicReadWrite\n    Mp3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: Mp3Bucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: Mp3Bucket\n                    - '/*'\n\nfunctions:\n  # Alexa\n  alexaSkill:\n    handler: alexa/skill.handler\n    description: Alexa skill to listen to concerts nearby\n    events:\n      - alexaSkill\n  # Auth\n  showLoginPage:\n    handler: auth/auth.lambda.showLoginPage\n    events:\n      - http: GET login\n  authorizeToken:\n    handler: auth/auth.authorizeToken\n    events:\n      - http: GET authorize/token\n  authorizeByCode:\n    handler: auth/auth.authorizeByCode\n    events:\n      - http: GET authorize/commit-code\n  # Email\n  sendEmail:\n    handler: mail/email.send\n    events:\n      - http: POST emails\n  # Events\n  getEvents:\n    handler: events/events.getEvents\n    events:\n      - http: GET events\n  # Convert\n#  getMp3:\n#    handler: mp3Converter.convert\n#    events:\n#      - http:\n#          path: convert\n#          method: get\n#          integration: lambda\n#          request:\n#            parameters:\n#              querystrings:\n#                mp3Url: true\n#          response:\n#            template: $input.path('$')\n#            statusCodes:\n#              301:\n#                pattern: ''\n#                headers:\n#                  Location: integration.response.body.headers.Location\n"]},{"id":77303185,"files":["service: falke\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\ncustom:\n  stage: ${opt:stage, self:provider.stage}\nfunctions:\n  skill:\n    handler: functions/skill.handler\n    environment:\n      APP_ID: ${opt:APP_ID}\n      STAGE: ${self:custom.stage}\n    events:\n      - alexaSkill\n  crawl:\n    handler: functions/crawl.handler\n    environment:\n      CHANNELS: NDR, ARD, HR, WDR, SWR RP, RBB\n      STAGE: ${self:custom.stage}\n    events:\n      - schedule: rate(30 minutes)\npackage:\n  exclude:\n    - node_modules/**\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.stage}-episodes\n        AttributeDefinitions:\n          - AttributeName: show\n            AttributeType: S\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: show\n            KeyType: HASH\n          - AttributeName: uuid\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:BatchWriteItem\n                - dynamodb:Query\n              Resource: arn:aws:dynamodb:*:*:table/${self:custom.stage}-episodes\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":75090248,"files":["service: express-serverless-boilerplate\n\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  environment:\n    NODE_ENV: production\n    basePath: dev/\n  cfLogs: true\n\nfunctions:\n  hello:\n    handler: lambda.handler\n    events:\n      - http:\n         path: index\n         method: get\n         integration: lambda-proxy\n      - http:\n         path: users\n         method: get\n         integration: lambda-proxy\n"]},{"id":136680557,"files":["service: lambda-minutes\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n     - http:\n         path: /\n         method: get\n"]},{"id":140175494,"files":["# NOTE: update this with your service name\nservice: getPrice\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  getPrice:\n    handler: handler.getPrice\n    events:\n      - https:\n          path: /\n          method: get\n"]},{"id":206003827,"files":["\nservice: your-new-service\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n\nplugins:\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  profile: your_profile\n  stage: ${self:custom.stage}\n  region: ap-southeast-2\n\nfunctions:\n  firstFunc:\n    handler: index.handler\n    events:\n      - http:\n          path: /firstFunc\n          method: ANY\n      - http:\n          path: /firstFunc/{any+}\n          method: ANY\n    iamRoleStatementsInherit: true\n    iamRoleStatements:\n      - Effect: 'Allow'\n        Action:\n          - lambda:InvokeFunction\n        Resource: \n          Fn::GetAtt: \n            - secondFuncLambdaFunction\n            - Arn\n    environment:\n      SYNC_LOCATION_LAMBDA:\n        Fn::GetAtt: \n            - secondFuncLambdaFunction\n            - Arn\n  secondFunc:\n    handler: index.handler\n\n\n\n"]}]