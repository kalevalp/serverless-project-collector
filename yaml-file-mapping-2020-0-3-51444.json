[{"id":122616946,"files":["service: serverless-name-generator\n\npackage:\n  exclude:\n    - .circleci\n    - coverage\n    - __test__\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  timeout: 4\n  versionFunctions: false # optional, default is true\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  generate:\n    handler: handler.handler # required, handler set in AWS Lambda\n    description: Generates unique and memorable names # optional, Description to publish to AWS\n    events:\n      - http:\n          path: generate\n          method: get\n          cors: true\n"]},{"id":102529111,"files":["service: karma-weekly-front\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-client-s3\n\ncustom:\n  client:\n    bucketName: ${env:BUCKET_NAME}\n"]},{"id":94977834,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-webpack-pluginless-starter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  serverless-offline:\n    host: ${file(./env.js):devServer.host}\n    port: ${file(./env.js):devServer.port}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  exclude:\n   - node_modules/**\n   - functions/**\n\nfunctions:\n  hello:\n    handler: dist/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":95312966,"files":["service: doStuff\n\nplugins:\n  - serverless-plugin-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n#  region: us-east-1 (feel free to change AWS' default region)\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  healthCheck:\n    handler: handler.healthCheck\n    events:\n      - http:\n          path: healthCheck\n          method: get\n          cors: true\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":106862044,"files":["service: favi\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: tremorlab\n  apiKeys:\n    - favi-web-key\n    - favi-seed-key\n  usagePlan:\n    quota:\n      limit: 1000\n      period: DAY\n    throttle:\n      rateLimit: 5\n      burstLimit: 10\n  environment:\n    DEBUG: \"*\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n        - dynamodb:BatchWriteItem\n        - dynamodb:BatchGetItem\n      Resource: arn:aws:dynamodb:*:*\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::favi-*/*\n    - Effect: \"Allow\"\n      Action:\n        - sns:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: \"*\"\n\nplugins:\n  - serverless-plugin-custom-domain\n\ncustom:\n  domain: \"favi-api.andrhamm.com\"\n\npackage:\n  exclude:\n    - app\n    - seed.rb\n    - '*.csv*'\n    - ruby\n    - vendor\n    - .bundle \n    - '*.rb'\n    - 'Gemfile*'\n\nfunctions:\n  readFave:\n    description: HTTP-event function to lookup favicon data by hostname\n    handler: handlers/handler.readFave\n    events:\n      - http:\n          path: /faves\n          method: get\n          private: true\n          request:\n            parameters:\n              querystrings:\n                hostname: true\n  createFave:\n    description: HTTP-event function to queue a hostname for favicon scraping\n    handler: handlers/handler.createFave\n    events:\n      - http:\n          path: /faves\n          method: post\n          private: true\n      - http:\n          path: /faves\n          method: options\n          private: false\n  createFaveBatch:\n    description: Stream-event function to queue bulk hostnames for favicon scraping\n    handler: handlers/seed.createFaveBatch\n    events:\n      - sns: FaveSeeds\n  seedFaves:\n    description: HTTP-event function to queue a batch of hostnames for favicon scraping\n    handler: handlers/handler.seedFaves\n    timeout: 60\n    environment:\n      FAVI_SEED_KEY: ${file(env.yml):FAVI_SEED_KEY}\n      SNS_TOPIC_ARN: { \"Ref\": \"SNSTopicFaveSeeds\" }\n    events:\n      - http:\n          path: /seed\n          method: post\n          private: true\n      - http:\n          path: /seed\n          method: options\n          private: false\n  streamFaves:\n    description: HTTP-event function to queue a request to stream all faves to websocket\n    handler: handlers/handler.streamFaves\n    timeout: 60\n    events:\n      - http:\n          path: /faves/stream\n          method: post\n          private: true\n      - http:\n          path: /faves/stream\n          method: options\n          private: false\n  scrapeDynamoToSns:\n    description: Stream-event function to send dynamodb stream events to SNS\n    handler: handlers/handler.scrapeDynamoToSns\n    environment:\n      SNS_TOPIC_ARN: { \"Ref\": \"SNSTopicFaveScrapeJobs\" }\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 25\n  scrapeFavicon:\n    description: Stream-event function to scrape favicons in a headlesss browser\n    handler: handlers/scrape.scrapeFavicon\n    timeout: 180\n    events:\n      - sns: FaveScrapeJobs\n  cacheFavicon:\n    description: Stream-event function to save copies of favicon images to S3\n    handler: handlers/cache.cacheFavicon\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 25\n  notifyPusher:\n    description: Stream-event function to push dynamodb events to websockets\n    handler: handlers/notify.notifyPusher\n    environment:\n      PUSHER_APP_ID: ${file(env.yml):PUSHER_APP_ID}\n      PUSHER_KEY: ${file(env.yml):PUSHER_KEY}\n      PUSHER_SECRET: ${file(env.yml):PUSHER_SECRET}\n    events:\n       - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - FavesDynamoDbTable\n              - StreamArn\n          batchSize: 100\n  notifyPusherAll:\n    description: Function to push all faves to websockets\n    handler: handlers/notify.notifyPusherAll\n    environment:\n      PUSHER_APP_ID: ${file(env.yml):PUSHER_APP_ID}\n      PUSHER_KEY: ${file(env.yml):PUSHER_KEY}\n      PUSHER_SECRET: ${file(env.yml):PUSHER_SECRET}\n\nresources:\n  Resources:\n    FavesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: FaveRecords\n        AttributeDefinitions:\n          - AttributeName: hostname\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: hostname\n            KeyType: HASH\n        StreamSpecification:\n            StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 25\n          WriteCapacityUnits: 25\n    S3BucketFaviApp:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: favi-app\n    S3BucketFaviCache:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: favi-cache\n    SNSTopicFaveSeeds:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: FaveSeeds\n    SNSTopicFaveScrapeJobs:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: FaveScrapeJobs\n    # KinesisTestMap:\n    #   Type: AWS::Lambda::EventSourceMapping\n    #   DependsOn : \n    #     - \"CreateFaveBatchLambdaFunction\"\n    #     - \"IamPolicyLambdaExecution\"\n    #   Properties:\n    #     BatchSize: 10\n    #     EventSourceArn:\n    #       Fn::GetAtt:\n    #         - \"KinesisStreamFaveSeeds\"\n    #         - \"Arn\"\n    #     FunctionName:\n    #       Fn::GetAtt:\n    #         - \"CreateFaveBatchLambdaFunction\"\n    #         - \"Arn\"\n    #     StartingPosition: \"TRIM_HORIZON\"\n    # CloudFrontDistributionFaviApp:\n    #   Type: AWS::CloudFront::Distribution\n    #   Properties:\n    #     DistributionConfig:\n    #       Aliases:\n    #         - favi.andrhamm.com\n    #       DefaultRootObject: index.html\n    #       Origins:\n    #         - DomainName: favi.andrhamm.com\n    #           Id: favi\n    #           S3OriginConfig:\n"]},{"id":88916981,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-spike\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}\"\n\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    name: ${self:service}-hello-${self:provider.stage}\n    description: Test serverless\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello\n          method: get\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n    environment:\n      NAME: Hin\n  \n  user:\n    handler: user.save\n    name: ${self:service}-saveUser-${self:provider.stage}\n    description: Save user to DynamoDB\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n    events:\n      - http:\n          path: users/create\n          method: post\n    environment:\n      ENV_USERS_TABLE: ${self:provider.environment.USERS_TABLE}  \n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    usersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":114699953,"files":["service: ausgaben\n\ncustom:\n  config: ${file(./serverless.dev.yml)}\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - If-Match\n      - Accept\n    allowCredentials: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-central-1\n  timeout: 60\n  environment:\n    TABLE_EVENTS: ${self:service}-${self:provider.stage}-events\n    TABLE_INDEX: ${self:service}-${self:provider.stage}-index\n    API_ENDPOINT: ${self:custom.config.apiEndpoint}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-*\n\nfunctions:\n  apiIndex:\n    handler: handler/api.index\n    events:\n    - http:\n        path: api\n        method: get\n        cors: ${self:custom.cors}\n  me:\n    handler: handler/user.me\n    events:\n    - http:\n        path: api\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createCheckingAccount:\n    handler: handler/checkingAccount.create\n    events:\n    - http:\n        path: checking-account\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchCheckingAccount:\n    handler: handler/checkingAccount.search\n    events:\n    - http:\n        path: checking-account/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getCheckingAccount:\n    handler: handler/checkingAccount.get\n    events:\n    - http:\n        path: checking-account/{id}\n        method: get\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createSpending:\n    handler: handler/spending.create\n    events:\n    - http:\n        path: checking-account/{id}/spending\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  createPeriodical:\n    handler: handler/periodical.create\n    events:\n    - http:\n        path: checking-account/{id}/periodical\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  updateCheckingAccount:\n    handler: handler/checkingAccount.update\n    events:\n    - http:\n        path: checking-account/{id}/{property}\n        method: put\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  deleteCheckingAccount:\n    handler: handler/checkingAccount.delete\n    events:\n    - http:\n        path: checking-account/{id}\n        method: delete\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchSpending:\n    handler: handler/spending.search\n    events:\n    - http:\n        path: checking-account/{id}/spending/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchPeriodical:\n    handler: handler/periodical.search\n    events:\n    - http:\n        path: checking-account/{id}/periodical/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  searchTitles:\n    handler: handler/checkingAccount.searchTitles\n    events:\n    - http:\n        path: checking-account/{id}/titles/search\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  updateSpending:\n    handler: handler/spending.update\n    events:\n    - http:\n        path: spending/{id}\n        method: put\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getSpending:\n    handler: handler/spending.get\n    events:\n    - http:\n        path: spending/{id}\n        method: get\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  deleteSpending:\n    handler: handler/spending.delete\n    events:\n    - http:\n        path: spending/{id}\n        method: delete\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\n  getReport:\n    handler: handler/report.get\n    events:\n    - http:\n        path: checking-account/{id}/report\n        method: post\n        cors: ${self:custom.cors}\n        authorizer:\n          arn: ${self:custom.config.userPoolArn}\n\nresources:\n  Resources:\n    eventsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-events\n        KeySchema:\n        - AttributeName: Id\n          KeyType: HASH\n        - AttributeName: Version\n          KeyType: RANGE\n        AttributeDefinitions:\n        - AttributeName: Id\n          AttributeType: S\n        - AttributeName: Version\n          AttributeType: N\n        - AttributeName: AggregateName\n          AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n        - IndexName: Aggregate-index\n          KeySchema:\n          - AttributeName: AggregateName\n            KeyType: HASH\n          Projection:\n            ProjectionType: INCLUDE\n            NonKeyAttributes:\n            - AggregateId\n          ProvisionedThroughput:\n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n    indexTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-index\n        KeySchema:\n        - AttributeName: IndexName\n          KeyType: HASH\n        - AttributeName: IndexKey\n          KeyType: RANGE\n        AttributeDefinitions:\n        - AttributeName: IndexName\n          AttributeType: S\n        - AttributeName: IndexKey\n          AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":129308810,"files":["service: newrelic-sms-alerts\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \"*\"\n\nfunctions:\n  webhook:\n    name: newrelic-sms-alerts-webhook\n    memorySize: 128\n    timeout: 120\n    handler: index.handler\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true"]},{"id":149020250,"files":["# NOTE: update this with your service name\nservice: lambda-template\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  render:\n    handler: handler.render\n    events:\n      - http:\n          path: render/{bucket}\n          method: any\n          cors: true\n          request:\n            parameters:\n              paths:\n                bucket: true\n"]},{"id":127139820,"files":["\n\nservice: ssm-param-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n   TOKEN: ${ssm:foo~true}\n   DB: ${ssm:/DevTest/MyApp/database/db_password~true}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":93208917,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ThreeScale\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  mockAPItraffic:\n    handler: handler.mockAPItraffic\n    environment:\n      API_URL: \"https://trade_insight_api-2445581301440.staging.apicast.io:443\"\n      USER_KEY: \"ef09d5dcced7a0791b496951f8e6a03c\"\n    events:\n      - schedule: rate(2 minutes)\n"]},{"id":124608442,"files":["service: aws-netlify-letsencryptfi\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    packager: 'yarn'\n  webpackIncludeModules: true\n\nresources:\n  Resources:\n    S3BucketAcmeBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(.yaml):ACME_BUCKET}\n    DynamoDBAcmeTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${file(.yaml):ACME_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    SNSCertificateTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"LE Cert\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 90 # Since it could take some time for the DNS changes to take effect we need to set an increased timeout\n  stage: ${opt:stage, \"dev\"}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:ListBucket\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: S3BucketAcmeBucket\n    - Effect: \"Allow\"\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: S3BucketAcmeBucket\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - acm:ImportCertificate\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - DynamoDBAcmeTable\n          - Arn\n    - Effect: \"Allow\"\n      Action:\n        - sns:Publish\n      Resource:\n        Ref: SNSCertificateTopic\n\nfunctions:\n  renew_certificate:\n    handler: handler.renew_certificate\n    events:\n        - schedule:\n            name: \"LetsEncryptCertificateRenewalSchedule\"\n            description: \"Checks if the Netlify managed domain needs an updated LetsEncrypt SSL certificate\"\n            rate: rate(1 day)\n    environment:\n      NETLIFY_TOKEN: ${file(.yaml):NETLIFY_TOKEN}\n      NETLIFY_DNS_ZONE_NAME: ${file(.yaml):NETLIFY_DNS_ZONE_NAME}\n      ACME_BUCKET: ${file(.yaml):ACME_BUCKET}\n      ACME_TABLE: ${file(.yaml):ACME_TABLE}\n      AWS_SNS_TOPIC:\n        Ref: SNSCertificateTopic\n      ACME_EMAIL_ADDRESS: ${file(.yaml):ACME_EMAIL_ADDRESS}\n      ACME_DOMAIN_NAMES: ${file(.yaml):ACME_DOMAIN_NAMES}\n      ACME_TEST: ${file(.yaml):ACME_TEST, \"true\"}\n"]},{"id":162887254,"files":["service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  publish:\n    handler: handlers/publisher.publish\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerTransformedEvents:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerTransformedEventsS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.eventsBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerTransformedEventsS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.eventsBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.producerBucket}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      EVENTBRITE_API_TOKEN: ${ssm:eventbriteApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsEventbrite:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsEventbriteS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsEventbriteS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.producerBucket}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      GOOGLE_CALENDAR_API_TOKEN: ${ssm:googleCalendarApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsFarsetLabs:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsFarsetLabsS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsFarsetLabsS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n","service: ${file(./package.json):name}\n\ncustom: ${file(./config.js):buckets}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.eventsBucket}\n            - \"/*\"\n\nfunctions:\n  produce:\n    handler: handlers/producer.produce\n    events:\n      - schedule: rate(1 hour)\n    environment:\n      TZ: Europe/Belfast\n      MEETUPCOM_API_TOKEN: ${ssm:meetupcomApiToken~true}\n  transform:\n    handler: handlers/transformer.transform\n    environment:\n      TZ: Europe/Belfast\n\nresources:\n  Resources:\n    S3BucketMuxerProducedEventsMeetupcom:\n      DependsOn:\n        - TransformLambdaPermissionS3BucketMuxerProducedEventsMeetupcomS3\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.producerBucket}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event: \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n    TransformLambdaPermissionS3BucketMuxerProducedEventsMeetupcomS3:\n      DependsOn:\n        - TransformLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ TransformLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.producerBucket}\"\n"]},{"id":166656787,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\napp: APPNAME # NOTE: update this with your app name\ntenant: TENENT # NOTE: update this with your tenant name\nservice: SERVICENAME # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  # you can overwrite defaults here\n  stage: STAGENAME # NOTE: update this with your stage name\n  region: REGIONNAME # NOTE: update this with aws region\n\n# you can add packaging information here\npackage:\n  include:\n    - .env\n    - actions/**\n    - bin/**\n    - config/**\n    - graphql/**\n    - lib/**\n    - package.json\n  excludeDevDependencies: false\n\nfunctions:\n  hello:\n    handler: index.exe\n    events:\n      - http:\n          method: post\n          path: /\n          integration: lambda\n          response:\n            statusCodes:\n              200:\n                pattern: '' # Default response method\n                template:\n                  application/json: $input.path(\"$.body\") # JSON return object\n            headers:\n              Content-Type: \"'application/json'\"\n\n\n    #    Define function environment variables here\n    environment:\n      TOKEN: GITHUB_TOKEN # NOTE: update this with your github access token\n      WEBHOOK_SECRET: GITHUB_WEBHOOK_SECRET # NOTE: update this with your github webhook secret\n      SLS_DEBUG: SERVERLESS_DEBUG_VALUE # NOTE: update this with serverless debug value\n"]},{"id":106335159,"files":["service: serverless-modern\nprovider:\n  name: aws\n  runtime: nodejs6.10\npackage:\n    include:\n        - build.js\nfunctions:\n  hello:\n    handler: build.hello\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\nplugins:\n  - serverless-offline\n"]},{"id":120694791,"files":["service: microservice-process-images\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n\nfunctions:\n  app:\n    name: microservice-process-images-${self:provider.stage}\n    description: Microservice to process images\n    handler: handler.process\n    events:\n      - http:\n          method: get\n          path: process\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${self:service}-${self:custom.stage}\n        BinaryMediaTypes:\n          - '*/*'\n\npackage:\n  exclude:\n    - .vscode/**\n    - doc/**\n    - tests/**"]},{"id":149339011,"files":["# serverless.yml\n\nservice: contact-form-api\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment:\n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    EMAIL: ${self:custom.secrets.EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  send:\n    handler: handler.send\n    events:\n      - http:\n          path: email/send\n          method: post\n          cors: true\n"]},{"id":127924961,"files":["# Serverless definition file\n# --------------------------\n# Defines Lambda functions to be deployed to AWS using the Serverless Framework.\n# http://serverless.com\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# WebLedgerSvcs\n#\n# Implementation of The Web Ledger Protocol 1.0\n# A format and protocol for decentralized ledgers on the Web\n# https://w3c.github.io/web-ledger/\n#\n# Service\tExample URL\tDescription\n# ledgerAgentCreateService\tPOST /ledger-agents\tCreate a ledger agent.\n# ledgerAgentListService\tGET /ledger-agents\tGet all ledger agents.\n# ledgerAgentStatusService\tGET /ledger-agents/{agent}\tGet the current status of the ledger agent.\n# ledgerEventService\tPOST /ledger-agents/{agent}/events\tRequest the addition of an event to ledger.\n# ledgerBlockService\tGET /ledger-agents/{agent}/blocks\tGet a specific block from the ledger.\n# ledgerQueryService\tGET /ledger-agents/{agent}/query\tQuery the current state of the ledger.\n\nservice: WebLedgerService\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 45\n  environment: ${file(env.yml):${self:provider.stage}}\n  \n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n\n  hello:\n    handler: handler.hello\n    description: Say Hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: \n            origins:               \n              - '*'\n\n\n  # 4.2 Agent Create Service ledgerAgentCreateService Create a ledger agent.\n  ledgerAgentCreateService:\n    handler: webledgerHanders.ledgerAgentCreateService\n    description: Create a ledger agent.\n    tags: \n    events:\n      - http:\n          path:  /ledger-agents\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n          responses:\n            200:\n              description: \n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/ConfigurationBlock\"\n            201:\n              description: Ledger creation was successful. The HTTP Location header will contain the URL for the newly created ledger.  \n            400:\n              description: Ledger creation failed.\n              $ref: \"#/responses/400BadRequest\"\n            409:\n              description: A duplicate ledger exists.\n              $ref: \"#/responses/409DuplicateRecord\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n  \n  # /ledger-agents ledgerAgentListService\tGet all ledger agents.\n  ledgerAgentListService:\n    handler: webledgerHanders.ledgerAgentListService\n    description: Get all ledger agents.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n            headers:\n            paths:\n          responses:\n            200:\n              description: The list of ledgers was found and will be returned in the body of the response.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Agent\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n                  paging:\n                    $ref: \"#/definitions/Paging\"\n            \n            404:\n              description: \tThe list of ledgers was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n         \n              \n  # /ledger-agents/{agent} ledgerAgentStatusService\tGet the current status of the ledger agent.\n  ledgerAgentStatusService:\n    handler: webledgerHanders.ledgerAgentStatusService\n    description: Get the current status of the ledger agent. \n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n            headers:\n            paths:\n          responses:\n            200:\n              description: The ledger agent status was found and will be returned in the body of the response.\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/definitions/Block\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n            400:\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger agent status was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n \n  \n  # 4.5 Ledger Append Service  ledgerAppendService\n  ledgerAppendService:\n    handler: webledgerHanders.ledgerAppendService\n    description: Appending to a ledger can be achieved by performing an HTTP POST of a LedgerStorageBlock to the ledgerAppendService. \n    tags: \n    events:\n      - http:\n          path:  /ledger-agents/{agent}/events\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n                \n          responses:\n            200:\n              description: The ledger block was sucessfully appended.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n                  \n            400:\n              description: The ledger block failed to be appended.\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger block was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            409:\n              description: The ledger block with the given identifier already exists.\n              $ref: \"#/responses/409DuplicateRecord\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n  # ledgerEventService Request the addition of an event to ledger.\n  ledgerEventService:\n    handler: webledgerHanders.ledgerEventService\n    description: Request the addition of an event to ledger.\n    tags: \n    events:\n      - http:\n          path:  /ledger-agents/{agent}/events\n          method: post\n          request:\n            parameters:\n              querystrings:\n              headers:\n              paths:\n                id: false\n          cors: \n            origins:               \n              - '*'\n  \n\n  # 4.6 Ledger Block Service ledgerBlockService Get a specific block from the ledger.\n  ledgerBlockService:\n    handler: webledgerHanders.ledgerBlockService\n    description: A ledger read for an block is achieved by performing an HTTP GET on a ledger block identifier. The list of ledger blocks is available by performing an HTTP GET on the ledgerBlockService.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}/blocks\n          method: get\n          request:\n            parameters:\n              - $ref: \"#/parameters/head\"\n              - $ref: \"#/parameters/start\"\n              - $ref: \"#/parameters/limit\"\n              - $ref: \"#/parameters/reverse\"\n            querystrings:\n              id: true\n            headers:\n            paths:\n          responses:\n            200:\n              description: Retrieval of the ledger block was successful.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n                  head:\n                    $ref: \"#/definitions/Head\"\n                  link:\n                    $ref: \"#/definitions/Link\"\n                  paging:\n                    $ref: \"#/definitions/Paging\"\n            400:\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The ledger block was not found at the given URL.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n\n  # 4.7 Ledger Query Service  ledgerQueryService\tQuery the current state of the ledger.\n  # GET /ledger-agents/example/query?id=http://www.coupon-clearing.org/coupons/486211708\n  ledgerQueryService:\n    handler: webledgerHanders.ledgerQueryService\n    description: Query the current state of the ledger.\n    tags: \n    events:\n      - http:\n          path: /ledger-agents/{agent}/query\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n              headers:\n              paths:\n          responses:\n            200:\n              description: Retrieval of the latest state machine object was successful.\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      - $ref: \"#/definitions/Block\"\n            400:\n              description: The query was malformed.\n              $ref: \"#/responses/400BadRequest\"\n            404:\n              description: The given state machine object was not found.\n              $ref: \"#/responses/404NotFound\"\n            500:\n              $ref: \"#/responses/500ServerError\"\n            502:\n              $ref: \"#/responses/502ConfigurationError\"\n            503:\n              $ref: \"#/responses/503ServiceUnavailable\"\n          cors: \n            origins:               \n              - '*'\n  \n    \n\n\n\ndefinitions:\n  Head:\n    type: string\n    example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n  Link:\n    type: string\n    example: https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n  Paging:\n    properties:\n      start:\n        type: string\n        example: \"65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\"\n      limit:\n        type: integer\n        example: 54321\n      next_position:\n        type: string\n        example: \"65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\"\n      next:\n        type: string\n        example: https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=2000&limit=1000\n\n  Error:\n    properties:\n      code:\n        type: integer\n        example: 34\n      title:\n          type: string\n          example: No Batches Submitted\n      message:\n        type: string\n        example: >\n          The protobuf BatchList you submitted was empty and contained no\n          Batches. You must submit at least one Batch.\n\n  Entry:\n    properties:\n      address:\n        type: string\n        example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c\n      data:\n        type: string\n        format: byte\n        example: Zm9vOmJhcg==\n\n  BlockHeader:\n    properties:\n      block_num:\n        type: integer\n        example: 12345\n      previous_block_id:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      signer_public_key:\n        type: string\n        example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758\n      batch_ids:\n        type: array\n        items:\n          type: string\n          example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c\n      consensus:\n        type: string\n        format: binary\n      state_root_hash:\n        type: string\n        example: 708ca7fbb701799bb387f2e50deaca402e8502abe229f705693d2d4f350e1ad6\n  \n  Block:\n    properties:\n      header:\n        $ref: \"#/definitions/BlockHeader\"\n      header_signature:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      batches:\n        type: array\n        items:\n          $ref: \"#/definitions/Batch\"\n  \n  ConfigurationBlock:\n    properties:\n      header:\n        $ref: \"#/definitions/BlockHeader\"\n      header_signature:\n        type: string\n        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n      batches:\n        type: array\n        items:\n          $ref: \"#/definitions/Batch\"\n          \nresponses:\n  400BadRequest:\n    description: Request was malformed\n    schema:\n      $ref: \"#/definitions/Error\"\n  404NotFound:\n    description: Address or id did not match any resource\n    schema:\n      $ref: \"#/definitions/Error\"\n  409DuplicateRecord:\n    description: A duplicate record exists.\n    schema:\n      $ref: \"#/definitions/Error\"\n  429TooManyRequests:\n    description: Too many requests have been made to process batches\n    schema:\n      $ref: \"#/definitions/Error\"\n  500ServerError:\n    description: Something went wrong within the validator\n    schema:\n      $ref: \"#/definitions/Error\"\n  502ConfigurationError:\n    description: Execution failed due to configuration error\n    schema:\n      $ref: \"#/definitions/Error\"\n  503ServiceUnavailable:\n    description: API is unable to reach the validator\n    schema:\n      $ref: \"#/definitions/Error\"\n"]},{"id":161541910,"files":["\nservice: spacex-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  launches:\n    handler: handler.launches\n    events:\n      - http:\n          path: /\n          method: get\n  launchesApi:\n    handler: handler.launchesApi\n    events:\n      - http:\n          path: /api\n          method: get\n  launchesCal:\n    handler: handler.launchesCal\n    events:\n      - http:\n          path: /calendar\n          method: get\n\nplugins:\n  - serverless-offline\n"]},{"id":103029797,"files":["service: api\n\ncustom: \n  region: 'eu-west-1'\n  stage: 'dev'\n\nprovider:\n  name: aws\n  role: xmyCustRole1 \n  apiKeys:\n    - myApiKey  \n  runtime: nodejs6.10\n  region: eu-west-1  \n  environment:\n    REGION: ${self:provider.region} \n    PLATFORM_APP_ARN: ${file(./serverless.env.yml):${self:custom.stage}.PLATFORM_APP_ARN}\n\nfunctions:\n  create:\n    handler: sns/endpoint/create.create\n    events:\n      - http:\n          path: endpoint/create\n          method: post\n          cors: true\n          private: true\n\n  delete:\n    handler: sns/endpoint/delete.delete\n    events:\n      - http:\n          method: delete\n          cors: true\n          private: true\n          path: endpoint/delete\n          # path: endpoint/delete/{id}\n          # request: \n          #   parameters: \n          #     paths: \n          #       id: true\n\n  list:\n    handler: sns/endpoint/list.list\n    events:\n      - http:\n          path: endpoint/list\n          method: get\n          cors: true          \n          authorizer:\n            name: authorizer\n            arn: ${file(./serverless.env.yml):${self:custom.stage}.COGNITO_POOL_ARN}\n\nresources:\n  Resources:\n    # PetsModelNoFlatten: \n    #   Type: \"AWS::ApiGateway::Model\"\n    #   Properties: \n    #     RestApiId: {Ref: ApiGatewayRestApi}\n    #     ContentType: \"application/json\"\n    #     Description: \"Schema for Pets example\"\n    #     Name: \"PetsModelNoFlatten\"\n    #     Schema: \n    #       Fn::Join: \n    #         - \"\"\n    #         - \n    #           - \"{\"\n    #           - \"   \\\"$schema\\\": \\\"http://json-schema.org/draft-04/schema#\\\",\"\n    #           - \"   \\\"title\\\": \\\"PetsModelNoFlatten\\\",\"\n    #           - \"   \\\"type\\\": \\\"array\\\",\"\n    #           - \"   \\\"items\\\": {\"\n    #           - \"       \\\"type\\\": \\\"object\\\",\"\n    #           - \"       \\\"properties\\\": {\"\n    #           - \"           \\\"number\\\": { \\\"type\\\": \\\"integer\\\" },\"\n    #           - \"           \\\"class\\\": { \\\"type\\\": \\\"string\\\" },\"\n    #           - \"           \\\"salesPrice\\\": { \\\"type\\\": \\\"number\\\" }\"\n    #           - \"       }\"\n    #           - \"   }\"\n    #           - \"}\"\n    xmyCustRole1:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/cust/path/\n        RoleName: xmyCustRole1\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - sns:CreatePlatformEndpoint\n                    - sns:ListEndpointsByPlatformApplication\n                    - sns:DeleteEndpoint\n                  Resource: arn:aws:sns:*:*:*           \n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:PutObject\"\n                  Resource:\n                    Fn::Join:\n                      - \"\"\n                      - - \"arn:aws:s3:::\"\n                        - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n                        \n\n"]},{"id":99840819,"files":["\nservice: layer-message-responses\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  timeout: 25\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}\"\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n        - kinesis:GetRecords\n        - kinesis:GetShardIterator\n        - kinesis:DescribeStream\n        - kinesis:ListStreams\n      Resource: ${self:custom.kinesisArn}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  kinesisArn: ${file(./src/config.js):kinesisArn}\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-dynamodb-local\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    description: 'Webhook capture endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  ingest:\n    handler: src/handlers.ingest\n    description: \"Kinesis ingest\"\n    events:\n      - stream:\n          arn: ${self:custom.kinesisArn}\n          batchSize: 1 # NOTE: This should set to 1\n          startingPosition: TRIM_HORIZON\n          enabled: true\n  verify:\n    handler: src/handlers.verify\n    description: 'Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\nresources:\n  Resources:\n    messagesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: messageId\n            AttributeType: S\n          - AttributeName: responseToNodeId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: messageId\n            KeyType: HASH\n          - AttributeName: responseToNodeId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 10\n","\nservice: layer-message-responses\n\nprovider:\n  name: azure\n  location: West US\n  stage: dev\n  timeout: 10s\n  environment:\n    SERVICE_NAME: ${self:service}\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    description: 'Layer Message Responses Webhook endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n  verify:\n    handler: dist/bundle.verify\n    description: 'Layer Message Responses Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n"]},{"id":113806777,"files":["service: notes-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\n\n  # iamRoleStatement defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource sharing) for browser cross domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.default\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  # Defines an HTTP API endpoint that calls the main function in get.js\n  # - path: url path is /notes/{id} # - method: GET request\n  get:\n    handler: get.default\n    events:\n       - http:\n           path: notes/{id}\n           method: get\n           cors: true\n           authorizer: aws_iam\n\n  # Defines an HTTP API endpoint that calls the main function in list.js\n  # - path: url path is /notes\n  # - method: GET request\n  list:\n    handler: list.default\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.default\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    handler: delete.default\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":137493334,"files":["service: my-service\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-s3-cloudfront-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'staging'}\n  region: us-east-2\n\ncustom:\n  s3Bucket: my-service-${self:provider.stage}\n  distFolder: build\n  distroId: MyWebApp\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - s3:GetObject\n              Effect: Allow\n              Principal: \"*\"\n              Sid: PublicReadGetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n            - Action: \n                - s3:*\n              Effect: Deny\n              Principal: \"*\"\n              Condition:\n                Bool:\n                  aws:SecureTransport: false\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          PriceClass: PriceClass_100 # PriceClass_100 | PriceClass_200 | PriceClass_All\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: ${self:custom.distroId}\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: ${self:custom.distroId}\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info -v` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebsiteDistribution:\n      Value:\n        'Fn::GetAtt': [ WebsiteDistribution, DomainName ]\n"]},{"id":131000549,"files":["service: dynamo-db\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  environment:\n    USER_TABLE: \"UserCrudDynamoDbTable\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}\"\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          method: post\n          path: lambda\n\n  listUser:\n      handler: handler.listUser\n      events:\n        - http:\n            method: get\n            path: lambda\n\n  updateUser:\n      handler: handler.updateUser\n      events:\n        - http:\n            method: put\n            path: lambda/{id}\n\n  deleteUser:\n      handler: handler.deleteUser\n      events:\n        - http:\n            method: delete\n            path: lambda/{id}\n\nresources:\n  Resources:\n    UserCrudDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n"]},{"id":157903891,"files":["service: stock-alarms\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  timeout: 5\n  versionFunctions: false\n  environment:\n    SENDER_EMAIL: ${file(serverless.env.yml):SENDER_EMAIL, env:SENDER_EMAIL}\n    RECIPIENT_EMAIL: ${file(serverless.env.yml):RECIPIENT_EMAIL, env:RECIPIENT_EMAIL}\n    MAILGUN_KEY: ${file(serverless.env.yml):MAILGUN_KEY, env:MAILGUN_KEY}\n    MAILGUN_DOMAIN: ${file(serverless.env.yml):MAILGUN_DOMAIN, env:MAILGUN_DOMAIN}\n\ncustom:\n  alerts:\n    topics:\n      alarm:\n        topic: ${self:service}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: ${file(serverless.env.yml):RECIPIENT_EMAIL, env:RECIPIENT_EMAIL}\n    definitions:\n      functionErrors:\n        period: 86400 # 1 day\n        treatMissingData: notBreaching\n    alarms:\n      - functionErrors\n\nfunctions:\n  stock-alarms:\n    handler: src/index.run\n    events:\n      - schedule: rate(1 day)\n\nplugins:\n  - serverless-plugin-aws-alerts\n","SENDER_EMAIL: noreply@example.com\nRECIPIENT_EMAIL: john@example.com\n\nMAILGUN_KEY:\nMAILGUN_DOMAIN: mail.example.com\n"]},{"id":154477950,"files":["service: mountain-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-warmup\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  # Stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load secret environment variables based on the current stage.\n  # Fallback to default if not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  apiKeys:\n    - ${self:custom.stage}-developer\n    - ${self:custom.stage}-demo-key\n  environment:\n    MONGO_URI: ${self:custom.environment.MONGO_URI}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: \"*\"\n\nfunctions:\n  createMountain:\n    handler: methods/mountains/create.main\n    warmup: true\n    events:\n      - http:\n          path: mountains\n          method: post\n          private: true\n          cors: true\n  getMountain:\n    handler: methods/mountains/get.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: get\n          private: true\n          cors: true\n  listMountains:\n    handler: methods/mountains/list.main\n    warmup: true\n    events:\n      - http:\n          path: mountains\n          method: get\n          private: true\n          cors: true\n  updateMountain:\n    handler: methods/mountains/update.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: put\n          private: true\n          cors: true\n  deleteMountain:\n    handler: methods/mountains/delete.main\n    warmup: true\n    events:\n      - http:\n          path: mountains/{id}\n          method: delete\n          private: true\n          cors: true\n"]},{"id":113930505,"files":["service: aws-s3-twilio-notification\n\ncustom:\n#         Change the name of your s3 bucket here if you want\n  bucket: twilio-notification-bucket\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n#          use your AWS CLI profile here if you have one, or else delete this\n#          line below to use your default AWS CLI settings\n  profile: \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  newFileInBucket:\n    handler: handler.newFileInBucket\n    environment:\n#                    Use your Twilio Account SID here\n        ACCOUNT_SID:\n#                    Use your Twilio Account Auth Token here\n        AUTH_TOKEN:\n#                    Use your Twilio Phone Number here eg: +16043008888\n        TWILIO_PHONE_NO:\n#                    Type the phone number to receive the message here +16043008888\n        PHONE_NO_TO_RECEIVE_SMS:\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n"]},{"id":92401390,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-app\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 60s\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  users-create:\n    handler: handler.create\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: users\n          method: post\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":93975903,"files":["service: serverless-urlshortener\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n    environment:\n      URL_INSTALL: https://serverless.com/framework/docs/providers/aws/guide/installation/\n      URL_SERVERLESS: https://serverless.com/\n      URL_AWS: https://aws.amazon.com/\n\n"]},{"id":148964234,"files":["service: wild-rides-serverless-demo\napp: serverless-demo\ntenant: karuppiah7890\nframeworkVersion: '=1.32.0'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  RequestUnicorn:\n    handler: handler.handler\n    role: WildRydesLambdaRole\n    memorySize: 128\n    events:\n      - http:\n          path: ride\n          method: post\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: WildRydesApiGatewayAuthorizer\nresources:\n  Resources:\n    WildRydesBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: wildrydes-karuppiah-natarajan\n        WebsiteConfiguration:\n          IndexDocument: index.html\n    WildRydesBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: 'WildRydesBucket'\n        PolicyDocument:\n          Statement:\n            - Effect: 'Allow'\n              Principal: '*'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'WildRydesBucket'\n                    - '/*'\n    WildRydesCognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: WildRydes\n    WildRydesCognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: WildRydesWebApp\n        GenerateSecret: false\n        UserPoolId:\n          Ref: 'WildRydesCognitoUserPool'\n    WildRydesDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Rides\n        AttributeDefinitions:\n          - AttributeName: RideId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: RideId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    WildRydesLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: WildRydesLambda\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: DynamoDBWriteAccess\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                        - ':'\n                        - - 'arn:aws:logs'\n                          - Ref: 'AWS::Region'\n                          - Ref: 'AWS::AccountId'\n                          - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - dynamodb:PutItem\n                  Resource:\n                    'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]\n    WildRydesApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      Properties:\n        Name: WildRydes\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Type: COGNITO_USER_POOLS\n        ProviderARNs:\n          - Fn::GetAtt: [WildRydesCognitoUserPool, Arn]\n        IdentitySource: method.request.header.Authorization\n  Outputs:\n    WildRydesBucketURL:\n      Description: 'Wild Rydes Bucket Website URL'\n      Value:\n        'Fn::GetAtt': [WildRydesBucket, WebsiteURL]\n    WildRydesCognitoUserPoolId:\n      Description: 'Wild Rydes Cognito User Pool ID'\n      Value:\n        Ref: 'WildRydesCognitoUserPool'\n    WildRydesCognitoUserPoolClientId:\n      Description: 'Wild Rydes Cognito User Pool Client ID'\n      Value:\n        Ref: 'WildRydesCognitoUserPoolClient'\n    WildRydesDynamoDbARN:\n      Description: 'Wild Rydes DynamoDB ARN'\n      Value:\n        'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]\n"]},{"id":135855116,"files":["service: serverless-proj\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n  # serverless-dynamodb-local config\n  dynamodb:\n    start:\n      migrate: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n\n  # role for DynamoDB\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n\n  # POST API\n  post:\n    handler: functions/post.main\n    events:\n      - http:\n          path: courses/{courseId}\n          method: post\n          cors: true\n\n  # GET API\n  get:\n    handler: functions/get.main\n    events:\n      - http:\n          path: courses/{courseId}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    taskDB:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: courseId\n            AttributeType: S\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: courseId\n            KeyType: HASH\n          -\n            AttributeName: userId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: courses"]},{"id":125720340,"files":["service: notes-app-api\n\n# Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: ap-southeast-2\n\n  environment:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    NAME: ${file(../.env.yml):NAME}\n    SALT: ${file(../.env.yml):SALT}\n    PASSWORD: ${file(../.env.yml):PASSWORD}\n    STORAGE_BUCKET: aserver-${self:provider.stage}-storage\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*\"\n    - Effect: Allow\n      Action:\n        - \"s3:CreateBucket\"\n      Resource: \"arn:aws:s3:::*\"\n\nfunctions:\n  getnote:\n    handler: src/handler.getNote\n    events:\n      - http:\n          path: note\n          method: GET\n          cors: \n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - auth\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n  savenote:\n    handler: src/handler.saveNote\n    events:\n      - http:\n          path: note\n          method: POST\n          cors: \n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - auth\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n\n"]},{"id":80948184,"files":["service: mipmapper\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    MIPMAPPER_S3_BUCKET: ${self:resources.Resources.imageStorage.Properties.BucketName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:ListBucket\n        - s3:GetObject\n      Resource: arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*\n\npackage:\n  artifact: mipmapper.zip\n\nfunctions:\n  getUploadUrl:\n    handler: handler.getUploadUrl # required, handler set in AWS Lambda\n    name: ${self:provider.stage}-get_upload_url # optional, Deployed Lambda name\n    description: Gets a presigned URL for uploading an image # optional, Description to publish to AWS\n    memorySize: 512\n    timeout: 10\n    events:\n      - http:\n          path: images\n          method: POST\n          cors: true\n\nresources:\n  Resources:\n    imageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}-mipmapper-image-storage\n        CorsConfiguration:\n          CorsRules:\n            - AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - GET\n                - PUT\n    imageStorageReadonlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:resources.Resources.imageStorage.Properties.BucketName}\n        PolicyDocument: |\n          {\n            \"Statement\": [\n              {\n                \"Sid\":\"AddPerm\",\n                \"Effect\":\"Allow\",\n                \"Principal\": \"*\",\n                \"Action\":[\"s3:GetObject\"],\n                \"Resource\":[\"arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*\"]\n              }\n            ]\n          }\n"]},{"id":102388688,"files":["# Welcome to Serverless!\n\n\nservice: poc-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-south-1\n\n\n# you can define service wide environment variables here\n  environment:\n    PGUSER: ${file(env.json):user}\n    PGHOST: ${file(env.json):host}\n    PGPASSWORD: {file(env.json):password}\n    PGDATABASE: {file(env.json):db}\n    PGPORT: {file(env.json):port}\n\n\nfunctions:\n  createUser:\n    # handlers folder has all the createUser file has createUser function which is the handler\n    handler: handlers/createUser.createUser\n    events:\n      - http:\n            path: users\n            method: post\n\n  listUsers:\n    # handlers folder has all the createUser file has createUser function which is the handler\n    handler: handlers/getUsers.listUsers\n    events:\n      - http:\n            path: users\n            method: get"]},{"id":100805062,"files":["service: serverless-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: GET\n          path: hello\n          integration: lambda-proxy\n"]},{"id":99253050,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: home-assistant # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - node_modules/**\n\nfunctions:\n  homeAssistant:\n    handler: handler.homeAssistant\n    events:\n        - alexaSkill\n        \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":159585157,"files":["service: ${self:custom.name}\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n  timeout: 30\n  memorySize: 512\n  apiKeys:\n    - ${self:custom.stackName}-key\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: 'arn:aws:s3:::${self:custom.s3BucketName}*'\n\npackage:\n  individually: true\n\nfunctions:\n  api:\n    handler: src/api.handler\n    events:\n      # - http:\n      #     method: any\n      #     path: /{proxy+}\n      #     private: true\n      #     cors: true\n      # - http:\n      #     method: any\n      #     path: /\n      #     private: true\n      #     cors: true\n      - http:\n          method: POST\n          path: /\n          private: true\n          cors: true\n      - http:\n          method: POST\n          path: /getSignedUrl\n          private: true\n          cors: true\n      - http:\n          method: GET\n          path: /ping\n          private: true\n          cors: true\n\n    environment:\n      S3_BUCKET_NAME: ${self:custom.s3BucketName}\n      MAX_FILE_SIZE_MB: 10\n      MAX_WIDTH_PIXELS: 10000\n      MAX_HEIGHT_PIXELS: 10000\n      ALLOWED_IMAGE_TYPES: jpeg,jpg,png\ncustom:\n  name: christian-test\n  region: ${opt:region, 'ap-southeast-2'}\n  stage: ${opt:stage, 'tst'}\n  stackName: ${self:service}-${self:custom.stage}\n  s3BucketName: fileupload-bucket-christian-test\n  webpack:\n    includeModules:\n      forceExclude:\n      - aws-sdk\n      - serverless\n    webpackConfig: ${self:custom.webpack.webpackConfigMap.${self:custom.stage}}\n    webpackConfigMap:\n      tst: ./internals/webpack/webpack.dev.config.js\n      stg: ./internals/webpack/webpack.dev.config.js\n      prd: ./internals/webpack/webpack.prod.config.js\nresources:\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3BucketName}\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins: ['*']\n              AllowedHeaders: ['*']\n              AllowedMethods: ['GET', 'PUT']\n"]},{"id":126057291,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n\n  helloAuthorizerWithFunctionName:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: handler.authFunction\n\n  hello500:\n    handler: handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n  basicAuthentication:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  catchAll:\n    handler: handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n  pathParams:\n    handler: handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Service Name\nservice: my-service\n\n# plugins\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    testLambdaVariable: 'Lambda Environment Variable'\n\n# custom\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\", \"stage-2\"]\n\nfunctions:\n  hello:\n    handler: handler.hello\n    name: test\n    events:\n      - http:\n          path: task2\n          method: get\n"]},{"id":150366503,"files":["# serverless.yml\nservice: serverless-express-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ${opt:region, self:custom.defaultRegion}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  defaultRegion: us-west-2\n  defaultCognitoPoolArn: arn:SOMETHING\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  serverlessExpressApi:\n    name: ${self:provider.stage}-serverless-express-lambda\n    description: API definition written in express\n    handler: index.handler\n    memorySize: 128\n    timeout: 30\n    environment:\n      NODE_ENV: ${opt:stage, self:custom.defaultStage}\n    events:\n      - http: \n          path: /\n          method: ANY\n          cors: true\n      - http: \n          path: /docs/{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n          authorizer:\n            arn: ${opt:cognitoPoolArn, self:custom.defaultCognitoPoolArn}\n\nresources:\n  Resources:\n    userGiftTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: user_gifts\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n          - AttributeName: gift_id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n          - AttributeName: gift_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 4\n          WriteCapacityUnits: 2"]},{"id":119184918,"files":["service: XemHarvestChecker\n\ncustom:\n  emailAddress: \"sample@example.com\" #通知先のメールアドレスを設定\n  accountId: 000000000000 #AWS Account ID\n  IpAddress: \"XXX.XXX.XXX.XXX\" #Delegated harvesting remote node's IP address or Host Name\n  RemoteWalletAddress : \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n  region: ${opt:region,self:provider.region}\n  topicName: ${self:service}-${opt:stage,self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod  #default stage, overwrite by --stage option\n  region: ap-northeast-1  #利用するリージョンの設定\n  memorySize: 128 # Overwrite the default memory size. Default is 1024\n  timeout: 12\n  environment:\n    region: ${opt:region,self:provider.region}\n    topicARN: arn:aws:sns:${opt:region,self:provider.region}:${self:custom.accountId}:${self:custom.topicName}\n    IpAddress: ${self:custom.IpAddress}\n    RemoteWalletAddress : ${self:custom.RemoteWalletAddress}\n\n  iamRoleStatements:\n    - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: \"*\"\n    -  Effect: Allow\n       Action: \"sns:*\"\n       Resource: \"*\"\n\nfunctions:\n  checkHarvestStatus:\n    handler: handler.checkHarvestStatus\n    events:\n      - schedule: cron(0 13 * * ? *)\n\nresources:\n  Resources:\n    snsTopic:\n       Type: \"AWS::SNS::Topic\"\n       Properties:\n          DisplayName: \"Topic for Xem Remote Node Checker\"\n #         Subscription:\n          TopicName: ${self:custom.topicName}\n\n    snsSubscription:\n       Type: \"AWS::SNS::Subscription\"\n       Properties:\n          Endpoint: ${self:custom.emailAddress}\n          Protocol: \"email\"\n          TopicArn:\n            Ref: 'snsTopic'\n"]},{"id":139435352,"files":["# serverless.yml\n\nservice: ichen-lessons-bot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'"]},{"id":145057921,"files":["service: serverless-lambda-mailer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n"]},{"id":149008124,"files":["service: url-shortner\n\nplugins:\n  - serverless-webpack\ncustom:\n  webpack:\n    packager: 'yarn'      # Defaults to npm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n     - Effect: Allow\n       Action:\n         - 'dynamodb:PutItem'\n         - 'dynamodb:GetItem'\n       Resource:\n         'Fn::Join':\n           - ''\n           - - 'arn:aws:dynamodb:'\n             - Ref: 'AWS::Region'\n             - ':'\n             - Ref: 'AWS::AccountId'\n             - ':table/'\n             - Ref: RedirectionsTable\n  environment:\n    TOKEN_SIZE: 10\n    TABLE_NAME:\n      Ref: RedirectionsTable\n\nfunctions:\n  create_redirection:\n    handler: redirector.redirector\n    events:\n      - http:\n          path: /submit\n          method: post\n          cors: true\n  redirect:\n    handler: redirector.redirect\n    events:\n      - http:\n          path: /{key+}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    RedirectionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":125306640,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\nservice: book-lending-app-auth\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  TABLE_USER: book-lending-app-user\n\nresources:\n  Resources:\n    UserDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"userId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"userId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.TABLE_USER}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - UserDynamoTable\n          - Arn\n\nfunctions:\n  login:\n    handler: handlers/authenticate.handler\n    memorySize: 128\n    timeout: 6\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_USER}\n      REGION: ${self:provider.region}\n      # you need to generate one JWT secret here... you can get one at https://www.grc.com/passwords.htm\n      JWT_SECRET: \n    events:\n      - http:\n          path: book-lending-api/authentication\n          method: post\n          cors: true\n  register:\n    handler: handlers/register.handler\n    memorySize: 128\n    timeout: 6\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_USER}\n      REGION: ${self:provider.region}\n    events:\n      - http:\n          path: book-lending-api/registration\n          method: post\n          cors: true\n"]},{"id":130275007,"files":["service:\n  name: alexa-template\n\nplugins:\n  - serverless-webpack\n  - serverless-sentry\n\ncustom:\n  sentry:\n    dsn: #sentry-dsn-url\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'local'}\n  runtime: nodejs6.10\n  profile: alexa-template-alexa-skill\n  region: us-east-1\n  environment: ${file(./env.yaml):${opt:stage, self:provider.stage}}\n\nfunctions:\n  alexa:\n    handler: src/alexa.handler\n    events:\n      - alexaSkill\n"]},{"id":163147731,"files":["service: polyfill\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment:\n    NODE_ENV: production\n\npackage:\n  exclude:\n  - test/\n\nfunctions:\n  minified:\n    handler: handler.mininify\n    events:\n    - http:\n        path: polyfill.min.js\n        method: GET\n        cors:\n          origin: '*'\n          maxAge: 86400\n          allowCredentials: true\n\n  normal:\n    handler: handler.normal\n    events:\n    - http:\n        path: polyfill.js\n        method: GET\n        cors:\n          origin: '*'\n          maxAge: 86400\n          allowCredentials: true\n"]},{"id":102905131,"files":["service: todo-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: dev\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        \"Fn::GetAtt\": [ todoTable, Arn ]\n\nfunctions:\n  todos:\n    handler: handler.todos\n    events:\n      - http:\n          path: todos/list\n          method: get\n          cors: true\n      - http:\n          path: todos/update/{id}\n          method: put\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n      - http:\n          path: todos/update/{id}\n          method: delete\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n      - http:\n          path: todos/create\n          method: post\n          cors: true\n\nplugins:\n  - serverless-webpack\n#   - serverless-domain-manager\n\n# custom:\n#   customDomain:\n#     basePath: \"urls\"\n#     domainName: todos.example.com\n#     stage: dev\n\nresources:\n  Resources:\n    todoTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"title\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"title\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: \"5\"\n          WriteCapacityUnits: \"5\"\n        GlobalSecondaryIndexes:\n          -\n            IndexName: \"todoGSI\"\n            KeySchema:\n              -\n                AttributeName: \"title\"\n                KeyType: \"HASH\"\n            Projection:\n              NonKeyAttributes:\n                - \"description\"\n              ProjectionType: \"INCLUDE\"\n            ProvisionedThroughput:\n              ReadCapacityUnits: \"5\"\n              WriteCapacityUnits: \"5\"\n  Outputs:\n    TodoTableArn:\n      Description: \"Todo Table Arn\"\n      Value:\n        \"Fn::GetAtt\": [ todoTable, Arn ]\n"]},{"id":109537346,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: helloworld\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello/get\n          method: get\n\nplugins:\n  - serverless-offline\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":114550097,"files":["service: serverless-ether-trends-bot\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: ${file(env.yml):${opt:stage}}\n\nfunctions:\n  daily:\n    handler: src/handler.daily\n    events:\n      - schedule: cron(0 9 * * ? *)\n  weekly:\n    handler: src/handler.weekly\n    events:\n      - schedule: cron(0 9 ? * SUN *)\n  monthly:\n    handler: src/handler.monthly\n    events:\n      - schedule: cron(0 9 1 * ? *)\n"]},{"id":124448001,"files":["service: serverless-domain-forwarder\n\nplugins:\n  - serverless-plugin-scripts\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-central-1\n  memorySize: 128\n  versionFunctions: false\n\ncustom: \n  conf: ${file(./config.js)}\n  scripts:\n    hooks:\n      'before:deploy:deploy': npm run test\n\nfunctions:\n  forward:\n    handler: src/handlers.forward\n    name: ${self:custom.conf.namePrefix}-lambda\n    description: Forwards requests to the configured target domain.\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /{any+}\n          method: get\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName:\n                Fn::Join:\n                  - \"\"\n                  - - Ref: ApiGatewayRestApi\n                    - \".execute-api.\"\n                    - Ref: AWS::Region\n                    - \".amazonaws.com\"\n              Id: ${self:custom.conf.namePrefix}-lambda\n              CustomOriginConfig:\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              OriginPath: /${self:provider.stage}\n          Enabled: true\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            TargetOriginId: ${self:custom.conf.namePrefix}-lambda\n            ForwardedValues:\n              QueryString: \"false\"\n              Cookies:\n                Forward: all\n            ViewerProtocolPolicy: allow-all\n          Aliases: ${self:custom.conf.domains}\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: \"true\"\n            ## To configure an AWS Certificate, remove the CloudFrontDefaultCertificate line above,\n            ## uncomment the next lines and set the arn respectively.\n            #\n            # AcmCertificateArn: <arn:your-cert-arn>\n            # SslSupportMethod: sni-only\n            #\n          Comment: ${self:custom.conf.namePrefix}\n\n  Outputs:\n    CloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]\n"]},{"id":125696958,"files":["service:\n  name: pets-aws-service\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createPet:\n    handler: handler.create\n    events:\n      - http:\n          method: POST\n          path: create\n  showPet:\n    handler: handler.show\n    events:\n      - http:\n          path: pets/{petId}\n          method: GET\n  listPets:\n    handler: handler.list\n    events:\n      - http:\n          path: pets\n          method: GET\n","service:\n  name: aws-nodejs-ecma-script\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n"]},{"id":166602594,"files":["service: catsPlease\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-2\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'yarn'\nfunctions:\n  catsPlease:\n    handler: handler.sendCats\n    events:\n      - http:\n          path: cats\n          method: get\nplugins:\n- serverless-webpack\n"]},{"id":112020763,"files":["service: serverless-mailgun-slack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: ap-northeast-1\n  environment:\n    MAILGUN_API_KEY: ${file(./secrets.yml):mailgun_api_key}\n    SLACK_WEBHOOK_URL: ${file(./secrets.yml):slack_webhook_url}\n\nfunctions:\n  ping: {handler: handler.ping}\n  mailgunCallback:\n    handler: handler.mailgunCallback\n    events:\n      - http:\n          path: callback\n          method: post\n"]},{"id":111291441,"files":["service: bandonfews-serverless\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n      \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    FEWS_URL: \"http://www.bandonfloodwarning.ie/main.php\"\n    FUSIONTABLES_ID: \"103YIcARoxuaWT7NfZ8mVBzY554sF_3ONYC1N3DE\"\n\nfunctions:\n  check:\n    handler: check.check\n    events:\n      - http:\n          path: bandonfews\n          method: get\n          cors: true\n  cron:\n    handler: check.check\n    events:\n      # Invoke Lambda function every 15 mins\n      - schedule: rate(15 minutes)\n"]},{"id":135595372,"files":["service: ${self:custom.naming.fullDashName}\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_REGION, 'us-east-1'}\n  memorySize: 128\n  timeout: 10\n  stage: ${self:custom.stage}\nplugins:\n- serverless-webpack\n- serverless-offline\n- serverless-domain-manager\ncustom:\n  # Naming Conventions\n  naming:\n    fullName: ServerlessTypescriptBoilerplate\n    fullDashName: serverless-ts-boilerplate\n    shortName: sls-boilerplate\n  # API Gateway Custom Domains\n  # customDomain:\n  #   domainName: ${env:API_DOMAIN}\n  #   stage: ${self:custom.stage}\n  #   basePath: ${env:API_BASEPATH, self:custom.stage}\n  #   certificateName: ${env:API_CERT_NAME}\n  #   createRoute53Record: ${env:API_CREATE_ROUTE53, 'true'}\n  #   endpointType: ${env:API_ENDPOINT_TYPE, 'edge'}\n  stage: ${env:API_STAGE, 'staging'}\n  webpackIncludeModules: true\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        # API Gateway Name\n        Name: ${env:API_NAME, self:custom.naming.fullName}\nfunctions:\n  helloHandler:\n    # Lambda Function Name\n    name: ${self:custom.naming.shortName}-hello\n    # Lambda Function Description\n    description: ${self:custom.naming.fullName} Hello Handler\n    # Lambda Handler\n    # handler: handlers/hello.default\n    handler: src/handlers/hello.helloHandler\n    # API Gateway Configuration\n    events:\n    - http:\n        path: service/hello\n        method: get\n    # Function-specific Environment Variables\n    # environment:\n    #   MyPerFunctionEnv: foo"]},{"id":123687149,"files":["service: serverless-example\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: yarn\n  functionPrefix: serverless-example-${ self:provider.stage }\n  cognitoUserPoolId: ap-northeast-1_XXXXXXXXX\n  cognitoUserPoolArn: arn:aws:cognito-idp:ap-northeast-1:XXXXXXXXX:userpool/${ self:custom.cognitoUserPoolId }\n  RDSVPC:\n    securityGroupIds:\n      - sg-xxxxxxxx\n    subnetIds:\n      - subnet-xxxxxxxx\n      - subnet-xxxxxxxx\n  iamLambdaCloudWatchRoleAction:\n    - logs:CreateLogGroup\n    - logs:CreateLogStream\n    - logs:PutLogEvents\n  authorizer:\n    name: authorizer\n    type: TOKEN\n    identitySource: method.request.header.Authorization\n    identityValidationExpression: Bearer (.*)\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-1\n  stage: ${ opt:stage, 'dev' }\n  apiKeys:\n    - ServerlessExample\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iot:Connect\n        - iot:Publish\n      Resource:\n        - '*'\n  environment:\n    IOT_ENDPOINT: xxxxxxxxxxxxxx-ats.iot.ap-northeast-1.amazonaws.com\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n\nfunctions:\n  authorizer:\n    handler: functions/authorizer.handler\n    name: ${ self:custom.functionPrefix }-authorizer\n    description: Authorizer\n\n  hello:\n    handler: functions/hello.handler\n    name: ${ self:custom.functionPrefix }-hello\n    description: Hello\n    vpc: ${ self:custom.RDSVPC }\n    events:\n      - http:\n          path: hello\n          method: get\n          private: true\n          authorizer: ${ self:custom.authorizer }\n\n  cognitoSignIn:\n    handler: functions/cognitoSignIn.handler\n    name: ${ self:custom.functionPrefix }-cognito-sign-in\n    description: Authorize token\n    role: IamRoleLambdaCognitoAdminInitiateAuth\n    events:\n      - http:\n          path: signin\n          method: post\n          private: true\n\n  cognitoAuthHello:\n    handler: functions/cognitoAuthHello.handler\n    name: ${ self:custom.functionPrefix }-cognito-auth-hello\n    description: Cognito Auth Hello\n    events:\n      - http:\n          path: cognito-hello\n          method: get\n          private: true\n          authorizer:\n            arn: ${ self:custom.cognitoUserPoolArn }\n\n  iotPublishData:\n    handler: functions/iotPublishData.handler\n    name: ${ self:custom.functionPrefix }-iot-publish-data\n    description: IoT publish data.\n\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${ self:service }-${ self:provider.stage }\n        Description: ServerlessExample\n    IamRoleLambdaCognitoAdminInitiateAuth:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${ self:service }-${ self:provider.stage }-cognito-admin-initiate-auth\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        Policies:\n          - PolicyName: AmazonCognitoAdminInitiateAuth\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - cognito-idp:AdminInitiateAuth\n                  Resource: ${ self:custom.cognitoUserPoolArn }\n                - Effect: Allow\n                  Action: ${ self:custom.iamLambdaCloudWatchRoleAction }\n                  Resource:\n                  - 'Fn::Join':\n                    - ':'\n                    -\n                      - 'arn:aws:logs'\n                      - Ref: 'AWS::Region'\n                      - Ref: 'AWS::AccountId'"]},{"id":163386578,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: post_requests_to_s3\n\nplugins:\n  - serverless-domain-manager\n\n# You can pin your service to only deploy with a specific Serverless version\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite serverless.com defaults here\n#  stage: dev\n#  region: us-east-1\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  domains:\n    prod: api.mydomain.com\n    staging: staging-api.mydomain.com\n    dev: dev-api.mydomain.com\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    certificateName: \"*.mydomain.com\"\n    basePath: ''\n    stage: ${opt:stage, self:provider.stage}\n    createRoute53Record: true\n\n  bucket: open-endpoint-requests\n\n# The Lambda function's IAM Role will have this policy:\niamRoleStatements:\n - Effect: Allow\n   Action:\n     - s3:ListBucket\n   Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ] }\n - Effect: Allow\n   Action:\n     - s3:PutObject\n   Resource: { \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\" : \"ServerlessDeploymentBucket\"}, \"/*\" ] ] }\n - Effect: Allow\n   Action:\n     - s3:PutObject\n   Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  ping:\n    memorySize: 512\n    handler: handler.ping\n    events:\n      - http:\n          path: /ping\n          method: get\n  obj1_notification:\n    memorySize: 512\n    handler: handler.save\n    events:\n      - http:\n          path: /{group}/obj1_notification\n          method: post\n          request:\n            parameters:\n              paths:\n                group: true\n    # function environment variables here\n    environment:\n      BUCKET: ${self:custom.bucket}\n  obj2_notification:\n    memorySize: 512\n    handler: handler.save\n    events:\n      - http:\n          path: /{group}/obj2_notification\n          method: post\n          request:\n            parameters:\n              paths:\n                group: true\n    environment:\n      BUCKET: ${self:custom.bucket}\n\npackage:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n  exclude:\n    - node_modules/**\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n"]},{"id":72980945,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-lambdaServerless-bl # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: default\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: '*'\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  getComment:\n    handler: handler.getComment\n\n      #    The following are a few example events you can configure\n      #    NOTE: Please make sure to change your handler code to work with those events\n      #    Check the event documentation for details\n    events:\n      - http:\n          path: comments/{id}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                id: true\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n              Content-Disposition: integration.response.header.Content-Disposition\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n  commentParser:\n    handler: handler.commentParser\n\n      #    The following are a few example events you can configure\n      #    NOTE: Please make sure to change your handler code to work with those events\n      #    Check the event documentation for details\n    events:\n      - s3:\n          bucket: aws-lambdaserverless-comment-inbox\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: comments-\n            - suffix: .json\n\n# you can add CloudFormation resource templates here\nresources:\n Resources:\n   NewResource:\n     Type: AWS::S3::Bucket\n     Properties:\n       BucketName: aws-lambdaserverless-bl-created\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":72126987,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: blake-devmtn-imgur\n# NOTE: update this with your service name\n\n# It will be the base of the CloudFormation stack name, and bucket of where\n# files are stored. Please pick something globally unique.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: dev\n  region: us-west-2\n  # you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        {\n          'Fn::Join':\n            ['', ['arn:aws:s3:::', { 'Ref': 'ServerlessDeploymentBucket' }]],\n        }\n    - Effect: 'Allow'\n      Action:\n        - 's3:PutObject'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'ServerlessDeploymentBucket'\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'S3Bucket'\n    - Effect: 'Allow'\n      Action:\n        - 's3:PutObject'\n        - 's3:GetObject'\n        - 's3:PutObjectAcl'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - 'Ref': 'S3Bucket'\n            - '/*'\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  appBucket: ${self:service}-store-${self:custom.stage}\n  writeEnvVars:\n    SERVERLESS_STAGE: ${self:custom.stage}\n    SERVERLESS_SERVICE_NAME: ${self:service}\n    SERVICE_BUCKET: ${self:custom.appBucket}\n    SERVICE_S3_URL_PREFIX: https://s3-${self:provider.region}.amazonaws.com/${self:custom.appBucket}/\n\n# you can add packaging information here\npackage:\n  exclude:\n    - node_modules/aws-sdk/*\n#  artifact: my-service-code.zip\n\nplugins:\n  - serverless-plugin-write-env-vars\n  - serverless-run-function-plugin\n\nfunctions:\n  sign:\n    handler: handler.sign\n    package:\n      exclude:\n        - node_modules/aws-sdk/*\n\n    #    The following are a few example events you can configure\n    #    NOTE: Please make sure to change your handler code to work with those events\n    #    Check the event documentation for details\n    events:\n      - http:\n          path: uploads/sign\n          method: POST\n          cors: true\n          #  integration: lambda\n          #  request:\n          #    parameters:\n          #      headers:\n          #        contentType: true\n          #  response:\n          #    headers:\n          #      Content-Type: \"'application/json'\"\n#   - s3: ${env:BUCKET}\n#   - schedule: rate(10 minutes)\n#   - sns: greeter-topic\n#   - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\nresources:\n  Parameters:\n    S3BucketParam:\n      Type: String\n      MaxLength: 128\n      MinLength: 1\n      Default: ${self:custom.appBucket}\n      AllowedPattern: '.*'\n      Description: 'The name of the bucket where stuff is stored'\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.appBucket}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - 'POST'\n                - 'PUT'\n              AllowedOrigins:\n                - '*.cloudfront.net'\n                - '*.s3.amazonaws.com'\n                - '*.s3-us-west-2.amazonaws.com'\n              Id: myCORSRuleId1\n              MaxAge: 600\n            - AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - 'GET'\n              AllowedOrigins:\n                - '*'\n              Id: myCORSRuleId2\n              MaxAge: 600\n      DeletionPolicy: Delete\n    S3BucketPolicy:\n      Type: 'AWS::S3::BucketPolicy'\n      Properties:\n        Bucket:\n          Ref: 'S3Bucket'\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'S3Bucket'\n                    - '/*'\n  Outputs:\n    BucketName:\n      Description: 'The bucket for ${self:custom.appBucket}.'\n      Value:\n        Ref: S3Bucket\n"]},{"id":139757792,"files":["service: github-webhooks\n\nplugins:\n  - serverless-offline\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: eu-central-1\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${self:custom.secrets.GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_KEY: ${self:custom.secrets.GITHUB_API_KEY}\n\nfunctions:\n  fixupValidator:\n    handler: handler.fixupCommits\n    events:\n      - http:\n          path: github-fixups\n          method: post\n          cors: true\n  pythonRequirementsValidator:\n    handler: handler.pythonRequirements\n    events:\n      - http:\n          path: github-python-requirements\n          method: post\n          cors: true\n"]},{"id":144733932,"files":["service: ignarjs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\nresources:\n  Resources:\n    IgnarJSTable:\n      Type: AWS::RDS::DBInstance\n      Properties:\n        DBName: ignar\n        AllocatedStorage: 5\n        DBInstanceClass: db.t2.micro\n        Engine: postgres\n        MasterUsername: root\n        MasterUserPassword: yuasfoj!(8467\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":158070934,"files":["service: api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  apiKeys:\n    - ${file(../serverless.env.yml):${opt:stage, self:provider.stage}.API_KEY}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action: sns:Publish\n      Sid: VisualEditor0\n      Resource:\n        - \"*\"\n        - \"arn:aws:sns:*:*:*\"\n\npackage:\n  exclude:\n    - node_modules/**/README.*\n    - node_modules/**/test/**\n    - node_modules/aws-sdk/** # aws-sdk is in lambda's envrionment\n\nfunctions:\n  auth-sendSMSToken:\n    handler: auth/sendSMSToken.sendSMSToken\n    events:\n      - http:\n          path: ${self:service}/v1/auth/sendSMSToken\n          method: post\n          private: true\n  auth-sendEmailToken:\n    handler: auth/sendEmailToken.sendEmailToken\n    events:\n      - http:\n          path: ${self:service}/v1/auth/sendEmailToken\n          method: post\n          private: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2"]},{"id":153509983,"files":["service: serverless-image-upload\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  environment:\n    BUCKET: tayzlor-serverless-image-upload\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:*'\n      Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'\n\nresources:\n  - ${file(resources/s3-bucket.yml)}\n\npackage:\n  exclude:\n    - .serverless\n    - .webpack\n    - coverage\n    - .babelrc\n    - .gitignore\n    - package.json\n    - README.md\n    - serverless.yml\n    - webpack.config.js\n\nfunctions:\n  fetch:\n    handler: handler.fetch\n    events:\n      - http:\n          path: fetch\n          method: get\n  upload:\n    handler: handler.upload\n    events:\n      - http:\n          path: upload\n          method: post\n"]},{"id":125640026,"files":["service: zxcvbn-on-lambda\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  passwordCalculate:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: calculate\n          method: post"]},{"id":124991239,"files":["service: meetup-api-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, file(config.json):stage, 'dev'}\n  region: ${opt:region, file(config.json):region, 'us-east-1'}\n\nfunctions:\n  call:\n    handler: src/call.handler\n    name: ${self:provider.stage}-${self:service}-call\n    memorySize: 128\n    events:\n      - http:\n          path: call\n          method: any\n\nplugins:\n- serverless-offline # plugin to run the offline emulation\n"]},{"id":89145076,"files":["service: hello-serverless\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n\n"]},{"id":139735113,"files":["service: starbs\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: prod\n  environment:\n    BUCKET: 'i.cwlf.uk'\n    URL: 'https://i.cwlf.uk/'\n  iamRoleStatements:\n    -  Effect: 'Allow'\n       Action:\n         - 's3:ListBucket'\n       Resource: 'arn:aws:s3:::i.cwlf.uk'\n    -  Effect: 'Allow'\n       Action:\n         - 's3:PutObject'\n         - 's3:PutObjectAcl'\n         - 's3:GetObject'\n       Resource: 'arn:aws:s3:::i.cwlf.uk/*'\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\npackage:\n  exclude:\n    - package.json\n    - .gitignore\n    - .git/**\n    - package-lock.json\n    - serverless.yml\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\nfunctions:\n  yeh:\n    handler: handler.image\n    events:\n      - http:\n          path: /\n          method: post\n          contentHandling: CONVERT_TO_BINARY\n      ## this is a bad idea :)\n      #- http:\n      #    path: {proxy+}\n      #    method: get\n      #    contentHandling: CONVERT_TO_BINARY\n"]},{"id":141908196,"files":["service: currency-alert\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: prod\n  timeout: 3\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ses:SendEmail\n\npackage:\n  include:\n    - .env\n  individually: true\n\nfunctions:\n  check:\n    handler: handler.run\n    events:\n      - schedule: rate(12 hours)\n    reservedConcurrency: 1\n\nresources:\n  Resources:\n    MemoryUsedMetricFilter:\n      Type: AWS::Logs::MetricFilter\n      Properties:\n        LogGroupName: \"/aws/lambda/currency-alert-${self:provider.stage}-check\"\n        FilterPattern: '[report_prefix=\"REPORT\", ..., max_memory_used_prefix=\"Used:\", max_memory_used,max_memory_used_unit=\"MB\"]'\n        MetricTransformations:\n        - MetricValue: \"$max_memory_used\"\n          MetricNamespace: Lambda\n          MetricName: Memory\n\ncustom:\n  prune:\n    automatic: true\n    number: 3\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n"]},{"id":155314535,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-example # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  - ${file(./routes.yml)}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-plugin-include-dependencies\n\npackage:\n  individually: true\n\ncustom:\n  webpackIncludeModules:\n      packagePath: './package.json'"]},{"id":121334579,"files":["service: serverless api template\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  timeout: 6\n\nfunctions:\n\n  getData:\n    handler: functions/getData\n    events:\n      - http:\n          path: api/get/{id}\n          method: get\n          cors: true\n\n  postData:\n    handler: functions/postData\n    events:\n      - http:\n          path: api/post\n          method: post\n          cors: true\n"]},{"id":164192940,"files":["service: serverless-authentication # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  profile: serverless-authentication\n  runtime: nodejs8.10\n  stage: ${opt:stage,'development'}\n  region: us-west-2\n  environment: ${file(secrets.yml):${self:provider.stage}}\n\ncustom:\n  webpack:\n    includeModules: true\n    packager: yarn\n    packagePath: './package.json'\n  authorizers:\n    user:\n      name: userAuthHandler\n      identitySource: method.request.header.Authorization\n      type: request        \n\npackage:\n  individually: true\n  exclude:\n    - 'node_modules/**'\n    - 'secrets.yml'\n    - '.git/**'\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nfunctions:\n  - ${file(./src/routes/auth.routes.yml)}\n  - ${file(./src/routes/users.routes.yml)}\n      "]},{"id":96041781,"files":["service: travis-webhook\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  function:\n    handler: handler.webhook\n    events:\n      - http:\n          path: index\n          method: post\n          cors: true\n    environment:\n      WEBHOOK: /api/webhooks/${opt:api}"]},{"id":102276029,"files":["service: serverless-webcron\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: ap-northeast-1\n  timeout: 30\n  environment:\n    DYNAMODB_TABLE_NAME: ${file(./secrets.yml):dynamodb_table_name}\n    SLACK_WEBHOOK_URL: ${file(./secrets.yml):slack_webhook_url}\n\nfunctions:\n  ping: {handler: handler.ping}\n  site: {handler: handler.site}\n  sites: {handler: handler.sites}\n  execute:\n    handler: handler.execute\n    events:\n      - schedule: cron(0 19 * * ? *)\n  \nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${file(./secrets.yml):dynamodb_table_name}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: serverless-webcron-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/${file(./secrets.yml):dynamodb_table_name}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":99386763,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: caerurfapugsAPI\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  profile: serverless-admin\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"ses:SendEmail\"\n       Resource:\n         - \"*\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  mailinglist:\n    handler: handler.mailinglist\n    environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n    events:\n      - http:\n          path: mailinglist\n          method: post\n  enquiry:\n    handler: handler.enquiry\n    environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n    events:\n      - http:\n          path: enquiry\n          method: post\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":90230143,"files":["service: starbird\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      - schedule: rate(1 minute)"]},{"id":127835179,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-admin\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n  stage: test\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":148265323,"files":["# Name of your Serverless service\nservice: serverless-dynamodb-rest-poc\n\n# Serverless framework (You can leaves this alone)\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\n#app: my-serverless-app # App name used to publish your service to the serverless platform\n#tenant: user # User used to publish your service to the serverless platform\n\n# Serverless plugins\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\n# Custom variables (Used by plugins and in this doc)\ncustom:\n\n  # DynamoDB Local Settings\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n    stages:\n      - dev\n\n  # Serverless Offline Settings\n  serverless-offline:\n    port: 3000\n    prefix: ${self:provider.environment.REST_PATH_PREFIX} # Adds a prefix to every path, to send your requests to http://localhost:3000/[prefix]/[your_path] instead\n#    httpsProtocol: \"resources/dev-certs\" # To enable HTTPS, specify directory (relative to your cwd, typically your project dir) for both cert.pem and key.pem files.\n\n# Serverless provider settings\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    REST_PATH_PREFIX: v1\n    TODOS_TABLE: todo-${opt:stage, self:provider.stage}\n  iamRoleStatements: ${file(resources/iam-role-stmt-resources.yml)}\n\n# Serverless functions\nfunctions: ${file(resources/root-functions.yml)}\n\n# Serverless resources (See resources/dynamodb-tables.yml)\nresources:\n  - ${file(resources/dynamodb-tables.yml)}\n"]},{"id":104270246,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manager\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  invoke:\n    handler: handler.invoke\n    events:\n     - http:\n         path: invoke\n         method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-plugin-simulate","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: services\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-plugin-simulate\n"]},{"id":103465571,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  buffer:\n    handler: handler.buffer\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http: POST buffer\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":94903019,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  environment:\n    TABLE_MENU:\n      Ref: DynamoDBTable\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable]]\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable, '/index/*']]\n\nfunctions:\n  api:\n    handler: functions/hello/hello.handler\n    events:\n      - http:\n          path: hello\n          method: get\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-table\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: secondaryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes: \n          - IndexName: secondaryIndex\n            KeySchema: \n              - AttributeName: secondaryId\n                KeyType: HASH                \n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":73402954,"files":["service: meta-scrape\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-admin\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n    description: A basic function for scraping a site's meta tags to populate preview components\n    memorySize: 128\n    timeout: 15\n    events:\n      - http:\n          path: scrape\n          method: get\n          cors: true"]},{"id":133766253,"files":["service: node-serverless-boilerplate\n\nparameters:\n  region: &region ap-southeast-2\n  path: &path /\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  region: *region\n  versionFunctions: true\n\n  environment:\n    DYNAMODB_TABLE: ${env:STAGE}-node-serverless-boilerplate\n    NODE_ENV: ${env:NODE_ENV}\n    STAGE: ${env:STAGE}\n    APP_ROUTE: ${env:APP_ROUTE}\n    API_KEY: ${env:API_KEY}\n  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:DeleteObject\n        - s3:PutAccelerateConfiguration\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: '*'\n\nresources:\n  Resources:\n    Users:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-dynamodb-local\n  - serverless-dynamodb-autoscaling\n  - serverless-plugin-optimize\n  - serverless-domain-manager\n  - serverless-add-api-key\n  - serverless-prune-plugin\n  - serverless-plugin-warmup\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: src/index.handler\n    name: ${env:STAGE}-node-serverless-boilerplate\n    warmup: true\n    events:\n        - http:\n            path: /\n            method: ANY\n            cors: true\n            private: true\n        - http:\n            path: /{any+}\n            method: ANY\n            cors: true\n            private: true\n\ncustom:\n  optimize:\n    debug: true\n    minify: true\n    plugins: ['@babel/plugin-proposal-object-rest-spread']\n    includePaths: ['.env.example']\n\n  stage: ${opt:stage, self:provider.stage}\n\n  # NEED TO UPDATE: domains\n  # domains:\n  #   prod: serverless.yourdomain.com\n  #   staging: serverless-staging.yourdomain.com\n  #   dev: serverless-dev.yourdomain.com\n  \n  # NEED TO UPDATE: customDomain - certificateName\n  # customDomain:\n  #   basePath: ${env:APP_ROUTE}\n  #   certificateName: '*.yourdomain.com'\n  #   domainName: ${self:custom.domains.${self:custom.stage}}\n  #   stage: ${self:provider.stage}\n  #   createRoute53Record: true\n\n  apikey: ${env:API_KEY}\n\n  capacities:\n    - table: Users  # DynamoDB Resource\n      read:\n        minimum: 10        # Minimum read capacity\n        maximum: 1000     # Maximum read capacity\n        usage: 0.5       # Targeted usage percentage\n      write:\n        minimum: 10       # Minimum write capacity\n        maximum: 200      # Maximum write capacity\n        usage: 0.5        # Targeted usage percentage\n\n  prune:\n    automatic: true\n    number: 3\n\n  dotenv:\n    include:\n      - NODE_ENV\n      - APP_ROUTE\n      - DYNAMODB_PORT\n      - API_KEY\n"]},{"id":137249678,"files":["\n\nservice: hello\n\nprovider:\n  name: openwhisk\n  ignore_certs: true\n  runtime: nodejs:8\n  memory: 512 # Overwrite the default memory size. Default is 256\n\nfunctions:\n  hello:\n    name: ${self:service}-${opt:stage, 'dev'}\n    handler: src/index.handler\n    events:\n      - http: GET hello\n\nplugins:\n  - serverless-openwhisk\n  "]},{"id":138812224,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n  # user:\n  #   handler: index.user\n  #   events:\n  #     - http:\n  #         path: /user\n  #         method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":135071747,"files":["service: email-verifier-serverless-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  timeout: 30\n\nfunctions:\n  verify:\n    handler: controller/email.handler\n    events:\n      - http: OPTIONS /verify\n      - http: POST /verify  \n\nplugins:\n  - serverless-offline\n"]},{"id":167232090,"files":["service:                   sirris-cloud-sec-demo\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage:                   ${opt:stage, self:provider.stage}\n  appName: sirrissecuritydemo\n    # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-secdemo\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  amplify:\n    - filename: ../frontend/src/aws-exports.js\n      type: javascript\n      appClient: CognitoUserPoolClient\n      s3bucket: disabled\n  fullstack:\n    domain: demo.security.denbot.co\n    certificate: arn:aws:acm:us-east-1:564006752217:certificate/788aca6a-2730-475e-a01b-f24aaac5ae97     # The ARN for the SSL cert to use form AWS CertificateManager\n    bucketName: roomba-demo-${self:custom.stage}                  # Unique name for the S3 bucket to host the client assets\n    distributionFolder: ../frontend/build            # Path to the client assets to be uploaded to S3\n    indexDocument: index.html                  # The index document to use\n    errorDocument: error.html                  # The error document to use\n    singlePageApp: true                       # If true 403 errors will be rerouted (missing assets) to your root index document to support single page apps like React and Angular where the js framework handles routing\n    apiPath: api                               # The path prefix for your API Gateway lambdas. The path for the lambda http event trigger needs to start with this too eg. api/myMethod\n    clientCommand: npm run build                   # Command to generate the client assets. Defaults to doing nothing\n    clientSrcPath: ../frontend                      # The path to where you want to run the clientCommand\n    # waf: 00000000-0000-0000-0000-000000000000  # ID of the Web Application Firewall. Defaults to not used\n    logging:\n      bucket: accesslogs-sirris-cloud.s3.amazonaws.com\n      prefix: ${self:custom.appName}-${self:custom.stage}\n\nprovider:\n  name:                    aws\n  runtime:                 nodejs8.10\n  stage:                   dev\n  region:                  eu-west-1\n  environment:\n    tableName: ${self:custom.tableName}\n  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [ NotesTable, Arn ]\n\nfunctions:\n  listNotes:\n    handler:               list.main\n    timeout:               3\n    memorySize:            128\n    events:\n      - http:\n          path:            api/notes\n          method:          get\n          authorizer:      aws_iam\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n\n  createNote:\n    handler:               create.main\n    timeout:               3\n    memorySize:            128\n    events:\n      - http:\n          path:            api/notes\n          method:          post\n          authorizer:      aws_iam\n          cors:\n              origin: '*'\n              headers:\n                - Content-Type\n                - X-Amz-Date\n                - Authorization\n                - X-Api-Key\n                - X-Amz-Security-Token\n                - X-Amz-User-Agent\n              allowCredentials: false\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # dynamodb table\n  - ${file(resources/dynamodb-notes-table.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\nplugins:\n  - serverless-webpack\n  - aws-amplify-serverless-plugin\n  - fullstack-serverless\n"]},{"id":97417752,"files":["service: wikitags-renderer-v2\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\ncustom:\n  webpack: ./webpack.serverless.config.js\n\nfunctions:\n\n  home:\n    handler: handler.home\n    events:\n      - http:\n          method: post\n          path: home\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  login:\n    handler: handler.login\n    events:\n      - http:\n          method: post\n          path: login\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  category:\n        handler: handler.category\n        events:\n          - http:\n              method: post\n              path: category\n              integration: lambda\n              response:\n                headers:\n                  Content-Type: \"'text/html'\"\n                template: $input.path('$')\n              authorizer:\n                type: aws_iam\n  entity:\n      handler: handler.entity\n      events:\n        - http:\n            method: post\n            path: entity\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  lists:\n      handler: handler.lists\n      events:\n        - http:\n            method: post\n            path: lists\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  profile:\n      handler: handler.profile\n      events:\n        - http:\n            method: post\n            path: profile\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  create_list:\n      handler: handler.create_list\n      events:\n        - http:\n            method: post\n            path: create_list\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_tags:\n      handler: handler.add_tags\n      events:\n        - http:\n            method: post\n            path: add_tags\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_modifiers:\n      handler: handler.add_modifiers\n      events:\n        - http:\n            method: post\n            path: add_modifiers\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  trends:\n      handler: handler.trends\n      events:\n        - http:\n            method: post\n            path: trends\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n\n","service: wikitags-renderer\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\ncustom:\n  webpack: ./webpack.serverless.config.js\n\nfunctions:\n  login:\n    handler: handler.login\n    events:\n      - http:\n          method: get\n          path: login\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  home:\n    handler: handler.home\n    events:\n      - http:\n          method: get\n          path: home\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n          authorizer:\n            type: aws_iam\n  category:\n      handler: handler.category\n      events:\n        - http:\n            method: get\n            path: category\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  entity:\n      handler: handler.entity\n      events:\n        - http:\n            method: get\n            path: entity\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  lists:\n      handler: handler.lists\n      events:\n        - http:\n            method: get\n            path: lists\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  profile:\n      handler: handler.profile\n      events:\n        - http:\n            method: get\n            path: profile\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  create_list:\n      handler: handler.create_list\n      events:\n        - http:\n            method: get\n            path: create_list\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_tags:\n      handler: handler.add_tags\n      events:\n        - http:\n            method: get\n            path: add_tags\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n  add_modifiers:\n      handler: handler.add_modifiers\n      events:\n        - http:\n            method: get\n            path: add_modifiers\n            integration: lambda\n            response:\n              headers:\n                Content-Type: \"'text/html'\"\n              template: $input.path('$')\n            authorizer:\n              type: aws_iam\n\n"]},{"id":86615130,"files":["service: coworking-demo-csharp\nprovider:\n  name: aws\n  runtime: dotnetcore1.0\npackage:\n  artifact: bin/release/netcoreapp1.0/publish/deploy-package.zip\n\nfunctions:\n  hello:\n    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello\n    integration: lambda\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n","service: coworking-bl-nodejs\nprovider:\n  name: aws\n  runtime: nodejs6.10\nfunctions:\n  hello:\n    handler: handler.hello\n    integration: lambda\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true"]},{"id":145526207,"files":["service: user-api\r\n\r\npackage:\r\n  exclude:\r\n    - '**'\r\n  include:\r\n    - deploy/handler.js\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs8.10\r\n  stage: ${opt:stage, 'dev'}\r\n  environment:\r\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\r\n    REGION: ${opt:region, self:provider.region}\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\r\n\r\nfunctions:\r\n  create:\r\n    handler: deploy/handler.userCreate\r\n    events:\r\n      - http:\r\n          path: user\r\n          method: post\r\n          cors: true\r\n  list:\r\n    handler: deploy/handler.userList\r\n    events:\r\n      - http:\r\n          path: user\r\n          method: get\r\n          cors: true\r\n  getById:\r\n    handler: deploy/handler.userGetById\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: get\r\n          cors: true\r\n  update:\r\n    handler: deploy/handler.userUpdate\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: put\r\n          cors: true\r\n  delete:\r\n    handler: deploy/handler.userDelete\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: delete\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    TodosDynamoDbTable:\r\n      Type: 'AWS::DynamoDB::Table'\r\n      DeletionPolicy: Retain\r\n      Properties:\r\n        AttributeDefinitions:\r\n          -\r\n            AttributeName: id\r\n            AttributeType: S\r\n        KeySchema:\r\n          -\r\n            AttributeName: id\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\r\n"]},{"id":123996170,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: webhook\n          method: post\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n    environment:\n      WEBHOOK_URL: $NGROK_URL\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":158110659,"files":["service: aws-nodejs-lighthouse\n\nframeworkVersion: \"=1.35.1\"\n\nplugins:\n  - serverless-plugin-chrome\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 900\n  environment:\n    DEBUG: \"*\"\n    SLS_DEBUG: \"*\"\n\nfunctions:\n  lighthouse:\n    handler: handler.lighthouse\n"]},{"id":152767306,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-user-mgmt-2 # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:ENV_STAGE}\n  region: ${env:ENV_REGION}\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:us-east-1:656168058398:table/users\"\n        - \"arn:aws:dynamodb:us-east-1:656168058398:table/users/index/emailIndex\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  ping:\n    handler: homeHandler.ping\n    events:\n      - http:\n          path: ping\n          method: get\n          cors: true\n  register:\n    handler: homeHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n  login:\n    handler: homeHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n  refreshToken:\n    handler: homeHandler.refreshToken\n    events:\n      - http:\n          path: refreshtoken\n          method: post\n          cors: true\n  changePassword:\n    handler: homeHandler.changePassword\n    events:\n      - http:\n          path: changepassword\n          method: post\n          cors: true\n\n  getUsers:\n    handler: apiHandler.getUsers\n    events:\n      - http:\n          path: api/v1/users\n          method: get\n          cors: true\n  getUser:\n    handler: apiHandler.getUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: get\n          cors: true\n  postUser:\n    handler: apiHandler.postUser\n    events:\n      - http:\n          path: api/v1/users\n          method: post\n          cors: true\n  putUser:\n    handler: apiHandler.putUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: put\n          cors: true\n  deleteUser:\n    handler: apiHandler.deleteUser\n    events:\n      - http:\n          path: api/v1/users/{id}\n          method: delete\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\ncustom:\n  serverless-offline:\n    port: 5000\n"]},{"id":141854482,"files":["service: karma-monitor\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: prod\n  timeout: 3 # Reddit APIs can take a long time to respond\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ses:SendEmail\n\npackage:\n  individually: true\n\nfunctions:\n  check:\n    handler: handler.run\n    events:\n      - schedule: rate(10 minutes)\n    reservedConcurrency: 1\n\nresources:\n  Resources:\n    MemoryUsedMetricFilter:\n      Type: AWS::Logs::MetricFilter\n      Properties:\n        LogGroupName: \"/aws/lambda/${self:service}-${self:provider.stage}-check\"\n        FilterPattern: '[report_prefix=\"REPORT\", ..., max_memory_used_prefix=\"Used:\", max_memory_used,max_memory_used_unit=\"MB\"]'\n        MetricTransformations:\n        - MetricValue: \"$max_memory_used\"\n          MetricNamespace: Lambda\n          MetricName: Memory\n\ncustom:\n  prune:\n    automatic: true\n    number: 3\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n"]},{"id":121991350,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get: \n    handler: get.main\n    events: \n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http: \n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete: \n    handler: delete.main\n    events: \n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":121947933,"files":["# NOTE: update this with your service name\nservice: sls-chrome-dom\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  chrome:\n    flags:\n      - --window-size=1280x1696\n      - --hide-scrollbars\n    functions:\n      - version\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  timeout: 30\n\nfunctions:\n  dom:\n    handler: src/handlers/dom.default\n    events:\n      - http:\n          path: dom\n          method: get\n\n  version:\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version\n          method: get\n"]},{"id":123860970,"files":["service: lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n          integration: lambda-proxy\n          authorizer: aws_iam\n"]},{"id":122312238,"files":["service: sls-chrome-puppeteer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  timeout: 30\n  environment:\n    SLS_DEBUG: \"*\"\n    # DEBUG: \"*\"\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack: ./webpack.config.js\n  webpackIncludeModules: true\n\nfunctions:\n  version:\n    description: Show Chrome version using puppeteer\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version\n          method: get\n\n  dom:\n    description: Show DOM (and additional info) for given url using puppeteer\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/dom.default\n    events:\n      - http:\n          path: dom\n          method: get\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Properties:\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    # Enable X-Ray tracing on Lambda functions\n    # ScreenshotLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n    # PdfLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n"]},{"id":163147869,"files":["service: highcharts\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: us-east-1\n  memorySize: 512\n  timeout: 10\n\nlayers:\n  phantomjs:\n    path: bin\n\nfunctions:\n  graph:\n    handler: handler.graph\n    events:\n      - http:\n          path: /\n          method: ANY\n          contentHandling: CONVERT_TO_BINARY\n          cors:\n            origin: '*'\n            maxAge: 86400\n            allowCredentials: true\n    layers:\n      - {Ref: PhantomjsLambdaLayer}\n"]},{"id":84730252,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-scheduler # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - .env\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  cron:\n    handler: handler.run\n    memorySize: 128\n    environment:\n      URL: 'http://www.example.com/'\n    events:\n      - schedule:\n          name: scheduler\n          description: 'scheduled rate is about 10 minutes'\n          rate: rate(10 minutes)\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http: \n          path: webhook\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":78198380,"files":["service: slack-lunch-hunter\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: ${opt:profile}\n  region: eu-central-1\n  timeout: 20 # optional, default is 6\n  stage: dev\n\nfunctions:\n  notify:\n    handler: src/handler.notify\n    events:\n      - http:\n          path: notify\n          method: GET\n          integration: lambda\n      - schedule: cron(55 10 ? * MON-FRI *) # 11:55 UTC+1 Mon-Fri\n    memorySize: 128 # minimal size\n"]},{"id":158952256,"files":["service: wozitech-alexa-skills\n\ncustom:\n  environment: ${opt:stage, 'development'}\n  bucketName: \"${self:custom.environment}-thisbucket\"\n  region: ${opt:region, 'eu-west-1'}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: serverless-admin\n  region: ${self:custom.region}\n  endpointType: REGIONAL\n  stage: ${opt:stage, 'development'}\n  timeout: 15\n  memorySize: 128\n  environment:\n    LOG_LEVEL: 1      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n    SLACK_LEVEL: 1          # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n  role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_lambda_basic_role\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n  exclude:\n    - '**/*'\n    - .git/**\n\nfunctions:\n  myBuses:\n    handler: myBuses.handler\n    environment:\n      TFL_API_SECRET_ID: 'TFL_API_Portal'\n      LOG_LEVEL: 3      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n      SLACK_WEBHOOK: 'SLACK_MY_BUSES'\n      SLACK_LEVEL: 5          # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n    role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_tfl_lambda_role    # note, the name of the role includes the region, but with underscores\n    events:\n      - alexaSkill: amzn1.ask.skill.2ba78764-0a67-481f-907a-3f7c08287aeb\n    tags:\n      application: \"wit-home\"\n      company: \"WOZiTech\"\n    package:\n      include:\n        - myBuses.js\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies"]},{"id":103017582,"files":["service: es6-generators\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  getPage:\n    handler: handler.fetcher"]},{"id":92340656,"files":["service: garden-api\n#exclude everything that's not our bundle to save lots of disk space.\npackage:\n    exclude:\n        - ./**\n    include:\n        - build/**\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  #generates an api key, we need to do some quick manual work to get this working with our functions.\n  apiKeys:\n    - garden-api-${opt:stage, self:provider.stage}-secret\n  #dynamic environemental variables for our table names because hard coding is bad\n  environment:\n    GARDEN_TABLE: garden-${self:service}-${opt:stage, self:provider.stage}\n    SENSOR_DATA_TABLE: sensordata-${self:service}-${opt:stage, self:provider.stage}\n  #Quick and dirty db permissions for our functions. This would be dangerous if dealing with important data.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GARDEN_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SENSOR_DATA_TABLE}\"\nfunctions:\n  #public functions\n  getGardenList:\n    handler: build/bundle.getGardenList\n    events:\n      - http:\n          path: garden\n          method: get\n          cors: true\n  getGarden:\n    handler: build/bundle.getGarden\n    events:\n      - http:\n          path: garden/{gardenId}\n          method: get\n          cors: true\n  getSensorData: \n      handler: build/bundle.getSensorData\n      events:\n        - http:\n            path: garden/{gardenId}/sensor/{sensorType}\n            method: get\n            cors: true\n  #private functions\n  createGarden:\n    handler: build/bundle.createGarden\n    events:\n      - http:\n          path: garden\n          method: post\n          cors: true\n          private: true\n  postSensorData: \n      handler: build/bundle.postSensorData\n      events:\n        - http:\n            path: garden/{gardenId}/sensor/{sensorType}\n            method: post\n            cors: true\n            private: true\nresources:\n  Resources:\n    GardenTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.GARDEN_TABLE}\n    SensorDataTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: garden\n            AttributeType: S\n          -\n            AttributeName: ts \n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: garden\n            KeyType: HASH\n          -\n            AttributeName: ts\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SENSOR_DATA_TABLE}\n"]},{"id":97769857,"files":["service: poc-email\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/email\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:email\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Email\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  email:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n","service: poc-event-router\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/content-router\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:content-router\n  # SNS you are subscribing to\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:ContentRouter\n  # SNS you want to publish to (Format: TOPIC_SNS_ARN)\n  EMAIL_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:Email # Should be lowercase and separated by -\n  PUSH_NOTIFICATION_SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PushNotification\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  # Subscribe to a SNS Topic\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n  # Publish to multiple SNS Topics\n  - Effect: Allow\n    Action:\n      - sns:Publish\n    Resource: \n      - ${self:custom.EMAIL_SNS_ARN}\n      - ${self:custom.PUSH_NOTIFICATION_SNS_ARN}\n\nfunctions:\n  eventRouter:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n      EMAIL_SNS_ARN: ${self:custom.EMAIL_SNS_ARN}\n      PUSH_NOTIFICATION_SNS_ARN: ${self:custom.PUSH_NOTIFICATION_SNS_ARN}","service: poc-initiator\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:ContentRouter\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  initiator:\n    handler: handler.index\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: poc-push-notification\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/push-notification\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:push-notification\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PushNotification\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  memorySize: 128\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  pushNotification:\n    handler: handler.index\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n","service: lambda-producer\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:poc-demo\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  producer:\n    handler: handler.producer\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: lambda-consumer\n\n\ncustom:\n  SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/778203360779/poc-delivery\n  SQS_ARN: arn:aws:sqs:ap-southeast-1:778203360779:poc-delivery\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:PocDelivery\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n      # Refine policy\n      # - sqs:DeleteMessage\n      # - sqs:ReceiveMessage\n    Resource: ${self:custom.SQS_ARN}\n    Condition:\n      ArnEquals:\n        aws:SourceArn: ${self:custom.SNS_ARN}\n\nfunctions:\n  hello:\n    handler: handler.consumer\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n    environment:\n      SQS_QUEUE_URL: ${self:custom.SQS_QUEUE_URL}\n\n# TODO: Move dead-letter queue creation to setup.js\n# resources:\n#   Resources:\n#     Messages:\n#       Type: AWS::SQS::Queue\n#       Properties:\n#         QueueName: ${self:service}\n#         MessageRetentionPeriod: 1209600\n#         VisibilityTimeout: 60\n#         RedrivePolicy:\n#           deadLetterTargetArn:\n#             Fn::GetAtt:\n#             - MessagesDeadLetterQueue\n#             - Arn\n#           maxReceiveCount: 10\n\n#     MessagesDeadLetterQueue:\n#       Type: AWS::SQS::Queue\n#       Properties:\n#         QueueName: ${self:service}-dead-letter-queue\n#         MessageRetentionPeriod: 1209500","service: sns-poc-publisher\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:sns-poc\n\nprovider:\n  name: aws\n  profile: poc-delivery\n  region: ap-southeast-1\n  runtime: nodejs6.10\n  deploymentBucket: salle-serverless-deployment\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: \n        - ${self:custom.SNS_ARN}\n\nfunctions:\n  producer:\n    handler: handler.producer\n    environment:\n      SNS_ARN: ${self:custom.SNS_ARN}\n","service: sns-poc-subscriber\n\n\ncustom:\n  SNS_ARN: arn:aws:sns:ap-southeast-1:778203360779:sns-poc\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: poc-delivery\n  region: ap-southeast-1\n  stage: dev\n  deploymentBucket: salle-serverless-deployment\n\nfunctions:\n  hello:\n    handler: handler.consumer\n    events:\n      # Subscribe to SNS topic. Will call the receive message on lambda whenever an event is published to the topic.\n      - sns:\n          arn: ${self:custom.SNS_ARN}\n\n# TODO: Move dead-letter queue creation to setup.js\nresources:\n  Resources:\n    MessagesDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-dead-letter-queue\n        MessageRetentionPeriod: 1209500"]},{"id":110699222,"files":["service: screenshottr-service\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\n  environment:\n    SS_STAGE: ${self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::screenshottr-service-images-unprocessed-dev*\"\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::screenshottr-service-images-saved-dev/*\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/screenshottr-service-uploads-dev\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/screenshottr-service-user-dev\"\n\nfunctions:\n  getSignedS3URL:\n    handler: src/getSignedS3URL.getSignedS3URL\n    events:\n      - http: GET api/getSignedS3URL\n    memorySize: 128\n  processUpload:\n    handler: src/processUpload.processUpload\n    events:\n      - s3: screenshottr-service-images-unprocessed-dev\n        memorySize: 256\n  getMetadata:\n    handler: src/getMetadata.getMetadata\n    events:\n      - http: GET api/getImageMetadata\n    memorySize: 128\n  createUser:\n    handler: src/createUser.createUser\n    events:\n      - http: GET api/user/createUser\n    memorySize: 128\n\nresources:\n Resources:\n    storageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: screenshottr-service-images-saved-dev\n    entriesDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: screenshottr-service-uploads-dev\n        AttributeDefinitions:\n          - AttributeName: image_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: image_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    usersDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: screenshottr-service-user-dev\n        AttributeDefinitions:\n          - AttributeName: user_name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: user_name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n"]},{"id":94027146,"files":["service: firm\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    VAR: \"test\"\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n\nfunctions:\n  firm:\n    handler: handler.run\n    memorySize: 128\n    timeout: 35\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":104560333,"files":["service: dota-qualifier-streams\n\npackage:\n  include:\n    - serverless.yml\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v1\n  region: eu-central-1\n  apiKeys:\n    - ${self:provider.stage}-dev-key\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource: \"arn:aws:s3:::dota-qualifier-streams/data.json\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource: \"arn:aws:iot:eu-central-1:130448155460:topic/dota-qualifier-streams/data.json\"\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  fullUpdate: #Dev function to make a full update, requires an api key\n    handler: handler.fullUpdate\n    events:\n      - http:\n          path: full-update\n          method: post\n          cors: true\n          private: true\n  authorizer:\n    handler: authorizer.authorize\n  login:\n    handler: authorizer.login\n    requireRole:\n      - admin\n      - moderator\n    events:\n      - http:\n          path: login\n          method: get\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  updateStreams:\n    handler: handler.updateStreams\n    requireRole:\n      - admin\n      - moderator\n    events:\n      - http:\n          path: update-streams\n          method: post\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  getUsers:\n    handler: handler.getUsers\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  updateUser:\n    handler: handler.updateUser\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  deleteUser:\n    handler: handler.deleteUser\n    requireRole: admin\n    events:\n      - http:\n          path: users\n          method: delete\n          cors: true\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Credentials: \"'false'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n          gatewayresponse.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: dota-qualifier-streams-users\n        AttributeDefinitions:\n          - AttributeName: twitchUserId\n            AttributeType: N\n        KeySchema:\n          - AttributeName: twitchUserId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:eu-central-1:130448155460:table/${self:resources.Resources.DynamoDbTable.Properties.TableName}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":89025754,"files":["---\nservice: the-real-donald-trump\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\npackage:\n  exclude:\n    - package.json\n\nfunctions:\n  alexa-skill:\n    handler: index.handler\n    events:\n      - alexaSkill\n"]},{"id":83945787,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: image-resizer\n\nprovider:\n  name: aws\n  profile: personal\n  region: us-west-2\n  environment: ${file(./env.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/photos/*\n  runtime: nodejs4.3\n\npackage:\n  exclude:\n    - .git/**\n\nfunctions:\n  resize:\n    handler: resizeHandler.resize\n    memorySize: 512\n    timeout: 90\n    events:\n      - sns: ${self:provider.environment.TOPIC_ARN}\n        #topicName: ${self:provider.environment.TOPIC_NAME}\n        #displayName: ${self:provider.environment.TOPIC_NAME}\n        #bucket: ${self:provider.environment.BUCKET_NAME}\n        #event: s3:ObjectCreated:*\n        #  rules:\n        #    #          - prefix: ${self:provider.environment.UPLOAD_PREFIX}\n        #    - suffix: .jpg\n    environment:\n      BUCKET_NAME: ${self:provider.environment.BUCKET_NAME}\n      UPLOAD_PREFIX: ${self:provider.environment.UPLOAD_PREFIX}\n      OUTPUT_PREFIX: ${self:provider.environment.OUTPUT_PREFIX}\n      MAX_X: ${self:provider.environment.MAX_X}\n      OUTPUT_SIZE: ${self:provider.environment.OUTPUT_SIZE}\n\n        #resources:\n        #  Resources:\n        #    SNSTopic:\n        #      Type: AWS::SNS::Topic\n        #      Properties:\n        #        DisplayName: ${self:provider.environment.TOPIC_NAME}\n        #        TopicName: ${self:provider.environment.TOPIC_NAME}\n"]},{"id":90793519,"files":["\nservice: layer-serverless-email-fallback\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:BatchWriteItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}\"\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n      Resource: ${self:custom.kinesisArn}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  scheduleRate: ${file(./src/config.js):scheduleRate}\n  kinesisArn: ${file(./src/config.js):kinesisArn}\n\nplugins:\n  - serverless-mocha-plugin\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    name: ${self:service}-webhook\n    description: 'Layer Email Fallback Webhook process endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  verify:\n    handler: src/handlers.verify\n    name: ${self:service}-verify\n    description: 'Layer Email Fallback Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  schedule:\n    handler: src/handlers.schedule\n    name: ${self:service}-schedule\n    description: 'Layer Email Fallback Schedule event that triggers email fallback'\n    events:\n      - schedule: ${self:custom.scheduleRate}\n  ingest:\n    handler: src/handlers.ingest\n    events:\n      - stream:\n          arn: ${self:custom.kinesisArn}\n          batchSize: 10\n          startingPosition: TRIM_HORIZON\n          enabled: true\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: user_id\n            AttributeType: S\n          - AttributeName: message_position\n            AttributeType: S\n        KeySchema:\n          - AttributeName: user_id\n            KeyType: HASH\n          - AttributeName: message_position\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 10\n","\nservice: layer-email-fallback-azure\n\nprovider:\n  name: azure\n  location: West US\n  stage: dev\n  timeout: 10s\n  environment:\n    QueueStorageConnection: ${self:custom.queueStorageConnection}\n\ncustom:\n  tableName: ${file(./src/config.js):tableName}\n  scheduleRate: ${file(./src/config.js):scheduleRate}\n  queueStorageName: ${file(./src/config.js):queueStorageName}\n  queueStorageConnection: ${file(./src/config.js):queueStorageConnection}\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    description: 'Layer Email Fallback Webhook process endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n      - queue: ${self:custom.queueStorageName}\n        x-azure-settings:\n          name: $return\n          connection: QueueStorageConnection\n          direction: out\n  ingest:\n    handler: dist/bundle.ingest\n    description: 'Ingest from ServiceBus'\n    events:\n      - queue: ${self:custom.queueStorageName}\n        x-azure-settings:\n          name: item\n          connection: QueueStorageConnection\n  verify:\n    handler: dist/bundle.verify\n    description: 'Layer Email Fallback Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n  schedule:\n    handler: dist/bundle.schedule\n    description: 'Layer Email Fallback Schedule event that triggers email fallback'\n    events:\n      - timer:\n        x-azure-settings:\n            name: item\n            schedule: ${self:custom.scheduleRate}\n"]},{"id":114592299,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: api-serverless-starter\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:custom.profiles.${self:provider.stage}}\n\ncustom:\n  defaultStage: dev\n  profiles:\n    dev: devProfile\n    prod: prodProfile\n  serverless-offline:\n    host: 0.0.0.0\n\nplugins:\n  # - serverless-plugin-include-dependencies\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n include:\n   - node_modules/**\n exclude:\n   - .git/**\n   - credentials\n   - docker-compose.yml\n   - src/**\n   - package.json\n\nfunctions:\n  app:\n    handler: dist/serverless.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":111672477,"files":["service: onyx-service\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\n  environment:\n    ONYX_STAGE: ${self:provider.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:eu-west-1:660773155982:table/onyx-service-urls\"\n\nfunctions:\n  createURL:\n    handler: src/handler.create\n    events:\n      - http: POST api/create\n    memorySize: 128\n  deleteURL:\n    handler: src/handler.delete\n    events:\n      - http: POST api/delete\n    memorySize: 128\n  getURLInfo:\n    handler: src/handler.getURLInfo\n    events:\n      - http: POST api/getURLInfo\n    memorySize: 128\n  visitURL:\n    handler: src/handler.visit\n    events:\n      - http: GET /visit/{short_url_id}\n    memorySize: 128\n\nresources:\n Resources:\n    usersDynamo:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: onyx-service-urls\n        AttributeDefinitions:\n          - AttributeName: short_url_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: short_url_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 1\n"]},{"id":113099730,"files":["service: bazos-watcher\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 256\n  timeout: 10\n  environment:\n    TABLE_BAZOS:\n      Ref: DynamoDBTable\n    SES_EMAIL: ${env:SES_EMAIL}\n    RECEIVER_EMAIL: ${env:RECEIVER_EMAIL}\n    QUERY: ${env:QUERY}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable]]\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Condition:\n        StringEquals:\n          ses:FromAddress: ${env:SES_EMAIL}\n      Resource:\n        '*'\n\nfunctions:\n  parser:\n    handler: functions/parser/index.handler\n    events:\n      - schedule:\n          rate: cron(0/30 8-23 * * ? *)\n          enabled: true\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-bazos\n        AttributeDefinitions:\n          - AttributeName: link\n            AttributeType: S\n        KeySchema:\n          - AttributeName: link\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":131467646,"files":["service: rs-input-fetcher\nprovider:\n  name: aws\n  runtime: go1.x\n  region: us-east-1\n  profile: na_staging\n  stage: global\n  memorySize: 128\n  vpc:\n    securityGroupIds:\n      - sg-c54d7c8c\n    subnetIds:\n      - subnet-e10b0db9\n      - subnet-17d4225e\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\nfunctions:\n  fetch_elsm_acct:\n    handler: bin/fetcher\n    events:\n      - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_ELSM_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_ELSM_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-3.rightscale.com\"\n    timeout: 300\n  fetch_gcc_acct:\n    handler: bin/fetcher\n    events:\n    - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_GCC_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_GCC_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-4.rightscale.com\"\n    timeout: 300\n  fetch_s1naprod_acct:\n    handler: bin/fetcher\n    events:\n    - schedule: rate(45 minutes)\n    environment:\n      MYSQL_CONNECTION_STRING: ${env:LIVE_MYSQL_CONNECTION_STRING}\n      RS_REFRESH_TOKEN: ${env:RS_S1NAPROD_REFRESH_TOKEN}\n      RS_ACCOUNT_ID: ${env:RS_S1NAPROD_ACCOUNT_ID}\n      RS_ACCOUNT_ENDPOINT: \"https://us-4.rightscale.com\"\n    timeout: 300"]},{"id":176387277,"files":["plugins:\n  - serverless-finch\n\nservice: EasyMetaFields\n\nprovider:\n  name: aws\n  runtime: go1.x\n  stage: prod\n  region: eu-west-1\n\n  environment:\n    SHOPIFY_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_KEY}\n    SHOPIFY_API_SECRET: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_SECRET}\n    SHOPIFY_SCOPE: \"read_script_tags,write_script_tags,read_orders,write_orders,read_products,write_products\"\n    DYNAMODB_TABLE: \"easymetafields\"\n\n\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - s3:Get*\n        - s3:List*\n      Resource:\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:s3:::${self:provider.environment.DYNAMODB_TABLE}-bucket\", \"/*\" ] ]\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\n\n\nfunctions:\n\n  index:\n    handler: index\n    name: ${self:provider.environment.DYNAMODB_TABLE}_index\n    description: First step of the OAuth Handshake\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n    package:\n      include:\n        - index\n  auth:\n    handler: auth\n    name: ${self:provider.environment.DYNAMODB_TABLE}_auth\n    description: First step of the OAuth Handshake\n    events:\n      - http:\n          path: /auth\n          method: get\n          cors: true\n    package:\n      include:\n        - auth\n\n  auth_callback:\n    handler: auth_callback\n    name: ${self:provider.environment.DYNAMODB_TABLE}_auth_callback\n    description: Callback function for the OAuth Handshake\n\n    events:\n      - http:\n          path: /auth/callback\n          method: get\n          cors: true\n    package:\n      include:\n        - auth_callback\n\n  uninstall:\n    handler: webhooks/uninstall\n    name: ${self:provider.environment.DYNAMODB_TABLE}_webhooks_uninstall\n    description: Callback function for the OAuth Handshake\n\n    events:\n      - http:\n          path: /webhooks/uninstall\n          method: post\n          cors: true\n    package:\n      include:\n        - webhooks/uninstall\n\n\nresources:\n  Resources:\n\n    ShopsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n        AttributeDefinitions:\n          -\n            AttributeName: shopid\n            AttributeType: S\n\n        KeySchema:\n          -\n            AttributeName: shopid\n            KeyType: HASH\n\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    S3Bucket:\n      Type: AWS::S3::Bucket\n\n      Properties:\n        BucketName: ${self:provider.environment.DYNAMODB_TABLE}-bucket\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n\n    S3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: S3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n                - s3:GetObject\n              Resource: arn:aws:s3:::${self:provider.environment.DYNAMODB_TABLE}-bucket/*\n\n  Outputs:\n\n    ShopsTable:\n      Description: \"The name of the Shops Table\"\n      Value:\n        Ref: ShopsTable\n\n    ShopsTableArn:\n      Description: \"The ARN for the Shops Table\"\n      Value:\n        Fn::GetAtt:\n          - ShopsTable\n          - Arn\n      Export:\n        Name: ShopsTableArn\n\ncustom:\n  client:\n    bucketName: ${self:provider.environment.DYNAMODB_TABLE}-bucket\n    manageResources: false"]},{"id":203703416,"files":["service: bouman\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: sa-east-1\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::*\"\n\nfunctions:\n  optimize:\n    handler: optimize.handle\n    environment:\n      bucket: bouman\n    events:\n      - s3:\n          bucket: bouman\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n      - s3:\n          bucket: bouman\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .png"]},{"id":93916031,"files":["service: shortenUrl\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  devDynamoCapacity:\n    ReadCapacityUnits: 1\n    WriteCapacityUnits: 1\n  prodDynamoCapacity:\n    ReadCapacityUnits: 5\n    WriteCapacityUnits: 5\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    SLS_STAGE: ${self:custom.stage}\n    DDB_TABLE: {Ref: LinkDB}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - Ref: LinkDB\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput: ${self:custom.${self:custom.stage}DynamoCapacity}\n"]},{"id":141559461,"files":["service: example-helper-module\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  index:\n    handler: index.handler\n","service: sls-plugin-with-iopipe-package-json\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 30\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  index:\n    handler: index.handler\nplugins:\n  - serverless-plugin-iopipe\ncustom:\n  iopipeNoVerify: true\n","service: examples\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 30\n  environment:\n    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  express:\n    handler: express.handler\n"]},{"id":85613026,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":97336011,"files":["service:\n  name: signalFailure\n\ncustom:\n  default_stage: development\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.default_stage}\n  region: eu-west-1\n  memorySize: 128\n  environment:\n    SKILL_ID: ${ssm:/signalFailure/SKILL_ID~true}\n    TFL_APP_KEY: ${ssm:/signalFailure/TFL_APP_KEY~true}\n    TFL_APP_ID: ${ssm:/signalFailure/TFL_APP_ID~true}\n\nfunctions:\n  handler:\n    handler: lambda/custom/index.handler\n    name: signalFailure-${self:provider.stage}\n    timeout: 6\n    events:\n      - alexaSkill: ${ssm:/signalFailure/SKILL_ID~true}\n\nplugins:\n  - serverless-webpack\n"]},{"id":82019943,"files":["service: bluesky-api # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  apiKeys:\n    - bluesky_api_key\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:*:*:table/bluesky_pmdata\nfunctions:\n  ping:\n    handler: index.ping\n    events:\n      - http:\n          path: ping\n          method: get\n  get:\n    handler: index.get\n    events:\n      - http:\n          path: get/{device_id}/interval/{from}/{to}\n          method: get\n          request:\n            parameters:\n              paths:\n                device_id: true\n                from: true\n                to: true\n    memorySize: 128\n  put:\n    handler: index.put\n    events:\n      - http:\n          path: put\n          method: put\n          private: true\n    memorySize: 128\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: bluesky_pmdata\n        AttributeDefinitions:\n          - AttributeName: device_id\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        KeySchema:\n          - AttributeName: device_id\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":80999031,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n\n\nservice: sl-departures\n\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  stage: dev\n  region: eu-west-1\n\n\nfunctions:\n  stop:\n    handler: handler.stop\n    environment: \n      SL_REAL: ${env:SL_REAL}\n    events:\n      - http:\n          path: stop/{id}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                id: true\n          cors:\n            origins:\n              - ${env:SL_ORIGINS}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false  \n  \n  search:\n    handler: handler.search\n    environment: \n      SL_REAL: ${env:SL_PLATS}\n    events:\n      - http:\n          path: search/{q}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                q: true\n          cors:\n            origins:\n              - ${env:SL_ORIGINS}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false    \n"]},{"id":84799180,"files":["service: event-guru-backend\n\napp: ${env:SLS_APP, self:custom.stageVars.SLS_APP}\ntenant: ${env:SLS_TENANT, self:custom.stageVars.SLS_TENANT}\n\npackage:\n  individually: true\n  exclude:\n    - test\n    - docs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 512\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.basicVars.EVENT_GURU_EVENTS_CACHE_TABLE}'\n\ncustom:\n  basicVars: ${file(./src/config/config.json)}\n  stageVars: ${file(./src/config/config-${self:provider.stage}.json)}\n\nplugins:\n  - serverless-webpack\n\nresources:\n  Resources:\n    EventGuruEventsCacheTable:\n          Type: 'AWS::DynamoDB::Table'\n          DeletionPolicy: Retain\n          Properties:\n            AttributeDefinitions:\n              -\n                AttributeName: location\n                AttributeType: S\n            KeySchema:\n              -\n                AttributeName: location\n                KeyType: HASH\n            ProvisionedThroughput:\n              ReadCapacityUnits: 5\n              WriteCapacityUnits: 5\n            TableName: ${self:custom.basicVars.EVENT_GURU_EVENTS_CACHE_TABLE}\n\n    EventGuruBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.basicVars.EVENT_GURU_BUCKET}\n        AccessControl: PublicReadWrite\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n              - GET\n            AllowedOrigins:\n              - http://ask-ifr-download.s3.amazonaws.com\n              - https://eventguru.io\n\n    EventGuruBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: EventGuruBucket\n        PolicyDocument:\n          Statement:\n            - Action:\n                - 's3:GetObject'\n              Effect: Allow\n              Principal: '*'\n              Resource:\n                Fn::Join:\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: EventGuruBucket\n                    - '/*'\n\nfunctions:\n  # http rest interfaces\n  events-rest-api:\n    handler: src/lambda/events-rest-handler.getEvents\n    description: Event Guru - Get events REST API\n    environment:\n      SONGKICK_API_KEY: ${env:SONGKICK_API_KEY, self:custom.stageVars.SONGKICK_API_KEY}\n    events:\n      - http:\n          path: events\n          method: get\n          request:\n            parameters:\n              querystrings:\n                location: true\n                from: true\n                to: false\n\n  urls-rest-api:\n    handler: src/lambda/url-shorter-rest-handler.getUrl\n    description: Event Guru - Shorten URL REST API\n    environment:\n      BITLY_ACCESS_TOKEN: ${env:BITLY_ACCESS_TOKEN, self:custom.stageVars.BITLY_ACCESS_TOKEN}\n    events:\n      - http:\n          path: urls\n          method: get\n          request:\n            parameters:\n              querystrings:\n                url: true\n\n  artists-rest-api:\n      handler: src/lambda/artist-rest-handler.getArtist\n      description: Event Guru - Artist REST API\n      events:\n        - http:\n            path: artists\n            method: get\n            request:\n              parameters:\n                querystrings:\n                  name: true\n\n  # cron jobs\n  events-preload:\n    handler: src/lambda/events-preload-handler.run\n    description: Event Guru - CronJob Event Preloader\n    environment:\n      SONGKICK_API_KEY: ${env:SONGKICK_API_KEY, self:custom.stageVars.SONGKICK_API_KEY}\n    timeout: 600s\n    events:\n      - schedule: cron(1 0 * * ? *) # 00:01 every midnight\n"]},{"id":105432846,"files":["\nservice: auto-blog\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  uploadBucket: tjr.${self:service}.${self:custom.stage}.upload\n  webBucket: www.trodger.com\n\n  imageFilterTopic: ${self:service}-${self:custom.stage}-image-filter\n  mdFilterTopic: ${self:service}-${self:custom.stage}-md-filter\n  textFilterTopic: ${self:service}-${self:custom.stage}-text-filter\n\n  imagePageTopic: ${self:service}-${self:custom.stage}-image-page\n  indexPageTopic: ${self:service}-${self:custom.stage}-index-page\n  directoryPageTopic: ${self:service}-${self:custom.stage}-directory-page\n\n  renderTopic: ${self:service}-${self:custom.stage}-render\n\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.textFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imageFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.mdFilterTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imagePageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.indexPageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.directoryPageTopic}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  environment:\n    UPLOAD_BUCKET: ${self:custom.uploadBucket}\n    WEB_BUCKET: ${self:custom.webBucket}\n\n  stage: dev\n  region: eu-west-2\n\npackage:\n  exclude:\n    - .idea/**\n    - .npmignore\n    - package.json\n    - tests/**\n    - README.md\n\n#plugins:\n#  - serverless-plugin-webpack\n\nfunctions:\n  upload:\n    handler: functions/upload.handler\n    events:\n      - s3:\n        bucket: ${self:custom.uploadBucket}\n        event: s3:ObjectCreated:*\n    environment:\n      # arn:aws:sns:eu-west-2:752934489335:auto-blog-dev-html-page\n      IMAGE_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imageFilterTopic}\" ] ]  }\n      MD_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.mdFilterTopic}\" ] ]  }\n      TEXT_FILTER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.textFilterTopic}\" ] ]  }\n\n  imageFilter:\n    handler: functions/imageFilter.handler\n    events:\n      - sns: ${self:custom.imageFilterTopic}\n    environment:\n      IMAGE_PAGE_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.imagePageTopic}\" ] ]  }\n\n  imagePage:\n    handler: functions/imagePage.handler\n    events:\n      - sns: ${self:custom.imagePageTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  mdFilter:\n    handler: functions/mdFilter.handler\n    events:\n      - sns: ${self:custom.mdFilterTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  textFilter:\n    handler: functions/textFilter.handler\n    events:\n      - sns: ${self:custom.textFilterTopic}\n    environment:\n      RENDER_TOPIC: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:custom.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.renderTopic}\" ] ]  }\n\n  render:\n    handler: functions/render.handler\n    events:\n      - sns: ${self:custom.renderTopic}"]},{"id":107531749,"files":["provider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: \"*\"\n\nservice: s3-signature\nfunctions:\n  sign:\n    handler: handler.sign\n    warmup: true\n    events:\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: ${file(./config.yml):AccessControlAllowOrigin}\n            headers:\n              - Content-Type\n              - Origin\n              - X-Amz-ACL\n              - X-Amz-Date\n              - Authorization\n              - X-Requested-With\n              - Cache-Control\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n    environment:\n      AccessControlAllowOrigin: ${file(./config.yml):AccessControlAllowOrigin}\n\nplugins:\n  - serverless-plugin-warmup"]},{"id":100175825,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-south-1\n  profile: shubham-demo\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: first-endpoint\n          method: GET\n      - http:\n          path: first-endpoint\n          method: POST\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    uploadbucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-uploads\n    userTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-users\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":149055136,"files":["service: sanamdeep-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  deploymentBucket: ${self:custom.stageVars.serverlessDeploymentBucket}\n  profile: default\n  stage: ${opt:stage}\n  stackName: ${self:service}-stack-${self:custom.stageVars.envName}\n  stackTags: ${self:custom.stageVars.tags}\n  \ncustom: \n  stageVars: ${file(serverless/stageVars/${self:provider.stage}.yml)}\nfunctions: ${file(serverless/functions.yml)}\nresources: ${file(serverless/cft.yml)}"]},{"id":130776113,"files":["service: serverless-cars-api\n\nprovider:\n  name: aws\n  stage: beta\n  region: us-west-2\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\npackage:\n  individually: true\n  exclude:\n    - ./**\nfunctions:\n  create:\n    handler: src/cars/create.handler\n    package:\n      include:\n        - src/cars/create.js\n    events:\n      - http:\n          path: car\n          method: post\n          cors: true\n  list:\n    handler: src/cars/list.handler\n    package:\n      include:\n        - src/cars/list.js\n    events:\n      - http:\n          path: cars\n          method: get\n          cors: true\n  get:\n    handler: src/cars/get.handler\n    package:\n      include:\n        - src/cars/get.js\n    events:\n      - http:\n          path: car/{id}\n          method: get\n          cors: true\n  update:\n    handler: src/cars/update.handler\n    package:\n      include:\n        - src/cars/update.js\n    events:\n      - http:\n          path: car/{id}\n          method: put\n          cors: true\n  delete:\n    handler: src/cars/delete.handler\n    package:\n      include:\n        - src/cars/delete.js\n    events:\n      - http:\n          path: car/{id}\n          method: delete\n          cors: true\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":132445487,"files":["service: personal-presence\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  bucket: 'where-is-alex-today'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    MOVES_AUTHORIZATION_TOKEN: ${env:MOVES_AUTHORIZATION_TOKEN}\n    MOVES_CLIENT_ID: ${env:MOVES_CLIENT_ID}\n    BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  refreshState:\n    handler: index.refreshState\n    events:\n      - schedule: rate(15 minutes)\n\nresources:\n  Resources:\n    PersonalPresenceBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: \"${self:custom.bucket}\"\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n\n    PersonalPresenceBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: PersonalPresenceBucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\n    PersonalPresenceCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.bucket}.s3.amazonaws.com\n              Id: PersonalPresence\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n          Enabled: 'true'\n          Aliases:\n            - whereisalex.today\n          DefaultRootObject: index.html\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            TargetOriginId: PersonalPresence\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ViewerProtocolPolicy: redirect-to-https\n          ViewerCertificate:\n            AcmCertificateArn: 'arn:aws:acm:us-east-1:240273936960:certificate/aa3f6c60-0966-40f1-93d3-03bc1308aa4f'\n            SslSupportMethod: 'sni-only'"]},{"id":122974191,"files":["service: qrcode\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  # change this, so it's unique for your setup\n  qrcodeBucket: ${self:service}.${self:provider.stage,opt:stage}\n  stageVariables:\n    bucketName: ${self:custom.qrcodeBucket}\n  customDomain:\n    domainName: qrcode.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource:\n        - \"arn:aws:s3:::${self:custom.qrcodeBucket}\"\n        - \"arn:aws:s3:::${self:custom.qrcodeBucket}/*\"\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /\n          method: get\n          timeout: 15\n    environment:\n      bucketName: ${self:custom.qrcodeBucket}\n\nresources:\n  Resources:\n    PackageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.qrcodeBucket}\n        LifecycleConfiguration:\n          Rules:\n            - ExpirationInDays: 1\n              Status: Enabled\n"]},{"id":157647455,"files":["service: geonet-alexa\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  geonet:\n    handler: index.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":145923406,"files":["service: my-app\n\n\nprovider: \n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements: \n    - Effect: Allow\n      Action: \n        - dynamodb:PutItem\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:us-east-1:<series-of-numbers>:table/todos\"\n  \nfunctions:\n  kenVilarFunction:\n    handler: handler.run\n    events:\n      - http:\n          path: /\n          method: get\n  getTodo: \n    handler: get.run\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n  createTodo:\n    handler: create.run\n    events:\n      - http:\n          path: todos\n          method: post\n\nresources:\n  Resources:\n    TodosTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: todos\n        AttributeDefinitions:\n          - \n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - \n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":180548291,"files":["# serverless.yml\n\nservice: hello-world-express-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:*:*:table/${self:custom.tableName}\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n  dynamodb:\n    start:\n      migrate: true\n"]},{"id":161861382,"files":["service: pinpoint-autoevent\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\n# plugins:\n#   - serverless-dynamodb-local\n#   - serverless-offline\n#   - serverless-plugin-multiple-responses\n\nplugins:\n  - serverless-sam\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\npackage:\n  exclude:\n    - CognitoUserPool\n\nprovider:\n  name: aws\n  timeout: 300\n  profile: ${file(./config/aws_params.yml):profile}\n  region: ${file(./config/aws_params.yml):region}\n  stage: ${file(./config/aws_params.yml):stage}\n  tags: \n    env: ${file(./config/aws_params.yml):stage}\n  memorySize: 1536\n  stackTags: \n    projectname: pinpoint-autoevent\n  deploymentBucket: ${file(./config/aws_params.yml):DEPLOYMENT_S3_BUCKET}\n  versionFunctions: false\n  runtime: nodejs6.10\n  # apiKeys: false\n # role: arn:aws:iam::765167583057:role/bing-scraper-pr-us-east-2-lambdaRole\n # cfnRole: arn:aws:iam::765167583057:role/bing-scraper-pr-us-east-2-lambdaRole\n  # apiKeys:\n  #   - googlesearchkey1\n  #   - googlesearchkey2\n  #   - googlesearchkey3\n  # usagePlan:\n  #   quota:\n  #     limit: 1000\n  #     offset: 2\n  #     period: DAY\n  #   throttle:\n  #     burstLimit: 200\n  #     rateLimit: 100\n  #arn:aws:mobiletargeting:us-east-1:${file(./config/aws_params.yml):AWS_ACCOUNT_ID}:apps/${file(./config/aws_params.yml):PINPOINT_APP_ID}/events\n  environment:\n    PINPOINT_APP_ID: ${file(./config/aws_params.yml):PINPOINT_APP_ID}\n    AWS_REGION_NAME: ${file(./config/aws_params.yml):region}\n    PINPOINT_API_ENDPOINT: ${file(./config/aws_params.yml):PINPOINT_ENDPOINT}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - mobiletargeting:PutEvents\n      Resource: \"arn:aws:mobiletargeting:us-east-1:${file(./config/aws_params.yml):AWS_ACCOUNT_ID}:*\"\n  stackPolicy: \n    - Effect: Allow\n      Principal: \"*\"\n      Action: \"Update:*\"\n      Resource: \"*\"\n    - Effect: Deny\n      Principal: \"*\"\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n\nfunctions:\n  pinpointAddevent:\n    handler: src/pinpoint/addEvent.addEvent\n    events:\n      - http:\n          path: pinpoint/addEvent\n          method: get\n          cors: true\n          integration: lambda\n"]},{"id":175600980,"files":["service: developer-jobs-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\ncustom:\n  environment: ${file(env.yml):default}\n\nfunctions:\n  search:\n    handler: handler.search\n    environment:\n      reedAPIKey: ${self:custom.environment.REED_API_KEY}\n    events:\n      - http:\n          path: search\n          method: get\n          cors: true"]},{"id":168984973,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: bad-curl # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  badCurl:\n    handler: handler.badCurl\n    events:\n      - http:\n          path: howdy.sh\n          method: get"]},{"id":175683144,"files":["service:\n    name: tome-of-many-spells\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: 680c61cf5c9f4de307018e1db8225ceb\n    zoneId: a65c9c8e3ad0ae9f6416bcf2828e2641\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  main:\n    name: worker\n    script: dist/worker  # maps to main.js\n    events:\n      - http:\n          url: tome-of-many-spells.vaultofheroes.com/*\n          method: GET\n"]},{"id":214680398,"files":["service: alexa-nodejs-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs10.x,\n  stage: dev\n  region: ${file(./environment.json):AWS_REGION}\n\n#Configuration\ncustom:\n  alexa:\n    vendorId: ${file(./environment.json):AMAZON_VENDOR_ID}\n    clientId: ${file(./environment.json):AMAZON_DEVELOPER_CLIENT_ID}\n    clientSecret: ${file(./environment.json):AMAZON_DEVELOPER_SECRET}\n    localServerPort: 9000\n    skills:\n      - id: ${file(./environment.json):ALEXA_SKILL_ID}\n        manifest:\n          manifestVersion: '1.0'\n          publishingInformation:\n            locales:\n              es-MX:\n                name: ${file(./environment.json):ALEXA_SKILL_NAME}\n          apis:\n            custom:\n              endpoint:\n                uri: ${file(./environment.json):AWS_LAMDA_FUNCTION_ARN}   \n        models:\n          es-MX: \n            ${file(./alexa-model.yml)}\n\nfunctions:\n  handler:\n    handler: src/handler.handler\n\nplugins:\n  - serverless-alexa-skills\n"]},{"id":223435977,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: ${file(config.json):service}\n\npackage:\n  exclude:\n    - src/*.test.js\n    - \"*.test.js\"\n    - config.sample.json\n    - fixtures/**\n    - coverage/**\n    - jest.config.js\n    - LICENSE\n    - README.md\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${file(config.json):profile}\n  stage: production\n  region: ${file(config.json):region}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n         - \"s3:GetObject\"\n       Resource: \"arn:aws:s3:::${file(config.json):originals}\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:CreateBucket\"\n         - \"s3:PutObject\"\n       Resource: \"arn:aws:s3:::${file(config.json):destination}\"\n\nfunctions:\n  resizeto404:\n    handler: handler.resizeto\n    events:\n      - http:\n          path: resizeto404\n          method: get\n\n# resources:\n#   Resources:\n#     OriginalsS3Bucket:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${file(config.json):originals}\n#     DestinationS3Bucket:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${file(config.json):destination}\n#         AccessControl: PublicRead\n#         WebsiteConfiguration:\n#           IndexDocument: index.html\n#           ErrorDocument: error.html\n#           RoutingRules:\n#             - RedirectRule:\n#                 HostName:\n#                   Fn::Join:\n#                     - ''\n#                     - - Ref: ApiGatewayRestApi\n#                       - \".execute-api.${self:provider.region}.amazonaws.com/\"\n#                 HttpRedirectCode: 307\n#                 Protocol: https\n#                 ReplaceKeyPrefixWith: \"${self:provider.stage}/resizeto404?key=\"\n#               RoutingRuleCondition:\n#                 HttpErrorCodeReturnedEquals: 404\n"]},{"id":148513664,"files":["service:\n  name: order-apis\n\ncustom:\n  region: ${opt:region, self:provider.region}\n  stage: ${opt:stage}\n  prefix: ${self:service}\n  dynamodb_table: ${self:custom.prefix}-order\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region}\n  timeout: 30\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - dynamodb:Query\n    - dynamodb:Scan\n    - dynamodb:GetItem\n    - dynamodb:PutItem\n    - dynamodb:UpdateItem\n    - dynamodb:DeleteItem\n    - dynamodb:DescribeTable\n    Resource: ${self:custom.dynamodb_arn}\n  environment:\n    DYNAMO_TABLE: ${self:custom.dynamodb_table}\n\npackage:\n  exclude:\n  - load-testing/**\n  - .idea/**\n  - .git/**\n  - tmp/**\n\nfunctions:\n  create-order:\n    handler: src/createOrder.handle\n    name: ${self:custom.prefix}-create-order\n    events:\n    - http:\n        path: orders\n        method: post\n\nresources:\n  Resources:\n    Order:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamodb_table}\n        AttributeDefinitions:\n        - AttributeName: orderId\n          AttributeType: S\n        KeySchema:\n        - AttributeName: orderId\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":152340987,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bounty-service # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - logs:*\n        - events:*\n        - kms:*\n        - ses:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n\n  auth:\n    handler: src/auth/auth.handler\n  \n  bountyState:\n    handler: src/api/bountyState.handler\n    events:\n      - http: \n          method: get\n          path: /api/bounty/state\n          authorizer: auth\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/bounty/request\"\n            description: \"/api/bounty/request\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n  bountyRequest:\n    handler: src/api/bountyRequest.handler\n    events:\n      - http:  \n          path: /api/bounty/request\n          method: get\n          authorizer: auth\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/bounty/request\"\n            description: \"/api/bounty/request\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Bounty Service\n        termsOfService: https://www.decompany.io\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\nplugins:\n  - serverless-mocha-plugin\n  - serverless-aws-documentation","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: generate-sitemap # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: us-west-1\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - cloudfront:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n\npackage:\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    \nfunctions:\n  generateSitemap:\n    handler: src/generateSitemap.handler\n    timeout: 300\n    events:\n      - schedule: cron(10 0 * * ? *) # daily 00:10:00\n  \n\n\n\nplugins:\n  - serverless-mocha-plugin\n\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: verify-email # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds:\n      - sg-05a13849fc117801b\n    subnetIds:\n      - subnet-37594850\n      - subnet-38bb9963\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - logs:*\n        - events:*\n        - kms:*\n        - ses:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n  sendBatchEmail:\n    handler: src/batch/sendBatchEmail.handler\n    timeout: 30\n    events:\n      - schedule: rate(2 minutes)\n\n  adminEmailBatchSender:\n    handler: src/email/adminEmailBatchSender.handler\n    timeout: 60\n    events:\n      - schedule: cron(15 0 * * ? *)\n\n  verifyEmailSender:\n    handler: src/email/verifyEmailSender.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n\n  trackingConfirmSender:\n    handler: src/tracking/trackingConfirmSender.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n\n  verifyEmailRequest:\n    handler: src/email/verifyEmailRequest.handler\n    events:\n      - http: \n          method: post\n          path: /api/email/verifyemailrequest\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: /api/email/verifyemailrequest\n            description: /api/email/verifyemailrequest\n            requestBody:\n              description: \"email\"\n  \n  verifyEmail:\n    handler: src/email/verifyEmail.handler\n    events:\n      - http: \n          method: get\n          path: /api/email/verifyemail/{code}\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: /api/email/verifyemail/{code}\n            description: /api/email/verifyemail/{code}\n            pathParams:\n              - name: code\n                description: code\n                type: string\n\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Verify Email API\n        termsOfService: https://www.decompany.io\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-aws-documentation","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: frontend-lambdaedge # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  tags:\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  role: RoleLambdaEdge\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - kms:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    - node_modules/*\n    \nfunctions:\n  IndexLambda:\n    handler: src/indexLambda.handler\n    timeout: 3\n    memorySize: 128\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n\nresources:\n  Resources:\n    RoleLambdaEdge:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /service-role/\n        RoleName: ${self:service.name}-${self:provider.stage}-RoleLambdaEdge # required if you want to use 'serverless deploy --function' later on\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n                  - edgelambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n        - PolicyName: ${self:service.name}-${self:provider.stage}-FrontEndLambdaEdgeExecutionRole\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: \"Allow\"\n                Action:\n                  - s3:*\n                  - logs:*\n                  - kms:*\n                Resource: \"*\"\n\nplugins:\n  - serverless-mocha-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: converter-wrapper-master # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: asem\n  region: \"us-west-1\"\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  completeConvert:\n    handler: src/completeConvert.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    timeout: 60\n    events:\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: PDF/\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: THUMBNAIL/\n\n  requestConvert:\n    handler: src/requestConvert.handler\n    events:\n      - existingS3: \n          bucket: asem-ca-upload-document\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: FILE/\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-existing-s3\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: converter-wrapper # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n\n  autoCheckConvertFailDocument:\n    handler: src/document/autoCheckConvertFailDocument.handler\n    timeout: 30\n    events:\n      - schedule: rate(1 minute)\n  \n  pdfConvertComplete:\n    handler: src/document/pdfConvertComplete.handler\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: PDF/\n\n  accountPictureConverter:\n    handler: src/account/accountPictureConverter.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.upload_profile}\n          events: \n            - s3:ObjectCreated:Put\n\n  s3DocumentUploadComplete:\n    handler: src/document/uploadComplete.handler\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events:\n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: FILE/\n\n  s3DocumentConvertComplete:\n    handler: src/document/convertComplete.handler\n    layers:   \n      - ${file(./serverlessConfig.js):getSharpLayer}\n    events:\n      - existingS3: \n          bucket: ${file(./serverlessConfig.js):s3Config.document}\n          events: \n            - s3:ObjectCreated:Put\n          rules:\n            - prefix: THUMBNAIL/\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-existing-s3\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-layer # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-west-1'}\n  environment:\n    NODE_PATH: \"./:/sharp/node_modules:/geoip/node_modules\"\n  logRetentionInDays: 3\n\nlayers:\n  libSharp:\n    path: sharp\n    description: \"sharp image processing\"\n  libGeoip:\n    path: geoip\n    description: \"geoip lite\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\ncustom:\n  prune:\n    automatic: true\n    number: 5","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: zapier # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\n# you can define service wide environment variables here\n  #environment:\n  #  CROS: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n\n  zapierAuth:\n    handler: src/auth.handler\n\n  zapierEmail:\n    handler: src/email.handler\n    events:\n      - http:  \n          path: /api/zapier/email\n          method: get\n          authorizer: zapierAuth\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n\n  zapierDocument:\n    handler: src/document.handler\n    events:\n      - http:\n          path: /api/zapier/document\n          method: get\n          authorizer: zapierAuth\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-warmup # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - logs:*\n       - kms:*\n       - lambda:*\n      Resource: \"*\"\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: true\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n\n\n\nfunctions:\n  warmup:\n    handler: src/warmup.handler\n    timeout: 30\n    events:\n      - schedule: rate(10 minutes)\n  \nplugins:\n  - serverless-mocha-plugin\n\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: backend-restapis # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n    NODE_PATH: \"./:/opt/node_modules\"\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  preHook:\n    handler: deploy/handler.pre\n  postHook:\n    handler: deploy/handler.post\n    \n  curatorDocumentList:\n    handler: controllers/curator/curatorDocumentList.handler\n    events:\n      - http:\n          path: /api/curator/document/list\n          method: get\n          cors: true      \n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/curator/document/list\"\n            description: \"/api/curator/document/list\"\n            queryParams:\n              - name: ethAccount\n                description: ethAccount\n                type: string\n                required: true\n              - name: pageNo\n                description: pageNo (default 1)\n                type: integer\n              - name: pageSize\n                description: pageSize (default 20)\n                type: integer\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  analyticsList:\n    handler: controllers/analytics/list.handler\n    events:\n      - http:\n          path: /api/analytics/list\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/analytics/list\"\n            description: \"/api/analytics/list\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true\n              - name: week\n                description: 4 week(1 month), 8 week (2month)\n                type: integer\n              - name: month\n                description: 12 (1 year)\n                type: integer\n              - name: csv\n                description: csv(true or false ) default false\n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  analyticsExport:\n    handler: controllers/analytics/export.handler\n    events:\n      - http:\n          method: get\n          path: /api/analytics/export\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/analytics/export\"\n            description: \"/api/analytics/export\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true\n              - name: week\n                description: 4 week(1 month), 8 week (2month)\n                type: integer\n              - name: year\n                description: 12 month\n                type: integer\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  tagList:\n    handler: controllers/tag/list.handler\n    events:\n      - http:\n          path: /api/tags\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tags\"\n            description: \"/api/tags\"\n            queryParams:\n              - name: t\n                description: type 'featured' or 'popular' default null(latest)\n                type: string\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountDocuments:\n    handler: controllers/account/documents.handler\n    events:\n      - http:\n          method: get\n          path: /api/account/documents\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountPicture:\n    handler: controllers/account/picture.handler\n    events:\n      - http: \n          path: /api/account/picture\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n          documentation:\n            summary: \"/api/account/picture\"\n            description: \"/api/account/picture\"\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountEthereumSync:\n    handler: controllers/account/accountEthereumSync.handler\n    events:\n      - http: \n          method: post\n          path: /api/account/ethereumSync\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$.errorMessage')\n          documentation:\n            summary: \"/api/account/ethereumSync\"\n            description: \"/api/account/ethereumSync\"\n            queryParams:\n              - name: ethAccount\n                description: ethereum account\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  profileGet:\n    handler: controllers/profile/getProfile.handler\n    events:\n      - http:\n          path: /api/profile/get\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/profile/get by no auth\"\n            description: \"/api/profile/get by no auth\"\n            queryParams:\n              - name: email\n                description: email\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountAuth:\n    handler: controllers/account/auth.handler\n\n  accountGet:\n    handler: controllers/account/get.handler\n    events:\n      - http:\n          path: /api/account/get\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountUpdate:\n    handler: controllers/account/update.handler\n    events:\n      - http: \n          path: /api/account/update\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/profile/get by no auth\"\n            description: \"/api/profile/get by no auth\"\n            queryParams:\n              - name: nickname\n                description: nickname\n                type: string\n              - name: username\n                description: username\n                type: string\n              - name: picture\n                description: picture path\n                type: string\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  accountSync:\n    handler: controllers/account/sync.handler\n    events:\n      - http: \n          path: /api/account/sync\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentRegist:\n    handler: controllers/document/documentRegist.handler\n    events:\n      - http:\n          path: api/document/regist\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  documentList:\n    handler: controllers/document/documentController.list\n    events:\n      - http:\n          path: api/document/list\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentMeta:\n    handler: controllers/document/documentMeta.handler\n    events:\n      - http: \n          path: /api/document/meta\n          method: get\n          cors: true\n          integration: lambda\n          documentation:\n            summary: \"/api/document/download\"\n            description: \"/api/document/download\"\n            queryParams:\n              - name: seoTitle\n                description: seoTitle\n                type: string\n                required: true\n          response: \n              headers:\n                Content-Type: integration.response.header.Content-Type\n              template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentInfo:\n    handler: controllers/document/documentInfo.handler\n    events:\n      - http:\n          path: api/document/info/{documentId}\n          method: get\n          cors: true\n          integration: lambda          \n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentUpdate:\n    handler: controllers/document/documentUpdate.handler\n    events:\n      - http:\n          path: /api/document/update\n          method: post\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/document/update\"\n            description: \"/api/document/update\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"JWT Token\"\n                required: true\n            queryParams:\n              - name: documentId\n                description: documentId\n                type: string\n                required: true\n              - name: desc\n                description: desc\n                type: string\n              - name: title\n                description: title\n                type: string\n              - name: tags\n                description: tags\n                type: array\n              - name: useTracking\n                type: boolean\n                description: useTracking\n              - name: forceTracking\n                type: boolean\n                description: forceTracking\n              - name: isDownload\n                type: boolean\n                description: isDownload\n              - name: shortUrl\n                type: string\n                description: shortUrl                \n              - name: cc\n                type: string\n                description: \"cc\"\n              - name: isPublic\n                type: boolean\n                description: isPublic\n              - name: isDeleted\n                type: boolean\n                description: isDeleted                \n            requestBody:\n              application/json: \"documentId, desc, title, tags, useTracking, forceTracking, isDownload, cc, shortUrl, isPublic, isDeleted\"            \n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  documentPDF:\n    handler: controllers/document/documentPDF.handler\n    events:\n      - http: \n          path: /api/document/pdf\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  documentDownload:\n    handler: controllers/document/documentDownload.handler\n    events:\n      - http:\n          path: /api/document/download\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/document/download\"\n            description: \"/api/document/download\"\n            queryParams:\n              - name: documentid\n                description: document id\n                type: string\n                required: true\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  trackingList:\n    handler: controllers/tracking/list.handler\n    events:\n      - http: \n          path: /api/tracking/list\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/list\"\n            description: \"/api/tracking/list\"\n            queryParams:\n              - name: documentid\n                description: document id\n                type: string\n                required: true\n              - name: anonymous\n                description: include anonymous \n                type: boolean\n              - name: include\n                description: include 1 page view \n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      \n  trackingInfo:\n    handler: controllers/tracking/info.handler\n    events:\n      - http: \n          path: /api/tracking/info\n          method: get\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/info\"\n            description: \"/api/tracking/info\"\n            queryParams:\n              - name: documentid\n                type: string\n                description: document id\n                required: true\n              - name: cid\n                description: client id\n                type: string\n                required: true\n              - name: include\n                description: include 1 page only (true or false), default false\n                type: boolean\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook                  \n\n  trackingCollect:\n    handler: controllers/tracking/collect.handler\n    events:\n      - http: \n          path: api/tracking/collect\n          method: get\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n              Set-Cookie: integration.response.body.Cookie\n            template: $input.path('$.body')\n          documentation:\n            summary: \"tracking collector\"\n            description: \"api/tracking/collect\"\n            queryParams:\n              - name: cid\n                description: client id\n                type: string\n                required: true\n              - name: sid\n                description: session id\n                type: string\n                required: true\n              - name: t\n                description: event timestamp\n                type: number\n                required: true\n              - name: e\n                description: email\n                type: string\n              - name: ev\n                description: event type [view, leave]\n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n  trackingExport:\n    handler: controllers/tracking/trackingExport.handler\n    events:\n      - http: \n          method: get\n          path: /api/tracking/export\n          cors: true\n          authorizer: accountAuth\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/export\"\n            description: \"/api/tracking/export\"\n            queryParams:\n              - name: documentId\n                description: document id\n                type: string\n                required: true   \n            methodResponses:\n              -\n                statusCode: \"200\"\n                responseBody:\n                  description: \"Response body description\"\n                responseModels:\n                  \"application/json\": \"DefaultResponseModel\"\n  trackingConfirm:\n    handler: controllers/tracking/confirm.handler\n    events:\n      - http:\n          method: post\n          path: /api/tracking/confirm\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n          documentation:\n            summary: \"/api/tracking/confirm\"\n            description: \"/api/tracking/confirm\"\n            queryParams:\n              - name: documentId\n                description: documentId\n                type: string\n              - name: email\n                description: email\n                type: string\n              - name: cid\n                description: cid\n                type: string\n              - name: sid\n                description: sid\n                type: string\n              \n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n  \n  oembedDocument:\n    handler: controllers/oembed/oembedDocument.handler\n    events:\n      - http: \n          method: get\n          path: /api/oembed\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n    deploymentSettings:\n      type: ${self:custom.deployType}\n      alias: prod\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n  \n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$.errorMessage\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n\ncustom:\n  deployType: Canary10Percent5Minutes\n  deploymentSettings:\n    stages:\n      - dev\n      - alpha\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: Rest API\n        description: Decompany Rest Api\n        termsOfService: https://www.google.com\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\nplugins:\n  - serverless-offline\n  - serverless-aws-documentation\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-plugin-canary-deployments\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: batch-pageview # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${file(./serverlessConfig.js):region}\n  stage: ${opt:stage, 'dev'}\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - events:*\n       - kms:*\n      Resource: \"*\"   \n  exclude:\n    - .gitignore\n    - .env\n\nfunctions:\n  makeRewardPool:\n    handler: functions/mgr/makeRewardPool\n  calculateRoyalty:\n    handler: functions/cron/calculateRoyalty.handler\n    timeout: 300\n\n  pageviewWriteOnchain:\n    handler: functions/onchain/pageviewWriteOnchain.handler\n    timeout: 300\n    #events:\n    #  - schedule: rate(5 minutes)\n\n  dailyPageview:\n    handler: functions/cron/dailyPageview.handler\n    timeout: 300\n    #events:\n    #  - schedule: cron(10 0 * * ? *) # daily 00:10:00\n\n  recentlyPageview:\n    handler: functions/cron/recentlyPageview.handler\n    timeout: 30\n    events:\n      - schedule: rate(5 minutes)\n      \n  generatePopular:\n    handler: functions/cron/generatePopular.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n  \n  generateFeatured:\n    handler: functions/cron/generateFeatured.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n\n  generateTopTag:\n    handler: functions/cron/generateTopTag.handler\n    timeout: 300\n    events:\n      - schedule: rate(5 minutes)\n      \nstepFunctions:\n  validate: true\n  stateMachines:\n    dailyAggregateRoyalty:\n      events:\n        - schedule: \n            rate: cron(30 0 * * ? *)\n      definition:\n        StartAt: aggregatePageviewState\n        States:\n          aggregatePageviewState:\n            Type: Task\n            Resource:\n              Fn::GetAtt:\n                - dailyPageview\n                - Arn\n            End: true\n\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-step-functions","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: \n  name: restapis-wallet # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n\n    \nfunctions:\n  claimReward:\n    handler: src/claim/reward.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/claim/reward\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/claim/reward\"\n            description: \"/api/claim/reward\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestDocumentModel\"\n\n  claimRoyalty:\n    handler: src/claim/royalty.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/claim/royalty\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/claim/royalty\"\n            description: \"/claim/royalty\"\n            requestBody:\n                description: \"documentId\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestDocumentModel\"\n\n  walletVote:\n    handler: src/wallet/vote.handler\n    timeout: 90\n    events:\n      - http: \n          method: post\n          path: /api/document/vote\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          async: true\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/document/vote\"\n            description: \"/api/document/vote\"\n            requestBody:\n                description: \"documentId, value\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n            requestModels:\n                \"application/json\": \"RequestVoteModel\"\n\n  walletWithdraw:\n    handler: src/wallet/withdraw.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/withdraw\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/withdraw\"\n            description: \"/api/account/withdraw\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header JWT\"\n            requestModels:\n                \"application/json\": \"RequestWithdrawModel\"\n  getBalance:\n    handler: src/account/balance.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/balance\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/balance\"\n            description: \"/api/account/balance\"\n            requestModels:\n                \"application/json\": \"RequestBalanceModel\"\n  requestGas:\n    handler: src/gas/request.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/gas/request\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n\n  transferDeck:\n    handler: src/deck/transfer.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/deck/transfer\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n\n  createAccount:\n    handler: src/account/create.handler\n    timeout: 25\n    events:\n      - http: \n          method: post\n          path: /api/account/create\n          cors: true\n          integration: lambda\n          authorizer: jwt\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n            template: $input.path('$')\n            statusCode:\n              500:\n                template: $input.path('$')\n          documentation:\n            summary: \"/api/account/create\"\n            description: \"/api/account/create\"\n            requestHeaders:\n              -\n                name: \"Authorization\"\n                description: \"Auth Header description\"\n\n  jwt:\n    handler: src/authorizer/jwt.handler\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    GatewayResponse4xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: $input.path(\"$\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponse5xx:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: $input.path(\"$\")\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  documentation:\n    api:\n      info:\n        version: '1'\n        title: restapis-wallet\n        description: restapis-wallet\n        contact:\n          name: Jay\n          email: jay@decompany.io\n        license:\n          name: Decompany\n          url: https://www.decompany.io\n    models:\n      -\n        name: \"ErrorResponseModel\"\n        description: \"This is an error\"\n        contentType: \"application/json\"\n        schema: ${file(models/error.json)}\n      -\n        name: \"DefaultResponseModel\"\n        description: \"default response\"\n        contentType: \"application/json\"\n        schema: ${file(models/default_response.json)}\n      -\n        name: \"RequestVoteModel\"\n        description: \"vote request\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestVoteModel.json)}\n      -\n        name: \"RequestDocumentModel\"\n        description: \"document request\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestDocumentModel.json)}\n      -\n        name: \"RequestWithdrawModel\"\n        description: \"wallet withdraw\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestWithdrawModel.json)}\n      -\n        name: \"RequestBalanceModel\"\n        contentType: \"application/json\"\n        schema: ${file(models/RequestBalanceModel.json)}    \nplugins:\n  - serverless-offline\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin\n  - serverless-aws-documentation","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: batch-wallet # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n  tags:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n       - sns:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n#  dailySetDateMillis:\n#    handler: src/scheduler/dailySetDateMillis.handler\n#    timeout: 60\n#    reservedConcurrency: 1\n#    events:\n#      - schedule: cron(0 0 * * ? *)\n\n  schedulerTransfer:\n    handler: src/scheduler/transfer.handler\n    timeout: 300\n    reservedConcurrency: 1\n    events:\n      - schedule: rate(1 minute)\n\n  schedulerWithdraw:\n    handler: src/scheduler/withdraw.handler\n    timeout: 300\n    reservedConcurrency: 1\n    events:\n      - schedule: rate(1 minute)\n\n\n# you can add CloudFormation resource templates here\nresources:\n\n\ncustom:\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\n  \nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-split-stacks\n  - serverless-prune-plugin","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: restapis-graphql # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # you can overwrite defaults here\n  stage: ${opt:stage, 'dev'}\n  region: ${file(./serverlessConfig.js):region}\n  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name\n  #apiName: ${self:service.name}-api      # Api Gateway Name\n  environment:\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    servicename: ${self:service.name}\n    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}\n  tags:\n    REGION: ${self:provider.region}\n    SERVICENAME: ${self:service.name}\n    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}\n    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}\n    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}\n  logRetentionInDays: 3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - dynamodb:*\n       - s3:*\n       - logs:*\n       - sqs:*\n       - kinesis:*\n       - kms:*\n       - ses:*\n       - codedeploy:*\n      Resource: \"*\"\n# you can add statements to the Lambda function's IAM Role here\n  vpc:\n    securityGroupIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.securityGroupIds}\n    subnetIds: \n      \"Fn::Split\":\n        - \",\"\n        - ${file(./serverlessConfig.js):vpc.subnetIds}\n\n# you can define service wide environment variables here\n  #environment:\n  #  CROS: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  individually: false\n  exclude:\n    - .gitignore\n    - .env\n    - package.json\n    - install.sh\n    - opt/**\n    - test/**\n    \nfunctions:\n  graphql:\n    handler: src/index.handler\n    events:\n      - http: \n          method: ANY\n          path: /api/graphql\n#          authorizer: auth\n\ncustom:\n  deployType: Canary10Percent5Minutes\n  deploymentSettings:\n    stages:\n      - dev\n      - alpha\n  prune:\n    automatic: true\n    number: 5\n  splitStacks:\n    perFunction: false\n    perType: true\n  serverless-offline:\n    port: 4080\nplugins:\n  - serverless-offline\n  - serverless-mocha-plugin\n  - serverless-prune-plugin"]},{"id":76360587,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116161062,"files":["service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10 # set node.js runtime\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev # setting the env stage to dev, this will be visible in the routes\n  region: us-east-1\n\nfunctions: # add 4 functions for CRUD\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id} # path will be domain.name.com/dev/notes/1\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation"]},{"id":140457003,"files":["service: graphql-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  profile: serverless\n  region: ${file(./serverless.env.yml):${self:provider.stage}.REGION}\n  environment: ${file(./serverless.env.yml):${self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sdb:GetAttributes\n      Resource:\n        Fn::Join:\n          - \":\"\n          -\n            - \"arn:aws:sdb\"\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - domain/${file(./serverless.env.yml):${self:provider.stage}.SDB_DOMAIN}\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${file(./serverless.env.yml):${self:provider.stage}.API_DOMAIN_NAME}\n    certificateName: ${file(./serverless.env.yml):${self:provider.stage}.AWS_CERT_NAME}\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nfunctions:\n  graphql:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: post\n          cors: true\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: spotify-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  profile: serverless\n  region: ${file(./serverless.env.yml):${opt:stage}.REGION}\n  environment: ${file(./serverless.env.yml):${opt:stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sdb:GetAttributes\n        - sdb:PutAttributes\n        - sdb:Select\n      Resource:\n        Fn::Join:\n          - \":\"\n          -\n            - \"arn:aws:sdb\"\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - domain/${file(./serverless.env.yml):${opt:stage}.SDB_DOMAIN}\n\nplugins:\n  - serverless-offline\n  - serverless-offline-scheduler\n\nfunctions:\n  refresh:\n    handler: handler.process\n    events:\n      - schedule: rate(30 minutes)\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","local:\n  REGION:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN:\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:\n\ntest:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN: test\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:\n\nprod:\n  REGION:\n  API_DOMAIN_NAME:\n  AWS_CERT_NAME:\n  SDB_DOMAIN:\n  TWITTER_CONSUMER_KEY:\n  TWITTER_CONSUMER_SECRET:\n  TWITTER_ACCESS_TOKEN_KEY:\n  TWITTER_ACCESS_TOKEN_SECRET:\n  GITHUB_PERSONAL_ACCESS_TOKEN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n  SPOTIFY_ACCESS_TOKEN:\n  SPOTIFY_REFRESH_TOKEN:\n  ENDOMONDO_EMAIL:\n  ENDOMONDO_PASSWORD:\n  INSTAGRAM_CLIENT_ID:\n  INSTAGRAM_CLIENT_SECRET:\n  INSTAGRAM_ACCESS_TOKEN:","local:\n  REGION:\n  SDB_DOMAIN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n\ntest:\n  SDB_DOMAIN: test\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:\n\nprod:\n  REGION:\n  SDB_DOMAIN:\n  SPOTIFY_CLIENT_ID:\n  SPOTIFY_CLIENT_SECRET:"]},{"id":141933376,"files":["service: tweet-scheduler\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 3\n  logRetentionInDays: 14\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    JWT_SECRET: ${self:custom.env.JWT_SECRET}\n    CONSUMER_KEY: ${self:custom.env.CONSUMER_KEY}\n    CONSUMER_SECRET: ${self:custom.env.CONSUMER_SECRET}\n    TWEETS_TABLE: ${self:service}-${self:provider.stage}\n    LOCAL_TIME_INDEX: local-userId-tweetTime-index\n    GLOBAL_TIME_INDEX: global-tweetTime-index\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DeleteItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Query\n      Resource:\n        Fn::GetAtt:\n          - TweetsTable\n          - Arn\n\npackage:\n  include:\n    - config/**\n  exclude:\n    - src/client\n    - src/public\n  individually: true\n\nfunctions:\n  signIn:\n    handler: src/functions/signIn.handler\n    events:\n      - http:\n          method: POST\n          path: /session\n  logout:\n    handler: src/functions/logout.handler\n    events:\n      - http:\n          method: DELETE\n          path: /session\n  getTweets:\n    handler: src/functions/getTweets.handler\n    events:\n      - http:\n          method: GET\n          path: /tweets\n  createTweet:\n    handler: src/functions/createTweet.handler\n    events:\n      - http:\n          method: POST\n          path: /tweets\n  updateTweet:\n    handler: src/functions/updateTweet.handler\n    events:\n      - http:\n          method: PUT\n          path: /tweets/{tweetId}\n  deleteTweet:\n    handler: src/functions/deleteTweet.handler\n    events:\n      - http:\n          method: DELETE\n          path: /tweets/{tweetId}\n  postTweets:\n    handler: src/functions/scrapeTweets.handler\n    events:\n      - schedule: cron(* * * * ? *)\n    memorySize: 512\n    timeout: 60\n\nresources:\n  Resources:\n    TweetsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.TWEETS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: tweetId\n            AttributeType: S\n          - AttributeName: tweetTime\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: tweetId\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.LOCAL_TIME_INDEX}\n            KeySchema:\n              - AttributeName: userId\n                KeyType: HASH\n              - AttributeName: tweetTime\n                KeyType: RANGE\n            Projection:\n              ProjectionType: INCLUDE\n              NonKeyAttributes:\n                - tweetBody\n        GlobalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.GLOBAL_TIME_INDEX}\n            KeySchema:\n              - AttributeName: tweetTime\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        TimeToLiveSpecification:\n          AttributeName: tweetTime\n          Enabled: true\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    LogBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.config.logBucket}\n        AccessControl: LogDeliveryWrite\n        LifecycleConfiguration:\n          Rules:\n            - Transitions:\n                - StorageClass: STANDARD_IA\n                  TransitionInDays: 30\n              Status: Enabled\n\ncustom:\n  env: ${file(./config/backend.yml):environment}\n  config: ${file(./config/backend.yml):${self:provider.stage}}\n  fullstack:\n    bucketName: ${self:custom.config.siteBucket}\n    distributionFolder: src/public\n    indexDocument: login.html\n    clientCommand: yarn pkg\n    logging:\n      bucket:\n        Fn::GetAtt:\n          - LogBucket\n          - DomainName\n  capacities:\n    - table: TweetsTable\n      index:\n        - ${self:provider.environment.TWEET_TIME_INDEX}\n      read:\n        minimum: 1\n        maximum: 5\n        usage: 0.75\n      write:\n        minimum: 1\n        maximum: 5\n        usage: 0.75\n  prune:\n    automatic: true\n    number: 3\n  # alerts:\n  #   topics:\n  #     alarm:\n  #       topic: ${self:service}-${self:provider.stage}-alerts-alarm\n  #       notifications:\n  #         - protocol: email\n  #           endpoint: ${self:custom.config.notificationEmail}\n\n# alerts:\n#   alarms:\n#     - functionErrors\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-plugin-optimize\n  - serverless-plugin-aws-alerts\n  - serverless-dynamodb-autoscaling\n  - fullstack-serverless\n"]},{"id":157320647,"files":["service: ps-slack\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10 \n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:SendMessage\"\n        - \"sqs:GetQueueUrl\"\n      Resource: \n        Fn::GetAtt:\n          - CommandQueue\n          - Arn  \n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:ListQueues\"\n      Resource: \n         Fn::GetAtt:\n          - CommandQueue\n          - Arn       \n\ncustom:\n  baseUrl: v1\n  mosUrl: https://www.oracle.com/search/results/_/N-33y?No=0&Nr=106&Nrpp=5&Ntk=SI-ALL5&Ntt=\n  product: E92519_02\n\nfunctions:\n  pbSlackCommand:\n    handler: handler.pbCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/pb-search\n          method: post\n    environment:\n      QUEUE: \n        Ref: CommandQueue\n\n  mosSlackCommand:\n    handler: handler.mosCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/mos-search\n          method: post\n    environment:\n      QUEUE:\n        Ref: CommandQueue\n\n  commandHandler:\n    handler: handler.commandHandler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CommandQueue\n              - Arn\n          batchSize: 1\n    environment:\n      PRODUCT:  ${self:custom.product}\n      MOSURL:  ${self:custom.mosUrl}\n      \nresources:\n  Resources:\n    CommandQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"PS-BOT-COMMANDS\"\n        VisibilityTimeout: 60\n        MessageRetentionPeriod: 120\n\n"]},{"id":153491803,"files":["service: aws-foodies\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":188120791,"files":["service: notes-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n  getUser:\n    handler: handler.getUser\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":198515222,"files":["service: sls-week\n\nplugins:\n  - serverless-webpack\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - kinesis:PutRecord\n        - kinesis:GetRecords\n        - kinesis:GetShardIterator\n        - kinesis:DescribeStream\n        - kinesis:ListStreams\n      Resource:\n        \"arn:aws:kinesis:*:*:stream/sls-week-stream\"\n\nfunctions:\n  producer:\n    handler: producer.main\n    events:\n      - http:\n          path: produce/\n          method: post\n\n  consumer:\n    handler: consumer.main\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - KinesisStream\n              - Arn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: sls-week-stream\n        ShardCount: 1\n"]},{"id":195044337,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nplugins:\n#  - serverless-plugin-typescript\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":205652773,"files":["service: myproject\n\nplugins:\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  profile: ${opt:profile, 'personal'}\n  runtime: nodejs10.x\n  stage: ${opt:stage, env:SERVERLESS_STAGE, 'demo'}\n  region: ${opt:region, env:AWS_DEFAULT_REGION, 'eu-west-1'}\n\ncustom:\n  serverless-iam-roles-per-function:\n    defaultInherit: true\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n\nresources:\n  - ${file(outputs.yml)}\n"]},{"id":206813057,"files":["service: serverless-cvm\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  environment: ${file(env.yml):dev}\n\npackage:\n  exclude:\n    - certs/**\n    - img/**\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iot:CreateThing\n        - iot:AttachPolicy\n        - iot:DetachPolicy\n        - iot:AttachThingPrincipal\n        - iot:DetachThingPrincipal\n        - iot:CreatePolicy\n        - iot:CreateKeysAndCertificate\n        - iot:UpdateCertificate\n        - iot:DeleteCertificate\n        - iot:GetThingShadow\n        - iot:UpdateThingShadow\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n      Resource:\n        - \"Fn::GetAtt\": [ DeviceInfoDynamoDBTable, Arn ]\n    - Effect: Allow\n      Action:\n        - logs:*\n      Resource:\n        - arn:aws:logs:*:*:*\n\nfunctions:\n  cvm:\n    handler: cvm/index.handler\n    events:\n      - http:\n          path: getcert\n          method: get\n      - http:\n          path: shadow\n          method: any\n    environment:\n      REGION: \"#{AWS::Region}\"\n      DYNAMODB_TABLE_NAME: !Ref DeviceInfoDynamoDBTable\n      IOT_DATA_ENDPOINT: ${self:custom.environment.IOT_DATA_ENDPOINT}\n\nresources:\n Resources:\n    DeviceInfoDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: iot-cvm-device-info\n        AttributeDefinitions:\n          - AttributeName: serialNumber\n            AttributeType: S\n        KeySchema:\n          - AttributeName: serialNumber\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n"]},{"id":228549353,"files":["service: aws-api-lambda-s3-image-upload\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource: \"arn:aws:s3:::input-code\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource: \"arn:aws:s3:::input-code/*\"\n\nfunctions:\n  index:\n    handler: handler.handler\n    events:\n      - http: POST handler"]},{"id":95447436,"files":["service:\n  name: chee\n  awsKmsKeyArn: arn:aws:kms:us-east-1:710390882138:key/bbbc300d-ac65-4e10-a4d8-4ae43008ae13\n\npackage:\n  include:\n    - lib/**\n    - data/**\n    - conf/**\n    - node_modules/serverless-dynamodb-local/**\n\n  exclude:\n    - README.md\n    - Makefile\n    - LICENSE\n\ncustom:\n  creds: ${file(./config.yml)}\n  bucket: chee\n  ccl_bucket: tds-slack\n  tables:\n    users: karma_users\n    scores: karma_scores\n  dynamodb:\n    start:\n      inMemory: true\n      migrate: true\n  serverless-offline:\n    port: 4000\n\nprovider:\n  name: aws\n  memory: 128\n  runtime: nodejs6.10\n  timeout: 3\n  stage: dev\n  profile: serverless\n  environment:\n    SLACK_CLIENT_ID: ${self:custom.creds.slack_client_id}\n    SLACK_CLIENT_SECRET: ${self:custom.creds.slack_client_secret}\n    SLACK_VERIFICATION_TOKEN: ${self:custom.creds.slack_verification_token}\n    MASHAPE_API_KEY: ${self:custom.creds.mashape_api_key}\n    DYNAMODB_USER_TABLE: ${self:custom.tables.users}\n    DYNAMODB_SCORE_TABLE: ${self:custom.tables.scores}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        - \"arn:aws:s3:::${self:custom.ccl_bucket}/*\"\n        - \"arn:aws:s3:::${self:custom.ccl_bucket}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  ccl:\n    handler: lib/ccl/get.do\n    name: ${self:provider.stage}-ccl\n    description: Too many ccliters gifs\n    events:\n        - http:\n            path: ccl\n            method: post\n  plus:\n    handler: lib/score/score.plus\n    name: ${self:provider.stage}-score-plus\n    description: ++ a thing\n    events:\n        - http:\n            path: score/plus\n            method: post\n  minus:\n    handler: lib/score/score.minus\n    name: ${self:provider.stage}-score-minus\n    description: -- a thing\n    events:\n        - http:\n            path: score/minus\n            method: post\n  top:\n    handler: lib/score/score.top\n    name: ${self:provider.stage}-score-top\n    description: Get top scorers\n    events:\n        - http:\n            path: score/top\n            method: post\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tables.users}\n        AttributeDefinitions:\n          - AttributeName: team_id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n          - AttributeName: score\n            AttributeType: N\n          - AttributeName: karma\n            AttributeType: N\n        KeySchema:\n          - AttributeName: team_id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        LocalSecondaryIndexes:\n          - IndexName : users-team-score\n            KeySchema:\n              - AttributeName: team_id\n                KeyType: HASH\n              - AttributeName: score\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n               - \"karma\"\n               - \"id\"\n               - \"name\"\n              ProjectionType: INCLUDE\n          - IndexName : users-team-karma\n            KeySchema:\n              - AttributeName: team_id\n                KeyType: HASH\n              - AttributeName: karma\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n               - \"score\"\n               - \"id\"\n               - \"name\"\n              ProjectionType: INCLUDE\n\n    scoresTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tables.scores}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: date\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: date\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n"]},{"id":80097701,"files":["service: promises\n\ncustom:\n  dynamoDBTableName: \"${opt:stage, self:provider.stage}_promise_test\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:*\"\n\nfunctions:\n  promisetest:\n    handler: handler.promised\n    environment:\n      TABLE: \"${self:custom.dynamoDBTableName}\"\n\nResources:\n  IngestionTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    Properties:\n      TableName: ${self:custom.dynamoDBTableName}\n      AttributeDefinitions:\n        - AttributeName: uuid\n          AttributeType: S\n      KeySchema:\n        - AttributeName: uuid\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: 1\n        WriteCapacityUnits: 1\n"]},{"id":139330536,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: kakao-bot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-2\n  usagePlan:\n      quota:\n        limit: 1000\n        offset: 0\n        period: MONTH\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\ncustom:\n  documentation:\n    api:\n      info:\n        version: v0.0.0\n        title: Some API title\n        description: Some API description\n    models:\n      -\n        name: \"MessageRequest\"\n        contentType: \"application/json\"\n        schema:\n          required:\n            - user_key\n            - type\n            - content\n          properties:\n            user_key:\n              type: string\n            type:\n              type: string\n            content:\n              type: string\n      -\n        name: \"FriendRequest\"\n        contentType: \"application/json\"\n        schema:\n          required:\n            - user_key\n          properties:\n            user_key:\n              type: string\n\nfunctions:\n  chatbot:\n    handler: handler.handler\n    events:\n      - http:\n          path: keyboard\n          method: get\n      - http:\n          path: message\n          method: post\n          reqValidatorName: 'onlyBody'\n          request:\n            passThrough: NEVER\n          documentation:\n            requestModels:\n              \"application/json\": \"MessageRequest\"\n      - http:\n          path: friend\n          method: post\n          reqValidatorName: 'onlyBody'\n          request:\n            passThrough: NEVER\n          documentation:\n            requestModels:\n              \"application/json\": \"FriendRequest\"\n      - http:\n          path: friend/{user_key}\n          method: delete\n      - http:\n          path: chat_room/{user_key}\n          method: delete\n\nresources:\n  Resources:\n    onlyBody:\n      Type: AWS::ApiGateway::RequestValidator\n      Properties:\n        Name: 'only-body'\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        ValidateRequestBody: true\n        ValidateRequestParameters: false\n\nplugins:\n  - serverless-offline\n  - serverless-reqvalidator-plugin\n  - serverless-aws-documentation"]},{"id":134318939,"files":["# NOTE: update this with your service name\nservice: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n# 'iamRoleStatements' defines the permission policy for the Lambda function.\n# In this case Lambda functions are granted with permissions to access DynamoDB.\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  # domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in get.js\n  # - path: url path is /notes/{id} # - method: GET request\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in list.js\n  # - path: url path is /notes # - method: GET request\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authoriser: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in update.js\n  # - path: url path is /notes/{id}\n  # - method: PUT request\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  # Defines an HTTP API endpoint that calls the main function in delete.js\n  # - path: url path is /notes/{id}\n  # - method: DELETE request\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":132625666,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: uptimegirl # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs6.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  cron: \n    handler: handlers.run\n    events:\n      - schedule: rate(1 minute)\n  \n  getReports:\n    handler: handlers.getReports\n    events:\n      - http:\n          path: reports\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    ReportsTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":195052915,"files":["service: serverless-book-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: development\n  region: eu-west-1\n  environment:\n    BOOKS_TABLE: \"books\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:dynamodb:*:*:table/\"\n            - Ref: BooksTable\n\nfunctions:\n  create:\n    handler: books/create.handler\n    events:\n      - http:\n          path: books\n          method: post\n          cors: true\n\n  update:\n    handler: books/update.handler\n    events:\n      - http:\n          path: books/{id}\n          method: put\n          cors: true\n\n  list:\n    handler: books/list.handler\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n\n  get:\n    handler: books/get.handler\n    events:\n      - http:\n          path: books/{id}\n          method: get\n          cors: true\n\n  delete:\n    handler: books/delete.handler\n    events:\n      - http:\n          path: books/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    BooksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.BOOKS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":154220938,"files":["service: aws-node-alexa-skill\n\nplugins:\n  - serverless-alexa-skills\n\ncustom:\n  skillName: My Health\n  alexa:\n    vendorId: nope\n    clientId: nope\n    clientSecret: nope\n    skills:\n      - id: amzn1.ask.skill.fd64f0a3-298e-43e5-bce3-58862dbf0c59\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: ${self:custom.skillName}\n          apis:\n            custom: \n              endpoint:\n                uri: arn:aws:lambda:eu-west-1:731778311494:function:aws-node-alexa-skill-dev-healthHandler\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: how is my health\n                intents:\n                  - name: AMAZON.HelpIntent\n                    samples: \n                    - 'help'\n                  - name: AMAZON.CancelIntent\n                    samples: \n                    - 'cancel'\n                  - name: AMAZON.StopIntent\n                    samples: \n                    - 'stop'\n                  - name: ${self:provider.environment.HEALTH_INTENT}\n                    samples:\n                      - 'give me my last health records'\n                  - name: ${self:provider.environment.FOOD_INTENT}\n                    slots:\n                    - name: when\n                      type: AMAZON.DATE\n                    - name: food\n                      type: AMAZON.Food\n                    - name: exercise\n                      type: AMAZON.Sport\n                    samples:\n                      - 'I had {food} {when} how much do I have to {exercise}'\n                      - 'I had {food} on {when} how much do I have to {exercise}'\n                      - 'I had {food} how much do I have to {exercise}'\n                      - 'I had {food}'\n                      - '{when} I had {food}'\n                      - 'If I eat {food} how much do I have to {exercise}'\n        \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: serverless-admin\n  environment: \n    SKILL_NAME: ${self:custom.skillName}\n    HEALTH_INTENT: myHealth\n    FOOD_INTENT: iAteFood\n\nfunctions:\n  healthHandler:\n    handler: handler.handler\n    events:\n      - alexaSkill: amzn1.ask.skill.fd64f0a3-298e-43e5-bce3-58862dbf0c59\n"]},{"id":178757715,"files":["plugins:\n  - serverless-offline\n  - fullstack-serverless\n\nservice: twitter-stats\n\ncustom:\n  tableNameSnapshots: 'twitter-stats-snapshots-${self:provider.stage}'\n  tableNameAccounts: 'twitter-stats-accounts-${self:provider.stage}'\n  domains:\n    prod: twitterstats.joostschuur.com\n    stage: twitterstats-stage.joostschuur.com\n    dev: twitterstats-dev.joostschuur.com\n\n  fullstack:\n    domain: '${self:custom.domains.${self:provider.stage}}'\n    certificate: arn:aws:acm:us-east-1:030731221117:certificate/08b634e0-2d89-49d5-bc21-b18f85cafed9\n    bucketName: ${self:service}\n    distributionFolder: client/build\n    clientCommand: npm run build\n    clientSrcPath: client\n    indexDocument: index.html\n    errorDocument: index.html\n    singlePageApp: true\n    compressWebContent: true\n    apiPath: api\n\n  serverless-offline:\n    port: 3001\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: default\n  stage: ${opt:stage, 'dev'}\n  environment:\n    DB_SNAPSHOTS_TABLE_NAME: ${self:custom.tableNameSnapshots}\n    DB_ACCOUNTS_TABLE_NAME: ${self:custom.tableNameAccounts}\n    TWITTER_CONSUMER_KEY: ${file(./twitter_credentials.yml):CONSUMER_KEY}\n    TWITTER_CONSUMER_SECRET: ${file(./twitter_credentials.yml):CONSUMER_SECRET}\n    TWITTER_ACCESS_TOKEN_KEY: ${file(./twitter_credentials.yml):ACCESS_TOKEN_KEY}\n    TWITTER_ACCESS_TOKEN_SECRET: ${file(./twitter_credentials.yml):ACCESS_TOKEN_SECRET}\n\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n\n        Resource:\n          - { \"Fn::GetAtt\": [\"SnapshotsTable\", \"Arn\" ] }\n          - { \"Fn::GetAtt\": [\"AccountsTable\", \"Arn\" ] }\n\nfunctions:\n  accounts:\n    handler: handler.Accounts\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/accounts\n          method: get\n      - http:\n          path: ${self:custom.fullstack.apiPath}/accounts/{id}\n          method: get\n\n  updatecounts:\n    handler: handler.UpdateCounts\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/updatecounts\n          method: get\n\n  updatestats:\n    handler: handler.UpdateStats\n    events:\n      - http:\n          path: ${self:custom.fullstack.apiPath}/updatestats\n          method: get\n      - schedule:\n          rate: rate(8 hours)\n          name: 'update-twitter-stats-${self:provider.stage}'\n          stage: ${self:provider.stage}\n\nresources:\n  Resources:\n    SnapshotsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"screen_name\"\n          AttributeType: \"S\"\n        - AttributeName: \"timestamp\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"screen_name\"\n          KeyType: \"HASH\"\n        - AttributeName: \"timestamp\"\n          KeyType: \"RANGE\"\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableNameSnapshots}\n    AccountsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"screen_name\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"screen_name\"\n          KeyType: \"HASH\"\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableNameAccounts}"]},{"id":223569144,"files":["service: fastify-link-shortener\n\nplugins:\n  - serverless-offline\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\npackage:\n  exclude:\n    - README.md\n\ncustom:\n  stage: ${self:provider.stage}\n  linkTableName: link-table-${self:custom.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stackName: ${self:service}-${self:custom.stage}\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-west-1'}\n#  apiGateway:\n#    restApiId:\n#      Ref: FastifyLinkApi\n#    restApiRootResourceId:\n#      Fn::GetAtt:\n#        - FastifyLinkApi\n#        - RootResourceId\n\nfunctions:\n  shortener:\n    handler: src/handler/app.handler\n    name: ${self:service}-${self:custom.stage}\n    description: fastify link shortener\n    timeout: 30\n    memorySize: 128\n    iamRoleStatementsName: ${self:service}-${self:custom.stage}-role\n    iamRoleStatementsInherit: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        Resource:\n          { \"Fn::GetAtt\": [LinkTableDB, Arn] }\n    environment:\n      link_table_name: ${self:custom.linkTableName}\n    events:\n      - http:\n          path: /{id}\n          method: GET\n      - http:\n          path: /\n          method: POST\n\nresources:\n  Description: >\n    Fastify link shortener service\n  Resources:\n    LinkTableDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.linkTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        Tags:\n          - Key: 'Name'\n            Value: ${self:custom.linkTableName}\n          - Key: 'Environment'\n            Value: ${self:custom.stage}\n\n#    FastifyLinkApi:\n#      Type: AWS::ApiGateway::RestApi\n#      Properties:\n#        Name: FastifyLinkApi\n#    FastifyLinkApiMaping:\n#      Type: AWS::ApiGateway::BasePathMapping\n#      Properties:\n#        BasePath: l\n#        DomainName: your-url.com\n#        RestApiId:\n#          Ref: FastifyLinkApi\n#        Stage: dev\n"]},{"id":163687945,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: splitcloud-serverless-charts-service # NOTE: update this with your service name\n\ncustom:\n  domains:\n    prod: rest.splitcloud-app.com\n    dev: dev-rest.splitcloud-app.com\n  myStage: ${opt:stage, self:provider.stage}\n  prod: \n    schedule: cron(0 18 ? * MON *)\n    schedule_token: rate(15 minutes)\n    schedule_discovery: rate(1 day)\n    schedule_country_charts: cron(0 19 ? * MON *)\n  dev: \n    schedule: \n    schedule_token:\n    schedule_discovery:\n    schedule_country_charts:\n  bucket: \"www.splitcloud-app.com\"\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.myStage}}\n    basePath: ''\n    stage: \"${self:custom.myStage}\"\n    createRoute53Record: true\n  \n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 200\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule}\n  charts_endpoint:\n    handler: handler.chartsEndpoint\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: charts\n          method: get\n  top_regions:\n    handler: handler.topRegions\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: regions\n          method: get\n  log_collector:\n    handler: handler.logCollector\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: app/feedback/{deviceid}\n          method: POST\n          request:\n            parameters:\n              paths:\n                deviceid: true\n  radio_countrycodes:\n    handler: handler.radioCountryCodes\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: radio/countrycodes\n          method: get\n  radioListByCountrycode:\n    handler: handler.radioListByCountryCode\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: radio/list/countrycode/{countrycode}\n          method: get\n          request:\n            parameters:\n              paths:\n                countrycode: true\n  yearWrapped:\n    handler: handler.yearWrappedTopList\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - http:\n          path: wrapped/{year}/{deviceId}/{side}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                year: true\n                deviceId: true\n                side: true\n  country_charts:\n    handler: handler.updateCountryCharts\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_country_charts}\n  token:\n    handler: handler.selectActiveToken\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_token}\n  discovery:\n    handler: handler.updateDiscoveryApi\n    environment:\n      BUCKET: ${self:custom.bucket}\n      STAGE: ${self:custom.myStage} \n    events:\n      - schedule: ${self:custom.${self:custom.myStage}.schedule_discovery}\nplugins:\n  - serverless-domain-manager\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":83952149,"files":["service: convey\n\nprovider:\n  name: YOUR_PROVIDER\n  runtime: nodejs4.3\n  memorySize: 256\n\nstage: prod\nregion: YOUR_REGION\n\nfunctions:\n  index:\n    handler: handler.index\n    environment: ${file(env.yml)}\n    events:\n      - http:\n          path: index\n          method: post"]},{"id":85813602,"files":["service: bakery \n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-2\n  environment:\n    STATUS_CAKE_API_KEY: ${env:STATUS_CAKE_API_KEY}\n    STATUS_CAKE_USER: ${env:STATUS_CAKE_USER}\n\nfunctions:\n  post:\n    handler: handler.createOrUpdate\n    events:\n      - http: POST statuscheck\n\nresources: \n  Resources:\n    bakeryTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: bakery\n        AttributeDefinitions:\n          - AttributeName: stackName\n            AttributeType: S\n          - AttributeName: endpoint\n            AttributeType: S\n        KeySchema:\n          - AttributeName: stackName\n            KeyType: HASH\n          - AttributeName: endpoint\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: bakeryTable\n      Properties:\n        PolicyName: bakery-lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DeleteItem\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n              Resource: arn:aws:dynamodb:*:*:table/bakery\n        Roles:\n          - Ref: IamRoleLambdaExecution\n\n"]},{"id":155065429,"files":["service:\n  name: my-new-service\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":141926580,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rest-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions: # add 4 functions for CRUD\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id} # path will be domain.name.com/dev/notes/1\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":137783848,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs8-koa\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# The plugins need to be ordered as follows.\nplugins:\n  - serverless-webpack\n# Uncomment to add local dynamodb support\n#  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: 'yarn'   # Packager that will be used to package your external modules\n#  dynamodb:\n#    start:\n#      migrate: true\n#      seed: false\n  serverless-offline:\n    #httpsProtocol: \"dev-certs\"\n    #port: 4000\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: src/handler.server\n    events:\n      - http:\n          path: / # this matches the base path\n          method: ANY\n          cors: true\n      - http:\n          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# You can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    yourDynamoDbTable:\n#      Type: AWS::DynamoDB::Table\n#      Properties:\n#        TableName: YourDynamoDbTable\n#        AttributeDefinitions:\n#          - AttributeName: id\n#            AttributeType: S\n#        KeySchema:\n#          - AttributeName: id\n#            KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 5\n#          WriteCapacityUnits: 5\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":203629448,"files":["name: serverless-cloudmap-component\n\ncreateUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.createUser\n\nfetchUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.fetchUser\n\nuserTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n    region: eu-west-1\n\nUserService:\n  component: ../\n  inputs:\n    service: 'user-service'\n    namespace: 'test'\n    resources:\n      create:\n        resource: ${createUser}\n      fetch:\n        resource: ${fetchUser}\n      userTable:\n        resource: ${userTable}\n"]},{"id":195305693,"files":["service: coderecipe-appsync-cognito\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  guestsHandler:\n    handler: guestsHandler.graphqlHandler\n  registeredHandler:\n    handler: registeredHandler.graphqlHandler\n\nplugins:\n  - serverless-appsync-plugin\n  - serverless-pseudo-parameters\n\ncustom:\n  defaultStage: rbeta\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  userPoolName: appSync-user-pool-${self:custom.currentStage}\n  userPoolClientName: appSync-user-pool-client-${self:custom.currentStage}  \n  appSync:\n    - name: ${self:custom.currentStage}-private-appsync-endpoint\n      schema: schema.graphql\n      authenticationType: AMAZON_COGNITO_USER_POOLS\n      userPoolConfig:\n        awsRegion: ${self:provider.region}\n        defaultAction: ALLOW\n        userPoolId: \"#{CognitoUserPool}\"\n      serviceRole: \"PrivateAppSyncServiceRole\"\n      mappingTemplates:\n        - dataSource: Lambda\n          type: Query\n          field: getMessage\n          request: \"getMessage-request-mapping-template.txt\"\n          response: \"getMessage-response-mapping-template.txt\"  \n      dataSources:\n        - type: AWS_LAMBDA\n          name: Lambda\n          description: 'Lambda DataSource'\n          config:\n            functionName: registeredHandler\n    - name: ${self:custom.currentStage}-public-appsync-endpoint\n      schema: schema.graphql\n      authenticationType: API_KEY\n      serviceRole: \"PublicAppSyncServiceRole\"\n      mappingTemplates:\n        - dataSource: Lambda\n          type: Query\n          field: getMessage\n          request: \"getMessage-request-mapping-template.txt\"\n          response: \"getMessage-response-mapping-template.txt\" \n      dataSources:\n        - type: AWS_LAMBDA\n          name: Lambda\n          description: 'Lambda DataSource'\n          config:\n            functionName: guestsHandler\nresources:\n  Resources:\n    PrivateAppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Lambda-PrivateAppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Lambda-PrivateAppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"lambda:invokeFunction\"\n                  Resource:\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-registeredHandler\"\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-registeredHandler:*\"\n    PublicAppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Lambda-PublicAppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Lambda-PublicAppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"lambda:invokeFunction\"\n                  Resource:\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-guestsHandler\"\n                    - \"arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-guestsHandler:*\"                    \n    CognitoUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        MfaConfiguration: OFF\n        UserPoolName: ${self:custom.userPoolName}\n        UsernameAttributes:\n          - email\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: False\n            RequireUppercase: True\n    CognitoUserPoolGroupReaders:\n      Type: AWS::Cognito::UserPoolGroup\n      Properties: \n        GroupName: \"Readers\"\n        UserPoolId:\n          Ref: CognitoUserPool\n    CognitoUserPoolGroupWriters:\n      Type: AWS::Cognito::UserPoolGroup\n      Properties: \n        GroupName: \"Writers\"\n        UserPoolId:\n          Ref: CognitoUserPool          \n    CognitoUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.userPoolClientName}\n        GenerateSecret: False\n        UserPoolId:\n          Ref: CognitoUserPool"]},{"id":167894284,"files":["service: ecs-service-switcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ecs:listClusters\"\n        - \"ecs:listTagsForResource\"\n        - \"ecs:listServices\"\n        - \"ecs:updateService\"\n      Resource: \"*\"\n  environment:\n    tag_name: ecs-service-switcher-isenabled\n    public_holiday_api: ${opt:public-holiday-api}\n\npackage:\n  exclude:\n    - README.md\n\nlayers:\n  ecsServiceSwitcher:\n    path: layer\n\nfunctions:\n  start:\n    handler: ecs-services/start.handler\n    layers:\n      - {Ref: EcsServiceSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 23 ? * SUN-THU *)\n  stop:\n    handler: ecs-services/stop.handler\n    layers:\n      - {Ref: EcsServiceSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 12 ? * MON-FRI *)\n"]},{"id":139503732,"files":["# NOTE: update this with your service name\nservice: getWalletBalance\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  environment: ${file(env.yml):${self:provider.stage}}  \n\nfunctions:\n  getWalletBalance:\n    handler: handler.getWalletBalance\n    events:\n      - https:\n          path: /\n          method: get\n"]},{"id":134701045,"files":["service: rimba-member-manager\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users\n    DONATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-donations\n    \nfunctions:\n  server:\n    handler: server\n    events:\n      - http:\n          path: /\n          method: get, post, put, delete, options\n          cors: true\n\nresources:\n  Resources:\n    DontationsTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DONATIONS_TABLE}\n        AttributeDefinitions:\n        -\n          AttributeName: id\n          AttributeType: N\n        KeySchema:\n        -\n          AttributeName: id\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":221357750,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: get-cancer-drugs\n# app and org for use with dashboard.serverless.com\napp: meo\norg: minhtc\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\nplugins:\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: handler.index\n    events:\n      - http:\n          method: get\n          path: /\n  info:\n    handler: handler.info\n    events:\n      - http:\n          method: get\n          path: /info\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":225247404,"files":["service: serverless-rest-api-with-dynamodb\n\nplugins:\n  - serverless-localstack\n\ncustom:\n  localstack:\n    host: http://localhost\n    stages:\n      - local\n    debug: true\n  s3Bucket: UserUploads\n  dynamoDBTable: Users\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, env:AWS_STAGE, 'local'}\n  region: ${opt:region, env:AWS_REGION, 'us-east-1'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.s3Bucket}/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoDBTable}\"\n\nfunctions:\n  authorize:\n    handler: verify-auth-token/index\n    package:\n      include:\n        - verify-auth-token/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n\n  user-create:\n    handler: user-create/index\n    events:\n      - http:\n          path: admin/createUser\n          method: post\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-create/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      SALT_ROUNDS: 10\n\n  user-list-all:\n    handler: user-list-all/index\n    events:\n      - http:\n          path: admin/list_all_users\n          method: get\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-list-all/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n  \n  user-delete:\n    handler: user-delete/index\n    events:\n      - http:\n          path: admin/delete_user/{id}\n          method: delete\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-delete/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n\n  user-update:\n    handler: user-update/index\n    events:\n      - http:\n          path: admin/update_user/{id}\n          method: put\n          cors: true\n          authorizer: authorize\n    package:\n      include:\n        - user-update/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n\n  login:\n    handler: login/index\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n    package:\n      include:\n        - login/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n  \n  register:\n    handler: register/index\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n    package:\n      include:\n        - register/**\n        - package.json\n        - package-lock.json\n    environment:\n      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}\n      JWT_SECRET: ${env:JWT_SECRET}\n      SALT_ROUNDS: 10\n  \n  # update-profile:\n  #   handler: update-profile/index\n  #   events:\n  #     - http:\n  #         path: user/{id}\n  #         method: put\n  #         cors: true\n\n  # password-reset:\n  #   handler: password-reset/index\n  #   events:\n  #     - http:\n  #         path: password_reset\n  #         method: post\n  #         cors: true\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        TableName: ${self:custom.dynamoDBTable}\n    UserUploads:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - \"Authorization\"\n              AllowedMethods:\n                - GET\n              AllowedOrigins:\n                - \"*\"\n            - AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    # requestQueue:\n    #   Type: AWS::SQS::Queue\n    #   Properties:\n    #     QueueName: requestQueue"]},{"id":215559356,"files":["service: wozitech-lorien-tech-test\n\ncustom:\n  environment: ${opt:stage, 'development'}\n  bucketName: \"${self:custom.environment}-thisbucket\"\n  region: ${opt:region, 'eu-west-1'}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: serverless-admin\n  region: ${self:custom.region}\n  endpointType: REGIONAL\n  stage: ${opt:stage, 'development'}\n  timeout: 5\n  memorySize: 128\n  environment:\n    LOG_LEVEL: 1      # 0-disabled; 1-errors, 2-warnings, 3-info, 4-debug, 5-trace\n  #role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_lambda_basic_role\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n  exclude:\n    - '**/*'\n    - .git/**\n\nfunctions:\n  organisation:\n    handler: lorientechtest.handler\n    environment:\n      MONGODB_URI: ${env:MONGODB_URI}\n    #role: arn:aws:iam::#{AWS::AccountId}:role/WOZiTech_eu_west_1_tfl_lambda_role    # note, the name of the role includes the region, but with underscores\n    events:\n      - http: POST organisation\n      - http:\n          path: organisation/{name}\n          method: get\n          request:\n            parameters:\n              path:\n                name: true\n      - http:\n          path: organisation/{name}\n          method: put\n          request:\n            parameters:\n              path:\n                name: true\n      - http:\n          path: organisation/{name}\n          method: delete\n          request:\n            parameters:\n              path:\n                name: true\n    tags:\n      company: \"WOZiTech\"\n    package:\n      include:\n        - lorientechtest.js\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies"]},{"id":109388002,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n\nservice: kilometrikisa-proxy\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including modules\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 7\n  stage: prod\n  region: eu-west-1\n\nfunctions:\n  kilometrikisa-handler:\n    handler: handler.kilometrikisa\n    events:\n      - http:\n          path: login\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n      - http:\n          path: contests\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n      - http:\n          path: results\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n                contestId: true\n                year: true\n      - http:\n          path: team\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                password: true\n                teamUrl: true\n      - http:\n          path: updateLog\n          method: post\n          request:\n            parameters:\n              querystrings:\n                contestId: true\n                kmDate: true\n                kmAmount: true\n"]},{"id":227560459,"files":["# NOTE: update this with your service name\nservice: attendance-app-2-api\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-attendance\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: prod\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to .env and uncomment\n  # the following line. Also, make sure to not\n  # commit your .env.\n  #\n  #environment:\n  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}\n\n  # These environment variables are made available to our functions\n  # under process.env.\n\n  environment:\n    tableName: ${self:custom.tableName}\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [AttendanceTable, Arn]\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: attendance\n          method: post\n          cors: true\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: attendance\n          method: get\n          cors: true\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: attendance/{id}\n          method: get\n          cors: true\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: attendance/{id}\n          method: delete\n          cors: true\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n  - ${file(resources/s3-bucket.yml)}\n"]},{"id":85780833,"files":["service: conditions-perfect\nprovider:\n  name: aws\n  runtime: nodejs4.3\nfunctions:\n  checkConditions:\n    handler: handler.checkConditions\n    events:\n      # 5pm est everyday (9pm utc)\n      - schedule: cron(0 21 * * ? *)\n      - http: GET check\n"]},{"id":103678143,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: secslice-backend # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \"=1.2.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\nstage: \"dev\"\nregion: \"us-east-1\"\n\ncustom:\n  currentStage: test\n  currentRegion: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\nwriteEnvVars:\n    SERVERLESS_STAGE: ${self:custom.currentStage}\n    SERVERLESS_REGION: ${self:custom.currentRegion}\n    SERVERLESS_PROJECT: \"Secure Slice\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  createClass:\n    handler: restApi/class/createClass/handler.handler\n    name: ${self:custom.currentStage}-classService-createClass\n    description: SecSlice Create Class Service\n    endpoints:\n      - http:\n          path: class/create\n          method: POST\n          type: AWS\n          authorizationType: none\n          authorizerFunction: false\n          apiKeyRequired: false\n          requestTemplates: ${self:custom.apiRequestTemplate}\n          responses: ${self:custom.responseTemplate}\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: class/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getClassesBySchool:\n    handler: restApi/class/getClassesBySchool/handler.handler\n    name: ${self:custom.currentStage}-classService-getClassesBySchool\n    description: SecSlice Get Class Service\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: class/schoolcode\n          method: get\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createInstitution:\n    handler: restApi/institution/createInstitution/handler.handler\n    name: ${self:custom.currentStage}-institutionService-createInstitution\n    description: API to create a new institution\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getInstitution:\n    handler: restApi/institution/getInstitution/handler.handler\n    name: ${self:custom.currentStage}-institutionService-getInstitution\n    description: API to get an institution By shortcode\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/shortcode\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createSchool:\n    handler: restApi/school/createSchool/handler.handler\n    name: ${self:custom.currentStage}-schoolService-createSchool\n    description: API to create a new school\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: school/create\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  getSchoolsByInstitution:\n    handler: restApi/school/getSchoolsByInstitution/handler.handler\n    name: ${self:custom.currentStage}-schoolService-getSchoolsByInstitution\n    description: API to get schools By institution shortcode\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: institution/schools\n          method: get\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createTables:\n    handler: restApi/superadmin/createtables/handler.handler\n    name: ${self:custom.currentStage}-superAdminService-createTables\n    description: Tables Create API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: superadmin/createtables\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  promoteToSuperAdmin:\n    handler: restApi/superadmin/promote/handler.handler\n    name: ${self:custom.currentStage}-superAdminService-promote\n    description: User Promote to superadmin API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: superadmin/promote\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  createUser:\n    handler: restApi/users/create/handler.handler\n    name: ${self:custom.currentStage}-userService-create\n    description: User Create API\n    events:\n      - http:\n          integration: ${self:custom.integration}\n          path: users/create\n          method: put\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n  token:\n    handler: restApi/users/token/handler.handler\n    name: ${self:custom.currentStage}-userService-token\n    description: Get Access token request\n    events:\n      - http:\n          # integration: ${self:custom.integration}\n          path: users/token\n          method: post\n          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580\n          cors: ${self:custom.cors}\n          requestTemplates: \"$${apiRequestTemplate}\"\n          responses: \"$${responseTemplate}\"\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-write-env-vars\n  # - serverless-optimizer-plugin\n  # - serverless-lambda-prune-plugin\n  # - serverless-cors-plugin\n\n# resources: ${file(./components/resources.yml)}\n\n"]},{"id":147110620,"files":["service: aws-nodejs # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  region: us-east-1\n  \n\n# you can add packaging information here\n#package:\ninclude:\n  - node_modules\nexclude:\n  - package-lock.json\n\nfunctions:\n  query:\n    handler: handler.exchangeData\n    environment: ${file(./env.yml)}\n    events:\n      - http:\n          path: webhook\n          method: post\nplugins:\n    - serverless-offline"]},{"id":162208337,"files":["service: ec2-instances-switcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeInstances\"\n        - \"ec2:StartInstances\"\n        - \"ec2:StopInstances\"\n      Resource: \"*\"\n  environment:\n    tag_name: ec2-instances-switcher-isenabled\n    public_holiday_api: ${opt:public-holiday-api}\n\npackage:\n  exclude:\n    - README.md\n    - template.yaml\n\nlayers:\n  ec2InstancesSwitcher:\n    path: layer\n\nfunctions:\n  start:\n    handler: instances/start.handler\n    layers:\n      - {Ref: Ec2InstancesSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 23 ? * SUN-THU *)\n  stop:\n    handler: instances/stop.handler\n    layers:\n      - {Ref: Ec2InstancesSwitcherLambdaLayer}\n    events:\n      - schedule: cron(0 12 ? * MON-FRI *)\n"]},{"id":195612229,"files":["service: futsaltokyo-agent\napp: futsaltokyo-agent\ntenant: kelvintaywl\n\nplugins:\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  stage: dev\n  region: ap-northeast-1\n\n  memorySize: 512\n  timeout: 30\n  cfLogs: true\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  auth:\n    handler: auth.authorize\n    cors: true\n    environment: ${file(env-http-handlers.yml)}\n  createBonfimFixtureById:\n    handler: http.createBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim\n          method: post\n          authorizer: auth\n  showBonfimFixtureById:\n    handler: http.showBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim/{id}\n          method: get\n          authorizer: auth\n          request:\n            parameters:\n              paths:\n                id: true\n  deleteBonfimFixtureById:\n    handler: http.deleteBonfimFixtureById\n    cors: true\n    events:\n      - http:\n          path: bonfim/{id}\n          method: delete\n          authorizer: auth\n          request:\n            parameters:\n              paths:\n                id: true\n\npackage:\n  exclude:\n    - '!node_modules/**'\n    - .DS_Store\n  include:\n    - package.json\n    - handler.js\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":200891225,"files":["service: lambda-lighthouse-metrics\n\nframeworkVersion: \"=1.49.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:GetRecords\n        - dynamodb:DescribeStream\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:*'\n    - Effect: Allow\n      Action:\n        - SNS:Subscribe\n        - SNS:Publish\n      Resource: 'arn:aws:sns:${self:provider.region}:*:*'\n    - Effect: Allow\n      Action:\n        - 's3:List*'\n        - 's3:Get*'\n        - 's3:Put*'\n      Resource:\n        'Fn::Join':\n          - ''\n          - - 'arn:aws:s3:::'\n            - Ref: ServerlessDeploymentBucket\n\n  environment:\n    BUCKET:\n      Ref: ServerlessDeploymentBucket\n    PAGES_TABLE_NAME: '${self:service.name}-${self:provider.stage}-pages'\n    JOBS_TABLE_NAME:  '${self:service.name}-${self:provider.stage}-jobs'\n    RUNS_TABLE_NAME:  '${self:service.name}-${self:provider.stage}-runs'\n    SNS_TOPIC_ARN:\n      Ref: snsPagesToTestTopic\n    DLQ_ARN:\n      Ref: snsPagesToTestDlqTopic\n\npackage:\n  individualy: true\n\nfunctions:\n  initialize:\n    handler: handler.initialize\n    memorySize: 2048\n    timeout: 30\n    reservedConcurrency: 3\n  postProcessor:\n    handler: handler.postProcessor\n    memorySize: 128\n    reservedConcurrency: 10\n  worker:\n    handler: handler.worker\n    memorySize: 2048\n    timeout: 30\n    reservedConcurrency: 3\n    onError:\n      Ref: snsPagesToTestDlqTopic\n\nresources:\n  Resources:\n    pagesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-pages'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: pageId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: pageId\n            KeyType: HASH\n    jobsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-jobs'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: jobId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: jobId\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    runsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: '${self:service.name}-${self:provider.stage}-runs'\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: pageId\n            AttributeType: S\n          - AttributeName: jobId\n            AttributeType: S\n          - AttributeName: runId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: runId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: pageIdIndex\n            KeySchema:\n              - AttributeName: pageId\n                KeyType: HASH\n            Projection:\n              ProjectionType: KEYS_ONLY\n          - IndexName: jobIdIndex\n            KeySchema:\n              - AttributeName: jobId\n                KeyType: HASH\n            Projection:\n              ProjectionType: KEYS_ONLY\n    snsPagesToTestTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: '${self:service.name}-${self:provider.stage}-pagesToTest'\n    snsPagesToTestTopicSubs:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn:\n          Ref: snsPagesToTestTopic\n        Endpoint:\n          'Fn::GetAtt': [WorkerLambdaFunction, Arn]\n        Protocol: lambda\n    snsPagesToTestDlqTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: '${self:service.name}-${self:provider.stage}-pagesToTestDlq'\n    snsPagesToTestDlqTopicSubs:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn:\n          Ref: snsPagesToTestDlqTopic\n        Endpoint:\n          'Fn::GetAtt': [WorkerLambdaFunction, Arn]\n        Protocol: lambda\n    snsPagesToTestTopicLambdaPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Ref: WorkerLambdaFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Ref: snsPagesToTestTopic\n    snsPagesToTestTopicDlqLambdaPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Ref: WorkerLambdaFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Ref: snsPagesToTestDlqTopic\n    postProcessorLambdaEventSouceMapping:\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        EventSourceArn:\n          'Fn::GetAtt': [jobsTable, StreamArn]\n        FunctionName:\n          Ref: PostProcessorLambdaFunction\n        BatchSize: 1\n        StartingPosition: LATEST\n"]},{"id":184788195,"files":["service: public-holiday-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - !Ref CsvBucketName\n            - \"/*\"\n  environment:\n    holiday_csv_url: 'https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv'\n    csv_bucket_name: !Ref CsvBucketName\n    csv_bucket_expiration_in_days: ${opt:bucket-expiration-in-days, '1'}\n    TZ: 'Asia/Tokyo'\n\npackage:\n  exclude:\n    - README.md\n\nlayers:\n  publicHolidayApi:\n    path: layer\n\nfunctions:\n  search:\n    handler: handler.search\n    layers:\n      - {Ref: PublicHolidayApiLambdaLayer}\n    events:\n      - http:\n          path: holiday\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"date\" : \"\" }'\n      - http:\n          path: holiday/{date}\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"date\" : \"$input.params(''date'')\" }'\nresources:\n  Resources:\n    CsvBucketName:\n      Type: AWS::S3::Bucket\n      Properties:\n        LifecycleConfiguration:\n          Rules:\n          - Status: Enabled\n            ExpirationInDays: ${self:provider.environment.csv_bucket_expiration_in_days}\n            NoncurrentVersionExpirationInDays: 1\n            AbortIncompleteMultipartUpload:\n              DaysAfterInitiation: 1\n"]},{"id":105954221,"files":["service: titan-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  profile: serverless\n  environment:\n      DDB_PLAYERS_TABLE: TitanPlayers-${opt:stage}\n      DDB_MATCHES_TABLE: TitanMatches-${opt:stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  gql:\n    handler: gql/handler.handler\n    memorySize: 128\n    events:\n      - http:\n          path: gql\n          method: post\n          cors: true\n          integration: LAMBDA\n  match-create:\n    handler: match/create.handler\n    memorySize: 128\n    events:\n      - http:\n          path: api/match/create\n          method: post\n          cors: true\n  match-list:\n      handler: match/list.handler\n      memorySize: 128\n      events:\n        - http:\n            path: api/match/list\n            method: get\n            cors: true\n  player-list:\n    handler: player/list.handler\n    memorySize: 128\n    events:\n      - http:\n          path: api/player/list\n          method: get\n          cors: true\n  player-create:\n    handler: player/create.handler\n    memorySize: 128\n\nresources:\n  Resources:\n    matchesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: TitanMatches-${opt:stage}\n        AttributeDefinitions:\n          - AttributeName: partitionKey\n            AttributeType: N\n          - AttributeName: matchId\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: matchId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: partitionKeyIndex\n            KeySchema:\n              - AttributeName: partitionKey\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n    playersTable:\n          Type: AWS::DynamoDB::Table\n          Properties:\n            TableName: TitanPlayers-${opt:stage}\n            AttributeDefinitions:\n              - AttributeName: partitionKey\n                AttributeType: N\n              - AttributeName: playerId\n                AttributeType: S\n              - AttributeName: playerRank\n                AttributeType: N\n            KeySchema:\n              - AttributeName: playerId\n                KeyType: HASH\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n            GlobalSecondaryIndexes:\n              - IndexName: partitionKeyIndex\n                KeySchema:\n                  - AttributeName: partitionKey\n                    KeyType: HASH\n                  - AttributeName: playerRank\n                    KeyType: RANGE\n                Projection:\n                  ProjectionType: ALL\n                ProvisionedThroughput:\n                  ReadCapacityUnits: 1\n                  WriteCapacityUnits: 1"]},{"id":98763152,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: msgblast-api\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  ping:\n    handler: handler.ping\n    # The `events` block defines how to trigger the handler.ping code\n    events:\n       - http:\n          path: /\n          method: get\n  send:\n    handler: handler.send\n    events:\n      - http:\n         path: send\n         method: post\n"]},{"id":102623055,"files":["service: graphql-vault\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n  output:\n    file: .serverless/stack-output-${self:provider.stage}.json\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      host: dynamodblocal-1\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n  - serverless-stack-output\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    environment:\n      DB_TABLE: ${self:custom.dbTable}\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Outputs:\n    DbTableName:\n      Description: \"Db Table Name\"\n      Value:\n        Ref: DbTable\n  Resources:\n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n"]},{"id":58809566,"files":["service: organizations\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  environment: # Service wide environment variables\n    MONGODB_CONNECTION_STRING: ${env:bizhub_api_mongodb_connectionstring_dev}\n\nfunctions:\n  authorizerFn:\n    handler: src/handlers/authorizer.authorize\n    environment:\n      SENTRY_DSN: ${env:bizhub_api_sentry_dsn_dev}\n  getOrgs:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: organizations\n          method: get\n          cors: true\n  \n  getOrgById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: organizations/{id}\n          method: get\n          cors: true\n\n  createOrg:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: organizations\n          method: post\n          authorizer: authorizerFn\n          cors: true\n\n  deleteOrg:\n    handler: src/handlers/handler-factory.remove\n    events:\n      - http:\n          path: organizations/{id}\n          method: delete\n          authorizer: authorizerFn\n          cors: true\n\n  createOffice:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: offices\n          method: post\n          authorizer: authorizerFn\n          cors: true\n\n  getOffices:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: offices\n          method: get\n          cors: true\n  \n  getOfficeById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: offices/{id}\n          method: get\n          cors: true\n\n  createTimeEntry:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: time-entries\n          method: post\n          authorizer: authorizerFn\n          cors: true\n  \n  getTimeEntries:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: time-entries\n          method: get\n          authorizer: authorizerFn\n          cors: true\n\n  createInvoice:\n    handler: src/handlers/handler-factory.create\n    events:\n      - http:\n          path: invoices\n          method: post\n          authorizer: authorizerFn\n          cors: true\n  getInvoices:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: invoices\n          method: get\n          authorizer: authorizerFn\n          cors: true\n  getInvoiceById:\n    handler: src/handlers/handler-factory.getById\n    events:\n      - http:\n          path: invoices/{id}\n          method: get\n          cors: true\n  getMyOrgs:\n    handler: src/handlers/handler-factory.get\n    events:\n      - http:\n          path: me/organizations\n          method: get\n          authorizer: authorizerFn\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":98523456,"files":["service: serverless-url-enrichment-aws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nplugins:\n  - serverless-mocha-plugin\n\nfunctions:\n  webhook:\n    handler: src/handlers.webhook\n    name: ${self:provider.stage}-webhook-url-enrichment\n    description: 'Webhook capture endpoint'\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  verify:\n    handler: src/handlers.verify\n    name: ${self:provider.stage}-verify-url-enrichment\n    description: 'Webhook verification endpoint'\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n","service: serverless-url-enrichment-azure\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n  - serverless-mocha-plugin\n\npackage:\n  exclude:\n    - .gitignore\n    - package.json\n    - README.md\n    - .git/**\n\nfunctions:\n  webhook:\n    handler: dist/bundle.webhook\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - POST\n          route: webhook\n          authLevel: anonymous\n  verify:\n    handler: dist/bundle.verify\n    description: 'Webhook verification endpoint'\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          route: webhook\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          type: http\n          direction: out\n          name: res\n"]},{"id":113862973,"files":["\n# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: octotfs-webhooks\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n      Resource: \n        Fn::Join:\n          - \":\"\n          - - \"arn:aws:ssm::\"\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - \"${self:provider.stage}/octotfs-webhooks/*\" \n  environment:\n    sqlServer: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlServer~true}\n    sqlUser: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlUser~true}\n    sqlPassword: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlPassword~true}\n    sqlDatabase: ${ssm:/${self:provider.stage}/octotfs-webhooks/sqlDatabase~true}\n    slackWebhookUrl: ${ssm:/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-devops~true}\n    slackMachineEventWebhookUrl: ${ssm:/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-machineEvents~true}\n    \n\n# package:\n#   include:\n#     - handler.js\n#     - services/**\n\nfunctions:\n  workItemUpdates:\n    handler: handler.workItemUpdate\n    events:\n      - http: \n          path: work-items/update\n          method: post\n  machineEvents:\n    handler: handler.sendMachineEventAlert\n    events:\n      - http: \n          path: machine-events\n          method: post\n\n## Can use this stack once CF supports SecureString types for SSM\n# resources:\n#   Resources:\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlServer\"\n#         Type: SecureString\n#         Value: ${opt:sqlServer}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlUser\"\n#         Type: SecureString\n#         Value: ${opt:sqlUser}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlPassword\"\n#         Type: SecureString\n#         Value: ${opt:sqlPassword}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/sqlDatabase\"\n#         Type: SecureString\n#         Value: ${opt:sqlDatabase}\n#     NewResource:\n#       Type: \"AWS::SSM::Parameter\"\n#       Properties: \n#         Name: \"/${self:provider.stage}/octotfs-webhooks/slackWebhookUrl-devops\"\n#         Type: SecureString\n#         Value: ${opt:slackWebhookUrl}"]},{"id":111954089,"files":["service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":133272127,"files":["service: ers-bot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 768\n  environment:\n    BABEL_CACHE_PATH: /tmp/babelregister\n    APP_ENV: AWS\n    SCRAPE_WAIT: 1000\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - node_modules/puppeteer/.local-chromium/** # exclude puppeteer chrome if exists\n  \nplugins:\n  - serverless-plugin-chrome\n\nfunctions:\n  api:\n    handler: build/aws.handler\n    timeout: 30\n"]},{"id":150877345,"files":["service: serverless-graphql-api-demo\n\nframeworkVersion: \">=1.26.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    includeModules: true\n\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  graphiql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: get\n        cors: true"]},{"id":155447529,"files":["service:\n  name: aws-nodejs-ecma-script\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  vrt_api_mapper:\n    handler: mapper.handler\n    events:\n      - http:\n          method: get\n          cors: true\n          path: '/{channelCode}'\n          request:\n            parameters:\n              paths:\n                channelCode: true\n","service:\n  name: discogs-random-record\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DISCOGS_API_TOKEN: ${file(./env.json):DISCOGS_API_TOKEN}\n\nfunctions:\n  getRandomRecord:\n    handler: handler.getRandomRecord\n    events:\n      - http:\n          method: get\n          path: /\n","service:\n  name: ivago-waste-collection\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n\nfunctions:\n  getWasteCollection:\n    handler: index.handler\n    events:\n      - http:\n          method: get\n          path: /{calendar}\n          request:\n            parameters:\n              paths:\n                calendar: true\n"]},{"id":121803555,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n       - http:\n           path: /\n           method: get\n\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":146326471,"files":["# NOTE: update this with your service name\nservice: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n\niamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:584247686798:*:*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam"]},{"id":117772771,"files":["service: service\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: sa-east-1\n  profile: yourAwsProfile # Use an already configured AWS profile in your terminal or comment this line and passed as $ export AWS_PROFILE=youAwsProfile\n  timeout: 10\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\ncustom:\n  webpackIncludeModules: true\n\nfunctions:\n  initFill:\n    handler: initFill.initFill\n    package:\n      invidually: true\n\n  listAll:\n    handler: listAll.listAll\n    package:\n      invidually: true\n\n  getById:\n    handler: getById.getById\n    package:\n      invidually: true\n\n  addOne:\n    handler: addOne.addOne\n    package:\n      invidually: true\n\n  updateOne:\n    handler: updateOne.updateOne\n    package:\n      invidually: true\n\n  deleteOne:\n    handler: deleteOne.deleteOne\n    package:\n      invidually: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":118494264,"files":["service: voting\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  authTest:\n    handler: handler.authTest\n    events:\n      - http:\n          path: authTest/{id}\n          method: get\n          authorizer: auth\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n          authorizer: auth\n  auth:\n    handler: handler.auth\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n"]},{"id":181052837,"files":["service: OrderService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  createOrder:\n    name: createOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/createOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to createOrder\n    events:\n      - http:\n          path: /orders\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  confirmOrder:\n    name: confirmOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/confirmOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  cancelOrder:\n    name: cancelOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/cancelOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrder:\n    name: getOrder-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrder\n    events:\n      - http:\n          path: /orders/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrdersList:\n    name: getOrdersList-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrdersList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrdersList latest 20 only\n    events:\n      - http:\n          path: /orders\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getOrderPrice:\n    name: getOrderPrice-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getOrderPrice.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getOrderPrice\n  checkProductPurchase:\n    name: checkProductPurchase-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/checkProductPurchase.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductPurchase\n    events:\n      - http:\n          path: /orders/checkProductPurchase/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getDeliveryOptions:\n    name: getDeliveryOptions-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/getDeliveryOptions.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getDeliveryOptions\n    events:\n      - http:\n          path: /orders/getDeliveryOptions\n          method: get\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  checkProductPurchaseHeadless:\n    name: checkProductPurchaseHeadless-${self:provider.stage}\n    role: OrdersFunctionsLambdaRole\n    handler: src/orders/checkProductPurchase.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductPurchaseHeadless\n\n\nresources:\n  Resources:\n    OrdersFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":194028599,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: myweb-api # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: ${env:STAGE}\n  region: ${env:AWS_REGION} us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\nfunctions:\n  api:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":164398248,"files":["---\nservice: gateway # NOTE: Don't put the word \"google\" in here\n\nframeworkVersion: \"=1.35.1\"\n\nprovider:\n  name: google\n  runtime: nodejs8\n  project: addianto\n  credentials: ../keyfile.json\n  memorySize: 128\n  timeout: 30s\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - ./*.test.js\n    - .gitignore\n    - .git/**\n\nfunctions:\n  postmark:\n    handler: postmark\n    events:\n      - http: path\n  storePostmark:\n    handler: storePostmark\n    events:\n      - event:\n          eventType: providers/cloud.pubsub/eventTypes/topic.publish\n          resource: projects/addianto/topics/postmark\n          # resource: projects/*/topics/postmark (FAULT: RESOURCE_ERROR)\n","---\nservice: pushbullet # NOTE: Don't put the word \"google\" in here\n\nframeworkVersion: \"=1.35.1\"\n\nprovider:\n  name: google\n  runtime: nodejs8\n  project: addianto\n  credentials: ../keyfile.json\n  memorySize: 128\n  timeout: 30s\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - ./*.test.js\n\nfunctions:\n  pushPostmark:\n    handler: pushPostmark\n    environment:\n      PUSHBULLET_API_TOKEN: ${file(../.env.yml):PUSHBULLET_API_TOKEN, \"\"}\n      PUSHBULLET_EMAIL: ${file(../.env.yml):PUSHBULLET_EMAIL, \"\"}\n    events:\n      - event:\n          eventType: providers/cloud.firestore/eventTypes/document.create\n          resource: projects/addianto/databases/(default)/documents/postmark/{email}\n"]},{"id":163293962,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: episode-updater # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\nregion: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\niamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource: \"arn:aws:dynamodb:us-east-1:370286705794:table/playLists\"\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n  getPlaylists:\n    handler: main.getPlaylists\n  channelHanler:\n    handler: channels/main.uname2ChannelId\n    events:\n      - http: GET /api/channelInfo/{channel?}\n  getPlayListVideos:\n    handler: main.getVideosFromPlayList\n    events:\n      - http: GET /api/playListVideos/{playListId?}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline"]},{"id":85698420,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":90902401,"files":["service: zaymus-sk-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 120\n  environment:\n    TABLE_ALBUMS: ${env:TABLE_ALBUMS}\n    TABLE_PHOTOS: ${env:TABLE_PHOTOS}\n    PHOTO_URL: https://s3.${self:provider.region}.amazonaws.com/${self:custom.s3Bucket}/\n    PHOTO_MAX_DIMEN: 1024\n    THUMB_WIDTH: 240\n    THUMB_HEIGHT: 160\n  iamRoleStatements:\n    - Effect: Allow\n      Action: dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTableAlbums]]\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTablePhotos]]\n    - Effect: Allow\n      Action:\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource:\n        Fn::GetAtt: [DynamoDBTablePhotos, StreamArn]\n\ncustom:\n  s3Bucket: ${self:service}-${self:provider.stage}-photo-albums\n\nfunctions:\n  api:\n    handler: functions/api/api.handler\n    events:\n      - http:\n          path: albums\n          method: get\n          cors: true\n      - http:\n          path: photos/{albumId}\n          method: get\n          cors: true\n  insert:\n    handler: functions/db-insert/db-insert.handler\n    events:\n      - s3:\n          bucket: ${self:custom.s3Bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: albums/\n  delete:\n    handler: functions/db-delete/db-delete.handler\n    events:\n      - s3:\n          bucket: ${self:custom.s3Bucket}\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: albums/\n  trigger:\n    handler: functions/db-trigger/db-trigger.handler\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    \n    # IAM Policies for IamRoleLambdaExecution\n    # Full access to photo albums\n    IAMPolicyPhotoAlbums:\n      DependsOn: IamRoleLambdaExecution\n      Type: AWS::IAM::Policy\n      Properties: \n        Roles:\n          - Ref: IamRoleLambdaExecution\n        PolicyName: ${self:custom.s3Bucket}-full-access\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action: s3:*\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n\n    # S3 Bucket Policy - web access\n    S3BucketPolicyPhotoAlbums:\n      DependsOn: S3BucketZaymusskbackend${self:provider.stage}photoalbums\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.s3Bucket}\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action: s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n              Principal: '*'\n    \n    # Table Albums\n    DynamoDBTableAlbums:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:TABLE_ALBUMS}\n        AttributeDefinitions:\n          - AttributeName: albumId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: albumId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    # Table Photos\n    DynamoDBTablePhotos:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:TABLE_PHOTOS}\n        AttributeDefinitions:\n          - AttributeName: albumId\n            AttributeType: S       \n          - AttributeName: photoId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: albumId\n            KeyType: HASH\n          - AttributeName: photoId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n    # Table Photos Stream Event          \n    EventTablePhotos:\n      DependsOn: DynamoDBTablePhotos\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 25\n        EventSourceArn:\n          Fn::GetAtt: [DynamoDBTablePhotos, StreamArn]\n        FunctionName:\n          Fn::GetAtt: [TriggerLambdaFunction, Arn]\n        StartingPosition: TRIM_HORIZON\n"]},{"id":116723857,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\npackage:\n  individually: true"]},{"id":145223486,"files":["service: mailgun\napp: mailgun\ntenant: awitherow\n\nfunctions:\n  mail:\n    handler: handler.mail\n    events:\n      - http:\n          method: post\n          path: static-site-mailer\n          cors: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n"]},{"id":144123928,"files":["service: media-scraper\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}\n    AWS_S3_REGION: ${env:AWS_S3_REGION}\n    AWS_S3_ACCESS_KEY_ID: ${env:AWS_S3_ACCESS_KEY_ID}\n    AWS_S3_SECRET_ACCESS_KEY: ${env:AWS_S3_SECRET_ACCESS_KEY}\n  memorySize: 256\n\nfunctions:\n  pull:\n    handler: src/handler.pull\n    timeout: 300\n    events:\n      - http:\n          path: /pull\n          method: post\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 3000\n    host: \"0.0.0.0\"\n\n  webpack:\n    webpackConfig: webpack.config.js\n"]},{"id":157026590,"files":["service: apollo-lambda\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-offline  \nfunctions:\n  graphql:\n    handler: src/graphql.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get        "]},{"id":134513264,"files":["service: example-api\n\ncustom:\n  tableName: 'example-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-west-2\n  profile: example-deploy\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"ExampleDynamoDBTable\", \"Arn\" ] }\n  environment:\n    EXAMPLE_TABLE: ${self:custom.tableName}\n    LOGGING_LEVEL: \"silly\"\n\nfunctions:\n  example:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    ExampleDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}\n"]},{"id":141674057,"files":["\nservice: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)\n  stage: dev # setting the env stage to dev, this will be visible in the routes\n  region: us-east-1\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes \n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} \n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n      - http:\n          path: notes \n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          path: notes/{id} \n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          path: notes/{id} \n          method: delete\n          cors: true\nplugins:\n- serverless-offline # adding the plugin to be able to run the offline emulation"]},{"id":181857154,"files":["service:\n  name: serverless-typescript-starter\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n"]},{"id":204779060,"files":["service: RatingService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  createRating:\n    name: createRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/createRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n      BACKEND_ENV: ${self:provider.stage}\n    tags:\n      purpose: lambda function to createRating\n    events:\n      - http:\n          path: /ratings\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  updateRating:\n    name: updateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/updateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to updateRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getRating:\n    name: getRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getAllCustomerRating:\n    name: getAllCustomerRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getAllCustomerRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getAllCustomerRating\n    events:\n      - http:\n          path: /ratings\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteRating:\n    name: deleteRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/deleteRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to deleteRating\n    events:\n      - http:\n          path: /ratings/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  helpfulRatingIncrement:\n    name: helpfulRatingIncrement-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/helpfulRatingIncrement.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to helpfulRatingIncrement\n    events:\n      - http:\n          path: /ratings/helpful/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deactivateRating:\n    name: deactivateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/deactivateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to deactivateRating\n    events:\n      - http:\n          path: /ratings/deactivate/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  activateRating:\n    name: activateRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/activateRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to activateRating\n  getProductFeedback:\n    name: getProductFeedback-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductFeedback.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductFeedback\n    events:\n      - http:\n          path: /ratings/product/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getProductRating:\n    name: getProductRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductRating\n    events:\n      - http:\n          path: /ratings/product/summary/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  checkProductReview:\n    name: checkProductReview-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/checkProductReview.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to checkProductReview\n    events:\n      - http:\n          path: /ratings/product/check/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getProductAvgRating:\n    name: getProductAvgRating-${self:provider.stage}\n    role: RatingsFunctionsLambdaRole\n    handler: src/ratings/getProductAvgRating.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getProductAvgRating\n\n\nresources:\n  Resources:\n    RatingsFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":200123814,"files":["service: serverless-slackbot\n\ncustom:\n  # debugging output\n  debug: '*'\n\n\n  services:\n    # The dynamodb table to store OAuth access data\n    table_name: slackbot-brain\n\n    # sns dispatch topic name\n    topic_name: dispatcher\n\n\n  nav:\n    # The path used to post Slack events to\n    event_path: callback\n\n    # The path used to install the Slack App\n    install_path: install\n\n    # The path to redirect to after an install\n    install_redirect: https://slack.com\n\n\n  slack:\n    # Verification token\n    verification_token: \"xxxxxxxxxxxxxxxxxxxxxxxx\"\n    \n    # Space delimited scopes\n    client_scopes: \"bot commands\"\n    \n    # Client ID - quotes required\n    client_id: \"xxxxxxxxxxxx.xxxxxxxxxxxx\"\n    \n    # Client Secret - quotes required\n    client_secret: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-agent\n  versionFunctions: false\n  iamRoleStatements:    \n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - sns:*\n        \nfunctions:\n  callbacks:\n    handler: src/index.handler\n    environment:\n      DEBUG: ${self:custom.debug}\n      TABLE_NAME: ${self:custom.services.table_name}\n      TOPIC_NAME: ${self:custom.services.topic_name}\n      CLIENT_ID: ${self:custom.slack.client_id}\n      CLIENT_SECRET: ${self:custom.slack.client_secret}\n      CLIENT_SCOPES: ${self:custom.slack.client_scopes}\n      INSTALL_REDIRECT: ${self:custom.nav.install_redirect}\n      VERIFICATION_TOKEN: ${self:custom.slack.verification_token}\n    events:\n      - sns: ${self:custom.services.topic_name}\n      - http:\n          path: ${self:custom.nav.event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      - http:\n          path: ${self:custom.nav.install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n\nresources:\n  Resources:\n    dynamodb:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: team_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: team_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.services.table_name}"]},{"id":160204914,"files":["service: serverless-qiita-advent-sample\n\ncustom:\n  defaultStage: dev\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n  environment: \n    SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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\n\npackage:\n  exclude:\n    - .git/**\n\nfunctions:\n  postSlack:\n    handler: handler.postSlack\n    events:\n      - http:\n          path: slack\n          method: post\n          cors: true\n"]},{"id":214755700,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rankly-lambda\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: prod\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  rank:\n    handler: handler.rank\n    events:\n       - http:\n          path: rank\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":220576347,"files":["service: projetovamosachina\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  credentials: ${file(./.env.yml):credentials}\n  deploymentBucket:\n    name: 'vamosaachina-backend'\n\ncustom:\n  writeEnvVars:\n    AWS_ACCESS_KEY_ID: ${file(./.env.yml):${opt:stage}.AWS_ACCESS_KEY_ID}\n    AWS_SECRET_ACCESS_KEY: ${file(./.env.yml):${opt:stage}.AWS_SECRET_ACCESS_KEY}\n    TOKEN: ${file(./.env.yml):${opt:stage}.TOKEN}\n    EMAIL: ${file(./.env.yml):${opt:stage}.EMAIL}\n    DATABASE: ${file(./.env.yml):${opt:stage}.DATABASE}\n    SANDBOX: ${file(./.env.yml):${opt:stage}.SANDBOX}\n    SANDBOX_EMAIL: ${file(./.env.yml):${opt:stage}.SANDBOX_EMAIL}\n    NOTIFICATIONEMAIL: ${file(./.env.yml):${opt:stage}.NOTIFICATIONEMAIL}\n    NOTIFICATION_URL: ${file(./.env.yml):${opt:stage}.NOTIFICATION_URL}\n    RSAKEY: ${file(./.env.yml):${opt:stage}.RSAKEY}\n    ORIGIN: ${file(./.env.yml):${opt:stage}.ORIGIN}\n  serverless-layers:\n    packageManager: yarn\n  sucrase:\n    sources:\n      - config.js\n      - index.js\n      - src/**/*.js\n\n    transforms:\n      - imports\n\nplugins:\n  - serverless-layers\n  - serverless-sucrase\n  - serverless-plugin-write-env-vars\n\nfunctions:\n  api:\n    handler: index.handler\n    events:\n      - http: ANY {proxy+}\n        cors: true\n"]},{"id":94394642,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-es6-webpack # NOTE: update this with your service name\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # Name of webpack configuration file\n    includeModules: true # Node modules configuration for packaging\n    packager: 'npm' # Packager that will be used to package your external modules\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 30 # The default is 6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":67886405,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\npackage:\n  include:\n    - node_modules/serverless-http\n\nfunctions:\n  hello:\n    handler: handler.hello\n  saySomething:\n    handler: handler.saySomething\n    package:\n      include:\n        - node_modules/**\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":107854598,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-template\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":121222339,"files":["service: \"${env:SERVICE_NAME}\"\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    forceExclude:\n      - aws-sdk\n      - serverless\n    packager: 'yarn'\n\nplugins:\n  - serverless-plugin-existing-s3\n  - serverless-webpack\n\nprovider:\n  name: aws\n  region: ${env:REGION}\n  stage: ${env:STAGE}\n  runtime: nodejs10.x\n  memorySize: 256\n  timeout: 30\n  versionFunctions: false\n  deploymentBucket:\n    name: \"${env:SERVICE_NAME}-${env:REGION}-deployment\"\n  environment:\n    DYNAMO_TABLE: ${env:DYNAMO_TABLE}\n    S3_BUCKET: ${env:S3_BUCKET}\n    EMAIL_DOMAIN: ${env:EMAIL_DOMAIN}\n  cfnRole: ${env:CLOUDFORMATION_ROLE_ARN}\n  role: ${env:LAMBDA_EXECUTION_ROLE_ARN}\n  stackTags:\n    KeboolaStack: ${env:KEBOOLA_STACK}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutBucketNotification\"\n       Resource:\n         - \"arn:aws:s3:::${env:S3_BUCKET}\"\n\npackage:\n  include:\n    - src/handler.js\n    - node_modules/**\n  exclude:\n    - .env\n    - docker-compose.yml\n    - Dockerfile\n    - package.json\n    - yarn.lock\n\nfunctions:\n\n  s3Handler:\n    handler: src/handler.handler\n    tags:\n      KeboolaStack: ${env:KEBOOLA_STACK}\n    events:\n      -\n        existingS3:\n          bucket: \"${env:S3_BUCKET}\"\n          events:\n            - \"s3:ObjectCreated:*\"\n          rules:\n            - prefix: _incoming/\n\n"]},{"id":123705437,"files":["service:\n  name: aws-nodejs-ecma-script\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n\nfunctions:\n  first:\n    handler: first.hello\n"]},{"id":141055144,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ${self:custom.skillNamespace}Skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\n# package:\n#   exclude:\n#     - node_modules/**\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${self:custom.secrets.REGION}\n  profile: ${self:custom.secrets.PROFILE}\n  stage: ${opt:stage, self:custom.defaultStage}\n  memory: 128\n  timeout: 10\n\nplugins:\n  - serverless-alexa-skills\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  serverless-offline:\n    port: 4000\n  skillNamespace: cryptoPrice\n  defaultStage: dev\n  profiles:\n    dev: ${self:custom.skillNamespace}-profile-dev\n    prod: ${self:custom.skillNamespace}-profile-prod\n  alexa:\n    vendorId: ${self:custom.secrets.VENDOR_ID}\n    clientId: ${self:custom.secrets.CLIENT_ID}\n    clientSecret: ${self:custom.secrets.CLIENT_SECRET}\n    skills:\n      - id:\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: cryptoPrice\n          apis:\n            custom: {}\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: \n                intents:\n                  - name: AMAZON.FallbackIntent\n                    samples: []\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n                  - name: GetCryptoPriceIntent\n                    slots:\n                    - name: cryptocurrency\n                      type: AMAZON.SearchQuery\n                    samples:\n                      - 'what is the price of {cryptocurrency}'\n                      - 'what is the price for {cryptocurrency}'\n                      - 'whats the price of {cryptocurrency}'\n                      - 'whats the price for {cryptocurrency}'\n                      - 'get me the latest price of {cryptocurrency}'\n                      - 'get me the price of {cryptocurrency}'\n                      - '{cryptocurrency} price'\n                      - 'tell me the latest price of {cryptocurrency}'\n                      - 'tell me the price of {cryptocurrency}'\n                      - 'current price of {cryptocurrency}'\n                  - name: EmptyCryptoPriceIntent\n                    samples:\n                      - 'what is the price of'\n                      - 'what is the price for'\n                      - 'whats the price of'\n                      - 'whats the price for'\n                      - 'get me the latest price of'\n                      - 'get me the price of'\n                      - 'price'\n                      - 'tell me the latest price of'\n                      - 'tell me the price of'\n                      - 'current price of'\n\nfunctions:\n  skill:\n    handler: app.handler\n    role:\n      'Fn::GetAtt': [ lambdaRole, Arn ]\n    events:\n      - alexaSkill:\n          appId: ${self:custom.secrets.APP_ID}\n          enabled: true\n\nresources:\n  Resources:\n    lambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole\n        Path: \"/\"\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:provider.stage}-lambdaPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'logs:CreateLogGroup'\n                    - 'logs:CreateLogStream'\n                    - 'logs:PutLogEvents'\n                  Resource: arn:aws:logs:${self:provider.region}:*:*\n"]},{"id":139065758,"files":["service: hashtagmania\n\ncustom:\n  snshashtagmaniabot: hashtagmaniabot\n  snsprocessfile: processfile\n  snsritekit: ritekit\n  configsavebucketname: savebucket\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n  timeout: 10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - \"logs:CreateLogGroup\"\n       - \"logs:CreateLogStream\"\n       - \"logs:PutLogEvents\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"lex:PostText\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n       - \"rekognition:DetectLabels\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"SNS:Publish\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\" ] ]  }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsritekit}\" ] ]  }\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}/*\"\n\nfunctions:\n  mainhandler:\n    handler: handler.mainhandler\n    memorySize: 128\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     SNS_TOPIC_FILE: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\" ] ]  }\n    events:\n     - http:\n        path: telegram/sendmessage\n        method: post\n        integration: lambda\n        request:\n          template:\n            application/json: '{\"body\": $input.json(\"$\")}'\n  processfile: # Lambada function for text extraction using AMAZON Rekognition Service\n    handler: handler-processfile.main\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     API_FILE_GATEWAY_URL: https://api.telegram.org/file/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SAVE_BUCKET: ${self:service}-${self:provider.stage}-${self:custom.configsavebucketname}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     SNS_RITEKIT: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snsritekit}\" ] ]  }\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsprocessfile}\n  ritekit: # Lambada function for tags information from RiteKite API\n    handler: handler-ritekit.main\n    environment:\n     BOT_NAME: HastagManiaBot\n     BOT_ALIAS: Beta\n     API_GATEWAY_URL: https://api.telegram.org/bot${file(./serverless.env.yml):dev.TELEGRAM_API}/\n     TELEGRAM_API: ${file(./serverless.env.yml):dev.TELEGRAM_API}\n     MY_AWS_REGION: ${self:provider.region}\n     SNS_TOPIC_LEX: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:service}-${self:provider.stage}-${self:custom.snshashtagmaniabot}\" ] ]  }\n     API_RITEKIT_URL: https://api.ritekit.com/v1/stats/\n     RITEKIT_API: ${file(./serverless.env.yml):dev.RITEKIT_API}\n    events:\n     - sns: ${self:service}-${self:provider.stage}-${self:custom.snsritekit}\n"]},{"id":152801288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: node-ipset-filter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http: 'ANY /api/ipcheck'\n      - http: 'ANY {proxy+}'\n\nplugins:\n  - serverless-offline\n"]},{"id":119688389,"files":["service: ${file(./config.json):service_id}\n\nprovider:\n  name: google\n  runtime: nodejs\n  memorySize: 256\n  timeout: 60s\n  project: ${file(./config.json):project_id}\n  credentials: ${file(./config.json):credentials_file}\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - secrets/**\n    - config.json.sample\n    - LICENSE\n    - README.md\n\nfunctions:\n  ping:\n    handler: ping\n    events:\n      - http: path\n\n  check:\n    handler: check\n    events:\n      - http: path\n\n  contact:\n    handler: contact\n    events:\n      - http: path\n\nframeworkVersion: \"=1.25.0\"\n"]},{"id":184317810,"files":["\nservice: hds-payerConfigVersion\n\nframeworkVersion: \">=1.41.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::560395879688:role/Hds-Lambda\n# cfnRole: arn:aws:iam::560395879688:role/Hds-Developer\n  stackName: hds-${self:provider.stage}-${self:service}\n  deploymentBucket: \n    name: hds-chc-dev-medicaltransactions\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      Usage: DevOps\n\n# you can overwrite defaults here\n  stage: ${opt:stage, 'dev'} \n  region: ${opt:region, 'us-east-1'}\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"hds-chc-dev-medicaltransactions\" ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"hds-chc-dev-medicaltransactions\"\n            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DEBUG: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  payerConfigVersionLambda:\n    handler: handler.processVersion\n    tags:\n      AppId: \"38\"\n      Billing: \"MedicalTransactions/HDS\"\n      Description: \"env=dev/appid=38/monitor=false/team=HDS\"\n      Zone: us-east-1\n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n       - stream:\n            batchSize: 1\n            arn:\n              arn:aws:dynamodb:us-east-1:560395879688:table/hds_payer/stream/2019-04-29T04:13:51.403\n#       - stream:\n#           type: dynamodb\n#           batchSize: 1\n#           startingPosition: LATEST\n#           arn:\n#             Fn::GetAtt: [ \"hds_payer\", StreamArn ]\n#      - cloudwatchLog: '/aws/lambda/hds-payerConfigVersion'\n#\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n"]},{"id":188546290,"files":["service: whitelodge\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  environment:\n    DATABASE_URL: mongodb://localhost:27017/whitelodge\n    JWT_SECRET: random\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":185439844,"files":["service: image-processor\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 1024\n  timeout: 30\n  stage: dev\n  region: us-east-1\n  role: BucketAccess\n  apiName: ${self:service}\n  endpointType: regional\n  environment:\n    BUCKET: ${self:service}-assets\n    SLS_DEBUG: \"*\"\n    RESIZE_LAMBDA: ${self:service}-resizeImage\n  deploymentBucket:\n    name: ${self:provider.environment.BUCKET}\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  \nfunctions:\n  getImage:\n    name: ${self:service}-getImage\n    handler: src/getImage.handler\n    events:\n      - http:\n          method: get\n          path: /{proxy+}\n    package:\n      include:\n        - src/getImage.js\n  resizeImage:\n    name: ${self:provider.environment.RESIZE_LAMBDA}\n    handler: src/resizeImage.handler\n    package:\n      include:\n        - src/resizeImage.js\n  uploadImage:\n    name: ${self:service}-uploadImage\n    handler: src/uploadImage.handler\n    events:\n      - http:\n          method: post\n          path: /upload\n    package:\n      include:\n        - src/uploadImage.js\n\nresources:\n  Resources:\n    BucketAccess:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:provider.environment.BUCKET}-S3-BUCKET-ACCESS-${self:service}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:provider.environment.BUCKET}-access-bucket-${self:service}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.BUCKET}/*\"]]\n                - Effect: Allow\n                  Action:\n                    - \"lambda:InvokeFunction\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:lambda:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":function:${self:provider.environment.RESIZE_LAMBDA}\"]]"]},{"id":190888704,"files":["service: lambda-apollo\n\n# enable required plugins, in order to make what we want\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless supports different cloud environments to run at.\n# we will be deploying and running this project at AWS cloud with Node v8.10 environment\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n\n# here we describe our lambda function\nfunctions:\n  hello: # function name\n    handler: src/handler.main # where the actual code is located\n    # to call our function from outside, we need to expose it to the outer world\n    # in order to do so, we create a REST endpoint\n    events:\n      - http:\n          path: graphql # path for the endpoint\n          method: any # HTTP method for the endpoint, could be only 'post' or 'get', etc\n          # cors: true\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js' # name of webpack configuration file\n    includeModules: true # add excluded modules to the bundle\n    packager: 'npm' # package manager we use\n"]},{"id":175929710,"files":["service: users-api\n\nframeworkVersion: \">=1.3.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n\n  environment:\n    USERS_TABLE: ${self:service}-${self:provider.stage}-${self:custom.usersTable}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}'\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USERS_TABLE}\npackage:\n  exclude:\n    - seed/**\n    - coverage/**\n    - .vscode/**\n    - .dockerignore\n    - .editorconfig\n    - .env\n    - .gitignore\n    - Dockerfile\n    - README.MD\n    - docker-compose.yaml\n    - '*.{ts,js,json,yml}'\n\n  include:\n    - src/**\n    - '!src/**/*.spec.js'\n    - '!src/**/*.serverless.yml'\n\nfunctions:\n  - '${file(src/handlers/users/users.serverless.yml)}'\n\nplugins:\n  - serverless-offline\n\ncustom:\n  usersTable: 'users'\n  serverless-offline:\n    host: 0.0.0.0\n","list:\n  handler: src/handlers/users/list.handler\n  events:\n    - http: get /users\nget:\n  handler: src/handlers/users/get.handler\n  events:\n    - http: get /user/{id}\nadd:\n  handler: src/handlers/users/add.handler\n  events:\n    - http: post /user\nupdate:\n  handler: src/handlers/users/update.handler\n  events:\n    - http: put /user/{id}\ndelete:\n  handler: src/handlers/users/delete.handler\n  events:\n    - http: delete /user/{id}\n"]},{"id":165039320,"files":["service: sls-ci\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\npackage:\n  include:\n    - handler.js\n    - LICENSE\n    - package.json\n    - \"package-lock.json\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n    - http:\n        path: hello\n        method: get\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  output:\n    file: ./serverless-info.json"]},{"id":166207446,"files":["# NOTE: update this with your service name\nservice: serverless-api-2\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\n#\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  \n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName: ${self:custom.tableName}\n    stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [NotesTable, Arn]\n\nfunctions:\n\n\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  billing:\n    handler: billing.main\n    events:\n      - http: \n          path: billing\n          method: post\n          cors: true\n          authorizer: aws_iam\n          \n\n\nresources:\n        - ${file(resources/dynamodb-table.yml)}\n        - ${file(resources/s3-bucket.yml)}\n        - ${file(resources/cognito-user-pool.yml)}\n        - ${file(resources/cognito-identity-pool.yml)}  \n\n"]},{"id":157160070,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: imageGetter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: ap-northeast-2\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  imgs:\n    handler: app/handler.imgs\n    events:\n      - http:\n          path: imgs/{encodedURI}\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":210901815,"files":["service: layer-moment\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: 'dev'\n  region: 'us-east-2'\n  deploymentBucket:\n    name: cf-templates-5rrcz2248gen-${self:provider.region}\n\nlayers:\n  Moment:\n    path: layers\n    description: \"moment dependencies\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /hello\n          method: any\n          private: false\n    environment:\n      NODE_PATH: \"./:/opt/node_modules\"\n    layers:\n      - {Ref: MomentLambdaLayer}\n"]},{"id":208608066,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: grappy-serverless\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.vpcResolver\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":110464373,"files":["service: disslack-disqus-comments-to-slack\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n      \nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    DISSLACK_SLACK_WEBHOOK: ${file(./disslack.env.yml):dev.DISSLACK_SLACK_WEBHOOK}\n    DISSLACK_DISQUS_FORUM: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_FORUM}\n    DISSLACK_DISQUS_ACCESS_TOKEN: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_ACCESS_TOKEN}\n    DISSLACK_DISQUS_API_SECRET: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_API_SECRET}\n    DISSLACK_DISQUS_API_KEY: ${file(./disslack.env.yml):dev.DISSLACK_DISQUS_API_KEY}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  check:\n    handler: disslack/check.check\n    events:\n      - http:\n          path: disslack\n          method: get\n          cors: true\n  cron:\n    handler: disslack/check.check\n    events:\n      # Invoke Lambda function every hour\n      - schedule: rate(1 hour)\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":119303243,"files":["service: status-checker\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false\n  memorySize: 128\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action: cloudwatch:PutMetricData\n      Resource: \"*\"\n    - Effect: Allow\n      Action: ssm:GetParameter\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:ssm\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - parameter/services/status-checker/endpoints_base64\n    - Effect: Allow\n      Action: kms:Decrypt\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:kms\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - alias/aws/ssm\nfunctions:\n  status_checker:\n    handler: handler.check\n    description: Check status of endpoints\n    environment:\n      ENDPOINTS_BASE64_SSM_KEY: /services/status-checker/endpoints_base64\n    events:\n      - schedule:\n          rate: cron(*/5 * * * ? *)\n          enabled: true\n"]},{"id":95795395,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: pinboard-descriptions\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless-admin\n\nfunctions:\n  updateLinkDescription:\n    handler: handler.endpoint\n    environment:\n      AUTH_CODE: ${env:PINBOARD_AUTH_CODE}\n    events:\n      - http:\n          path: update-link\n          method: post\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":204149638,"files":["service:\n  name: serverless-node-fargate-example\nplugins:\n  - serverless-fargate-plugin\nprovider:\n  name: aws\n  profile: \"default\"\n  stage: ${opt:stage,'dev'}\n  region: us-east-1\n  logRetentionInDays: 7\ncustom:\n  # Change these to your values!\n  ecrImagePath:\n    accountNumber: 123456789012\n    region: eu-north-1\n    imageName: node-basic-server\n    imageTag: latest\n  fargate:\n    vpc:\n      cidr: 10.0.0.0/16\n      subnets:\n        - 10.0.0.0/24\n        - 10.0.1.0/24\n    services:\n      - name: node-basic-webserver\n        cpu: 512\n        memory: 1024\n        port: 8080\n        healthCheckUri: /\n        healthCheckInterval: 6\n        image: \"${self:custom.ecrImagePath.accountNumber}.dkr.ecr.${self:custom.ecrImagePath.region}.amazonaws.com/${self:custom.ecrImagePath.imageName}:${self:custom.ecrImagePath.imageTag}\"\n        entryPoint:\n          - npm\n          - run\n          - start\n        environment:\n          PRODUCTION: true\n        protocols:\n          - protocol: HTTP\n"]},{"id":222768803,"files":["service: sqrl-min-auth\n\ncustom:\n  database: ${file(./secrets.json):database}\n  applicationName: ${self:service}-${opt:stage,'dev'}\n  connectionString:\n    Fn::Join:\n      - ''\n      - - 'postgres://${self:custom.database.username}:${self:custom.database.password}@'\n        - !GetAtt AppDB.Endpoint.Address\n        - ':'\n        - !GetAtt AppDB.Endpoint.Port\n        - '/${self:custom.database.database}'\n  apiBaseUrl:\n    Fn::Join:\n      - ''\n      - - 'https://'\n        - !Ref ApiGatewayRestApi\n        - '.execute-api.'\n        - !Ref AWS::Region\n        - '.'\n        - !Ref AWS::URLSuffix\n        - \"/${opt:stage,'dev'}\"\n\n  prune:\n    automatic: true\n    number: 5\n\nplugins:\n  - serverless-prune-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  logs:\n    frameworkLambda: true\n  environment:\n    NODE_ENV: production\n  tags:\n    Application: ${self:custom.applicationName}\n    Environment: ${opt:stage,'dev'}\n    Service: ${self:service}\n\nfunctions:\n  dbMigrate:\n    handler: src/handlers/db-migration.handler\n    description: Migrate the DB\n    memorySize: 128\n    timeout: 60\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n  nutSweeper:\n    handler: src/handlers/nut-sweeper.handler\n    description: Deletes old or used nuts\n    memorySize: 128\n    timeout: 60\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - schedule: rate(1 day)\n  sqrl:\n    handler: src/handlers/sqrl.handler\n    description: Minimal SQRL auth server\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: POST\n          path: /sqrl\n  authenticate:\n    handler: src/handlers/authenticate.handler\n    description: Redirect page from /sqrl\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: GET\n          path: /authenticate\n  login:\n    handler: src/handlers/login.handler\n    description: Minimal SQRL auth page\n    memorySize: 128\n    timeout: 30\n    environment:\n      POSTGRES_CONNECTION_STRING: ${self:custom.connectionString}\n      URL_BASE: ${self:custom.apiBaseUrl}\n    vpc:\n      securityGroupIds:\n        - !GetAtt AppDBVPC.DefaultSecurityGroup\n      subnetIds:\n        - !Ref AppDBSubnetA\n        - !Ref AppDBSubnetB\n    events:\n      - http:\n          method: GET\n          path: /sqrl\n  loggedin:\n    handler: src/handlers/loggedin.handler\n    description: Protected route\n    memorySize: 128\n    timeout: 30\n    environment:\n      URL_BASE: ${self:custom.apiBaseUrl}\n    events:\n      - http:\n          method: GET\n          path: /loggedin\n  logout:\n    handler: src/handlers/logout.handler\n    description: Logout\n    memorySize: 128\n    timeout: 30\n    environment:\n      URL_BASE: ${self:custom.apiBaseUrl}\n    events:\n      - http:\n          method: GET\n          path: /logout\n      - http:\n          method: POST\n          path: /logout\n\nresources:\n  Resources:\n    AppDBVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: 10.0.0.0/16\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n        InstanceTenancy: default\n    AppDBSubnetA:\n      Type: AWS::EC2::Subnet\n      DependsOn: AppDBVPC\n      Properties:\n        VpcId: !Ref AppDBVPC\n        AvailabilityZone: us-east-1a\n        CidrBlock: 10.0.0.0/24\n    AppDBSubnetB:\n      Type: AWS::EC2::Subnet\n      DependsOn: AppDBVPC\n      Properties:\n        VpcId: !Ref AppDBVPC\n        AvailabilityZone: us-east-1b\n        CidrBlock: 10.0.1.0/24\n    AppDBSubnetGroup:\n      Type: AWS::RDS::DBSubnetGroup\n      Properties:\n        DBSubnetGroupName: ${self:custom.applicationName}\n        DBSubnetGroupDescription: App DB group\n        SubnetIds:\n          - !Ref AppDBSubnetA\n          - !Ref AppDBSubnetB\n        Tags:\n          - Key: Application\n            Value: ${self:custom.applicationName}\n          - Key: Environment\n            Value: ${opt:stage,'dev'}\n          - Key: Service\n            Value: ${self:service}\n    AppDB:\n      Type: AWS::RDS::DBCluster\n      Properties:\n        DBClusterIdentifier: ${self:custom.applicationName}\n        DatabaseName: ${self:custom.database.database}\n        Engine: aurora-postgresql\n        EngineMode: serverless\n        MasterUsername: ${self:custom.database.username}\n        MasterUserPassword: ${self:custom.database.password}\n        DBSubnetGroupName: !Ref AppDBSubnetGroup\n        VpcSecurityGroupIds:\n          - !GetAtt AppDBVPC.DefaultSecurityGroup\n        ScalingConfiguration:\n          AutoPause: true\n        Tags:\n          - Key: Application\n            Value: ${self:custom.applicationName}\n          - Key: Environment\n            Value: ${opt:stage,'dev'}\n          - Key: Service\n            Value: ${self:service}\n\nOutputs:\n  DBHost:\n    Description: Connection host for the database\n    Value: !GetAtt AppDB.Endpoint.Address\n    Export:\n      Name: ${self:custom.applicationName}-DBHost\n  DBPort:\n    Description: Connection port for the database\n    Value: !GetAtt AppDB.Endpoint.Port\n    Export:\n      Name: ${self:custom.applicationName}-DBPort\n"]},{"id":226877877,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: yelp-scraper\nplugins:\n  - serverless-offline-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: ap-south-1\n  environment:\n    DYNAMODB_TABLE: yelp-rating\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:DeleteItem\"\n      Resource: \"arn:aws:dynamodb:ap-south-1:634148783116:table/yelp-rating\"\n\n# you can add packaging information here\npackage:\n  include:\n    - utils/**\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n  launch_scapers:\n    handler: handler.launch_scapers\n    events:\n      - schedule: rate(1 minute)\n      \n      \n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":49783372,"files":["service: frcTeamUpdateSlackNotifier\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Action:\n      - secretsmanager:*\n      - cloudformation:CreateChangeSet\n      - cloudformation:DescribeChangeSet\n      - cloudformation:DescribeStackResource\n      - cloudformation:DescribeStacks\n      - cloudformation:ExecuteChangeSet\n      - ec2:DescribeSecurityGroups\n      - ec2:DescribeSubnets\n      - ec2:DescribeVpcs\n      - kms:DescribeKey\n      - kms:ListAliases\n      - kms:ListKeys\n      - lambda:ListFunctions\n      - rds:DescribeDBClusters\n      - rds:DescribeDBInstances\n      - tag:GetResources\n      Effect: Allow\n      Resource: \"*\"\n    - Action:\n      - lambda:AddPermission\n      - lambda:CreateFunction\n      - lambda:GetFunction\n      - lambda:InvokeFunction\n      - lambda:UpdateFunctionConfiguration\n      Effect: Allow\n      Resource: arn:aws:lambda:*:*:function:SecretsManager*\n    - Action:\n      - serverlessrepo:CreateCloudFormationChangeSet\n      Effect: Allow\n      Resource: arn:aws:serverlessrepo:*:*:applications/SecretsManager*\n    - Action:\n      - s3:GetObject\n      Effect: Allow\n      Resource: arn:aws:s3:::awsserverlessrepo-changesets*\nfunctions:\n  checkForTeamUpdate:\n    handler: handler.checkForTeamUpdate\n    events:\n      - http:\n          path: /checkForTeamUpdate\n          method: get\n      - schedule: rate(15 minutes)\n"]},{"id":85357068,"files":["service: demo\n\ncustom:\n  local:\n    accountId: {this will be yours}\n    emailAlert: {this will be yours}\n    emailSource: alertsdemo@mobileposse.com\n    logGroup: arn:aws:logs:us-east-1:local:log-group:/aws/lambda/*:*:*\n    redisHost: localhost\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: {this will be yours}\n    stage: local\n    stream: arn:aws:kinesis:us-east-1:{this will be yours}:stream/demo-test\n    streamName: demo-local\n    subnet: {this will be yours}\n  test:\n    accountId: {this will be yours}\n    emailAlert: {this will be yours}\n    emailSource: {this will be yours}\n    logGroup: arn:aws:logs:us-east-1:test:log-group:/aws/lambda/*:*:*\n    redisHost: demo-test.z6hach.0001.use1.cache.amazonaws.com\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: {this will be yours}\n    stage: test\n    stream: arn:aws:kinesis:us-east-1:{this will be yours}:stream/demo-test\n    streamName: demo-test\n    subnet: {this will be yours}\n\nprovider:\n  name: aws\n  runtime: ${self:custom.${opt:stage}.runtime}\n  region: ${self:custom.${opt:stage}.region}\n  stage: ${self:custom.${opt:stage}.stage}\n  environment:\n    EMAIL_ALERT: ${self:custom.${opt:stage}.emailAlert}\n    EMAIL_SOURCE: ${self:custom.${opt:stage}.emailSource}\n    REDIS_HOST: ${self:custom.${opt:stage}.redisHost}\n    REDIS_PORT: ${self:custom.${opt:stage}.redisPort}\n    REGION: ${self:custom.${opt:stage}.region}\n    STAGE: ${opt:stage}\n    STREAM: ${self:custom.${opt:stage}.streamName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: ${self:custom.${opt:stage}.logGroup}\n    - Effect: \"Allow\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:AttachNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n        - ec2:DetachNetworkInterface\n        - ec2:ModifyNetworkInterfaceAttribute\n        - ec2:ResetNetworkInterfaceAttribute\n        - autoscaling:CompleteLifecycleAction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - kinesis:*\n      Resource: ${self:custom.${opt:stage}.stream}\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\n# items under stream must be indented four spaces\n# or \"EventSourceMapping\" will not be created (as\n# arn is a property of stream, not a peer)\nfunctions:\n  publish:\n    name: demo-publish-${opt:stage}\n    handler: publish.publishStream\n    description: ${self:service} - publish device stream\n    events:\n      - schedule: rate(1 minute)\n  consume:\n    handler: consume.consumeStream\n    name: demo-consume-${opt:stage}\n    description: ${self:service} - consume device stream\n    memorySize: 1024\n    timeout: 300\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n    events:\n      - stream:\n          arn: ${self:custom.${opt:stage}.stream}\n          batchSize: 2\n          startingPosition: TRIM_HORIZON\n  configure:\n    handler: configure.configureKeywords\n    name: demo-config-${opt:stage}\n    description: ${self:service} - configure keywords\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  report:\n    handler: report.reportMetrics\n    name: demo-report-${opt:stage}\n    description: ${self:service} - report metrics\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  reset:\n    handler: reset.resetCache\n    name: demo-reset-${opt:stage}\n    description: ${self:service} - flush cache\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n","service: demo\n\ncustom:\n  local:\n    accountId: MISSING_ACCOUNT\n    emailAlert: MISSING_SES_VALIDATED_EMAIL\n    emailSource: MISSING_SES_VALIDATED_EMAIL.com\n    logGroup: arn:aws:logs:us-east-1:local:log-group:/aws/lambda/*:*:*\n    redisHost: localhost\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: MISSING_SECURITY_GROUP\n    stage: local\n    stream: MISSING_STREAM_ARN\n    streamName: demo-local\n    subnet: MISSING_PRIVATE_SUBNET\n  test:\n    accountId: MISSING_ACCOUNT\n    emailAlert: MISSING_SES_VALIDATED_EMAIL\n    emailSource: MISSING_SES_VALIDATED_EMAIL\n    logGroup: arn:aws:logs:us-east-1:test:log-group:/aws/lambda/*:*:*\n    redisHost: demo-test.z6hach.0001.use1.cache.amazonaws.com\n    redisPort: 6379\n    region: us-east-1\n    runtime: nodejs4.3\n    securityGroupRedis: MISSING_SECURITY_GROUP\n    stage: test\n    stream: MISSING_STREAM_ARN\n    streamName: demo-test\n    subnet: MISSING_PRIVATE_SUBNET\n\nprovider:\n  name: aws\n  runtime: ${self:custom.${opt:stage}.runtime}\n  region: ${self:custom.${opt:stage}.region}\n  stage: ${self:custom.${opt:stage}.stage}\n  environment:\n    EMAIL_ALERT: ${self:custom.${opt:stage}.emailAlert}\n    EMAIL_SOURCE: ${self:custom.${opt:stage}.emailSource}\n    REDIS_HOST: ${self:custom.${opt:stage}.redisHost}\n    REDIS_PORT: ${self:custom.${opt:stage}.redisPort}\n    REGION: ${self:custom.${opt:stage}.region}\n    STAGE: ${opt:stage}\n    STREAM: ${self:custom.${opt:stage}.streamName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n      Resource: ${self:custom.${opt:stage}.logGroup}\n    - Effect: \"Allow\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:AttachNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n        - ec2:DetachNetworkInterface\n        - ec2:ModifyNetworkInterfaceAttribute\n        - ec2:ResetNetworkInterfaceAttribute\n        - autoscaling:CompleteLifecycleAction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - kinesis:*\n      Resource: ${self:custom.${opt:stage}.stream}\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\n# items under stream must be indented four spaces\n# or \"EventSourceMapping\" will not be created (as\n# arn is a property of stream, not a peer)\nfunctions:\n  publish:\n    name: demo-publish-${opt:stage}\n    handler: publish.publishStream\n    description: ${self:service} - publish device stream\n    events:\n      - schedule: rate(1 minute)\n  consume:\n    handler: consume.consumeStream\n    name: demo-consume-${opt:stage}\n    description: ${self:service} - consume device stream\n    memorySize: 1024\n    timeout: 300\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n    events:\n      - stream:\n          arn: ${self:custom.${opt:stage}.stream}\n          batchSize: 2\n          startingPosition: TRIM_HORIZON\n  configure:\n    handler: configure.configureKeywords\n    name: demo-config-${opt:stage}\n    description: ${self:service} - configure keywords\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  report:\n    handler: report.reportMetrics\n    name: demo-report-${opt:stage}\n    description: ${self:service} - report metrics\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n  reset:\n    handler: reset.resetCache\n    name: demo-reset-${opt:stage}\n    description: ${self:service} - flush cache\n    vpc:\n      securityGroupIds:\n        - ${self:custom.${opt:stage}.securityGroupRedis}\n      subnetIds:\n        - ${self:custom.${opt:stage}.subnet}\n"]},{"id":93075777,"files":["service: serverless-hackweek\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - 's3:PutObject'\n        - 's3:PutObjectAcl'\n        - 's3:GetObject'\n        - 's3:GetObjectAcl'\n        - 's3:ListObject'\n      Resource:\n          - \"arn:aws:s3:::serverless-hackweek/*\"\n  apiKeys:\n    - mytestapikey\nplugins:\n  - serverless-run-function-plugin\n\nfunctions:\n  html2pdf:\n    handler: handler.html2pdf\n    events:\n      - http:\n          path: convert/html2pdf\n          method: post\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  hellopost:\n    handler: handler.hello\n    events:\n      - http:\n          path: hellopost\n          method: post\n\nresources:\n  Resources:\n    NewResource:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: serverless-hackweek\n\n"]},{"id":94660037,"files":["service: lambda-webpack\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda"]},{"id":76126402,"files":["service: marvin\n\nframeworkVersion: \"=1.3\"\n\npackage:\n  exclude:\n    - tmp/**\n    - .git/**\n    - src/**/*test.js\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n\nfunctions:\n  handleMessage:\n    handler: src/lambda.handleMessage\n    events:\n      - http:\n          path: marvin\n          method: post\n"]},{"id":103016391,"files":["frameworkVersion: \"1.21\"\n\nservice: cryptocurrency-monitor\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false\n\ncustom: ${file(./serverless.config.yml)}\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nfunctions:\n  Worker:\n    handler: src/worker/index.handler\n    name: ${self:service}-worker-${self:provider.stage}\n    memorySize: 128\n    timeout: 60\n    role: Role\n    environment:\n      TOPIC: \n        Ref: Topic\n      TABLE_NAME:\n        Ref: Table\n    package:\n      include:\n        - src/worker/**\n    events:\n      -\n        schedule:\n          name: ${self:service}-worker-${self:provider.stage}\n          rate: ${self:custom.worker_rate}\n          enabled: ${self:custom.worker_enabled}\n\n  Consumer:\n    handler: src/consumer/index.handler\n    name: ${self:service}-consumer-${self:provider.stage}\n    memorySize: 128\n    timeout: 3\n    role: Role\n    environment:\n      TWILIO_SID: ${self:custom.twilio_sid}\n      TWILIO_TOKEN: ${self:custom.twilio_token}\n      TWILIO_FROM: ${self:custom.twilio_from}\n      TABLE_NAME:\n        Ref: Table\n    package:\n      include:\n        - src/consumer/**\n    events:\n      - \n        sns: \n          arn:\n            Fn::Join:\n              - \":\"\n              -\n                - \"arn:aws:sns\"\n                - Ref: \"AWS::Region\"\n                - Ref: \"AWS::AccountId\"\n                - ${self:service}-${self:provider.stage}\n          topicName: ${self:service}-${self:provider.stage}\n\nresources:  # CloudFormation template syntax\n  Resources:\n\n    # DynamoDb\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n    # SNS\n    Topic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:service}-${self:provider.stage}\n\n    # IAM\n    Role:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        RoleName: ${self:service}-${self:provider.stage}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          -\n            PolicyName: ${self:service}-${self:provider.stage}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      -\n                        - \"arn:aws:logs\"\n                        - Ref: \"AWS::Region\"\n                        - Ref: \"AWS::AccountId\"\n                        - \"log-group:/aws/lambda/*:*:*\"\n                -\n                  Effect: Allow\n                  Action:\n                    - dynamodb:UpdateItem\n                    - dynamodb:Scan\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      -\n                        - \"arn:aws:dynamodb\"\n                        - Ref: \"AWS::Region\"\n                        - Ref: \"AWS::AccountId\"\n                        - Fn::Join:\n                          - \"\"\n                          -\n                            - \"table/\"\n                            - Ref: Table\n                -\n                  Effect: Allow\n                  Action:\n                    - sns:Publish\n                  Resource:\n                    Ref: Topic\n    \n  # Output\n  Outputs:\n    Region:\n      Value: ${self:provider.region}\n    Stage:\n      Value: ${self:provider.stage}\n    TwilioFrom:\n      Value: ${self:custom.twilio_from}\n    TwilioSid:\n      Value: ${self:custom.twilio_sid}\n    TwilioToken:\n      Value: ${self:custom.twilio_token}\n    Table:\n      Value:\n        Ref: Table\n    Topic:\n      Value:\n        Fn::GetAtt:\n          - Topic\n          - TopicName\n","twilio_sid: \ntwilio_token: \ntwilio_from: \nworker_rate: cron(*/10 * * * ? *)\nworker_enabled: true"]},{"id":96393903,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice:  # NOTE: update this with your service name or Your user name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: # AWS Region for lambda\n  stage: dev\n  memorySize: 128 # default memory size of lambda, you can overwrite for individual functions.\n  deploymentBucket: # Deployment bucket name. Default is generated by the framework\n  environment:   # Define function environment variables here\n    aws_account:  # AWS account number, this number will be for ReportGarden\n    access_key:  # AWS Access Key\n    secret_key:  # AWS Secret Key\n    region:  # AWS Region\n    sns_topic:  # If you change kindly change subscribe\n\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules:\n    packagePath: './package.json'\n\nfunctions:\n  publish:\n    handler: handler.publish\n    events:\n      - http:\n          path: publish\n          method: post\n  subscribe:\n    handler: handler.subscribe\n    events:\n      - sns: pdf-print\n"]},{"id":107871337,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\ncustom:\n  webpackIncludeModules: true\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"codebuild:StartBuild\"\n        - \"codebuild:StopBuild\"\n      Resource:\n        - '*'\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - '*'\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  pull_request:\n    handler: src/pull_request.dispatch\n    environment:\n      GITHUB_TOKEN: ${file(./config/CONFIG.yml):Github.token}\n      GITHUB_REPO_OWNER: ${file(./config/CONFIG.yml):Github.repo_owner}\n      GITHUB_REPO_NAME: ${file(./config/CONFIG.yml):Github.repo_name}\n      GITHUB_TEST_LABEL: ${file(./config/CONFIG.yml):Github.test_label}\n      SLACK_WEBHOOK_URL: ${file(./config/CONFIG.yml):Slack.webhook_url}\n      CODEBUILD_PROJECT: ${file(./config/CONFIG.yml):CodeBuild.project}\n      CODEBUILD_BUILDSPEC: ${file(./config/CONFIG.yml):CodeBuild.buildspec}\n    events:\n      - sns: pull_request_dispatch\n\n  codebuild:\n    handler: src/codebuild.dispatch\n    environment:\n      GITHUB_TOKEN: ${file(./config/CONFIG.yml):Github.token}\n      GITHUB_REPO_OWNER: ${file(./config/CONFIG.yml):Github.repo_owner}\n      GITHUB_REPO_NAME: ${file(./config/CONFIG.yml):Github.repo_name}\n      SLACK_WEBHOOK_URL: ${file(./config/CONFIG.yml):Slack.webhook_url}\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - SUCCEEDED\n                - FAILED\n                - STOPPED\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":139778831,"files":["service: express-serverless-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: v1\n  region: us-east-1\n  timeout: 30\n  memorySize: 512\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n\nfunctions:\n  app:\n    handler: handler.run\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":130152829,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: restapi # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\nfunctions:\n  get:\n    handler: speakers/getSpeaker.get\n    events:\n      - http:\n          path: speakers/{id}\n          method: get\n          cors: true\n  list:\n    handler: speakers/listSpeakers.list\n    events:\n      - http:\n          path: speakers\n          method: get\n          cors: true\n  update:\n    handler: speakers/updateSpeaker.update\n    events:\n      - http:\n          path: speakers/{id}\n          method: put\n          cors: true\n  add:\n    handler: speakers/addSpeaker.add\n    events:\n      - http:\n          path: speakers\n          method: post\n          cors: true\n  delete:\n    handler: speakers/deleteSpeaker.delete\n    events:\n      - http:\n          path: speakers/{id}\n          method: delete\n          cors: true"]},{"id":160147692,"files":["service: cross-stack-demo-dynamodb-stack \n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\ncustom:\n  serviceName: CrossStackDemo\n  ddbUserTable: ${self:custom.serviceName}-${opt:stage, self:provider.stage}-UserTable\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  stage: dev\n  #deploymentBucket: com.stanleyyong.serverless-deployments\n\nresources:\n  Resources:\n\n    #################\n    # DynamoDB config\n    #################\n    UserTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:custom.ddbUserTable}\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S   \n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n  Outputs:\n    UserTableArn:\n      Value: !GetAtt UserTable.Arn\n      Export:\n        Name: ${self:custom.ddbUserTable}Arn\n\n","service: cross-stack-demo-lambda-stack \n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\ncustom:\n  serviceName: CrossStackDemo\n  ddbUserTable: ${self:custom.serviceName}-${opt:stage, self:provider.stage}-UserTable\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  stage: dev\n  #deploymentBucket: com.stanleyyong.serverless-deployments\n  environment:\n    DYNAMODB_USER_TABLE: ${self:custom.ddbUserTable}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \n        - Fn::ImportValue: ${self:custom.ddbUserTable}Arn\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n"]},{"id":147190255,"files":["service: DomTesting\n\nframeworkVersion: \">=1.27.2 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: \"${opt:stage, 'test'}\"\n  region: eu-central-1\n  timeout: 2\n  environment:\n    SELF_ENDPOINT:\n      Fn::Join:\n        - \"\"\n        - - \"https://\"\n          - Ref: \"ApiGatewayRestApi\"\n          - \".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/\"\n\npackage:\n  individually: true\n  exclude:\n    - \".*/**\"\n\nplugins:\n  - serverless-plugin-git-variables\n\nfunctions:\n  - ${file(serverless_resources/base/functions.yml)}\n  - ${file(serverless_resources/sub/functions.yml)}\n\nresources:\n  - ${file(serverless_resources/base/role.yml)}\n  - ${file(serverless_resources/sub/role.yml)}\n"]},{"id":188787534,"files":["service: serverless-izettle-integrations\n\nplugins:\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  postWebhook:\n    handler: handler.postWebhook\n    events:\n      - http:\n          path: /webhook\n          method: post\n          cors: true\n    environment:\n      SLACK_WEBHOOK_URL:  ${env:SLACK_WEBHOOK_URL}\n      SLACK_WEBHOOK_ICON:  ${env:SLACK_WEBHOOK_ICON}\n"]},{"id":208499093,"files":["service: GuestsService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  upsertGuestCartItem:\n    name: upsertGuestCartItem-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to guest upsert cart item\n    events:\n      - http:\n          path: guests/{id}/cart/item\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getGuestCartItems:\n    name: getGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  upsertGuestCartItems:\n    name: upsertGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteGuestCartItem:\n    name: deleteGuestCartItem-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/deleteGuestCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete guest cart item\n    events:\n      - http:\n          path: guests/{id}/cart/item\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteGuestCartItems:\n    name: deleteGuestCartItems-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/deleteGuestCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete in guest cart items\n    events:\n      - http:\n          path: guests/{id}/cart/items\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  createGuestOrder:\n    name: createGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/createGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to createGuestOrder\n    events:\n      - http:\n          path: guests/{id}/orders\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  confirmGuestOrder:\n    name: confirmGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/confirmGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to confirmGuestOrder\n    # events:\n    #   - http:\n    #       path: guests/orders/{id}\n    #       method: put\n    #       request:\n    #         parameters:\n    #           paths:\n    #             id: true\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  cancelGuestOrder:\n    name: cancelGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/cancelGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to cancelGuestOrder\n  getGuestOrder:\n    name: getGuestOrder-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestOrder.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getGuestOrder\n    # events:\n    #   - http:\n    #       path: guests/orders/{id}\n    #       method: get\n    #       request:\n    #         parameters:\n    #           paths:\n    #             id: true\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  getGuestAddressAndCommunication:\n    name: getGuestAddressAndCommunication-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestAddressAndCommunication.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get getGuestAddressAndCommunication\n    # events:\n    #   - http:\n    #       path: guests/address\n    #       method: get\n    #       integration: lambda\n    #       cors:\n    #         origins:\n    #           - '*'\n    #         headers:\n    #           - Content-Type\n    #           - Authorization\n  upsertGuestAddressAndCommunication:\n    name: upsertGuestAddressAndCommunication-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/upsertGuestAddressAndCommunication.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post upsertGuestAddressAndCommunication\n    events:\n      - http:\n          path: guests/{id}/address\n          method: post\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getGuestOrderPrice:\n    name: getGuestOrderPrice-${self:provider.stage}\n    role: GuestsFunctionsLambdaRole\n    handler: src/guests/getGuestOrderPrice.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to getGuestOrderPrice\n\nresources:\n  Resources:\n    GuestsFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":224974239,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: smartsoftware-website\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n  - serverless-dotenv-plugin\n  - serverless-offline\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\npackage:\n  individually: true\n  excludeDevDependencies: true\n\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${env:NODE_ENV}\n  region: eu-central-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\ncustom:\n  #######################################\n  # Unique ID included in resource names.\n  # Replace it with a random value for every first distribution.\n  # https://www.random.org/strings/?num=1&len=6&digits=on&loweralpha=on&unique=on&format=html&rnd=new\n  stackId: xhs7xa\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${env:DOMAIN}\n    basePath: ''\n    stage: ${env:NODE_ENV}\n    createRoute53Record: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":187248709,"files":["service: ServerlessHandsOnPart1\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n\nfunctions:\n  webapp:\n    handler: handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true","service: ServerlessHandsOnPart2\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  timeout: 30\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nfunctions:\n  crawler:\n    handler: handler.crawler\n    events:\n      - schedule: rate(10 minutes)","service: sample-app # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello","service: serverless-flask # 람다 이름\n\nplugins:\n  - serverless-python-requirements\n  - serverless-wsgi\n\ncustom:\n  wsgi:\n    app: app.app # 메인 엔트리\n    packRequirements: false\n  pythonRequirements:\n    dockerizeZip: non-linux\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: dev\n  region: ap-northeast-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:invokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::word-vector-text/*\"\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::word-vector-text-acc/*\"\n  environment:  \n    NLTK_DATA: './nltk_data'\n\nfunctions:\n  app:\n    handler: wsgi_handler.handler \n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":89476377,"files":["service: aws-nodejs\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action:\n       - \"ecr:DescribeImages\"\n       - \"ecr:ListImages\"\n       - \"ecr:BatchDeleteImage\"\n     Resource: \"*\"\npackage:\n  exclude:\n    - node_modules/**\nfunctions:\n  purify:\n    handler: handler.index\n    events:\n      - schedule: rate(24 hours)\n    environment:\n      REPO_NAME: quikvideo-test\n      DELETE_THRESHOLD: 20\n      DELETE_AMOUNT: 10\n"]},{"id":107230282,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: askwho\n\n# plugins\nplugins:\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-1\n  memorySize: 128 # optional, in MB, default is 1024\n  timeout: 10 # optional, in seconds, default is 6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - lib/**\n    - config/**\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  subscribe:\n    handler: handler.subscribe\n    environment:\n      FB_TOKEN: ${self:custom.secrets.FB_TOKEN}\n    events:\n      - http:\n          path: askwhofb\n          method: get\n\n  webhook:\n    handler: handler.webhook\n    environment:\n      FB_TOKEN: ${self:custom.secrets.FB_TOKEN}\n      DATAGOVSG_KEY: ${self:custom.secrets.DATAGOVSG_KEY}\n    events:\n      - http:\n          path: askwhofb\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":146141815,"files":["service: magic-eightball\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  profile: serverless\n  region: us-east-1\n  environment:\n    SLACK_TOKEN: ${ssm:slackToken}\n    TWILIO_TOKEN: ${ssm:twilioToken}\n\nfunctions:\n  app:\n    handler: server.handler\n    events:\n      - http: ANY /\n      - http: \"ANY {proxy+}\"\n"]},{"id":145584959,"files":["---\nservice: serverless-graphql-mongo\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket: ${self:service}-artefacts-${self:provider.region}\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    NODE_ENV: ${self:provider.stage}\n    MONGODB_URI: ${env:MONGODB_URI}\n\nfunctions:\n  graphql:\n    handler: src/server.default\n    memorySize: 256\n    events:\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: post\n          cors: true\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: get\n          cors: true\n\nplugins:\n  - serverless-plugin-create-deployment-bucket\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultRegion: 'eu-west-1'\n  webpack:\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":160203905,"files":["service: templateService # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  individually: true\n\nfunctions:\n  getExample:\n    handler: src/getHandler.getFunction\n    package:\n      exclude:\n        - ./**\n      include:\n        - src/getHandler.js\n    events:\n      - http:\n          path: get/{name}\n          method: get\n          request: \n            parameter:\n              paths:\n                name: true\n  postExample:\n    handler: src/postHandler.postFunction\n    package:\n      exclude:\n        - ./**\n      include:\n        - src/postHandler.js\n    events:\n      - http:\n          path: post\n          method: post\n"]},{"id":123268468,"files":["service: yowltag-graphql-api\n\n# plugins:\n# - serverless-plugin-include-dependencies\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: dev\n  environment:\n    ACCOUNT_ID: '882300007932'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: arn:aws:dynamodb:*:*:table/locations\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'dispatcher'\n\npackage:\n  exclude:\n    - src/**\n    - .eslintrc\n    - coverage\n    - __test__\n\nfunctions:\n  graphql:\n    #handler: build/handler.graphql\n    handler: ${file(config/env.js):handlerPath}/handler.graphql\n    memorySize: 512\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  match:\n    handler: build/handler.findMatches\n    memorySize: 512\n    events:\n      - sns: dispatcher\n\n  cleanupLocations:\n    handler: build/handler.cleanupLocations\n    memorySize: 512\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - locationsDynamoDbTable\n              - StreamArn\n\nresources:\n  Resources:\n    locationsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: hashKey\n            AttributeType: N\n          - AttributeName: rangeKey\n            AttributeType: S\n          - AttributeName: geohash\n            AttributeType: N\n        KeySchema:\n          - AttributeName: hashKey\n            KeyType: HASH\n          - AttributeName: rangeKey\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: geohash-index\n            KeySchema:\n            - AttributeName: hashKey\n              KeyType: HASH\n            - AttributeName: geohash\n              KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TableName: 'locations'\n    UsersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'users'\n    TagsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'tags'\n    MatchesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'matches'\n    RecordsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'records'\n    RecorddataDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 1\n        TableName: 'recorddata'\n\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]"]},{"id":125660083,"files":["service: aws-rnative-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-3\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  app:\n    handler: handler.vk\n    cors: true\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":121785754,"files":["service: es6-esm-function\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: es6-esm"]},{"id":175678657,"files":["service: CustomerService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  getCustomerCompanyDetails:\n    name: getCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/getCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  postCustomerCompanyDetails:\n    name: postCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/postCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  putCustomerCompanyDetails:\n    name: putCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/putCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to update customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: put\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerCompanyDetails:\n    name: deleteCustomerCompanyDetails-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-company/deleteCustomerCompanyDetails.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer company details\n    events:\n      - http:\n          path: /customer/company\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCustomerAddressList:\n    name: getCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/getCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer address List\n    events:\n      - http:\n          path: /customer/address-list\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCustomerAddress:\n    name: getCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/getCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to retrieve customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  postCustomerAddress:\n    name: postCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/postCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to post customer address details\n    events:\n      - http:\n          path: /customer/address\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  putCustomerAddress:\n    name: putCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/putCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to put customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerAddressList:\n    name: deleteCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/deleteCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer address list\n    events:\n      - http:\n          path: /customer/address-list\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCustomerAddress:\n    name: deleteCustomerAddress-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/deleteCustomerAddress.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete customer address\n    events:\n      - http:\n          path: /customer/address/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  eraseCustomerAddressList:\n    name: eraseCustomerAddressList-${self:provider.stage}\n    role: CustomerFunctionsLambdaRole\n    handler: src/customer-address/eraseCustomerAddressList.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to erase customer address list\n\nresources:\n  Resources:\n    CustomerFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":164843444,"files":["service: ps-slack\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10 \n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:SendMessage\"\n        - \"sqs:GetQueueUrl\"\n      Resource: \n        Fn::GetAtt:\n          - CommandQueue\n          - Arn  \n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:ListQueues\"\n      Resource: \n         Fn::GetAtt:\n          - CommandQueue\n          - Arn       \n\ncustom:\n  baseUrl: v1\n  mosUrl: https://www.oracle.com/search/results/_/N-33y?No=0&Nr=106&Nrpp=5&Ntk=SI-ALL5&Ntt=\n  product: E92519_02\n\nfunctions:\n  pbSlackCommand:\n    handler: handler.pbCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/pb-search\n          method: post\n    environment:\n      QUEUE: \n        Ref: CommandQueue\n\n  mosSlackCommand:\n    handler: handler.mosCommand\n    events:\n      - http:\n          path: ${self:custom.baseUrl}/mos-search\n          method: post\n    environment:\n      QUEUE:\n        Ref: CommandQueue\n\n  commandHandler:\n    handler: handler.commandHandler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CommandQueue\n              - Arn\n          batchSize: 1\n    environment:\n      PRODUCT:  ${self:custom.product}\n      MOSURL:  ${self:custom.mosUrl}\n      \nresources:\n  Resources:\n    CommandQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"PS-BOT-COMMANDS\"\n        VisibilityTimeout: 60\n        MessageRetentionPeriod: 120\n\n"]},{"id":174001114,"files":["service: samples-step-functions\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  createMessage:\n    handler: index.createMessage\n  toUppercase:\n    handler: index.toUppercase\n\nstepFunctions:\n  stateMachines:\n    createMessage:\n      name: ${self:service}-${self:provider.stage}-createMessage\n      events:\n        - http:\n            path: /messages\n            method: POST\n      definition:\n        Comment: A sample state machine that creates a Hello World message and converts it to uppercase.\n        StartAt: CreateMessage\n        States:\n          CreateMessage:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-createMessage\"\n            Next: ToUppercase\n          ToUppercase:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-toUppercase\"\n            End: true\n","service: samples-stepf-api-sync\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - states:StartExecution\n      Resource:\n        - ${self:resources.Outputs.CreateMessageStateMachineArn.Value}\n    - Effect: Allow\n      Action:\n        - states:GetExecutionHistory\n      Resource:\n        - \"*\"\n\nfunctions:\n  createMessage:\n    handler: handler/createMessage.handle\n    environment:\n      STATE_MACHINE_ARN: ${self:resources.Outputs.CreateMessageStateMachineArn.Value}\n    events:\n      - http:\n          path: /messages\n          method: POST\n  formatMessage:\n    handler: handler/formatMessage.handle\n  toUppercase:\n    handler: handler/toUpperCase.handle\n\nstepFunctions:\n  stateMachines:\n    createMessage:\n      name: ${self:service}-${self:provider.stage}-createMessage\n      definition:\n        Comment: A sample state machine that creates a Hello World message and converts it to uppercase.\n        StartAt: FormatMessage\n        States:\n          FormatMessage:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-formatMessage\"\n            Next: ToUppercase\n          ToUppercase:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-toUppercase\"\n            Next: EndState\n          EndState:\n            Type: Pass\n            End: true\n\nresources:\n  Outputs:\n    CreateMessageStateMachineArn:\n      Description: ARN of the CreateMessage Step Functions State Machine\n      Value:\n        Ref: SamplesDashstepfDashapiDashsyncDashdevDashcreateMessage","service: samples-rest-cognito-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 6\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: \n          path: hello\n          method: get\n          authorizer: \n            arn: arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_07ksBD9fu\n","service: samples-rest-dynamodb-modular\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-lambda-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: \n          path: hello\n          method: get\n          authorizer: \n            name: simpleTokenAuthorizer\n            resultTtlInSeconds: 300     # default response cache time-to-live is 5 minutes\n            identitySource: method.request.header.Authorization     # default token location is Authorization header\n  simpleTokenAuthorizer:\n    handler: authorizer.authorize\n","service: samples-rest-dynamodb-multi-fn\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-environment\n\ncustom:\n  audience:\n    dev: 'Developers'\n    qa: 'Testers'\n    prod: 'World'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  environment:\n    GREETING_AUDIENCE: ${self:custom.audience.${self:provider.stage}}\n\nfunctions:\n  hello:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Hello'\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Goodbye'\n    events:\n      - http: GET /goodbye\n","service: samples-rest-dynamodb\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","service: samples-rest-hello\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'","service: samples-lambda-authorizer-jwt\n\ncustom:\n  audience:     # token audience attribute\n    dev: \"https://api-dev.leanstacks.net\"\n    qa: \"https://api-qa.leanstacks.net\"\n    prod: \"https://api.leanstacks.net\"\n  issuer:     # token issuer attribute\n    dev: \"https://api-dev.leanstacks.net\"\n    qa: \"https://api-qa.leanstacks.net\"\n    prod: \"https://api.leanstacks.net\"\n  publicKey:     # public key for JWT verification\n    dev: |\n      -----BEGIN PUBLIC KEY-----\n      MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJWICeIzMDhWHH25LcJVY6N7hc76HnY4\n      nZIarSgfhFJDRyFyvfAzB6F9R+TWUH+kGB1ypd+jgNLpyGHt3YloKtsCAwEAAQ==\n      -----END PUBLIC KEY-----\n    qa: \"\"\n    prod: \"\"\n  privateKey:     # private key for JWT signing\n    dev: |\n      -----BEGIN RSA PRIVATE KEY-----\n      MIIBOgIBAAJBAJWICeIzMDhWHH25LcJVY6N7hc76HnY4nZIarSgfhFJDRyFyvfAz\n      B6F9R+TWUH+kGB1ypd+jgNLpyGHt3YloKtsCAwEAAQJAbN2oZHlkJ//5qkcB27ST\n      YFj0KKbNOsEpZ0/otYeMrN6MphIt8D3IICyBQVej0C/U3cjox3aeC5phVVeqP9u6\n      EQIhAPt8G95qZ2rID7S7C8E29+M0xS7TGkbkxpejuhzHIbynAiEAmDdTI4qrJpDt\n      vobEYibiSIQJVmINLCPlP5L8EvU2oq0CIQCKTsBY+zXzMSIKKJCXa667I0uKrAkY\n      kjtyLFZv+0hfowIgGHy1/D6/n9mq1X66swuMVZwgIGxvsA0qQRr1QFuAaZUCIGh4\n      hIZ+dYvpHIvAn819aKFqi4dBeJ/PMxqYTCSseWi5\n      -----END RSA PRIVATE KEY-----\n    qa: \"\"\n    prod: \"\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  getMessage:\n    handler: handler/messages.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n          authorizer: \n            name: tokenAuthorizer\n            resultTtlInSeconds: 300     # default response cache time-to-live is 5 minutes\n            identitySource: method.request.header.X-Auth-Token     # default token location is X-Auth-Token header\n  listMessages:\n    handler: handler/messages.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n          authorizer: \n            name: tokenAuthorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.X-Auth-Token\n  requestToken:\n    handler: handler/tokens.handler\n    environment:\n      AUDIENCE: ${self:custom.audience.${self:provider.stage}}          # issuer placed within the token\n      ISSUER: ${self:custom.issuer.${self:provider.stage}}              # issuer placed within the token\n      PRIVATE_KEY: ${self:custom.privateKey.${self:provider.stage}}     # private key to sign the token\n    events:\n      - http: \n          path: /auth/request_token\n          method: post\n  tokenAuthorizer:\n    handler: handler/authorizer.handler\n    environment:\n      AUDIENCE: ${self:custom.audience.${self:provider.stage}}        # issuer placed within the token\n      ISSUER: ${self:custom.issuer.${self:provider.stage}}            # issuer to verify the token\n      PUBLIC_KEY: ${self:custom.publicKey.${self:provider.stage}}     # public key to verify the token\n","service: samples-environment-ssm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  environment:\n    GREETING_AUDIENCE: ${ssm:/${self:service}/${self:provider.stage}/greeting-audience}\n\nfunctions:\n  hello:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Hello'\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    environment:\n      GREETING_PREFIX: 'Goodbye'\n    events:\n      - http: GET /goodbye\n","##\n# The API project creates the API Gateway API and root resource, i.e. \"/\".\n# A simple \"info\" function with a HTTP event ensures a API Gateway REST API is \n#  deployed to AWS.\n# The API and root resource identifiers are explicitly output from this project \n#  so that they may be used within the \"messages\" serverless.yml configuration.\n##\nservice: samples-shared-api-base\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  info:\n    handler: index.handler\n    environment:\n      API_VERSION_MAJOR: 1\n      API_VERSION_MINOR: 0\n      API_VERSION_PATCH: 0\n    events:\n      - http: \n          path: /info\n          method: get\n\n# The resources block contains raw AWS CloudFormation markup.\nresources:\n  Outputs:\n    RestApiId:\n      Description: API Gateway REST API Identifier\n      Value: \n        Ref: ApiGatewayRestApi\n    RestApiRootResourceId:\n      Description: API Root Resource Identifier\n      Value:\n        \"Fn::GetAtt\": [ ApiGatewayRestApi, RootResourceId ]\n","##\n# The \"messages\" service project defines the functions and API endpoints for \n#  a REST \"messages\" resource.\n# Rather than deploying an entirely new API within API Gateway, the messages \n#  endpoints will be created within the API whose identifer was exported from \n#  the \"api\" project.\n##\nservice: samples-shared-api-messages\n\ncustom:\n  apiStackName: samples-shared-api-base   # The CloudFormation stack name (minus stage) where the API is created.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:   # Specify the API to which HTTP endpoints are attached. Reference the Outputs from the API project.\n    restApiId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiId}\n    restApiRootResourceId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiRootResourceId}\n\nfunctions:\n  getMessage:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n  listMessages:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n","##\n# The API project creates the API Gateway API and root resource, i.e. \"/\".\n# A simple \"info\" function with a HTTP event ensures a API Gateway REST API is \n# deployed to AWS.\n#\n# This project uses the serverless-domain-manager plugin to associate the API \n# with a custom domain. \n#\n# The API and root resource identifiers are explicitly output from this project \n# so that they may be used within the \"messages\" serverless.yml configuration.\n##\nservice: samples-sacd-base\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:provider.stage}}\n    certificateName: '*.leanstacks.net'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:\n    description: \"Serverless Sample: Shared API with Custom Domain Name\"\n\nfunctions:\n  info:\n    handler: index.handler\n    environment:\n      API_VERSION_MAJOR: 1\n      API_VERSION_MINOR: 0\n      API_VERSION_PATCH: 0\n    events:\n      - http: \n          path: /info\n          method: get\n\n# The resources block contains raw AWS CloudFormation markup.\nresources:\n  Outputs:\n    RestApiId:\n      Description: API Gateway REST API Identifier\n      Value: \n        Ref: ApiGatewayRestApi\n    RestApiRootResourceId:\n      Description: API Root Resource Identifier\n      Value:\n        \"Fn::GetAtt\": [ ApiGatewayRestApi, RootResourceId ]\n","##\n# The \"messages\" service project defines the functions and API endpoints for \n#  a REST \"messages\" resource.\n# Rather than deploying an entirely new API within API Gateway, the messages \n#  endpoints will be created within the API whose identifer was exported from \n#  the \"api\" project.\n##\nservice: samples-sacd-messages\n\ncustom:\n  apiStackName: samples-sacd-base   # The CloudFormation stack name (minus stage) where the API is created.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  memorySize: 128\n  timeout: 10\n  apiGateway:   # Specify the API to which HTTP endpoints are attached. Reference the Outputs from the API project.\n    restApiId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiId}\n    restApiRootResourceId: ${cf:${self:custom.apiStackName}-${self:provider.stage}.RestApiRootResourceId}\n\nfunctions:\n  getMessage:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages/{proxy+}\n          method: get\n  listMessages:\n    handler: index.handler\n    events:\n      - http: \n          path: /messages\n          method: get\n","service: samples-dynamodb-ondemand\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:custom.tableName}","service: samples-test-jest\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'","service: samples-custom-domain-products\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'products'\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  getProducts:\n    handler: index.handler\n    events:\n      - http: GET /\n","service: samples-custom-domain-users\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'users'\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  domains:\n    dev: serverless-samples-dev.leanstacks.net\n    prod: serverless-samples.leanstacks.net\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  getUsers:\n    handler: index.handler\n    events:\n      - http: GET /\n","plugins:\n  - serverless-dynamodb-local\n  - serverless-offline # must be last plugin in list\n\nservice: samples-rest-dynamodb-local\n\ncustom:\n  tableName: 'users-table-${self:provider.stage}'\n  dynamodb:\n    start:\n      migrate: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n  environment:\n    USERS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  getUser:\n    handler: index.handler\n    events:\n      - http: 'GET /users/{proxy+}'\n  getUsers:\n    handler: index.handler\n    events:\n      - http: 'GET /users'\n  createUser:\n    handler: index.handler\n    events:\n      - http: 'POST /users'\n  updateUser:\n    handler: index.handler\n    events:\n      - http: 'PUT /users/{proxy+}'\n  deleteUser:\n    handler: index.handler\n    events:\n      - http: 'DELETE /users/{proxy+}'\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tableName}","plugins:\n  - serverless-domain-manager\n\nservice: samples-custom-domain\n\ncustom:\n  customDomain:\n    domainName: serverless-samples.leanstacks.net\n    basePath: ''\n    certificateName: '*.leanstacks.net'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    handler: index.handler\n    events:\n      - http: GET /hello\n  goodbye:\n    handler: index.handler\n    events:\n      - http: GET /goodbye\n"]},{"id":164882273,"files":["service: chatbot\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: yarn\n  functionPrefix: chatbot-${ self:provider.stage }\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-1\n  stage: ${ opt:stage, 'dev' }\n  memorySize: 128\n  environment:\n    LINE_CHANNEL_ACCESS_TOKEN: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    LINE_CHANNEL_SECRET: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    DEFAULT_RICH_MENU: richmenu-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n\nfunctions:\n  lineWebhook:\n    handler: functions/lineWebhook.handler\n    name: ${ self:custom.functionPrefix }-lineWebhook\n    description: LINE webhook.\n    events:\n      - http:\n          path: webhook/line\n          method: post\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${ self:service }-${ self:provider.stage }\n        Description: Chatbot API\n"]},{"id":198414420,"files":["list:\n  handler: backend/authorCrud.list\n  events:\n    - http: get /authors\n\nget:\n  handler: backend/authorCrud.get\n  events:\n    - http:\n        path: authors/{id}\n        method: get\n\ncreate:\n  handler: backend/authorCrud.create\n  events:\n    - http: post /authors\n\n","service: authors-demo\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nfunctions:\n  - '${file(backend/serverless.yml)}'\n\ncustom:\n  dynamodb:\n    # If you only want to use DynamoDB Local in some stages, declare them here\n    stages:\n      - dev\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: backend/offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":191887403,"files":["service: serverless-nodejs-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n\nfunctions:\n  app:\n    handler: app.server # reference the file and exported method\n    events: # events trigger lambda functions\n      - http: # this is an API Gateway HTTP event trigger\n          path: /\n          method: ANY\n          cors: true\n      - http: # all routes get proxied to the Express router\n          path: /{proxy+}\n          method: ANY\n          cors: true"]},{"id":196445227,"files":["service: CartService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n  host: ${env:HOST}\n  port: ${env:PORT}\n  database: ${env:DATABASE}\n  username: ${env:USERNAME}\n  password: ${env:PASSWORD}\n  cognito-arn: ${env:COGNITO_ARN}\n  certificate-arn: ${env:CERTIFICATE_ARN}\n  logRetentionInDays: 7\n#   tracing:\n#     lambda: true\n#     apiGateway: true\n  logs:\n    restApi: true\n  vpc:\n    securityGroupIds:\n      - sg-bdeab9d6\n    subnetIds:\n      - subnet-9c76e2f5\n      - subnet-be6d8af2\n      - subnet-e9b86893\npackage:\n  individually: true\n  excludeDevDependencies: true\n  exclude:\n    - test/**\n    - .git/**\n    - .serverless/**\n    - coverage/**\n    - README.md\n    - TODO.md\n    - LICENSE\n\nfunctions:\n  upsertCartItem:\n    name: upsertCartItem-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/upsertCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert cart item\n    events:\n      - http:\n          path: /cart/item\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getCartItems:\n    name: getCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get cart items\n    events:\n      - http:\n          path: /cart/items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getInCartItems:\n    name: getInCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getInCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get in cart items\n    events:\n      - http:\n          path: /cart/in-cart-items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  getSavedForLaterCartItems:\n    name: getSavedForLaterCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/getSavedForLaterCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to get getSavedForLaterCartItems cart items\n    events:\n      - http:\n          path: /cart/saved-for-later-items\n          method: get\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  upsertCartItems:\n    name: upsertCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/upsertCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to upsert cart items\n    events:\n      - http:\n          path: /cart/items\n          method: post\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteCartItem:\n    name: deleteCartItem-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/deleteCartItem.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete cart item\n    events:\n      - http:\n          path: /cart/item/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n  deleteInCartItems:\n    name: deleteInCartItems-${self:provider.stage}\n    role: CartFunctionsLambdaRole\n    handler: src/cart-item/deleteInCartItems.fun\n    memorySize: 128\n    timeout: 10\n    environment:\n      HOST: ${self:provider.host}\n      PORT: ${self:provider.port}\n      DATABASE: ${self:provider.database}\n      USERNAME: ${self:provider.username}\n      PASSWORD: ${self:provider.password}\n    tags:\n      purpose: lambda function to delete in cart items\n    events:\n      - http:\n          path: /cart/in-items\n          method: delete\n          integration: lambda\n          authorizer:\n            name: authorizer\n            arn: ${self:provider.cognito-arn}\n            claims:\n              - phone_number\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - Authorization\n\nresources:\n  Resources:\n    CartFunctionsLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Path: /\n        Policies:\n          - PolicyName: logs\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"logs:CreateLogGroup\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                Resource: \"arn:aws:logs:*:*:*\"\n          - PolicyName: lambda\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"lambda:InvokeFunction\"\n                Resource: \"*\"\n          - PolicyName: VPCAccess\n            PolicyDocument:\n              Statement:\n                Effect: Allow\n                Action:\n                  - \"ec2:CreateNetworkInterface\"\n                  - \"ec2:DescribeNetworkInterfaces\"\n                  - \"ec2:DeleteNetworkInterface\"\n                Resource: \"*\"\n"]},{"id":205943590,"files":["service: twilio\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment: ${file(env.yml)}\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":111224495,"files":["service: bakerybackend\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: eu-central-1\n\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:eu-central-1:*:*\n\nfunctions:\n  create-product:\n    handler: create.main\n    events: \n      - http:\n          path: products\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  create-offer:\n    handler: create.offer\n    events:\n      - http:\n          path: offers\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  create-news:\n    handler: create.news\n    events:\n      - http:\n          path: news\n          method: post\n          cors: true\n          authorizer: aws_iam\n  \n  list-categories:\n    handler: list.main\n    events:\n      - http:\n          path: categories\n          method: get\n          cors: true\n\n  list-products:\n    handler: list.products\n    events:\n      - http:\n          path: categories/{category}\n          method: get\n          cors: true\n  \n  list-offers:\n    handler: list.offer\n    events:\n      - http:\n          path: offers\n          method: get\n          cors: true\n\n  list-news:\n    handler: list.news\n    events:\n      - http:\n          path: news\n          method: get\n          cors: true\n\n  get-product:\n    handler: get.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: get\n          cors: true\n\n  get-news:\n    handler: get.news\n    events:\n      - http:\n          path: news/{id}\n          method: get\n          cors: true\n\n  update-product:\n    handler: update.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete-product:\n    handler: delete.main\n    events:\n      - http:\n          path: products/{id}/{category}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  update-news:\n    handler: update.news\n    events:\n      - http:\n          path: news/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete-news:\n    handler: delete.news\n    events:\n      - http:\n          path: news/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  search-products:\n    handler: list.search\n    events:\n      - http:\n          path: search/{value}\n          method: get\n          cors: true\n"]},{"id":85539779,"files":["service: warm-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  1interval:\n    handler: interval1.ping\n  2interval:\n    handler: interval2.ping\n  3interval:\n    handler: interval3.ping\n  4interval:\n    handler: interval4.ping\n  5interval:\n    handler: interval5.ping\n  6interval:\n    handler: interval6.ping\n  7interval:\n    handler: interval7.ping\n  8interval:\n    handler: interval8.ping\n  9interval:\n    handler: interval9.ping\n  10interval:\n    handler: interval10.ping\n  11interval:\n    handler: interval11.ping\n  12interval:\n    handler: interval12.ping\n  13interval:\n    handler: interval13.ping\n  14interval:\n    handler: interval14.ping\n  15interval:\n    handler: interval15.ping\n  30interval:\n    handler: interval30.ping\n  45interval:\n    handler: interval45.ping\n  60interval:\n    handler: interval60.ping\n"]},{"id":96702423,"files":["service: serverless-hello-world\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n  world:\n    handler: handler.work"]},{"id":86495649,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: statUp\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"kinesis:*\"\n\nplugins:\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  post:\n    handler: functions/post.handler\n    events:\n      - http:\n         path: /post\n         method: POST\n\n\n  getall:\n    handler: functions/getall.handler\n    events:\n      - http:\n         path: /getall\n         method: GET\n\n  update:\n    handler: functions/update.handler\n    events:\n      - http:\n         path: /update\n         method: PUT\n\n  delete:\n    handler: functions/delete.handler\n    events:\n      - http:\n         path: /delete\n         method: DELETE\n\n  stream:\n    handler: functions/stream.handler\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:us-east-1:tareq:stream/statup\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":83727067,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: cronie\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  triggerBuild:\n    handler: handler.triggerBuild\n    events:\n      - schedule: cron(23 */6 * * ? *)\n    environment:\n      apiKey: ${file(secrets.yml):wercker}\n      applicationId: ${file(secrets.yml):applicationId}\n      username: ${file(secrets.yml):username}\n\n  fetchApplications:\n    handler: handler.fetchApplications\n    environment:\n      apiKey: ${file(secrets.yml):wercker}\n      applicationId: ${file(secrets.yml):applicationId}\n      username: ${file(secrets.yml):username}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":80564148,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rizowski-net\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n include:\n   - node_modules\n   - functions\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getLatestPhoto:\n    handler: handler.latestPhoto\n  getGoogleLogo:\n    handler: handler.getGoogleLogo\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":81569820,"files":["service: machete-backend\ncustom:\n  machete_bucket: rippedvines-2-0\npackage:\n  individually: true\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-account-admin\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - 'iot:DescribeEndpoint'\n        - 'iot:Publish'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 'sts:AssumeRole'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 's3:PutObject'\n      Resource: \"arn:aws:s3:::${self:custom.machete_bucket}/*\"\n  environment:\n    IOT_ROLE: machete-iot-1\n    IOT_ENDPOINT: a31p550in0aqjb.iot.us-east-1.amazonaws.com\n    MACHETE_BUCKET: ${self:custom.machete_bucket}\n    MACHETE_DOMAIN: machete-site.s3-website-us-east-1.amazonaws.com\n\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http:\n          path: ping\n          method: GET\n          cors: true\n  auth:\n    handler: handler.auth\n    events:\n      - http:\n          path: auth\n          method: POST\n          cors: true\n  ripVine:\n    handler: handler.ripVine\n    timeout: 15\n    events:\n      - iot:\n          sql: \"SELECT * FROM '/machete/vine/#'\"\n    package:\n      include:\n        - functions/ripVine/ffmpeg\n        - functions/ripVine/lame\n        - functions/ripVine/ffprobe # see if this binary and those that follow can be excluded\n        - functions/ripVine/ffserver\n        - functions/ripVine/x264\nresources:\n  Resources:\n    MacheteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.machete_bucket}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods: [GET]\n              AllowedOrigins: ['*']\n    MacheteBucketPolicy: # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html#cfn-s3-bucketpolicy-policydocument\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.machete_bucket}\n        PolicyDocument:\n          Statement:\n            - Action:\n                - \"s3:GetObject\"\n              Effect: \"Allow\"\n              Principal: \"*\"\n              Resource: \"arn:aws:s3:::${self:custom.machete_bucket}/*\"\n              #TODO: restrict to specific referring url - example visible in the link above\n"]},{"id":91444813,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-boilerplate\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  individually: true\n  exclude:\n    - \"**/*\"\n\nfunctions:\n  boilerplate:\n    handler: dist/handler.boilerplate\n    package:\n      include:\n        - dist/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":143112045,"files":["service: joy\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-2\n  environment:\n    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-user\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  create:\n    handler: users/create.create\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n\n  get:\n    handler: users/get.get\n    events:\n      - http:\n          path: users/{id}\n          method: get\n          cors: true\n\n  search:\n    handler: users/search.search\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\n  update:\n    handler: users/update.update\n    events:\n      - http:\n          path: users/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: users/delete.delete\n    events:\n      - http:\n          path: users/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n"]},{"id":131668174,"files":["service: gcf-nodejs # NOTE: Don't put the word \"google\" in here\n\ncustom: ${file(./env.js):env}\n\nprovider:\n  name: google\n  memorySize: 128\n  runtime: nodejs\n  project: ${self:custom.project}\n  credentials: ./keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  getBMI:\n    handler: getBMI\n    events:\n      - http: path"]},{"id":124801462,"files":["service: barkhaus-lambda # NOTE: update this with your service name\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  timeout: 300\n\nfunctions:\n  getDogs:\n    handler: Dogs/getDogs.getDogs\n    events:\n      - http:\n          path: Dogs\n          method: get\n\n  getDog:\n    handler: Dogs/getDog.getDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: get\n\n  deleteDog:\n    handler: Dogs/deleteDog.deleteDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: delete\n\n  createDog:\n    handler: Dogs/createDog.createDog\n    events:\n      - http:\n          path: Dogs\n          method: post\n\n  updateDog:\n    handler: Dogs/updateDog.updateDog\n    events:\n      - http:\n          path: Dogs/{DogID}\n          method: patch\n          \n          "]},{"id":148753822,"files":["service:\n  name: order-apis\n\nplugins:\n- serverless-pseudo-parameters\n- serverless-iam-roles-per-function\n\ncustom:\n  region: ${opt:region, self:provider.region}\n  stage: ${opt:stage}\n  prefix: ${self:service}-${self:custom.stage}\n  dynamodb_table: ${self:custom.prefix}-order\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  timeout: 30\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - dynamodb:Query\n    - dynamodb:Scan\n    - dynamodb:GetItem\n    - dynamodb:PutItem\n    - dynamodb:UpdateItem\n    - dynamodb:DeleteItem\n    - dynamodb:DescribeTable\n    Resource: ${self:custom.dynamodb_arn}\n  environment:\n    DYNAMO_TABLE: ${self:custom.dynamodb_table}\n\npackage:\n  exclude:\n  - .idea/**\n  - .git/**\n  - tmp/**\n\nfunctions:\n\n  create-order:\n    handler: functions/create-order/handler.handle\n    description: Create new order\n    events:\n    - http:\n        path: orders\n        method: post\n\n  get-orders:\n    handler: functions/get-orders/handler.handle\n    description: Get orders\n    events:\n    - http:\n        path: orders\n        method: get\n\n  ship-logs-to-elk:\n    handler: functions/ship-logs-to-elk/handler.handle\n    description: Sends CloudWatch logs from Kinesis to ELK\n    events:\n    - stream:\n        type: kinesis\n        arn:\n          Fn::GetAtt:\n          - KinesisLogsStream\n          - Arn\n    environment:\n      logstash_host: listener.logz.io #<INSERT VALUE HERE>\n      logstash_port: 5050 #<INSERT VALUE HERE>\n      token: <INSERT VALUE HERE>\n\nresources:\n  Resources:\n    Order:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamodb_table}\n        AttributeDefinitions:\n        - AttributeName: orderId\n          AttributeType: S\n        KeySchema:\n        - AttributeName: orderId\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    KinesisLogsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.prefix}-logs\n        ShardCount: 1\n    CWLtoKinesisRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:custom.prefix}-CWLtoKinesisRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Principal:\n              Service: logs.${self:custom.region}.amazonaws.com\n            Action: sts:AssumeRole\n    PermissionsPolicyForCWL:\n      Type: AWS::IAM::Policy\n      DependsOn:\n      - CWLtoKinesisRole\n      - KinesisLogsStream\n      Properties:\n        PolicyName: ${self:custom.prefix}-PermissionsPolicyForCWL\n        Roles:\n        - Ref: CWLtoKinesisRole\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Action: kinesis:PutRecord\n            Resource:\n              Fn::GetAtt:\n              - KinesisLogsStream\n              - Arn\n          - Effect: Allow\n            Action: iam:PassRole\n            Resource:\n              Fn::GetAtt:\n              - CWLtoKinesisRole\n              - Arn\n    CWLtoKinesisSubscription:\n      Type: AWS::Logs::SubscriptionFilter\n      DependsOn:\n      - CWLtoKinesisRole\n      - PermissionsPolicyForCWL\n      - KinesisLogsStream\n      Properties:\n        DestinationArn:\n          Fn::GetAtt:\n          - KinesisLogsStream\n          - Arn\n        RoleArn:\n          Fn::GetAtt:\n          - CWLtoKinesisRole\n          - Arn\n        FilterPattern: \"\"\n        LogGroupName: /aws/lambda/${self:custom.prefix}-create-order"]},{"id":183978208,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hds-simple-nodejs-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::560395879688:role/Hds-Lambda\n# cfnRole: arn:aws:iam::560395879688:role/Hds-Developer\n  stackName: hds-${self:provider.stage}-${self:service}\n  deploymentBucket: \n    name: hds-chc-dev-medicaltransactions\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      Usage: DevOps\n\n# you can overwrite defaults here\n  stage: ${opt:stage, 'dev'} \n  region: ${opt:retion, 'us-east-1'}\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"hds-chc-dev-medicaltransactions\" ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"hds-chc-dev-medicaltransactions\"\n            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DEBUG: true\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    tags:\n      Owner: LDC\n      Zone: us-east-1\n      \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n       - stream:\n            batchSize: 1\n            arn:\n              arn:aws:dynamodb:us-east-1:560395879688:table/hds_payer/stream/2019-04-29T04:13:51.403\n#       - stream:\n#           type: dynamodb\n#           batchSize: 1\n#           startingPosition: LATEST\n#           arn:\n#             Fn::GetAtt: [ \"hds_payer\", StreamArn ]\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":164812110,"files":["service: site-ses\n\n# Use the `serverless-webpack` plugin to transpile ES6.\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# `serverless-webpack` configuration\n# Enable auto-packing of external modules.\ncustom:\n  environment: ${file(env.yml):${self:provider.stage}}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: ${self:custom.environment.REGION}\n  environment: ${self:custom.environment}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n\nfunctions:\n  siteMailer:\n    handler: handler.siteMailer\n    events:\n      - http:\n          method: post\n          path: site-mailer\n          cors: true\n"]},{"id":197570677,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: message-api # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-central-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - dynamodb:PutItem\n      - dynamodb:Scan*\n      - dynamodb:GetItem\n      - dynamodb:UpdateItem\n      - dynamodb:Deletetem\n    Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-message-${opt:stage}\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    DYNAMOSB_MESSAGE_TABLE: ${self:service}-message-${opt:stage}\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\nplugins:\n  - serverless-pseudo-parameters\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /v1/message\n          method: post\n  list:\n    handler: handler.list\n    events:\n      - http:\n          path: /v1/message\n          method: get\n  # get:\n  #   handler: handler.get\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: get\n  # update:\n  #   handler: handler.update\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: put\n  # delete:\n  #   handler: handler.delete\n  #   events:\n  #     - http:\n  #         path: /v1/message/{id}\n  #         method: delete\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    messageTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: ${self:service}-message-${opt:stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: 'S'\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":201390457,"files":["# NOTE: update this with your service name\nservice: serverless-notes\n\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n# iamRoleStatements: define la politica de permisos para la funcion La,bda.\n# En este caso, las funciones de Lambda tienen permisos para acceder a DynamoDB\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\nfunctions:\n  # Se define un end-point api http que llama a la funcion principal en create.js\n  # path: ruta url /notes\n  # method: POST request\n  # cors: habilitado cors para la llamada a la api de dominio cruzado del navegador\n  # authorizer: autenticacion usando el rol AWS IAM\n\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: note/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":214455651,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: komodo-bi-dashboard\n# app and org for use with dashboard.serverless.com\napp: komodo-bi-dashboard\norg: ianoutterside\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n  region: eu-west-1\n  profile: serverless-komodo-bi-dashboard\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.METRICS_TABLE}\"\n\n# you can define service wide environment variables here\n  environment:\n    METRICS_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  metrics-list:\n    handler: src/routes/metrics.list\n    events:\n     - http:\n         path: metrics\n         method: get\n\n  metrics-create:\n    handler: src/routes/metrics.create\n    events:\n     - http:\n         path: metrics\n         method: post\n  \n  metrics-set:\n    handler: src/routes/metrics.set\n    events:\n     - http:\n         path: metrics/{id}\n         method: put\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    includeModules: true\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    MetricsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.METRICS_TABLE}"]},{"id":101689501,"files":["service: vatsim-data\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: arn:aws:s3:::${self:custom.bucket}/*\n\ncustom:\n  bucket: vatsim-data-${opt:stage, self:provider.stage}\n  stage: ${opt:stage, self:provider.stage}\n  prd:\n    schedule:\n      rate: rate(1 minute)\n  dev:\n    schedule:\n\nfunctions:\n  store:\n    handler: handler.store\n    environment:\n      BUCKET: ${self:custom.bucket}\n    events:\n      - schedule: ${self:custom.${self:custom.stage}.schedule}\n"]},{"id":219434050,"files":["service: lambda-config\n\nprovider:\n  name: aws\n  stage: stg\n  region: us-east-1\n  runtime: nodejs10.x\n  timeout: 60\n  apiName: lambda-config-${self:provider.stage}\n  logs:\n    restApi: true\n  memorySize: 256\n  versionFunctions: false\n\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'ssm:GetParameters*'\n      Resource: '*'\n\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  withMiddleware:\n    handler: handler.handler\n    events:\n      - http:\n          path: /mid/api/env\n          method: get\n          cors: true\n"]},{"id":220962170,"files":["tenant: demo # Enter your tenant name here\napp: serverless-test # Enter your application name here\nservice: demo-crud\n\nframeworkVersion: \">=1.38.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  createUser:\n    handler: src/users.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n  getUsers:\n    handler: src/users.getUsers\n    events:\n      - http:\n          path: user\n          method: get\n          cors: true\n  updateUser:\n    handler: src/users.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n  deleteUser:\n    handler: src/users.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n"]},{"id":224933189,"files":["service: python-api\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: ${self:custom.profiles.${self:provider.stage}}\n  stage: ${opt:stage, self:custom.defaultStage}\n  memorySize: 128\n  logRetentionInDays: 14\n  timeout: 15\n  region: ${self:custom.configuration.region, opt:region}\n\n  # iamRoleStatements:\n  #   - Effect: Allow\n  #     Action:\n  #       - iam:permsission\n  #     Resource:\n  #       - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:x:x:x\n  environment:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    ACCOUNT_ID: \"#{AWS::AccountId}\"\n\nplugins:\n  - serverless-python-requirements\n  - serverless-pseudo-parameters\n  - serverless-prune-plugin\n  - serverless-wsgi\n  - serverless-offline-python\n\ncustom:\n  serverless-offline:\n    port: 4000\n  configuration: ${file(./config/${self:provider.stage}.yml):config}\n  defaultStage: dev\n  profiles:\n    dev: personal\n    staging: personal\n  ## PLUGINS\n  prune:\n    automatic: true\n    number: 5\n  pythonRequirements:\n    dockerizePip: non-linux\n  wsgi:\n    app: src/app.app\n    packRequirements: false\n\n  # layers:\n  #   - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:layer-name:version\npackage:\n include:\n   - src/**\n exclude:\n   - __pycache__/**\n   - venv/**\n   - node_modules/**\n   - package.json\n   - yarn.lock\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n          # cors: true\n      - http:\n          path: '{proxy+}'\n          method: ANY\n          # cors: true\n    # environment:\n    # layers: ${self:custom.layers}\n    tags:\n      service: api\n","myApp:\n component: serverless-next.js\n#  inputs:\n#   domain:\n#     - ${env.subdomain}\n#     - ${env.domain}\n","---\nsecrets:\n  staging:\n    SECRET: ''\n"]},{"id":224912516,"files":["# serverless deploy --aws-profile tanmay\nservice: my-notes\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python3.8\n  stage: dev\n  region: us-east-1\n  profile: tanmay\n  environment:\n    DYNAMODB_TABLE_NOTES: 'notes'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      # Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  updateNotes:\n    handler: notes.update\n    events:\n      - http:\n          path: update\n          method: post\n          cors: true\n\n  getNotes:\n    handler: notes.get\n    events:\n      - http:\n          path: get\n          method: get\n          cors: true\n  \nresources:\n  Resources:\n\n    NotesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE_NOTES}\n"]},{"id":83222315,"files":["service: token\n\n# use the stage from the cli if provided, otherwise fallback to the one in provider\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  tableName: ${self:service}_${self:custom.stage}_tokens\n\n  # tokens expire after 30 days\n  tokenExpiry: 2592000\n\n  # configure read and write capacity\n  rcu: 25\n  wcu: 25\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # Gives permission on the DynamoDB table\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.tableName}\"\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n    TOKEN_EXPIRY: ${self:custom.tokenExpiry}\n\n  stage: dev\n  region: eu-west-2\n\npackage:\n  exclude:\n    - .idea/**\n    - .npmignore\n    - package.json\n    - node_modules/**\n    - tests/**\n    - docs/**\n    - README.md\n    - tools/**\n\nfunctions:\n  add:\n    handler: functions/add.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: put\n  get:\n    handler: functions/get.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: get\n  patch:\n    handler: functions/patch.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: patch\n  delete:\n    handler: functions/delete.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: delete\n\nresources:\n  Resources:\n    tokenTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.rcu}\n          WriteCapacityUnits: ${self:custom.wcu}\n"]},{"id":120205590,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: wheatley-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n    - .git/**\n    - .gitattributes\n    - .gitignore\n    - LICENSE\n    - node_modules/**\n    - package.json\n    - README.md\n\nfunctions:\n  # hello:\n  #   handler: handler.hello\n  #   events:\n  #     - http: true\n  #       x-azure-settings:\n  #         authLevel : anonymous\n  #     - http: true\n  #       x-azure-settings:\n  #         direction: out\n  #         name: res\n\n  run:\n    handler: handler.run\n    events:\n      - http: true\n        x-azure-settings:\n          name: request\n          methods:\n            - GET\n            - POST\n          # route: graphql\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: response\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n"]},{"id":132221906,"files":["service: custom-authoriser-api-key\n\n\nplugins:\n  - serverless-webpack # Use serverless-webpack plugin to transpile ES6/ES7\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-plugin-aws-alerts\n\ncustom:\n  customDomain:\n      domainName: shane.shanelee.xyz\n      certificateName: '*.shanelee.xyz'\n      basePath: ''\n      stage: ${self:provider.stage}\n      createRoute53Record: true\n      endpointType: 'regional'\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn'\n    package:\n        individually: true #Webpack compiles and optimizes each function individually,\n        # removing unnecessary imports and reducing code sizes significantly\n\n  alerts:\n    stages:\n      - dev\n    topics:\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: xxx@gmail.com # Change this to your email address\n    definitions:  # these defaults are merged with your definitions\n      # functionErrors:\n        # period: 300 # override period\n      customAlarm:\n        description: 'My custom alarm'\n        namespace: 'AWS/Lambda'\n        metric: exceptions\n        threshold: 0\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanThreshold\n        pattern: 'exception Bar'\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - customAlarm\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  apiKeys:\n      - ${opt:stage}-key\n  usagePlan:\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n\n# you can overwrite defaults here\n#  stage: dev\n# region: ap-southeast-2\n\n\nfunctions:\n  hello:\n    handler: src/hello.default\n    events:\n          - http:\n              path: hello\n              method: get\n              # cors: true\n              private: true\n              authorizer:\n                name: authorizerFunc\n                resultTtlInSeconds: 0\n                # identitySource: method.request.header.Authorization\n                # identityValidationExpression: someRegex\n                type: request\n  authorizerFunc:\n    handler: src/authoriser.default\n\n  app:\n    handler: src/index.handler\n    events:\n          - http: ANY /\n          - http: 'ANY {proxy+}'\n"]},{"id":146800193,"files":["service: carbon-slackbot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  profile: serverless\n  region: us-east-1\n  environment:\n    BUCKET: \"carbon-slackbot-us-east-1-01\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action: sqs:sendMessage\n      Resource: \"arn:aws:sqs:us-east-1:676718483588:CarbonQueue\"\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n        - s3:DeleteObject\n      Resource: \"arn:aws:s3:::carbon-slackbot-us-east-1-01/*\"\n\nfunctions:\n  slack:\n    handler: slack.handler\n    events:\n      - http:\n          path: slack\n          method: post\n  carbon:\n    handler: carbon.handler\n    events:\n      - sqs: arn:aws:sqs:us-east-1:676718483588:CarbonQueue\n"]},{"id":148193118,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nplugins:\n  - serverless-offline\n\nservice: teste # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello #Name the function\n    events:\n     - http:\n         path: helloWorld # endpoint eg.: user/creat\n         method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'heitor'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":160588008,"files":["service: auto-checker-visa\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\nusagePlan: \n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n      \nfunctions:\n\n  checker:\n    handler: handler.checker \n    events:\n      - schedule: rate(60 minutes)\n"]},{"id":164942356,"files":["service: uniqlo-product-search # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  checkstock:\n    handler: handler.checkstock\n"]},{"id":161361636,"files":["service: replaceninja\n\nframeworkVersion: \">=1.34.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-2\n  environment:\n    LINK_TABLE: ${self:custom.linkTable}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n      Resource: \"arn:aws:dynamodb:us-east-2:334069501049:table/ProdNinjaLinkTable\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Query\"\n      Resource: \"arn:aws:dynamodb:us-east-2:334069501049:table/ProdNinjaLinkTable/index/ByLocation\"\n\ncustom:\n  linkTable: ProdNinjaLinkTable\n\nfunctions:\n  index:\n    handler: src/index.handler\n    events:\n      - http:\n          path: '/'\n          method: 'get'\n  replace:\n    handler: src/handler.handler\n    events:\n      - http:\n          path: '/{key+}'\n          method: get\n          cors: true\n  update:\n    handler: src/update.handler\n    events:\n      - http:\n          path: 'update'\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    LinkTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ProdNinjaLinkTable\n        KeySchema:\n          - AttributeName: Key\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: Key\n            AttributeType: S\n          - AttributeName: location\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: ByLocation\n            KeySchema: \n              - AttributeName: location\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n"]},{"id":161864787,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-offline\n\nregion: ap-northeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":202169397,"files":["service:\n  name: aws-nodejs-typescript\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ../../../webpack.config.js\n    includeModules:\n      packagePath: ../../../package.json\n    packager: yarn\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    # events:\n    #   - http:\n    #       method: get\n    #       path: hello"]},{"id":208829965,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sensor-storage\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: production\n  region: eu-north-1\n  memorySize: 128\n  timeout: 30\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:BatchWriteItem\n        - dynamodb:Query\n        - dynamodb:Scan\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'\n\nfunctions:\n  status:\n    handler: handler.status\n    events:\n      - http:\n          method: GET\n          path: /status\n          cors: true\n  # all:\n  #   handler: handler.all\n  #   events:\n  #     - http:\n  #         method: GET\n  #         path: /all\n  #         cors: true\n  add:\n    handler: handler.add\n    timeout: 25\n    events:\n      - http:\n          method: POST\n          path: /add\n          cors: true\n  addOne:\n    handler: handler.addOne\n    timeout: 25\n    events:\n      - http:\n          method: POST\n          path: /addOne\n          cors: true\n#  toGoogleSheet:\n#    runtime: python2.7\n#    handler: to_google_sheet.main\n#    events:\n#      - stream: arn:aws:dynamodb:eu-central-1:413820158215:table/sensor-storage-dev/stream/2018-10-01T18:45:53.441\n\nresources:\n  Resources:\n    SensorDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: sensorId\n            AttributeType: S\n          - AttributeName: ts\n            AttributeType: S\n        KeySchema:\n          - AttributeName: sensorId\n            KeyType: HASH\n          - AttributeName: ts\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\nplugins:\n  - serverless-stack-termination-protection\n"]},{"id":220646417,"files":["service:\n  name: ex\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  apiGateway:\n    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: #DevSkim: ignore DS137138\n          method: get\n          path: hello\n"]},{"id":207866015,"files":["service: nvstore-service\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-south-1\n  memorySize: 512\n\nfunctions:\n  nvstoreFunc:\n    handler: app.handler\n    events:\n      - http:\n          path: nvstore\n          method: get\n      - http:\n          path: nvstore\n          method: put\nplugins:\n  - serverless-offline"]},{"id":213709597,"files":["service: serverless-webpack-boilerplate\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n#  stage: dev\n#  region: us-east-1\n\n#  environment:\n#    variable1: value1\n\n#package:\n#  include:\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: app/index.run\n"]},{"id":103337979,"files":["service: nkcgoadmin\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-plugin-multiple-responses\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  profile: ${file(./config/aws_params.yml):profile}\n  region: ${file(./config/aws_params.yml):region}\n  stage: ${file(./config/aws_params.yml):stage}\n  tags: \n    env: ${file(./config/aws_params.yml):stage}\n  memorySize: 1536\n  stackTags: \n    projectname: nkcgoadmin\n  deploymentBucket: us.fiduciam.nkcgoadmin.api.deploys\n  versionFunctions: true\n  runtime: nodejs6.10\n  apiKeys: false\n  environment:\n    DYNAMODB_USER_TABLE: swiftmile-prod-User\n    DYNAMODB_SNAP_TABLE: swiftmile-prod-Snap\n    DYNAMODB_BADGE_TABLE: swiftmile-prod-Badges\n    DYNAMODB_USER_BADGES_TABLE: swiftmile-prod-UserBadges\n\n    AUTH0_CLIENT: ${file(./config/aws_params.yml):AUTH0_CLIENT_ID}\n    AUTH0_SECRET: ${file(./config/aws_params.yml):AUTH0_CLIENT_SECRET}\n    AUTH0_DOMAIN: ${file(./config/aws_params.yml):AUTH0_DOMAIN}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_BADGES_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SNAP_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_BADGE_TABLE}\"\n  stackPolicy: \n    - Effect: Allow\n      Principal: \"*\"\n      Action: \"Update:*\"\n      Resource: \"*\"\n    - Effect: Deny\n      Principal: \"*\"\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n\nfunctions: ${file(./config/functions.yml):functions}"]},{"id":83765009,"files":["service: serverless-nodejs-archetype\nframeworkVersion: \"=1.9.0\"\n\nprovider:\n  name    : aws\n  runtime : nodejs6.10\n  region  : us-east-1\n  stage   : v1\n  versionFunctions: false\n  environment:\n    MY_ENV: service_env\n\nplugins:\n  - serverless-build-plugin\n\ncustom:\n  env_default: dev\n\nfunctions:\n  echo:\n    handler: dist/handler.echo\n    description: test function to echo contents of env, event and context\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n    environment:\n      MY_ENV: ${opt:env, self:custom.env_default}\n    events:\n      - http:\n          method: post\n          path: echo/{providerID}/{proxy+}\n      - s3:\n          bucket: ${self:service}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:functions.echo.environment.MY_ENV}\n            - suffix: .json\n","# method: file\n# tryFiles:\n#   - webpack.config.js\n#   - gulpfile.babel.js\n\nmethod: bundle\n\nsourceMaps : true\nbabel      : false # dist/ folder already transpile via npm scripts\nbabili     : false\nuglify     : false # Wont make a big difference on small projects\n\nmodules:\n  exclude: [\n    aws-sdk\n  ]\n\n  # deepExclude: # excluded from nested node_modules\n  #   - xmlbuilder # this breaks the build\n  #   - punycode # this breaks the build\n\nfunctions:\n  echo:\n    include:\n      - \"dist/**\"\n"]},{"id":81452927,"files":["service: faas-demo-slackbot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  region: eu-central-1\n\n\nfunctions:\n  search:\n    handler: handler.search\n\n    events:\n      - http:\n          path: search\n          method: post\n\n    environment: ${file(env.yml)}"]},{"id":116909553,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          # path: users/create\n          path: users/get\n          method: get\n      # - s3: ${env:BUCKET}\n      # - schedule: rate(10 minutes)\n      # - sns: greeter-topic\n      # - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n      # - alexaSkill\n      # - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n      # - iot:\n      #     sql: \"SELECT * FROM 'some_topic'\"\n      # - cloudwatchEvent:\n          # event:\n      #       source:\n      #         - \"aws.ec2\"\n      #       detail-type:\n      #         - \"EC2 Instance State-change Notification\"\n      #       detail:\n      #         state:\n      #           - pending\n      # - cloudwatchLog: '/aws/lambda/hello'\n      # - cognitoUserPool:\n      #     pool: MyUserPool\n      #     trigger: PreSignUp\n#    Define function environment variables here\n    # environment:\n    #   variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":139350566,"files":["service: my-mastadon\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  apiKeys:\n    - mastadon1\n  usagePlan:\n    quota:\n      limit: 2000\n      period: MONTH\n\n\nfunctions:\n  feed:\n    handler: handler.feed\n    description: Mastadon feed\n    events:\n      - http:\n          path: feed\n          method: get\n          cors: true\n          private: true\n"]},{"id":141023654,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\nservice: serverless-app-rest-api\n\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  tracing: true\n  iamRoleStatements:\n    - Effect: \"Allow\" # xray permissions (required) \n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n        - \"s3:*\"\n        - \"sqs:*\"\n        - \"rekognition:*\"\n        - \"dynamodb:*\"\n        - \"sagemaker:*\"\n        - \"states:*\"\n      Resource:\n        - \"*\"\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-step-functions\n  - serverless-pseudo-parameters\nfunctions:\n  useModel:\n    handler: handler.useModel\n    events: \n      - http: \n          path: sagemaker/validate\n          method: POST\n          cors: true\n  createIdentityValidation:\n    handler: handler.createIdentityRequest\n    events: \n      - http: \n          path: identity_validations\n          method: POST\n          cors: true\n  getIdentityValidations:\n    handler: handler.getIdentityValidations\n    events: \n      - http: \n          path: identity_validations\n          method: GET\n          cors: true\n  getIdentityValidation:\n    handler: handler.getIdentityValidation\n    events:\n      - http:\n          path: identity_validations/{id}\n          method: GET\n          cors: true\n  verify:\n    handler: handler.verifyIdentity\n    events:\n      - http:\n          path: verify\n          method: POST\n          cors: true\n  verifyIdentityV2:\n    handler: handler.verifyIdentityV2\n  getIdentityValidationStats:\n    handler: handler.getIdentityValidationStats\n    events:\n      - http:\n          path: identity_validations_stats/{customer_id}\n          method: GET\n          cors: true\n  uploadKTPImage: \n    handler: handler.uploadKTPImage\n  uploadPhotoImage: \n    handler: handler.uploadPhotoImage\n  compareKTPAndPhotoFace:\n    handler: handler.compareKTPAndPhotoFace\n  completeValidation:\n    handler: handler.completeValidation\n  samplequeue:\n    handler: handler.helloQueueMessage\n    events:\n      - sqs: arn:aws:sqs:us-west-2:YOUR_AWS_ACCOUNT_ID:sample-queue\n  sampledestinationqueue:\n    handler: handler.helloQueueMessage\n    events:\n      - sqs: arn:aws:sqs:us-west-2:YOUR_AWS_ACCOUNT_ID:sample-destination-queue\n  healthcheck:\n    handler: handler.helloWorld\n    tracing: false\n    events:\n      - http:\n          path: health-check\n          method: get\n          cors: true\n  detectNameFromKtpImages:\n    handler: handler.detectNameFromKtpImages\n  identityResult:\n    handler: handler.identityResult\n\n\nstepFunctions:\n  stateMachines: \n    verifyIdentityV3: \n      definition:\n        Comment: \"Start Identity Verification\"\n        StartAt: StartIdentityVerification\n        States:\n          StartIdentityVerification:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-verifyIdentityV2\n            ResultPath: $.results.StartIdentityVerification\n            Next: ProcessIdentityVerification\n          ProcessIdentityVerification:\n            Type: Parallel\n            Next: CompareKTPAndPhotoFace\n            Branches:\n            - StartAt: UploadKTPImageState\n              States:\n                UploadKTPImageState:\n                  Type: Task\n                  Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-uploadKTPImage\n                  ResultPath: $.results.UploadKTPImageState\n                  End: true\n            - StartAt: UploadPhotoImageState\n              States:\n                UploadPhotoImageState:\n                  Type: Task\n                  Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-uploadPhotoImage\n                  ResultPath: $.results.UploadPhotoImageState\n                  End: true\n          CompareKTPAndPhotoFace:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-compareKTPAndPhotoFace\n            Next: IdentityResult\n          IdentityResult:\n            Type: Task\n            Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-identityResult\n            End: true\n\n          # DetectNameFromKtpImages:\n          #   Type: Task\n          #   Resource: arn:aws:lambda:us-west-2:YOUR_AWS_ACCOUNT_ID:function:serverless-app-rest-api-dev-detectNameFromKtpImages\n          #   End: true\n\n# The `resources` block defines what resource do you want\nresources:\n  Resources:\n    PictureBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: serverless-app-images\n    RequestIdentityvalidationQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: requets-identity-validation\n    SampleQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: sample-queue\n    SampleDestinationQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: sample-destination-queue\n    IdentityValidationsTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: IdentityValidationsTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: customer_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: customer_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1"]},{"id":129701427,"files":["service: sync-ecs-dns\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  environment:\n    DNS_SUFFIX: example.local\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ecs:Describe*\n        - ecs:List*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - route53:Change*\n        - route53:Get*\n        - route53:List*\n      Resource: \"*\"\n\nfunctions:\n  sync-dns:\n    handler: src/index.sync\n    description: 'sync ecs dns records from cloudwatch events'\n    events:\n     - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ecs\"\n            detail-type:\n              - \"ECS Task State Change\"\n            detail:\n              clusterArn:\n                - Fn::Join: [ \"\", [ \"arn:aws:ecs:\", Ref: \"AWS::Region\", \":\", Ref: \"AWS::AccountId\", \":cluster/my-cluster\" ] ]\n"]},{"id":144491259,"files":["service: brianpatrickkemper\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  # Use an existing AWS profile defined in ~/.aws/credentials\n  # see, https://serverless.com/framework/docs/providers/aws/guide/credentials#use-an-existing-aws-profile\n  profile: brianpatrickkemper\n\n  # One Custom IAM Role For All Functions\n  # note, can easily tweak the role in AWS console\n  # see, https://serverless.com/framework/docs/providers/aws/guide/credentials#one-custom-iam-role-for-all-functions\n  role: arn:aws:iam::862171441940:role/storeFitbitHeartRate\n\nfunctions:\n  storeFitbitHeartRate:\n    handler: handler.storeFitbitHeartRate\n    events:\n      - schedule: cron(0,5,10,15,20,25,30,35,40,45,50,55,59 * * * ? *)\n    environment:\n      BUCKET: bpk-heartrate\n    memorySize: 512\n  storeGithubEvents:\n    handler: handler.storeGithubEvents\n    events:\n      - schedule: cron(0,10,20,30,40,50,59 * * * ? *)\n    environment:\n      BUCKET: bpk-github-events\n    memorySize: 512\n  storeSpotifySongs:\n    handler: handler.storeSpotifySongs\n    events:\n      - schedule: cron(0,5,10,15,20,25,30,35,40,45,50,55,59 * * * ? *)\n    environment:\n      BUCKET: bpk-spotify-songs\n    memorySize: 512\n"]},{"id":158001746,"files":["service: sls-tweet-img-rekognition \nprovider:\n  \n  name: aws  \n  runtime: nodejs8.10 \n  stage: prod\n  region: us-east-1\n  \n  environment:\n    CONSUMERKEY: #twitter customer key\n    CONSUMERSECRET: #twitter customer secret\n    ACCESSTOKENKEY: #twitter access token key\n    ACCESSTOKENSECRET: #twitter access token secret\n    MONGOURL: #Mongodb URL\n    USERNAME: # Twitter username\n    MAXLABELS: 7 # You can alter this value of labels finded by AWS Rekognition\n    MINCONFIDENCE: 80 # You can alter this value of confidence for AWS Rekognition\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - rekognition:DetectLabels\n      Resource: \"*\"  \n\nfunctions:\n  imagebot:\n    handler: handler.imagebot \n    events:\n      - schedule: rate(15 minutes)\n"]},{"id":123408188,"files":["service: stockup\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:dynamodb:*:*:table/\"\n             - Ref: ProductsDynamoDbTable\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: products\n          method: post\n          cors: true\n  list:\n    handler: handler.list\n    events:\n      - http:\n          path: products\n          method: get\n          cors: true\n  view:\n    handler: handler.view\n    events:\n      - http:\n          path: products/{id}\n          method: get\n          cors: true\n  remove:\n    handler: handler.remove\n    events:\n      - http:\n          path: products/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: products\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":162538060,"files":["service: cloudwatch-alarm-to-slack\n\ncustom:\n  config: ${file(./config.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeInstances\"\n        - \"codebuild:BatchGetProjects\"\n        - \"ecs:DescribeClusters\"\n        - \"ecs:ListTagsForResource\"\n        - \"codepipeline:GetPipeline\"\n      Resource: \"*\"\n  environment:\n    slack_path: ${self:custom.config.slack_path}\n    tag_name: cloudwatch-alarm-to-slack-isenabled\n\npackage:\n  exclude:\n    - README.md\n    - config.yml\n\nlayers:\n  cloudWatchAlarmToSlack:\n    path: layer\n\nfunctions:\n  ec2:\n    handler: events/ec2.handler\n    environment:\n      template_path: 'templates/events/ec2.tpl'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ec2\"\n            detail-type:\n              - \"EC2 Instance State-change Notification\"\n            detail:\n              state:\n                #- pending\n                - running\n                #- shutting-dwon\n                - stopped\n                #- stopping\n                #- terminated\n  codebuild:\n    handler: events/codebuild.handler\n    environment:\n      template_path: 'templates/events/codebuild.tpl'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - FAILED\n                - IN_PROGRESS\n                - STOPPED\n                - SUCCEEDED\n  ecs:\n    handler: events/ecs.handler\n    layers:\n      - {Ref: CloudWatchAlarmToSlackLambdaLayer}\n    environment:\n      template_path: 'templates/events/ecs.tpl'\n      emoji_running: \":runner::runner:\"\n      emoji_stopped: \":skull_and_crossbones:\"\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.ecs\"\n            detail-type:\n              - \"ECS Task State Change\"\n  codepipeline:\n    handler: events/codepipeline.handler\n    layers:\n      - {Ref: CloudWatchAlarmToSlackLambdaLayer}\n    environment:\n      template_path: 'templates/events/codepipeline.tpl'\n      emoji_started: ':seedling:'\n      emoji_succeeded: ':rainbow::rainbow::rainbow:'\n      emoji_failed: \":sweat_drops:\"\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codepipeline\"\n            detail-type:\n              - \"CodePipeline Pipeline Execution State Change\"\n            detail:\n              state:\n                - CANCELED\n                - FAILED\n                - RESUMED\n                - STARTED\n                - SUCCEEDED\n                - SUPERSEDED\n"]},{"id":176054417,"files":["service: yelp-scraper\n\nplugins:\n  - serverless-offline-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DYNAMODB_TABLE: yelp-ratings\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\npackage:\n  include:\n    - utilities/**\n\nfunctions:\n  scrape:\n    handler: handler.scrape\n\n  launch_scraper:\n    handler: handler.launch_scrapers\n    events:\n      - schedule: cron(0 9 ? * 2#1 *) # 9am UTC - First Monday of Each Month\n"]},{"id":223249863,"files":["service: azure-ml-image-labeling-service\n\nprovider:\n  name: azure\n  location: North Europe\n  runtime: nodejs10.x\n  environment:\n    COMPUTER_VISION_SUBSCRIPTION_KEY: ${env:COMPUTER_VISION_SUBSCRIPTION_KEY}\n    COMPUTER_VISION_ENDPOINT: ${env:COMPUTER_VISION_ENDPOINT}\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  getImageLabels:\n    handler: getImageLabels.handler\n    events:\n      - http: true\n        x-azure-settings:\n          name: req\n          methods:\n            - post\n          authLevel: anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: $return\n"]},{"id":205712964,"files":["service: hills-api\n\nprovider:\n  name: aws\n  region: ${opt:region, '${file(./serverless-shared.yml):constants.defaultRegion}'}\n  runtime: nodejs10.x # matches package.json:engines\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128 # MB, sls default is 1024, aws default is 128\n  timeout: 3 # seconds, sls default is 6, aws default is 3\n  apiGateway:\n    minimumCompressionSize: 1024 # bytes, this enables compression\n  # Only the graphql lambda needs this, but a single shared role is much easier to configure\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - rds-data:ExecuteStatement\n      Resource:\n        - Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterArn\n    - Effect: Allow\n      Action:\n        - secretsmanager:GetSecretValue\n      Resource:\n        - Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n\nplugins:\n  - serverless-api-stage\n  - serverless-offline\n  - serverless-plugin-git-variables\n  - serverless-prune-plugin\n\npackage:\n  exclude:\n    - ./**\n    - '!./node_modules/**' # don't re-include this; it'd override excludeDevDependencies\n  excludeDevDependencies: true # default is true; fyi\n  include:\n    - ./src/**/!(*.spec).js\n    - ./src/**/rhbSections.json\n\nfunctions:\n  graphql:\n    handler: src/handlers/graphql.fn\n    description: ${self:custom.versionInfo}\n    memorySize: 256 # MB, sls default is 1024, aws default is 128\n    timeout: 6 # seconds, sls default is 6, aws default is 3. Needs to be longer than Aurora Severless connect timeout for when it's sleeping\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    environment:\n      # Due to lack of support for cross-stack references in Serverless offline, ARNs must be manually copied into here before running\n      DATABASE_CLUSTER_ARN:\n        Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterArn\n      DATABASE_CLUSTER_SECRET_ARN:\n        Fn::ImportValue: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n      NODE_ENV: production # for Express, and anything else that might care\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n      - http:\n          path: graphql\n          method: get\n          cors: true\n  playground:\n    handler: src/handlers/playground.fn\n    description: ${self:custom.versionInfo}\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    events:\n      - http:\n          path: playground\n          method: get\n  schemaDump:\n    handler: src/handlers/schemaDump.fn\n    description: ${self:custom.versionInfo}\n    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472\n    reservedConcurrency: 10\n    events:\n      - http:\n          path: schema\n          method: get\n\ncustom:\n  exportGitVariables: false\n  prune:\n    automatic: true\n    number: 3\n  stageSettings:\n    MethodSettings:\n      # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\n      ThrottlingBurstLimit: 20\n      ThrottlingRateLimit: 20\n  versionInfo: ${git:branch}:${git:describeLight} isDirty=${git:isDirty} \"${git:message}\"\n","#\n# Separate stack for the database, to allow separate deployment.\n#\n# It doesn't need to be deployed nearly as often as the lambdas, which was a problem when\n# they were the same serverless.yml (and hence CloudFormation stack).\n#\nservice: hills-api-db\n\nprovider:\n  name: aws\n  # File reference path is relative to working director, not this file\n  region: ${opt:region, '${file(./serverless-shared.yml):constants.defaultRegion}'}\n  stage: ${opt:stage, 'dev'}\n\nplugins:\n  - serverless-plugin-scripts\n\nresources:\n  Outputs:\n    HillsApiDatabaseClusterArn:\n      Export:\n        Name: ${self:provider.stage}-HillsApiDatabaseClusterArn\n      Value:\n        # RDS::DBCluster doesn't support Fn::GetAtt for Arn, so assemble it manually\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:rds'\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - cluster\n            - hills-api-db-${self:provider.stage}\n    HillsApiDatabaseClusterSecretArn:\n      Export:\n        Name: ${self:provider.stage}-HillsApiDatabaseClusterSecretArn\n      Value:\n        Ref: HillsDatabaseSecret\n  Resources:\n    HillsDatabaseSecret:\n      Type: AWS::SecretsManager::Secret\n      Properties:\n        Name: hills-db-credentials-${self:provider.stage}\n        Description: Hills RDS DB auto-generated user password\n        GenerateSecretString:\n          SecretStringTemplate: '{\"username\": \"admin\"}'\n          GenerateStringKey: 'password'\n          PasswordLength: 30\n          ExcludeCharacters: '\"@/\\'\n\n    HillsApiDatabase:\n      Type: AWS::RDS::DBCluster\n      Properties:\n        DBClusterIdentifier: hills-api-db-${self:provider.stage}\n        # Create an initial database in this cluster\n        DatabaseName: HILLS\n        Engine: aurora\n        EngineMode: serverless\n        ScalingConfiguration:\n          AutoPause: true\n          MaxCapacity: 1\n          MinCapacity: 1\n          SecondsUntilAutoPause: 600 # 10 minutes\n        # Enable data API (supported via CloudFormation since December 2019)\n        EnableHttpEndpoint: true\n        # Aurora Serverless currently doesn't support IAM Database Authentication\n        # EnableIAMDatabaseAuthentication: true\n        MasterUsername: admin\n        MasterUserPassword:\n          Fn::Join:\n            - ':'\n            - - '{{resolve:secretsmanager'\n              - Ref: HillsDatabaseSecret\n              - 'SecretString:password}}'\n\ncustom:\n  scripts:\n    commands:\n      # Due to https://github.com/svdgraaf/serverless-pseudo-parameters/issues/25, ARNs must be manually copied into here before running\n      deploy-data: node ./database/populate/populate.js ${self:provider.region} arn:cluster arn:cluster-secret\n      deploy-tables: node ./database/createTables.js ${self:provider.region} arn:cluster arn:cluster-secret\n","constants:\n  # Run lambdas & database in same region to avoid data transfer costs.\n  # Ireland: closest region that supports Data API for Aurora Serverless.\n  defaultRegion: eu-west-1\n"]},{"id":192426107,"files":["service: biztechApp\ntenant: ianmh\napp: biztechapp\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'dev'}\n  apiKeys:\n    - ${opt:stage, 'dev'}-key\n  runtime: nodejs10.x\n  region: us-west-2\n  cfLogs: true\n  environment:\n    ENVIRONMENT: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n        - dynamodb:UpdateItem\n      Resource:\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechUsers\"\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechEvents\"\n        - \"arn:aws:dynamodb:us-west-2:432714361962:table/biztechRegistration\"\n\nfunctions:\n  hello:\n    handler: handlers/default.hello\n    events:\n      - http:\n          path: /hello\n          method: get\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userCreate:\n    handler: handlers/user.create\n    events:\n      - http:\n          path: users/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userGet:\n    handler: handlers/user.get\n    events:\n      - http:\n          path: users/get\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  userUpdate:\n    handler: handlers/user.update\n    events:\n      - http:\n          path: users/update\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventCreate:\n    handler: handlers/event.create\n    events:\n      - http:\n          path: events/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventGet:\n    handler: handlers/event.get\n    events:\n      - http:\n          path: events/get\n          method: get\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventUpdate:\n    handler: handlers/event.update\n    events:\n      - http:\n          path: events/update\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  eventScan:\n    handler: handlers/event.scan\n    events:\n      - http:\n          path: events/scan\n          method: get\n          request:\n            parameters:\n              querystrings:\n                code: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationCreate:\n    handler: handlers/registration.create\n    events:\n      - http:\n          path: registration/create\n          method: post\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationQueryStudent:\n    handler: handlers/registration.queryStudent\n    events:\n      - http:\n          path: registration/queryStudent\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n  registrationScanEvent:\n    handler: handlers/registration.scanEvent\n    events:\n      - http:\n          path: registration/scanEvent\n          method: get\n          request:\n            parameters:\n              querystrings:\n                eventID: true\n          cors: true\n          private: ${file(./config.${self:provider.stage}.json):REQUIRE_API_KEY}\n","- name: default responds with 200 and Yeet\n  endpoint: {function: hello}\n  response:\n    status: 200\n    body: \n      message: 'Yeet!'\n\n- name: user create returns 200\n  endpoint:\n    method: POST\n    path: users/create\n  request:\n    body:\n      id: 144444\n      fname: test\n      lname: dude\n      faculty: Science\n  response:\n    status: 200\n    body:\n      message: 'Created!'\n\n- name: user create no ID returns 406\n  endpoint:\n    method: POST\n    path: users/create\n  request:\n    body:\n      fname: foo\n      lname: bar\n      email: foo\n      faculty: bar\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n      data:\n        fname: foo\n        lname: bar\n        email: foo\n        faculty: bar\n\n- name: user get no ID returns 406\n  endpoint:\n    method: GET\n    path: users/get\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n      data: null\n\n- name: user get found returns 200\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      id: 144444\n      fname: test\n      lname: dude\n      faculty: Science\n\n- name: user get not found returns 404\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 0\n  response:\n    status: 404\n    body: \"\\\"User not found.\\\"\"\n\n- name: user update returns 200\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      id: 144444\n      fname: updateTest\n      lname: dudeGotUpdated\n      faculty: Sauder\n  response:\n    status: 200\n    body: \"\\\"Update succeeded.\\\"\"\n\n- name: user get update info returns 200\n  endpoint:\n    method: GET\n    path: users/get\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      id: 144444\n      fname: updateTest\n      lname: dudeGotUpdated\n      faculty: Sauder\n\n- name: user update no ID returns 406\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      fname: badUpdateTest\n      lname: dudeNotUpdated\n      faculty: LFS\n  response:\n    status: 406\n    body:\n      message: \"User ID not specified.\"\n\n- name: user update not found returns 404\n  endpoint:\n    method: POST\n    path: users/update\n  request:\n    body:\n      id: -20\n      fname: badUpdateTest\n      lname: dudeNotUpdated\n  response:\n    status: 404\n    body: \"\\\"User not found.\\\"\"\n\n- name: event create returns 200\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      id: testevent\n      ename: test\n      capac: 2000000\n      img: yup\n      code: ripp\n  response:\n    status: 200\n    body:\n      message: 'Event Created!'\n\n- name: event create no ID returns 406\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      ename: test\n      capac: 2000000\n      img: yup\n  response:\n    status: 406\n    body:\n      message: 'Event ID not specified.'\n      data:\n        ename: test\n        capac: 2000000\n        img: yup\n\n- name: event create no capac returns 406\n  endpoint:\n    method: POST\n    path: events/create\n  request:\n    body:\n      id: testevent\n      ename: test\n      img: yup\n      code: test\n  response:\n    status: 406\n    body:\n      message: 'Capacity invalid, please provide valid number.'\n      data:\n        id: testevent\n        ename: test\n        img: yup\n\n- name: event get returns 200\n  endpoint:\n    method: GET\n    path: events/get\n  response:\n    status: 200\n\n- name: event update returns 200\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      id: testevent\n      ename: testUpdated\n      capac: 7\n      img: nope\n      code: test\n  response:\n    status: 200\n    body: \"\\\"Update succeeded.\\\"\"\n\n- name: event update not found returns 404\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      id: nonexistanttestidwoo\n      ename: testUpdated\n      capac: 7\n      img: nope\n      code: test\n  response:\n    status: 404\n    body: \"\\\"Event not found.\\\"\"\n\n- name: event update no ID returns 406\n  endpoint:\n    method: POST\n    path: events/update\n  request:\n    body:\n      ename: testUpdated\n  response:\n    status: 406\n    body:\n      message: 'Event ID not specified.'\n\n- name: event scan match returns 200\n  endpoint:\n    method: GET\n    path: events/scan\n  request:\n    form:\n      code: test\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: event scan no match returns 200\n  endpoint:\n    method: GET\n    path: events/scan\n  request:\n    form:\n      code: -1\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration create returns 200\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      id: 144444\n      status: registered\n  response:\n    status: 200\n    body:\n      message: 'Update succeeded.'\n\n- name: registration create no id returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      status: registered\n  response:\n    status: 406\n    body:\n      message: 'Registration student ID not specified.'\n\n- name: registration create no eventID returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      id: 144444\n      status: registered\n  response:\n    status: 406\n    body:\n      message: 'Registration event ID not specified.'\n\n- name: registration create no status returns 406\n  endpoint:\n    method: POST\n    path: registration/create\n  request:\n    body:\n      eventID: testevent\n      id: 144444\n  response:\n    status: 406\n    body:\n      message: 'Status not specified.'\n\n- name: registration queryStudent returns 200\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n      id: 144444\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: registration queryStudent no match returns 200\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n      id: -1\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration queryStudent no ID returns 406\n  endpoint:\n    method: GET\n    path: registration/queryStudent\n  request:\n    form:\n  response:\n    status: 406\n    message: 'Student ID not specified.'\n\n- name: registration scanEvent returns 200\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n      eventID: testevent\n  response:\n    status: 200\n    body:\n      size: 1\n\n- name: registration scanEvent no match returns 200\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n      eventID: nonexistanttestidwoo\n  response:\n    status: 200\n    body:\n      size: 0\n\n- name: registration scanEvent no ID returns 406\n  endpoint:\n    method: GET\n    path: registration/scanEvent\n  request:\n    form:\n  response:\n    status: 406\n    message: 'Event ID not specified.'\n"]},{"id":228188602,"files":["\nservice: lambda-norma\n\nplugins:\n  - serverless-step-functions\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  fetch:\n    handler: functions/fetch.handler\n  decode:\n    handler: functions/decode.handler\n  dec:\n    handler: functions/dec.handler\n  inc:\n    handler: functions/inc.handler\n  beqz:\n    handler: functions/beqz.handler\n  hasNextInstruction:\n    handler: functions/hasNextInstruction.handler\n\nstepFunctions:\n  validate: true\n  stateMachines:\n    lambdaNormaFn:\n      name: lambdaNormaStateMachine\n      definition:\n        Comment: \"NORMA-like machine simulator\"\n        StartAt: Fetch\n        States:\n          Fetch:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [fetch, Arn]\n            Next: Decode\n          Decode:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [decode, Arn]\n            Next: Execute\n          Execute:\n            Type: Choice\n            Choices:\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"dec\"\n                Next: dec\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"inc\"\n                Next: inc\n              - Variable: \"$.body.decoded.inst\"\n                StringEquals: \"beqz\"\n                Next: beqz\n          dec:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [dec, Arn]\n            Next: VerifyNextInstruction\n          inc:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [inc, Arn]\n            Next: VerifyNextInstruction\n          beqz:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [beqz, Arn]\n            Next: VerifyNextInstruction\n          VerifyNextInstruction:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [hasNextInstruction, Arn]\n            Next: HasNextInstruction?\n          HasNextInstruction?:\n            Type: Choice\n            Choices:\n              - Variable: \"$.body.hasNextInst\"\n                BooleanEquals: false\n                Next: Halt\n              - Variable: \"$.body.hasNextInst\"\n                BooleanEquals: true\n                Next: RepeatCycle\n          RepeatCycle:\n            Type: Pass\n            Next: Fetch\n          Halt:\n            Type: Pass\n            End: true"]},{"id":110466185,"files":["service: articles-dispenser-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    CONSUMER_KEY: \"SECRET\"\n    CLIENT_URL: \"URL\"\n\nplugins:  \n  - serverless-offline\n\nfunctions:\n  getRequestToken:\n    handler: handler.getRequestToken\n    events:\n      - http:\n          path: getRequestToken\n          method: get\n  getAccessToken:\n    handler: handler.getAccessToken\n    events:\n      - http:\n          path: getAccessToken\n          method: get\n          request: \n            parameters:\n              querystrings:\n                url: true\n  getArticles:\n    handler: handler.getArticles\n    events:\n      - http:\n          path: getArticles\n          method: get\n          request: \n            parameters:\n              querystrings:\n                url: true"]},{"id":94599931,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ow-help-wanted\ncustom:\n  config: ${file(config.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${opt:profile, env:PROFILE, self:custom.config.profile}\n  stage: ${opt:stage, env:STAGE, self:custom.config.stage}\n  region: us-east-1\n\n# you can overwrite defaults here\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    GITHUB_AUTH_TOKEN: ${env:GITHUB_AUTH_TOKEN, self:custom.config.github_auth_token}\n    GITHUB_USERNAME: ${env:GITHUB_USERNAME, self:custom.config.github_username}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  githubData:\n    handler: handler.githubData\n    events:\n      - http:\n          path: /github-data\n          method: get\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":112421082,"files":["service: jira-slack-webhook\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    WEBHOOK_URLS: ${env:WEBHOOK_URLS, file(.config.yml):webhookUrls}\n    WEBHOOK_TITLE: ${env:WEBHOOK_TITLE, file(.config.yml):webhookTitle}\n    WEBHOOK_MESSAGE: ${env:WEBHOOK_TITLE, file(.config.yml):webhookTitle, env:WEBHOOK_TITLE, file(.config.yml):webhookTitle}\n\nfunctions:\n  webhook:\n    handler: index.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n\n"]},{"id":95879336,"files":["service: aws-lambda-dynamodb-trigger\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource:\n        Fn::GetAtt: [DynamoDBTableUser, StreamArn]\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchWriteItem\n      Resource:\n        Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTableUserReplica]]\n\nfunctions:\n  trigger:\n    handler: functions/trigger/trigger.handler\n    environment:\n      TABLE_REPLICA:\n        Ref: DynamoDBTableUserReplica\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    # DynamoDB table\n    DynamoDBTableUser:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-user-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    # Stream Event for User table\n    EventTableUser:\n      DependsOn: DynamoDBTableUser\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 25\n        EventSourceArn:\n          Fn::GetAtt: [DynamoDBTableUser, StreamArn]\n        FunctionName:\n          Fn::GetAtt: [TriggerLambdaFunction, Arn]\n        StartingPosition: TRIM_HORIZON\n    # DynamoDB table replica\n    DynamoDBTableUserReplica:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-user-replica-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":139610957,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: test-bool # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  test1:\n    handler: handlers/test1.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":131824804,"files":["service: zip-downloadable\n\ncustom:\n  local: local\n  deployStage: ${opt:stage, self:custom.local}\n  config: ${file(src/config/${self:custom.deployStage}.js):default}\n  prune:\n    automatic: true\n    number: 3\n  cors:\n    origins:\n      - '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - X-RDC-Prosoft-Correlation-ID\n    allowCredentials: false\n  # logRetentionInDays: 3 # https://www.npmjs.com/package/serverless-plugin-log-retention\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${self:custom.config.awsRegion}\n  stage: ${self:custom.deployStage}\n  timeout: 60\n  memorySize: 192\n  vpc:\n    securityGroupIds:\n      - ${self:custom.config.vpcSecurityGroup}\n    subnetIds:\n      - ${self:custom.config.vpcSubnetA}\n      - ${self:custom.config.vpcSubnetB}\n#      - ${self:custom.config.vpcSubnetC}\n  environment:\n    NODE_ENV: ${self:custom.deployStage}\n    S3_BUCKET: ${self:custom.config.bucketName}\n  stackTags:\n    owner: Owner\n    component: Component\n    product: Product\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        - \"arn:aws:s3:::${self:custom.config.bucketName}/*\"\n        - \"arn:aws:s3:::${self:custom.config.bucketName}\"\n    - Effect: Allow\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DeleteNetworkInterface\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricData\n      Resource: \"*\"\n\nplugins:\n  - serverless-plugin-log-retention\n  - serverless-prune-plugin\n\nfunctions:\n  download:\n    handler: src/handler.download\n    events:\n      - http:\n          path: /download\n          method: POST\n          cors: ${self:custom.cors}\n\nresources:\n  Resources:\n    ApiGatewayDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.config.acmCertArn}\n        DomainName: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}\n    BasePathMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      DependsOn:\n        - DNSRecord\n      Properties:\n        DomainName: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}\n        RestApiId: { Ref: ApiGatewayRestApi }\n        Stage: ${self:custom.deployStage}\n        BasePath: (none)\n    DNSRecord:\n      Type: AWS::Route53::RecordSet\n      Properties:\n        HostedZoneName: ${self:custom.config.domainNameZone}.\n        Name: ${self:custom.config.domainName}.${self:custom.config.domainNameZone}.\n        Type: CNAME\n        TTL: \"60\"\n        ResourceRecords:\n          - Fn::Join: [ \"\", [\n            { Ref: ApiGatewayRestApi },\n            \".execute-api.${self:custom.config.awsRegion}.amazonaws.com\"\n          ]]"]},{"id":126149969,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: find-places-test\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getVenues:\n    handler: handler.getVenues\n    events:\n     - http:\n         path: venues\n         method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125445382,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125714250,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n  includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  list:\n    handler: api/list_note.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  create:\n    handler: api/insert_note.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  view:\n    handler: api/view_note.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update: \n    handler: api/update_note.main\n    events:\n      - http:\n        path: notes/{id}\n        method: put\n        cors: true\n        authorizer: aws_iam\n  delete:\n    handler: api/delete_note.main\n    events:\n      - http: \n        path: notes/{id}\n        method: delete\n        cors: true\n        authorizer: aws_iam"]},{"id":148014316,"files":["type: landing-page\n\ncomponents:\n  mapNetlifySite:\n    type: netlify-site\n    inputs:\n      netlifyApiToken: <Enter your Netlify Token here>\n      githubApiToken: <Enter your Github Token here>\n      siteName: my-awesome-site-lol-lol.netlify.com\n      siteDomain: testing-lol-lol-lol.com\n      siteRepo: https://github.com/simonghrt/city-viz-test\n      siteBuildCommand: cd front && npm install && npm run build\n      siteBuildDirectory: front/build\n      siteForceSSL: false\n      siteRepoBranch: master\n      siteRepoAllowedBranches:\n          - master\n","type: rest-api-app\n\ncomponents:\n\n    getCityCenter:\n        type: aws-lambda\n        inputs:\n            memory: 512\n            timeout: 10\n            handler: handler.getCityCenter\n\n    getCityArea:\n        type: aws-lambda\n        inputs:\n            memory: 512\n            timeout: 10\n            handler: handler.getCityArea\n\n    geoApi:\n        type: rest-api\n        inputs:\n            gateway: aws-apigateway\n            routes:\n                /city:\n                    /centre:\n                        post:\n                            function: ${getCityCenter}\n                            cors: true\n                    /area:\n                        post:\n                            function: ${getCityArea}\n                            cors: true\n"]},{"id":156997541,"files":["# Serverless.yml Reference\n# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\n# Switch between credentials\n# https://serverless.com/framework/docs/providers/aws/guide/credentials/\n\nservice: test-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-jest-plugin\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  jest:\n    collectCoverage: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:GetObjectAcl\n      Resource: arn:aws:s3:::bucket*\n    - Effect: Allow\n      Action:\n        - sns:publish\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  auth:\n    handler: src/auth.handler\n    events:\n      - http:\n          path: auth\n          method: post\n          cors: true\n    environment:\n      UserPoolId: # Pool ID\n      ClientId: # Client ID\n\n  graphql:\n    handler: src/graphql.handler\n    events:\n      - http:\n          path: graphQL\n          method: post\n          cors: true\n          authorizer:\n            arn: # arn of authorizer (typically cognito user pool)\n    environment:\n      Region: # Region\n      UserPoolId: # UserPoolId\n      ClientId: # ClientId\n      ArangoDBName: # ArangoDBName \n      ArangoURL: # ArangoURL\n      ArangoUser: # ArangoUser\n      ArangoPW: # ArangoPW\n      Bucket: # Bucket\n\n  triggers:\n    handler: src/auth-triggers.handler\n    environment:\n      AppUrl: # AppUrl\n      ChangePasswordRoute: # ChangePasswordRoute\n      ResetPasswordRoute: # ResetPasswordRoute\n      UserPoolId: # UserPoolId\n\n  define-auth-challenge:\n    handler: src/define-auth-challenge.handler\n\n  create-auth-challenge:\n    handler: src/create-auth-challenge.handler\n    environment:\n      AppUrl: # AppUrl\n\n  verify-auth-challenge:\n    handler: src/verify-auth-challenge.handler\n\n  files:\n    handler: src/files.handler\n    events:\n      - http:\n          path: files\n          method: get\n          cors: true\n          authorizer:\n            arn: arn of authorizer (typically cognito user pool)\n    environment:\n      Region: # Region\n      Bucket: # Bucket\n      UserPoolId: # UserPoolId"]},{"id":174518861,"files":["service: serverless-sns-sms-logs-to-ddb\npackage:\n    include:\n        - src/**\n\nprovider:\n    name: aws\n    region: eu-west-1\n    runtime: nodejs8.10\n    stage: ${opt:stage, self:custom.defaultStage}\n    profile: ${opt:profile}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource:\n          - \"arn:aws:dynamodb:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:table/SMSEventsFromLogs\"\n\n    environment:\n\nfunctions:\n    onSMSMessage:\n        handler: src/listener.onSMSMessage\n        events:\n            - cloudwatchLog:\n                logGroup: sns/${self:provider.region}/${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}/DirectPublishToPhoneNumber\n            - cloudwatchLog:\n                logGroup: sns/${self:provider.region}/${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}/DirectPublishToPhoneNumber/Failure\nplugins:\n    - serverless-prune-plugin\n    - serverless-scriptable-plugin\n\ncustom:\n    defaultStage: dev\n    profiles:\n        dev:\n            AWS_PROFILE: sandbox\n            AWS_ACCOUNT_NUMBER: <use you Account Number>\n    prune:\n        automatic: true\n        number: 1\n\nresources:\n    Resources:\n        SMSEventsFromLogsDynamoDBTable: ${file(./CloudFormation/DynamoDB/SMSEventsFromLogs.yml):Table}\n        CloudWatchInvokePolicy:\n            Type: AWS::Lambda::Permission\n            DependsOn: OnSMSMessageLambdaFunction\n            Properties:\n                Action: lambda:InvokeFunction\n                SourceArn: arn:aws:logs:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:*\n                Principal: logs.${self:provider.region}.amazonaws.com\n                FunctionName:  arn:aws:lambda:${self:provider.region}:${self:custom.profiles.${self:provider.stage}.AWS_ACCOUNT_NUMBER}:function:serverless-sns-sms-logs-to-ddb-${self:provider.stage}-onSMSMessage\n\n\n\n"]},{"id":159502374,"files":["service: ciacka-net-api\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  environment:\n    SENDER_EMAIL: ${ssm:contactFormSenderEmail}\n    RECEIVER_EMAIL: ${ssm:contactFormReceiverEmail}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendMailApp:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":170296726,"files":["service: serverless-koa-apollo # todo\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  deploymentBucket: my-serverless # todo\n\nfunctions:\n  api:\n    handler: /src/main.handler\n    events:\n      - http: ANY /\n      - http: \"ANY {proxy+}\"\n"]},{"id":184384784,"files":["##################################################################################\n# CodeRecipe - a marketplace for developers to grab ready to use cloud solutions #\n# More details at: https://coderecipe.ai/architectures/47740119                  #\n##################################################################################\n\nservice: CodeRecipeSample-Image-Compression\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  environment:\n    COMPRESSED_BUCKET_NAME: ${opt:COMPRESSED_BUCKET_NAME}\n    UNCOMPRESSED_BUCKET_NAME: ${opt:UNCOMPRESSED_BUCKET_NAME}\nfunctions:\n  ImageHandler:\n    handler: index.handler\n    name: ${self:provider.stage}-ImageHandler\n    environment:\n      Stage: ${self:provider.stage}\n      COMPRESSED_BUCKET_NAME: \"#{CompressedImageBucket}\"\n    events:\n      - s3:\n          bucket: ${self:provider.stage}-${self:provider.environment.UNCOMPRESSED_BUCKET_NAME}\n    iamRoleStatementsName: ${self:provider.stage}-ImageHandler-role\n    iamRoleStatements:\n        - Effect: Allow\n          Action:\n            - s3:PutObject\n          Resource: \"arn:aws:s3:::${self:provider.stage}-${self:provider.environment.COMPRESSED_BUCKET_NAME}/*\"\n        - Effect: Allow\n          Action:\n            - s3:GetObject\n          Resource: \"arn:aws:s3:::${self:provider.stage}-${self:provider.environment.UNCOMPRESSED_BUCKET_NAME}\"\n\nresources:\n  Resources:\n    CompressedImageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}-${self:provider.environment.COMPRESSED_BUCKET_NAME}\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-scripts\n\ncustom:\n  scripts:\n    hooks:\n      'package:cleanup': 'docker pull amazonlinux; docker run --rm -v $PWD:/data -w /data node:8.10 npm install imagemin imagemin-mozjpeg'\n"]},{"id":192338323,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mail-server # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.mailSend\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":206394251,"files":["service: voidtrader\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  environment:\n    VOIDTRADER_API_URL: https://api.warframestat.us/\n    GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  update-inventory:\n    handler: inventory.update\n    events:\n      - schedule: cron(0,3 13,16 ? * 1,6 *)"]},{"id":176828999,"files":["service: subnextsrv1\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n\nfunctions:\n  mongoms:\n    handler: mongomicrosrv.mongoms\n    events:\n      - http:\n          path: v1/{entity}/{id}\n          method: get\n          cors: true\n      - http:\n          path: v1/{entity}/q/{filter}\n          method: get\n          cors: true\n      - http:\n          path: v1/{entity}/{id}\n          method: post\n          cors: true\n      - http:\n          path: v1/{entity}\n          method: put\n          cors: true\n      - http:\n          path: v1/{entity}/{id}\n          method: delete\n          cors: true\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n  microservice:\n    handler: handler.microservice\n    events:\n      - http:\n          path: db\n          method: get\n          cors: true\n      - http:\n          path: db\n          method: options\n          cors: true\n      - http:\n          path: db\n          method: post\n          cors: true\n      - http:\n          path: db\n          method: delete\n          cors: true\n      - http:\n          path: db\n          method: put\n          cors: true\n  file:\n    handler: s3files.upload\n    events:\n      - http:\n          path: file\n          method: post\n          cors: true\n      - http:\n          path: file/{env}/{id}\n          method: get\n          cors: true\n    \n  \nplugins:\n- serverless-offline"]},{"id":200735847,"files":["service: cloudformation-scheduled-tasks\nplugins:\n  - serverless-sam\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    TASKS_TABLE:\n      Ref: tasksTable\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        Ref: DestinationArns\n    - Effect: Allow\n      Action:\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt: ['tasksTable', 'Arn']\nfunctions:\n  ingest:\n    handler: src/ingest.handler\n    events:\n      - sns:\n          arn:\n            Ref: ingestTopic\n  schedule:\n    handler: src/schedule.handler\n    timeout: 60\n    events:\n      - schedule:\n          rate:\n            Ref: PollingSchedule\nresources:\n  Resources:\n    ingestTopic:\n      Type: AWS::SNS::Topic\n      Properties: {}\n    tasksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        KeySchema:\n          - AttributeName: taskId\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: taskId\n            AttributeType: 'S'\n        ProvisionedThroughput:\n          ReadCapacityUnits:\n            Ref: ReadCapacityUnits\n          WriteCapacityUnits:\n            Ref: WriteCapacityUnits\n  Parameters:\n    PollingSchedule:\n      Default: rate(5 minutes)\n      Type: String\n      Description: The CloudWatch ScheduleExpression defining the interval the polling Lambda runs at.\n    ReadCapacityUnits:\n      Default: 1\n      Type: Number\n      Description: The read capacity units for the Scheduled Tasks DynamoDB table.\n    WriteCapacityUnits:\n      Default: 1\n      Type: Number\n      Description: The write capacity units for the Scheduled Tasks DynamoDB table.\n    DestinationArns:\n      Default: ''\n      Type: CommaDelimitedList\n      Description: A comma-separated list of possible destination SNS topic ARNs for permissioning the polling Lambda.\n  Outputs:\n    IngestSNSTopicArn:\n      Description: The ARN of the Ingest SNS topic\n      Value:\n        Ref: ingestTopic\n"]},{"id":93778643,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: index.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":92883295,"files":["service: droid-race\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: kits\n  region: eu-west-1\n  environment:\n    IOT_ENDPOINT: \"a1mwbl2w3pece2.iot.eu-west-1.amazonaws.com\"\n    RACE_TABLE: \"${self:service}-${opt:stage, self:provider.stage}-races\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RACE_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RACE_TABLE}/stream/2017-05-28T06:53:38.585\"\n    - Effect: Allow\n      Action: iot:*\n      Resource: \"arn:aws:iot:${opt:region, self:provider.region}:*:*\"\n\npackage:\n  include:\n    - dao/race-dao.js\n\nfunctions:\n  alexa:\n    handler: functions/alexa.control\n    events:\n      - alexaSkill\n  create:\n    handler: functions/create.create\n    events:\n      - http:\n          path: races\n          method: post\n          cors: true\n  end:\n    handler: functions/end.end\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/things/timer/shadow/update/accepted' WHERE state.reported.endSensor = 1\"\n          enabled: true\n  list:\n    handler: functions/list.list\n    events:\n      - http:\n          path: races\n          method: get\n          cors: true\n  start:\n    handler: functions/start.start\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/things/timer/shadow/update/accepted' WHERE state.reported.startSensor = 1\"\n          enabled: true\n  stream:\n    handler: functions/stream.stream\n\nresources:\n  Resources:\n    RaceDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: \"${self:provider.environment.RACE_TABLE}\"\n\n    RaceStreamEventSourceMappingDynamoDbTable:\n      Type: AWS::Lambda::EventSourceMapping\n      DependsOn: IamRoleLambdaExecution\n      Properties:\n        BatchSize: 10\n        EventSourceArn:\n          Fn::GetAtt:\n            - RaceDynamoDbTable\n            - StreamArn\n        FunctionName:\n          Fn::GetAtt:\n            - StreamLambdaFunction\n            - Arn\n        StartingPosition: TRIM_HORIZON\n        Enabled: True\n"]},{"id":111370818,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n"]},{"id":153146475,"files":["service: express-demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-south-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n\n      - http: \"ANY {proxy+}\"\n"]},{"id":139110354,"files":["service: watcode\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: watcode-208609\n  credentials: ~/.gcloud/watcode.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  artworks:\n    handler: artworks\n    events:\n      - http: path\n\n  comments:\n    handler: comments\n    events:\n      - http: path\n\n  bookmarks:\n    handler: bookmarks\n    events:\n      - http: path\n\n  recommendations:\n    handler: recommendations\n    events:\n      - http: path\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n"]},{"id":139124152,"files":["service: tapdef-backend\n\nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    after:aws:deploy:finalize:cleanup:\n      - scripts/setup.sh ${opt:stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: us-east-1\n\n  # environment:\n    # DYNAMO_DB_ENDPOINT: https://dynamodb.us-east-1.amazonaws.com\n    # EXAMPLE_TABLE: nopos-${opt:stage}-ExampleTable\n\n  # iamRoleStatements:\n    # TODO: write more fine-grained permissions\n    # - Effect: Allow\n    #   Action:\n    #     - dynamodb:*\n    #   Resource: { \"Fn::Join\" : [\"\",[\"arn:aws:dynamodb:\",{\"Ref\":\"AWS::Region\"},\":*:*\"]] }\n\nfunctions:\n\n  GetWikipediaIntro:\n    handler: lambdas/wikipedia/getIntro.main\n    environment:\n      STAGE: ${opt:stage}\n    events:\n      - http:\n          path: wiki/intro/{article}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                article: true\n"]},{"id":142431288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bertolina-aws\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\nregion: us-east-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n# serverless deploy -v\n# serverless deploy function -f mercadoLibre\n# serverless invoke -f mercadoLibre -l\n# serverless logs -f mercadoLibre -t\nfunctions:\n  hello: # serverless invoke -f hello -l\n    handler: handler.hello\n  mercadoLibre:\n    handler: handler.mercadoLibre\n    events:\n      - http:\n          path: mercadolibre/{mercadolibre_id}\n          method: GET\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":128520362,"files":["service: callingcode-restapi-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}  \n  region: ap-southeast-1\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  lookup:\n    handler: callingcode/lookup.lookup\n    events:\n      - http:\n         method: get\n         path: callingcode/lookup\n  list:\n    handler: callingcode/list.list\n    events:\n      - http:\n          method: get\n          path: callingcode\n  get:\n    handler: callingcode/get.get\n    events:\n      - http:\n          method: get\n          path: callingcode/{code}\n"]},{"id":137172982,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mowgli-sendgrid-api # NOTE: update this with your service name\n\nplugins:\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#environment:\n#   OWNER_EMAIL: alibh619@gmail.com # TODO : Update to actual owner email\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\""]},{"id":179474490,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hello-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":181052102,"files":["\n# Service specifications\n\nservice: eliot\nframeworkVersion: \">=1.42.0 <2.0.0\"\n\nplugins:\n  - serverless-iam-roles-per-function\n  - serverless-plugin-dynamodb\n  - serverless-plugin-share\n\npackage:\n  exclude:\n    - 'credentials.yml'\n    - 'modules/**'\n\n# Configurations\n\ncustom: \n  stage: iot\n  region: eu-west-1\n  credentials: ${file(./credentials.yml)}\n  share: ${file(./share.yml)}\n  skipTablePolicy: true\n  tables:\n    authCodes:\n      name: ${self:service}-${self:provider.stage}-authCodes\n      primaryKey:\n        name: authCode\n        type: 'S'\n      ttl: \n        attribute: ttl\n    refreshTokens:\n      name: ${self:service}-${self:provider.stage}-refreshTokens\n      primaryKey:\n        name: provider\n        type: 'S'\n      rangeKey:\n        name: refreshToken\n        type: 'S'\n    accessTokens:\n      name: ${self:service}-${self:provider.stage}-accessTokens\n      primaryKey:\n        name: provider\n        type: 'S'\n      rangeKey:\n        name: accessToken\n        type: 'S'\n      ttl: \n        attribute: ttl\n\n# Provider\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage,self:custom.stage}\n  region: ${opt:region,self:custom.region}\n\n# Functions\n\nfunctions:\n  auth:\n    handler: auth/auth.handler\n    environment:\n      CLIENT_ID: \n        Ref: ClientId\n      GOOGLE_PROJECT_ID:\n        Ref: GoogleProjectId\n      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAuthCodes\", \"Arn\"]\n    events:\n      - http:\n          path: auth\n          method: get\n\n  token:\n    handler: auth/token.handler\n    environment:\n      CLIENT_ID: \n        Ref: ClientId\n      CLIENT_SECRET: \n        Ref: ClientSecret\n      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAuthCodes\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n    events:\n      - http:\n          path: token\n          method: post\n\n  authorizer:\n    handler: auth/authorizer.handler\n    environment:\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n\n  googleHome:\n    handler: googleHome/fulfillment.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - http:\n          path: google/fulfillment\n          method: post\n          authorizer:\n            name: authorizer\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  \n  googleHomeResync:\n    handler: googleHome/resync.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n      GOOGLE_APY_KEY:\n        Ref: GoogleAPIKey\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/events/thing/#'\"\n          enabled: true\n\n  googleHomeReport:\n    handler: googleHome/report.handler\n    environment:\n      ACCOUNT_ID:\n        Ref: AWS::AccountId\n      GOOGLE_JWT:\n        Ref: GoogleJWT\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''\"\n          enabled: true\n\n  alexa:\n    handler: alexa/fulfillment.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n        Resource:\n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n  \n  alexaResync:\n    handler: alexa/resync.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n      ALEXA_ENDPOINT:\n        Ref: AlexaEndpoint\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:ListThings\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/events/thing/#'\"\n          enabled: true\n  \n  alexaReport:\n    handler: alexa/report.handler\n    environment:\n      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}\n      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}\n      ALEXA_CLIENT_ID:\n        Ref: AlexaClientId\n      ALEXA_CLIENT_SECRET:\n        Ref: AlexaClientSecret\n      ALEXA_ENDPOINT:\n        Ref: AlexaEndpoint\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:PutItem\n        Resource: \n          - \"Fn::GetAtt\": [\"TableAccessTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource: \n          - \"Fn::GetAtt\": [\"TableRefreshTokens\", \"Arn\"]\n      - Effect: Allow\n        Action:\n          - iot:DescribeEndpoint\n          - iot:DescribeThing\n          - iot:GetThingShadow\n          - iot:UpdateThingShadow\n        Resource: '*'\n    events:\n      - iot:\n          sql: \"SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''\"\n          enabled: true\n\n# Resources\n\nresources:\n  - ${file(parameters.yml)}\n  - ${file(resources.yml)}\n  - ${file(outputs.yml)}\n"]},{"id":185631411,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: portfolio-website # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":177981953,"files":["service: contact-form-api\n\ncustom:\n  secrets: ${file(config.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment: \n    EMAILS: ${self:custom.secrets.EMAILS}\n    DOMAINS: ${self:custom.secrets.DOMAINS}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n  sendFormEncoded:\n    handler: handler.sendFormEncoded\n    events:\n      - http:\n          path: email/send/formencoded\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":191645294,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  # 'iamRoleStatement' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":190211511,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: Sample-MobileFlows-Serverless-Connector # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# List of plugins to be used\nplugins:\n  - serverless-offline\n\ncustom:\n    authorizer:\n        arn: arn:aws:lambda:us-east-1:485793342887:function:SampleJwtAuthorizer\n        resultTtlInSeconds: 0\n        identitySource: method.request.header.Authorization\n        identityValidationExpression: '.*'\n\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-1\n  stage: dev\n\n\n  apiGateway:\n    binaryMediaTypes:\n      - image/*\n\n  \nfunctions:\n  app:\n    handler: app.server \n    events: \n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /images/{any+}\n          method: GET\n          cors: true   \n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n          authorizer: ${self:custom.authorizer}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n# functions:\n#   discover:\n#     handler: connector.discover\n#     events:\n#       - http:\n#           path: connector/discovery\n#           method: get\n#           cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":168595909,"files":["service: slack-bot\n\nprovider:\n  name: google\n  runtime: nodejs8\n  memorySize: 128\n  project: my-personal-project\n  region: us-central1\n  credentials: ./serverless-config.json\n  environment:\n    SLACK_TOKEN: XXX\n    BITBUCKET_HOST: bitbucket.org\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  slack:\n    handler: slack\n    events:\n      - http: path"]},{"id":212732315,"files":["# serverless.yml\n\nservice: lambda-authorizer-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-northeast-1\n  stg: ${opt:stage}\n\ncustom:\n  definitions:\n    authorizer:\n      # Lambda関数名\n      name: authorizer\n      # キャッシュ時間\n      resultTtlInSeconds: 0\n      # Lambda関数に渡すヘッダー名\n      identitySource: method.request.header.Authorization\n      # Lambdaイベントペイロード\n      type: request\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http:\n          path: '/'\n          method: any\n          # Lambdaオーソライザーの設定\n          authorizer: ${self:custom.definitions.authorizer}\n      - http:\n          path: '{proxy+}'\n          method: any\n          # Lambdaオーソライザーの設定\n          authorizer: ${self:custom.definitions.authorizer}\n  # Lambda関数 (authorizer) のhandlerメソッドの指定\n  authorizer:\n    handler: authorizer.handler\n\nresources:\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.WWW-Authenticate: \"'Basic'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n"]},{"id":221124751,"files":["service: get-me-the-gif\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 2536\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::get-me-the-gif/*\"\n\nfunctions:\n  get-gif:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: GET\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-offline\n\npackage:\n  exclude:\n    - .git/**\n    - node_modules/puppeteer/.local-chromium/**\n    - node_modules/@ffmpeg-installer/win32-ia32/**\n    - node_modules/@ffmpeg-installer/linux-ia32/**\n    - node_modules/@ffmpeg-installer/win32-x64/**\n    - node_modules/@ffmpeg-installer/darwin-x64/**\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: get-me-the-gif\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n      - --ignore-certificate-errors\n    functions:\n      - get-gif\n\n"]},{"id":111238769,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: microcosm2rss\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n  environment:\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  microcosm:\n    handler: handler.microcosm\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: /\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/xml'\"\n            template: $input.path('$')\n"]},{"id":189861267,"files":["service: serverless-framework-javascript # NOTE: update this with your service name\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.16\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n  environment:\n    NODE_ENV: ${opt:stage, 'dev'}\n\nfunctions:\n  ping:\n    handler: functions/ping.handler\n    events:\n      - http:\n          path: /\n          method: get\n\ncustom:\n  serverless-offline-sns:\n    port: 4002 # a free port for the sns server to run on\n    debug: false\n    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline\n    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint\n    # accountId: 123456789012 # Optional\n\nresources:\n  - ${file(resources/api-gateway-errors.yml)}\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sns\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":230574423,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rankly\n# app and org for use with dashboard.serverless.com\napp: rankly-app\norg: angelyukyu\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n  stage: prod\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  rankly:\n    handler: handler.rank\n    events:\n      - http:\n          path: rank\n          method: get\n  resize:\n    handler: handler.resize\n    events:\n      - http:\n          path: /{size}/{image}\n          method: get\n    environment:\n      BUCKET: dynamic-image-resizing-demo\n      REGION: us-east-1\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:GetObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing-demo\"\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:PutObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing-demo\"\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":188473454,"files":["tenant: rafischer1\napp: stream-challenge-be\nservice: stream-challenge-be\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  credentials: ${file(./.env.yml):credentials}\ncustom:\n  writeEnvVars:\n    NODE_ENV: ${file(./.env.yml):${opt:stage}.NODE_ENV}\n    DATABASE_URL: ${file(./.env.yml):${opt:stage}.DATABASE_URL}\n    STREAM_KEY: ${file(./.env.yml):${opt:stage}.STREAM_KEY}\n    STREAM_SECRET: ${file(./.env.yml):${opt:stage}.STREAM_SECRET}\nplugins:\n  - serverless-plugin-write-env-vars\nfunctions:\n  api:\n    handler: lambda.handler\n    events:\n      - http: ANY {proxy+}"]},{"id":115562713,"files":["service:\n  name: ${opt:name, file(./config.yml):SERVICE_NAME, 'mailchimp-service'}\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, file(./config.yml):STAGE, 'dev'}\n  region: ${opt:region, file(./config.yml):REGION, 'ca-central-1'}\n  memorySize: 128\n\n  environment:\n    SLACK_HOOKS_URL: ${file(./config.yml):SLACK_HOOKS_URL}\n    MAILCHIMP_API_KEY: ${file(./config.yml):MAILCHIMP_API_KEY}\n    MAILCHIMP_LIST_ID: ${file(./config.yml):MAILCHIMP_LIST_ID}\n\nfunctions:\n  # sls webpack invoke -f subscribe\n  subscribe:\n    handler: handler.subscribe\n    events:\n      - http:\n          method: post\n          path: subscribe\n          resp: json\n          cors: true\n"]},{"id":195278146,"files":["service: zaptalk-notification-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  notification:\n    handler: notification.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":201635295,"files":["service: koop-serverless-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  get-data:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /my-provider/{host}/FeatureServer/0\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                host: true\n  query-data:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /my-provider/{host}/FeatureServer/0/query\n          method: get\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                where: false\n              paths:\n                host: true\n"]},{"id":206655610,"files":["service:\n  name: forms-api\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  profile: andismith\n  runtime: nodejs10\n\nfunctions:\n  contact:\n    handler: src/api/contact/handler.post\n    events:\n      - http:\n          method: post\n          path: contact\n"]},{"id":219759914,"files":["service: notes-app-2-api\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName: ${self:custom.tableName}\n    stripeSecretKey: ${env:STRIPE_SECRET_KEY}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [NotesTable, Arn]\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n  billing:\n    # Defines an HTTP API endpoint that calls the main function in billing.js\n    # - path: url path is /billing\n    # - method: POST request\n    handler: billing.main\n    events:\n      - http:\n          path: billing\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n"]},{"id":207469509,"files":["service: monitor-puppeteer\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - \"*/*\"\n\npackage:\n  exclude:\n    - chrome-aws-lambda/**\n    - node_modules/puppeteer/.local-chromium/**\n\nfunctions:\n  puppeteer-orchestrator:\n    handler: handler.index\n    timeout: 30\n    memorySize: 2048\n    events:\n      - http:\n          method: GET\n          path: /screenshot\n          contentHandling: CONVERT_TO_BINARY\n    layers:\n      - { Ref: ChromeLambdaLayer }\n\nlayers:\n  chrome:\n    path: layer\n"]},{"id":173178271,"files":["service: sls-ts-starter\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\nfunctions:\n  hello:\n    handler: handler.start\n    events:\n      - http:\n          path: resource\n          method: get\n      - cloudwatchLog: 'lambda/sls-ts-starter'\n"]},{"id":171118301,"files":["service: serverless-google-photos-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-3\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n"]},{"id":196738153,"files":["service: websocket-quick-start\n\npackage:\n  exclude:\n    - README.md\n\ncustom:\n  stage: ${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stackName: ${self:service}-${opt:stage}\n  websocketsApiName: ${self:service}-${opt:stage}\n  stage: ${env:AWS_STAGE, '${opt:stage, 'dev'}'}\n  region: ${env:AWS_DEFAULT_REGION, '${opt:region, 'eu-west-1'}'}\n\n  # Keyword to call a function e.g {\"action\": \"ping\"}\n  # You can overwrite the route expression e.g $request.body.route - {\"route\": \"ping\"}\n  websocketsApiRouteSelectionExpression: $request.body.action\n\nfunctions:\n  default:\n    handler: src/handler/default.handler\n    events:\n      - websocket: $default\n  ping_pong:\n    handler: src/handler/ping-pong.handler\n    events:\n      - websocket:\n          route: ping\n\n  # You can use a $default route that will forward all WebSocket events\n  # (including $connect and $disconnect) to your default function or add more routes\n  #\n  #  connect:\n  #    handler: handler.connect\n  #    events:\n  #      - websocket:\n  #          route: $connect\n  #    disconnect:\n  #      handler: handler.disconnect\n  #      events:\n  #        - websocket:\n  #            route: $disconnect\n"]},{"id":211643134,"files":["service: serverless-with-webpack\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n  stage: dev\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n  webpackIncludeModules: true\n  webpackPackager: \"yarn\"\n  serverless-offline:\n    port: 8000\n\npackage:\n  individually: true\n\nfunctions:\n  api:\n    handler: src/api.serverless\n    events:\n      - http:\n          method: GET\n          path: /{any+}\n"]},{"id":197221023,"files":["events:\n  - http:\n      path: /\n      method: get\n      cors: true\n","service: localLambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: local\n\nplugins:\n  - serverless-localstack\n\npackage:\n  individually: true\n  excludeDevDependencies: false\n\ncustom:\n  localstack:\n    debug: true\n    host: http://localhost\n    stages:\n      - local\n    autostart: true\n  lambda:\n    mountCode: true\n\nfunctions:"]},{"id":199379740,"files":["service: lambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  geo-list:\n    handler: handler.list\n    events:\n      - http:\n          path: geo\n          method: get\n          cors: true\n\n  geo-create:\n    handler: handler.create\n    events:\n      - http:\n          path: geo\n          method: post\n          cors: true\n\n  geo-detail:\n    handler: handler.detail\n    events:\n      - http:\n          path: geo/{key}\n          method: get\n          cors: true"]},{"id":199417248,"files":["service: image-search-bot\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  stage: production\n  region: ap-northeast-2\n  memorySize: 128\n\nplugins:\n  - serverless-dotenv-plugin\n\nfunctions:\n  hook:\n    handler: lib/serverless.handler\n    events:\n      - http:\n          path: hook\n          method: post\n"]},{"id":201253021,"files":["# NOTE: update this with your service name\nservice: buddy-api\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack # Package our functions with Webpack\n  - serverless-offline\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  role: LambdaRole\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  environment:\n    animalTableName: ${self:custom.animalTableName}\n  iamRoleStatements:\n    - Effect: allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - \"Fn::GetAtt\": [ AnimalTable, Arn ]\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  animalTableName: ${self:custom.stage}-animals\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nresources:\n  #DynamoDb\n  - ${file(resources/dynamodb-table.yml)}\n  #S3\n  - ${file(resources/s3-bucket.yml)}\n  #Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\n  #lambda\n  - ${file(resources/lambda-role.yml)}\n\nfunctions:\n  createAnimal:\n    handler: src/animals/create.post\n    events:\n      - http:\n          path: api/animal\n          method: post\n          cors: true\n          authorizer: aws_iam\n  fetchAnimal:\n    handler: src/animals/fetch.getAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  fetchAnimals:\n    handler: src/animals/fetch.getAnimals\n    events:\n      - http:\n          path: api/animal\n          method: get\n          cors: true\n          authorizer: aws_iam\n  updateAnimal:\n    handler: src/animals/update.updateAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  deleteAnimal:\n    handler: src/animals/delete.deleteAnimal\n    events:\n      - http:\n          path: api/animal/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam"]},{"id":182375209,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bridge # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  exclude:\n    - yarn-error.log\n    - yarn.lock\n    - test/**\n\nfunctions:\n  app:\n    handler: lambda_handler.echoBridge\n    events:\n      - http: 'GET {parameters+}'\n  getDetail1:\n    handler: lambda_handler.echoBridge\n    events:\n      - http: 'GET /test/echo/{id+}'\n  getDetail:\n    handler: lambda_handler.echoBridge\n    events:\n      - http:\n          path: /test/echo/{id}\n          method: GET\n          cors: true\n  postExample:\n    handler: lambda_handler.echoBridge\n    events:\n      - http:\n          path: /test/echo/\n          method: POST\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline"]},{"id":186060508,"files":["service: serverless-dev-env-sample\n\nprovider:\n  name: aws\n  runtime: nodejs8\n\n# Functions\nfunctions:\n  serverless-api-sample:\n    name: ${self:service}-${self:provider.stage}-serverless-api-sample\n    handler: handler.default\n    timeout: 30\n    events:\n      - http:\n          path: '{proxy+}'\n          method: any\n          cors: true\n\n# Plugins\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\n# serverless optimization\npackage:\n  individually: true\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n"]},{"id":179014771,"files":["service: awscn-nodejs # 替换成你的服务名称\n\nplugins:\n  - serverless-plugin-aws-cn-principal # 解决中国区部署报错，见 issue https://github.com/serverless/serverless/issues/5365\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: cn-north-1\n  endpointType: regional\n  deploymentBucket:\n    name: serverless.deployment.bucket # 将程序包上传到此 S3 bucket ，可自定义\n    serverSideEncryption: AES256\n\nfunctions:\n  hello:\n    description: 实例函数\n    handler: app/handler/hello.fn\n    events:\n      - http:\n          path: /hello\n          method: get\n          cors: true\n    # 更多 events 类型的配置方式请查看\n    # Serverless 文档：https://serverless.com/framework/docs/providers/aws/events/\n    # AWS 文档：https://docs.amazonaws.cn/lambda/latest/dg/use-cases.html\n\n# 中国区暂不支持 Lambda environment\n\n# 可以配置打包部署时需要包含的文件\npackage:\n exclude:\n   - app/**/*.ts\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n\n\n\n# 可以添加 CloudFormation 资源模板\n# resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: Description for the output\n#       Value: Some output value\n"]},{"id":176836884,"files":["service: twilio-nts-serverless # NOTE: update this with your service name\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - README.md\n    - .eslintrc.json\n    - .gitignore\n    - test/**\n\nfunctions:\n  getToken:\n    handler: handler.getToken\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res"]},{"id":203083232,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.${self:provider.stage}.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  dynamoDB:\n    devProvisionedThroughput:\n      ReadCapacityUnits: 1\n      WriteCapacityUnits: 1\n    prodProvisionedThroughput:\n      ReadCapacityUnits: 2\n      WriteCapacityUnits: 2\n\nprovider:\n  name: aws\n  funcPrefix: func-${env:FUNC_PREFIX}\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n  environment:\n    DATA_01: hello ${self:provider.stage}\n    DATA_02: boom boom\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n    environment:\n      GRAPHQL_ENV_01: graphql_01\n      GRAPHQL_ENV_02: graphql_02\n  rest:\n    handler: handler.rest\n    events:\n      - http:\n          path: /rest\n          method: ANY\n    environment:\n      REST_ENV_01: rest_01\n      REST_ENV_02: rest_02\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: \n          - AttributeName: id\n            AttributeType: N\n          - AttributeName: username\n            AttributeType: S\n          - AttributeName: data\n            AttributeType: M\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.dynamoDB.${self:provider.stage}ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: stress-algorithm\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  local: ${file(./config/local_04.yml):stages}\n  vpcStackName: ${self:custom.local.${self:custom.stage}.cfStacks.VPC}\n  alertingStackName: ${cf:${self:custom.vpcStackName}.Alerting}\n  alertingARN: ${cf:${self:custom.alertingStackName}.TopicARN}\n  prefix: ${self:custom.local.${self:custom.stage}.coolio.prefix}\n  coolioStack: coolioBipbip-${self:custom.stage}\n  coolioDataName:\n    'Fn::ImportValue': 'coolioData-Name-${self:custom.stage}'\n  coolioResultName:\n    'Fn::ImportValue': 'coolioResult-Name-${self:custom.stage}'\n  coolioDataARN:\n    'Fn::ImportValue': 'coolioData-ARN-${self:custom.stage}'\n  coolioResultARN:\n    'Fn::ImportValue': 'coolioResult-ARN-${self:custom.stage}'\n  customDomain:\n    domainName: api.${self:custom.local.${self:custom.stage}.domain}\n    basePath: ''\n    certificateName: ${self:custom.local.${self:custom.stage}.certdomain}\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n    endpointType: 'regional'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  region: ap-southeast-2\n  logRetentionInDays: ${self:custom.local.${self:custom.stage}.LogRetentionInDays}\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchGetItem\n        - dynamodb:DescribeTable\n        - dynamodb:GetRecords\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n      Resource:\n        - ${self:custom.coolioDataARN}\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchGetItem\n        - dynamodb:GetRecords\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - ${self:custom.coolioResultARN}\n  vpc: \n    securityGroupIds:\n      - ${cf:${self:custom.vpcStackName}.LambdaExecSG}\n    subnetIds:\n      - ${cf:${cf:${self:custom.vpcStackName}.Vpc}.SubnetAPrivate}\n      - ${cf:${cf:${self:custom.vpcStackName}.Vpc}.SubnetBPrivate}\n  notificationArns:\n    - ${self:custom.alertingARN}\n  environment:\n    SERVICE: ${self:service}\n    STAGE: ${self:custom.stage}\n    COOLIO_DATA_TABLE: ${self:custom.coolioDataName}\n    COOLIO_RESULT_TABLE: ${self:custom.coolioResultName}\n    AUTH_ENDPOINT: ${self:custom.local.${self:custom.stage}.auth.endpoint}\n    AUTH_ADMIN_USER: ${self:custom.local.${self:custom.stage}.auth.admin_user}\n    AUTH_ADMIN_PWD: ${self:custom.local.${self:custom.stage}.auth.admin_pwd}\n  profile: coolio_stress_${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: index.handler\n    events:\n     - http:\n         path: /graphql\n         method: ANY\n     - http:\n         path: /graphql/{any+}\n         method: ANY","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages.${self:custom.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/${self:provider.stage}_schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: graphql\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  config: ${file(./config/local.yml):stages}\n  messageUrl:\n    dev: http://example.com\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  profile: fairplay\n  stage: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n    environment:\n      MSG_URL: ${self:custom.messageUrl.${self:custom.stage}}\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties: \n        TableName: user_${self:provider.stage}\n        AttributeDefinitions: ${file(config/schemaDef.yml)}\n        KeySchema: \n          - AttributeName: id\n            KeyType: N\n        ProvisionedThroughput: ${self:custom.config.${self:provider.stage}.dynamoDB.ProvisionedThroughput}\n        Tags: \n          - Key: Type\n            Value: test\n          - Key: Name\n            Value: graphql\n\n\n"]},{"id":179729414,"files":["service: serverless-code-pipeline-cicd\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - codedeploy:*\n      Resource:\n        - \"*\"\nplugins:\n  - serverless-plugin-aws-alerts\n  - serverless-plugin-canary-deployments\n\ncustom:\n  alerts:\n    dashboards: false\n  deploymentSettings:\n    stages:\n      - dev\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello  \n    alarms:\n      - name: foo\n        namespace: 'AWS/Lambda'\n        metric: Errors\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanOrEqualToThreshold\n    deploymentSettings:\n      type: Canary10Percent5Minutes\n      alias: Live\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      alarms:\n        - HelloFooAlarm\n  preHook:\n    handler: hooks.pre\n  postHook:\n    handler: hooks.post\n"]},{"id":219853097,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\nservice: serverless-message\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-central-1\n  apiKeys:\n    - name: firstKeyMessage\n      value: 9KJSDHSBHABHS78OFGJJHHJJKKL8\n  environment: #You need to provide these environment variables\n    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}\n    MESSAGE_TO: ${env:MESSAGE_TO} # email address to which the email is sent to\n    MESSAGE_FROM: ${env:MESSAGE_FROM} # from email address\n  usagePlan:\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 20\n      rateLimit: 10\n\nfunctions:\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: send-message\n          method: post\n          cors: true\n          private: true\n\nplugins:\n  - serverless-offline\n"]},{"id":223614151,"files":["service: lambda-s3-cleaner\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-south-1\n  profile: serverless-admin\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \"*\"\n      Resource: \"arn:aws:s3:::cert-s3-bucket\"\n\nfunctions:\n  s3-cleaner:\n    handler: handler.s3Cleaner\n    events:\n      - http:\n          path: s3Cleaner\n          method: get\n          cors: true\n      - schedule: rate(1 day)\n\nplugins:\n  - serverless-offline\n"]},{"id":150956134,"files":["service:\n  name: serverless-http-echo\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":207118817,"files":["org: debarshib93\napp: notes-app-api-app\n# NOTE: update this with your service name\nservice: notes-app-api\n\n# Create an optimized package for our functions\npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  \n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  \n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":223563408,"files":["service: ${self:custom.serviceName}\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  memorySize: 256\n  reservedConcurrency: 2\n  timeout: 6\n  stage: ${opt:stage, 'local'}\n  region: ${env:region, 'eu-central-1'}\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:eu-central-1:*:*'\n  environment:\n    AWS_DNAMO_DB_NAME: ${env:AWS_DNAMO_DB_NAME}\n    AWS_DNAMO_DB_ENDPOINT: ${env:AWS_DNAMO_DB_ENDPOINT}\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 5\n\nfunctions:\n  ${file(./handlers/endpoints/index.yml)}\n\nresources:\n  Resources:\n    dataTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:AWS_DNAMO_DB_NAME}\n        AttributeDefinitions:\n          - AttributeName: keyHash\n            AttributeType: S\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: keyHash\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  serviceName: ${opt:name, 'serverless-secure-get-set'}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n\n  serverless-offline:\n    host: '0.0.0.0'\n    port: '4000'\n\n  dynamodb:\n  # If you only want to use DynamoDB Local in some stages, declare them here\n    stages:\n      - local\n    start:\n      port: 8000\n      inMemory: true\n      heapInitial: 200m\n      heapMax: 1g\n      migrate: true\n      seed: true\n      convertEmptyValues: true\n    seed:\n      local:\n        sources:\n          - table: ${env:AWS_DNAMO_DB_NAME}\n            sources: [./__mock__/dynamo-seed.json]\n    # Uncomment only if you already have a DynamoDB running locally\n    # noStart: true\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n\npackage:\n  excludeDevDependencies: true\n  exclude:\n    - ./__test__/**\n    - ./__mock__/**\n    - ./.nvmrc\n    - ./handlers/**\n    - ./.dynamodb/**\n"]},{"id":168502415,"files":["service: sls-dictionary-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_DEFAULT_REGION, 'eu-west-1'}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:*:*:table/${self:custom.dynamoDbTableName}\"\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.s3DefinitionBucketName}/*\"\n\npackage:\n  exclude:\n    - assets/**\n    - test/**\n    - .circleci/**\n    - .nyc_output/**\n    - .secrets/**\n    - .gitignore\n    - Makefile\n    - serverless.yml\n\nfunctions:\n  dictionary:\n    name: ${opt:stage, 'local'}-dictbot-read\n    handler: handlers/read.handler\n    description: \"a dictionary bot for Slack in ${opt:stage, 'local'}\"\n    memorySize: 128\n    timeout: 30\n    events:\n    - http:\n        path: dictionary\n        method: post\n    environment:\n      TABLE_NAME: ${self:custom.dynamoDbTableName}\n      BUCKET_NAME: ${self:custom.s3DefinitionBucketName}\n      BOT_TOKEN: ${env:SLACK_BOT_TOKEN}\n      CHALLENGE_TOKEN: ${env:SLACK_CHALLENGE_TOKEN}\n  update:\n    name: ${opt:stage, 'local'}-dictbot-update\n    handler: handlers/update.handler\n    description: \"updates the definitions for dictbot in ${opt:stage, 'local'}\"\n    memorySize: 512\n    timeout: 20\n    events:\n    - s3:\n        bucket: ${self:custom.s3DefinitionBucketName}\n        event: s3:ObjectCreated:*\n        rules:\n          - suffix: .json\n    environment:\n      TABLE_NAME: ${self:custom.dynamoDbTableName}\n      BUCKET_NAME: ${self:custom.s3DefinitionBucketName}\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  dynamoDbTableName: ${env:DYNAMODB_TABLE_NAME}\n  s3DefinitionBucketName: ${env:S3_DEFINITION_BUCKET_NAME}\n  output:\n    file: ./serverless-info.json\n\nresources:\n  Resources:\n    DefinitionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamoDbTableName}\n        AttributeDefinitions:\n          - AttributeName: Term\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Term\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n  Outputs:\n    DefinitionBucketName:\n      Value: ${self:custom.s3DefinitionBucketName}\n      Export:\n        Name: ${opt:stage, 'local'}DefinitionBucketName\n    DefinitionTableName:\n      Value: ${self:custom.dynamoDbTableName}\n      Export:\n        Name: ${opt:stage, 'local'}DefinitionTableName\n    "]},{"id":189902275,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: summovwag-serverless\n\ncustom: ${file(./env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:putObject\n      Resource: \"arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*\"\n  stage: prod\n  region: us-east-1\n  profile: serverless\n\nfunctions:\n  hello:\n    handler: handler.scraper\n    memorySize: 1536MB\n    timeout: 15\n    events:\n      - schedule: ${self:custom.globalSchedule}\n      # - http:\n      #     path: /\n      #     method: get\n    environment:\n      S3_BUCKET_NAME: ${self:custom.S3_BUCKET_NAME}\n      SUMMER_MOVIE_PAGE: ${self:custom.SUMMER_MOVIE_PAGE}\n      SUMMER_MOVIE_FILE_NAME: ${self:custom.SUMMER_MOVIE_FILE_NAME}\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.S3_BUCKET_NAME}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods:\n              - GET\n              AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\"\n    UploadBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: UploadBucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n                - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-chrome\n\npackage:\n  exclude:\n    - node_modules/puppeteer/.local-chromium/**"]},{"id":175938134,"files":["service: serverless-side-rendering-vue-nuxt # base name for your project\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:NODE_ENV}\n  region: eu-central-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  create:\n    handler: lambda/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n  get:\n    handler: lambda/get.get\n    events:\n      - http:\n          path: todo/{id}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":227540406,"files":["service: hello-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev # stage: dev (개발), prod (운영)\n  region: ap-northeast-2\n\nfunctions:\n  # stories 함수\n  createStory:\n    handler: src/stories.createStory\n    events:\n      - http:\n          path: stories\n          method: post\n  readStories:\n    handler: src/stories.readStories\n    events:\n      - http:\n          path: stories\n          method: get\n  readStory:\n    handler: src/stories.readStory\n    events:\n      - http:\n          path: stories/{id}\n          method: get\n  updateStory:\n    handler: src/stories.updateStory\n    events:\n      - http:\n          path: stories/{id}\n          method: patch\n  deleteStory:\n    handler: src/stories.deleteStory\n    events:\n      - http:\n          path: stories/{id}\n          method: delete\n\n  # 초기 테스트 함수\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n"]},{"id":185347064,"files":["#serverless.yml\n\nservice: plant-logger\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n  environment:\n    USER_TABLE: users-table-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}\"\n\nresources:\n  Resources:\n    UserTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: ID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: ID\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.USER_TABLE}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          path: query\n          method: get\n          cors: true\n      - http:\n          path: query\n          method: post\n          cors: true\n"]},{"id":171712077,"files":["service: superApp\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-central-1\n  environment:\n    stage: ${self:provider.stage}\n\nfunctions:\n  graphql:\n    handler: functions/graphql/index.handler\n    events:\n      - http:\n          path: /graphql\n          method: any\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":195277883,"files":["service: zaptalk-logger-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    dynamoTable: ${self:custom.secrets.aws.dynamoTable}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${self:custom.secrets.aws.region}:*:*\"\nfunctions:\n  logger:\n    handler: logger.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":202347172,"files":["service: cognito-boilerplate\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-include-dependencies\n\npackage:\n  individually: true\n  include:\n    # - src/assets/**/*\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  versionFunctions: false\n  tracing:\n    lambda: true\n    apiGateway: true\n  stage: ${self:custom.currentStage}\n  profile: ${self:custom.currentStage}\n  stackTags:\n    PROJECT: ${self:service}\n    STAGE: ${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref : DataBucket\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ DynamoDbTable, Arn ]\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  userPoolName: ${self:service}-${self:provider.stage}-userpool\n  userPoolClientName: ${self:service}-${self:provider.stage}-webclient\n  identityPoolName:\n    Fn::Join:\n      - ''\n      - !Split ['-', '${self:service}-${self:provider.stage}-identitypool']\n  dynamoDbTableName: ${self:service}-${self:provider.stage}-table\n  dataBucketName: ${self:service}-${self:provider.stage}-databucket\n\nfunctions:\n  - ${file(functions/helloworld.yml)}\n\nresources:\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n  - ${file(resources/s3-bucket.yml)}\n  - ${file(resources/dynamodb-table.yml)}\n"]},{"id":185096800,"files":["# https://medium.com/a-man-with-no-server/deploying-a-serverless-application-using-webpack-and-babel-to-support-es2015-to-aws-2f61cff8bafb\nservice: api-gateway\nframeworkVersion: '>=1.21.0 <2.0.0'\nprovider:\n  name: aws\n  # https://statsbot.co/blog/a-crash-course-on-serverless-with-aws-running-node11-on-lambda/\n  # https://github.com/lambci/node-custom-lambda\n  # runtime: provided\n  runtime: nodejs8.10.0 # has to be >8 for Koa\n  stage: dev\n  region: us-west-1\n  # timeout: 10\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  # - serverless-domain-manager\ncustom:\n  serverless-offline:\n    port: 8000\n  webpack:\n    includeModules: true # if necessary\n    webpackConfig: 'scripts/webpack/webpack.handler.js'\n  # customDomain:\n  #   domainName: api.nodejs.com\n  #   stage: ci\n  #   basePath: api\n  #   certificateName: '*.nodejs.com'\n  #   createRoute53Record: true\n  #   endpointType: 'regional'\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html\n          path: '{proxy+}'\n          method: any\n          cors: true\n    # layers: # add layer\n      # - arn:aws:lambda:<region>:553035198032:layer:nodejs12:2\n  playground:\n    handler: src/handler.playground\n    events:\n      - http:\n          path: '/playground'\n          method: get\n          cors: true\n    # layers: # add layer\n      # - arn:aws:lambda:<region>:553035198032:layer:nodejs12:2\n# usagePlan: # Optional usage plan config\n#   quota:\n#     limit: 50000\n#     offset: 2\n#     period: MONTH\n#   throttle:\n#     burstLimit: 200\n#     rateLimit: 100"]},{"id":187812793,"files":["service: ec2-scheduler # NOTE: update this with your service name\n\nframeworkVersion: \"=1.41.1\"\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-include-dependencies\n  # - serverless-plugin-optimize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  versionFunctions: false\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:StartInstances\n        - ec2:StopInstances\n        # - ec2:RebootInstances\n        # - ec2:TerminateInstances\n      Resource: \"arn:aws:ec2:${opt:region, self:provider.region}:*:instance/*\"\n    - Effect: Allow\n      Action:\n        - ec2:DescribeInstances\n      Resource: \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - .git\n    - .gitignore\n\nfunctions:\n  stopInstances:\n    handler: src/stopInstances.handler\n    description: Stop Instances with matching Tag\n    events:\n      - schedule:\n          rate: cron(00 18 * * ? *)\n          enabled: false\n    memorySize: 128\n    timeout: 30\n  startInstances:\n    handler: src/startInstances.handler\n    description: Start Instances with matching Tag\n    events:\n      - schedule:\n          rate: cron(00 06 * * ? *)\n          enabled: false\n    memorySize: 128\n    timeout: 30\n"]},{"id":227495321,"files":["service: serverless-cdn\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  versionFunctions: false\n  logRetentionInDays: 3\n  deploymentBucket:\n    serverSideEncryption: AES256\n    blockPublicAccess: true\n  stackTags: ${self:custom.config.tags}\n\npackage:\n  individually: true\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-finch\n  - serverless-webpack\n\ncustom:\n  config: ${file(./stages/${self:provider.stage}.yml)}\n  client:\n    bucketName: '${self:custom.config.domain}'\n    distributionFolder: dist\n    indexDocument: 'index.html'\n    errorDocument: 'index.html'\n    manageResources: false\n    objectHeaders:\n      ALL_OBJECTS:\n        - name: 'Cache-Control'\n          value: 'max-age=2628000, public' # 1 month in seconds\n      'index.html': # https://stackoverflow.com/a/2068407\n        - name: 'Cache-Control'\n          value: 'no-cache, no-store, must-revalidate, max-age=0'\n        - name: Pragma\n          value: 'no-cache'\n        - name: Expires\n          value: '0'\n    sse: AES256\n    uploadOrder:\n      - .*\n      - index\\.html\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: npm\n\nfunctions:\n  defaultIndex:\n    name: '${self:service}-${self:provider.stage}-origin-request-defaultIndex'\n    handler: functions/default_index.handler\n    description: CloudFront origin-request default index handler\n    timeout: 1 # seconds\n    memorySize: 128 # megabytes\n    events:\n      - cloudFront:\n          eventType: origin-request\n\n  webSecurity:\n    name: '${self:service}-${self:provider.stage}-origin-response-webSecurity'\n    handler: functions/web_security.handler\n    description: CloudFront origin-response web security handler\n    timeout: 1 # seconds\n    memorySize: 128 # megabytes\n    events:\n      - cloudFront:\n          eventType: origin-response\n\nresources:\n  - ${file(resources/acm_cf.yml)}\n  - ${file(resources/cloudfront_cf.yml)}\n  - ${file(resources/route53_cf.yml)}\n  - ${file(resources/s3_cf.yml)}\n"]},{"id":215245007,"files":["service: test-crud-node-less\n\n# DRY constants: define all compound/generated names in one place\n# Override args are: .. defaults:\n# --app_acronym          test-crud-node-less\n# --aws_id              your_aws_account_id\n# --region              eu-central-1\n# --stage               dev\n\ncustom:\n\n  default_app_acronym: serverless-crud-node\n  default_stage: dev\n  default_region: eu-west-1\n  aws_account_ids:\n    dev: xxxx\n    stg: xxxxx\n    prod: xxxxx\n  region: ${opt:region, self:custom.default_region}\n  app_acronym: ${opt:app_acronym, self:custom.default_app_acronym}\n  aws_account_id: ${opt:aws_id, self:custom.aws_account_ids.${self:custom.stage}}\n  stage: ${opt:stage, self:custom.default_stage}\n  stack_name: ${self:custom.app_acronym}-${self:custom.stage}\n\n\n  # ------------------ DYN DATA ITEMS ------------------- #\n  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com\n  dynamodb_table_items: ${self:custom.stage}-items-dynamodb-table\n  dynamodb_arn_items: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table_items}\n\n  # For serverless-webpack\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'npm'\n\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\npackage:\n  exclude:\n    - .idea/**\n    - scripts/**\n    - tests/**\n    - README.md\n    - .eslintignore\n    - .eslintrc.json\n    - docker-compose.yml\n    - Dockerfile\n    - yarn.lock\n    - package.json\n    - package-lock.json\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n  environment:\n    ACCOUNT_ID: ${self:custom.aws_account_id}\n    DDB_REGION: ${self:custom.region}\n    DYNAMO_DB_ENDPOINT: ${self:custom.dynamodb_host}\n    DB_TABLE: ${self:custom.dynamodb_table_items}\n\n\nfunctions:\n  app:\n    handler: handler.main\n    events:\n      - http:\n          method : ANY\n          path : '/'\n      - http:\n          method: ANY\n          path: '{proxy+}'\n\n\n  # authorizer:\n  #   handler: authorizer.main"]},{"id":150789576,"files":["service: tic-tac-toe-api\n\ncustom:\n  resourcePrefix: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev\n  region: us-west-2\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action: \"s3:*\"\n     Resource: \"arn:aws:s3:::${self:custom.resourcePrefix}/*\"\n   - Effect: \"Allow\"\n     Action: \"sqs:CreateQueue\"\n     # allow the service to create queues with names like \"tic-tac-toe-api-dev*\"\n     Resource: \"arn:aws:sqs:*:*:${self:custom.resourcePrefix}*\"\n   - Effect: \"Allow\"\n     Action: \"sns:Publish\"\n     Resource: \"arn:aws:sns:*:*:*\"\n   - Effect: \"Allow\"\n     Action: \"apigateway:GET\"\n     Resource: \"arn:aws:apigateway:*:*:**/apis\"\n  environment:\n    RESOURCE_PREFIX: ${self:custom.resourcePrefix}\n    INCOMING_COMMANDS_TOPIC_ARN:\n      Ref: IncomingCommandsTopic\n    EVENTS_TOPIC_ARN:\n      Ref: EventsTopic\n    # WEBSOCKETS_API_NAME is really only needed to allow EventDispatcher to find\n    # the websockets API endpoint URL. Would be great to discover something more\n    # standardized!\n    WEBSOCKETS_API_NAME: ${self:provider.stage}-${self:service}-websockets\n\n\nfunctions:\n  Sessions:\n    handler: src/framework/session-manager.handler\n    events:\n      - websocket: $connect\n      - websocket: $disconnect\n  CommandReceiver:\n    handler: src/framework/command-receiver.handler\n    events:\n      - websocket: $default\n  CommandProcessor:\n    handler: src/tic-tac-toe-command-processor.handler\n    events:\n      - sqs:\n         arn:\n           \"Fn::GetAtt\": [ CommandDispatchQueue, Arn ]\n  EventDispatch:\n    handler: src/framework/event-dispatcher.handler\n    events:\n      - sqs:\n         arn:\n           \"Fn::GetAtt\": [ EventDispatchQueue, Arn ]\n\n\nresources:\n  Resources:\n    AppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: Private\n        BucketName: ${self:custom.resourcePrefix}\n        VersioningConfiguration:\n          Status: Enabled\n    IncomingCommandsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.resourcePrefix}-incoming-commands\n        Subscription:\n        - Endpoint:\n            \"Fn::GetAtt\": [ CommandDispatchQueue, Arn ]\n          Protocol: sqs\n    EventsTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.resourcePrefix}-events\n        Subscription:\n        - Endpoint:\n            \"Fn::GetAtt\": [ EventDispatchQueue, Arn ]\n          Protocol: sqs\n    CommandDispatchQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.resourcePrefix}-command-dispatch\n        ReceiveMessageWaitTimeSeconds: 20\n    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-sqs-policy\n    # and https://github.com/neillturner/cfndsl_examples/blob/master/IAM/IAM_Policies_SNS_Publish_To_SQS.yml\n    CommandDispatchQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues:\n        - Ref: CommandDispatchQueue\n        PolicyDocument:\n          Id: CommandDispatchQueuePolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: Allow-IncomingCommandsTopic-Send-To-CommandDispatchQueue\n            Effect: Allow\n            Principal:\n              AWS: '*'\n            Action:\n            - sqs:SendMessage\n            Resource:\n              \"Fn::GetAtt\": [CommandDispatchQueue, Arn]\n            Condition:\n              ArnEquals:\n                aws:SourceArn:\n                  Ref: IncomingCommandsTopic\n    EventDispatchQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.resourcePrefix}-event-dispatch\n        ReceiveMessageWaitTimeSeconds: 20\n    EventDispatchQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues:\n        - Ref: EventDispatchQueue\n        PolicyDocument:\n          Id: EventDispatchQueuePolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: Allow-OutgoingEventsTopic-Send-To-EventDispatchQueue\n            Effect: Allow\n            Principal:\n              AWS: '*'\n            Action:\n            - sqs:SendMessage\n            Resource:\n              \"Fn::GetAtt\": [EventDispatchQueue, Arn]\n            Condition:\n              ArnEquals:\n                aws:SourceArn:\n                  Ref: EventsTopic\n"]},{"id":184376329,"files":["# Welcome to Serverless!\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ip2geo # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\npackage:\n  exclude:\n    - yarn-error.log\n    - yarn.lock\n    - test/**\n\nfunctions:\n  ip2Geo:\n    handler: lambda_handler.ip2GeoBridge\n    events:\n      - http:\n          path: /{ip}\n          method: GET\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n#  - serverless-offline\n"]},{"id":206392192,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":202553674,"files":["service: serverless-dynamodb-streams-example \n\nplugins:\n  - serverless-bundle\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-export-env\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: tasks-${self:custom.stage}\n  environment: ${file(config/${self:custom.stage}-env.json)}\n  dynamodb:\n    stages:\n      - ${self:custom.stage}\n\npackage:\n  individually: true\n  exclude:\n    - dev-env.json\n    - prod-env.json\n    - node_modules/aws-sdk/**\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  region: eu-central-1\n  environment:\n    tableName: ${self:custom.tableName}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: \n        - \"Fn::GetAtt\": [ TasksDynamoDbTable, Arn ]\n\nfunctions:\n  createTask:\n    handler: handler.createTask\n    events:\n      - http:\n          path: createTask\n          method: post\n  listTasks:\n    handler: handler.listTasks\n    events:\n      - http:\n          path: listTasks\n          method: get\n  processTasksStream:\n    handler: handler.processTasksStream\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - TasksDynamoDbTable\n              - StreamArn\n          batchSize: 1\n    \nresources:\n  Resources:\n    TasksDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        TableName: '${self:custom.tableName}'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES"]},{"id":89996569,"files":["service: serverless-sample\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: 'ap-south-1'\n  memorySize: 128\n  timeout: 10\n  cfLogs: true\n  deploymentBucket:\n    serverSideEncryption: AES256\n  stackTags:\n    environment: dev\n    serviceName: serverless-sample\n  environment:\n    cacheUrl: ${cf:serverless-sample-dev.cacheUrl}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DeleteNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n      Resource: '*'\n  vpc:\n    securityGroupIds:\n      - ${cf:serverless-sample-dev.VPCSecurityGroup}\n      - ${cf:serverless-sample-dev.RedisSecurityGroup}\n    subnetIds:\n      - ${cf:serverless-sample-dev.PrivateSubnetA}\n      - ${cf:serverless-sample-dev.PublicSubnetB}\npackage:\n  exclude:\n    - ./node_modules/**\n    - ./test/**\n    - ./.eslintrc.json\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\nfunctions:\n  getProductData:\n    handler: handler.getProductData\n    events:\n        - http:\n            path: product/data/{id}\n            method: GET\n  saveProductData:\n    handler: handler.saveProductData\n    events:\n        - http:\n            path: product/save\n            method: POST\n\nresources: ${file(./cf-resource.json)}\n"]},{"id":158044371,"files":["---\nservice: aws-lambda-edge\n\nframeworkVersion: '^1.33.2'\n\nplugins:\n  - serverless-finch\n  - serverless-plugin-cloudfront-lambda-edge\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_DEFAULT_REGION, 'us-east-1'}\n  stage: ${opt:stage, env:SERVERLESS_STAGE, 'live'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'ssm:GetParameters'\n      Resource:\n        - 'Fn::Join':\n          - ':'\n          - - 'arn:aws:ssm'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'parameter/app/${self:service}/${self:provider.stage}/*'\n\nfunctions:\n  app:\n    handler: handlers/app.${self:provider.stage}Handler\n    lambdaAtEdge:\n      distribution: AppDistribution\n      eventType: origin-request\n\ncustom:\n  organization: ${ssm:/app/${self:service}/organization}\n  hostedZoneId: ${ssm:/app/${self:service}/hostedZoneId}\n  certificateId: ${ssm:/app/${self:service}/certificateId}\n  appDomain: ${ssm:/app/${self:service}/${self:provider.stage}/appDomain}\n  assetDomain: ${ssm:/app/${self:service}/${self:provider.stage}/assetDomain}\n  client:\n    bucketName: ${self:custom.organization}-${self:service}-assets-${self:provider.stage}\n    distributionFolder: .bucket\n    objectHeaders:\n      ALL_OBJECTS:\n        - name: Cache-Control\n          value: 'public, max-age=31536000, immutable'\n\npackage:\n  exclude:\n    - '*/**'\n  include:\n    - 'handlers/*.js'\n    - 'lib/*.js'\n    - 'node_modules/mustache/mustache.js'\n    - 'node_modules/mustache/package.json'\n\nresources:\n  Resources:\n    AppBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.organization}-${self:service}-app-${self:provider.stage}\n    AppDistributionIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${self:custom.organization}-${self:service}-app-${self:provider.stage}\n    AppBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: { Ref: 'AppBucket' }\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AppDistributionIdentity'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'AppBucket'\n                    - '/*'\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AppDistributionIdentity'\n              Action:\n                - 's3:ListBucket'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - Ref: 'AppBucket'\n    AppDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Enabled: true\n          PriceClass: PriceClass_100\n          HttpVersion: http2\n          Aliases:\n            - ${self:custom.appDomain}\n          ViewerCertificate:\n            SslSupportMethod: sni-only\n            AcmCertificateArn:\n              'Fn::Join':\n                - ':'\n                - - 'arn:aws:acm'\n                  - Ref: 'AWS::Region'\n                  - Ref: 'AWS::AccountId'\n                  - 'certificate/${self:custom.certificateId}'\n          DefaultCacheBehavior:\n            TargetOriginId: AppBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            MinTTL: 5\n            MaxTTL: 5\n            DefaultTTL: 5\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: all\n          Origins:\n            - Id: AppBucketOrigin\n              DomainName: { 'Fn::GetAtt': [ 'AppBucket', 'DomainName' ] }\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  'Fn::Join':\n                    - ''\n                    - - 'origin-access-identity/cloudfront/'\n                      - Ref: 'AppDistributionIdentity'\n    AppRecord:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.hostedZoneId}\n        RecordSets:\n          - Name: ${self:custom.appDomain}\n            Type: A\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2\n              DNSName: { 'Fn::GetAtt': [ 'AppDistribution', 'DomainName' ] }\n    AssetDistributionIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${self:custom.organization}-${self:service}-asset-${self:provider.stage}\n    AssetBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.client.bucketName}\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AssetDistributionIdentity'\n              Action:\n                - 's3:GetObject'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - ${self:custom.client.bucketName}\n                    - '/*'\n            - Effect: Allow\n              Principal:\n                AWS:\n                  - 'Fn::Join':\n                    - ' '\n                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'\n                      - Ref: 'AssetDistributionIdentity'\n              Action:\n                - 's3:ListBucket'\n              Resource:\n                'Fn::Join':\n                  - ''\n                  - - 'arn:aws:s3:::'\n                    - ${self:custom.client.bucketName}\n    AssetDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Enabled: true\n          PriceClass: PriceClass_100\n          HttpVersion: http2\n          DefaultRootObject: index.html\n          Aliases:\n            - ${self:custom.assetDomain}\n          ViewerCertificate:\n            SslSupportMethod: sni-only\n            AcmCertificateArn:\n              'Fn::Join':\n                - ':'\n                - - 'arn:aws:acm'\n                  - Ref: 'AWS::Region'\n                  - Ref: 'AWS::AccountId'\n                  - 'certificate/${self:custom.certificateId}'\n          DefaultCacheBehavior:\n            TargetOriginId: AssetBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            Compress: true\n            MinTTL: 31536000\n            MaxTTL: 31536000\n            DefaultTTL: 31536000\n            ForwardedValues:\n              QueryString: false\n              Cookies:\n                Forward: 'none'\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            CachedMethods:\n              - GET\n              - HEAD\n          Origins:\n            - Id: AssetBucketOrigin\n              DomainName: ${self:custom.client.bucketName}.s3.amazonaws.com\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  'Fn::Join':\n                    - ''\n                    - - 'origin-access-identity/cloudfront/'\n                      - Ref: 'AssetDistributionIdentity'\n    AssetRecord:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.hostedZoneId}\n        RecordSets:\n          - Name: ${self:custom.assetDomain}\n            Type: A\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2\n              DNSName: { 'Fn::GetAtt': [ 'AssetDistribution', 'DomainName' ] }\n"]},{"id":77892734,"files":["# Adoptable Pet Bot\n\nservice: adoptable-pet-bot\nframeworkVersion: \">=1.8.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n\n# service wide environment variables\n  environment:\n    TWIT_API_KEY: ${file(./env.json):TWIT_API_KEY}\n    TWIT_API_KEY_SECRET: ${file(./env.json):TWIT_API_KEY_SECRET}\n    TWIT_ACCESS_TOKEN: ${file(./env.json):TWIT_ACCESS_TOKEN}\n    TWIT_ACCESS_TOKEN_SECRET: ${file(./env.json):TWIT_ACCESS_TOKEN_SECRET}\n    TWIT_TIMEOUT_MS: ${file(./env.json):TWIT_TIMEOUT_MS}\n    SHELTER_ID: ${file(./env.json):SHELTER_ID}\n    ADOPT_API_KEY: ${file(./env.json):ADOPT_API_KEY}\n    SHELTER_NAME: ${file(./env.json):SHELTER_NAME}\n\nfunctions:\n  tweetPet:\n    handler: handlers/tweetPet.tweetPet\n    description: Tweets Adoptable Pets on a Schedule\n    memorySize: 512 \n    timeout: 10\n    events:\n      - schedule: rate(6 hours)\n"]},{"id":121515741,"files":["service: serverless-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: aws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: gcloud\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n","service: marketing\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: marketing-department-utils\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  vipNotifier:\n    handler: vipNotifier\n    events:\n      - some.event\n","service: newsletter\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - some.event\n","service: analytics\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: ${file(./config.json):PROJECT_ID}\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    CREDENTIALS_FILE: ${file(./config.json):CREDENTIALS_FILE}\n    PROJECT_ID: ${file(./config.json):PROJECT_ID}\n    DATASET_ID: ${file(./config.json):DATASET_ID}\n    TABLE_ID: ${file(./config.json):TABLE_ID}\n\nfunctions:\n  analytics:\n    handler: recordEvents\n    events:\n      - user.registered\n      - user.clicked\n","service:\n  name: crm\n  description: 'A service connecting the app to the CRM system'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  addUserToCrm:\n    handler: handler.addUserToCrm\n    events:\n      - user.registered\n","# A serverless service that sends out emails via Mailgun\n\nservice:\n  name: emails\n  description: 'A service that sends out emails.'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  sendWelcomeEmail:\n    handler: handler.sendWelcomeEmail\n    events:\n      - user.registered\n","service:\n  name: errors\n  description: 'A service to act on Event Gateway system errors'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  alertAdmin:\n    handler: handler.alertAdmin\n    events:\n      - gateway.info.functionError\n","# users-api crud service\n\nservice:\n  name: users\n  description: 'Users CRUD service.'\n\nplugins:\n  - serverless-remove-forced-login\n\ncustom:\n  eventGatewayUrl: \"http://localhost:4000\"\n  eventGatewayConfigUrl: \"http://localhost:4001\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  environment:\n    EVENT_GATEWAY_URL: ${self:custom.eventGatewayUrl}\n    EVENT_GATEWAY_CONFIG_URL: ${self:custom.eventGatewayConfigUrl}\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - http:\n          path: /users\n          method: POST\n          # cors has to be commented out until we change how data is sent to the Event Gateway\n          # cors: true\n","service: vision\n\nplugins:\n  - serverless-google-cloudfunctions\n  - serverless-remove-forced-login\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: ${file(./config.json):PROJECT_ID}\n  credentials: ~/.gcloud/keyfile.json\n  environment:\n    API_KEY: ${file(./config.json):API_KEY}\n\nfunctions:\n  annotate:\n    handler: annotateUser\n    events:\n      - user.registered\n"]},{"id":98077797,"files":["service: basic-example\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello\n          method: get\n","service: basic-example # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\n  environment:\n    MY_SIMPLE: \"simple value\"\n    MY_DYNAMIC: \"${self:provider.stage}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello\n          method: get\n\n  with_params:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/hello/{greeting}\n          method: get\n\n  with_greedy_path_params:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/greedy/{money+}\n          method: get\n\n  shorthand_path_syntax:\n    handler: handler.hello\n    events:\n      - http: GET api/shorthand\n\n  malformed_http_event:\n    handler: handler.hello\n    events:\n      - http:\n        path: note_how_path_isnt_indented_enough\n        method: get\n\n  path_with_multiple_params:\n    handler: handler.hello\n    events:\n      - http: GET api/res1/{res1ID}/res2/{res2ID}\n\n  env:\n    handler: handler.env\n    events:\n      - http:\n          path: api/env\n          method: get\n\n  postit:\n    handler: handler.postit\n    events:\n      - http:\n          path: api/postit\n          method: POST\n\n  with_querystring_params:\n    handler: handler.with_querystring_params\n    events:\n      - http:\n          path: api/with_querystring_params\n          method: get\n\n  with_querystring_params_and_pathparams:\n    handler: handler.with_querystring_params\n    events:\n      - http:\n          path: api/with_querystring_params_and_pathparams/{pathparam1}\n          method: get\n  throwWorld:\n    handler: handler.throwWorld\n    events:\n      - http:\n          path: api/throwWorld\n          method: get\n  errorWorld:\n    handler: handler.errorWorld\n    events:\n      - http:\n          path: api/errorWorld\n          method: get\n  callback:\n    handler: handler.callback\n    events:\n      - http:\n          path: api/callback\n          method: get\n"]},{"id":210917394,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: realtime-transport-dashboard\n\n# Serverless framework version\nframeworkVersion: \"=1.53.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: rtt-dashboard-${self:custom.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: prod\n  region: eu-west-1\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"Fn::GetAtt\": [ RTTDashboardTable, Arn ]\n\nfunctions:\n  createDashboard:\n    handler: src/handler.createDashboard\n    events:\n      - http:\n          path: dashboard\n          method: POST\n  updateDashboard:\n    handler: src/handler.updateDashboard\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: POST\n  deleteDashboard:\n    handler: src/handler.deleteDashboard\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: DELETE\n  getDashboard:\n    handler: src/handler.getDashboard\n    timeout: 20\n    memory: 2048\n    events:\n      - http:\n          path: dashboard/{dashboard_id}\n          method: GET\n  addWidget:\n    handler: src/handler.addWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget\n          method: POST\n  updateWidget:\n    handler: src/handler.updateWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget/{widget_id}\n          method: POST\n  deleteWidget:\n    handler: src/handler.deleteWidget\n    events:\n      - http:\n          path: dashboard/{dashboard_id}/widget/{widget_id}\n          method: DELETE\n\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    RTTDashboardTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":76161834,"files":["service: slack-to-opsgenie-alert-creator\n\nprovider:\n  name: aws\n#  region: us-west-2\n  runtime: nodejs4.3\n  memorySize: 256\n  timeout: 10\n  stage: dev\n#  profile: customProfile\n  environment:\n      slackToken: yourSlackToken\n      opsgenieApiKey: yourOpsGenieApiKey\n\nfunctions:\n  main:\n    name: SlackToOpsGenieAlertCreator\n    description: Creates alert for messages sent to a channel\n    handler: main.handler\n    events:\n      - http: POST slack-to-opsgenie-alert-create\n"]},{"id":72059906,"files":["service: circleci-build-trigger\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${env:AWS_DEFAULT_REGION, env:AWS_REGION}\n\ncustom: ${file(serverless.env.yml)}\n\nfunctions:\n  trigger:\n    handler: handler.trigger\n    description: ${self:custom.PROJECT}\n    environment: ${self:custom}\n    events:\n      - schedule: ${self:custom.SCHEDULE_EXPRESSION}\n","CIRCLE_TOKEN:\nPROJECT:\nBRANCH:\nTRIGGER_NAME:\nCIRCLE_JOB:\nSCHEDULE_EXPRESSION:\n"]},{"id":176526337,"files":["name: test-table\n\ntable:\n  component: '../'\n  inputs:\n    name: test-table\n    delete: false\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n      - AttributeName: attribute1\n        AttributeType: N\n      - AttributeName: attribute2\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n      - AttributeName: attribute1\n        KeyType: RANGE\n    localSecondaryIndexes:\n      - IndexName: 'myLocalSecondaryIndex'\n        KeySchema:  \n         - AttributeName: id\n           KeyType: HASH\n         - AttributeName: attribute2\n           KeyType: RANGE\n        Projection:\n           ProjectionType: 'KEYS_ONLY'\n    globalSecondaryIndexes:\n      - IndexName: 'myGlobalSecondaryIndex'\n        KeySchema:\n         - AttributeName: attribute2\n           KeyType: HASH\n        Projection:\n           ProjectionType: 'KEYS_ONLY'\n    region: us-east-1\n"]},{"id":78345620,"files":["service: aws-stepfunctions-demo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::stepfunctions-demo-source-bucket/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::stepfunctions-demo-target-bucket/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"states:*\"\n      Resource: \"*\" \n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"      \n    - Effect: \"Allow\"\n      Action:\n        - \"ses:*\"\n      Resource: \"*\"            \n\nfunctions:\n  processFile:\n    timeout: 30\n    memory: 256\n    handler: handler.processFile\n  moveFile:\n    handler: handler.moveFile\n    environment:\n      TARGET_BUCKET: stepfunctions-demo-target-bucket    \n  sendEmail:\n    handler: handler.sendEmail\n    environment:\n      DEST_EMAIL: test@example.com    \n  executeWorkflow:\n    handler: handler.executeWorkflow\n    environment:\n      STEP_FUNCTION_NAME: aws-stepfunctions-demo-dev-stepfunctionsdemo   \n    events:\n      - s3:\n          bucket: stepfunctions-demo-source-bucket\n          event: s3:ObjectCreated:*        \n\n\nstepFunctions:\n  stateMachines:\n    stepfunctionsdemo:\n      Comment: \"Example StepFunction\"\n      StartAt: ProcessFile\n      States: \n        ProcessFile: \n          Type: Task\n          Resource: processFile\n          Next: MoveFile      \n        MoveFile: \n          Type: Task\n          Resource: moveFile\n          Next: Wait10Minutes\n        Wait10Minutes:\n          Type: Wait\n          Seconds: 600\n          Next: SendEmail          \n        SendEmail:\n          Type: Task\n          Resource: sendEmail\n          End: true\n\nresources:\n  Resources:\n    TargetBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: stepfunctions-demo-target-bucket        \n    SensorDataTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"sensor_id\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"sensor_id\"\n          KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5        \n        TableName: \"sensor_data\"\n\n\nplugins:\n  - serverless-step-functions"]},{"id":88438307,"files":["service: serverless-dynalite-example\n\nplugins:\n  - serverless-offline\n  - serverless-dynalite\n\ncustom:\n  dynalite:\n    start:\n      port: 4567\n      region: us-east-1\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  \n# functions:\n#   rulesApi:\n#     handler: sample.handler\n#     events:\n#       - http:\n#           method: GET\n#           path: /\n#           cors: true\n\nresources:  \n  Resources:\n    ResultsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: SampleTable\n        AttributeDefinitions:\n          - AttributeName: unique_key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: unique_key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/SampleTable\n        Roles:\n          - Ref: IamRoleLambdaExecution"]},{"id":149290556,"files":["service: rf-mir-lambda\n\nplugins:\n  - serverless-vault-plugin\n  - serverless-plugin-scripts\n\ncustom:\n  config: ${file(env/${opt:stage}.yml)}\n\n  vault:\n    token: ${env:TOKEN_VAULT}\n    url: \"https://localhost:8200\"\n    secret: ${self:custom.config.SecretVaultPath}\n    ssl_check: false\n  kms:\n    keyId: ${env:KEY_KMS_ID}\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment: ${self:custom.config.environmentVars}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  include:\n    - handler.py\n\n  exclude:\n    - '**/*'\n","service: rf-mir-lambda\n\nplugins:\n  - serverless-vault-plugin\n\ncustom:\n  config: ${file(env/${opt:stage}.yml)}\n\n  vault:\n    token: \"xxxxx\"\n    url: \"https://vault:8200\"\n    secret: \"secret/path\"\n    ssl_check: false\n  kms:\n    keyId: ${env:KEY_KMS_ID}  \n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n  environment:\n    - FOO\n    - BAR\n    - VAR\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  include:\n    - handler.py\n\n  exclude:\n    - '**/*'\n"]},{"id":73399315,"files":["service: my-gcf-service # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project-1234\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  \n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  \n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n      \n"]},{"id":86656916,"files":["\nservice: ses-forwarder \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action: \n        - s3:GetObject\n        - s3:PutObject\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"SesForwarderBucket\" }, \"/*\" ] ]  }\n\nfunctions:\n  sesForwarder:\n    handler: handler.handle\n    timeout: 10\n    memorySize: 128\n    environment:\n      emailBucket: \n         Ref: SesForwarderBucket\n\nresources:\n Resources:\n   SesForwarderBucket:\n     Type: AWS::S3::Bucket\n     Properties:\n      BucketName: \n        Fn::Join: [\"\", [\"sesforwarder-\",{ \"Ref\" : \"AWS::AccountId\" }  ] ]\n      LifecycleConfiguration:\n        Rules:\n           - ExpirationInDays: 3\n             Status: Enabled\n   SesForwarderBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: \n           Ref: SesForwarderBucket\n        PolicyDocument:\n\n          Version: '2012-10-17'\n          Statement:\n          - Sid: GiveSESPermissionToWriteEmail\n            Effect: Allow\n            Principal:\n              Service: ses.amazonaws.com\n            Action: s3:PutObject\n            Resource: \n               Fn::Join: [\"\", [\"arn:aws:s3:::\",{\"Ref\":\"SesForwarderBucket\" },\"/*\"]]\n            Condition:\n              StringEquals:\n                aws:Referer:\n                    Ref: AWS::AccountId   \n     \n Outputs:\n    SesForwarderBucket:\n      Description: \"Forwarder Bucket Name\"\n      Value:\n         Ref: SesForwarderBucket\n"]},{"id":110634628,"files":["service: serverless-cqrs-menu\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"MenuEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"MenuMenuItemsDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:menu-events\"\n  environment:\n    TOPIC_NAME: 'menu-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'menu-events-table-${self:provider.stage}'\n    MENU_ITEMS_TABLE: 'menu-menu-items-table-${self:provider.stage}'\n\nfunctions:\n  addMenuItem:\n    handler: api.handler\n    events:\n      - http: 'POST /menu/items/commands/add'\n  getMenuItem:\n    handler: api.handler\n    events:\n      - http: 'GET /menu/items/{proxy+}'\n  getMenuItems:\n    handler: api.handler\n    events:\n      - http: 'GET /menu/items/'\n  persistEvent:\n    handler: listeners.persistEvent\n    events:\n      - sns:\n          topicName: menu-events\n          displayName: \"Menu domain events\"\n  persistMenuItem:\n    handler: listeners.persistMenuItem\n    events:\n      - sns:\n          topicName: menu-events\n          displayName: \"Menu domain events\"\n\nresources:\n  Resources:\n    MenuEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'menu-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    MenuMenuItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'menu-menu-items-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n","service: serverless-cqrs-customers\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"CustomersEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"CustomersCustomersDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:customers-events\"\n  environment:\n    TOPIC_NAME: 'customers-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'customers-events-table-${self:provider.stage}'\n    CUSTOMERS_TABLE: 'customers-customers-table-${self:provider.stage}'\n\nfunctions:\n  signUpCustomer:\n    handler: api.handler\n    events:\n      - http: 'POST /customers/commands/signup'\n  getCustomer:\n    handler: api.handler\n    events:\n      - http: 'GET /customers/{proxy+}'\n  getCustomers:\n    handler: api.handler\n    events:\n      - http: 'GET /customers'\n  persistEvent:\n    handler: listeners.persistEvent\n    events:\n      - sns:\n          topicName: customers-events\n          displayName: \"Customers domain events\"\n  persistCustomer:\n    handler: listeners.persistCustomer\n    events:\n      - sns:\n          topicName: customers-events\n          displayName: \"Customers domain events\"\n\nresources:\n  Resources:\n    CustomersEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'customers-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    CustomersCustomersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'customers-customers-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n","service: serverless-cqrs-orders\n\nplugins:\n  - serverless-offline-sns\n  - serverless-dynamodb-local\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n  serverless-offline-sns:\n    port: 4002\n    debug: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - \"sns:*\"\n      Resource:\n        - { \"Fn::GetAtt\": [\"OrdersEventsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersOrdersDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersMenuItemsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"OrdersCustomersDynamoDBTable\", \"Arn\" ] }\n        - \"arn:aws:sns:us-east-1:${ssm:accountId}:orders-events\"\n  environment:\n    TOPIC_NAME: 'orders-events'\n    AWS_ACCOUNT_ID: '${ssm:accountId}'\n    EVENTS_TABLE: 'orders-events-table-${self:provider.stage}'\n    ORDERS_TABLE: 'orders-orders-table-${self:provider.stage}'\n    MENU_ITEMS_TABLE: 'orders-menu-items-table-${self:provider.stage}'\n    CUSTOMERS_TABLE: 'orders-customers-table-${self:provider.stage}'\n\nfunctions:\n  openOrder:\n    handler: index.handleCommand\n    events:\n      - http: 'POST /orders/commands/open'\n  getOrder:\n    handler: index.handleQuery\n    events:\n      - http: 'GET /orders/{proxy+}'\n  getOrders:\n    handler: index.handleQuery\n    events:\n      - http: 'GET /orders'\n  persistEvent:\n    handler: index.persistEvent\n    events:\n      - sns:\n          topicName: orders-events\n          displayName: \"Orders domain events\"\n  persistOrder:\n    handler: index.persistOrder\n    events:\n      - sns:\n          topicName: orders-events\n          displayName: \"Orders domain events\"\n  persistMenuItem:\n    handler: index.persistMenuItem\n    events:\n      - sns:\n          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:menu-events'\n  persistCustomer:\n    handler: index.persistCustomer\n    events:\n      - sns:\n          arn: 'arn:aws:sns:us-east-1:${ssm:accountId}:customers-events'\n\nresources:\n  Resources:\n    OrdersEventsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-events-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersOrdersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-orders-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersMenuItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-menu-items-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    OrdersCustomersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        TableName: 'orders-customers-table-${self:provider.stage}'\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":99741083,"files":["service: stackOverflowMonitor\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    FAUNADB_SECRET: 'YOUR_OWN_SECRET'\n\nfunctions:\n  getStackOverflowQuestions:\n    handler: handler.getStackOverflowQuestions\n    events:\n      - http: GET getStackOverflowQuestions\n      - schedule: rate(20 minutes) # Change it to your own if needed\n    environment:\n       STACK_EXCHANGE_KEY: 'YOUR_STACK_OVERFLOW_KEY'\n       SLACK_WEBHOOK_URL: 'YOUR_SLACK_WEBHOOK_URL'\n       SLACK_CHANNEL: '#MY_CHANNEL'\n       SLACK_USERNAME: 'StackOverflow'\n       SLACK_ICON_URL: 'http://cdn.sstatic.net/stackexchange/img/logos/so/so-icon.png'\n       SEARCH_KEYWORD: 'MY_KEYWORD'\n"]},{"id":129187816,"files":["\nservice: test-global-table-creation\nframeworkVersion: '>=1.1.0 <2.0.0'\nplugins:\n  - serverless-create-global-dynamodb-table\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-east-1'}\n  stage: ${opt:stage, 'dev'}\n  tracing: true\n  deploymentBucket:\n    name: aws-deployment-packages-dev-us-east-1\n\ncustom:\n  globalTables:\n    regions:\n      - us-east-2\n    createStack: true\n\nresources:\n  Resources:\n    TestTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: 'Id'\n            AttributeType: 'S'\n        KeySchema:\n          -\n            AttributeName: 'Id'\n            KeyType: 'HASH'\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        # ProvisionedThroughput:\n        #   ReadCapacityUnits: 5\n        #   WriteCapacityUnits: 5\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TableName: Test-Dynamodb-Table\n        Tags:\n          - Key: scheduler-ddb-thresholdminmax\n            Value: ''\n\n    # WriteCapacityScalableTarget:\n    #   Type: AWS::ApplicationAutoScaling::ScalableTarget\n    #   Properties:\n    #     MaxCapacity: 5\n    #     MinCapacity: 5\n    #     ResourceId:\n    #       Fn::Join:\n    #       - /\n    #       - - table\n    #         - Ref: TestTable\n    #     RoleARN:\n    #       Fn::GetAtt: ScalingRole.Arn\n    #     ScalableDimension: dynamodb:table:WriteCapacityUnits\n    #     ServiceNamespace: dynamodb\n\n    # ReadCapacityScalableTarget:\n    #   Type: AWS::ApplicationAutoScaling::ScalableTarget\n    #   Properties:\n    #     MaxCapacity: 5\n    #     MinCapacity: 5\n    #     ResourceId:\n    #       Fn::Join:\n    #       - /\n    #       - - table\n    #         - Ref: TestTable\n    #     RoleARN:\n    #       Fn::GetAtt: ScalingRole.Arn\n    #     ScalableDimension: dynamodb:table:ReadCapacityUnits\n    #     ServiceNamespace: dynamodb\n\n    # ScalingRole:\n    #   Type: AWS::IAM::Role\n    #   Properties:\n    #     AssumeRolePolicyDocument:\n    #       Version: \"2012-10-17\"\n    #       Statement:\n    #         -\n    #           Effect: \"Allow\"\n    #           Principal:\n    #             Service:\n    #               - application-autoscaling.amazonaws.com\n    #           Action:\n    #             - \"sts:AssumeRole\"\n    #     Path: \"/\"\n    #     Policies:\n    #       -\n    #         PolicyName: \"root\"\n    #         PolicyDocument:\n    #           Version: \"2012-10-17\"\n    #           Statement:\n    #             -\n    #               Effect: \"Allow\"\n    #               Action:\n    #                 - \"dynamodb:DescribeTable\"\n    #                 - \"dynamodb:UpdateTable\"\n    #                 - \"cloudwatch:PutMetricAlarm\"\n    #                 - \"cloudwatch:DescribeAlarms\"\n    #                 - \"cloudwatch:GetMetricStatistics\"\n    #                 - \"cloudwatch:SetAlarmState\"\n    #                 - \"cloudwatch:DeleteAlarms\"\n    #               Resource: \"*\"\n\n    # WriteScalingPolicy:\n    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    #   Properties:\n    #     PolicyName: WriteAutoScalingPolicy\n    #     PolicyType: TargetTrackingScaling\n    #     ScalingTargetId:\n    #       Ref: WriteCapacityScalableTarget\n    #     TargetTrackingScalingPolicyConfiguration:\n    #       TargetValue: 50.0\n    #       ScaleInCooldown: 60\n    #       ScaleOutCooldown: 60\n    #       PredefinedMetricSpecification:\n    #         PredefinedMetricType: DynamoDBWriteCapacityUtilization\n\n    # ReadScalingPolicy:\n    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    #   Properties:\n    #     PolicyName: ReadAutoScalingPolicy\n    #     PolicyType: TargetTrackingScaling\n    #     ScalingTargetId:\n    #       Ref: ReadCapacityScalableTarget\n    #     TargetTrackingScalingPolicyConfiguration:\n    #       TargetValue: 50.0\n    #       ScaleInCooldown: 60\n    #       ScaleOutCooldown: 60\n    #       PredefinedMetricSpecification:\n    #         PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n\n  Outputs:\n    TestTableName:\n      Description: The name of Test table\n      Value:\n        Fn::Join:\n          - ''\n          - - Ref: TestTable\n      Export:\n        Name: ${self:service}:${self:provider.stage}:TestTableName\n\n"]},{"id":139182412,"files":["{{#ant.service}}\nservice:\n  name: {{{ant.service}}}\n{{/ant.service}}\n\nprovider:\n  name: aws\n  {{#config.profile}}\n  profile: {{{config.profile}}}\n  {{/config.profile}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  graphQL:\n    handler: graphQL.run\n    runtime: nodejs8.10\n    package:\n      individually: true\n      exclude:\n        - ./**\n      include:\n        - node_modules/**\n        - ant.yml\n        - model.graphql\n        - graphQL.js\n    events:\n      - http:\n          path: graphql\n          method: get\n      - http:\n          path: graphql\n          method: post\n  graphiQL:\n    handler: graphiQL.run\n    runtime: nodejs8.10\n    package:\n      individually: true\n      exclude:\n        - ./**\n      include:\n        - node_modules/**\n        - graphiQL.js\n    events:\n      - http:\n          path: graphiql\n          method: get\n{{#functions.length}}\n{{#functions}}\n  {{{name}}}:\n    handler: libFunction.run\n    runtime: nodejs8.10\n    environment:\n      LIB: ./{{{handlerFileName}}}\n    package:\n      individually: true\n      artifact: {{{name}}}.zip\n{{/functions}}\n{{/functions.length}}\n"]},{"id":157885108,"files":["service: serverless-email-scheduler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: dev\n  # change this to use your own profile (https://serverless.com/framework/docs/providers/aws/guide/credentials#using-aws-profiles)\n  profile: winterwind_serverless_deployer\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"states:StartExecution\"\n      Resource:\n        - Ref: EmailSchedulingStateMachine\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/${self:custom.EMAIL_SENDER_ADDRESS}\n\ncustom:\n  EMAIL_SENDER_ADDRESS: \"paul@winterwindsoftware.com\"\n\npackage:\n  individually: true\n\nfunctions:\n  ScheduleEmail:\n    handler: src/lambdas/schedule-email.handle\n    environment:\n      STATEMACHINE_ARN: ${self:resources.Outputs.EmailSchedulingStateMachine.Value}\n  SendEmail:\n    handler: src/lambdas/send-email.handle\n    environment:\n      EMAIL_SENDER_ADDRESS: ${self:custom.EMAIL_SENDER_ADDRESS}\n\nstepFunctions:\n  stateMachines:\n    EmailSchedulingStateMachine:\n      name: EmailSchedulingStateMachine\n      definition:\n        Comment: \"Schedules an email to be sent at a future date\"\n        StartAt: WaitForDueDate\n        States:\n          WaitForDueDate:\n            Type: Wait\n            TimestampPath: \"$.dueDate\"\n            Next: SendEmail\n          SendEmail:\n            Type: Task\n            Resource: \"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-SendEmail\"\n            End: true\n\nresources:\n  Outputs:\n    EmailSchedulingStateMachine:\n      Description: The ARN of the EmailSchedulingStateMachine\n      Value:\n        Ref: EmailSchedulingStateMachine\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-webpack # to keep package size low\n"]},{"id":73700047,"files":["service: movie-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n  region: eu-central-1\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  movies:\n    handler: index.movies\n    events:\n      - http: get movies\n"]},{"id":97662190,"files":["# Serverless configuration for the geotemporal service\n# For full config options, check the docs:\n#    docs.serverless.com\n\n# Pin the serverless version\nframeworkVersion: \"=1.17.0\"\n\nservice: here-one-geotemporal\n\n# Plugins\nplugins:\n  - serverless-offline\n  - serverless-plugin-offline-kinesis-events\n  - serverless-plugin-bind-deployment-id\n  - serverless-plugin-git-variables\n  - serverless-plugin-cloudwatch-sumologic\n  - serverless-plugin-deploy-environment\n  - serverless-plugin-aws-alerts\n\ncustom:\n  # See: https://github.com/elastic-coders/serverless-webpack\n  webpack: webpack.config.js\n  webpackIncludeModules: true\n  # If you want to ship logs to sumologic\n  # shipLogs:\n  #   collectorUrl: ${self:deployVariables.collector}\n  #   filterPattern: \"\"\n  #   function:\n  #     name: ${self:provider.stage}-${self:service}-cloudwatch-sumologic\n  #     description: Sync logs from cloudwatch to sumologic. COMMIT ${git:sha1}, BRANCH ${git:branch}\n  #     memorySize: 128\n  defaults:\n    log_level: INFO\n    stage: dev\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\n  offlineKinesisEvents:\n    host: ${self:deployEnvironment.LAMBDA_KINESIS_HOST}\n    port: ${self:deployEnvironment.LAMBDA_KINESIS_PORT}\n    region: ${self:deployEnvironment.LAMBDA_REGION}\n    # How often to poll the Kinesis stream\n    intervalMillis: 5000\n\n  notifications:\n    - protocol: https\n      endpoint: https://events.pagerduty.com/exampleIntegration\n  alerts:\n    stages:\n      - production\n      - staging\n    topics:\n      ok:\n        topic: ${self:provider.stage}-${self:service}-alerts-ok\n        notifications: ${self:custom.notifications}\n      alarm:\n        topic: ${self:provider.stage}-${self:service}-alerts-alarm\n        notifications: ${self:custom.notifications}\n      insufficientData: ${self:provider.stage}-${self:service}-alerts-insufficientData\n    definitions:\n      functionDuration:\n        evaluationPeriods: 5\n        threshold: 1000\n      functionErrors:\n        evaluationPeriods: 2\n    global:\n      - functionThrottles\n      - functionErrors\n    function:\n      - functionDuration\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.defaults.stage}\n  region: us-west-2\n  # In normal use, these would be set in config/deploy.yml\n  # domain: ${self:deployVariables.domain}\n  # role: ${self:deployVariables.role}\n\nfunctions:\n  putEvents:\n    # This is only triggered by puts to the event log\n    private: true\n    name: ${self:provider.stage}-${self:service}-put-events\n    description: Example of put events COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handlers.putEvents\n    memorySize: 128\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          arn: ${self:deployVariables.streamArn}\n          batchSize: 100\n          startingPosition: LATEST\n"]},{"id":90670104,"files":["service: vidhub-img # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n\n  stage: production\n  region: us-east-1 # Update to whatever region you would like\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - \"Ref\" : \"ServerlessDeploymentBucket\"\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource: arn:aws:s3:::img.vidhub.co/* # the bucket ARN to store images in\n\nfunctions:\n  index:\n    handler: handler.index\n    events:\n      - http:\n          path: /{img}\n          method: get\n    environment:\n      S3_BUCKET: img.vidhub.co # bucket name to store images\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Aliases:\n              - img.vidhub.co # DNS to replace CloudFront's\n          Origins:\n              - DomainName: { \"Fn::Join\": [ \".\", [ { \"Ref\": \"ApiGatewayRestApi\" }, \"execute-api\", \"us-east-1\", \"amazonaws.com\" ] ] }\n                OriginPath: /production\n                Id: vidhub-img\n                CustomOriginConfig:\n                  HTTPPort: 80\n                  HTTPSPort: 443\n                  OriginProtocolPolicy: https-only\n                  OriginSSLProtocols:\n                    - TLSv1\n                    - TLSv1.1\n                    - TLSv1.2\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            TargetOriginId: vidhub-img\n            ViewerProtocolPolicy: redirect-to-https\n            ForwardedValues:\n              Cookies:\n                Forward: none\n              QueryString: true\n          Enabled: true\n          Comment: Vidhub Img  # Can be whatever\n          DefaultRootObject: index.html\n          ViewerCertificate:\n            AcmCertificateArn: arn:aws:acm:us-east-1:563115270151:certificate/826e8b5b-3ace-4fdf-83be-330a66a27ee7 # A certificate in ACM for the DNS being used\n            SslSupportMethod: sni-only\n          PriceClass: PriceClass_100\n"]},{"id":108477597,"files":["service: microservice-notes\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  stage: v1\n  deploymentBucket: ${env:DEPLOYMENT_BUCKET}\n  iamRoleStatements:\n  - Effect: Allow\n    Action: \n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"*\"\n\nfunctions:\n  app:\n    name: microservice-notes-${self:provider.stage}\n    handler: src/handler.microservice\n    description: Microservice to notes\n    memorySize: 512\n    timeout: 150\n    events:\n      - http:\n          method: GET\n          path: notes\n          cors: true\n      - http:\n          method: GET\n          path: notes/{id}\n          cors: true\n      - http:\n          method: POST\n          path: notes\n          cors: true\n      - http:\n          method: PUT\n          path: notes/{id}\n          cors: true\n      - http:\n          method: DELETE\n          path: notes/{id}\n          cors: true\n\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: ${self:service}-${self:custom.stage}\n    #### Gateway Response INIT\n    GatewayResponseDefault400:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: DEFAULT_4XX\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"4XX-generic\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseDefault500:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: DEFAULT_5XX\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"5XX-generic\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAccessDeied:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: ACCESS_DENIED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-access-denied\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseApiConfigurationError:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: API_CONFIGURATION_ERROR\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-api-configuration-error\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAuthorizerConfigurationError:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: AUTHORIZER_CONFIGURATION_ERROR\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-authorizer-configuration-error\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseAuthorizerFailure:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: AUTHORIZER_FAILURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"500-authorizer-failure\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseBadRequestBody:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: BAD_REQUEST_BODY\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"400-bad-request-body\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseBadRequestParameters:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: BAD_REQUEST_PARAMETERS\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"400-bad-request-parameters\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseExpiredToken:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: EXPIRED_TOKEN\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-expired-token\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseIntegrationFailure:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INTEGRATION_FAILURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"504-integration-failure\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseIntegrationTimeout:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INTEGRATION_TIMEOUT\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"504-integration-timeout\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseInvalidApiKey:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INVALID_API_KEY\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-invalid-api-key\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseInvalidSignature:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: INVALID_SIGNATURE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-invalid-signature\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseMissingAuthenticationToken:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: MISSING_AUTHENTICATION_TOKEN\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"403-missing-authentication-token\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseQuotaExceeded:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: QUOTA_EXCEEDED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"429-quota-exceeded\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseRequestTooLarge:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: REQUEST_TOO_LARGE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"413-request-too-large\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseResourceNotFound:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: RESOURCE_NOT_FOUND\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"404-resource-not-found\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseThrottled:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: THROTTLED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"429-throttled\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseUnauthorized:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: UNAUTHORIZED\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"401-unauthorized\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    GatewayResponseUnauthorizedMediType:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        RestApiId: \n          Ref: 'ApiGatewayRestApi'\n        ResponseType: UNSUPPORTED_MEDIA_TYPE\n        ResponseTemplates:\n          application/json: \"{\\\"error\\\":{\\\"code\\\":\\\"415-unsupported-media-type\\\",\\\"message\\\":$context.error.messageString},\\\"requestId\\\":\\\"$context.requestId\\\"}\"\n    #### Gateway Response END\n\npackage:\n  exclude:\n    - .vscode/**\n    - .scripts/**\n    - tests/**\n    - coverage/**\n    - .travis.yml\n    - README.md"]},{"id":138298442,"files":["service: serverless-next-js\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: development\n  region: us-east-1\n  environment:\n    NODE_ENV: production\n    LAMBDA: true\n\nfunctions:\n  next:\n    handler: lambda.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: /{any+}"]},{"id":67196668,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: interns-portal-test # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#defaults:\n#  stage: dev\n#  region: us-east-1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  Users:\n    handler: users/usersHandler.users\n    events:\n      - http:\n          path: users\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/user\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/status/{status}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/user/{id}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: users/stat/{stat}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n\n\n  Tasks:\n    handler: tasks/tasksHandler.tasks\n    events:\n      - http:\n          path: tasks/all\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/newTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/userTask/{id}\n          method: get\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/update/userTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n      - http:\n          path: tasks/disableTask\n          method: post\n          integration: lambda\n          request: ${file(./templates.yml):request}\n\n\n\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    newResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: newBucket"]},{"id":105154233,"files":["service: custom-user-pool\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-2\n\nfunctions:\n  cloudFormationCustomUserPool:\n    handler: cloudFormationCustomUserPool.handler\n    role: CustomUserPoolRole\n    timeout: 300\n\n  postConfirmation:\n    handler: postConfirmation.handler\n    events:\n      - cognitoUserPool:\n          pool: UserPool\n          trigger: PostConfirmation\n\nresources:\n  Resources:\n    CustomUserPoolRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:provider.stage}-custom-user-pool-role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:provider.stage}-custom-user-pool-policy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cognito-idp:CreateUserPool\n                    - cognito-idp:DeleteUserPool\n                    - cognito-idp:UpdateUserPool\n                    - cognito-idp:DescribeUserPool\n                  Resource: '*'\n\n    CognitoUserPoolUserPool:\n      Type: \"Custom::UserPool\"\n      Version: \"1.0\"\n      DependsOn: CloudFormationCustomUserPoolLambdaFunction\n      Properties:\n        ServiceToken: \n          Fn::GetAtt: [ \"CloudFormationCustomUserPoolLambdaFunction\", \"Arn\" ]\n        Region:\n          Ref: AWS::Region\n        AccountId:\n          Ref: AWS::AccountId\n        PoolProperties:\n          PoolName: ${self:service}-${self:provider.stage}-UserPool\n          MfaConfiguration: OFF\n          VerificationMessageTemplate:\n            DefaultEmailOption: \"CONFIRM_WITH_CODE\"\n          AdminCreateUserConfig:\n            UnusedAccountValidityDays: 7 \n            AllowAdminCreateUserOnly: false\n          AutoVerifiedAttributes:\n            - email\n          Policies:\n            PasswordPolicy:\n              RequireLowercase: true\n              RequireSymbols: true\n              RequireNumbers: true\n              MinimumLength: 8\n              RequireUppercase: true\n          UsernameAttributes:\n            - email\n          Schema:\n            - Name: name\n              AttributeDataType: String\n              Mutable: true\n              Required: true\n            - Name: email\n              AttributeDataType: String\n              Mutable: false\n              Required: true\n\n    CognitoUserPoolClientUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:service}-${self:provider.stage}-UserPoolClient\n        UserPoolId:\n          Ref: CognitoUserPoolUserPool\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n        GenerateSecret: false\n        RefreshTokenValidity: 30\n        ReadAttributes:\n          - name\n          - email\n\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: CognitoUserPoolUserPool\n    UserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClientUserPoolClient\n"]},{"id":67726068,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: wire-o # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\ncustom: ${file(./wire-o.yml)}\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: arn:aws:lambda:us-east-1::*:*\n    - Effect: Allow\n      Action:\n        - apigateway:POST\n      Resource: arn:aws:apigateway:us-east-1:*:*\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  index:\n    handler: dist/app.handler\n    events:\n      - http:\n          path: merge\n          method: POST\n          integration: lambda\n    environment:\n      s3BucketName: ${self:custom.s3BucketName}\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nresources:\n  Resources:\n    mergedPDFs:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3BucketName}\n"]},{"id":60664832,"files":["service: bittman\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n  calculateVolatility:\n    handler: calculateVolatility/handler.calculate\n    include:\n      - calculateVolatility/**\n      - node_modules\n    events:\n      - http: GET calculate\n      - schedule: cron(30 21 ? * WED *)\n\n  calculateTriggers:\n    handler: calculateTriggers/handler.calculate\n    include:\n      - calculateTriggers/**\n      - node_modules\n    events:\n      - http: GET triggers\n      - schedule: cron(31 14 ? * THU *)\n\nresources:\n  Resources:\n    BittmanDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":100717516,"files":["\nservice: push-notification-service\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  stage: dev\n\nfunctions:\n  notification:\n    handler: index.sendNotification\n    events:\n      - http:\n          path: notification\n          method: post\n"]},{"id":68395169,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: trevorbot # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#defaults:\n#  stage: dev\n#  region: us-east-1\n\nfunctions:\n  trevorbot:\n    handler: handler.trevorbot\n    events:\n      - http:\n          path: trevorbot\n          method: POST\n","# This is the Serverless Environment File\n#\n# It contains listing of your stages and their regions\n# It also manages serverless variables at 3 levels:\n#    - common variables: variables that apply to all stages/regions\n#    - stage variables: variables that apply to a specific stage\n#    - region variables: variables that apply to a specific region\n\nvars:\nstages:\n  dev:\n    vars:\n    regions:\n      us-east-1:\n        vars:\n"]},{"id":145315121,"files":["service: serverless-graphql\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n\nfunctions:\n  graphql:\n    handler: index.handler\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  playground:\n    handler: index.handler\n    events:\n      - http:\n          path: playground\n          method: get\n"]},{"id":113140402,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: hello-world-cd\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n"]},{"id":142867308,"files":["service: school-menu\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-northeast-2\n\nfunctions:\n  api:\n    handler: lambda.handler\n    events:\n      - http:\n          method: GET\n          cors: true\n          path: /{proxy+}"]},{"id":166302607,"files":["tenant: rpidanny\napp: nietzsche\nservice: nietzsche\n\nplugins:\n  - serverless-offline\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-plugin-include-dependencies\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n  include:\n    - src/assets/**/*\n  exclude:\n    - node_modules/**\n    - README.md\n    - package.json\n    - package-lock.json\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  region: eu-west-1\n  versionFunctions: false\n  stage: dev\n  tracing:\n    lambda: true\n    apiGateway: true\n  stackTags:\n    PROJECT: ${self:service}\n    STAGE: ${opt:stage, self:provider.stage}\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-quotes\n    SNS_SCRAP_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-scrap\n    SQS_QUOTES: ${self:service}-${opt:stage, self:provider.stage}-quotes\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - sns:Publish\n        - sns:Subscribe\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:provider.environment.SNS_SCRAP_TOPIC}\" ] ]  }\n    - Effect: Allow\n      Action:\n        - sqs:SendMessage\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:GetQueueUrl\n        - sqs:ListQueues\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:sqs:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:provider.environment.SQS_QUOTES}\" ] ]  }\n\nfunctions:\n  - ${file(functions/dispatchScrappers.yml)}\n  - ${file(functions/scrapQuotes.yml)}\n  - ${file(functions/saveQuotes.yml)}\n  - ${file(functions/tweetQuoteText.yml)}\n  - ${file(functions/tweetQuoteImage.yml)}\n  - ${file(functions/getQuotesByAuthor.yml)}\n  - ${file(functions/getRandomQuote.yml)}\n  - ${file(functions/incrementUsedCounter.yml)}\n  - ${file(functions/decideTweetMode.yml)}\n\nresources:\n  Resources:\n    quotesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: author\n            AttributeType: S\n          - AttributeName: quoteId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: author\n            KeyType: HASH\n          - AttributeName: quoteId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n    pagesSNSTopic:\n      Type: AWS::SNS::Topic\n      Properties: \n        DisplayName: ${self:provider.environment.SNS_SCRAP_TOPIC}\n        TopicName: ${self:provider.environment.SNS_SCRAP_TOPIC}\n    quotesQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        MessageRetentionPeriod: 345600\n        QueueName: ${self:provider.environment.SQS_QUOTES}\n        ReceiveMessageWaitTimeSeconds: 1\n        VisibilityTimeout: 300\n\ncustom:\n  optimize:\n    includePaths: ['src/assets']\n\nstepFunctions:\n  stateMachines:\n    tweetQuote:\n      name: ${self:service}-${opt:stage}-tweetQuoteStateMachine\n      events:\n        - schedule:\n            rate: cron(30 16 * * ? *)\n            enabled: true\n        - schedule:\n            rate: cron(30 07 * * ? *)\n            enabled: true\n        - schedule:\n            rate: cron(15 00 * * ? *)\n            enabled: true\n      definition:\n        Comment: \"Tweets random quote.\"\n        StartAt: GET_RANDOM_QUOTE\n        States:\n          GET_RANDOM_QUOTE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getRandomQuote\n            Retry:\n              - ErrorEquals:\n                - HandledError\n                IntervalSeconds: 5\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - NoQuoteError\n                IntervalSeconds: 5\n                MaxAttempts: 2\n                BackoffRate: 2\n            Next: DECIDE_TWEET_MODE\n          DECIDE_TWEET_MODE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-decideTweetMode\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: TWEET_MODE_CHOICE\n          TWEET_MODE_CHOICE:\n            Type: Choice\n            Choices:\n            - Variable: \"$.mode\"\n              StringEquals: \"text\"\n              Next: TWEET_QUOTE_TEXT\n            - Variable: \"$.mode\"\n              StringEquals: 'image'\n              Next: TWEET_QUOTE_IMAGE\n            Default: TWEET_QUOTE_TEXT\n          TWEET_QUOTE_TEXT:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteText\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: INCREMENT_QUOTE_COUNTER\n          TWEET_QUOTE_IMAGE:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-tweetQuoteImage\n            Catch:\n              - ErrorEquals: [\"LongQuoteError\"] \n                Next: GET_RANDOM_QUOTE\n            Next: INCREMENT_QUOTE_COUNTER\n          INCREMENT_QUOTE_COUNTER:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-incrementUsedCounter\n            Retry:\n              - ErrorEquals:\n                - HandledError\n                IntervalSeconds: 1\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - States.TaskFailed\n                IntervalSeconds: 30\n                MaxAttempts: 2\n                BackoffRate: 2\n              - ErrorEquals:\n                - States.ALL\n                IntervalSeconds: 5\n                MaxAttempts: 5\n                BackoffRate: 2\n            End: true\n"]},{"id":87488765,"files":["service: hammertime\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage: '${env:SLICE}'\n  region: '${env:AWS_REGION}'\n  deploymentBucket: '${env:DEPLOY_BUCKET}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'ec2:CreateTags'\n        - 'ec2:DeleteTags'\n        - 'ec2:DescribeInstances'\n        - 'ec2:StartInstances'\n        - 'ec2:StopInstances'\n        - 'rds:DescribeDBInstances'\n        - 'rds:ListTagsForResource'\n        - 'rds:AddTagsToResource'\n        - 'rds:RemoveTagsFromResource'\n        - 'rds:StartDBInstance'\n        - 'rds:StopDBInstance'\n        - 'autoscaling:CreateOrUpdateTags'\n        - 'autoscaling:DeleteTags'\n        - 'autoscaling:DescribeAutoScalingGroups'\n        - 'autoscaling:UpdateAutoScalingGroup'\n      Resource: '*'\n    - Effect: Allow\n      Action:\n        - 'logs:CreateLogGroup'\n        - 'logs:CreateLogStream'\n        - 'logs:PutLogEvents'\n      Resource: 'arn:aws:logs:*:*:*'\n  environment:\n    hammerTimeDryRun: '${file(./isDryRun.js):isDryRun}'\n    defaultOperatingTimezone: '${file(./operatingTimezones.js):defaultOperatingTimezone}'\n  custom:\n    enabled: '${file(./isEnabled.js):isEnabled}'\nfunctions:\n  stop-hammertime:\n    handler: hammertime.stop\n    timeout: 180\n    events: ${file(./events.js):stop}\n  start-hammertime:\n    handler: hammertime.start\n    timeout: 180\n    events: ${file(./events.js):start}\n"]},{"id":89801584,"files":["service: hapi-serverless\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: development\n  profile: default\n  region: eu-west-1\n\nfunctions:\n  api:\n    handler: src/api/index.handler\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":145358908,"files":["service: serverless-custom-authorizer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  stage: dev\n  region: us-east-1\n  timeout: 300\n  memorySize: 1024\n\nfunctions:\n  auth:\n    handler: index.auth\n    \n  private:\n    handler: index.private\n    events:\n      - http:\n          path: private\n          method: get\n          authorizer: auth   #https://serverless.com/framework/docs/providers/aws/events/apigateway/#http-endpoints-with-custom-authorizers\n          cors: true\n\n  public:\n    handler: index.public\n    events:\n      - http:\n          path: public\n          method: get\n          cors: true\n\n#https://github.com/serverless/serverless/issues/3896#issuecomment-326721971\n#https://github.com/serverless/examples/blob/master/aws-node-auth0-custom-authorizers-api/serverless.yml#L33\nresources:\n  Resources:\n    ExpiredGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        ResponseTemplates:\n          application/json: |\n            {\n              \"success\":false,\n              \"message\":\"Token Expired\"\n            }\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseTemplates:\n            application/json: |\n              {\n                \"success\":false,\n                \"message\":$context.error.messageString\n              }\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    DenyFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseTemplates:\n            #https://stackoverflow.com/a/49806967/10212963\n            application/json: |\n              {\n                \"success\":false,\n                \"message\":\"$context.authorizer.customErrorMessage\"\n              }\n        ResponseType: ACCESS_DENIED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '403'\n    \n\nplugins:\n  - serverless-offline\n"]},{"id":127030748,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n\n  helloAuthorizerWithFunctionName:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: handler.authFunction\n\n  hello500:\n    handler: handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n  basicAuthentication:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  catchAll:\n    handler: handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n  pathParams:\n    handler: handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Service Name\nservice: book-service\n\n# plugins\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    dbName: 'book'\n    dbUser: 'test'\n    dbPass: 'xyz'\n    dbHost: '0.0.0.0'\n\n# custom\ncustom:\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\", \"stage-2\"]\n\nfunctions:\n  \n  postBook:\n    handler: handler.postBook\n    name : postBook\n    events:\n      - http:\n          path: book\n          method: post\n    \n  deleteBook:\n    handler: handler.deleteBook\n    name: deleteBook\n    events:\n      - http:\n          path: book/{Id}\n          method: delete\n\n  updateBook:\n    handler: handler.updateBook\n    name: updateBook\n    events:\n      - http:\n          path: book/{Id}\n          method: put\n\n  getAllBooks:\n    handler: handler.getAllBooks\n    name: getAllBooks\n    events:\n      - http:\n          path: book\n          method: get"]},{"id":140448016,"files":["service: sheets-automation\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2    \n\nfunctions:\n  generate-next-newsletter:\n    handler: handler.generateNewsletter\n    events:\n      - schedule: cron(0 19 ? 1-10 THU *)\n    environment:\n      googleSheetId: <your-google-sheet-id>\n      mailChimpKey: <your-mailchimp-api-key>\n      mailchimpListId: <your-mailchimp-unique-list-id>\n"]},{"id":120137065,"files":["service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v8.9.4-linux-x64/bin/node\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - \"**/**\"\n  include:\n    - node-v8.9.4-linux-x64/bin/node\n    - src/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n","service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v9.5.0-linux-x64/bin/node\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - \"**/**\"\n  include:\n    - node-v9.5.0-linux-x64/bin/node\n    - src/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n","service: serverless-plugin-node-shim-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-plugin-node-shim\n\ncustom:\n  nodeShim:\n    execPath: node-v9.5.0-linux-x64/bin/node\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n  world:\n    handler: src/handler.world\n  other:\n    handler: src/other.other\n"]},{"id":109232445,"files":["service: serverless-wechat\n\nplugins:\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 5\n  region: us-east-1\n\nfunctions:\n  runserver:\n    handler: handler.runserver\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      TOKEN: ${file(./config.yml):TOKEN}\n      APP_ID: ${file(./config.yml):APP_ID}\n      AESKey: ${file(./config.yml):AESKey}\n\ncustom:\n  customDomain:\n    domainName: wechat.wdsm.io\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n"]},{"id":149945031,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: utd-grades\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# Get environment variables\ncustom:\n  serverless-offline:\n    port: 4000\n  dbConfig: ${file(env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: utd-grades\n  region: us-east-2\n  stage: production\n  stackTags:\n    environment: production\n    project: utd-grades\n  environment:\n    dbName: ${self:custom.dbConfig.dbName}\n    dbUser: ${self:custom.dbConfig.dbUser}\n    dbPass: ${self:custom.dbConfig.dbPass}\n    dbHost: ${self:custom.dbConfig.dbHost}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n\nfunctions:\n  getSection:\n    handler: services/section/get.get\n    events:\n      - http:\n          path: section/{id}\n          method: get \n          request: \n            parameters: \n              paths: \n                id: true\n          cors: true\n  \n  findSection:\n    handler: services/section/find.find\n    events:\n      - http:\n          path: section\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: nlp\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: utd-grades\n  region: us-east-2\n  stage: production\n  stackTags:\n    environment: production\n    project: utd-grades\n\npackage:\n  exclude:\n    - venv/**\n\nfunctions:\n  parser:\n    handler: app.services.parser.find.find\n    events:\n      - http:\n          path: parser\n          method: get\n          cors: true\n\n# Un-comment the following lines\n# once we have external dependencies\n\n# plugins:\n#   - serverless-python-requirements\n\n# custom:\n#   pythonRequirements:\n#     dockerizePip: true\n"]},{"id":99412053,"files":["service: s3-directory-list\n\nplugins:\n  - serverless-external-s3-event\n  - serverless-webpack\n\ncustom:\n  bucketName: ${file(custom.yml):bucketName}\n  darkTheme: ${file(custom.yml):darkTheme, 'false'}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 256\n\n  stage: dev\n  region: eu-west-1\n  profile: serverless\n\n\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:ListBucket\"\n     Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:PutObject\"\n     Resource:\n       Fn::Join:\n         - \"\"\n         - - \"arn:aws:s3:::\"\n           - \"Ref\" : \"ServerlessDeploymentBucket\"\n           - \"/*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:ListBucket\"\n     Resource: \"arn:aws:s3:::${self:custom.bucketName}\"\n   - Effect: \"Allow\"\n     Action:\n       - \"s3:GetObject\"\n       - \"s3:PutObject\"\n     Resource: \"arn:aws:s3:::${self:custom.bucketName}/*\"\n\n   - Effect: \"Allow\"\n     Action:\n      - \"s3:PutBucketNotification\"\n     Resource:\n      Fn::Join:\n        - \"\"\n        - - \"arn:aws:s3:::${self:custom.bucketName}\"\n\nfunctions:\n  generateListing:\n    handler: src/handler.generateListing\n    environment:\n      darkTheme: ${self:custom.darkTheme}\n    events:\n      - existingS3:\n          bucket: ${self:custom.bucketName}\n          events:\n            - s3:ObjectCreated:*\n            - s3:ObjectRemoved:*\n      # - s3:\n      #     bucket: ${self:custom.bucketName}\n      #     events:\n      #       - s3:ObjectCreated:*\n      #       - s3:ObjectRemoved:*\n"]},{"id":139373486,"files":["# serverless.yml\n\nservice: cosmic-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    COSMIC_BUCKET: ${env:COSMIC_BUCKET}\n    COSMIC_READ_KEY: ${env:COSMIC_READ_KEY}\n\nfunctions:\n  app:\n    handler: app.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\nplugins:\n  - serverless-offline"]},{"id":107099894,"files":["service: alexa-skill-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  memorySize: 256\n  cfLogs: true\n\nfunctions:\n  skill:\n    handler: src/index.handler\n    description: Alexa hello world skill\n    events:\n      - alexaSkill\n"]},{"id":155041668,"files":["service: aws-mfa-enforce\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  memorySize: 128\n  role: customRole\n\nfunctions:\n  cron:\n    handler: handler.handler\n    environment:\n      EMAIL: ${ssm:email}\n      PASSWORD: ${ssm:email_password}\n      EMAIL_SUBJECT: Activate Multi Factor Authentication to access AWS services\n      EMAIL_BODY: > \n        Hello,<br/>\n        <p>Your email was recently added our organizational AWS account. To enhance the security of your account Multi Factor Authentication (MFA) has been enforced. <b><i>You cannot access any AWS service until you activate MFA</i></b>.</p>\n        <p>To activate MFA for your AWS user account, please follow the steps provided at: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user</p><br/>\n        Regards,<br/>\n        Security Bot\n    events:\n      - schedule: rate(12 hours)\n\nresources:\n  Resources:\n    customRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ServerlessFrameworkRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ServerlessPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n              - Sid: AllowIAMForLambdaPolicy\n                Effect: Allow\n                Action:\n                - iam:GetGroup\n                - iam:ListUsers\n                - iam:AddUserToGroup\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n    mfaGroup:\n      Type: AWS::IAM::Group\n      Properties:\n        GroupName: MFA-enforced\n        Policies:\n        - PolicyName: MFA\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Sid: AllowAllUsersToListAccounts\n                Effect: Allow\n                Action:\n                - iam:ListAccountAliases\n                - iam:ListUsers\n                - iam:ListVirtualMFADevices\n                - iam:GetAccountPasswordPolicy\n                - iam:GetAccountSummary\n                Resource: \"*\"\n              - Sid: AllowIndividualUserToSeeAndManageOnlyTheirOwnAccountInformation\n                Effect: Allow\n                Action:\n                - iam:ChangePassword\n                - iam:CreateAccessKey\n                - iam:CreateLoginProfile\n                - iam:DeleteAccessKey\n                - iam:DeleteLoginProfile\n                - iam:GetLoginProfile\n                - iam:ListAccessKeys\n                - iam:UpdateAccessKey\n                - iam:UpdateLoginProfile\n                - iam:ListSigningCertificates\n                - iam:DeleteSigningCertificate\n                - iam:UpdateSigningCertificate\n                - iam:UploadSigningCertificate\n                - iam:ListSSHPublicKeys\n                - iam:GetSSHPublicKey\n                - iam:DeleteSSHPublicKey\n                - iam:UpdateSSHPublicKey\n                - iam:UploadSSHPublicKey\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n              - Sid: AllowIndividualUserToViewAndManageTheirOwnMFA\n                Effect: Allow\n                Action:\n                - iam:CreateVirtualMFADevice\n                - iam:DeleteVirtualMFADevice\n                - iam:EnableMFADevice\n                - iam:ListMFADevices\n                - iam:ResyncMFADevice\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:mfa/'\n                    - '${aws:username'\n                    - '}'\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n              - Sid: AllowIndividualUserToDeactivateOnlyTheirOwnMFAOnlyWhenUsingMFA\n                Effect: Allow\n                Action:\n                - iam:DeactivateMFADevice\n                Resource:\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:mfa/'\n                    - '${aws:username'\n                    - '}'\n                - 'Fn::Join':\n                  - ''\n                  - - 'arn:aws:iam::*:user/'\n                    - '${aws:username'\n                    - '}'\n                Condition:\n                  Bool:\n                    aws:MultiFactorAuthPresent: 'true'\n              - Sid: BlockMostAccessUnlessSignedInWithMFA\n                Effect: Deny\n                NotAction:\n                - iam:CreateVirtualMFADevice\n                - iam:DeleteVirtualMFADevice\n                - iam:ListVirtualMFADevices\n                - iam:EnableMFADevice\n                - iam:ResyncMFADevice\n                - iam:ListAccountAliases\n                - iam:ListUsers\n                - iam:ListSSHPublicKeys\n                - iam:ListAccessKeys\n                - iam:ListServiceSpecificCredentials\n                - iam:ListMFADevices\n                - iam:GetAccountSummary\n                - sts:GetSessionToken\n                Resource: \"*\"\n                Condition:\n                  BoolIfExists:\n                    aws:MultiFactorAuthPresent: 'false'"]},{"id":120125128,"files":["service:\n  name: atomic-algolia\n\nprovider:\n  name: webtasks\n  environment: \n    ALGOLIA_APP_ID: \"${env:ALGOLIA_APP_ID, opt:ALGOLIA_APP_ID, self:custom.ALGOLIA_APP_ID}\"\n    ALGOLIA_ADMIN_KEY: \"${env:ALGOLIA_APP_ID, opt:ALGOLIA_APP_ID, self:custom.ALGOLIA_ADMIN_KEY}\"\n    DEBOUNCE: \"${env:DEBOUNCE, opt:DEBOUNCE, self:custom.DEBOUNCE}\"\n    INDEXES: ${file(./config/indexes.js)}\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n  ALGOLIA_APP_ID: ${file(./config/secrets.yml):ALGOLIA_APP_ID}\n  ALGOLIA_ADMIN_KEY: ${file(./config/secrets.yml):ALGOLIA_ADMIN_KEY}\n  DEBOUNCE: ${file(./config/secrets.yml):DEBOUNCE}\n\nfunctions:\n  main:\n    handler: handler\n    events:\n      - schedule: rate(1 day)\n\nplugins:\n  - '@webtask/serverless-webtasks'"]},{"id":121181914,"files":["service: owl-graphql\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  logRetentionInDays: 3\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    NODE_ENV: ${env:NODE_ENV}\n    STAGE: ${opt:stage, self:provider.stage}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  serverless-offline:\n    port: 4000\n  webpackIncludeModules: true\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  playground:\n    handler: src/handler.playgroundHandler\n    events:\n    - http:\n        path: playground\n        method: get\n        cors: true\n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n"]},{"id":91932285,"files":["\nconst serverlessYml = require('../serverless-interpolated')\nconst { Resources } = serverlessYml.resources\n// const tables = Object.keys(Resources)\n//   .filter(name => Resources[name].Type === 'AWS::DynamoDB::Table')\n\nif (!Resources.ServerlessDeploymentBucket) {\n  Resources.ServerlessDeploymentBucket = {\n    Type: 'AWS::S3::Bucket'\n  }\n}\n\nif (!Resources.ApiGatewayRestApi) {\n  Resources.ApiGatewayRestApi = {\n    Type: 'AWS::ApiGateway::RestApi'\n  }\n}\n\n// normalize tables\n// tables.forEach(name => {\n//   const { Type, Properties } = Resources[name]\n//   if (Properties.StreamSpecification) {\n//     Properties.StreamSpecification.StreamEnabled = true\n//   }\n// })\n\nexport = serverlessYml\n","service: ${{self:custom.service}}\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\nplugins:\n  - prepare-offline\n  # - serverless-resources-env\n  - serverless-plugin-tracing\n  # - serverless-pseudo-parameters\n  # - serverless-sam\n  # - serverless-apigw-binary\n  - serverless-plugin-aws-alerts\n  # - serverless-plugin-common-excludes\n  - serverless-plugin-log-retention\n  # - serverless-dynamodb-autoscaling\n  # - serverless-s3-encryption\n  # - serverless-plugin-split-stacks\n  # - serverless-plugin-warmup\n  # - serverless-plugin-typescript\n  # - print\n  # - warmup\n  # - serverless-dynamodb-ttl\n  # - serverless-plugin-write-env-vars\n  # - serverless-plugin-include-dependencies\n  # - serverless-dynamodb-local\n  # - serverless-dynamodb-local\n  # - serverless-s3-local\n  - serverless-iot-local\n  - init-local\n  - serverless-offline\n  - pre-deploy\n  # - serverless-offline-scheduler\n\npackage:\n  # artifactDirectoryName: serverless/${{self:service}}/${{self:provider.stage}}/artifacts\n  include:\n    - conf\n    - data\n    - serverless-interpolated.yml\n  exclude:\n    - src/**\n    - vars.json\n    - logs/**\n    - \"*.log\"\n    - \"*.rdb\"\n    - \".*\"\n    - loadtesting/**\n    - myswagger.json\n    - myidentity.json\n    - lib/test/**\n    - lib/scripts/**\n    - conf/**\n    - certs/**\n    - org/**\n    - docker/**\n    - docs/**\n    - codebuild/**\n    - node_modules/**/*.ts\n    - node_modules/**/*.d.ts\n    - node_modules/**/test/*\n    - node_modules/**/tests/*\n    - node_modules/chokidar/**\n    - node_modules/fsevents/**\n    - node_modules/canvas/**\n    - \"node_modules/@tradle/gen-samples/**\"\n    - npm-shrinkwrap.json\n    - clienttest/\n    - .localstack/**\n\ncustom:\n  vars: ${{file(./vars.json), file(./default-vars.json)}}\n  version: ${{file(./lib/version.json)}}\n  defaults: ${{file(./default-vars.json)}}\n  # move these to vars.json when this issue is fixed:\n  #   https://github.com/serverless/serverless/issues/3740\n  service: ${{self:custom.vars.service, self:custom.defaults.service}}\n  stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaults.stage}}\n  # stage: dev\n  region: ${{opt:region, self:custom.vars.region, self:custom.defaults.region}}\n  profile: ${{opt:profile, self:custom.vars.profile, self:custom.defaults.profile}}\n  stackName: ${{self:service}}-${{self:custom.stage}}\n  versionFunctions: ${{self:custom.vars.versionFunctions, self:custom.defaults.versionFunctions}}\n  deploymentBucket: ${{file(./lib/cli/get-stack-parameter.js):parameterExistingDeploymentBucket}}\n\n  blockchain: ${{self:custom.vars.blockchain, self:custom.defaults.blockchain}}\n  corda: ${{self:custom.vars.corda, self:custom.defaults.corda}}\n  # providerConf: &providerConf\n  #   ${{file(./src/in-house-bot/conf/provider.json)}}\n  # org: ${{self:custom.vars.org, self:custom.defaults.org}}\n\n  # logging: ${{self:custom.vars.logging, self:custom.defaults.logging}}\n\n  # copied from vars.json\n  # blockchain: ${{self:custom.vars.blockchain}}\n  # thresholdBillingAlarm: ${{self:custom.vars.thresholdBillingAlarm, self:custom.defaults.thresholdBillingAlarm}}\n  thresholdThrottlingAlarm: ${{self:custom.vars.thresholdThrottlingAlarm, self:custom.defaults.thresholdThrottlingAlarm}}\n  thresholdErrorsAlarm: ${{self:custom.vars.thresholdErrorsAlarm, self:custom.defaults.thresholdErrorsAlarm}}\n  thresholdInvocationsAlarm: ${{self:custom.vars.thresholdInvocationsAlarm, self:custom.defaults.thresholdInvocationsAlarm}}\n  thresholdDurationAlarm: ${{self:custom.vars.thresholdDurationAlarm, self:custom.defaults.thresholdDurationAlarm}}\n\n  # stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaultStage}}\n  # region: ${{opt:region, self:custom.vars.region}}\n\n  # prefixes\n  prefix: ${{self:service}}-${{self:custom.stage}}-\n  # regionalPrefix: ${{self:service}}-${{self:custom.stage}}-${{self:custom.region}}-\n  # prefixRole: ${{self:custom.regionalPrefix}}\n  # maybe during info/auth, the server can send back the prefix\n  # prefixIOTTopic: ${{self:service}}-\n  # iotParentTopic: ${{self:custom.stackName}}\n  # prefixSNSTopic: ${{self:custom.prefix}}\n  prefixSQS: ${{self:custom.prefix}}\n  # apigateway\n  # adhere to serverless framework format\n  # apiGateway: ${{self:custom.stage}}-${{self:service}}\n\n  # versions\n  versionSQL: \"2016-03-23\"\n  s3TemplatesPath: ${{self:custom.version.templatesPath}}\n\n  # sns\n  # billingAlarmTopic: ${{self:custom.prefixSNSTopic}}BillingAlarmNotification\n  # throttlingAlarmTopic: ${{self:custom.prefixSNSTopic}}ThrottlingAlarmNotification\n  # invocationsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationAlarmNotification\n  # invocationErrorsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationErrorsAlarmNotification\n\n  alertNotifications:\n    - protocol: email\n      endpoint:\n        Ref: OrgAdminEmail\n        # Fn::FindInMap: [\"org\", \"contact\", \"adminEmail\"]\n\n  alerts:\n    stages:\n      - dev\n    dashboards: true\n    topics:\n      # ok:\n      #   topic: ${{self:custom.prefix}}alerts-ok\n      #   notifications: ${{self:custom.alertNotifications}}\n      alarm:\n        topic: ${{self:custom.prefix}}alerts-alarm\n        notifications: ${{self:custom.alertNotifications}}\n      # insufficientData:\n      #   topic: ${{self:custom.prefix}}alerts-insufficientData\n      #   notifications: ${{self:custom.alertNotifications}}\n    definitions:\n      functionErrors:\n        period: 60\n        threshold: ${{self:custom.thresholdErrorsAlarm}}\n      functionThrottles:\n        period: 60\n        threshold: ${{self:custom.thresholdThrottlingAlarm}}\n      functionInvocations:\n        period: 60\n        threshold: ${{self:custom.thresholdInvocationsAlarm}}\n      functionDuration:\n        period: 60\n        threshold: ${{self:custom.thresholdDurationAlarm}}\n    alarms:\n      # - functionErrors\n      # - functionThrottles\n      # - functionInvocations\n      # - functionDuration\n\n  # sqs\n  deadLetterQueueName: ${{self:custom.prefixSQS}}dead-letter-queue\n\n  tables:\n    # presence: ${{self:custom.prefix}}presence\n    # seals: ${{self:custom.prefix}}seals\n    # pubkeys: ${{self:custom.prefix}}pubkeys\n    # messages: ${{self:custom.prefix}}messages\n    events: ${{self:custom.prefix}}events\n    # pushsubscribers: ${{self:custom.prefix}}pushsubscribers\n    # users: ${{self:custom.prefix}}users\n    # friends: ${{self:custom.prefix}}friends\n    # conf: ${{self:custom.prefix}}conf\n    # kv: ${{self:custom.prefix}}kv\n    # backlinks: ${{self:custom.prefix}}backlinks\n\n  # defaultScaleInOut: &defaultScaleInOut\n  #   scaleOut: 0\n  #   scaleIn: 60\n\n  # # auto-scaled tables that serve as buckets for multiple models each\n  # defaultCapacityRead: &defaultCapacityRead\n  #   read:\n  #     minimum: 5        # Minimum read capacity\n  #     maximum: 100      # Maximum read capacity\n  #     usage: 0.70       # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # defaultCapacityWrite: &defaultCapacityWrite\n  #   write:\n  #     minimum: 5        # Minimum read capacity\n  #     maximum: 100      # Maximum read capacity\n  #     usage: 0.5        # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # defaultCapacity: &defaultCapacity\n  #   <<: *defaultCapacityRead\n  #   <<: *defaultCapacityWrite\n\n  # tableBuckets:\n  #   count: 1\n  #   read:\n  #     minimum: 10       # Minimum read capacity\n  #     maximum: 500      # Maximum read capacity\n  #     usage: 0.70       # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  #   write:\n  #     minimum: 10       # Minimum read capacity\n  #     maximum: 500      # Maximum write capacity\n  #     usage: 0.5        # Targeted usage percentage\n  #     <<: *defaultScaleInOut\n\n  # dynamodb-autoscaling:\n  #   role: AutoScalingDynamoDBRole\n  #   capacities:\n  #     # bucket-x table scaling is added in compile script\n\n  #     - table: EventsTable\n  #       write:\n  #         minimum: 5        # Minimum write capacity\n  #         maximum: 100      # Maximum write capacity\n  #         usage: 0.5        # Targeted usage percentage\n  #         <<: *defaultScaleInOut\n\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - Content-Encoding\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n      - X-Tradle-Sig\n      - X-Tradle-Auth\n      - cache\n    allowCredentials: false\n\n  serverless-offline: ${{self:custom.vars.serverless-offline, self:custom.defaults.serverless-offline}}\n  serverless-iot-local: ${{self:custom.vars.serverless-iot-local, self:custom.defaults.serverless-iot-local}}\n  # reinitializeOnConfChanged: ${{self:custom.vars.reinitializeOnConfChanged, self:custom.defaults.reinitializeOnConfChanged}}\n\n  # serverless-dynamodb-local settings\n  # dynamodb:\n  #   start:\n  #     port: 4569\n  #     # migrate: true\n  #     inMemory: true\n  #     # use dockerized dynamodb from localstack\n  #     noStart: true\n  #   # tables:\n  #   #   - ${{self:custom.prefix}}events\n  #   #   - ${{self:custom.prefix}}bucket-0\n\n  # serverless-s3-local settings\n  # s3:\n  #   host: 0.0.0.0\n  #   port: 4572\n  #   # directory: /tmp\n  #   buckets:\n  #     - ${{self:custom.prefix}}objectsbucket\n  #     - ${{self:custom.prefix}}secretsbucket\n  #     - ${{self:custom.prefix}}privateconfbucket\n  #     - ${{self:custom.prefix}}fileuploadbucket\n  #     - ${{self:custom.prefix}}logsbucket\n  #   cors: false\n  #   # use dockerized s3 from localstack\n  #   noStart: true\n  #   create: false\n\n  # s3-encryption:\n  #   buckets:\n  #     SecretsBucket:\n  #       SSEAlgorithm: AES256\n\n  logRetentionInDays: 1\n  # daysBeforeLogsGoToGlacier: 7\n\n  # issue2233WorkaroundKey: issue2233WorkaroundKey\n  # defaultKMSKeyId: ${{self:custom.regionalPrefix}}default-key\n  # tradleStackPrefix: tdl-tradle-ltd-${{self:stage}}-\n  # tradleStackRegion: us-east-1\n  # updatesTopicName: ${{self:custom.tradleStackPrefix}}updates-announcements\n\n#   secrets: ${{file(secrets.${opt:stage, self:provider.stage}}.yml)}\n  # dynamodb:\n  #   start:\n  #     port: 8000\n  #     inMemory: true\n  #     migration: true\n  #   migration:\n  #     dir: offline/migrations\n\nprovider:\n  # avoid some bugs in serverless\n  versionFunctions: ${{self:custom.versionFunctions}}\n  tracing: true\n  # https://github.com/serverless/serverless/issues/4312#issuecomment-331946882\n  variableSyntax: \"\\\\${{([ ~:a-zA-Z0-9._\\\\'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}}\"\n  name: aws\n  runtime: nodejs10.x\n  nodeVersion: 'v10.x.x'\n  profile: ${{self:custom.profile}}\n  stage: ${{self:custom.stage}}\n  region: ${{self:custom.region}}\n  removeOldDeployments: false\n  memorySize: 512\n  timeout: 60\n  # deploymentBucket: io.tradle.${{self:custom.stage}}.deploys\n  # deploymentBucket: ${{self:custom.vars.deploymentBucket, self:custom.defaultVars.deploymentBucket}}\n  deploymentBucket: ${{self:custom.deploymentBucket}}\n  environment:\n    # enable long stack traces\n    BLUEBIRD_DEBUG: 1\n    # IOT_TOPIC_PREFIX: ${{self:custom.prefixIOTTopic}}\n    STACK_NAME:\n      Ref: AWS::StackName\n    BLOCKCHAIN:\n      Ref: BlockchainNetwork\n    SEALING_MODE:\n      Ref: SealingMode\n    SEAL_BATCHING_PERIOD:\n      Ref: SealBatchingPeriodInMinutes\n    CORDA_API_URL: ${{self:custom.corda.apiUrl}}\n    CORDA_API_KEY: ${{self:custom.corda.apiKey}}\n    DEBUG: ${{self:custom.vars.debug.filter, self:custom.defaults.debug.filter}}\n    DEBUG_LEVEL: ${{self:custom.vars.debug.level, self:custom.defaults.debug.level}}\n    DEBUG_FORMAT: ${{self:custom.vars.debug.format, self:custom.defaults.debug.format}}\n    # SERVERLESS_PREFIX: ${{self:custom.prefix}}\n    # STACK_STAGE: ${{self:custom.stage}}\n    # SERVERLESS_SERVICE_NAME: ${{self:service}}\n    STACK_STAGE:\n      Ref: Stage\n    NO_TIME_TRAVEL: false # allow time-travel messages for now\n    ENABLE_XRAY:\n      Ref: EnableTracing\n    R_STACK:\n      Ref: AWS::StackId\n    R_BUCKET_Objects:\n      Fn::GetAtt: Buckets.Outputs.Objects\n    R_BUCKET_Secrets:\n      Fn::GetAtt: Buckets.Outputs.Secrets\n    R_BUCKET_FileUpload:\n      Fn::GetAtt: Buckets.Outputs.FileUpload\n    R_BUCKET_Logs:\n      Fn::GetAtt: Buckets.Outputs.Logs\n    R_BUCKET_PrivateConf:\n      Fn::GetAtt: Buckets.Outputs.PrivateConf\n    R_BUCKET_ServerlessDeployment:\n      Fn::GetAtt: Buckets.Outputs.Deployment\n    R_KEY_DefaultEncryption:\n      Fn::GetAtt: Keys.Outputs.EncryptionKey\n    R_TABLE_Events:\n      Fn::GetAtt: Tables.Outputs.Events\n    R_TABLE_Bucket0:\n      Fn::GetAtt: Tables.Outputs.Bucket0\n    R_RESTAPI_ApiGateway:\n      Fn::GetAtt: Source.Outputs.ApiGatewayRestApi\n    R_ROLE_IotClient:\n      Fn::GetAtt: IAM.Outputs.IotClientRole\n# this is used only for pr9ovisioned scaling\n    R_ROLE_AutoScalingDynamoDB:\n      Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n    R_TOPIC_AdminAlerts:\n      Ref: AwsAlertsAlarm\n    IOT_ENDPOINT:\n      Fn::GetAtt: Discovery.Outputs.IotEndpoint\n\n  apiKeys:\n    - Fn::Sub: 'issue2233WorkaroundKey1-${AWS::StackName}'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:CreateTable\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource:\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Events\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Events\n            - '/index/*'\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Bucket0\n        - Fn::Join:\n          - ''\n          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'\n            - Fn::GetAtt: Tables.Outputs.Bucket0\n            - '/index/*'\n\n\n    - Effect: Allow\n      Action:\n        # so lambdas can list resources in their stack\n        - cloudformation:ListStackResources\n        - CloudFormation:DescribeStacks\n        # need to get own template to generate a child deployment template\n        - cloudformation:GetTemplate\n        - cloudformation:UpdateTerminationProtection\n        # - cloudformation:UpdateStack\n      Resource:\n        Fn::Sub: 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'\n\n    # - Effect: Allow\n    #   Action:\n\n    #   Resource:\n    #     Ref: AWS::StackId\n\n    # allow lambdas to update themselves / each other\n    - Effect: Allow\n      Action:\n        - lambda:UpdateFunctionConfiguration\n        - lambda:ListFunctions\n      # This action does not support resource-level permissions\n      Resource: \"*\"\n\n    # allow lambdas to call each other\n    # TODO: make this more fine grained\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n        - lambda:AddPermission\n        - lambda:GetPolicy\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - lambda:GetFunctionConfiguration\n      Resource:\n        - Fn::Sub: 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'\n\n    # allow access to bucket\n    # TODO: give access only to the lambdas that need it\n    - Effect: Allow\n      Action:\n        # needed to get NoSuchKey error instead of AccessDenied for non-existent items\n        # https://forums.aws.amazon.com/thread.jspa?threadID=56531\n        - s3:ListBucket\n        - s3:PutBucketReplication\n        - s3:PutBucketVersioning\n        - s3:GetBucketPolicy\n        # needed to create regional deployment buckets\n        - s3:CreateBucket\n        # # needed to enable bucket encryption\n        # - s3:PutEncryptionConfiguration\n      Resource:\n        # Fn::Join:\n        #   - ''\n        #   - - \"arn:aws:s3:::\"\n        #     - Ref: AWS::StackName\n        #     - \"-*\"\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Objects\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Secrets\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.PrivateConf\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.FileUpload\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Logs\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Deployment\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-deploymentbucket-*'\n        # same purpose as previous, for backwards compat\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-serverlessdeploymentbucket-*'\n\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        # needed to create an object with public-read\n        - s3:PutObjectAcl\n        - s3:GetObject\n      Resource:\n        # Fn::Join:\n        #   - ''\n        #   - - \"arn:aws:s3:::\"\n        #     - Ref: AWS::StackName\n        #     - \"-*/*\"\n\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Objects\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Secrets\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.PrivateConf\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.FileUpload\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Logs\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Fn::GetAtt: Buckets.Outputs.Deployment\n            - '/*'\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-deploymentbucket-*/*'\n        # same purpose as previous, for backwards compat\n        - Fn::Join:\n          - ''\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::StackName\n            # needed to manipulate regional buckets\n            - '-serverlessdeploymentbucket-*/*'\n\n\n    # - Effect: Allow\n    #   Action:\n    #     - s3:DeleteObject\n    #     - s3:DeleteObjectVersion\n    #   Resource:\n    #     # currently only needed to delete terms and conditions\n    #     - Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:s3:::\"\n    #         - Fn::GetAtt: Buckets.Outputs.PrivateConf\n    #         - \"/conf/*\"\n\n    - Effect: Allow\n      Action:\n        - s3:GetBucketLocation\n        - s3:ListAllMyBuckets\n      Resource: \"arn:aws:s3:::*\"\n\n    - Effect: Allow\n      Action:\n        - sns:AddPermission\n        - sns:CreateTopic\n        - sns:DeleteTopic\n        - sns:Publish\n        - sns:Subscribe\n        - sns:Unsubscribe\n        - sns:ListSubscriptions\n        - sns:ListSubscriptionsByTopic\n        - sns:GetTopicAttributes\n        - sns:SetTopicAttributes\n      Resource: \"*\"\n\n    # Iot\n    - Effect: Allow\n      Action: [\"iot:Connect\", \"iot:Subscribe\", \"iot:Publish\", \"iot:Receive\", \"iot:DescribeEndpoint\"]\n      Resource: \"*\"\n\n    # gen Iot temp credentials (lambda: preauth)\n    - Effect: Allow\n      Action:\n        - sts:AssumeRole\n      Resource:\n        - Fn::GetAtt: IAM.Outputs.IotClientRole\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource: \"*\"\n    - Effect: Allow\n      Sid: AllowCloudFrontUpdateDistribution\n      Action:\n        - cloudfront:updateDistribution\n      Resource: \"*\"\n\n    # - Effect: Allow\n    #   Action:\n    #     - apigateway:GET\n    #     - apigateway:PUT\n    #   Resource:\n    #     Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:apigateway:\"\n    #         - Ref: AWS::Region\n    #         - \"::/restapis/\"\n    #         - Ref: ApiGatewayRestApi\n    #         - \"/*\"\n\n    # - Effect: Allow\n    #   Action:\n    #     - apigateway:POST\n    #   Resource:\n    #     Fn::Join:\n    #       - \"\"\n    #       - - \"arn:aws:apigateway:\"\n    #         - Ref: AWS::Region\n    #         - \"::/restapis/\"\n    #         - Ref: ApiGatewayRestApi\n\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n        - ses:SendRawEmail\n        - ses:GetIdentityVerificationAttributes\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricAlarm\n        - cloudwatch:DescribeAlarms\n        - cloudwatch:DescribeAlarmsForMetric\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - kms:Decrypt\n        - kms:GenerateDataKey\n      Resource:\n        - Fn::GetAtt: Keys.Outputs.EncryptionKeyArn\n\n    - Effect: Allow\n      Action:\n        - kms:Encrypt\n        - kms:Decrypt\n        - kms:GenerateDataKey\n      Resource:\n        - Fn::If:\n          - DoEncryptBuckets\n          - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn\n          - Ref: AWS::NoValue\n\n    - Effect: Allow\n      Action:\n        - textract:*\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - athena:*\n      Resource: '*'\n\n    - Effect: Allow\n      Action:\n        - glue:*\n      Resource: '*'\n\n    # - Effect: Allow\n    #   Action:\n    #     - 'ssm:GetParameter*'\n    #     - 'ssm:PutParameter*'\n    #   Resource:\n    #     - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tradle/${{self:custom.prefix}}*'\n\n    # - Effect: Allow\n    #   Action:\n    #     # TODO: narrow this down\n    #     # look out for error: \"The specified log group does not exist\"\n    #     - logs:*\n    #     # - logs:PutSubscriptionFilter\n    #     # - logs:DeleteSubscriptionFilter\n    #   Resource: \"*\"\n\nfunctions:\n  # httpRouter:\n  #   handler: lib/in-house-bot/lambda/http/router.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: post\n  #         cors: ${{self:custom.cors}}\n\n  #     - http:\n  #         # this matches any path, the token 'ANY' doesn't mean anything special\n  #         path: /{any+}\n  #         method: put\n  #         cors: ${{self:custom.cors}}\n\n  # 1. generates temporary credentials (STS) for new connections,\n  #    and assumes IotClientRole on them\n  # 2. creates an unauthenticated session,\n  #    generates a challenge to be signed (verified in /auth)\n  preauth:\n    handler: lib/in-house-bot/lambda/http/preauth.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: preauth\n          method: post\n          cors: ${{self:custom.cors}}\n\n  # 1. validates the challenge response\n  # 2. marks the session as authenticated\n  auth:\n    handler: lib/in-house-bot/lambda/http/auth.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: auth\n          method: post\n          cors: ${{self:custom.cors}}\n\n  inbox:\n    handler: lib/in-house-bot/lambda/http/inbox.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: inbox\n          method: put\n          cors: ${{self:custom.cors}}\n      - http:\n          path: inbox\n          method: post\n          cors: ${{self:custom.cors}}\n\n  # delivery-retry:\n  #   handler: lib/in-house-bot/lambda/delivery-retry.handler\n  #   memorySize: 128\n  #   timeout: 60\n    # events:\n    #   - schedule:\n    #       rate: rate(1 minute)\n    #       enabled: true\n\n  # triggered when an internal bot requests a message range (inbound messages)\n  # inbox:\n  #   handler: lib/lambda/inbox.handler\n  #   memorySize: 1024\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * as data, topic() as topic FROM 'messages/get'\"\n\n  # triggered when a client requests a message range (outbound messages)\n  # outbox:\n  #   handler: lib/lambda/outbox.handler\n  #   memorySize: 1024\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * as data, topic() as topic FROM '+/restore'\"\n\n  #   environment:\n  #     DEBUG: tradle:*\n\n  # handles IoT (MQTT) connections post-authentication\n  # updates presence in PresenceTable\n\n  oniotlifecycle:\n    handler: lib/in-house-bot/lambda/mqtt/oniotlifecycle.handler\n    events:\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/connected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${AWS::StackName}-')\"\n          sqlVersion: ${{self:custom.versionSQL}}\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${AWS::StackName}-')\"\n          sqlVersion: ${{self:custom.versionSQL}}\n\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n      # - iot:\n      #     sql: \"SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')\"\n      #     sqlVersion: ${{self:custom.versionSQL}}\n\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # onconnect:\n  #   handler: lib/in-house-bot/lambda/mqtt/onconnect.handler\n  #   events:\n  #     - iot:\n  #         sql: \"SELECT * FROM '$aws/events/presence/connected/#'\"\n  #         sqlVersion: ${{self:custom.versionSQL}}\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # triggered when a client sends a message\n  #\n  # validates, stores in MessagesTable, in ObjectsBucker (for now),\n  # and passes off to bot engine\n  onmessage:\n    handler: lib/in-house-bot/lambda/mqtt/onmessage.handler\n    memorySize: 1024\n    #   SERVERLESS_PREFIX: ${{self:custom.prefix}}\n    #   STACK_STAGE: ${{self:custom.stage}}\n    #   SERVERLESS_SERVICE_NAME: ${{self:service}}\n    events:\n      - iot:\n          sql:\n            Fn::Sub: \"SELECT encode(*, 'base64') as data, clientid() as clientId, topic() as topic FROM '${AWS::StackName}/+/pub/outbox'\"\n          sqlVersion: ${{self:custom.versionSQL}}\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # same as onmessage, but can handle larger payloads\n  # MQTT is limited to 128KB, HTTP to 6MB\n  # onmessage_http:\n  #   handler: lib/in-house-bot/lambda/http/onmessage.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         path: message\n  #         method: put\n  #     - http:\n  #         path: message\n  #         method: post\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # performs service discovery - builds a map of logical->physical ids\n  # and writes that map to the environment variables of all other lambdas\n  # setenvvars:\n  #   handler: lib/lambda/setenvvars.handler\n  #   # hack to enable discovery own function's own stack\n  #   description:\n  #     Ref: AWS::StackId\n\n  # initializes provider identity\n  # generates a new identity and keys, and other misc crap\n  # init:\n  #   handler: lib/lambda/init.handler\n  #   memorySize: 256\n  #   timeout: 300\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # setstyle:\n  #   handler: lib/lambda/setstyle.handler\n  #   memorySize: 128\n  #   alarms:\n  #     - functionErrors\n  #     - functionThrottles\n  #     - functionInvocations\n\n  # precreate-tables:\n  #   handler: lib/lambda/precreate-tables.handler\n  #   memorySize: 128\n  #   timeout: 300\n\n  # Blockchain\n\n  # bitcoin faucet (surprise!)\n  # distributes testnet coins from local funds\n  # faucet_bitcoin:\n  #   handler: lib/lambda/faucet-bitcoin.withdraw\n\n  # gets funds from a bitcoin testnet faucet\n  # recharge_bitcoin:\n  #   handler: lib/lambda/recharge-bitcoin.handler\n  #   events:\n  #     - schedule:\n  #         rate: rate(10 minutes)\n  #         enabled: false\n\n  # get funds from ethereum testnet faucet\n  # (doesn't work on rinkeby, and doesn't work well on ropsten)\n  # recharge_ethereum:\n  #   handler: lib/lambda/recharge-ethereum.handler\n  #   events:\n  #     - schedule:\n  #         rate: rate(10 minutes)\n  #         enabled: false\n\n  # writes pending transactions to the blockchain\n  jobScheduler:\n    handler: lib/in-house-bot/lambda/job-scheduler.handler\n    memorySize: 256\n    timeout: 30\n    events:\n      - schedule:\n          rate: rate(1 minute)\n    # alarms:\n    #   - functionErrors\n    #   # - functionThrottles\n    #   # - functionInvocations\n\n  genericJobRunner:\n    handler: lib/in-house-bot/lambda/job-runner.handler\n    memorySize: 1024\n    timeout: 900\n    alarms:\n      - functionErrors\n      - functionInvocations\n\n  # polls the status of unconfirmed blockchain transactions\n  # pollchain:\n  #   handler: lib/in-house-bot/lambda/pollchain.handler\n  #   memorySize: 256\n  #   timeout: 300\n  #   # events:\n  #   #   - schedule:\n  #   #       rate: rate(10 minutes)\n  #   #       # enabled: false\n  #   alarms:\n  #     - functionErrors\n  #     # - functionThrottles\n  #     # - functionInvocations\n\n  #   # environment:\n  #   #   ENCRYPTION_KEY: ${{self:custom.secrets.SESSION_KEY}}\n  #   #   EMAIL_SERVICE_API_KEY: ${{self:custom.secrets.EMAIL_SERVICE_API_KEY}}\n\n  # check-failed-seals:\n  #   handler: lib/in-house-bot/lambda/check-failed-seals.handler\n  #   memorySize: 256\n  #   timeout: 60\n  #   # events:\n  #   #   - schedule:\n  #   #       rate: rate(17 minutes)\n  #   #       # enabled: false\n  #   alarms:\n  #     - functionErrors\n\n  # force reinitialize lambda containers\n  # reinitializeContainers:\n  #   handler: lib/in-house-bot/lambda/reinitialize-containers.handler\n\n  # useful during development\n  # trigger a message to be queued/sent to a user\n  # send:\n  #   handler: lib/in-house-bot/lambda/send.handler\n  #   memorySize: 256\n\n  info:\n    handler: lib/in-house-bot/lambda/http/info.handler\n    memorySize: 256\n    events:\n      - http:\n          path: info\n          method: get\n          cors: ${{self:custom.cors}}\n\n  # rename later, temporarily can't rename, get AWS error:\n  #   \"Modifying service token is not allowed..\"\n  bot_oninit:\n    handler: lib/in-house-bot/lambda/oninit.handler\n    memorySize: 1024\n    timeout: 900\n\n  # onsealstream:\n  #   handler: lib/in-house-bot/lambda/onsealstream.handler\n  #   memorySize: 256\n  #   events:\n  #     - stream:\n  #         type: dynamodb\n  #         batchSize: 1\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - SealsTable\n  #             - StreamArn\n  #   alarms:\n  #     - functionErrors\n\n  # onmessagestream:\n  #   handler: lib/in-house-bot/lambda/onmessagestream.handler\n  #   memorySize: 256\n  #   events:\n  #     - stream:\n  #         type: dynamodb\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - MessagesTable\n  #             - StreamArn\n  #   alarms:\n  #     - functionErrors\n  #     # - functionThrottles\n  #     # - functionInvocations\n  #   # onError:\n  #     # Ref: DeadLetterQueue\n\n  onresourcestream:\n    handler: lib/in-house-bot/lambda/onresourcestream.handler\n    memorySize: 256\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 20\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt: Tables.Outputs.Bucket0Stream\n    alarms:\n      - functionErrors\n\n  graphql:\n    # make sure graphql route gets loaded\n    handler: lib/in-house-bot/lambda/http/graphql.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: graphql\n          method: get\n          cors: ${{self:custom.cors}}\n      - http:\n          path: graphql\n          method: post\n          cors: ${{self:custom.cors}}\n    alarms:\n      - functionErrors\n      - functionThrottles\n      - functionInvocations\n\n  # setstyle:\n  #   handler: lib/in-house-bot/lambda/set-style.handler\n  #   memorySize: 128\n\n  setconf:\n    handler: lib/in-house-bot/lambda/set-conf.handler\n    memorySize: 1024\n\n  # addfriend:\n  #   handler: lib/in-house-bot/lambda/add-friend.handler\n  #   memorySize: 256\n\n  # addfriend_dev:\n  #   handler: lib/in-house-bot/lambda/add-friend.handlerHttp\n  #   # dev mode only\n  #   events:\n  #     - http:\n  #         path: /addfriend\n  #         method: post\n\n  # addcontact:\n  #   handler: lib/in-house-bot/lambda/add-contact.handler\n  #   environment:\n  #     DEBUG: tradle:*\n\n  # bot-serviced lambda\n  # generates sample data for browsing with GraphQL\n  # samples:\n  #   handler: lib/in-house-bot/lambda/samples.handler\n  #   memorySize: 1024\n\n  # samples_dev:\n  #   handler: lib/in-house-bot/lambda/samples.handler\n  #   memorySize: 1024\n  #   events:\n  #     - http:\n  #         path: samples\n  #         method: post\n\n  import_data_utils:\n    handler: lib/in-house-bot/lambda/import-data-utils.handler\n\n  # import_data_bundle:\n  #   handler: lib/in-house-bot/lambda/import-data-bundle.handler\n\n  # create_data_claim:\n  #   handler: lib/in-house-bot/lambda/create-data-claim.handler\n\n  # get_data_bundle:\n  #   handler: lib/in-house-bot/lambda/get-data-bundle.handler\n\n  # onfido_register:\n  #   handler: lib/in-house-bot/lambda/onfido-register.handler\n\n  onfido:\n    handler: lib/in-house-bot/lambda/http/onfido-webhook.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: onfido\n          method: post\n          cors: ${{self:custom.cors}}\n\n  cli:\n    handler: lib/in-house-bot/lambda/cli.handler\n    timeout: 300\n\n  documentChecker:\n    handler: lib/in-house-bot/lambda/http/documentChecker-webhook.handler\n    memorySize: 1024\n    events:\n      - http:\n          path: documentChecker\n          method: post\n          cors: ${{self:custom.cors}}\n  # qr:\n  #   handler: lib/in-house-bot/lambda/http/qr.handler\n  #   events:\n  #     - http:\n  #         path: qr\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\n  deploymentPingback:\n    handler: lib/in-house-bot/lambda/http/deployment-pingback.handler\n    # timeout: 300\n    events:\n      - http:\n          path: deploymentPingback\n          method: post\n          cors: ${{self:custom.cors}}\n\n  confirmation:\n    handler: lib/in-house-bot/lambda/http/confirmation.handler\n    events:\n      - http:\n          path: confirmation\n          method: get\n          cors: ${{self:custom.cors}}\n\n  # onChildStackStatusChanged:\n  #   handler: lib/in-house-bot/lambda/sns/on-child-stack-status-changed.handler\n    # events added dynamically in \"deployment.subscribeToChildStackStatusAlerts\"\n\n  # not used at the moment\n  # updateStack:\n  #   handler: lib/in-house-bot/lambda/update-stack.handler\n    # role: UpdateStackIamRole\n    # events added dynamically\n\n  logProcessor:\n    handler: lib/in-house-bot/lambda/log-processor.handler\n    # events added in compile phase\n\n  logAlertProcessor:\n    handler: lib/in-house-bot/lambda/log-alert-processor.handler\n    # events added at runtime\n\n  # shortToLongUrlMapping:\n  #   handler: lib/in-house-bot/lambda/http/short-to-long-url-mapping.handler\n  #   events:\n  #     - http:\n  #         path: l/{any+}\n  #         method: get\n  #         cors: ${{self:custom.cors}}\n\nresources:\n  Parameters:\n    Refresh:\n      Type: String\n      Default: \"1.0\"\n\n    SourceDeploymentBucket:\n      Type: String\n      Default: \"\"\n\n    # Existing Resources group\n    ExistingEventsTable:\n      Type: String\n      Default: \"\"\n\n    ExistingBucket0Table:\n      Type: String\n      Default: \"\"\n\n    ExistingBucket0TableStreamArn:\n      Type: String\n      Default: \"\"\n\n    ExistingObjectsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingSecretsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingPrivateConfBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingFileUploadBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingLogsBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingEncryptionKey:\n      Type: String\n      Default: \"\"\n      Description: KMS key id, if you want to use an existing one instead of creating a new one\n\n    ExistingBucketEncryptionKey:\n      Type: String\n      Default: \"\"\n      Description: KMS key id, if you want to use an existing one instead of creating a new one\n\n    ExistingDeploymentBucket:\n      Type: String\n      Default: \"\"\n\n    ExistingApiGatewayRestApi:\n      Type: String\n      Default: \"\"\n\n    ExistingApiGatewayRestApiRootResourceId:\n      Type: String\n      Default: \"\"\n\n    # Organization Info group\n\n    OrgName:\n      Type: String\n      Description: your organization's name, as you want users to see it (e.g. Example, Inc)\n\n    OrgDomain:\n      Type: String\n      Description: a domain or subdomain you own (e.g. example.com)\n\n    OrgLogo:\n      Type: String\n      Description: a publically accessible url for your logo image (e.g. https://example.com/logo.jpeg)\n\n    OrgAdminEmail:\n      Type: String\n      Description: your AWS admin's email (e.g. jojo@example.com)\n\n    # Configuration group\n\n    BlockchainNetwork:\n      Type: String\n      Default: 'ethereum:rinkeby'\n      AllowedValues:\n        - 'ethereum:mainnet'\n        - 'ethereum:rinkeby'\n        - 'ethereum:ropsten'\n\n    SealingMode:\n      Type: String\n      Default: 'single'\n      AllowedValues:\n        - 'single'\n        - 'batch'\n\n    SealBatchingPeriodInMinutes:\n      Type: Number\n      Description: how often to batch items for sealing (ignore if SealingMode is 'single')\n      Default: 5\n\n    ProvisionDynamoDBScaling:\n      Type: String\n      Default: \"false\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    PointInTimeRecoveryEnabledEventsTable:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    PointInTimeRecoveryEnabledBucket0Table:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    # default to deleting logs\n    # by setting transition days > TTL days\n    LogsDaysBeforeTransitionToGlacier:\n      Type: Number\n      Description: days before logs are transitioned to Amazon Glacier\n      Default: 3\n\n    LogsTTL:\n      Type: Number\n      Description: days before logs are deleted from Amazon Glacier\n      Default: 1\n\n    EncryptBuckets:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    EncryptTables:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    EnableTracing:\n      Type: String\n      Default: \"true\"\n      AllowedValues:\n        - \"true\"\n        - \"false\"\n\n    # Stack Info group\n\n    Stage:\n      Type: String\n      Default: dev\n      AllowedValues:\n        - dev\n        - prod\n\n  Metadata:\n    AWS::CloudFormation::Interface:\n      ParameterGroups:\n        - Label:\n            default: \"Organization Info\"\n          Parameters:\n            - OrgName\n            - OrgDomain\n            - OrgLogo\n            - OrgAdminEmail\n\n        - Label:\n            default: \"Configuration\"\n          Parameters:\n            - BlockchainNetwork\n            - PointInTimeRecoveryEnabledEventsTable\n            - PointInTimeRecoveryEnabledBucket0Table\n            - ProvisionDynamoDBScaling\n            - LogsDaysBeforeTransitionToGlacier\n            - LogsTTL\n            - EncryptBuckets\n            - EncryptTables\n            - EnableTracing\n\n        - Label:\n            default: \"Stack Info\"\n          Parameters:\n            - Stage\n            - Refresh\n\n        - Label:\n            default: \"Existing Resources (ignore if this is a new deployment)\"\n          Parameters:\n            - ExistingEventsTable\n            - ExistingBucket0Table\n            - ExistingBucket0TableStreamArn\n            - ExistingObjectsBucket\n            - ExistingSecretsBucket\n            - ExistingPrivateConfBucket\n            - ExistingFileUploadBucket\n            - ExistingLogsBucket\n            - ExistingDeploymentBucket\n            - ExistingEncryptionKey\n            - ExistingBucketEncryptionKey\n            - ExistingApiGatewayRestApi\n            - ExistingApiGatewayRestApiRootResourceId\n\n      ParameterLabels:\n        # Existing Resources\n        ExistingEventsTable:\n          default: \"Events Table\"\n        ExistingBucket0Table:\n          default: \"Bucket0 Table\"\n        ExistingBucket0TableStreamArn:\n          default: \"Bucket0 Table Stream Arn\"\n        ExistingObjectsBucket:\n          default: \"Objects Bucket\"\n        ExistingSecretsBucket:\n          default: \"Secrets Bucket\"\n        ExistingPrivateConfBucket:\n          default: \"PrivateConf Bucket\"\n        ExistingFileUploadBucket:\n          default: \"FileUpload Bucket\"\n        ExistingLogsBucket:\n          default: \"Logs Bucket\"\n        ExistingDeploymentBucket:\n          default: \"Deployment Bucket\"\n        ExistingEncryptionKey:\n          default: \"Encryption Key\"\n        ExistingBucketEncryptionKey:\n          default: \"Bucket Encryption Key\"\n\n        ExistingApiGatewayRestApi:\n          default: \"ApiGateway RestApi Id\"\n        ExistingApiGatewayRestApiRootResourceId:\n          default: \"ApiGateway RestApi root resource id\"\n\n        # Organization Info\n        OrgName:\n          default: Name\n        OrgDomain:\n          default: Domain\n        OrgLogo:\n          default: Logo URL\n        OrgAdminEmail:\n          default: Admin Email\n\n        # Configuration\n\n        ## Blockchain configuration\n        BlockchainNetwork:\n          default: Blockchain Network\n        SealingMode:\n          default: Sealing Mode\n        SealBatchingPeriodInMinutes:\n          default: Seal batching period (in minutes)\n\n        ## Other configuration\n        PointInTimeRecoveryEnabledEventsTable:\n          default: Enable point-in-time recovery for the Events table\n        PointInTimeRecoveryEnabledBucket0Table:\n          default: Enable point-in-time recovery for the Bucket0 table\n        ProvisionDynamoDBScaling:\n          default: Use DynamoDB provisioned auto-scaling policy\n        LogsDaysBeforeTransitionToGlacier:\n          default: days before logs are transitioned from to Glacier\n        LogsTTL:\n          default: days before logs are deleted forever (from Glacier)\n        EncryptBuckets:\n          default: encrypt buckets\n        EncryptTables:\n          default: encrypt tables\n        EnableTracing:\n          default: enable AWS X-Ray tracing for lambda functions\n\n        # Stack Info\n        Stage:\n          default: Stage\n\n  Mappings:\n    # org:\n    #   init: ${{self:custom.org}}\n    #   contact:\n    #     adminEmail: ${{self:custom.emailForNotifications}}\n\n    deployment:\n      init:\n        # service: ${{self:service}}\n        # stage: ${{self:custom.stage}}\n        stackName: ${{self:custom.stackName}}\n        # encryptionKey:\n        # which MyCloud generated the template\n        referrerUrl: ''\n        deploymentUUID: ''\n\n  Conditions:\n    DoProvisionDynamoDBScaling:\n      Fn::Equals:\n        - Ref: ProvisionDynamoDBScaling\n        - \"true\"\n\n    DoCreateDeploymentBucket:\n      Fn::Equals:\n        - Ref: ExistingDeploymentBucket\n        - \"\"\n\n    DoCreateApiGatewayRestApi:\n      Fn::Or:\n        - Fn::Equals:\n          - Ref: ExistingApiGatewayRestApi\n          - \"\"\n        - Fn::Equals:\n          - Ref: ExistingApiGatewayRestApiRootResourceId\n          - \"\"\n\n    DoEncryptBuckets:\n      Fn::Equals:\n        - Ref: EncryptBuckets\n        - \"true\"\n\n    UseSourceDeploymentBucket:\n      Fn::Not:\n        - Fn::Equals:\n          - Ref: SourceDeploymentBucket\n          - \"\"\n\n  Resources:\n    Source:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Join:\n            - ''\n            - - https://\n              - Fn::If:\n                - UseSourceDeploymentBucket\n                - Ref: SourceDeploymentBucket\n                - Ref: ServerlessDeploymentBucket\n              - .s3.amazonaws.com/${{self:custom.s3TemplatesPath}}\n              - /echo.json\n        Parameters:\n          SourceDeploymentBucket:\n            Fn::If:\n              - UseSourceDeploymentBucket\n              - Ref: SourceDeploymentBucket\n              - Ref: ServerlessDeploymentBucket\n          ApiGatewayRestApi:\n            Fn::If:\n              - DoCreateApiGatewayRestApi\n              - Ref: ApiGatewayRestApi\n              - Ref: ExistingApiGatewayRestApi\n          ApiGatewayRestApiRootResourceId:\n            Fn::If:\n              - DoCreateApiGatewayRestApi\n              - Fn::GetAtt: ApiGatewayRestApi.RootResourceId\n              - Ref: ExistingApiGatewayRestApiRootResourceId\n\n    # has to be here for serverless to pick it up\n    ServerlessDeploymentBucket:\n      Type: AWS::S3::Bucket\n      Condition: DoCreateDeploymentBucket\n      Description: destination for lambda code, templates, and other deployment assets\n      DeletionPolicy: Retain\n      Properties:\n        VersioningConfiguration:\n          Status: Enabled\n\n    Discovery:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/discovery.json'\n\n    Keys:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/keys.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          ExistingEncryptionKey:\n            Ref: ExistingEncryptionKey\n          ExistingBucketEncryptionKey:\n            Ref: ExistingBucketEncryptionKey\n          NeedBucketEncryptionKey:\n            Ref: EncryptBuckets\n\n    Tables:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/tables.json'\n        Parameters:\n          Refresh:\n            Ref: Refresh\n          Namespace:\n            Ref: AWS::StackName\n          ExistingEventsTable:\n            Ref: ExistingEventsTable\n          ExistingBucket0Table:\n            Ref: ExistingBucket0Table\n          ExistingBucket0TableStreamArn:\n            Ref: ExistingBucket0TableStreamArn\n          PointInTimeRecoveryEnabledEventsTable:\n            Ref: PointInTimeRecoveryEnabledEventsTable\n          PointInTimeRecoveryEnabledBucket0Table:\n            Ref: PointInTimeRecoveryEnabledBucket0Table\n          Encrypt:\n            Ref: EncryptTables\n          ProvisionDynamoDBScaling:\n            Ref: ProvisionDynamoDBScaling\n\n    Buckets:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/buckets.json'\n        Parameters:\n          ExistingObjectsBucket:\n            Ref: ExistingObjectsBucket\n          ExistingSecretsBucket:\n            Ref: ExistingSecretsBucket\n          ExistingPrivateConfBucket:\n            Ref: ExistingPrivateConfBucket\n          ExistingFileUploadBucket:\n            Ref: ExistingFileUploadBucket\n          ExistingLogsBucket:\n            Ref: ExistingLogsBucket\n          ExistingDeploymentBucket:\n            Fn::If:\n              - DoCreateDeploymentBucket\n              - Ref: ServerlessDeploymentBucket\n              - Ref: ExistingDeploymentBucket # ServerlessDeploymentBucket\n          LogsDaysBeforeTransitionToGlacier:\n            Ref: LogsDaysBeforeTransitionToGlacier\n          LogsTTL:\n            Ref: LogsTTL\n          EncryptionKey:\n            Fn::If:\n              - DoEncryptBuckets\n              - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias\n              - \"\"\n\n    IAM:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/iam.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          ObjectsBucket:\n            Fn::GetAtt: Buckets.Outputs.Objects\n          SecretsBucket:\n            Fn::GetAtt: Buckets.Outputs.Secrets\n          PrivateConfBucket:\n            Fn::GetAtt: Buckets.Outputs.PrivateConf\n          FileUploadBucket:\n            Fn::GetAtt: Buckets.Outputs.FileUpload\n          LogsBucket:\n            Fn::GetAtt: Buckets.Outputs.Logs\n          DeploymentBucket:\n            Fn::GetAtt: Buckets.Outputs.Deployment\n          IotParentTopic:\n            Ref: AWS::StackName\n          BucketEncryptionKeyArn:\n            Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn\n\n    RefData:\n      Type: AWS::CloudFormation::Stack\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/refdata.json'\n        Parameters:\n          Namespace:\n            Ref: AWS::StackName\n          PrivateConfBucket:\n            Fn::GetAtt: Buckets.Outputs.PrivateConf\n\n    AutoScalingEventsTable:\n      Type: AWS::CloudFormation::Stack\n      Condition: DoProvisionDynamoDBScaling\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-events-table.json'\n        Parameters:\n          Table:\n            Fn::GetAtt: Tables.Outputs.Events\n          AutoScalingDynamoDBRole:\n            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n\n    AutoScalingBucketTable:\n      Type: AWS::CloudFormation::Stack\n      Condition: DoProvisionDynamoDBScaling\n      Properties:\n        TemplateURL:\n          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-bucket-table.json'\n        Parameters:\n          Table:\n            Fn::GetAtt: Tables.Outputs.Bucket0\n          AutoScalingDynamoDBRole:\n            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole\n\n    ApiGatewayRestApi:\n      Type: AWS::ApiGateway::RestApi\n      Condition: DoCreateApiGatewayRestApi\n      DeletionPolicy: Retain\n      Properties:\n        Name:\n          Ref: AWS::StackName\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    AwsAlertsAlarm:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName:\n          Fn::Join:\n            - '-'\n            - - Ref: AWS::StackName\n              - alerts-alarm\n\n        Subscription:\n        - Protocol: email\n          Endpoint:\n            Ref: OrgAdminEmail\n            # Fn::FindInMap:\n            # - org\n            # - contact\n            # - adminEmail\n\n    Initialize:\n      Type: Custom::InitializeDeployment\n      DependsOn:\n        - Discovery\n        - Buckets\n        - Keys\n        - Tables\n        - IAM\n        - ApiGatewayApiKey1\n        - IamRoleLambdaExecution\n      Properties:\n        ServiceToken:\n          Fn::GetAtt: [BotUnderscoreoninitLambdaFunction, Arn]\n        commit: ${{self:custom.version.commit}}\n        name:\n          Ref: OrgName\n          # Fn::FindInMap: [\"org\", \"init\", \"name\"]\n        domain:\n          Ref: OrgDomain\n          # Fn::FindInMap: [\"org\", \"init\", \"domain\"]\n        logo:\n          Ref: OrgLogo\n          # Fn::FindInMap: [\"org\", \"init\", \"logo\"]\n        deploymentUUID:\n          Fn::FindInMap: [\"deployment\", \"init\", \"deploymentUUID\"]\n        referrerUrl:\n          Fn::FindInMap: [\"deployment\", \"init\", \"referrerUrl\"]\n\n        # stack update validation needs these to make sure they didn't change\n        ImmutableParameters:\n          Stage:\n            Ref: Stage\n          BlockchainNetwork:\n            Ref: BlockchainNetwork\n          EncryptTables:\n            Ref: EncryptTables\n\n  Outputs:\n    EventsTable:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Events\n\n    Bucket0Table:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Bucket0\n\n    Bucket0TableStream:\n      Value:\n        Fn::GetAtt: Tables.Outputs.Bucket0Stream\n\n    ObjectsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Objects\n\n    SecretsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Secrets\n\n    PrivateConfBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.PrivateConf\n\n    FileUploadBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.FileUpload\n\n    LogsBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Logs\n\n    DeploymentBucket:\n      Value:\n        Fn::GetAtt: Buckets.Outputs.Deployment\n\n    ApiGatewayRestApi:\n      Value:\n        Fn::GetAtt: Source.Outputs.ApiGatewayRestApi\n\n    ApiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt: Source.Outputs.ApiGatewayRestApiRootResourceId\n\n    EncryptionKey:\n      Value:\n        Fn::GetAtt: Keys.Outputs.EncryptionKey\n\n    EncryptionKeyAlias:\n      Value:\n        Fn::GetAtt: Keys.Outputs.EncryptionKeyAlias\n\n    BucketEncryptionKey:\n      Value:\n        Fn::GetAtt: Keys.Outputs.BucketEncryptionKey\n\n    BucketEncryptionKeyAlias:\n      Value:\n        Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias\n\n    S3TemplatesBaseUrl:\n      Value:\n        Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}'\n\n    # serverless usually generates this\n    ServiceEndpoint:\n      Description: API root URL\n      Value:\n        Fn::Sub: 'https://${Source.Outputs.ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'\n\n    # let serverless generate this\n    # ServerlessDeploymentBucketName:\n    #   Value:\n    #     Fn::GetAtt: Buckets.Outputs.Deployment\n\n    SourceDeploymentBucket:\n      Value:\n        Ref: SourceDeploymentBucket\n\n    InitLogGroup:\n      Value:\n        Ref: BotUnderscoreoninitLogGroup\n"]},{"id":117297620,"files":["service: serverless-gitlab-ci # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":95308252,"files":["service: twitter-growth-tool\n\nplugins:\n  - serverless-offline\n  - serverless-dynamodb-local\n\ncustom:\n  serverless-offline:\n    port: 1337\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    TWITTER_API_KEY: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):TWITTER_API_KEY}\n    TWITTER_CONSUMER_SECRET: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):TWITTER_CONSUMER_SECRET}\n    OAUTH_LOGIN_SUCCESS_REDIRECT: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):OAUTH_LOGIN_SUCCESS_REDIRECT}\n    DYNAMODB_URL: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):DYNAMODB_URL}\n    DYNAMODB_REGION: ${file(./config/secrets-${opt:stage, self:provider.stage}.yml):DYNAMODB_REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/users\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/oauth\"\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nfunctions:\n  graphql:\n    handler: build/src/functions/graphql.handler\n    memorySize: 128\n    timeout: 5\n    package:\n      include:\n        - build/**\n        - front/**\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  searcher:\n    handler: build/src/functions/searcher.handler\n    memorySize: 512\n    timeout: 60\n    events:\n      - schedule: rate(1 hour)\n    package:\n      include:\n        - build/**\n        - front/**\n  oauthCallback:\n    handler: build/src/functions/oauthCallback.handler\n    memorySize: 128\n    timeout: 5\n    events:\n      - http:\n          path: oauth/callback\n          method: get\n          cors: true\n    package:\n      include:\n        - build/**\n        - front/**\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          - AttributeName: screenName\n            AttributeType: S\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: screenName\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    # Table with temporary OAuth Access Token/Secret values\n    # It is recommended to enable TTL on this table by hand\n    oauthTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: oauth\n        AttributeDefinitions:\n          - AttributeName: token\n            AttributeType: S\n        KeySchema:\n          - AttributeName: token\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    campaignsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: campaigns\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":102906669,"files":["frameworkVersion: '>=1.28.0'\n\n# NOTE: update this with your service name\nservice: serverless-webpack-babel-boilerplate\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: ['env', 'flow']\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  versionFunctions: false\n  environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  houses:\n    handler: src/handlers/houses.handler\n    events:\n      - http:\n          method: get\n          path: houses\n  heir:\n    handler: src/handlers/heir.handler\n    events:\n      - http:\n          method: get\n          path: heir\n\npackage:\n  individually: true\n"]},{"id":57897285,"files":["---\nservice: bitbucket2sns\n\nplugins:\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: ${opt:stage,self:custom.defaults.stage}\n  region: ${opt:region,self:custom.defaults.region}\n  profile: ${opt:profile,env:AWS_PROFILE,self:custom.defaults.profile}\n  environment: ${file(./${opt:env,self:custom.defaults.env}.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:ListTopics\n        - sns:CreateTopic\n        - sns:Publish\n        - sns:Subscribe\n      Resource:\n        - arn:aws:sns:${self:provider.region}:*:BITBUCKET2SNS_TOKEN\n\ncustom:\n  defaults:\n    stage: dev\n    region: eu-central-1\n    env: env\n    profile: default\n\nfunctions:\n  webhook:\n    description: Handle incoming POST request from Bitbucket\n    handler: functions/handle-webhook/handler.handler\n    events:\n      - http: POST webhook\n\n"]},{"id":208079767,"files":["service:\n  name: kitsune-routing-redis\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n  stage: ${opt:stage}\n  region: ap-south-1\n\n#  vpc:\n#    securityGroupIds:\n#      - sg-02f8ca2ff7284809f\n#    subnetIds:\n#      - subnet-0c590bbc8c3d7d349\n#      - subnet-0cc5bf167967ec726\n\n  endpointType: regional\n  environment: ${file(env.${self:provider.stage}.yml):environment}\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  matcher:\n    handler: bin/matcher\n    memorySize: 128\n    timeout: 6\n    events:\n      - http:\n          path: match\n          method: post\n    tags:\n      name: Kitsune_Routing_Matcher\n      team: KitsuneTeam\n\n  update-tree:\n    handler: bin/update_tree\n    memorySize: 128\n    timeout: 300\n    events:\n      - http:\n          path: update\n          method: post\n    tags:\n      name: Kitsune_Routing_Update_Tree\n      team: KitsuneTeam\n\n  create-and-match:\n    handler: bin/create_and_match\n    memorySize: 128\n    timeout: 300\n    events:\n      - http:\n          path: createAndMatch\n          method: post\n    tags:\n      name: Kitsune_Routing_Create_and_Match\n      team: KitsuneTeam\n\n  create-json:\n    handler: bin/create_json\n    memorySize: 128\n    timeout: 300\n    events:\n    - http:\n        path: createJSON\n        method: post\n    tags:\n      name: Kitsune_Routing_Create_JSON\n      team: KitsuneTeam\n"]},{"id":61052298,"files":["service: ec2-event-slack-notifier\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  role: # your IAM role ARN\n  region: ap-northeast-1 # your AWS region\n\nfunctions:\n  main:\n    handler: index.handler\n    environment:\n      TIMEZONE: Asia/Tokyo # your timezone\n      WEBHOOK_URL: # your Slack Webhook URL\n    events:\n    - schedule: cron(30 0 * * ? *) # every 9:30 JST (0:30 GMT)\n"]},{"id":109041397,"files":["service: graphql-api\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\n  serverless-offline:\n    babelOptions:\n      presets: [\"env\"]\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n\nfunctions:\n  graphql:\n    handler: src/handler.graphql\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  signup:\n    handler: src/handler.signup\n    events:\n      - http:\n          path: signup\n          method: post\n          cors: true\n  signin:\n    handler: src/handler.signin\n    events:\n      - http:\n          path: signin\n          method: post\n          cors: true\n  record:\n    handler: src/handler.record\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - AuthorsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - PostsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    AuthorsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: 'test_authors'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    PostsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: 'test_posts'\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n"]},{"id":79551173,"files":["service: coaching-chatbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  cfLogs: true\n  environment:\n    STAGE: ${opt:stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\nfunctions:\n  facebookMessenger:\n    handler: src/facebook-messenger/handler.handler\n    memorySize: 128\n    timeout: 15\n    events:\n      - http:\n          path: facebook-bot\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$.response')\n      - http:\n          path: facebook-bot\n          method: post\n          integration: lambda\n  facebookReminder:\n    handler: src/facebook-messenger/handler.meetingCheck\n    memorySize: 128\n    timeout: 15\n    events:\n      - schedule: rate(1 hour)\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-sessions-${opt:stage, self:provider.stage}\n    PairsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-pairs-${opt:stage, self:provider.stage}\n    FeedbackTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-feedback-${opt:stage, self:provider.stage}\n\nplugins:\n  - serverless-webpack\n"]},{"id":119836951,"files":["# serverless.yml\n\nservice: hello-world-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timemout: 10\n\ncustom:\n  functionsBasePath: src/handlers\n\nfunctions:\n  hello:\n    handler: users.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\nplugins:\n  - serverless-functions-base-path\n","# serverless.yml\n\nservice: hello-world-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timemout: 10\n\ncustom:\n  functionsBasePath: src/handlers\n\nfunctions:\n  hello:\n    handler: users.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\nplugins:\n  - serverless-functions-base-path\n  - serverless-offline\n"]},{"id":192755684,"files":["service:\n  name: scaleway-golang\n\nprovider:\n  name: scaleway\n  runtime: golang\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    # If handler is at the root of your serverless project\n    handler: \".\"\n    # Local environment variables - used only in given function\n    env:\n      local: local\n\n  mypackage:\n    # if your handler is in a custom package\n    handler: mypackage\n","service:\n  name: scaleway-container\n\nprovider:\n  name: scaleway\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\ncustom:\n  containers:\n    first:\n      directory: my-container\n      # minScale: 1\n      # memoryLimit: 256\n      # maxScale: 2\n      # timeout: 20000\n      # Local environment variables - used only in given function\n      env:\n        local: local\n","service:\n  name: scaleway-node10\n\nprovider:\n  name: scaleway\n  runtime: node10\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-node8\n\nprovider:\n  name: scaleway\n  runtime: node8\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-python2\n\nprovider:\n  name: scaleway\n  runtime: python\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n","service:\n  name: scaleway-python3\n\nprovider:\n  name: scaleway\n  runtime: python3\n  # Global Environment variables - used in every functions\n  env:\n    test: test\n  # the path to the credentials file needs to be absolute\n  scwToken: <scw-token>\n  scwOrganization: <scw-organization-id>\n\nplugins:\n  - serverless-scaleway-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: handler.handle\n    # Local environment variables - used only in given function\n    env:\n      local: local\n"]},{"id":186086500,"files":["service: ExampleMicroService-api-__SERVICE__\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  __FUNCTION__:\n    handler: index.handler\n    events:\n      - http:\n          path: /__PATH__\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-order\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  Order:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:Query\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      - Effect: Allow\n        Action:\n          - sqs:SendMessage\n        Resource:\n          - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    environment:\n      ordersTable: ${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      ordersQueue: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    events:\n      - http:\n          path: /order\n          method: post\n          cors: true\n      - http:\n          path: /order/{orderid}\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-user-order\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiResources:\n      /user/{userid}:\n        'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-ApiRootUserUseridVar-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  UserOrder:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n    environment:\n      ordersTable: ${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n    events:\n      - http:\n          path: /user/{userid}/orders\n          method: get\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService-api-user\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\nfunctions:\n  User:\n    handler: index.handler\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Scan\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Users-${self:provider.stage}\n    environment:\n      usersTable: ${self:custom.${self:provider.stage}.Stack}-Users-${self:provider.stage}\n    events:\n      - http:\n          path: /user\n          method: get\n          cors: true\n      - http:\n          path: /user\n          method: post\n          cors: true\n      - http:\n          path: /user/{userid}\n          method: get\n          cors: true\n\nresources:\n  Outputs:\n    ApiRootUser:\n      Value:\n        Ref: ApiGatewayResourceUser\n      Export:\n        Name: ${self:custom.${self:provider.stage}.Stack}-ApiRootUser-${self:provider.stage}\n    ApiRootUserUseridVar:\n      Value:\n        Ref: ApiGatewayResourceUserUseridVar\n      Export:\n        Name: ${self:custom.${self:provider.stage}.Stack}-ApiRootUserUseridVar-${self:provider.stage}\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n  - serverless-plugin-reducer\n","service: ExampleMicroService\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  # You can uncomment this and it will deploy to a custom website.\n  # Provided you give accurate variables in the custom.prod.ApiHostedZone,ApieSite, and ApiSite.\n  # customDomain:\n  #   domainName: ${self:custom.${self:provider.stage}.ApiSite}\n  #   stage: ${self:provider.stage}\n  #   basePath:\n  #   certificateArn: ${self:custom.${self:provider.stage}.ApiCert}\n  #   createRoute53Record: true\n  #   endpointType: 'edge'\n  prod:\n    Stack: ExampleSite\n    LogLevel: info\n    ApiHostedZone: examplesite.us.\n    ApiSite: \"prod.examplesite.us\"\n    ApiCert: \"arn:aws:acm:us-east-1:12345678901:certificate/12345678-b123-a123-c123-abcd1234efgh\"\n    OrdersTableRCU: 1\n    OrdersTableWCU: 1\n    UsersTableRCU: 1\n    UsersTableWCU: 1\n  dev:\n    Stack: ExampleSite\n    LogLevel: debug\n    ApiHostedZone: examplesite.us.\n    ApiSite: \"dev.examplesite.us\"\n    ApiCert: \"arn:aws:acm:us-east-1:12345678901:certificate/12345678-b123-a123-c123-abcd1234efgh\"\n    OrdersTableRCU: 1\n    OrdersTableWCU: 1\n    UsersTableRCU: 1\n    UsersTableWCU: 1\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 10\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  logRetentionInDays: 14\n  environment:\n    logLevel: ${self:custom.${self:provider.stage}.LogLevel}\n\n# This is to activate serverless-plugin-reducer.\npackage:\n  individually: true\n\nfunctions:\n  # API Root Function, for a health check.\n  Root:\n    handler: src/_root/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  # When an order is created, it will place a message in the OrdersQueue to fulfill the order.\n  Orders:\n    handler: src/orders/index.handler\n    environment:\n      ordersQueueUrl: !Ref OrdersQueue\n      ordersTable: !Ref OrdersTable\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:UpdateItem\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}\n      - Effect: Allow\n        Action:\n          - sqs:ReceiveMessage\n          - sqs:DeleteMessage\n          - sqs:GetQueueAttributes\n        Resource:\n          - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.${self:provider.stage}.Stack}-OrdersQueue-${self:provider.stage}\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - OrdersQueue\n              - Arn\n          batchSize: 1\nresources:\n  # API GW defined so you can export the restApiId, as well as name it.\n  - ${file(resources/apigateway/RestApi.yml)}\n\n  # Two DynamoDB tables\n  - ${file(resources/dynamodb/UsersTable.yml)}\n  - ${file(resources/dynamodb/OrdersTable.yml)}\n\n  # Platform for our two functions to communicate.\n  - ${file(resources/sqs/OrdersQueue.yml)}\n  # Here we are exporting the RestApiID and the RootResourceId to use in other API Endpoints.\n  - Outputs:\n      ApiGWRestApiId:\n        Value:\n          Ref: ApiGatewayRestApi\n        Export:\n          Name: ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}\n      ApiGWRootResourceId:\n        Value:\n          Fn::GetAtt:\n            - ApiGatewayRestApi\n            - RootResourceId\n        Export:\n          Name: ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}\nplugins:\n  # This is for support of #{AWS::Region} when developing ARNs\n  - serverless-pseudo-parameters\n  # This is to provide a iam role per function.\n  - serverless-iam-roles-per-function\n  # Enable this if you want to have a custom domain.  Please be sure to ru serverless create_domain prior to serverless deploy\n  # - serverless-domain-manager\n  # This plugin helps reduce the dependencies for your lambda, speeding uploads and S3 storage.\n  - serverless-plugin-reducer\n"]},{"id":100794077,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-async-await\n  \nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":86749494,"files":["service: serverless-alexa-skill\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  \nfunctions:\n  handler:\n    handler: handler.answer\n    events:\n      - alexaSkill\n\npackage:\n  exclude:\n    - node_modules/**"]},{"id":95381035,"files":["---\nservice: prismic-lambda-webhook\n\nplugins:\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: ${opt:stage,self:custom.defaults.stage}\n  region: ${opt:region,self:custom.defaults.region}\n  profile: ${opt:profile,env:AWS_PROFILE,self:custom.defaults.profile}\n  environment: ${file(./${opt:env,self:custom.defaults.env}.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:ListTopics\n        - sns:CreateTopic\n        - sns:Publish\n        - sns:Subscribe\n      Resource:\n        - arn:aws:sns:${self:provider.region}:*:PRISMIC_LAMBDA_WEBHOOK\n\ncustom:\n  defaults:\n    stage: dev\n    region: eu-central-1\n    env: env\n    profile: default\n\nfunctions:\n  webhook:\n    description: Handle Prismic.io webhook post and send SNS notification\n    handler: functions/webhook.handle\n    events:\n      - http: POST webhook\n\n  # EXAMPLE handler\n  build:\n    description: Run simple lambda triggered by SNS event\n    handler: functions/build.handle\n    events:\n      - sns: PRISMIC_LAMBDA_WEBHOOK\n"]},{"id":157223875,"files":["frameworkVersion: \">=1.57.0 <2.0.0\"\n\nservice: serverless-github-check\n\nplugins:\n    - serverless-webpack\n    - serverless-offline\n\ncustom:\n    webpack:\n        includeModules: true\n        packager: yarn\n\nprovider:\n    name: aws\n    runtime: nodejs12.x\n    profile: default\n    region: ${opt:region, 'eu-west-1'}\n    environment:\n        NAMESPACE: 20 Minutes\n        # SecureString from SSM Parameters\n        GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\nfunctions:\n    specification:\n        handler: handler.checkSpecification\n        description: Validate GitHub PRs against some specifications\n        environment:\n            CHECK_BODY_LENGTH: 8\n            CHECK_TITLE_LENGTH: 8\n        events:\n            -\n                # default event\n                http:\n                    path: webhook\n                    method: post\n                    cors: true\n            -\n                http:\n                    path: webhook/specification\n                    method: post\n                    cors: true\n\n    label:\n        handler: handler.checkLabel\n        description: Check for GitHub PR labels to block merge\n        environment:\n            # coma separated labels\n            BLOCK_LABELS: \"Work In Progress,Waiting For Change,Waiting For Travis\"\n        events:\n            -\n                http:\n                    path: webhook/label\n                    method: post\n                    cors: true\n\n    fixup:\n        handler: handler.checkFixupCommits\n        description: Ensure no \"fixup!\" commits are in the PR\n        events:\n            -\n                http:\n                    path: webhook/fixup\n                    method: post\n                    cors: true\n"]},{"id":110399069,"files":["service: podcasts\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless\n  region: us-west-2\n\nfunctions:\n  podcast:\n    handler: index.handler\n    events:\n      - alexaSkill"]},{"id":158428274,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-slack-invite\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: slackinvite.dev.tophat.com\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\n  stageSettings:\n    CacheClusterEnabled: true\n    CacheClusterSize: '0.5'\n    MethodSettings:\n      - CachingEnabled: true\n      - HttpMethod: GET\n        ResourcePath: \"/\"\n        CachingEnabled: true\n        CacheTtlInSeconds: 30\n      - HttpMethod: GET\n        ResourcePath: \"/{proxy+}\"\n        CachingEnabled: true\n        CacheTtlInSeconds: 30\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\n  environment:\n    SLACK_API_TOKEN: ${env:SLACK_API_TOKEN}\n    SLACK_SUBDOMAIN: ${env:SLACK_SUBDOMAIN}\n\nfunctions:\n  app:\n    handler: dist/lambda.init\n    name: '${self:service}-app-router-${self:custom.stage}'\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n            allowCredentials: false\n      - http:\n          path: '{proxy+}'\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n            allowCredentials: false\n\n\n"]},{"id":121887647,"files":["service: aggregate-vote\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  aggregate-vote:\n    handler: app.handler\n    memorySize: 128\n    timeout: 10\n    events:\n      - stream:\n            arn: <arn_stream_dynamodb>\n            batchSize: 1\n","\nservice: receive-vote\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  receive-vote:\n    handler: app.handler\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          path: receivevote\n          method: post\n          cors: true"]},{"id":174887609,"files":["service: mercury-parser\napp: mercury-parser\n\nprovider:\n  name: aws\n  region: eu-central-1\n  runtime: nodejs8.10\n  stage: prod\n  environment:\n    # SECRET_KEY: REPLACE_YOUR_SECRET_KEY_HERE\n\nfunctions:\n  parser:\n    handler: handler.parser\n    events:\n      - http:\n          path: /parser\n          method: get\n\nplugins:\n  - serverless-offline\n"]},{"id":54528267,"files":["service: jung2bot\n\nframeworkVersion: '>=1.48.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  stage: ${env:STAGE, 'dev'}\n  region: ${env:REGION, 'us-east-1'}\n  profile: ${env:PROFILE, ''}\n  logRetentionInDays: 1\n#  logs:\n#    restApi: true\n#  tracing:\n#    apiGateway: true\n#    lambda: true\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    LOG_LEVEL: ${env:LOG_LEVEL, 'error'}\n    TELEGRAM_BOT_TOKEN: ${ssm:${self:service}-${self:provider.stage}-telegram-api-token~true}\n    MESSAGE_TABLE: ${self:service}-${self:provider.stage}-messages\n    CHATID_TABLE: ${self:service}-${self:provider.stage}-chatIds\n    EVENT_QUEUE_URL: !Ref EventQueue\n    SCALE_UP_READ_CAPACITY: ${self:custom.jung2bot.scaleUpBeforeOffFromWork.ReadCapacityUnits.${self:provider.stage}, 1}\n  tags:\n    Name: jung2bot\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'dynamodb:*'\n      Resource:\n        - !GetAtt Jung2BotDynamoDB.Arn\n        - !GetAtt ChatIDsDynamoDB.Arn\n    - Effect: Allow\n      Action:\n        - 'sns:Publish'\n      Resource:\n        - !Ref MessagesDeadLetterTopic\n        - !Ref OffFromWorkDeadLetterTopic\n        - !Ref QueryEventDeadLetterTopic\n        - !Ref ScaleUpBeforeOffFromWorkDeadLetterTopic\n    - Effect: Allow\n      Action:\n        - 'sqs:SendMessage'\n      Resource:\n        - !GetAtt EventQueue.Arn\n\nfunctions:\n  messages:\n    handler: src/handler.onMessage\n    # 2019-05-18 onMessage:\n    # min: 104.9042 mb\n    # avg: 174.0444 mb\n    # max: 183.1055 mb\n    # peak duration: 9.1s\n    timeout: 30\n    memorySize: 192\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-messages-dead-letter-topic\n    events:\n      - http:\n          path: /\n          method: post\n  offFromWork:\n    handler: src/handler.onOffFromWork\n    # 2019-05-18 onOffFromWork:\n    # min: 126.8387 mb\n    # avg: 155.6873 mb\n    # max: 183.1055 mb\n    # peak duration: 88.4s\n    timeout: 600\n    memorySize: 256\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-offFromWork-dead-letter-topic\n    events:\n      - schedule: cron(59 9 ? * MON-FRI *) # 9:59 am UTC = 5:59 pm HKT\n  queryEvent:\n    handler: src/handler.onEvent\n    # 2019-05-18 onEvent:\n    # min: 108.7189 mb\n    # avg: 196.4851 mb\n    # max: 242.2333 mb\n    # peak duration: 53.6s\n    timeout: 90\n    memorySize: 320\n    # https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this\n    # If you're sending bulk notifications to multiple users, the API will not allow more than 30 messages\n    # per second or so. Consider spreading out notifications over large intervals of 8—12 hours for best results.\n    # Also note that your bot will not be able to send more than 20 messages per minute to the same group.\n    #\n    # Cloudformation will return `ResourceConflictException` exception if the reservedConcurrency is changed.\n    # Workaround will be manually changing the `reservedConcurrency` in the console and deploy.\n    # Reference: https://github.com/serverless/serverless/issues/4964#issuecomment-406570150\n    reservedConcurrency: ${self:custom.jung2bot.queryEvent.reservedConcurrency.${self:provider.stage}, 1}\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-queryEvent-dead-letter-topic\n    events:\n      - sqs:\n          arn: !GetAtt EventQueue.Arn\n  scaleUpBeforeOffFromWork:\n    handler: src/handler.onScaleUp\n    # 2019-05-18 scaleUpBeforeOffFromWork:\n    # min: 115.3946 mb\n    # avg: 121.7524 mb\n    # max: 122.0703 mb\n    # peak duration: 3.6s\n    timeout: 10\n    memorySize: 192\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-scaleUpBeforeOffFromWork-dead-letter-topic\n    events:\n      - schedule: cron(53-59 9 ? * MON-FRI *) # 9:53-59 am UTC = 5:53-59 pm HKT\n\nplugins:\n  - serverless-domain-manager\n  - serverless-dotenv-plugin\n  - serverless-plugin-lambda-dead-letter\n  - serverless-plugin-dynamodb-autoscaling\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  # jung2bot\n  # Intrinsic functions is not working within the functions block\n  # Reference: https://stackoverflow.com/a/54065636/837059\n  jung2bot:\n    scaleUpBeforeOffFromWork:\n      ReadCapacityUnits:\n        local: 1\n        dev: 1\n        prod: 500\n    queryEvent:\n      reservedConcurrency:\n        local: 1\n        dev: 5\n        prod: 100\n  # serverless-domain-manager\n  customDomain:\n    domainName: ${env:DOMAIN}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n    endpointType: edge\n  # serverless-dynamodb-local\n  dynamodb:\n    start:\n      seed: true\n      migrate: true\n    seed:\n      domain:\n        sources:\n          - table: ${self:service}-${self:provider.stage}-messages\n            sources: [./test/helper/dynamodbMessagesSeed.json]\n          - table: ${self:service}-${self:provider.stage}-chatIds\n            sources: [./test/helper/dynamodbChatIdSeed.json]\n  # serverless-plugin-dynamodb-autoscaling\n  dynamodbAutoscaling:\n    tablesConfig:\n      Jung2BotDynamoDB:\n        minCapacity: 1\n        maxCapacity: 1000\n      ChatIDsDynamoDB:\n        minCapacity: 1\n        maxCapacity: 1000\n\nresources:\n  Resources:\n    # Messages DynamoDB Table\n    Jung2BotDynamoDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: chatId\n            AttributeType: N\n          - AttributeName: dateCreated\n            AttributeType: S\n        KeySchema:\n          - AttributeName: chatId\n            KeyType: HASH\n          - AttributeName: dateCreated\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        TableName: ${self:service}-${self:provider.stage}-messages\n    # ChatId DynamoDB Table\n    ChatIDsDynamoDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: chatId\n            AttributeType: N\n        KeySchema:\n          - AttributeName: chatId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        TableName: ${self:service}-${self:provider.stage}-chatIds\n    # SQS for handling query events\n    EventQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        VisibilityTimeout: 100\n        KmsDataKeyReusePeriodSeconds: 86400\n        KmsMasterKeyId: alias/aws/sqs\n"]},{"id":200002892,"files":["service: aws-secure-websockets\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nframeworkVersion: \">=1.38.0 <2.0.0\"\n\ncustom:\n  # This can be changed to the desired origin\n  # When using lambda proxy integration, you have to manually add the CORS headers to responses...\n  # https://github.com/serverless/serverless/issues/4681\n  corsOrigin: '*'\n  user: damoresa\n  dynamodb:\n    start:\n      port: 8700\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n  serverless-offline:\n    port: 3700\n\n# This article helped me find out how Serverless handles Cloud Formation naming\n# https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md\nprovider:\n  name: aws\n  memorySize: 256\n  runtime: nodejs8.10\n  region: eu-central-1\n  # API GW Websocket specific configuration\n  websocketsApiName: ${self:service}-apigw-websocket-${opt:stage, self:provider.stage}\n  # Custom routes are selected by the value of the action property in the body\n  websocketsApiRouteSelectionExpression: $request.body.action\n  # DynamoDB table name, as composed with parameters from this definition file\n  environment:\n    ENVIRONMENT: ${opt:stage, self:provider.stage}\n    COGNITO_USER_POOL:\n      Ref: CognitoUserPool\n    COGNITO_USER_POOL_CLIENT:\n      Ref: CognitoUserPoolClient\n    CORS_ORIGIN: ${self:custom.corsOrigin}\n    DYNAMODB_SOCKETS_TYPE_GSI: ${self:service}-sockets-type-gsi-${opt:stage, self:provider.stage}\n    DYNAMODB_SOCKETS_TABLE: ${self:service}-sockets-${opt:stage, self:provider.stage}\n    KEYS_URL: !Join ['', ['https://cognito-idp.', '${opt:region, self:provider.region}', '.amazonaws.com/', !Ref CognitoUserPool, '/.well-known/jwks.json']]\n    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', '${opt:region, self:provider.region}', '.amazonaws.com/', '${opt:stage, self:provider.stage}/']]\n  # Define the service IAM permissions\n  iamRoleStatements:\n    # Websocket permissions\n    - Effect: Allow\n      Action:\n        - \"execute-api:ManageConnections\"\n      Resource:\n        - \"arn:aws:execute-api:${opt:region, self:provider.region}:*:**/@connections/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}/index/${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}\"\n\nfunctions:\n  authUser:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_${opt:stage, self:provider.stage}\n    handler: handler.authUser\n    events:\n      - http:\n          path: auth\n          method: post\n          cors:\n            origin: ${self:custom.corsOrigin}\n  authWebsocket:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_websocket_${opt:stage, self:provider.stage}\n    handler: handler.authWebsocket\n    cors:\n      origin: ${self:custom.corsOrigin}\n  defaultSocketHandler:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_default_${opt:stage, self:provider.stage}\n    handler: handler.defaultSocketHandler\n    events:\n      - websocket:\n          route: $default\n  greeting:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_greeting_${opt:stage, self:provider.stage}\n    handler: handler.greeting\n    events:\n      - websocket:\n          route: GREETING\n  handleSocketConnect:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_connect_${opt:stage, self:provider.stage}\n    handler: handler.handleSocketConnect\n    events:\n      - websocket:\n          route: $connect\n          # references the authWebsocket function below, serverless doesn't provide any other\n          # way to perform this as of 01/07/2019\n          authorizer:\n            name: authWebsocket\n            identitySource:\n              - 'route.request.querystring.Authorizer'\n  handleSocketDisconnect:\n    name: LAMBDA_${self:custom.user}_${self:service}_socket_disconnect_${opt:stage, self:provider.stage}\n    handler: handler.handleSocketDisconnect\n    events:\n      - websocket:\n          route: $disconnect\n  refreshToken:\n    name: LAMBDA_${self:custom.user}_${self:service}_auth_refresh_${opt:stage, self:provider.stage}\n    handler: handler.refreshToken\n    events:\n      - http:\n          path: auth/refresh\n          method: post\n          cors:\n            origin: ${self:custom.corsOrigin}\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        AliasAttributes:\n          - preferred_username\n        MfaConfiguration: OFF\n        UserPoolName: ${self:service}-cognito-${opt:stage, self:provider.stage}\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: False\n            RequireUppercase: True\n    CognitoUserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:service}-cognito-client-${opt:stage, self:provider.stage}\n        GenerateSecret: False\n        UserPoolId:\n          Ref: CognitoUserPool\n    SocketsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      # For a production deployment, you'd want to retain your DB\n      # in case of re-deployment or stack removal to avoid data loss.\n      # DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: connectionId\n            AttributeType: S\n          - AttributeName: type\n            AttributeType: S\n        KeySchema:\n          - AttributeName: connectionId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_SOCKETS_TABLE}\n        GlobalSecondaryIndexes:\n          - IndexName: ${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}\n            KeySchema:\n              - AttributeName: type\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n  Outputs:\n    CognitoUserPoolId:\n      Value:\n        Ref: CognitoUserPool\n      Export:\n        Name: ASW-CognitoUserPoolId-${self:provider.stage}\n    CognitoUserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClient\n      Export:\n        Name: ASW-CognitoUserPoolClientId-${self:provider.stage}\n"]},{"id":66898839,"files":["service: spacebot\n\ncustom:\n  favoritesTableName: 'spacebot-${self:provider.stage}-favorites'\n  tokensTableName: 'spacebot-${self:provider.stage}-oauthtokens'\n  config: ${file(config/config.${self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  profile: spacebot\n  runtime: nodejs10.x\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  timeout: 6\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"FavoritesDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"TokensDynamoDBTable\", \"Arn\" ] }\n\nfunctions:\n  messages:\n    handler: functions/messages/handler.handler\n    description: Slack Interactive Messages Handler\n    events:\n      - http:\n          path: slack/messages\n          method: post\n    environment:\n      SLACK_TOKEN: ${self:custom.config.SLACK_TOKEN}\n      FAVORITES_TABLE_NAME: ${self:custom.favoritesTableName}\n  oauth:\n    handler: functions/oauth/handler.oauth\n    description: Slack OAuth function\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: slack/oauth\n          method: get\n    environment:\n      OAUTH_SUCCESS_URL: ${self:custom.config.OAUTH_SUCCESS_URL}\n      OAUTH_ERROR_URL: ${self:custom.config.OAUTH_ERROR_URL}\n      SLACK_CLIENT_ID: ${self:custom.config.SLACK_CLIENT_ID}\n      SLACK_CLIENT_SECRET: ${self:custom.config.SLACK_CLIENT_SECRET}\n      SLACK_API_URL: ${self:custom.config.SLACK_API_URL}\n      TOKENS_TABLE_NAME: ${self:custom.tokensTableName}\n  slack:\n    handler: functions/slack/handler.slash\n    description: Slack /spacebot slash command function\n    events:\n      - http:\n          path: slack/slash\n          method: post\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n    environment:\n      SLACK_TOKEN: ${self:custom.config.SLACK_TOKEN}\n      NASA_API_KEY: ${self:custom.config.NASA_API_KEY}\n\nresources:\n  Resources:\n    FavoritesDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slackUserId\n            AttributeType: S\n          - AttributeName: mediaId\n            AttributeType: N\n          - AttributeName: service\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slackUserId\n            KeyType: HASH\n          - AttributeName: mediaId\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: userFavoritesByType\n            KeySchema:\n              - AttributeName: slackUserId\n                KeyType: HASH\n              - AttributeName: service\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n                - mediaId\n              ProjectionType: INCLUDE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.favoritesTableName}\n\n    TokensDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slackUserId\n            AttributeType: S\n          - AttributeName: teamId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slackUserId\n            KeyType: HASH\n          - AttributeName: teamId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tokensTableName}\n"]},{"id":47026076,"files":["service: authentication-service\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-admin\n  region: eu-west-1\nfunctions:\n  authorise:\n    handler: handler.authorise\n    environment:\n      AUTH0_SECRET: ${env:AUTH0_SECRET}\nresources:  \n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users \n        AttributeDefinitions:\n          - AttributeName: id \n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/users\n        Roles:\n          - Ref: IamRoleLambdaExecution\n","service: playlist-service\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-admin\n  region: eu-west-1\nfunctions:\n  getPlaylistsByUserId:\n    handler: handler.getPlaylistsByUserId\n    events:\n      - http:\n          path: playlists\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\n  savePlaylist:\n    handler: handler.savePlaylist\n    events:\n      - http:\n          path: playlists\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\n  updatePlaylist:\n    handler: handler.updatePlaylist\n    events:\n      - http:\n          path: playlists\n          method: put\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: playlists\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: userid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        # Allow queries to get playlists by userID\n        GlobalSecondaryIndexes:\n          - IndexName: PlaylistUsers\n            KeySchema:\n              - AttributeName: userid\n                KeyType: HASH\n              - AttributeName: id\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 5\n              WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:*\n              Resource:\n                - arn:aws:dynamodb:*:*:table/playlists\n                - arn:aws:dynamodb:*:*:table/playlists/index/*\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":101657534,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: letter-avatar\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  profilePic:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: letterAvatar/{initials}\n          method: get\n          request:\n            parameters:\n              paths:\n                initials: true\n"]},{"id":72964814,"files":["service: sls-access-counter\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-northeast-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.conf.tableName}\"\n\nfunctions:\n  counter:\n    handler: handler.counter\n    events:\n      - http:\n          path: counter\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    CounterTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.conf.tableName}\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  conf: ${file(conf/config.json)}"]},{"id":103734508,"files":["service: serverless-develop-babel-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  develop:\n    middleware:\n      - npm run build\n    buildPath: build\n    sourcePath: src\n\nplugins:\n  - /Users/Rafal/Node/serverless-develop/index # Change to your absolute dir :P\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./build/**\n\nfunctions:\n  hello:\n    handler: build/src/handler.hello\n    events:\n      - http: GET /hello\n","service: serverless-develop-basic-demo\n\nplugins:\n<<<<<<< HEAD\n  - /Users/Rafal/Node/serverless-develop/index # Change to your absolute dir :P\n=======\n  - serverless-develop\n>>>>>>> 8cfae539003fffcd902b0ff40036107091942a69\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: withDependency.hello\n    events:\n        - http: GET /with\n  handler2:\n    handler: withoutDependency.hello\n    events:\n        - http: GET /without\n"]},{"id":156773926,"files":["service: image-processing-functions\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  tracing: true\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n    REGION: ${env:REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  processing:\n    handler: processing.handler\n    events:\n      - http:\n          path: processing\n          method: get\n          contentHandling: CONVERT_TO_BINARY","service: image-processing-bucket\n\ncustom:\n  secrets: ${file(../secrets/secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n\nresources:\n  Resources:\n    ImageProcessingOnTheFly:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicReadWrite\n        BucketName: ${env:BUCKET}\n        WebsiteConfiguration:\n          ErrorDocument: error.html\n          IndexDocument: index.html\n          RoutingRules:\n            -\n              RedirectRule:\n                HostName: ${self:custom.secrets.DOMAIN}\n                HttpRedirectCode: \"307\"\n                Protocol: \"https\"\n                ReplaceKeyPrefixWith: \"${self:provider.stage}/processing\"\n              RoutingRuleCondition:\n                HttpErrorCodeReturnedEquals: \"404\"\n                KeyPrefixEquals: \"\"\n    ImageProcessingOnTheFlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: ImageProcessingOnTheFly\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:*\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join:\n                  - \"\"\n                  -\n                    - \"arn:aws:s3:::\"\n                    -\n                      Ref: ImageProcessingOnTheFly\n                    - \"/*\"\n              Principal: \"*\""]},{"id":84311206,"files":["service: lawos-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n  stage: dev\n  memorySize: 128\n  timeout: 20\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"lambda:InvokeFunction\"\n    Resource:\n      - \"*\"\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: arn:aws:sqs:*:*:${self:custom.sqs}\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  sns: ${self:custom.stage}-lawos-serverless-trigger\n  sqs: ${self:custom.stage}-lawos-serverless-backlog\n\npackage:\n  exclude:\n    - node_modules/**\n\nfunctions:\n  task:\n    handler: functions/task.handler\n    name: ${self:custom.stage}-lawos-serverless-task\n\n  worker:\n    handler: functions/worker.handler\n    name: ${self:custom.stage}-lawos-serverless-worker\n    environment:\n      sqs: ${self:custom.sqs}\n      lambda: ${self:custom.stage}-lawos-serverless-task\n    events:\n      - schedule: rate(1 minute)\n      - sns: ${self:custom.sns}\n\nresources:\n  Resources:\n    BacklogQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: '1209600'\n        VisibilityTimeout: '60'\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - DeadLetterQueue\n            - Arn\n          maxReceiveCount: '10'\n\n    DeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: '1209600'\n\n    QueueDepthAlarmOver100:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        AlarmDescription: Alarm if queue depth grows beyond 100 messages\n        Namespace: AWS/SQS\n        MetricName: NumberOfMessagesVisible\n        Dimensions:\n        - Name: QueueName\n          Value: ${self:custom.sqs}\n        Statistic: Sum\n        Period: '60'\n        EvaluationPeriods: '1'\n        Threshold: '100'\n        ComparisonOperator: GreaterThanOrEqualToThreshold\n        AlarmActions:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.sns}\" ] ]  }\n"]},{"id":138597845,"files":["service: sls-api-stitch\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    DB: ${self:custom.secrets.DB}\n    APP_ID: ${self:custom.secrets.APP_ID}\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id}\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline"]},{"id":203832321,"files":["name: serverless-cloudmap-component\n\ncreateUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.createUser\n\nfetchUser:\n  component: '@serverless/function'\n  code: ./src\n  handler: index.fetchUser\n\nuserTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    attributeDefinitions:\n      - AttributeName: id\n        AttributeType: S\n    keySchema:\n      - AttributeName: id\n        KeyType: HASH\n    region: eu-west-1\n\nUserService:\n  component: ../\n  inputs:\n    service: 'user-service'\n    namespace: 'test'\n    resources:\n      create:\n        resource: ${createUser}\n      fetch:\n        resource: ${fetchUser}\n      userTable:\n        resource: ${userTable}\n"]},{"id":90719271,"files":["service: serverless-webpack-typescript-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n"]},{"id":139711480,"files":["service: aws-node-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  localGreeting:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n"]},{"id":158976270,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: example-dynamodbAutoBackups\n\nframeworkVersion: \"=1.33.2\"\n\nplugins:\n  - '@unly/serverless-plugin-dynamodb-backups' # Must be first, even before \"serverless-webpack\", see https://github.com/UnlyEd/serverless-plugin-dynamodb-backups\n  - serverless-webpack # Must be second, see https://github.com/99xt/serverless-dynamodb-local#using-with-serverless-offline-and-serverless-webpack-plugin\n  - serverless-offline # See https://github.com/dherault/serverless-offline\n\ncustom:\n  dynamodbAutoBackups: # @unly/serverless-plugin-dynamodb-backups configuration (see README for more)\n    backupRate: rate(1 minute) # Set to 1mn in the example to see the result quickly\n    source: src/backups.handler\n    name: ${self:custom.name} # Using the service name as a base name may be a good practice (but it doesn't work at the time, due to a bug on our side)\n    backupRemovalEnabled: true\n    backupRetentionDays: 1 # Created backups will be removed the next day\n  name: example-dynamodbAutoBackups\n  serverless-offline:\n    port: 3000\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: yarn\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: development # TODO You may want to change this\n  region: eu-west-1 # TODO You may want to change this\n  profile: sandbox # TODO You need to either remove this or use your own profile\n  environment:\n    TABLE_NAME: Book # We specify the table name so we can check its backups list using the dedicated endpoint /listBackups\n\nfunctions:\n  listBackups: # Endpoint example to see the list of all backups that have been made\n    handler: src/listBackups.handler\n    events:\n      - http:\n          method: GET\n          path: /listBackups\n\nresources:\n  Resources:\n    BookTable: # Create dynamodb table on aws for testing\n      Type: AWS::DynamoDB::Table # see https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html\n      Properties:\n        TableName: Book\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":175439836,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: base-app # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  home:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: micro-1 # NOTE: update this with your service name\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  batch:\n    handler: src/batch.handler\n    events:\n      - http:\n          path: batch\n          method: POST\n  repos:\n    handler: src/repos.handler\n    events:\n      - http:\n          path: repos\n          method: GET\n          cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":167280786,"files":["service: mmi-alert\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  profile: serverless\nfunctions:\n  mmiAlert:\n    handler: handler.mmiAlert\n    events:\n    - schedule:\n        rate: cron(30 5 ? * MON-FRI *)\n        enabled: true\npackage:\n  exclude:\n    - images/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - LICENSE\n"]},{"id":104753419,"files":["service: serverless-aws-nodejs-blueprint\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${self:custom.params.stage}\n  region: ${self:custom.params.region}\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-local\n  - serverless-dynamodb-local\n  - serverless-dynamodb-autoscaling\n  - serverless-offline\n\ncustom:\n  params: ${file(./serverless.params.yml)}\n  dynamodb:\n    start:\n      port: ${self:custom.params.local.dynamodb.port}\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: users\n            sources: [./data/users.json]\n  s3:\n    port: ${self:custom.params.local.s3.port}\n  capacities:\n    - table: UsersDynamoDBTable\n      read:\n        minimum: ${self:custom.params.capacities.users.read.minimum}\n        maximum: ${self:custom.params.capacities.users.read.maximum}\n        usage: ${self:custom.params.capacities.users.read.usage}\n      write:\n        minimum: ${self:custom.params.capacities.users.write.minimum}\n        maximum: ${self:custom.params.capacities.users.write.maximum}\n        usage: ${self:custom.params.capacities.users.write.usage}\n\nfunctions:\n  users:\n    handler: src/functions/users/index.handler\n    role: UsersRole\n    integration: lambda\n    events:\n      - http:\n          path: /users\n          method: post\n          integration: lambda\n          request:\n            template:\n              application/json: ${file(./deployment/api/users-post-template.json)}\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.params.capacities.users.read.default}\n          WriteCapacityUnits: ${self:custom.params.capacities.users.write.default}\n    UsersRole: ${file(./deployment/iam/users-role.yml)}\n    LogsS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: logs\n","accountId: 1234567890 # Your account id\nstage: dev\nregion: us-east-1\nlocal:\n  dynamodb:\n    port: 8000\n  s3:\n    port: 4569\ncapacities:\n  users:\n    read:\n      default: 5\n      minimum: 2\n      maximum: 30\n      usage: 0.7\n    write:\n      default: 5\n      minimum: 2\n      maximum: 30\n      usage: 0.7\n"]},{"id":119847433,"files":["service: serverless-kakao-bot\n\nframeworkVersion: \"=1.26.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-northeast-2\n  stage: ${opt:stage, 'prod'}\n  profile: admin\n\ncustom:\n  customDomain: \n    domainName: api.vulldozer.com\n    basePath: \"\"\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nfunctions:\n  keyboard:\n    handler: api/keyboard.main\n    memorySize: 128\n    description: Initializing endpoint for Kakao REST API\n    events:\n      - http: GET keyboard\n  message:\n    handler: api/message.main\n    memorySize: 128\n    description: Answering API for Receiving Kakao Messages\n    events:\n      - http: POST message\n\nplugins:\n  - serverless-webpack\n  - serverless-domain-manager\n"]},{"id":87192199,"files":["service: serverless-mailer-function\n\nprovider:\n  name: aws\n  environment:\n    EMAIL_SERVICE: Gmail\n    EMAIL_SERVICE_USER: myemai@gmail.com\n    EMAIL_SERVICE_PASS: mypassword\nfunctions:\n  mailerLocal:\n    handler: handler.send\n  mailer:\n    handler: mailer@^0.0.3\n    individually: true\n\n"]},{"id":104636922,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bitcoin-trading-dca-serverless # NOTE: update this with your service name\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  logsBucket: myBucket\n  logsFile: myLog\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n            - \"s3:PutObject\"\n            - \"s3:GetObject\"\n        Resource: { \"Fn::Join\" : [ \"\", [ \"arn:aws:s3:::${self:custom.logsBucket}\", \"/*\" ] ] }\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  bitcoin:\n    handler: handler.start\n    environment:\n        KRAKEN_KEY: myKrakenKey\n        KRAKEN_SECRET: myKrakenSecret\n        INVESTMENT_AMOUNT: 11.66\n        ASSETS_PAIR: XXBTZEUR\n        BUCKET: ${self:custom.logsBucket}\n        LOG_FILE: ${self:custom.logsFile}\n    events:\n        - schedule: cron(0 10 * * ? *)\n    timeout: 50\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":82465707,"files":["service: sls-workshop\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  s3event:\n    handler: handler.s3event\n    events:\n      - s3: shimokitaoss-${opt:stage}\n"]},{"id":149365668,"files":["service: demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    commands:\n      - 'deploy'\n      - 'remove'\n","service: test-integration-commandsForStages\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    aws:\n      commandsForStages:\n        - 'deploy function:prod'\n","service: test-integration-stages\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    aws:\n      stages:\n        - 'prod'\n","service: test-integration-commands\n\nprovider:\n  name: google\n  runtime: nodejs\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    commands:\n      - 'deploy function'\n","service: test-integration-noConfiguration\n\nprovider:\n  name: google\n  runtime: nodejs\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n"]},{"id":85356810,"files":["service: serverless-tracking\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-2\n  memorySize: 128\n\nfunctions:\n  smsUpdates:\n    handler: handler.smsUpdates\n    events:\n      - http:\n          path: smsupdates\n          method: post\n          integration: lambda\n          cors: true\n"]},{"id":127059340,"files":["service: price-tracker-app\n\ncustom:\n  tableName: 'watched-items-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"WatchedItemsDynamoDBTable\", \"Arn\" ] }\n  environment:\n    WATCHED_ITEMS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  web-app-api:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n  watcher-cron:\n    description: Trigger job to run thru all items watched, update latest price, and send notifications if threshold met\n    handler: watcher.run #execute watcher.js run functions\n    events:\n      - schedule: rate(1440 minutes)\n\n  notifier:\n    description: Consumes DynamoDB table stream and sends notification if latest price is less than threshold\n    handler: notifier.handle\n    memorySize: 128\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - WatchedItemsDynamoDBTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    WatchedItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: url\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: url\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n        TableName: ${self:custom.tableName}\n"]},{"id":132599168,"files":["service:\n  name: firestorecrudapi\n\nplugins:\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google\n  region: europe-west1\n\n  project: \"{PROJECT_ID}\"\n  credentials: ~/.gcloud/{KEYFILE}.json\n\n  runtime: nodejs10\n  memorySize: 1024\n  timeout: 10s\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - .gcloud/**\n\nfunctions:\n  create:\n    handler: create\n    events:\n      - http: create\n        method: POST\n  read:\n    handler: read\n    events:\n      - http: read\n        method: GET\n  update:\n    handler: update\n    events:\n      - http: update\n        method: POST\n  delete:\n    handler: delete\n    events:\n      - http: delete\n        method: POST\n"]},{"id":115786526,"files":["service: netlify-travis-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  environment:\n    TRAVIS_ACCESS_TOKEN: ${env:TRAVIS_ACCESS_TOKEN}\n    TARGET_REPO: ${env:TARGET_REPO}\n    GITHUB_OAUTH_TOKEN: ${env:GITHUB_OAUTH_TOKEN}\n\nfunctions:\n  ghStatusManager:\n    handler: src/gh-status-manager.handler\n\n    events:\n      - http:\n          path: github-status\n          method: post\n  travisCaller:\n    handler: src/travis-caller.handler\n\n    events:\n      - http:\n          path: travis-caller\n          method: post\n"]},{"id":117250796,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-aws-nodejs-boilerplate\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-central-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    SLS_DEBUG: \"*\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: src/app.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":149415146,"files":["service: serverless-node-mailer\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  profile: default\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  deploymentBucket:\n    # name: \n    serverSideEncryption: AES256 # when using server-side encryption\n\n# The `functions` block defines what code to deploy\nfunctions:\n  notifier:\n    handler: handler.notifier\n    # The `events` block defines how to trigger the handler.helloWorld code\n    # events:\n    #   - http:\n    #       path: hello-world\n    #       method: post\n    #       cors: true\nplugins:\n  - serverless-offline\n"]},{"id":154864389,"files":["service: LevertonCustomSkill\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n\nfunctions:\n  leverton-custom-skill:\n    handler: index.handler\n    name: leverton-custom-skill\n    runtime: nodejs8.10\n    timeout: 300\n    events:\n      - http:\n          method: POST\n          path: skill\n          cors: true\n    environment:\n      LEVERTON_AUTH_TOKEN: <your-leverton-auth-token>\n      LEVERTON_PROJECT_ID: <your-project-id>\n      DEFAULT_COLLECTION_ID: <your-default-collection-id>\n"]},{"id":113008476,"files":["service: molog\n\n\nplugins:\n  - serverless-domain-manager\n  - serverless-finch\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: log.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  client:\n    bucketName: static.pho.im\n    distributionFolder: client/dist\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Query\n        - dynamodb:Scan\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /{component}/{env}/\n          method: get\n          cors: true\n  get:\n    handler: get/index.handler\n    events:\n      - http:\n          path: /{component}/{env}/{id}\n          method: get\n  list:\n    handler: list/index.list\n    events:\n      - http:\n          path: /{component}/{env}/logs\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    LogsDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: createdAt\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":56586796,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ThreeScale\n\nprovider:\n  profile: 3scale\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1 #CHANGE IT TO YOUR OWN\n  stage: dev\n  iamRoleStatements:\n    $ref: ./iamRoleStatements.json\n  vpc:\n    securityGroupIds:\n     - 'Fn::GetAtt': SecurityGroup.GroupId\n    subnetIds:\n     - Ref: PrivateSubnet1\n     - Ref: PrivateSubnet2\n\n  environment:\n   SERVERLESS_REGION: \"${self:provider.region}\"\n   THREESCALE_PROVIDER_KEY: \"YOUR_PROVIDER_KEY\"\n   THREESCALE_SERVICE_TOKEN: \"YOUR_SERVICE_TOKEN\" #CHANGE IT TO YOUR OWN\n   THREESCALE_SERVICE_ID: \"YOUR_SERVICE_ID\" #CHANGE IT TO YOUR OWN\n   THREESCALE_AUTH_TYPE: \"APIKEY\"\n   IDP_URL: \"YOUR_IDENTITY_PROVIDER_URL\"\n   ELASTICACHE_ENDPOINT:\n     Fn::GetAtt:\n       - elasticCache\n       - RedisEndpoint.Address\n   ELASTICACHE_PORT: 6379\n\n# CloudFormation resource templates\nresources:\n  - ${file(cf-resources.yml)}\n\ncustom:\n  AWS_ACCOUNTID: \"YOUR_AWS_ACOUNT_ID\" #change it to REF ?\n\nfunctions:\n  authorizer:\n    handler: handler.authorizer\n    environment:\n      SNS_AUTHREP_ARN: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleAuthRepAsync\"\n  authRepAsync:\n    handler: handler.authRepAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleAuthRepAsync\"\n  getToken:\n    handler: oauth.getToken\n    events:\n      - http:\n          path: oauth/token\n          method: post\n    environment:\n      SNS_OAUTH_SYNC_ARN: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n  storeInCacheAsync:\n    handler: oauth.storeInCacheAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n  storeOnThreescaleAsync:\n    handler: oauth.storeOnThreescaleAsync\n    events:\n      - sns: \"arn:aws:sns:${self:provider.region}:${self:custom.AWS_ACCOUNTID}:${opt:stage, self:provider.stage}-${self:service}-threescaleCacheTokenAsync\"\n"]},{"id":100981199,"files":["service: boldleads-serverless-aws-lambda-mysql-boilerplate\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n\tvpc:\n\t\tsecurityGroupIds:\n\t\t\t- sg-1034ad6b\n\t\tsubnetIds:\n      - subnet-66246b01\n      - subnet-ca926291\n      - subnet-f07117b9\nplugins:\n  - serverless-webpack\ncustom:\n  - webpackIncludeModules: true\nfunctions:\n  read:\n    handler: handler.read\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":116940946,"files":["service: azure-beer-store\n\ncustom:\n  dbName: beerstore\n  collectionName: beer_list\n  storageAccountName: beerstore\n  containerName: blobs\n\nprovider:\n  name: azure\n  location: westeurope\n  environment:\n    DB_NAME: ${self:custom.dbName}\n    DB_COLLECTION_NAME: ${self:custom.collectionName}\n    DB_HOST: ${file(./serverless.env.yml):DB_HOST}\n    DB_KEY: ${file(./serverless.env.yml):DB_KEY}\n    BLOB_STORAGE_CONNECTION_STRING: ${file(./serverless.env.yml):BLOB_STORAGE_CONNECTION_STRING}\n    CONTAINER_NAME: ${self:custom.containerName}\n\nplugins:\n  - serverless-azure-functions\n\nfunctions:\n  graphql:\n    handler: api.graphql\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n          methods:\n            - GET\n          authLevel: anonymous\n          route: graphql\n  import:\n    handler: blob.import\n    events:\n      - blob:\n        x-azure-settings:\n          name: item\n          path: ${self:custom.containerName}/{name}.csv\n          connection: BLOB_STORAGE_CONNECTION_STRING\n"]},{"id":175357822,"files":["# Update your service name here\nservice: &service\n  name: serverless-graphql-boilerplate\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\n# plugins\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  service: *service\n  stages:\n    - local\n    - development\n    - production\n  # default stage/environment\n  defaultStage: local\n  # default AWS region\n  defaultRegion: us-east-1\n  # config file / region / stage\n  configFile: ${file(./config/${opt:region,self:provider.region}/${self:provider.stage}.yml)}\n  # webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  # dynamodb local config\n  # https://github.com/99xt/serverless-dynamodb-local\n  dynamodb:\n    # only in local\n    stages:\n      - local\n    start:\n      port: 8000\n      inMemory: true\n      # create the table after each restart\n      migrate: true\n      # seed the data as well\n      seed: true\n    seed:\n      test:\n        sources:\n          - table: ${self:provider.stage}-example-table\n            sources: [./seed/example.json]\n\n# package\npackage:\n  individually: true\n\n# aws provider\nprovider:\n  name: aws\n  # common runtime for all functions\n  runtime: nodejs8.10\n  # cloudformation stack name\n  stackName: ${self:provider.stage}-${self:custom.service.name}-stack\n  # API gateway Name\n  apiName: ${self:provider.stage}-${self:custom.service.name}-api\n  # Deployment bucket name\n  # This bucket will created using terraform\n  # see {AWS_ACCOUNT}/common/deployable-package-store/{REGION}\n  deploymentBucket:\n    name: ${self:custom.configFile.serverless.deploymentBucket}\n  # The S3 prefix under which deployed artifacts should be stored.\n  deploymentPrefix: ${self:provider.stage}/serverless\n  # stage/environment (development|testing|staging|production) default is development\n  stage: ${opt:stage, self:custom.defaultStage}\n  # aws region\n  region: ${opt:region, self:custom.defaultRegion}\n  # aws profiles\n  profile: ${self:custom.configFile.aws.profile}\n  # AWS lambda configuration\n  # common memory size for all functions\n  memorySize: 128\n  # common timeout for all functions\n  timeout: 30\n  # lambda role\n  # This will be created using cloudformation\n  # see resources section\n  role: lambdaRole\n  # Environment variables to AWS lambda (global)\n  environment:\n    ENVIRONMENT: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    DEBUG_ENABLED: ${self:custom.configFile.debug.enabled}\n    DYNAMODB_LOCAL_ENDPOINT: http://localhost:${self:custom.dynamodb.start.port}\n  # AWS cloudwatch configuration\n  logRetentionInDays: 14\n  # VPC configuration for lambda\n  vpc: ${self:custom.configFile.aws.vpc}\n  # Tagging\n  stackTags:\n    Environment: ${self:provider.stage}\n    Project: ${self:custom.service.name}\n  # Common Tags for AWS lambda functions\n  tags:\n    Environment: ${self:provider.stage}\n    Project: ${self:custom.service.name}\n\n# functions\nfunctions:\n  graphql:\n    handler: functions/graphql.handler\n    name: ${self:provider.stage}-${self:custom.service.name}-function\n    description: ${self:custom.service.name} - Apollo graphql server (${self:provider.stage})\n    tags:\n      Name: ${self:provider.stage}-${self:custom.service.name}-function\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get\n        cors: true\n\n# AWS resources used in this stack apart from functions\n# These resources will be part cloudformation stack\nresources:\n  # dynamodb table\n  - ${file(src/aws-resources/dynamodb-table.yml)}\n  # Lambda Role\n  - ${file(src/aws-resources/lambda-role.yml)}\n"]},{"id":84700389,"files":["# Welcome to Serverless!\n\nservice: serverless-slack-memebot # NOTE: update this with your service name\n\nframeworkVersion: \">1.8.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  timeout: 20\n\nplugins:\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n # include:\n #   - include-me.js\n #   - include-me-dir/**\n exclude:\n   - src/**\n   - package-lock.json\n\nfunctions:\n  # Handler for our /memebot command\n  memebot_slash_command:\n    handler: dist/functions/memebot_slash_command.handler\n    events:\n     - http:\n         path: memebot\n         method: post\n"]},{"id":94370753,"files":["service: ttn-post-adapter\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  index:\n    handler: handler.dispatch\n    events:\n      - http:\n          path: rename\n          method: post\n      - http:\n          path: opensensors\n          method: post\n      - http:\n          path: slicingdice\n          method: post\n      - http:\n          path: pyroclast\n          method: post\n      - http:\n          path: adafruit\n          method: post\n"]},{"id":97630818,"files":["service: services\n\n# Pin your service to only deploy with a specific Serverless version\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\ncustom:\n  # Use the stage CLI option if it exists, if not, use the default stage\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  versionFunctions: false # Optional function versioning\n  # Service defaults\n  stage: dev\n  region: us-east-1\n  # Service env variables\n  environment: ${file(serverless-${self:custom.stage}.env.yml)}\n\nfunctions:\n  function1:\n    handler: service1/handler.handle\n    environment: ${file(service1/serverless-${self:custom.stage}.env.yml)}\n  function2:\n    handler: service2/handler.handle\n"]},{"id":107271526,"files":["service: serverless-starter-app\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 60\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  serverless-offline:\n    port: 3001\n    babelOptions:\n      presets: [\"env\"]\n  webpackIncludeModules:\n    packagePath: './package.json'\n"]},{"id":100319189,"files":["service: serverless-nodejs-auth\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: dev\n  profile: ypur-aws-profile\n  memorySize: 512\n  timeout: 60\n  environment: ${file(env-${self:custom.stage}.yml):environment}\n\n\npackage:\n  include:\n    - src/**\n  exclude:\n    - tmp/**\n    - .git/*\n    - node_modules/**\n    - .coverage/**\n    - tests/**\n    - .jsconfig\n    - .travis.yml\n\nfunctions:\n  login:\n    handler: src/auth/login.handler\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  publicEndpoint:\n    handler: src/auth/endpoint.publicEndpoint\n    events:\n      - http:\n          path: publicEndpoint\n          method: get\n          cors: true\n\n  privateEndpoint:\n    handler: src/auth/endpoint.privateEndpoint\n    events:\n      - http:\n          path: privateEndpoint\n          method: get\n          cors: true\n          authorizer: authorizer          \n\n  authorizer:\n    handler: src/auth/authorizer.handler\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n"]},{"id":152843532,"files":["service: serverless-terraform-variables-example\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-terraform-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${terraform:aws_profile}\n  region: ${terraform:aws_region}\n  deploymentBucket: ${terraform:serverless_bucket}\n\nfunctions:\n  ping:\n    handler: handler.endpoint\n    vpc:\n      subnetIds:\n        — ${terraform:ping_subnet_id}\n    events:\n      - http:\n          path: ping\n          method: get\n"]},{"id":142079991,"files":["service: lilium\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  usagePlans:\n    throttle:\n      burstLimit: 50\n      rateLimit: 80\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nresources:\n  Resources:\n#    GraphQLPostLambdaFunction:\n#      Type: AWS::Lambda::Function\n\nfunctions:\n  GraphQLPost:\n    handler: src/function-handlers/graphql.handle\n    events:\n    - http:\n        path: /graphql\n        method: post\n        cors: true\n  GraphQLPlayground:\n    handler: src/function-handlers/graphql.handle\n    events:\n    - http:\n        path: /graphql\n        method: get\n        cors: true\n"]},{"id":106253060,"files":["# Welcome to Serverless!\n#\n\nservice: scalingRDS\n\ncustom:\n  MasterEndpoint: \"${env:MasterEndpoint}\"\n  HostedZoneId: \"${env:HostedZoneId}\"\n  RecordName: \"${env:RecordName}\"\n  ReplicaEndpoint: \"${env:ReplicaEndpoint}\"\n  InstanceIdentifier: \"${env:InstanceIdentifier}\"\n  InstanceClassSmall: \"${env:InstanceClassSmall}\"\n  InstanceClassBig: \"${env:InstanceClassBig}\"\n  NotificationSNS: \"${env:NotificationSNS}\"\n  MsgError: \"${env:MsgError}\"\n  MsgRoutingToMaster: \"${env:MsgRoutingToMaster}\"\n  MsgRoutingToReplica: \"${env:MsgRoutingToReplica}\"\n  MsgScaleUp: \"${env:MsgScaleUp}\"\n  MsgScaleDown: \"${env:MsgScaleDown}\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: \"${env:ENVIRONMENT}\"\n  region: \"${env:AWS_REGION}\"\n  environment:\n    NotificationSNS: \"${self:custom.NotificationSNS}\"\n    MsgError: \"${self:custom.MsgError}\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"route53:ChangeResourceRecordSets\"\n      Resource: \"arn:aws:route53:::hostedzone/${self:custom.HostedZoneId}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"rds:ModifyDBInstance\"\n      Resource: \"arn:aws:rds:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:db:${self:custom.InstanceIdentifier}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"SNS:Publish\"\n      Resource: \"${self:custom.NotificationSNS}\"\n\nfunctions:\n  routingToMaster:\n    handler: route53.changeRecord\n    environment:\n      Msg: \"${self:custom.MsgRoutingToMaster}\"\n      HostedZoneId: \"${self:custom.HostedZoneId}\"\n      RecordName: \"${self:custom.RecordName}\"\n      RecordValue: \"${self:custom.MasterEndpoint}\"\n    events:\n      - schedule: cron(00 08 ? * TUE,THU *)\n      - schedule: cron(00 15 ? * TUE,THU *)\n\n  scaleUp:\n    handler: rds.scale\n    environment:\n      Msg: \"${self:custom.MsgScaleUp}\"\n      InstanceIdentifier: \"${self:custom.InstanceIdentifier}\"\n      InstanceClass: \"${self:custom.InstanceClassBig}\"\n    events:\n      - schedule: cron(05 08 ? * TUE,THU *)\n\n  scaleDown:\n    handler: rds.scale\n    environment:\n      Msg: \"${self:custom.MsgScaleDown}\"\n      InstanceIdentifier: \"${self:custom.InstanceIdentifier}\"\n      InstanceClass: \"${self:custom.InstanceClassSmall}\"\n    events:\n      - schedule: cron(05 15 ? * TUE,THU *)\n\n  routingToReplica:\n    handler: route53.changeRecord\n    environment:\n      Msg: \"${self:custom.MsgRoutingToReplica}\"\n      HostedZoneId: \"${self:custom.HostedZoneId}\"\n      RecordName: \"${self:custom.RecordName}\"\n      RecordValue: \"${self:custom.ReplicaEndpoint}\"\n    events:\n      - schedule: cron(15 08 ? * TUE,THU *)\n      - schedule: cron(15 15 ? * TUE,THU *)\n"]},{"id":122729376,"files":["service: IotaProxy\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-2\n\nfunctions:\n  attHandler:\n    handler: AttHandler.handler\n    #5 mins, hopefully enough for PoW\n    timeout: 300"]},{"id":98403540,"files":["service: aws-python3 # NOTE: update this with your service name\n\nplugins:\n  - serverless-custom-packaging-plugin\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      path: ./src\n      artifact: src.zip\n      libs: ./libs\n\n"]},{"id":131112120,"files":["service:\n  name: serverless-polly\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:s3:::\"\n            - Ref : AudioBucket\n            - \"/*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:ListStreams\"\n      Resource:\n        - 'Fn::Join':\n          - ':'\n          -\n            - 'arn:aws:dynamodb'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'Fn::Join':\n              - \"\"\n              - \n                - 'table/'\n                - Ref: PollyTable\n    - Effect: \"Allow\"\n      Action:\n        - \"polly:*\"\n      Resource: \"*\"\n\nfunctions:\n  getpost:\n    handler: getpost.main\n    description: Gets posts from dynamodb\n    events:\n      - http:\n          method: get\n          path: /\n          integration: lambda\n          cors: true\n          request:\n            passThrough: WHEN_NO_MATCH\n            parameters:\n              querystrings:\n                postId: true\n            template:\n              application/json: '{ \"postId\" : \"$input.params(''postId'')\" }'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n    environment:\n      tableName:\n        Ref: PollyTable\n  newpost:\n    handler: newpost.main\n    description: Adds new posts to dynamodb\n    events:\n      - http:\n          method: post\n          path: /\n          integration: lambda\n          cors: true\n          request:\n            passThrough: WHEN_NO_MATCH\n            template:\n              application/json: ''\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n    environment:\n      tableName:\n        Ref: PollyTable\n  convertaudio:\n    handler: convertaudio.main\n    description: Converts text to mp3 voices throught Polly\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 1\n          arn:\n            Fn::GetAtt:\n              - PollyTable\n              - StreamArn\n    environment:\n      tableName:\n        Ref: PollyTable\n      audioBucket:\n        Ref: AudioBucket\n      region: ${self:provider.region}\n\nresources:\n  Resources:\n    PollyTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    StaticBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    AudioBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n"]},{"id":129658093,"files":["service: bundlewatch-service\nframeworkVersion: '=1.47.0'\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-domain-manager\n  - serverless-offline # must be last\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  storeTable: '${self:service}-store-table-${self:custom.stage}'\n  dynamodb:\n    start:\n      port: 8000\n      migrate: true\n      inMemory: true\n  githubClientId:\n    dev: '04fcf325dd26ca2a159f'\n    stage: '04fcf325dd26ca2a159f'\n    prod: '04fcf325dd26ca2a159f'\n  githubClientSecret:\n    dev: ${env:GITHUB_CLIENT_SECRET}\n    stage: ${env:GITHUB_CLIENT_SECRET}\n    prod: ${env:GITHUB_CLIENT_SECRET}\n  customDomain:\n    domainName: service.bundlewatch.io\n    basePath: ''\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs8.10\n  memorySize: 512\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"StoreTable\", \"Arn\" ] }\n  environment:\n    STORE_TABLE: ${self:custom.storeTable}\n    GITHUB_CLIENT_ID: ${self:custom.githubClientId.${self:custom.stage}}\n    GITHUB_CLIENT_SECRET: ${self:custom.githubClientSecret.${self:custom.stage}}\n\nfunctions:\n  expressRouter:\n    handler: src/router/index.app\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /store\n          method: post\n      - http:\n          path: /store/lookup\n          method: post\n      - http:\n          path: /setup-github\n          method: get\n      - http:\n          path: /results\n          method: get\n      - http:\n          path: /static/results-styles.css\n          method: get\n      - http:\n          path: /static/setup-github-styles.css\n          method: get\n      - http:\n          path: /analyze\n          method: post\n\n\n\nresources:\n  Resources:\n    StoreTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: repo\n            AttributeType: S\n          -\n            AttributeName: repoBranch\n            AttributeType: S\n          -\n            AttributeName: timestamp\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: repo\n            KeyType: HASH\n          -\n            AttributeName: repoBranch\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          -\n            IndexName: timestamp\n            KeySchema:\n                -\n                    AttributeName: repo\n                    KeyType: HASH\n                -\n                    AttributeName: timestamp\n                    KeyType: RANGE\n            Projection:\n                ProjectionType: KEYS_ONLY\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.storeTable}\n"]},{"id":85559476,"files":["service: smsbot\n\nprovider:\n  name: openwhisk\n\ncustom: \n  credentials: ${file(credentials.yml)}\n\nfunctions:\n  incoming:\n    handler: handler.incoming\n    parameters:\n      numbers: ${self:custom.credentials.numbers}\n      slack: ${self:custom.credentials.slack}\n    annotations:\n      web-export: true\n  reply:\n    handler: handler.reply\n    parameters:\n      twilio: ${self:custom.credentials.twilio}\n    annotations:\n      web-export: true\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":177639517,"files":["org: johnbelisle\napp: serverless-ddns\nservice: serverless-ddns \n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n  logs:\n    restApi: true\n  tracing:\n    apiGateway: true\n    lambda: true\n\n\ncustom:\n  config: ${file(config.prod.json)} \n  myStage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: ${self:custom.config.apiDomainName}\n    # stage: \n    # basePath: api\n    certificateName: '${self:custom.config.apiDomainName}'\n    createRoute53Record: true\n    endpointType: 'edge'  \n\nplugins:\n  - serverless-domain-manager\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  echo-ip:\n    handler: src/echoip.handler\n    role: basicLambdaRole\n    memorySize: 128\n    events:\n      - http:\n          path: /\n          method: GET\n  update-home-dns:\n    handler: src/updateHomeDNS.handler\n    role: lambdaUpdateRoute53Role\n    memorySize: 128\n    environment:\n      DNS_HOST_NAME: ${self:custom.config.ddnsHostName}\n      TOPIC_ARN: ${self:custom.config.notificationTopicARN}\n    events:      \n      - http:\n          path: /      \n          method: POST\n          authorizer:\n            type: aws_iam                     \nresources:\n  Resources:    \n    basicLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: BasicLambdaRoleServerlessDDNS\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole        \n        Policies:\n          - PolicyName: BasicLambdaRoleLoggingPolicy\n            PolicyDocument:            \n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:logs:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":log-group:/aws/lambda/*:*\"]]}\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                  Resource:\n                    - \"*\"                  \n    lambdaUpdateRoute53Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: UpdateLambdaRoleServerlessDDNS\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole        \n        Policies:\n          - PolicyName: UpdateRoute53LambdaRolePolicy\n            PolicyDocument:            \n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:logs:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":log-group:/aws/lambda/*:*\"]]}\n                - Effect: Allow\n                  Action:\n                    - route53:ListHostedZones\n                    - route53:ChangeResourceRecordSets\n                    - route53:ListResourceRecordSets\n                  Resource:\n                    - \"*\"\n                - Effect: Allow\n                  Action:\n                    - sns:Publish\n                    - sns:Subscribe\n                  Resource: arn:aws:sns:us-east-1:197556904653:NotifyMe\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                  Resource:\n                    - \"*\"\n    InvokeUpdateHomeDDNSAPIPolicy:\n      Type: \"AWS::IAM::ManagedPolicy\"\n      Properties:\n        Description: \"Policy for allowing invoke access to the updateHomeDDNS secured API\"\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Action: execute-api:Invoke\n            Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:execute-api:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":\",{\"Ref\":\"ApiGatewayRestApi\"},\"/*\"]]}\n    APIUser:\n      Type: \"AWS::IAM::User\"\n      Properties:\n        ManagedPolicyArns:\n          - { \"Ref\": \"InvokeUpdateHomeDDNSAPIPolicy\" }\n        UserName: update-homeddns-api-user    \n    MockResource:\n      Type: AWS::ApiGateway::Resource\n      Properties:\n        ParentId:\n          Fn::GetAtt:\n            - ApiGatewayRestApi # our default Rest API logical ID\n            - RootResourceId\n        PathPart: favicon.ico # the endpoint in your API that is set as proxy\n        RestApiId:\n          Ref: ApiGatewayRestApi\n    MockMethod:\n      Type: AWS::ApiGateway::Method\n      Properties:\n        AuthorizationType: None\n        HttpMethod: GET\n        ResourceId:\n          Ref: MockResource\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        MethodResponses:\n          - StatusCode: 200\n        Integration:\n          RequestTemplates:\n            application/json: |\n              {\"statusCode\": 200}\n          Type: MOCK\n          IntegrationResponses:\n            - ResponseTemplates:\n                application/json: ''\n              StatusCode: 200        "]},{"id":139242080,"files":["service: serverless-apollo-datasource-dynamodb\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  profile: ${opt:stage}\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: ${opt:region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n  environment:\n    SERVERLESS_PROJECT: serverless-apollo-datasource-dynamodb\n    SERVERLESS_STAGE: ${opt:stage}\n    SERVERLESS_REGION: ${opt:region}    \n    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR\n    # SLS_DEBUG: true\nplugins:\n  - serverless-dynamodb-local\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4200\n  webpackIncludeModules: true\n  dynamodb:\n    noStart: false\n    start:\n      # host: localhost\n      port: 8000\n      sharedDb: true\n      migrate: true\n      seed: false\n\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get\n        cors: true       \n\n\nResources:\n  psqTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Delete\n    Properties:\n      TableName: psq\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: 1\n        WriteCapacityUnits: 1"]},{"id":143346303,"files":["service: tf-lambda-datesync\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  daySync:\n    handler: handler.daySync\n    environment:\n      INTERVAL: 7 # How many days you want to list\n      TIMEZONE: 'America/Los_Angeles' # Change it to yours\n      FORM_ID: 'vHQqGp' # Which form you want to update\n      FIELD_ID: 'LUyMJ1pzi7fW' # Which field\n      TF_TOKEN: 'CubiPWHvnC1bVrkcWysjMCTYxdq9ypd2n8pfdBny3H2u' #Typeform API token\n      EXCLUDE_WEEKENDS: true\n    events:\n      - schedule: cron(01 0 * * ? *) #every day at 00:01am\n"]},{"id":91324385,"files":["service: robin\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-southeast-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ecr:*\"\n      Resource: \"*\"\n\nfunctions:\n  cleanupImages:\n    handler: handler.cleanupImages\n    environment:\n      REPO_NAMES: ${env:REPO_NAMES}\n      AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}\n      DRY_RUN: ${env:DRY_RUN, 'true'}\n      ECR_REGION: ${env:ECR_REGION, 'us-east-1'}\n      SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}\n    timeout: 45\n    events:\n      - schedule: rate(1 day)\n"]},{"id":95963131,"files":["service: outlook-google-sync\n\ncustom:\n  host_zone: ''\n  custom_domain: ''\n  certificate_arn: ''\n  outlook_redirect_path: 'outlook/authorize'\n  google_redirect_path: 'google/authorize'\n  outlook_login_path: 'outlook/login'\n  google_login_path: 'google/login'\n  outlook_scope: 'openid,offline_access,Calendars.Read'\n  google_scope: 'https://www.googleapis.com/auth/calendar'\n  outlook_client_key: 'config/users/=USER=/client/outlook.json'\n  outlook_token_key: 'config/users/=USER=/token/outlook.json'\n  google_client_key: 'config/users/=USER=/client/google.json'\n  google_token_key: 'config/users/=USER=/token/google.json'\n  user_info_key: 'config/users/=USER=/info.json'\n  attendees_key: 'config/attendees.json'\n  processed_events_key: 'cache/events.json'\n  user_home_key: 'config/users/'\n  sync_days: 14\n  home_bucket: 'outlook-google-sync-stg'\n  outlook_client_id: ''\n  outlook_client_secret: ''\n  google_client_id: ''\n  google_client_secret: ''\n  token_key: ''\n  email_address: ''\n  email_password: ''\n  stageVariables:\n    home_bucket: ${self:custom.home_bucket}\n    attendees_key: ${self:custom.attendees_key}\n    user_info_key: ${self:custom.user_info_key}\n    google_client_key: ${self:custom.google_client_key}\n    google_token_key: ${self:custom.google_token_key}\n    outlook_client_key: ${self:custom.outlook_client_key}\n    outlook_token_key: ${self:custom.outlook_token_key}\n    user_home_key: ${self:custom.user_home_key}\n    outlook_login_path: ${self:custom.outlook_login_path}\n    google_login_path: ${self:custom.google_login_path}\n    token_key: ${self:custom.token_key}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: stg\n  region: ap-northeast-2\n  timeout: 30\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:Put*\"\n        - \"s3:GetObject\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"sqs:*\"\n      Resource: \"*\"\n\nfunctions:\n  outlookLogin:\n    handler: app.login\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.outlook_redirect_path}\n      scope: ${self:custom.outlook_scope}\n      client_key: ${self:custom.outlook_client_key}\n    events:\n      - http:\n          path: ${self:custom.outlook_login_path}\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  outlookAuthorize:\n    handler: app.authorize\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.outlook_redirect_path}\n      scope: ${self:custom.outlook_scope}\n      client_key: ${self:custom.outlook_client_key}\n      token_key: ${self:custom.outlook_token_key}\n    events:\n      - http:\n          path: ${self:custom.outlook_redirect_path}\n          method: get\n          cors: true\n          private: false\n  googleLogin:\n    handler: app.login\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.google_redirect_path}\n      scope: ${self:custom.google_scope}\n      client_key: ${self:custom.google_client_key}\n    events:\n      - http:\n          path: ${self:custom.google_login_path}\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  googleAuthorize:\n    handler: app.authorize\n    timeout: 15\n    environment:\n      redirect_path: ${self:custom.google_redirect_path}\n      scope: ${self:custom.google_scope}\n      client_key: ${self:custom.google_client_key}\n      token_key: ${self:custom.google_token_key}\n    events:\n      - http:\n          path: ${self:custom.google_redirect_path}\n          method: get\n          cors: true\n          private: false\n  addAttendee:\n    handler: app.add_attendee\n    timeout: 15\n    events:\n      - http:\n          path: add/attendee\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  deleteAttendee:\n    handler: app.delete_attendee\n    timeout: 15\n    events:\n      - http:\n          path: delete/attendee\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  userLogin:\n    handler: app.login_user\n    timeout: 15\n    events:\n      - http:\n          path: user/login\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  getUserConfig:\n    handler: app.get_user_config\n    timeout: 15\n    events:\n      - http:\n          path: user/config\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  saveUserConfig:\n    handler: app.save_user_config\n    timeout: 15\n    events:\n      - http:\n          path: user/config\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  resetPassword:\n    handler: app.reset_password\n    timeout: 15\n    events:\n      - http:\n          path: user/password/reset\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  addUser:\n    handler: app.add_user\n    timeout: 15\n    environment:\n      outlook_client_id: ${self:custom.outlook_client_id}\n      outlook_client_secret: ${self:custom.outlook_client_secret}\n      google_client_id: ${self:custom.google_client_id}\n      google_client_secret: ${self:custom.google_client_secret}\n    events:\n      - http:\n          path: add/user\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - email-token\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n          private: false\n  refreshOutlookToken:\n    handler: app.refresh_token \n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      user_home_key: ${self:custom.user_home_key}\n      client_key: ${self:custom.outlook_client_key}\n      token_key: ${self:custom.outlook_token_key}\n    events:\n      - schedule: rate(30 minutes)\n  refreshGoogleToken:\n    handler: app.refresh_token \n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      user_home_key: ${self:custom.user_home_key}\n      client_key: ${self:custom.google_client_key}\n      token_key: ${self:custom.google_token_key}\n    events:\n      - schedule: rate(30 minutes)\n  syncEvents:\n    handler: app.sync_events\n    environment:\n      home_bucket: ${self:custom.home_bucket}\n      processed_events_key: ${self:custom.processed_events_key}\n      user_home_key: ${self:custom.user_home_key}\n      user_info_key: ${self:custom.user_info_key}\n      src_token_key: ${self:custom.outlook_token_key}\n      tgt_token_key: ${self:custom.google_token_key}\n      attendees_key: ${self:custom.attendees_key}\n      sync_days: ${self:custom.sync_days}\n      email_address: ${self:custom.email_address}\n      email_password: ${self:custom.email_password}\n    events:\n      - schedule: rate(60 minutes)\nresources:\n  Resources:\n    OutlookLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    OutlookAuthorizeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GoogleLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GoogleAuthorizeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    AddAttendeeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    DeleteAttendeeLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    UserLoginLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    GetUserConfigLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    SaveUserConfigLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    ResetPasswordLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    AddUserLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    RefreshOutlookTokenLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    RefreshGoogleTokenLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    SyncEventsLogGroup:\n      Properties:\n        RetentionInDays: \"1\"\n    HomeS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.home_bucket}\n    myDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.certificate_arn}\n        DomainName: ${self:custom.custom_domain}\n    myMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      Properties:\n        BasePath: ${self:provider.stage}\n        DomainName:\n          Ref: myDomainName\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Stage: ${self:provider.stage}\n    myDNSRecord:\n      Type: AWS::Route53::RecordSet\n      Properties:\n        HostedZoneName: ${self:custom.host_zone}\n        Comment: DNS name for ebot.\n        Name: ${self:custom.custom_domain}\n        Type: CNAME\n        TTL: 300\n        ResourceRecords:\n          - Fn::GetAtt:\n            - myDomainName\n            - DistributionDomainName\nplugins:\n  - serverless-webpack\n  - serverless-plugin-stage-variables\n"]},{"id":164284342,"files":["service: my-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello","service: my-service\nprovider:\n  name: aws\n  runtime: nodejs10.x\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n    - http: GET hello"]},{"id":157554237,"files":["service: cloudfront-invalidate-dist\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime, 'nodejs10.x'}\n  memorySize: 128\n  timeout: 30\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"codepipeline:PutJobFailureResult\"\n        - \"codepipeline:PutJobSuccessResult\"\n        - \"cloudfront:CreateInvalidation\"\n      Resource: \"*\"\n\nfunctions:\n  invalidate:\n    handler: handler.handler\n"]},{"id":158203926,"files":["service: ynab-stock-update\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  timeout: 5\n  versionFunctions: false\n  environment:\n    YNAB_API_TOKEN: ${file(serverless.env.yml):YNAB_API_TOKEN, env:YNAB_API_TOKEN}\n    AUTOMATIC_APPROVAL: ${file(serverless.env.yml):AUTOMATIC_APPROVAL, env:AUTOMATIC_APPROVAL}\n\ncustom:\n  alerts:\n    topics:\n      alarm:\n        topic: ${self:service}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: ${file(serverless.env.yml):ALARM_EMAIL, env:ALARM_EMAIL}\n    definitions:\n      functionErrors:\n        period: 86400 # 1 day\n        treatMissingData: notBreaching\n    alarms:\n      - functionErrors\n\nfunctions:\n  ynab-stock-update:\n    handler: src/index.run\n    events:\n      - schedule: cron(0 23 ? * 2-6 *)\n\nplugins:\n  - serverless-plugin-aws-alerts\n","# YNAB personal access token: https://app.youneedabudget.com/settings/developer\nYNAB_API_TOKEN:\n\n# Should the newly created balance transactions be automatically approved?\nAUTOMATIC_APPROVAL: true\n\n# If the serverless function starts throwing errors - what email should be notified?\nALARM_EMAIL: john@example.com\n"]},{"id":118740512,"files":["service: opsgenie-slack-unfurling\n\ncustom:\n\n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n  # The api key you get from OpsGenie API Integration (enable restrict access to configuration when possible)\n  opsgenie_api_key: \"PasteYourOpsGenieAPIKey\"\n\n    # Slack token you received when you install the internal integration\n  slack_access_token: \"PasteYourAccessTokenAfterYouInstallYourAppAndDeployAgain\"\n\n    # Verification token\n  slack_verification_token: \"PasteYourSlackVerificationToken\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n#  region: us-west-2\n#  profile: dev\n  memorySize: 512\n  timeout: 4\n  environment:\n    OPSGENIE_API_KEY: ${self:custom.opsgenie_api_key}\n    SLACK_VERIFICATION_TOKEN: ${self:custom.slack_verification_token}\n    SLACK_ACCESS_TOKEN: ${self:custom.slack_access_token}\n\nfunctions:\n  OpsGenieAlertUnfluring:\n    name: opsgenie-slack-alert-unfurling\n    description: Unfurl your alerts from OpsGenie\n    handler: handler.unfurl\n    events:\n      - http:\n                path: slack-opsgenie-alert-unfluring\n                method: post\n                integration: lambda\n                response:\n                  template: $input.path('$')"]},{"id":91036107,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-plg-xprt-endpoints-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-export-endpoints\n\ncustom:\n  exportEndpoints:\n    path: './endpoints.json'\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-plg-xprt-endpoints-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-export-endpoints\n\ncustom:\n  exportEndpoints:\n    path: './endpoints.json'\n  myDomain: \"api.mydomain.com\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n\nresources:\n  Resources:\n    APICertificate:\n      Type: \"AWS::CertificateManager::Certificate\"\n      DeletionPolicy: Retain\n      Properties:\n        DomainName: \"${self:custom.myDomain}\"\n    APIDomain:\n      Type: \"AWS::ApiGateway::DomainName\"\n      Properties:\n        CertificateArn:\n          Ref: APICertificate\n        DomainName: \"${self:custom.myDomain}\"\n    APIBasePathMapping:\n      Type: \"AWS::ApiGateway::BasePathMapping\"\n      Properties:\n        DomainName:\n          Ref: APIDomain\n        RestApiId:\n          Ref: ApiGatewayRestApi\n  Outputs:\n    CustomServiceEndpoint:\n      Value: \"https://${self:custom.myDomain}\"\n"]},{"id":120091209,"files":["service: serverless-nodejs-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n         path: hello\n         method: get\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack: ./webpack.config.js\n"]},{"id":80010316,"files":["# Service name\nservice: slackmonitor\n\n# AWS details\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n  deploymentBucket: nuk-tnl-editorial-prod-serverless-deployments\n\n# Lambda functions\nfunctions:\n  slackmonitor:\n    # Entry point\n    handler: src/handler.handler\n    # Function triggers\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: post\n          path: /\n    # Env vars (from a separate env file)\n    environment:\n      CLIENT_ID: ${file(env.yml):CLIENT_ID}\n      CLIENT_SECRET: ${file(env.yml):CLIENT_SECRET}\n      REDIRECT_URI: ${file(env.yml):REDIRECT_URI}\n"]},{"id":163331142,"files":["service: excalibur\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512 # uses ~250MB from testing\n  timeout: 29 # limited by api gateway, hard limit is 29s\n  logRetentionInDays: 7\n  region: ap-southeast-1\n  \nplugins:\n- serverless-webpack\n\ncustom:\n  webpack:\n    includeModules: true\n\nfunctions:\n  excalibur:\n    handler: src/index.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n"]},{"id":106929098,"files":["service:\n  name: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  stage: ${opt:stage, file(./config/output.yml):stage}\n  region: ${opt:region, file(./config/output.yml):region}\n\n  environment:\n    # MY_KMS_SECRET: ${self:custom.kmsSecrets.secrets.foo}\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    SERVERLESS_PROJECT: ${self:service}\n\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:*\n    Resource: arn:aws:dynamodb:*:*:table/${self:custom.my_table}\n\n\n\n  # # Enable the following IAM permissions for using KMS\n  # - Effect: Allow\n  #   Action:\n  #     - KMS:Decrypt\n  #   Resource: ${self:custom.kmsSecrets.keyArn}\n\n  # Enable the following IAM permissions for using VPC Discovery\n  # - Effect: Allow\n  #   Action:\n  #     - ec2:CreateNetworkInterface\n  #     - ec2:DescribeNetworkInterfaces\n  #     - ec2:DeleteNetworkInterfaces\n\n\nplugins:\n  # - serverless-vpc-discovery\n  # - serverless-domain-manager\n  - serverless-aws-documentation\n  - serverless-kms-secrets\n  - serverless-jest-plugin\n  - dynalite\n  - serverless-webpack\n  # - serverless-dynamodb-local\n  - serverless-offline\n\n\ncustom:\n  config: ${file(./config/output.yml)}\n  stage: ${opt:stage, self:custom.config.stage}\n  vpc_env: ${opt:vpc_env, self:custom.config.vpc_env}\n  prefix: ${self:custom.stage}-${self:service}\n  my_table: ${self:custom.config.db.tables.table}-${self:custom.stage}\n\n  # preTestCommands:\n  #   - bash .tools/startOffline.sh\n  # postTestCommands:\n  #   - bash .tools/stopOffline.sh\n\n  webpackIncludeModules: true\n\n  serverless-jest-plugin:\n    functionTemplate: config/templates/function-template.ejs\n    testTemplate: config/templates/test-template.ejs\n\n  # # For the serverless-kms-secrets plugin\n  # serverless-kms-secrets:\n  #   secretsFile:\n  #   secretsFile: kms2-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml # (optional)\n  # kmsSecrets: ${file(kms-secrets2.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}\n\n  # # For the serverless-domain-manager plugin\n  # customDomain:\n  #   basePath: ${opt:stage, self:custom.stage}\n  #   domainName: ${self:custom.config.domain.domainName}\n  #   stage: ${opt:stage, self:custom.stage}\n  #   # certificateName:\n  #   # createRoute53Record: true\n\n  # For the serverless-vpc-discovery plugin\n  # vpc:\n  #   vpcName: '${self:custom.stage}'\n  #   subnetNames:\n  #     - '${self:custom.stage}_NAME_OF_SUBNET'\n  #   securityGroupNames:\n  #     - '${self:custom.stage}_NAME_OF_SECURITY_GROUP'\n\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n\n  # customDomain:\n  #   basePath: ${self:custom.stage}\n  #   domainName: boilerplate.foo.com\n  #   stage: ${self:custom.stage}\n  #   certificateName: # default: determined using domain name\n  #   createRoute53Record: true # default: true\n\n  documentation:\n    api:\n      info:\n        ${file(docs/info.yml)}\n    tags:\n      - name: MyTag\n        description: This is my tag\n    resources:\n      - path: '/health'\n        description: 'Endpoint to see if the serverless app is working'\n      - path: '/hello'\n        description: 'Joyful greeting by your Serverless Application'\n    models:\n      ${file(docs/models.yml)}\n\n\n\nfunctions:\n  health:\n    handler: handler.health\n    events:\n      - http:\n          method: get\n          path: health\n          cors: true\n          documentation:\n            ${file(src/health.doc.yml)}\n\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          cors: true\n          documentation:\n            ${file(src/hello.doc.yml)}\n\n  error400:\n    handler: handler.error400\n    events:\n      - http:\n          method: get\n          path: error\n          cors: true\n          documentation:\n            ${file(src/error400.doc.yml)}\n\n  # kms:\n  #   handler: handler.kms\n  #   events:\n  #     - http:\n  #         method: get\n  #         path: kms\n\n\nresources:\n  Resources:\n    serverlessBoilerplateTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.my_table}\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":97376923,"files":["service: ns-backup\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${file(./env.yml):region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"S3BucketBackup\" } ] ]  }\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"S3BucketBackup\" }, \"/*\" ] ]  }\n\nfunctions:\n  backup:\n    handler: handler.backup\n    timeout: 300\n    environment: ${file(./env.yml):lambda}\n    events:\n      - schedule: rate(1 day)\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    S3BucketBackup:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(./env.yml):lambda.s3Bucket}\n  Outputs:\n    S3BucketBackup:\n      Description: S3 backup bucket arn\n      Value:\n         \"Fn::GetAtt\": [ S3BucketBackup, Arn ]\n\n"]},{"id":96679600,"files":["service: {{serviceName}}\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: default\n  region: eu-west-1\n  timeout: 20\n  stage: ${opt:stage}\n  environment:\n    STAGE: ${self:provider.stage}\n\nfunctions:\n  api:\n    name: ${self:service}-${self:provider.stage}\n    description: ${self:service} - ${self:provider.stage}\n    handler: server-lambda.handler\n    events:\n      - http:\n         path: /\n         method: get\n      - http:\n         path: /{proxy+}\n         method: get"]},{"id":121290661,"files":["service: consultaplaca\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 6\n  # stage: dev\n  region: us-east-1\n  #profile: devProfile # https://serverless.com/framework/docs/providers/aws/guide/credentials#using-aws-profiles\n  # environment:\n  #   HTTP_PROXY: http://191.7.192.143:8080\n\nfunctions:\n  placa:\n    handler: handler.consultaPlaca\n    events:\n      - http:\n          method: GET\n          path: placa/{placa}\n          cors:\n            origin: \"*\"\n\npackage:\n  exclude:\n    - .git/**\n    - .serverless/**\n    - .DS_Store\n    - placas/**\n    - README.md\n    - \"*.png\"\n    - LICENSE.md\n    - Makefile\n    - package.json\n    - yarn.lock\n\nplugins:\n  - serverless-offline\n"]},{"id":132957180,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-nodejs\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":130523290,"files":["service: contactless\n\nframeworkVersion: \">=1.1.0 < 2.0.0\"\n#plugins:\n#  - serverless-domain-manager\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  basestackname: contact\n\n  domainname: ${ssm:/${self:custom.basestackname}/domainName}\n  hostname: ${ssm:/${self:custom.basestackname}/apiHostName}\n  acmarn: ${ssm:/${self:custom.basestackname}/apiAcmArn}\n\n  #customDomain:\n  #    domainName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    certificateName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    createRoute53Record: attribute\n  #    endpointType: regional\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n  environment:\n    STAGE: ${self:custom.stage}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n\n\nfunctions:\n  contactus:\n    handler: handler.handle\n    tags:\n      created: serverless for Contact Us\n      Name: contact for serverless\n\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n\nresources:\n  Resources:\n\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: ContactlessServiceEndpoint\n","service: tms\n\nframeworkVersion: \">=1.1.0 < 2.0.0\"\n#plugins:\n#  - serverless-domain-manager\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  extra: ${file(serverless-${self:custom.stage}.json)}\n  basestackname: tmsbase\n\n  domainname: ${ssm:/${self:custom.basestackname}/domainName}\n  hostname: ${ssm:/${self:custom.basestackname}/apiHostName}\n  acmarn: ${ssm:/${self:custom.basestackname}/apiAcmArn}\n\n  #customDomain:\n  #    domainName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    certificateName: tms-${self:custom.stage}-api.${self:custom.domainname}\n  #    createRoute53Record: attribute\n  #    endpointType: regional\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n  environment:\n    STAGE: ${self:custom.stage}\n    DYNAMODB_TABLE: {Ref: MainDB}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - Ref: MainDB\n            - \"*\"\n\n\nfunctions:\n  mainapi:\n    handler: resthandler.handle\n    tags:\n      created: serverless for Customer REST API\n      Name: REST Customer  Lambda Function\n\n    events:\n      - http:\n          path: /{ObjectType}\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /{ObjectType}\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n      - http:\n          path: /{ObjectType}\n          method: delete\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n      - http:\n          path: /{ObjectType}\n          method: put\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n\nresources:\n  Resources:\n    MainDB:\n      Type: 'AWS::DynamoDB::Table'\n      #DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: ObjectType\n            AttributeType: S\n          - AttributeName: Id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: ObjectType\n            KeyType: HASH\n          - AttributeName: Id\n            KeyType: RANGE\n        Tags:\n          - Key: \"Created\"\n            Value: \"part of TMS API SLS stack\"\n          - Key: \"Name\"\n            Value: \"TMS Main Serverless DB\"\n        #ProvisionedThroughput: ${self:custom.extra.DynamoCapacity}\n        ProvisionedThroughput: { \"ReadCapacityUnits\": \"1\", \"WriteCapacityUnits\": \"1\"}\n\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: TMSCustomerServiceEndpoint\n"]},{"id":87992774,"files":["service: nib-batman \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    GITHUB_SECRET: ${env:GITHUB_SECRET}\n    BRANCH_KEY: slice\n\n  region: ap-southeast-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"*\"\n      Resource: \"*\"\n\nfunctions:\n  cleanupStacks:\n    handler: handler.cleanupStacks\n    timeout: 45\n    events:\n      - schedule: rate(1 day)\n  cleanupBranch:\n    handler: branch.delete\n    timeout: 45\n    events:\n      - http:\n          path: branch/delete\n          method: post\n  dryRun:\n    handler: dryRun.test\n    timeout: 45\n    events:\n      - http: \n          path: dryRun\n          method: get\n\nresources: \n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Batman\n        AttributeDefinitions:\n          - AttributeName: Date\n            AttributeType: S\n          - AttributeName: StackName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: StackName\n            KeyType: HASH\n          - AttributeName: Date\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":85499068,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-mongo-boilerplate # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  new:\n    handler: handler.new\n    events:\n     - http:\n          path: new\n          method: post\n          cors: true\n  view:\n    handler: handler.view\n    events:\n     - http:\n          path: view\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":137323302,"files":["service: shopify-webhook-api\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:stage}\n  region: ${env:region}\n  accountId: ${env:accountId}\n  stackTags:\n      project: \"Shopify Webhook API\"\n      name: \"ShopifyWebhookAPI\"\n  versionFunctions: false\n  cfLogs: true\n  environment:    \n    region: ${env:region}\n    stage: ${env:stage}\n    logLevel: ${env:logLevel}   \n    shopifySecret: ${env:shopifySecret}\nfunctions:\n  webhook-api:\n    handler: api.handler\n    name: api-${self:provider.stage}\n    description: The API used by the Shopify Webhook\n    memorySize: 128\n    timeout: 30\n    events:      \n      - http:\n          path: webhook-api\n          method: post\n          integration: lambda-proxy"]},{"id":136727247,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: stiva\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # https://serverless.com/framework/docs/providers/aws/guide/variables/#referencing-cli-options\n  environment:\n    AWS_REGION: ${opt:aws-region}\n    DYNAMO_OPTIONS: ${opt:dynamo-options}\n    S3_OPTIONS: ${opt:s3-options}\n    SES_OPTIONS: ${opt:ses-options}\n    SITE_HEADER: ${opt:site-header}\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: eu-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  usersGet:\n    handler: users.get\n    events:\n      - http:\n          path: /users\n          method: get\n  usersPost:\n    handler: users.post\n    events:\n      - http:\n          path: /users\n          method: post\n  contentsGet:\n    handler: contents.get\n    events:\n      - http:\n          path: /contents\n          method: get\n  contentsPost:\n    handler: contents.post\n    events:\n      - http:\n          path: /contents\n          method: post\n  uploadsPost:\n    handler: uploads.post\n    events:\n      - http:\n          path: /uploads\n          method: post\n  uploadsGet:\n    handler: uploads.get\n    events:\n      - http:\n          path: /uploads\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n### https://serverless.com/framework/docs/providers/aws/guide/variables/\n\n\nplugins:\n  - serverless-offline\n"]},{"id":97892221,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice:\n  name: email-service\n  description: 'A service that sends out emails.'\n\ncustom:\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${self:custom.currentStage}\n  region: ${self:custom.currentRegion}\n  environment:\n    MAILGUN_APIKEY: ${file(./config.${self:custom.currentStage}.json):MAILGUN_APIKEY}\n    MAILGUN_DOMAIN: ${file(./config.${self:custom.currentStage}.json):MAILGUN_DOMAIN}\n\nfunctions:\n  send:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: email\n          method: post\n"]},{"id":115739034,"files":["# Serverless deployment config\nservice: fingperint-ninja\n\n# Bundle our handlers with webpack for ES6 support\nplugins:\n  - serverless-webpack\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: false\n    packager: 'npm'\n\n# AWS env variables\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource: 'arn:aws:dynamodb:eu-west-2:859976271487:table/fingerprint-ninja'\n\n# Function scaffolding\nfunctions:\n  fp:\n    handler: fp.submit\n    events:\n      - http:\n          path: submit\n          method: post\n          cors:\n            origin: 'https://fingerprint.ninja'\n            # `*` wildcard for 'Access-Control-Allow-Headers' unsupported by some common browsers\n            # headers:\n            #   - '*'\n            allowCredentials: false\n"]},{"id":83700436,"files":["service: square-the-circle\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  stats:\n    handler: dist/index.handler\n    events:\n      - schedule: cron(0 9 ? * 2 *)\n"]},{"id":136742044,"files":["service: express-sls-app-with-stitch\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  app:\n    handler: server.run\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":154864247,"files":["# Serverless - Box Skills AWS Lambda deployment config\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Service and provider configuration\nservice: government-id-skill\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n  environment:\n     ASSURE_ID_ENDPOINT: https://services.assureid.net\n     ASSURE_ID_USERNAME: CHANGE_ME\n     ASSURE_ID_PASSWORD: CHANGE_ME\n     ASSURE_ID_SUBSCRIPTION_ID: CHANGE_ME\n# Environment Variables\n\n\n# Function Configuration\nfunctions:\n  index:\n    handler: index.handler\n    runtime: nodejs8.10\n    timeout: 60\n    events:\n      - http:\n          method: POST\n          path: government-id-skill\n          cors: true\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-redact-skill-demo\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10 # server should still acknowledge Box skills engine within 10 seconds of receiving the event\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# packaging information\npackage:\n  include:\n    - index.js\n    - package.json\n    - node_modules\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: exiftool-metainfo-extraction\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10 # server should still acknowledge Box skills engine within 10 seconds of receiving the event\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# packaging information\npackage:\n  include:\n    - index.js\n    - skills-kit-2.0.js\n    - package.json\n    - node_modules\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","service: HiveCustomSkill\nprovider:\n  name: aws\n  runtime: nodejs8.10  \n  region: us-east-1\n\nfunctions:\n  index:\n    handler: index.handler\n    name: HiveCustomSkill\n    runtime: nodejs8.10\n    timeout: 120\n    events:\n      - http:\n          method: POST\n          path: HiveCustomSkill\n          cors: true\n    environment:\n      HIVE_API_ENDPOINT: YOUR_HIVE_API_ENDPOINT\n      HIVE_API_KEY: YOUR_HIVE_API_KEY","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-google-image\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-east-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    GCV_PROJECT_ID: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    GCV_PRIVATE_KEY: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    GCV_CLIENT_EMAIL: ADD_YOUR_GOOGLE_CREDENTIALS_HERE\n    SKILL_FILE_SIZE_LIMIT_MB: '10'\n    SKILL_ACCEPTED_FORMATS: 'ai,bmp,gif,eps,heic,jpeg,jpg,png,ps,psd,svg,tif,tiff,dcm,dicm,dicom,svs,tga'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'jpg,jpeg,png,gif,bmp,webp,ico'\n\n# packaging information\npackage:\n  artifact: ./gcv-image-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-image\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 30 # attached to API Gateway so it's automatically limited to 30 seconds.\n  versionFunctions: true # maintains past versions in single deployment\n\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    AMS_DEPLOYMENT_LOCATION: ${opt:location, 'westus2'}\n    MICROSOFT_KEY: ADD_YOUR_KEY_HERE\n    SKILL_FILE_SIZE_LIMIT_MB: '4'\n    SKILL_ACCEPTED_FORMATS: 'ai,bmp,gif,heic,jpeg,jpg,png,ps,psd,svg,tif,tiff,dcm,dicm,dicom,svs,tga'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'jpeg,jpg,png,gif,bmp,tif'\n\n\n\n# packaging information\npackage:\n  artifact: ./ams-image-nodejs.zip\n\nfunctions:\n  skill:\n    handler: intrinsic.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: google-product-search-integration\n\n# You can change this to any cloud provider:\n# AWS Lambda: <https://aws.amazon.com/lambda/>\n# Microsoft Azure: <https://azure.microsoft.com/en-us/overview/serverless-computing/>\n# Google Cloud Functions: <https://cloud.google.com/functions/>\n# IBM Cloud Functions: <https://www.ibm.com/cloud/functions/details>\n#\n# before you deploy your app, you should set credential with the follow cmd:\n# serverless config credentials --provider aws --key $AWS_KEY$ --secret $AWS_SECRET$ -o\nprovider:\n  name: google\n  runtime: nodejs8\n  project: YOUR_PROJECT_NAME\n  # the path to the credentials file needs to be absolute\n  credentials: ./privatekey.json\n  environment:\n     PROJECT_ID: CHANGE_ME\n     LOCATION: CHANGE_ME\n     SET_ID: CHANGE_ME\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: skills\n    events:\n      - http: path"]},{"id":140316995,"files":["service: clairy-hub\n\n##################\n## Provider\n##################\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  environment:\n    FIREBASE_DATABASE_URL:\n\n  package:\n    include:\n      - auth/**\n\n\n##################\n## Functions\n##################\n\nfunctions:\n  authorizer:\n    handler: auth/authorizer.handler\n\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: 'hello'\n          method: 'get'\n          authorizer:\n            name: authorizer\n\n\n##################\n## Plugins\n##################\n\nplugins:\n  - serverless-offline\n"]},{"id":111042743,"files":["service: url-shorter\n\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: x.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":137588614,"files":["service: carbon\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-central-1:*:*\"\n\nfunctions:\n  put:\n    handler: handler.put\n    events:\n      - http:\n          method: PUT\n          path: carbon/{id}\n          cors: true\n  sum:\n    handler: handler.sum\n    events:\n      - http:\n          method: GET\n          path: carbon\n          cors: true\n  one:\n    handler: handler.one\n    events:\n      - http:\n          method: GET\n          path: carbon/{id}\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          method: DELETE\n          path: carbon/{id}\n          cors: true\nresources:\n  Resources:\n    CarbonDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'carbon'\n"]},{"id":205576931,"files":["service: sls-migrate-plugin-example\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DATABASE_NAME: content\ncustom:\n  migrate:\n    store: .migrate2\n    lastRunIndicator: <\n    noDescriptionText: '?'\n    ignoreMissing: true\n    dateFormat: \"yyyy-MM-dd hh:mm:ssZ\"\n    templateFile: \"my-project-template.js\"\n    # fileExtension: .ss  # Uncomment to check it will not work\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  - serverless-migrate-plugin\n"]},{"id":144879197,"files":["---\nservice: serverless-graphql-neo4j\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, self:custom.defaultRegion}\n  deploymentBucket: ${self:service}-artefacts-${self:provider.region}\n  environment:\n    # for mapping prod config to env_var when deploy the service\n    NEO4J_URI: ${env:NEO4J_URI_PROD}\n    NEO4J_USER: ${env:NEO4J_USER_PROD}\n    NEO4J_PASSWORD: ${env:NEO4J_PASSWORD_PROD}\n\nfunctions:\n  graphql:\n    handler: src/server.default\n    memorySize: 256\n    events:\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: post\n          cors: true\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: get\n          cors: true\n\nplugins:\n  - serverless-plugin-create-deployment-bucket\n  - serverless-dotenv-plugin  # for loading .env in local dev\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultRegion: 'eu-west-1'\n  webpack:\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":117652204,"files":["service:\n  name: {{ projectName }}-{{ serviceName }}\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 16\n  environment: ${file(./env.yml):${self:provider.stage}}\npackage:\n  exclude:\n    - '*.js'\n    - '*.yml'\n  include:\n    - handler.js\n  excludeDevDependencies: false\nfunctions:\n  {{ functionName }}:\n    handler: handler.{{ functionName }}\n    events:\n      - http:\n          path: {{ httpPath }}\n          method: {{ httpMethod }}\n"]},{"id":134262630,"files":["service: user-api # NOTE: update this with your service name\n\n#Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n# Provider \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, \"prod\"}\n  region: eu-west-1\n  environment:\n    SERVICE_NAME: ${self:service}\n\n# you can add statements to the Lambda function's IAM Role here\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:eu-west-1:*:table/user_${opt:stage, \"prod\"}\n# Function\nfunctions:\n  create:\n    handler: user_create.main\n    name: ${self:provider.stage}-user_create\n    events:\n      - http:\n          path: create\n          method: post\n          cors: true\n          # authorizer: aws_iam\n  view:\n    handler: user_view.main\n    name: ${self:provider.stage}-user_view\n    events:\n      - http:\n          path: view/{id}\n          method: get\n          cors: true\n          # authorizer: aws_iam\n\n  update:\n    handler: user_update.main\n    name: ${self:provider.stage}-user_update\n    events:\n      - http:\n          path: update/{id}\n          method: post\n          cors: true\n          # authorizer: aws_iam\n\n  delete:\n    handler: user_delete.main\n    name: ${self:provider.stage}-user_delete\n    events:\n      - http:\n          path: delete/{id}\n          method: delete\n          cors: true\n          # authorizer: aws_iam\n# Resources\nresources:\n  Resources:\n    userTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: user_${opt:stage, \"prod\"}\n        AttributeDefinitions:\n          - AttributeName: userid\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1  \n        SSESpecification:\n          SSEEnabled: true\n"]},{"id":144787765,"files":["service: ${file(./../../constants.yml):NAME}-example-service\n\n# endpoints\nfunctions:\n  exampleCreate:\n    handler: handler.exampleCreate\n    events:\n      - http:\n          path: example\n          method: post\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleCreate-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleGet:\n    handler: handler.exampleGet\n    events:\n      - http:\n          path: example/{id}\n          method: get\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleGet-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleList:\n    handler: handler.exampleList\n    events:\n      - http:\n          path: example\n          method: get\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleList-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleUpdate:\n    handler: handler.exampleUpdate\n    events:\n      - http:\n          path: example/{id}\n          method: put\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleUpdate-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleDelete:\n    handler: handler.exampleDelete\n    events:\n      - http:\n          path: example/{id}\n          method: delete\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleDelete-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n\n# config\nprovider:\n  name: aws\n  runtime: ${file(./../../constants.yml):NODE_VERSION}\n  stage: ${opt:stage, 'dev'}\n  role: ${file(./../../serverless.env.yml):AWS_ROLE}\n  memorySize: ${file(./../../constants.yml):AWS_MEMORY}\n  timeout: ${file(./../../constants.yml):AWS_TIMEOUT}\n  vpc:\n    securityGroupIds:\n      - ${file(./../../serverless.env.yml):VPC_SECURITY}\n    subnetIds:\n      - ${file(./../../serverless.env.yml):VPC_SUBNET1}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET2}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET3}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET4}\n  apiGateway:\n    restApiId: ${file(./../../serverless.env.yml):AWS_API_ID_${self:custom.environments.${self:provider.stage}}}\n    restApiRootResourceId: ${file(./../../serverless.env.yml):AWS_API_ROOT_ID_${self:custom.environments.${self:provider.stage}}}\n  environment:\n    STAGE: ${self:provider.stage}\n    DB_HOST: ${file(./../../serverless.env.yml):DB_HOST}\n    DB_USER: ${file(./../../serverless.env.yml):DB_USER}\n    DB_PASS: ${file(./../../serverless.env.yml):DB_PASS}\n    DB_NAME: ${file(./../../serverless.env.yml):DB_NAME}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  environments:\n    dev: DEV\n    prod: PROD\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'npm'\n"]},{"id":220884837,"files":["# Welcome to Serverless!\nservice: serverless-example\napp: product-api\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n\nfunctions:\n  productAPI:\n    handler: Controller/products.handler\n    events:\n        - http:\n            path: /index\n            method: get\n\n\n        - http:\n            path: /\n            method: post\n\n\n        - http:\n            path: /\n            method: get\n\n        - http:\n            path: /{productId}\n            method: get\n\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n"]},{"id":225934508,"files":["# This deploys a completely independent stack for Cognito \r\n#  resources required in the Exostack Serverless Self-Service Portal\r\n#   - this should be deployed before other application services stacks\r\n#   - exports the Cognito UserPool ID and AppClient ID\r\n\r\nservice: exostack-backend-Cognito\r\n\r\ncustom:\r\n  UserPoolName: Exostack_User_Pool\r\n  WebAppClientName: Exostack_User_Pool_WebAppClient\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs10.x\r\n  stage: ${opt:stage, 'dev'}\r\n  region: ${file(../envs/${self:provider.stage}.yml):region}\r\n  profile: ${file(../envs/${self:provider.stage}.yml):profile}\r\n  deploymentBucket: ${file(../envs/${self:provider.stage}.yml):deploymentBucket}\r\n\r\nresources:\r\n  Description: Cognito resources in Serverless stack for the Exostack Self-Service Portal\r\n\r\n  Resources:\r\n    # Cognito - User pool\r\n    CognitoUserPoolAppUsers:\r\n      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html\r\n      Type: AWS::Cognito::UserPool\r\n      Properties:\r\n        # UserPoolName: ${file(../envs/${self:provider.stage}.yml):CognitoUserPoolName}-${self:provider.stage}\r\n        UserPoolName: ${self:custom.UserPoolName}-${self:provider.stage}\r\n        EmailVerificationSubject: Your verification code for the Exostack Self-Service Portal\r\n        EmailVerificationMessage: Your verification code is {####}.   Please sign-in to the Exostack Self-Service Portal using the password provided by your Admin.\r\n        MfaConfiguration: OFF #OPTIONAL\r\n        UsernameAttributes:\r\n          - email\r\n        AutoVerifiedAttributes:\r\n          - email\r\n        Schema:\r\n          - Name: email\r\n            AttributeDataType: String\r\n            Mutable: true # required attributes are always writeable\r\n            Required: true\r\n          - Name: given_name\r\n            AttributeDataType: String\r\n            Mutable: true\r\n            Required: true\r\n          - Name: family_name\r\n            AttributeDataType: String\r\n            Mutable: true\r\n            Required: true\r\n          - Name: tenantId\r\n            AttributeDataType: String\r\n            Mutable: true\r\n            Required: false # custom attributes cannot be required\r\n          - Name: appRole\r\n            AttributeDataType: String\r\n            Mutable: true\r\n            Required: false # custom attributes cannot be required\r\n          - Name: userTags\r\n            AttributeDataType: String\r\n            Mutable: true\r\n            Required: false # custom attributes cannot be required\r\n\r\n    # Cognito - Client\r\n    CognitoUserPoolAppClient:\r\n      Type: AWS::Cognito::UserPoolClient\r\n      Properties:\r\n        ClientName: ${self:custom.WebAppClientName}-${self:provider.stage}\r\n        UserPoolId:\r\n          Ref: CognitoUserPoolAppUsers\r\n\r\n  Outputs:\r\n    UserPoolId:\r\n      Value:\r\n        Ref: CognitoUserPoolAppUsers\r\n      Export:\r\n        Name: CognitoUserPoolAppUsers-Name-${self:provider.stage}\r\n\r\n    UserPoolClientId:\r\n      Value:\r\n        Ref: CognitoUserPoolAppClient\r\n      Export:\r\n        Name: CognitoUserPoolAppClient-Id-${self:provider.stage}\r\n","# Welcome to Serverless!\n# For full config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/\n# Happy Coding!\n\nservice: exostack-backend\n\nprovider:\n  name: aws\n  runtime: nodejs10.x \n  stage: ${opt:stage, 'dev'}\n  region: ${file(../envs/${self:provider.stage}.yml):region}\n  profile: ${file(../envs/${self:provider.stage}.yml):profile}\n  deploymentBucket: ${file(../envs/${self:provider.stage}.yml):deploymentBucket}\n  \n  endpointType: REGIONAL\n  versionFunctions: true\n  logRetentionInDays: 14 \n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:Query\n        - dynamodb:Scan\n      Resource:\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.UsersDDBTableName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.UsersDDBTableName}/index/${self:custom.env.UsersDDBTenantIndexName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.TenantsDDBTableName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.CloudsDDBTableName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.CloudsDDBTableName}/index/${self:custom.env.CloudsDDBTenantIndexName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.WorkflowsDDBTableName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.WorkflowsDDBTableName}/index/${self:custom.env.WorkflowsDDBTenantIndexName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.WorkflowsDDBTableName}/index/${self:custom.env.WorkflowsDDBInstanceIndexName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.WorkflowRequestsDDBTableName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.WorkflowRequestsDDBTableName}/index/${self:custom.env.WorkflowRequestsDDBTenantIndexName}\n        - arn:#{AWS::Partition}:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.SchedulesDDBTableName}\n    - Effect: Allow\n      Action:\n        - sts:AssumeRole\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - pricing:DescribeServices\n        - pricing:GetAttributeValues\n        - pricing:GetProducts\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - apigateway:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - states:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\" \n\n  apiKeys: # List of API keys to be used by your service API Gateway REST API\n    - LFW_Admin_ApiKey-${self:provider.stage}\n  usagePlan:\n    quota:\n      limit: 50000\n      period: DAY\n      # offset: 1\n    # throttle:\n    #   burstLimit: 200\n    #   rateLimit: 100\n  apiGateway:\n    apiKeySourceType: HEADER\n\n  # you can define service wide environment variables here\n  environment: ${self:custom.env}\n\nfunctions:\n\n  authorizerFunc:\n    handler: authFunc.handler\n    memorySize: 128\n    timeout: 10\n\n  userConfirmationTrigger:\n    handler: cognito.userConfirmationTrigger\n    memorySize: 128\n    timeout: 10\n    # events:\n    #   - cognitoUserPool:\n    #       pool: AppUsers\n    #       trigger: PostConfirmation\n    #       existing: true\n\n  workspaces:\n    handler: workspaces.handler\n    memorySize: 256\n    timeout: 30\n    events:\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workspaces\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workspaces/{workspaceId}\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - workspaceId\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workspaces/{workspaceId}/{action}\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - workspaceId\n                - action\n          authorizer: ${file(authorizer.yml):authorizer}\n\n  workflow:\n    handler: workflow.handler\n    memorySize: 512\n    timeout: 20\n    events:\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows/params/resourceTypes\n          private: false\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows/params/{resourceType}\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - resourceType\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workflows/params/EC2/validate\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workflows/params/WorkSpaces/validate\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows/{workflowId}\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - workflowId\n              # querystrings:\n              #   details: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows/instances/{instanceId}\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - instanceId\n              # querystrings:\n              #   details: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workflows\n          private: false\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: PATCH\n          path: clouds/{accountId}/regions/{region}/workflows\n          private: false\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: DELETE\n          path: clouds/{accountId}/regions/{region}/workflows\n          private: false\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/workflows/requests\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workflows/requests\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/workflows/requests/pricing\n          private: false\n          cors: true\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n          authorizer: ${file(authorizer.yml):authorizer}\n\n  workflowTasks:\n    handler: workflow.tasks\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: GET\n          path: workflows/requests/{requestId}/{action} #?responseToken={taskToken}\n          private: false\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                responseToken: true\n              paths:\n                # - accountId\n                # - region\n                - requestId\n                - action\n          # authorizer: ${file(authorizer.yml):authorizer}\n\n  registration:\n    handler: registration.handler\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: POST\n          path: registration/tenant\n          private: false\n          cors: true\n      - http:\n          method: POST\n          path: registration/connectclouds\n          request:\n            parameters:\n            querystrings:\n                test: true\n          private: false\n          cors: true\n      - http:\n          method: POST\n          path: registration/connectclouds/auth\n          request:\n            parameters:\n              querystrings:\n                test: true\n                mode: true\n          private: false\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: registration/cancel\n          private: false\n          cors: true\n\n  whatsmyip:\n    handler: handler.whatsmyip\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: GET\n          path: whatsmyip\n          cors: true\n\n  modifyInstance:\n    handler: handler.modifyInstance\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: GET\n          path: clouds\n          # integration: lambda\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: DELETE\n          path: clouds/{accountId}\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n          request:\n            parameters:\n              paths:\n                - accountId\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/s3Buckets\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/instances\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n      - http:\n          method: POST\n          path: clouds/{accountId}/regions/{region}/instances/{instanceId}/{action}\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - instanceId\n                - action\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n\n  modifyAccess:\n    handler: handler.modifyAccess\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/vpn/list/{username}\n          request:\n            parameters:\n              paths:\n                - username\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n\n  cleanupAccess:\n    handler: handler.cleanupAccess\n    memorySize: 128\n    timeout: 10\n    events:\n      - schedule:\n          rate: rate(5 minutes)\n          name: cleanup-all-vpn-access-ingress-rules-${self:provider.stage}\n          description: 'removes expired ingress rules from VPN whitelist Security groups'\n          enabled: true\n          input:\n            cleanup: true\n\n  modifyUser:\n    handler: userHandler.modifyUser\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          method: GET\n          path: subscription\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: users\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: GET\n          path: /users/{username}/tags\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n          request:\n            parameters:\n              paths:\n                - username\n      - http:\n          method: POST\n          path: /users/{username}/tags\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n          request:\n            parameters:\n              paths:\n                - username\n      - http:\n          method: POST\n          path: users/create\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n      - http:\n          method: POST\n          path: users/auth\n          # private: true\n          cors: true\n      - http:\n          method: POST\n          path: users/status\n          # private: true\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n\n  scavenger:\n    handler: scheduler.scavenger\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [ SchedulesDDBTable , StreamArn ]\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n\n  schedules:\n    handler: scheduler.handler\n    events:\n      - http:\n          method: GET\n          path: clouds/{accountId}/regions/{region}/schedules/{objectKey}/{resourceType}\n          request:\n            parameters:\n              paths:\n                - accountId\n                - region\n                - objectKey\n                - resourceType\n          cors: true\n          authorizer: ${file(authorizer.yml):authorizer}\n\nstepFunctions:\n  stateMachines:\n    WorkflowApprovalStateMachine: ${file(approval.yml):approval} \n\npackage:\n  include: # add any package dependencies here\n    - '!**/node_modules/aws-sdk'\n    - ./node_modules/date-fns #/**\n    - ./node_modules/is-ip #/**\n    - ./node_modules/ip-regex #/**\n    - ./node_modules/uuid #/**\n    - ./node_modules/shortid #/**\n    - ./node_modules/nanoid #/**\n    - ./node_modules/jsonpath #/**\n    - ./node_modules/underscore #/**\n    - ./node_modules/esprima #/**\n    - ./node_modules/static-eval #/**\n    - ./node_modules/escodegen #/**\n    - ./node_modules/estraverse #/**\n    - ./node_modules/esutils #/**\n    - ./node_modules/optionator #/**\n    - ./node_modules/source-map #/**\n    - ./node_modules/node-jose #/**\n    - ./node_modules/base64url #/**\n    - ./node_modules/es6-promise #/**\n    - ./node_modules/lodash #/**\n    - ./node_modules/long #/**\n    - ./node_modules/node-forge #/**\n    - ./node_modules/uuid #/**\n  individually: false\n  excludeDevDependencies: true \n\nplugins:\n  - serverless-jetpack\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n  - serverless-offline-scheduler\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  env:   \n    CognitoUserPoolID: us-east-1_ZSsnz2Wiq  # TO BE UPDATED AFTER COGNITO STACK DEPLOYMENT\n    EmailSenderAddress: noreply@domain #email address to use. Make sure to add to SES and verify\n    CognitoUserPoolRegion: us-east-1 #desired region\n    \n    usagePlanId: ''\n    protocol: tcp\n    durationHours: 1\n    TagNameVPNWhitelistSG: Exostack_VPNWhitelistSG\n    TagNameVPNWhitelistSGInstance: VPNWhitelistSGInstance\n    AdminKey: ADMINKEY\n    UsersDDBTableName: PortalUsers-${self:provider.stage}\n    UsersDDBTenantIndexName: PortalUsers-tenantID-index-${self:provider.stage}\n    TenantsDDBTableName: PortalTenants-${self:provider.stage}\n    CloudsDDBTableName: PortalClouds-${self:provider.stage}\n    CloudsDDBTenantIndexName: PortalClouds-tenantId-index-${self:provider.stage}\n    WorkflowsDDBTableName: PortalWorkflows-${self:provider.stage}\n    WorkflowsDDBTenantIndexName: PortalWorkflows-tenantId-index-${self:provider.stage}\n    WorkflowsDDBInstanceIndexName: PortalWorkflows-instanceId-index-${self:provider.stage}\n    WorkflowRequestsDDBTableName: PortalWorkflowRequests-${self:provider.stage}\n    WorkflowRequestsDDBTenantIndexName: PortalWorkflowRequests-tenantId-index-${self:provider.stage}\n    SchedulesDDBTableName: PortalSchedules-${self:provider.stage}\n    WorkflowApprovalStateMachineARN: ${self:resources.Outputs.WorkflowApprovalStateMachineArn.Value}\n    ApprovalMailLinksValidityHrs: 120\n    ApiGatewayBaseURL: \n      Fn::Join:\n          - \"\"\n          - - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}\"\n    # MAX_INBOUND_RULES_PER_SG: 6 # 60\n    # AWS_REGION_DEVTEST: ${self:provider.region}\n\n# you can add CloudFormation resource templates here\nresources:\n  Description: Serverless stack for the Exostack Self-Service Portal\n\n  Outputs:\n    ApiGatewayUsagePlanID:\n      Description: 'Usage plan ID'\n      Value:\n        Ref: ApiGatewayUsagePlan\n    WorkflowApprovalStateMachineArn:\n      Description: 'ARN of the workflow approval state machine'\n      Value:\n        Ref: WorkflowApprovalStateMachine\n    ApprovalWorkflowTaskManagerArn:\n      Description: 'ARN of the workflow task manager Lambda function'\n      Value:\n        Ref: WorkflowTasksLambdaFunction\n\n  Resources:\n    # Approval Workflow State-machine Role\n    ApprovalStateMachineRole:\n      Type: AWS::IAM::Role\n      Properties: \n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Action: sts:AssumeRole\n              Effect: Allow\n              Principal:\n                Service: states.${self:provider.region}.amazonaws.com\n        Path: /\n        Policies:\n        - \n          PolicyName: exostack-backend-prod1-statemachine-${self:provider.stage}-${self:provider.region}\n          PolicyDocument:\n            Statement:\n            - Action: lambda:InvokeFunction\n              Effect: Allow\n              Resource: '*'\n\n    # DynamoDb Tables\n    UsersDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.UsersDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: username\n            AttributeType: S\n          - AttributeName: tenantID\n            AttributeType: S\n          # - AttributeName: apiKey\n          #   AttributeType: S\n        KeySchema:\n          - AttributeName: username\n            KeyType: HASH\n          # - AttributeName: apiKey\n          #   KeyType: RANGE\n        GlobalSecondaryIndexes: \n          - IndexName: ${self:custom.env.UsersDDBTenantIndexName}\n            KeySchema: \n              - AttributeName: tenantID\n                KeyType: HASH\n            Projection: \n              ProjectionType: ALL \n        BillingMode: PAY_PER_REQUEST\n        SSESpecification: \n          SSEEnabled: true\n    TenantsDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.TenantsDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: tenantId\n            AttributeType: S\n          # - AttributeName: apiKey\n          #   AttributeType: S\n        KeySchema:\n          - AttributeName: tenantId\n            KeyType: HASH\n          # - AttributeName: apiKey\n          #   KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n        SSESpecification: \n          SSEEnabled: true\n    CloudsDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.CloudsDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: tenantId\n            AttributeType: S\n          - AttributeName: accountId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: tenantId\n            KeyType: HASH\n          - AttributeName: accountId\n            KeyType: RANGE\n        GlobalSecondaryIndexes: \n          - IndexName: ${self:custom.env.CloudsDDBTenantIndexName}\n            KeySchema: \n              - AttributeName: tenantId\n                KeyType: HASH\n            Projection: \n              ProjectionType: ALL \n        BillingMode: PAY_PER_REQUEST\n        SSESpecification:\n          SSEEnabled: true\n    WorkflowsDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.WorkflowsDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: tenantId\n            AttributeType: S\n          - AttributeName: workflowId\n            AttributeType: S\n          - AttributeName: instanceId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: tenantId\n            KeyType: HASH\n          - AttributeName: workflowId\n            KeyType: RANGE\n        GlobalSecondaryIndexes: \n          - IndexName: ${self:custom.env.WorkflowsDDBTenantIndexName}\n            KeySchema: \n              - AttributeName: tenantId\n                KeyType: HASH\n            Projection: \n              ProjectionType: ALL \n          - IndexName: ${self:custom.env.WorkflowsDDBInstanceIndexName}\n            KeySchema: \n              - AttributeName: tenantId\n                KeyType: HASH\n              - AttributeName: instanceId\n                KeyType: RANGE\n            Projection: \n              ProjectionType: ALL \n        BillingMode: PAY_PER_REQUEST\n        SSESpecification: \n          SSEEnabled: true\n    WorkflowRequestsDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.WorkflowRequestsDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: workflowId # tenantId\n            AttributeType: S\n          - AttributeName: workflowRequestId\n            AttributeType: S\n          - AttributeName: tenantId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: workflowId\n            KeyType: HASH\n          - AttributeName: workflowRequestId\n            KeyType: RANGE\n        GlobalSecondaryIndexes: \n          - IndexName: ${self:custom.env.WorkflowRequestsDDBTenantIndexName}\n            KeySchema: \n              - AttributeName: tenantId\n                KeyType: HASH\n            Projection: \n              ProjectionType: ALL \n        BillingMode: PAY_PER_REQUEST\n        SSESpecification: \n          SSEEnabled: true\n    SchedulesDDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.env.SchedulesDDBTableName}\n        AttributeDefinitions:\n          - AttributeName: contextKey\n            AttributeType: S\n          - AttributeName: objectKey\n            AttributeType: S\n          # - AttributeName: expirationTime\n          #   AttributeType: N\n        KeySchema:\n          - AttributeName: contextKey\n            KeyType: HASH\n          - AttributeName: objectKey\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n        SSESpecification: \n          SSEEnabled: true\n        TimeToLiveSpecification:\n          AttributeName: expirationTime\n          Enabled: true\n        StreamSpecification:\n          StreamViewType: OLD_IMAGE \n","# Welcome to Serverless!\r\n# For full config options, check the docs:\r\n#    docs.serverless.com\r\n# Happy Coding!\r\n\r\nservice: lambda-firewall-web\r\n\r\ncustom:\r\n  client:\r\n    distributionFolder: dist\r\n    indexDocument: index.html\r\n    errorDocument: index.html\r\n    bucketName: inputS3bucketName #update bucket name for website deploy\r\n\r\nplugins:\r\n    - serverless-finch\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs8.10\r\n  stage: ${opt:stage, 'dev'}\r\n  region: ${opt:region, 'us-east-1'}\r\n  # profile: # update profile-name if used\r\n\r\npackage: \r\n  exclude:\r\n    - node_modules\r\n"]},{"id":183636024,"files":["service:\n  name: lambda-prerender-service\n\nframeworkVersion: \">=1.6.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage,'dev'}\n  region: eu-north-1\n  memorySize: 2048\n  timeout: 20\n  versionFunctions: false\n\ncustom:\n  objectPrefix: \"${self:service}-${self:provider.stage}\"\n\nfunctions:\n  prerender:\n    handler: functions/prerender.handler\n    description: Prerender page provided with URL query parameter\n    environment:\n      DEBUG: 0\n    events:\n      - http:\n          path: prerender\n          method: get\n"]},{"id":195413998,"files":["service: hybrid-load-balancing\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.handle\n    events:\n      - alb:\n          listenerArn:\n            Ref: albListener\n          priority: 1\n          conditions:\n            path: /lambda\n\nresources:\n  - ${file(./infra/alb.yml)}\n  - ${file(./infra/ec2.yml)}\n  - ${file(./infra/vpc.yml)}\n"]},{"id":151049562,"files":["service: hacktoberfest2018checker\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  users:\n    handler: handler.index\n    timeout: 3\n\n    events:\n      - http:\n          path: /\n          method: GET\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                username: true\n                lng: true\n\n  locale:\n    handler: handler.locale\n    timeout: 3\n\n    events:\n      - http:\n          path: /locale/{lng}\n          method: GET\n          cors: true\n          request:\n            parameters:\n              paths:\n                lng: true\n"]},{"id":155386580,"files":["service: sls-boilerplate-sequilize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  teamsAll:\n    handler: handler.teamsAll\n    events:\n    - http:\n        path: teams\n        method: get\n  createTeam:\n    handler: handler.createTeam\n    events:\n    - http:\n        path: teams\n        method: post\n\n\nplugins:\n  - serverless-offline"]},{"id":111531741,"files":["service: logging\n\nprovider:\n  name: openwhisk\n\ncustom:\n  config: ${file(config.json)}\n\nfunctions:\n  logstash-forwarder:\n    handler: dist/index.main\n    parameters:\n      actions: ${self:custom.config.actions}\n      from: ${self:custom.config.from}\n      logstash: ${self:custom.config.logstash}\n    events:\n      - schedule: cron(* * * * *)\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":73100746,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: tobaccobot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  cfLogs: true\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  botConversation:\n    handler: src/serverless/index.botConversation\n    events:\n      - http:\n          method: POST\n          integration: lambda\n          path: bot_conversation\n          cors: true\n  getBotConversation:\n    handler: src/serverless/index.botConversation\n    events:\n      - http:\n          method: GET\n          integration: lambda\n          path: bot_conversation\n          cors: true\n  dailyMessage:\n    handler: src/serverless/index.dailyMessage\n    events:\n      - schedule:\n            rate: cron(0 8 ? * * *)\n            enabled: true\n  setupTables:\n    handler: src/serverless/index.setupTables\n  subscribe:\n    handler: src/serverless/index.subscribe\n    events:\n      - http:\n          method: POST\n          integration: lambda\n          path: subscribe\n          cors: true\n  reportData:\n    handler: src/serverless/index.reportData\n    events:\n        - http:\n            method: POST\n            integration: lambda\n            path: report_data\n            cors: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    DynamoDbSmokerTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: smoker\n        AttributeDefinitions:\n          - AttributeName: phone\n            AttributeType: S\n        KeySchema:\n          - AttributeName: phone\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBSmokerIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbSmokerTable\n      Properties:\n        PolicyName: lambda-dynamodb-smoker\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/smoker\n        Roles:\n          - Ref: IamRoleLambdaExecution\n    DynamoDbArchiveTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: archive\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBArchiveIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbArchiveTable\n      Properties:\n        PolicyName: lambda-dynamodb-archive\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:DescribeTable\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/archive\n        Roles:\n          - Ref: IamRoleLambdaExecution\nplugins:\n  - serverless-webpack\n  - serverless-offline\ncustom:\n  webpack: ./webpack.config.serverless.js\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015-node4\", \"es2016\"]\n      plugins: [\"add-module-exports\", \"transform-runtime\"]\n"]},{"id":81743907,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: stripe-importer\n\nframeworkVersion: \"=1.6.1\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    STRIPE_API_KEY: ${self:custom.secrets.STRIPE_API_KEY}\n    XERO_CONSUMER_KEY: ${self:custom.secrets.XERO_CONSUMER_KEY}\n    XERO_CONSUMER_SECRET: ${self:custom.secrets.XERO_CONSUMER_SECRET}\n    XERO_STRIPE_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_ACCOUNT_CODE}\n    XERO_STRIPE_FEE_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_FEE_ACCOUNT_CODE}\n    XERO_STRIPE_TRANSFER_ACCOUNT_CODE: ${self:custom.secrets.XERO_STRIPE_TRANSFER_ACCOUNT_CODE}\n    XERO_SALES_ACCOUNT_CODE: ${self:custom.secrets.XERO_SALES_ACCOUNT_CODE}\n\nfunctions:\n  stripeImporter:\n    handler: handler.stripeImporter\n    events:\n      - http:\n          path: stripe/xero\n          method: post\n\npackage:\n  exclude:\n    - webhooks/**\n    - xero_keys/**\n    - secrets.example.yml\n  include:\n    - xero_keys/privatekey.pem\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n"]},{"id":89745288,"files":["service: viewServer\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-1\npackage:\n  individually: true\n  exclude:\n    - ./**\n  include:\n    - server.js\n    - app.js\n    - node_modules/**\nfunctions:\n  server:\n    handler: server.handle\n    environment:\n      API_HOST: ${env:AWS_API_HOST}\n      STATIC_ROOT: ${env:AWS_STATIC_ROOT}\n    events:\n      - http: ANY view/\n      - http: ANY view/{route+}\nplugins:\n  - serverless-s3-assets\n  - serverless-plugin-optimize\ncustom:\n  s3Assets:\n    static:\n      bucket: ${env:AWS_S3_BUCKET}\n      css:\n        contentType: text/css\n"]},{"id":109021390,"files":["# Service Name\nservice: vws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v1\n  # profile: <PROFILE_NAME>\n  environment:\n    JCDECAUX_KEY: ${file(./config/secret.yml):JCDECAUX_KEY}\n    VELIB_TABLE: ${self:resources.Resources.velibTable.Properties.TableName}\n    VELIB_DETAILS_TABLE: ${self:resources.Resources.velibDetailsTable.Properties.TableName}\n    GOBEE_DETAILS_TABLE: ${self:resources.Resources.gobeeDetailsTable.Properties.TableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource:\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/velibTable*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/velibDetailsTable*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/gobeeDetailsTable*\"]]\n\npackage:\n  individually: true\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n  velib:\n    handler: src/velib/src/index.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /velib\n          method: GET\n          cors: true\n  velibStations:\n    handler: src/velib/src/stations.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /velib/stations\n          method: GET\n          cors: true\n  gobeeParis:\n    handler: src/velib/src/gobeeParis.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /gobee/bikes/paris\n          method: GET\n          cors: true\n\nresources:\n  Resources:\n    velibTable: # Store global statistics on all stations\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: velibTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n    velibDetailsTable: # Store statistics by stations\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: velibDetailsTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n    gobeeDetailsTable: # Store statistics by stations\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gobeeDetailsTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-dynamodb-local\n  - serverless-offline"]},{"id":130111645,"files":["service: serverless-graphql-rest-api\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  stage: ${env:SLS_STAGE, opt:stage, self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: \"${self:custom.stage}.users\"\n            sources: [dynamodb/seed-data/users.json]\n          - table: \"${self:custom.stage}.companies\"\n            sources: [dynamodb/seed-data/companies.json]\n          - table: \"${self:custom.stage}.contacts\"\n            sources: [dynamodb/seed-data/contacts.json]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  role: defaultRole\n  environment:\n    STAGE: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  \n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n\n\nresources:\n  Resources:\n\n    ##\n    # Tables\n    ##\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.users\"\n        AttributeDefinitions:\n          - AttributeName: uid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n    companiesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.companies\"\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n    contactsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: \"${self:custom.stage}.contacts\"\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n          - AttributeName: companyId\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        GlobalSecondaryIndexes:\n          - IndexName: companyId-index\n            KeySchema:\n              - AttributeName: companyId\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 10\n              WriteCapacityUnits: 10\n\n    ##\n    # IAM ROLE\n    ##\n    defaultRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${self:custom.stage}-${self:provider.region}-defaultRole\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-${self:custom.stage}-defaultServerlessPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - SNS:Publish\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                    - dynamodb:DeleteItem\n                    - dynamodb:BatchGetItem\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - dynamodb:GetRecords\n                    - dynamodb:GetShardIterator\n                    - dynamodb:DescribeStream\n                    - dynamodb:ListStreams\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                    - lambda:InvokeAsync\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                    - xray:PutTelemetryRecords\n                  Resource:\n                    - \"*\""]},{"id":136694667,"files":["service: bsdc-2018-memegen\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  helloServerless:\n    handler: handler.helloServerless\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  createMeme:\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  createMeme:\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: post\n\n  sendMeme:\n    handler: handler.sendMeme\n    events:\n      - sns: arn:aws:sns:us-east-1:770772978315:static-meme-topic\n\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-plugin-deploy-environment\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-git-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\npackage:\n  include:\n    - images/\n    - lib/\n\ncustom:\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\nfunctions:\n  createMeme:\n    description: Create a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n\n  sendMeme:\n    description: Send a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.sendMeme\n    events:\n      - sns: arn:aws:sns:us-east-1:770772978315:bsdc-2018-memegen-request-topic-production # TODO, make this dynamic\n      # - sns:\n      #   arn: ${self:deployVariables.snsTopicArn} # TODO, make this work in dev and prod.\n      #   topicName: ${self:deployVariables.snsTopicName} # TODO, make this work in dev and prod.\n\nresources: ${file(config/cloudformation.yml)}\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-plugin-deploy-environment\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-git-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\npackage:\n  include:\n    - images/\n    - lib/\n\ncustom:\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\nfunctions:\n  createMeme:\n    description: Create a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n\n  sendMeme:\n    description: Send a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.sendMeme\n    events:\n      - sns: ${self:deployVariables.snsTopicArn}\n\nresources: ${file(config/cloudformation.yml)}\n"]},{"id":95858966,"files":["service: let-me-in\n\ncustom:\n  LMI_NAME: \"<<name>>\"\n  SG_ID: \"<<security group ID>>\"\n  TOPIC_NAME: \"lmi-notifications\"\n  EMAIL: \"<<email address to receive notifications about added/removed SG rules>>\"\n  TABLE_NAME: \"lmi-rule\"\n  MINS_TO_LIVE_CAP: 30 # hard limit on max time a rule is allowed to stay alive (value in minutes)\n  # USER_POOL_NAME: 'lmi-users'\n  USER_POOL_ARN: '<<plug here your pool ARN>>'\n  BUCKET_NAME: '<<unique bucket name>>'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-2\n  stage: dev\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action: 'SNS:Publish'\n      Resource:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - ${self:custom.TOPIC_NAME}\n    - Effect: 'Allow'\n      Action: 'ec2:DescribeSecurityGroups'\n      Resource: '*'\n    - Effect: 'Allow'\n      Action:\n        - 'ec2:AuthorizeSecurityGroupIngress'\n        - 'ec2:RevokeSecurityGroupIngress'\n      Resource:\n        Fn::Join:\n          - ''\n          - - Fn::Join:\n              - ':'\n              - - 'arn:aws:ec2'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - 'security-group/'\n            - ${self:custom.SG_ID}\n    - Effect: 'Allow'\n      Action:\n        - 'dynamodb:Scan'\n        - 'dynamodb:GetItem'\n        - 'dynamodb:GetRecords'\n        - 'dynamodb:GetShardIterator'\n        - 'dynamodb:DescribeStream'\n        - 'dynamodb:ListStreams'\n        - 'dynamodb:PutItem'\n        - 'dynamodb:DeleteItem'\n      Resource:\n        Fn::Join:\n          - ''\n          - - Fn::Join:\n              - ':'\n              - - 'arn:aws:dynamodb'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - 'table/'\n            - ${self:custom.TABLE_NAME}\n\npackage:\n  exclude:\n    - tests/**\n\nfunctions:\n  lmi_apighandler:\n    handler: apighandler.handler\n    environment:\n      LMI_NAME: ${self:custom.LMI_NAME}\n      SG_ID: ${self:custom.SG_ID}\n      TABLE_NAME: ${self:custom.TABLE_NAME}\n      MINS_TO_LIVE_CAP: ${self:custom.MINS_TO_LIVE_CAP}\n    events:\n      - http:\n          path: lmi\n          method: post\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"minutesToLive\": $inputRoot.minutesToLive,\n                  \"rule\": {\n                    \"ip\": \"$inputRoot.ip\",\n                    \"ports\": [\n                #foreach($p in $inputRoot.ports)\n                      { \"from\": $p.from, \"to\": $p.to }#if($foreach.hasNext),#end\n                #end\n                    ]\n                  }\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n              # NOT SUPPORTED\n              # Fn::GetAtt:\n              #   - CognitoUserPool\n              #   - Arn\n            claims:\n              - email\n              - sub\n      - http:\n          path: lmi\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"action\": \"get-rules\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n      - http:\n          path: lmi\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"action\": \"delete-rule\",\n                  \"ruleId\": \"$input.params('ruleId')\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n      - http:\n          path: updateIp\n          method: post\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"newIp\": \"$inputRoot.newIp\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n\n  lmi_ddbhandler:\n    handler: ddbhandler.handler\n    environment:\n      LMI_NAME: ${self:custom.LMI_NAME}\n      TOPIC_ARN:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - ${self:custom.TOPIC_NAME}\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - DdbRuleTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    SnsTopic:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: ${self:custom.TOPIC_NAME}\n        Subscription:\n          - Endpoint: ${self:custom.EMAIL}\n            Protocol: email\n    DdbRuleTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:custom.TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: user_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: expiry\n          Enabled: true\n    # COMMENTED OUT BECAUSE DUE TO SUPPORT LIMITATIONS I CREATED THE POOL BEFORE DEPLOYING THE PROJECT\n    # CognitoUserPool:\n    #   Type: \"AWS::Cognito::UserPool\"\n    #   Properties:\n    #     UserPoolName: ${self:custom.USER_POOL_NAME}\n    #     AdminCreateUserConfig:\n    #       AllowAdminCreateUserOnly: true\n    #     AutoVerifiedAttributes:\n    #       - email\n    # CognitoAppClient:\n    #   Type: \"AWS::Cognito::UserPoolClient\"\n    #   Properties:\n    #     ClientName: react\n    #     GenerateSecret: false\n    #     UserPoolId:\n    #       Ref: CognitoUserPool\n    S3BucketForStaticWebsite:\n        Type: \"AWS::S3::Bucket\"\n        Properties:\n          BucketName: ${self:custom.BUCKET_NAME}\n          AccessControl: PublicRead\n          WebsiteConfiguration:\n            IndexDocument: \"index.html\"\n            ErrorDocument: \"error.html\"\n  Outputs:\n    ReactAppBucketName:\n      Value:\n        Ref: S3BucketForStaticWebsite\n      Description: \"Name of S3 bucket to host React web app\"\n    ReactAppUrl:\n      Value:\n        Fn::GetAtt:\n          - S3BucketForStaticWebsite\n          - WebsiteURL\n      Description: \"React web app URL\""]},{"id":143595022,"files":["service: mini-movie-db\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  stage: ${opt:stage, \"dev\"}\n  environment:\n    stage: ${self:provider.stage}\n    MOVIE_DB_API_KEY: ${file(./serverless.env.yml):MOVIE_DB_API_KEY, \"\"}\n    ENGINE_API_KEY: ${file(./serverless.env.yml):ENGINE_API_KEY, \"\"}\n    SENTRY_FILTER_LOCAL: false\n    S3_BUCKET: ${self:service}-image-storage\n    S3_HOST: localhost\n    S3_PORT: 8000\n\nplugins:\n  - serverless-sentry\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-scripts\n\npackage:\n  exclude:\n    - ./node_modules/**\n    - ./.eslintrc.json\n    - ./webpack.config.js\n\ncustom:\n  serverless-offline:\n    port: 1337\n  config:\n    CACHE_INSTANCE_SIZE: cache.t2.micro\n  sentry:\n    dsn: ${file(./serverless.env.yml):SENTRY_DSN, \"\"}\n    environment: ${opt:stage, self:provider.stage}\n    organization: saerisio\n    project: ${self:service}\n    authToken: ${file(./serverless.env.yml):SENTRY_AUTH_TOKEN, \"\"}\n    release:\n      version: git\n    filterLocal: false\n  webpack:\n    includeModules: true\n    webpackConfig: 'webpack.config.js'\n\nfunctions:\n  graphql:\n    handler: src/index.graphqlHandler\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n"]},{"id":86512556,"files":["service: serverless-cloudfront-logs\ncustom:\n  bucketName: sls-cf-log-bucket  # Change this to something unique\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n      Resource: \"arn:aws:s3:::${self:custom.bucketName}/*\"\n\nfunctions:\n  logFileReceived:\n    handler: handler.logFileReceived\n    memorySize: 128\n    timeout: 60\n    events:\n      - s3:\n          bucket: ${self:custom.bucketName}\n          event: s3:ObjectCreated:*\n"]},{"id":213923915,"files":["service: graphql-reference\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:default\n  ignore_certs: true\n  service: graphql-reference\n\nplugins:\n  - serverless-openwhisk\n  - serverless-webpack\n\nresources:\n  packages:\n    graphql-reference:\n      parameters:\n\nfunctions:\n  dispatcher:\n    name: graphql-reference/dispatcher\n    handler: src/local/dispatcher.main\n    concurrency: 200\n    annotations:\n      web-export: true\n    parameters:\n      url: https://a-dummy-url.com # Demonstrates how parameters can be passed to GraphQL resolvers\n      use-aio-cache: 3600 # number of seconds for caching; set to false or remove to disable caching\n      remoteSchemas: # Action with smaller order has \"merge priority\" in schema conflicts\n        cart:\n          order: 20\n          action: graphql-reference/cart\n\n  cart:\n    name: graphql-reference/cart\n    handler: src/remote/cartResolver.main\n    concurrency: 200\n"]},{"id":103182151,"files":["# A serverless service that sends out emails\n\nservice:\n  name: email\n  description: 'A service for sending emails.'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  sendWelcomeEmail:\n    handler: handler.sendWelcomeEmail\n    events:\n      - user.registered\n","# users-api crud service\n\nservice:\n  name: users\n  description: 'Users CRUD service.'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\nfunctions:\n  register:\n    handler: handler.register\n    events:\n      - http:\n          path: /users\n          method: POST\n"]},{"id":221394768,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: ${env:STAGE}\n#  region: us-east-1\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline"]},{"id":92669723,"files":["# SurfEdge 2017\n# This is the Backend service for the Messenger Bot \n# https://m.me/ReliefSupport\n\nservice: relief-bot \n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  new:\n    handler: handler.new\n    events:\n     - http:\n          path: new\n          method: post\n          cors: true\n  needs:\n    handler: handler.newneeds\n    events:\n     - http:\n          path: needs\n          method: post\n          cors: true\n  view:\n    handler: handler.view\n    events:\n     - http:\n          path: view\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":200303097,"files":["service: gcms-cache\n#tenant: your-serverless-framework-enterprise-tenant # TODO Enable this if you want to use the SLS Framework Enterprise for monitoring (not required, may help troubleshoot issues, need to be configured first though)\n#app: gcms-cache\nframeworkVersion: \"=1.49.0\"\n\nplugins:\n  - serverless-webpack # https://github.com/serverless-heaven/serverless-webpack\n  - serverless-sentry # https://github.com/arabold/serverless-sentry-plugin/issues/30 (https://github.com/arabold/serverless-sentry-plugin)\n  - serverless-offline # See https://github.com/dherault/serverless-offline\n  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin\n  - serverless-domain-manager # See https://github.com/amplify-education/serverless-domain-manager\n  - serverless-dotenv-plugin # See https://www.npmjs.com/package/serverless-dotenv-plugin\n\npackage:\n  individually: true\n\ncustom:\n  serverless-offline:\n    port: 8085\n    showDuration: true\n  environment: ${env:NODE_ENV, 'development'}\n  envs:\n    development: # XXX Kept for compatibility but useless, development stage doesn't go to AWS\n      profile:\n      domain:\n        name:\n      memorySize:\n    staging:\n      profile: 'tfp-staging' # TODO use the AWS profile your want (we split staging/prod between different AWS accounts, but feel free to use the same if you don't do it our way)\n      domain:\n        name: staging.cache.your-org.com # TODO use the domain name you want, see https://github.com/amplify-education/serverless-domain-manager\n      memorySize: 128\n    production:\n      profile: 'tfp-production' # TODO use the AWS profile your want (we split staging/prod between different AWS accounts, but feel free to use the same if you don't do it our way)\n      domain:\n        name: cache.your-org.com # TODO use the domain name you want, see https://github.com/amplify-education/serverless-domain-manager\n      memorySize: 128\n  sentry: # XXX Duplicated in .sentryclirc and both must be updated accordingly\n    dsn: https://xxx:xxx@sentry.io/xxxxxx # TODO\n    organization: your-org # TODO\n    project: gcms-cache # TODO\n    authToken: xxxx # TODO 64 chars token\n    release: # https://github.com/arabold/serverless-sentry-plugin#releases\n      version: true\n    filterLocal: true # Filter local errors to avoid noise in localhost\n    environment: ${self:custom.environment}\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: 'yarn'\n    packagerOptions: {}\n    excludeFiles: src/**/*.test.js\n    keepOutputDirectory: true\n  customDomain:\n    enabled: true\n    domainName: ${self:custom.envs.${self:provider.stage}.domain.name}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # AWS keeps up to date with the latest v10 version - See https://forum.serverless.com/t/node-10-lambdas-on-aws/8302/2\n  versionFunctions: false # See https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions\n  logRetentionInDays: 60\n  stage: ${self:custom.environment}\n  region: eu-west-1\n  memorySize: ${self:custom.envs.${self:provider.stage}.memorySize, '128'}\n  timeout: 30\n  logs:\n    restApi: true # Enable logs in other services, such as API GW - See https://serverless.com/blog/framework-release-v142/\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    NODE_ENV: ${self:custom.environment}\n  profile: ${self:custom.envs.${self:provider.stage}.profile, ''}\n  stackTags:\n    env: ${self:custom.environment}\n    stage: ${self:provider.stage}\n    region: ${self:provider.region}\n    service: ${self:service}\n    service-type: api\n    runtime: ${self:provider.runtime}\n\nfunctions:\n  cache-query:\n    handler: src/functions/cache-query.cacheQuery\n    events:\n      - http:\n          method: POST\n          path: /cache-query\n          cors: true\n\n  refresh-cache:\n    handler: src/functions/refresh-cache.refreshCache\n    events:\n      - http:\n          method: POST\n          path: /refresh-cache\n          cors: true\n\n  status:\n    handler: src/functions/status.status\n    events:\n      - http:\n          method: GET\n          path: /status\n          cors: true\n\n  read-cache:\n    handler: src/functions/read-cache.readCache\n    events:\n      - http:\n          method: GET\n          path: /read-cache\n          cors: true\n          authorizer: # See https://medium.com/@Da_vidgf/http-basic-auth-with-api-gateway-and-serverless-5ae14ad0a270\n            name: authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            type: request\n  authorizer:\n    handler: src/authorizers/basic-auth.handler\n\nresources:\n  Conditions:\n    IsProduction:\n      Fn::Equals:\n        - ${self:custom.environment}\n        - \"production\"\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.WWW-Authenticate: \"'Basic'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    healthCheck:\n      Condition: IsProduction # Only deploy HealthCheck in production environment\n      Type: \"AWS::Route53::HealthCheck\"\n      Properties:\n        HealthCheckConfig:\n          EnableSNI: true\n          FailureThreshold: \"3\"\n          FullyQualifiedDomainName: ${self:custom.envs.${self:provider.stage}.domain.name}\n          ResourcePath: \"/status\" # XXX Optimize cost by hitting a simple endpoint which doesn't download anything and avoid cost due to data transfer (S3, API Gateway)\n          MeasureLatency: false # XXX Cost $1/stage/month ($2/month for staging + production)\n          Port: \"80\"\n          Regions: # XXX Only check from UE/US (minimum 3 regions is required), cost much less money and not useful to check from all datacenters in the world\n            - 'eu-west-1' # Ireland\n            - 'us-west-1' # California\n            - 'us-east-1' # Virginia\n          RequestInterval: \"30\" # 30 is the max allowed\n          Type: \"HTTPS\"\n        HealthCheckTags:\n          - Key: \"env\"\n            Value: ${self:custom.environment}\n          - Key: \"stage\"\n            Value: ${self:provider.stage}\n          - Key: \"region\"\n            Value: ${self:provider.region}\n          - Key: \"service\"\n            Value: ${self:service}\n          - Key: \"service-type\"\n            Value: api\n"]},{"id":227669805,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: shopify-app-name\n\nplugins:\n- serverless-apigw-binary\n- serverless-offline\n- serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\"\n  apigwBinary:\n    types:\n      - 'image/jpeg'\n      - 'image/png'\n  defaultStage: dev\n  environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.defaultStage}\n  environment:\n    appName: ${self:custom.environment.appName}\n    tableName: ${self:service}-shops-${self:provider.stage}\n    SHOPIFY_API_KEY: ${self:custom.environment.SHOPIFY_API_KEY}\n    SHOPIFY_API_SECRET: ${self:custom.environment.SHOPIFY_API_SECRET}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchGetItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}/index/domain-index\"\n\n\nfunctions:\n  # ASSETS\n  assetsFavicon:\n    handler: app/assets.favicon\n    events:\n      - http:\n          path: assets/favicon.png\n          method: get\n  assetsCSS:\n    handler: app/assets.css\n    events:\n      - http:\n          path: assets/css/app.css\n          method: get\n  assetsJS:\n    handler: app/assets.js\n    events:\n      - http:\n          path: assets/js/app.js\n          method: get\n  # END ASSETS\n  authIndex:\n    handler: app/auth.index\n    events:\n      - http:\n          path: /\n          method: get\n  installIndex:\n    handler: app/install.index\n    events:\n      - http:\n          path: install\n          method: get\n  installStore:\n    handler: app/install.store\n    events:\n      - http:\n          path: install/store\n          method: any\n  webhookUninstall:\n    handler: app/webhooks.uninstall\n    events:\n      - http:\n          path: webhooks/uninstall\n          method: post\n  webhookGDPR:\n    handler: app/webhooks.gdpr\n    events:\n      - http:\n          path: webhooks/gdpr\n          method: post\n\n\nresources:\n  Resources:\n    ShopsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.tableName}\n        AttributeDefinitions:\n          - AttributeName: shopId\n            AttributeType: S\n          - AttributeName: domain\n            AttributeType: S\n        KeySchema:\n          - AttributeName: shopId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: domain-index\n            KeySchema:\n              - AttributeName: domain\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n"]},{"id":98796768,"files":["service: mdcloud-serverless\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 20\n  region: us-east-1\n  environment:\n    apikey: ${self:custom.apikey}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:SendMessage\n      Resource: \"arn:aws:sqs:*:*:${self:custom.sqs}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n      Resource: \"arn:aws:sns:*:*:${self:custom.snsEmail}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - \"*\"\n\npackage:\n exclude:\n   - node_modules/aws-sdk/**\n   - event_samples/**\n   - .vscode/**\n\nfunctions:\n  task:\n    handler: task.handler\n    name: task\n    environment:\n      sqs: ${self:custom.sqs}\n\n  scan:\n    handler: scan.handler\n    name: scan\n    environment:\n      sqs: ${self:custom.sqs}\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n\n  worker:\n    handler: worker.handler\n    name: worker\n    environment:\n      sqs: ${self:custom.sqs}\n      lambda: task\n    events:\n      - schedule: rate(1 minute)\n      - sns: ${self:custom.sns}\n\nresources:\n  Resources:\n    BacklogQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: '1209600'\n        VisibilityTimeout: '60'\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - DeadLetterQueue\n            - Arn\n          maxReceiveCount: '10'\n\n    DeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: '1209600'\n\n    QueueDepthAlarmOver100:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        AlarmDescription: Alarm if queue depth grows beyond 100 messages\n        Namespace: AWS/SQS\n        MetricName: NumberOfMessagesVisible\n        Dimensions:\n        - Name: QueueName\n          Value: ${self:custom.sqs}\n        Statistic: Sum\n        Period: '60'\n        EvaluationPeriods: '1'\n        Threshold: '100'\n        ComparisonOperator: GreaterThanOrEqualToThreshold\n        AlarmActions:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:sns:${self:provider.region}:\", { \"Ref\" : \"AWS::AccountId\" }, \":${self:custom.sns}\" ] ]  }\n\n    MailQueue:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"Serverless Mail\"\n        TopicName: ${self:custom.snsEmail}\n        Subscription:\n          - Endpoint: ${self:custom.mailTo}\n            Protocol: \"email\""]},{"id":177196260,"files":["service: aws-reaper-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeVolumes\"\n        - \"ec2:DeleteVolume\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  ebs-reaper:\n    handler: handler.reaper\n    events:\n      - schedule: rate(1 day)\n"]},{"id":117393815,"files":["service: eth-serverless-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  environment: ${file(environment.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchWriteItem\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:*:*:table/*\n\nfunctions:\n  auth0Authorizer:\n    handler: handler.auth0Authorizer\n  createWallet:\n    handler: handler.createWallet\n    events:\n      - http:\n          path: wallet/create\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n  getWalletBalance:\n    handler: handler.getWalletBalance\n    events:\n      - http:\n          path: wallet/balance/\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n  getUserInfo:\n    handler: handler.getUserInfo\n    events:\n      - http:\n          path: user/get/\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: auth0ID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: auth0ID\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-secrets-plugin\n  - serverless-offline\n  \ncustom:\n  secrets: ${file(secrets.yml)}\n  dynamodb:\n    start:\n      port: 8000\n      migrate: true"]},{"id":180276648,"files":["service: twitter-collection-gateway\npackage:\n  exclude:\n      - node_modules/oauth/examples/**\n      - node_modules/oauth/tests/**\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: default\n  endpointType: REGIONAL\n  stage: devs\n  region: ap-southeast-2\n  logRetentionInDays: 5\n  apiKeys:\n    - iautomate.cloud\n  usagePlan:\n    quota:\n      limit: 300\n      offset: 0\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 10\nfunctions:\n  getCuratedTweets:\n    handler: handler.getCuratedTweets\n    events:\n      - http: \n            method: GET\n            path: getCuratedTweets\n            cors: true\n            private: true\n    timeout: 5\n    environment:\n        ConsumerAPIKey: ${ssm:/twittergateway/ConsumerAPIKey~true}\n        APISecretKey: ${ssm:/twittergateway/APISecretKey~true}\n        OAuthAccessToken: ${ssm:/twittergateway/OAuthAccessToken~true}\n        OAuthTokenSecret: ${ssm:/twittergateway/OAuthTokenSecret~true}\n        twitterCollectionUUID: https://api.twitter.com/1.1/collections/entries.json?id=custom-${ssm:/twittergateway/twitterCollectionUUID~true}&tweet_mode=extended"]},{"id":190678977,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: durinn # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    NODE_ENV: 'production'\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n\npackage:\n  include:\n    - assets/**\n    - config/**\n  exclude:\n    - tests/**\n\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http:\n          path: /{proxy+}\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Version\n              - Language\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-offline\n  - serverless-content-encoding\n  - serverless-prune-plugin\n\ncustom:\n  contentEncoding:\n    minimumCompressionSize: 0 # Minimum body size required for compression in bytes\n  prune:\n    automatic: true\n    number: 3\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":171045395,"files":["service: node-simple-http-endpoint # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: probot-welcome-app\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n"]},{"id":97141817,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: test/hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":82041099,"files":["service: mail-slack-forwarding\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - kms:Decrypt\n      Resource: arn:aws:kms:...\n\nfunctions:\n  mail-slack-forwarding:\n    handler: handler.handler\n    events:\n      - sns: mail-slack-forwarding\n    environment:\n      slack_channel: '#mail'\n      slack_hook_kms_encrypted: AQECAHgRDv1...\n"]},{"id":143284054,"files":["service: serverless-sequelize-webpack\ncustom:\n  webpack: \n    webpackConfig: webpack.config.js\n    includeModules:\n      forceInclude:\n        - pg\n        - pg-hstore\n    packager: yarn\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: dist/handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":161865484,"files":["service: quick-start\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n","service: kakao-payment-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n\nregion: ap-northeast-2\n\nfunctions:\n  payment:\n    handler: handler.payment\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":73945880,"files":["service: s3-notifications # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs4.3\n  stage: dev\n  iamRoleStatements:\n    $ref: ./iamRoleStatements.json\n\nfunctions:\n  hello:\n    description: Detect an upload to S3\n    memorySize: 1024\n    timeout: 30\n    handler: handler.dispatch\n    events:\n      - s3:\n          bucket: s3-notification\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3BucketS3notification:\n      Properties:\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\""]},{"id":134438311,"files":["service: lessons-of-hn-telegram-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    BOT_API_KEY: ${file(./env.json):BOT_API_KEY}\n    CHANNEL_ID: ${file(./env.json):CHANNEL_ID}\n    API_KEY: ${file(./env.json):FIREBASE.apiKey}\n    AUTH_DOMAIN: ${file(./env.json):FIREBASE.authDomain}\n    DATABASE_URL: ${file(./env.json):FIREBASE.databaseURL}\n    PROJECT_ID: ${file(./env.json):FIREBASE.projectId}\n    STORAGE_BUCKET: ${file(./env.json):FIREBASE.storageBucket}\n    MESSAGING_SENDER_ID: ${file(./env.json):FIREBASE.messagingSenderId}\n\nfunctions:\n  cron:\n    handler: handler.run\n    description: Cron job that runs every Sunday at 10 am UTC\n    events:\n      - schedule: cron(0 10 ? * SUN *)"]},{"id":121432394,"files":["service: ProCoders\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  environment:\n    STRIPE_SECRET_KEY: ${file(./.env.${opt:stage}.yml):STRIPE_SECRET_KEY}\n\nfunctions:\n  checkForFinishedPayments:\n    handler: handler.call\n    events:\n      - http:\n          path: /\n          method: post"]},{"id":147900678,"files":["service: jira-slack-reminder\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment: ${file(./env.json)}\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every day at 1700 UTC\n      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n      - schedule: cron(0 17 ? * MON-FRI *)"]},{"id":132762497,"files":["service: geolocation-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource:\n      - Fn::Join:\n        - ':'\n        - - arn:aws:lambda\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - function:${self:service}-${opt:stage, self:provider.stage}-*\n\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-plugin-warmup\n\nfunctions:\n  fetchLocationData:\n    handler: handler.fetchLocationData\n    warmup: true\n    events:\n      - http:\n          path: location\n          method: get\n          cors: true"]},{"id":122920942,"files":["service: bracket\n\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: iot.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  qrcode:\n    handler: qrcode/index.main\n    events:\n      - http:\n          path: /q/\n          method: get\n  base:\n    handler: qrcode/update.status\n    events:\n      - http:\n          path: /q/{uuid}\n          method: get\n  create:\n    handler: qrcode/create.handler\n    events:\n      - http:\n          path: /q/\n          method: post\n  on:\n    handler: qrcode/update.on\n    events:\n      - http:\n          path: /q/{uuid}/on\n          method: get\n  off:\n    handler: qrcode/update.off\n    events:\n      - http:\n          path: /q/{uuid}/off\n          method: get\n  status:\n    handler: qrcode/update.status\n    events:\n      - http:\n          path: /q/{uuid}/status\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":124181916,"files":["service: slack-send-app\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    stage: dev\n    region: us-east-1\n    memorySize: 128\n    versionFunctions: false\n    cfLogs: true\n    iamRoleStatements:\n        - Effect: \"Allow\"\n          Action:\n              - \"dynamodb:*\"\n          Resource: \"*\"\n    environment:\n        DDB_TOKENS: slack-send-server-${opt:stage, self:provider.stage}-v0.0-tokens\n        DDB_MESSAGES: ${self:service}-${opt:stage, self:provider.stage}-v0.0-messages\npackage:\n    exclude:\n        - .npmignore\n        - fixtures/**\n        - .git/**\nfunctions:\n    schedule:\n        handler: handler.scheduled_event\n        description: Handle scheduled event\n        timeout: 30\n        events:\n            - schedule:\n                name: ${self:service}-${opt:stage, self:provider.stage}-every-5-mins\n                description: Every 5 minutes\n                rate: rate(5 minutes)\n                enabled: true\n            - http:\n                path: slack/send/run\n                method: get\n                private: false\n    command:\n        handler: handler.slack_command\n        description: Handle slash commands from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/command\n                method: post\n                private: false\n            - schedule:\n                rate: rate(5 minutes)\n                description: keeps lambda warm\n                enabled: true\n                input:\n                  inputpath: \"/slack/send/command\"\n    actions:\n        handler: handler.slack_actions\n        description: Handle interactive message actions from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/actions\n                method: post\n                private: false\n            - schedule:\n                rate: rate(5 minutes)\n                description: keeps lambda warm\n                enabled: true\n                input:\n                  inputpath: \"/slack/send/actions\"\n    options:\n        handler: handler.slack_options\n        description: Handle interactive message options from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/options\n                method: post\n                private: false\n    events:\n        handler: handler.slack_events\n        description: Handle events from Slack\n        timeout: 30\n        events:\n            - http:\n                path: slack/send/events\n                method: post\n                private: false\nresources:\n    Resources:\n        TableScheduledMessages:\n            Type: AWS::DynamoDB::Table\n            Properties:\n                TableName: ${self:provider.environment.DDB_MESSAGES}\n                AttributeDefinitions:\n                    - AttributeName: ymd\n                      AttributeType: S\n                    - AttributeName: id\n                      AttributeType: S\n                    - AttributeName: date_id\n                      AttributeType: S\n                    - AttributeName: team_id\n                      AttributeType: S\n                    - AttributeName: user_id\n                      AttributeType: S\n                KeySchema:\n                    - AttributeName: ymd\n                      KeyType: HASH\n                    - AttributeName: date_id\n                      KeyType: RANGE\n                ProvisionedThroughput:\n                    ReadCapacityUnits: 20\n                    WriteCapacityUnits: 5\n                GlobalSecondaryIndexes:\n                    - IndexName: team_user_index\n                      KeySchema:\n                          - AttributeName: team_id\n                            KeyType: HASH\n                          - AttributeName: user_id\n                            KeyType: RANGE\n                      Projection:\n                          ProjectionType: ALL\n                      ProvisionedThroughput:\n                          ReadCapacityUnits: 20\n                          WriteCapacityUnits: 0\n                    - IndexName: team_id_index\n                      KeySchema:\n                          - AttributeName: team_id\n                            KeyType: HASH\n                          - AttributeName: id\n                            KeyType: RANGE\n                      Projection:\n                          ProjectionType: ALL\n                      ProvisionedThroughput:\n                          ReadCapacityUnits: 20\n                          WriteCapacityUnits: 0\n        ScheduleLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        CommandLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        ActionsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        OptionsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n        EventsLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n"]},{"id":173566889,"files":["service: websockets\n\nframeworkVersion: \">=1.38.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"dynamodb:*\"\n    Resource: \"*\"\n  - Effect: Allow\n    Action:\n      - \"execute-api:ManageConnections\"\n    Resource:\n      - \"arn:aws:execute-api:*:*:**/@connections/*\"\n\nfunctions:\n  wsConnectionHandler:\n    handler: handler.wsConnectionHandler\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n  wsDefaultHandler:\n    handler: handler.wsDefaultHandler\n    events:\n      - websocket:\n          route: $default\n  wsSendMessageHandler:\n    handler: handler.wsSendMessageHandler\n    events:\n      - websocket:\n          route: sendMessage\n\n\nresources:\n  Resources:\n    UsersConnectionsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: \"userId\"\n          AttributeType: \"S\"\n        - AttributeName: \"connectionId\"\n          AttributeType: \"S\"\n        KeySchema:\n        - AttributeName: \"userId\"\n          KeyType: \"HASH\"\n        BillingMode: PROVISIONED\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: websocket-users-connections\n        GlobalSecondaryIndexes:\n          - IndexName: websocket-users-connections-connectionId-GSI\n            KeySchema:\n              - AttributeName: connectionId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":162069056,"files":["service: demo-option1-binarymediatypes\napp: demo-option1-binarymediatypes\ntenant: activescott\n\nplugins:\n  - serverless-apigw-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n","service: demo-option2-contenthandling\napp: demo-option2-contenthandling\ntenant: activescott\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-apigwy-binary\n\nfunctions:\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: binary/{pathvar+}\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'application/octet-stream'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png/\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'image/png'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg/\n          method: get\n          integration: lambda\n          contentHandling: CONVERT_TO_BINARY\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'image/jpeg'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n          integration: lambda\n          # NOTE: No contentHandling\n          response:\n            headers: # see https://serverless.com/framework/docs/providers/aws/events/apigateway#responses\n              Content-Type: \"'text/html'\" # <<< This doesn't seem to be used by APIG. APIG just echos back whatever is in the Accept request header\n            template: $input.path('$.body')\n"]},{"id":121765509,"files":["service: lambda-test\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: becual/hello\n          method: get\n  bye:\n    handler: handler.bye\n    events:\n      - http:\n          path: becual/bye\n          method: get\nplugins:\n  - serverless-offline\n  - serverless-plugin-optimize"]},{"id":140075019,"files":["service: svg-to-png-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n\nfunctions:\n  convertToPng:\n    handler: index.handler\n    environment:\n      DEBUG: '0'\n    events:\n      - http:\n          path: /convert-to-png\n          method: post\n          cors: true\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":146322895,"files":["service: lambda-starter-kit\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 60\n  region: eu-west-1\npackage:\n  artifact: ./package.zip\nfunctions:\n  kinesisTestGET:\n    events:\n      - http:\n          method: get\n          path: /kinesisTest\n      - stream:\n          type: kinesis\n          arn:\n            'Fn::GetAtt':\n              - LambdaStarterKitKinesisStream\n              - Arn\n    handler: src/functions/kinesisTest/index.get\n  testGET:\n    environment:\n      NODE_ENV: production\n      DEBUG: true\n    events:\n      - http:\n          method: get\n          path: /test\n    handler: src/functions/test/index.get\n  testPOST:\n    environment:\n      NODE_ENV: production\n      DEBUG: true\n    events:\n      - http:\n          cors: true\n          method: post\n          path: /test\n    handler: src/functions/test/index.post\nresources:\n  Resources:\n    LambdaStarterKitKinesisStream:\n      Type: 'AWS::Kinesis::Stream'\n      Properties:\n        Name: LambdaStarterKitKinesisStream\n        ShardCount: 1\n    CWtoKinesisSubscription:\n      Type: 'AWS::Logs::SubscriptionFilter'\n      Properties:\n        DestinationArn:\n          'Fn::GetAtt':\n            - LambdaStarterKitKinesisStream\n            - Arn\n        LogGroupName:\n          Ref: TestGETLogGroup\n        FilterPattern: '[...]'\n        RoleArn:\n          'Fn::GetAtt':\n            - CWLogsToKinesisRole\n            - Arn\n    CWLogsToKinesisRole:\n      Type: 'AWS::IAM::Role'\n      Properties:\n        RoleName: LambdaStarterKitCWLogsToKinesisRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - logs.amazonaws.com\n              Action:\n                - 'sts:AssumeRole'\n        Policies:\n          - PolicyName: CWLogsToKinesisRolePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - 'kinesis:PutRecords'\n                    - 'kinesis:PutRecord'\n                  Resource:\n                    'Fn::GetAtt':\n                      - LambdaStarterKitKinesisStream\n                      - Arn\n","import path from 'path';\nimport yaml from 'js-yaml';\nimport packageJson from '../../package.json';\nimport { readFile, writeFile } from '../../src/common/utils';\nimport { getFunctionsConfig } from './getFunctionsConfig';\n\nconst cwd = process.cwd();\n\nconst configureProvider = async (config) => {\n  const providerConfigRaw = await readFile(\n    path.join(cwd, 'config/provider.yml'),\n    'utf8'\n  );\n  const providerConfig = yaml.safeLoad(providerConfigRaw);\n\n  return {\n    ...config,\n    ...providerConfig,\n    provider: {\n      ...providerConfig.provider,\n      region: process.env.AWS_REGION\n    }\n  };\n};\n\nconst configureFunctions = async (config) => {\n  const functionsConfig = await getFunctionsConfig();\n\n  return {\n    ...config,\n    functions: functionsConfig\n  };\n};\n\nconst configureResources = async (config) => {\n  const resourcesConfigRaw = await readFile(\n    path.join(cwd, 'config/resources.yml'),\n    'utf8'\n  );\n\n  if (resourcesConfigRaw.trim()) {\n    const resourcesConfig = yaml.safeLoad(resourcesConfigRaw || '');\n    return {\n      ...config,\n      resources: resourcesConfig\n    };\n  }\n  return config;\n};\n\nconst configureServerlessYml = async (config) => {\n  return [\n    configureProvider,\n    configureFunctions,\n    configureResources\n  ].reduce(async (nwConfig, func) => {\n    const newConfig = await nwConfig;\n    return func(newConfig);\n  }, config);\n};\n\nexport const generateServerlessConfig = async () => {\n  const compiledServerlessYml = await configureServerlessYml({\n    service: packageJson.name\n  });\n\n  await writeFile(\n    path.join(cwd, 'serverless.yml'),\n    yaml.safeDump(JSON.parse(JSON.stringify(compiledServerlessYml)))\n  );\n};\n"]},{"id":73741878,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: cordis-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \"1.4.0\"\n\nprovider:\n  name: aws\n  environment:\n    REGION: eu-west-1\n  runtime: nodejs4.3\n  region: eu-west-1\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:eu-west-1:*:*\"\n\nfunctions:\n  # Retrieve projects\n  getProjects:\n    handler: handler.getProjects\n    events:\n      - http:\n          path: projects\n          method: get\n          cors: true\n\n  # Retrieve organizations\n  getOrganizations:\n    handler: handler.getOrganizations\n    events:\n      - http:\n          path: organizations\n          method: get\n          cors: true\n\n  # GraphQL endpoint\n  runGraphQL:\n    handler: handler.runGraphQL\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n\n\n  # Populates our database of projects regularly\n  populateDb:\n    handler: handler.populateDb\n    timeout: 300\n    memorySize: 1024\n    events:\n      - schedule:\n          rate: rate(1 day)\n          enabled: false\n\n  # Populates our database of projects regularly\n  populateDbOrganizations:\n    handler: handler.populateDbOrganizations\n    timeout: 300\n    memorySize: 1024\n    events:\n      - schedule:\n          rate: rate(1 day)\n          enabled: false\n\n  # DynamoDB stream function to annotate results\n  annotateDb:\n    handler: handler.annotateDb\n    events:\n      # @todo parametrize\n      - stream: arn:aws:dynamodb:eu-west-1:365688147560:table/cordis_projects/stream/2016-12-28T21:33:51.804 \n\nresources:\n  Resources:\n    projectTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: cordis_projects\n        AttributeDefinitions:\n          - AttributeName: rcn\n            AttributeType: N\n        KeySchema:\n          - AttributeName: rcn\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          # Every item averages 2kb, and we'd like to write 5000 items per second, so we need a (very large) write capacity of 10000\n          # Note that we won't be writing that often so this is not really a big deal.\n          # However, that would be REALLY EXPENSIVE, so we need to finetune this.\n          WriteCapacityUnits: 1\n    organizationTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: cordis_organizations\n        AttributeDefinitions:\n          - AttributeName: projectRcn\n            AttributeType: N\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: projectRcn\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n"]},{"id":92604223,"files":["service: sls-oauth-instagram\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  memorySize: 128\n  environment:\n    instagram_id: ${file(./credentials.yml):instagram_id}\n    instagram_secret: ${file(./credentials.yml):instagram_secret}\n    instagram_tokenHost: https://api.instagram.com\n    instagram_tokenPath: /oauth/access_token\n    firebase_key: ${file(./credentials.yml):firebase_key}\n    firebase_auth_domain: ${file(./credentials.yml):firebase_auth_domain}\n    firebase_database_url: ${file(./credentials.yml):firebase_database_url}\n    firebase_storage_bucket: ${file(./credentials.yml):firebase_storage_bucket}\n    firebase_messenger_id: ${file(./credentials.yml):firebase_messenger_id}\n    instafeed_js_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/instafeed.min.js\n    main_js_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/main.js\n    main_css_url: https://s3.amazonaws.com/${file(./credentials.yml):bucket}/public/main.css\n\nfunctions:\n  oauth_redirect:\n    handler: src/oauth_redirect.oauth_redirect\n    events:\n      - http:\n          path: redirect\n          method: get\n  oauth_callback:\n    handler: src/oauth_callback.oauth_callback\n    timeout: 20\n    events:\n      - http:\n          path: 'instagram-callback'\n          method: get\n    package:\n      include:\n        - service-account.json\n  serve_index:\n    handler: src/serve_index.serve_index\n    events:\n      - http:\n          path: index\n          method: get\n    package:\n      include:\n        - templates/index.html\n"]},{"id":104588288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: osmose-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\n# you can overwrite defaults here\n  stage: dev1\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  saveEmailStatus:\n    handler: handlers/ses-sns.saveEmailStatus\n    events:\n      - sns: arn:aws:sns:us-east-1:420906024005:osmose_mail\n  emailList:\n    handler: handlers/api-list.emailList\n    events:\n      - http:\n          path: list\n          method: post\n          cors: true\n      - http:\n          path: list\n          method: put\n          cors: true\n      - http:\n          path: list\n          method: delete\n          cors: true\n      - http:\n          path: list\n          method: get\n          cors: true\n  confirmEmail:\n    handler: handlers/confirm-email.sendConfirm\n    events:\n      - stream: arn:aws:dynamodb:us-east-1:420906024005:table/ClientList/stream/2018-03-27T17:57:25.787\n      - http:\n          path: confirm\n          method: get\n          cors: true\n  postEmail:\n    handler: handlers/ses-post.postEmail\n    events:\n      - http:\n          path: email\n          method: post\n          cors: true\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125579591,"files":["service: capture\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: eu-west-1\n  environment:\n    FROM_ADDRESS: ${env:FROM_ADDRESS} # \"4ARMED Research <someaddress@mailinator.com>\"\n    TO_ADDRESS: ${env:TO_ADDRESS} # \"4ARMED Research <someaddress@mailinator.com>\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n\nfunctions:\n  capture:\n    handler: handler.capture\n    events:\n      - http:\n          path: capture\n          method: post\n          cors: true\n\n"]},{"id":120638503,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n\nfunctions:\n  purchase_btc:\n    handler: handler.start\n    environment:\n      # These are your API keys that you create in GDAX account settings.\n      #   You will need view and trade permissions.\n      #   https://www.gdax.com/settings/api\n      GDAX_KEY: myGdaxKey \n      GDAX_SECRET: myGdaxSecret \n      GDAX_PASSPHRASE: myGdaxPassPhrase\n\n      # Investment amount is how much in USD that will be purchased each run.\n      #  GDAX minimum market purchase is $10 so adjust frequency and amount\n      #  with that minimum in mind.\n      INVESTMENT_AMOUNT: 10\n\n      # If MINIMUM_BALANCE and PHONE_NUMBER are set, a text message will\n      #  be sent out when your current balance plus any pending deposit is\n      #  less than MINIMUM_BALANCE.\n      MINIMUM_BALANCE: 1000\n      PHONE_NUMBER: 18667404531\n    events:\n      # https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html\n      - schedule: cron(00 10 * * ? *)\n  \n  purchase_eth:\n    handler: handler.start\n    environment:\n      GDAX_KEY: myGdaxKey \n      GDAX_SECRET: myGdaxSecret\n      GDAX_PASSPHRASE: myGdaxPassPhrase \n\n      # PRODUCT_ID defaults to BTC-USD, change this to change which currency is bought\n      PRODUCT_ID: ETH-USD \n      INVESTMENT_AMOUNT: 10\n    events:\n      - schedule: cron(00 10 * * ? *)\n"]},{"id":81600337,"files":["service: vote-reminder\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs4.3\r\n  stage: dev\r\n  memorySize: 256\r\n\r\nfunctions:\r\n  request:\r\n    handler: src/callbackValidator.handleRequest\r\n    environment:\r\n      VERIFY_TOKEN: ${file(./sensitive.yml):verifyToken}\r\n    events:\r\n      - http:\r\n          path: message\r\n          method: get\r\n  newMessage:\r\n    handler: src/messageHandler.handleMessage\r\n    environment:\r\n      PAGE_ACCESS_TOKEN: ${file(./sensitive.yml):pageAcessToken}\r\n    events:\r\n      - http:\r\n          path: message\r\n          method: post\r\n  addSite:\r\n    handler: src/addSiteHandler.handleAdd\r\n    environment:\r\n      VERIFY_TOKEN: ${file(./sensitive.yml):verifyToken}\r\n    events:\r\n      - http:\r\n          path: addsite\r\n          method: post\r\n\r\nresources:  \r\n  Resources:\r\n    DynamoDbTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: userTable\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n    DynamoDbTable2:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: siteTable\r\n        AttributeDefinitions:\r\n          - AttributeName: name\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: name\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n    DynamoDBIamPolicy:\r\n      Type: AWS::IAM::Policy\r\n      DependsOn: DynamoDbTable\r\n      Properties:\r\n        PolicyName: lambda-dynamodb\r\n        PolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Action:\r\n                - dynamodb:GetItem\r\n                - dynamodb:PutItem\r\n              Resource: \r\n                - arn:aws:dynamodb:*:*:table/userTable\r\n                - arn:aws:dynamodb:*:*:table/siteTable\r\n        Roles:\r\n          - Ref: IamRoleLambdaExecution\r\n\r\n# You can pin your service to only deploy with a specific Serverless version\r\n# Check out our docs for more details\r\n# frameworkVersion: \"=X.X.X\"\r\n\r\n\r\n# you can overwrite defaults here\r\n#  stage: dev\r\n#  region: us-east-1\r\n\r\n# you can add statements to the Lambda function's IAM Role here\r\n#  iamRoleStatements:\r\n#    - Effect: \"Allow\"\r\n#      Action:\r\n#        - \"s3:ListBucket\"\r\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\r\n#    - Effect: \"Allow\"\r\n#      Action:\r\n#        - \"s3:PutObject\"\r\n#      Resource:\r\n#        Fn::Join:\r\n#          - \"\"\r\n#          - - \"arn:aws:s3:::\"\r\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\r\n\r\n# you can define service wide environment variables here\r\n#  environment:\r\n#    variable1: value1\r\n\r\n# you can add packaging information here\r\n#package:\r\n#  include:\r\n#    - include-me.js\r\n#    - include-me-dir/**\r\n#  exclude:\r\n#    - exclude-me.js\r\n#    - exclude-me-dir/**\r\n\r\n#    The following are a few example events you can configure\r\n#    NOTE: Please make sure to change your handler code to work with those events\r\n#    Check the event documentation for details\r\n\r\n#      - s3: ${env:BUCKET}\r\n#      - schedule: rate(10 minutes)\r\n#      - sns: greeter-topic\r\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\r\n#      - alexaSkill\r\n#      - iot:\r\n#          sql: \"SELECT * FROM 'some_topic'\"\r\n\r\n#    Define function environment variables here\r\n#    environment:\r\n#      variable2: value2\r\n\r\n# you can add CloudFormation resource templates here\r\n#resources:\r\n#  Resources:\r\n#    NewResource:\r\n#      Type: AWS::S3::Bucket\r\n#      Properties:\r\n#        BucketName: my-new-bucket\r\n#  Outputs:\r\n#     NewOutput:\r\n#       Description: \"Description for the output\"\r\n#       Value: \"Some output value\"\r\n"]},{"id":131755069,"files":["service: ecs-events\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:publish\"\n      Resource:\n        - Ref: ECSStateChangeTopic\n\nfunctions:\n  state-change:\n    handler: state-change/index.handler\n    environment:\n      TOPIC_ARN:\n        Ref: ECSStateChangeTopic\n      MODE: errors # possible other values are 'all' and 'success'\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - aws.ecs\n            detail-type:\n              - ECS Task State Change\n            detail:\n              # clusterArn:\n              #   - arn:aws:ecs:eu-west-1:000000000000:cluster/example-cluster-arn\n              lastStatus:\n                - STOPPED\n              stoppedReason:\n                - Essential container in task exited\n                # - Task stopped by user\n\nresources:\n  Outputs:\n    ECSStateChangeTopic:\n      Description: ECS State Change Topic ARN\n      Value:\n        Ref: ECSStateChangeTopic\n  Resources:\n    ECSStateChangeTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ECS State Change\n        TopicName: ECSStateChangeTopic\n    # # Subscribe to SNS topic -> remove #s to enable resource\n    # ECSStateChangeSubscription:\n    #   Type: AWS::SNS::Subscription\n    #   Properties:\n    #     Endpoint: my.email@example.com\n    #     Protocol: email\n    #     TopicArn:\n    #       Ref: ECSStateChangeTopic\n"]},{"id":112973130,"files":["service: dmoney-serverless-boilerplate\n\nprovider:\n    name: aws\n    runtime: nodejs10.x\n    stage: dev\n    # Create your env file and add it to .gitignore\n    # environment: ${file(./.env.json)}\n\nfunctions:\n  main:\n    handler: handler.main\n    events:\n      - http:\n          path: main\n          method: get\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n    printOutput: true\n    location: './bin/'\n\n"]},{"id":91953743,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sample\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  single:\n    handler: handler.single\n    events:\n     - http:\n         path: single\n         method: get\n  multiple:\n    handler: handler.multiple\n    events:\n     - http:\n         path: multiple\n         method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline"]},{"id":85361558,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: voting-app # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.9.0 <2.0.0\"\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 128\n  timeout: 5\n  stage: prod\n\n  region: us-west-1\n\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n      SNS_TOPIC_NAME: ${self:service}-${opt:stage, self:provider.stage}\n      SNS_TOPIC_ARN_TEST: arn:aws:sns:us-west-1:253267020097:voting-app-prod\n      SNS_TOPIC_ARN:\n        Fn::Join:\n          - \":\"\n          - - arn\n            - aws\n            - sns\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - \"${self:provider.environment.SNS_TOPIC_NAME}\"\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: [ \"${self:provider.environment.SNS_TOPIC_ARN}\" ]\n\n\nfunctions:\n  get-results:\n    handler: result/result.get\n    package:\n      include:\n        - result/**\n      exclude:\n        - result/result-ui\n    events:\n      - http:\n          path: result\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.body.headers.ContentType\n              Access-Control-Allow-Origin: \"'*'\"\n            template: $input.path(\"$.body\")\n  worker:\n    handler: worker/worker.saveVote\n    package:\n      include:\n        - worker/**\n    events:\n      - sns:\n          topicName: ${self:provider.environment.SNS_TOPIC_NAME}\n          displayName: ${self:provider.environment.SNS_TOPIC_NAME}\n  get-vote:\n    handler: vote/vote.get\n    package:\n      include:\n        - vote/**\n    events:\n      - http:\n          path: vote\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              headers:\n                Cookie: false\n            headers:\n              Cookie: method.request.header.Cookie\n          response:\n            headers:\n              Content-Type: integration.response.body.headers.ContentType\n              Set-Cookie: integration.response.body.Cookie\n            template: $input.path(\"$.body\")\n  vote:\n    handler: vote/vote.post\n    package:\n      include:\n        - vote/**\n    events:\n      - http:\n          path: vote\n          method: post\n          integration: lambda\n          request:\n             parameters:\n               querystrings:\n                 vote: true\n               headers:\n                 Cookie: false\n             headers:\n               Cookie: method.request.header.Cookie\n          response:\n            headers:\n              #TODO\n              Content-Type: integration.response.body.headers.ContentType\n              Set-Cookie: integration.response.body.Cookie\n              #Content-Type: \"'text/html'\"\n            template: $input.path(\"$.body\")\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n    #votingTopic:\n    #  Type: AWS::SNS::Topic\n    #  Properties:\n    #    DisplayName: ${self:provider.environment.SNS_TOPIC_NAME}\n    #    TopicName: ${self:provider.environment.SNS_TOPIC_NAME}\n    #Outputs:\n    #  QueueNameURL:\n    #    Description: The URL for QueueName\n    #    Value:\n    #      'Fn::GetAtt': [ votingQueue, URL ]\n    #    Export:\n    #      Name: '${self:service}:${opt:stage, self:provider.stage}:QueueNameURL'\n\n"]},{"id":121629630,"files":["service:\n  name: reactServerless\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-finch\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  memorySize: 128\n  timeout: 3\n  reservedConcurrency: 10\n  profile: ${self:custom.profiles.${self:provider.stage}}\n  region: ap-southeast-1\n  apiKeys:\n    - ${self:custom.stage}-serviceKey\n  environment: ${self:custom.env}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER}\"\n\ncustom:\n  defaultStage: dev\n  stage: ${opt:stage, self:custom.defaultStage}\n  profiles:\n    local: serverlessDevProfile\n    dev: serverlessDevProfile\n    prod: serverlessProdProfile\n  serverless-offline:\n    port: 3001\n  client:\n    bucketName: ${opt:distributionFolder, self:custom.env.S3_BUCKET_NAME}\n    distributionFolder: ${opt:distributionFolder, 'client/site/build'}\n  env: ${file(./env-${self:custom.stage}.yml)}\n\nfunctions:\n  servicePing:\n    handler: src/app/handlers/services/ping.handler\n    description: Service online availability test\n    timeout: 1\n    reservedConcurrency: 5\n    events:\n      - http:\n          path: services/ping\n          method: get\n          private: true\n          cors: true\n  cognitoCustomMessage:\n      handler: src/app/handlers/awsCognito/customMessage.handler\n      description: Cognito user signup custom message trigger lambda function\n      timeout: 1\n      memorySize: 256\n  cognitoPostConfirmation:\n      handler: src/app/handlers/awsCognito/postConfirmation.handler\n      description: Cognito user signup post confirmation trigger lambda function\n      memorySize: 1024\n  billingCreateCharge:\n      handler: src/app/handlers/billing/createCharge.handler\n      description: Stripe create new charge\n      events:\n        - http:\n            path: billing/charge\n            method: post\n            private: true\n            cors: true\n\nresources:\n  Resources:\n    CognitoUserPoolReactServerlessUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        UserPoolName: ${self:custom.env.COGNITO_USER_POOL_NAME}\n        EmailConfiguration:\n          ReplyToEmailAddress: ${self:custom.env.SES_MAIL_REPLY_TO}\n        AutoVerifiedAttributes:\n          - email\n        Schema:\n          - AttributeDataType: String\n            Mutable: True\n            Name: email\n            Required: True\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: False\n            RequireSymbols: False\n            RequireUppercase: False\n        LambdaConfig:\n          CustomMessage:\n            Fn::GetAtt: [\"CognitoCustomMessageLambdaFunction\", \"Arn\"]\n          PostConfirmation:\n            Fn::GetAtt: [\"CognitoPostConfirmationLambdaFunction\", \"Arn\"]\n    CognitoUserPoolClientReactServerlessUserPoolClientWebapp:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.env.COGNITO_USER_POOL_CLIENT_NAME_WEBAPP}\n        UserPoolId:\n          Ref: CognitoUserPoolReactServerlessUserPool\n        WriteAttributes:\n          - email\n          - family_name\n          - given_name\n          - phone_number\n    CognitoCustomMessageLambdaPermissionCognitoUserPool:\n      Type: \"AWS::Lambda::Permission\"\n      Properties:\n        FunctionName:\n          Fn::GetAtt: [\"CognitoCustomMessageLambdaFunction\", \"Arn\"]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"cognito-idp.amazonaws.com\"\n        SourceArn:\n          Fn::Join: [\"\", [\"arn:aws:cognito-idp:${self:provider.region}:\", {Ref: \"AWS::AccountId\"}, \":userpool/\", {Ref: CognitoUserPoolReactServerlessUserPool}]]\n    CognitoPostConfirmationLambdaPermissionCognitoUserPool:\n      Type: \"AWS::Lambda::Permission\"\n      Properties:\n        FunctionName:\n          Fn::GetAtt: [\"CognitoPostConfirmationLambdaFunction\", \"Arn\"]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"cognito-idp.amazonaws.com\"\n        SourceArn:\n          Fn::Join: [\"\", [\"arn:aws:cognito-idp:${self:provider.region}:\", {Ref: \"AWS::AccountId\"}, \":userpool/\", {Ref: CognitoUserPoolReactServerlessUserPool}]]\n    DynamoDbUsersTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}"]},{"id":97749874,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-rest-api\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:DescribeTable\n        - dynamodb:Query \n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/contacts\"\n\nfunctions:\n  create:\n    handler: phone-directory/create.create\n    events:\n    - http:\n        path: phone-directory\n        method: post\n        cors: true\n  list:\n    handler: phone-directory/list.list\n    events:\n    - http:\n        path: phone-directory\n        method: get\n        cors: true\n  get:\n    handler: phone-directory/get.get\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: get\n        cors: true\n  update:\n    handler: phone-directory/update.update\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: put\n        cors: true\n  delete:\n    handler: phone-directory/delete.delete\n    events:\n    - http:\n        path: phone-directory/{id}\n        method: delete\n        cors: true\n\nresources:\n  Resources:\n    PhoneDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'contacts'"]},{"id":106115776,"files":["service: mailer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  send:\n    handler: handler.send\n    events:\n      - http:\n          path: send\n          method: post\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n"]},{"id":149179887,"files":["service: tf-lambda-limit-one-entry\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  addLimitLogic:\n    handler: handler.addLimitLogic\n    environment:\n      FORM_ID: 'YOUR_FORM_ID' # Which form you want to update\n      FIELD_ID: 'YOUR_EMAIL_FIELD_ID' # Id of the unique field\n      FIELD_REF: 'YOUR_EMAIL_FIELD_REF' # Ref of the unique field\n      TF_TOKEN: 'TYPEFORM_PERSONAL_TOKEN' #Typeform API token\n      ALREADY_FILLED_FIELD_REF: 'STATEMENT_BLOCK_FIELD_REF' # Ref for the \"already filled\" statement block\n    events:\n      - http: POST addLimitLogic\n"]},{"id":157034200,"files":["\nservice: presidential-alert-app\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\ncustom:\n  s3Sync:\n    - bucketName: ${file(env.yml):S3_BUCKET_NAME}\n      localDir: app\n  cloudfrontInvalidate:\n    distributionIdKey: 'CDNDistributionId'\n    items:\n      - '/*'\n\nplugins:\n  - serverless-s3-sync\n  - serverless-cloudfront-invalidate\n    \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless-profile--presidential-alert-app\n  stage: ${file(env.yml):ENVIRONMENT}\n  environment:\n    S3_BUCKET_NAME: ${file(env.yml):S3_BUCKET_NAME}\n  \nresources:\n  Resources:\n    \n    ## CloudFront Origin Access Identity\n    PAAOriginAccessIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: ${file(env.yml):S3_BUCKET_NAME}\n\n    ## S3 Bucket\n    PAAS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(env.yml):S3_BUCKET_NAME}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    \n    ## S3 Bucket Policy\n    PAAS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: PAAS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal:\n                CanonicalUser: !GetAtt [PAAOriginAccessIdentity, S3CanonicalUserId]\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${file(env.yml):S3_BUCKET_NAME}/*\n\n    ## CloudFront Distribution\n    PAACloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${file(env.yml):S3_BUCKET_NAME}.s3.amazonaws.com\n              S3OriginConfig:\n                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'PAAOriginAccessIdentity']]\n              Id: ${file(env.yml):CLOUDFRONT_DISTRIBUTION_ID}\n          Enabled: 'true'\n          HttpVersion: http2\n          Aliases:\n          - www.presidentialalert.app\n          - presidentialalert.app\n          PriceClass: PriceClass_100\n          DefaultRootObject: index.html\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            DefaultTTL: 86400\n            MinTTL: 86400\n            TargetOriginId: ${file(env.yml):CLOUDFRONT_DISTRIBUTION_ID}\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ViewerProtocolPolicy: redirect-to-https\n          ViewerCertificate:\n            MinimumProtocolVersion: TLSv1.1_2016\n            SslSupportMethod: 'sni-only'\n            AcmCertificateArn: ${file(env.yml):SSL_CERTIFICATE_ARN}\n\n  Outputs:\n    ## CloudFront Distribution Id\n    CDNDistributionId:\n      Description: 'CDN Distribution Id'\n      Value: !Ref PAACloudFrontDistribution\n"]},{"id":77833817,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - alexaSkill\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":128003685,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-aws-node-chrome # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\ncustom:\n  chrome:\n    functions:\n      - hello\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\nfunctions:\n  hello:\n    memorySize: 1024\n    timeout: 45\n    handler: handler.default\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(1 hour)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":127115507,"files":["service:\n  name: newsbot\n\ncustom: ${file(./config.${opt:stage}.js)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${self:custom.aws.profile}\n  stage: ${opt:stage}\n  region: ${self:custom.aws.region}\n  role: ${self:custom.aws.role}\n  description: News Feeder via Serverless\n  environment:\n    STAGE: ${opt:stage}\n\npackage:\n  exclude:\n    - .git/**\n    - \"**test**\"\n\nfunctions:\n  feed:\n    handler: index.feed\n    events:\n      - schedule: rate(${self:custom.newsapi.refresh} minutes)\n"]},{"id":111154808,"files":["service: aws-node-rest-api-mongodb\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user/create\n          method: post\n          cors: true\n\n  updateUser:\n    handler: handler.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n\n  deleteUser:\n    handler: handler.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\n\n  user:\n    handler: handler.user\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n\n  alluser:\n    handler: handler.alluser\n    events:\n      - http:\n          path: user/all\n          method: get\n          cors: true\n\n"]},{"id":107918407,"files":["service: sample-lambda-app\n\ncustom: ${file(conf.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  stage: ${opt:stage, 'dev'}\n\npackage:\n  exclude:\n    - scripts/**\n    - .serverless/**\n    - README.md\n    - spec/**\n    - .travis.yml\n    - node_modules/**  # our code doesn't use any runtime dependency\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n  healthcheck:\n    handler: handler.healthcheck\n    events:\n      - http:\n          path: /healthcheck\n          method: get\n  metadata:\n    handler: handler.metadata\n    environment:\n      GIT_ENV: ${git:sha1}\n    events:\n      - http:\n          path: /metadata\n          method: get\n\nplugins:\n  - serverless-plugin-git-variables\n\nresources:\n  Resources:\n   DnsEntry:\n     Type: 'AWS::Route53::RecordSet'\n     Properties:\n       HostedZoneId: ${self:custom.zoneId}\n       Name: \"${self:provider.stage}.${self:custom.zoneName}\"\n       Type: \"A\"\n       AliasTarget:\n         DNSName: { Fn::GetAtt: [ ApiGatewayDomainName, 'DistributionDomainName'] }\n         HostedZoneId: 'Z2FDTNDATAQYW2'    # https://forums.aws.amazon.com/message.jspa?messageID=493441\n   ApiGatewayDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.certificate}\n        DomainName: \"${self:provider.stage}.${self:custom.zoneName}\"\n   ApiGatewayBase:\n      Type: \"AWS::ApiGateway::BasePathMapping\"\n      DependsOn: HelloLambdaPermissionApiGateway  #https://github.com/serverless/serverless/issues/2233\n      Properties:\n        BasePath: ''\n        DomainName: \"${self:provider.stage}.${self:custom.zoneName}\"\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Stage: ${self:provider.stage}\n"]},{"id":130597810,"files":["service: react-air-server\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  server:\n    handler: lambda.server\n    events:\n      - http:\n          path: server\n          method: get\n          cors: true\n"]},{"id":128112647,"files":["service:\n  name: aws-nodejs-ecma-script\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  vrt_api_mapper:\n    handler: mapper.handler\n    events:\n      - http:\n          method: get\n          cors: true\n          path: '/{channelCode}'\n          request:\n            parameters:\n              paths:\n                channelCode: true\n"]},{"id":183602834,"files":["# Service\nservice: project-name\n\n# plugins\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 120\n  stage: dev\n  region: ap-northeast-1\n  profile: ${file(env.yml):profile}\n  environment: ${file(env.yml):environment}\n  apiKeys:\n    - your-key-name # this will be auto created when you deploy\n  usagePlan:\n    quota:\n      limit: 50000\n      offset: 1\n      period: MONTH\n    throttle:\n      burstLimit: 2000\n      rateLimit: 1000\n\n# custom\ncustom:\n  serverless-offline:\n    port: 4000\n  # splitStacks:\n  #   perFunction: true\n  #   perType: true\n  webpack:\n    webpackConfig: ./webpack.config.js\n\n  webpackIncludeModules:\n      forceInclude:\n        - pg\n  # originHeader:\n  #   - ${file(env.yml):originHeader.DOMAIN_DEV}\n  #   - ${file(env.yml):originHeader.DOMAIN_STG}\n  #   - ${file(env.yml):originHeader.DOMAIN_PROD}\n  #   - ${file(env.yml):originHeader.DOMAIN_LOCAL}\n  headersHeader:\n    - Content-Type\n    - X-Amz-Date\n    - Authorization\n    - X-Api-Key\n    - X-Amz-Security-Token\n    - X-Amz-User-Agent\n    - Access-Control-Allow-Origin\n    - Access-Control-Allow-Credentials\n    - Access-Control-Allow-Headers\n\nfunctions:\n  authorize:\n    handler: middleware/Authentication.handler\n  app:\n    handler: controller/HomeController.index\n    name: homepage\n    events:\n      - http: \n          path: /\n          method: get\n\n  login:\n    handler: controller/AuthController.login\n    name: login\n    events:\n      - http:\n          path: /api/login\n          method: post\n          cors: true\n\n  getUser:\n    handler: controller/AuthController.getUser\n    name: getUser\n    events:\n      - http:\n          path: /api/auth/getUser\n          method: get\n          cors: true\n          authorizer:\n            name: authorize\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n\n"]},{"id":161697084,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# The `service` block is the name of the service\nservice: serverless-services\n\nplugins:\n  # - serverless-dynamodb-local #  DYNAMODB plugin\n  # - serverless-offline-scheduler # SCHEDULING plugin\n  - serverless-offline\n  - serverless-aws-documentation\n\n# exclude the code coverage files, examples and circle ci files\npackage:\n  exclude:\n    - .circleci/**\n    - examples/**\n\ncustom:\n\n  # You must have the documentation object\n  documentation:\n    # this is general info about the API\n    api:\n      info:\n        version: '2'\n        title: Serverless API\n        description: Some example API\n        termsOfService: https://innovic.io\n        contact:\n          name: Miroslav Maksimovic\n          url: https://innovic.io\n          email: miroslavmaksimovic95@gmail.com\n        license:\n          name: The license\n          url: https://www.github.com\n      tags:\n        - name: Tag1\n          description: The first tag\n        - name: Tag2\n          description: That other tag that we all love\n    # Now we describe all the models that we use\n    models:\n      - name: getCryptoCurrency\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: getCryptoCurrencyBitcoinValue\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: getCurrentWeather\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecast\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecastDaily\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getWeatherForecastDaily\n          contentType: \"application/json\"\n          schema:\n            type: object\n      - name: getIP\n          contentType: \"application/json\"\n          schema:\n            type: object\n\n\n      # serverless-offline:\n      #   provider:\n      #     environment: ${file(env.yml)}\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=1.27.3\"\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage} # set the stage based on what Circle Branch is deploying\n  region: eu-west-2 # default is us-east-1\n    # environment: ${file(env.yml)} # for dev - serverless-offline, alternatively pass env vals as options\n    # environment:\n  # SERVICE_USER: ${opt:service_user} # pass in your environment variables as options from Circle\n  # SERVICE_SEC: ${opt:service_sec}\n  # SERVICE_URL: https://innovic.io/\n  cfLogs: true # enable logging\n  apiKeys:\n    -api-key # https://serverless.com/framework/docs/providers/aws/events/apigateway#setting-api-keys-for-your-rest-api\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # logging permissions\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:DescribeLogStreams\n        - logs:PutLogEvents\n        - logs:CreateSubscriptionFilter\n        - logs:PutSubscriptionFilter\n      Resource: \"arn:aws:logs:${opt:region, self:provider.region}:serverless:log-group:/aws/cognito/*\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  getCryptoCurrency:\n    handler: services/cryptocurrency/cryptocurrency.getCryptoCurrency\n    events:\n      - http:\n          path: /cryptocurrency\n          method: get\n          private: true\n          cors: true\n  getCryptoCurrencyBitcoinValue:\n    handler: services/cryptocurrency/cryptocurrency.getCryptoCurrencyBitcoinValue\n    events:\n      - http:\n          path: /cryptocurrency/bitcoinvalue\n          method: get\n          private: true\n          cors: true\n  getCurrentWeather:\n    handler: services/weather/weather.getWeather\n    events:\n      - http:\n          path: /weather\n          method: get\n          private: true\n          cors: true\n  getWeatherForecast:\n    handler: services/weather/weather.getWeatherForecast\n    events:\n      - http:\n          path: /forecast\n          method: get\n          private: true\n          cors: true\n  getWeatherForecastDaily:\n    handler: services/weather/weather.getWeatherForecastDaily\n    events:\n      - http:\n          path: /forecast/daily\n          method: get\n          private: true\n          cors: true\n  getIP:\n    handler: services/ip/ip.getIP\n    events:\n      - http:\n          path: /ip\n          method: get\n          private: true\n          cors: true\n"]},{"id":186234480,"files":["service: ocr-scanner\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - textract:AnalyzeDocument\n        - textract:DetectDocumentText\n        - textract:GetDocumentAnalysis\n        - textract:GetDocumentTextDetection\n        - textract:StartDocumentAnalysis\n        - textract:StartDocumentTextDetection\n      Resource: \"*\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  getImageText:\n    handler: handler.getImageText\n    events:\n      - http:\n          path: image-text\n          method: post\n          cors: true\n  ping:\n    handler: handler.ping\n    events:\n      - http:\n          path: ping\n          method: get\n          cors: true\n"]},{"id":91560191,"files":["service: &service asana-mapper-service\n\ncustom:\n  writeEnvVars:\n    AUTH_SECRET: ${env:AUTH_SECRET}\n    AUTH_TOKEN: ${env:AUTH_TOKEN}\n    STAGE: ${opt:stage}\n    PROJECT_NAME: *service\n    RAYGUN_API_KEY: ${env:RAYGUN_API_KEY}\n    BASE_URL: ${env:BASE_URL}\n    NODE_ENV: ${env:NODE_ENV}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: \"*\"\n\nfunctions:\n  requestsPost:\n    handler: lambdas/requests-post/index.handler\n    timeout: 60\n    events:\n      - http:\n          path: requests\n          method: POST\n          authorizer: auth\n  auth:\n    handler: lambdas/auth/index.handler\n\nOutputs:\n  ServiceName:\n    Description: Service name\n    Value: asana-mapper\n  ServiceVersion:\n    Description: Service version\n    Value: 1\n  ServiceStage:\n    Description: Service deployment stage\n    Value: ${opt:stage}\n  RestApiName:\n    Description: API Gateway Rest API name\n    Value:\n      Fn::Join:\n        - \"-\"\n        -\n          - ${opt:stage}\n          - *service\n  RestApiStage:\n    Description: API Gateway Rest API stage\n    Value: ${opt:stage}\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-write-env-vars\n\n"]},{"id":84245175,"files":["service: droid\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DROID_TABLE: \"${self:service}-${opt:stage, self:provider.stage}-droids\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DROID_TABLE}\"\n    - Effect: Allow\n      Action:\n        - iot:*\n      Resource: \"arn:aws:iot:${opt:region, self:provider.region}:*:*\"\n\npackage:\n  include:\n    - dao/droid-dao.js\n\nfunctions:\n  create:\n    handler: admin/create.create\n    events:\n      - http:\n          path: droids\n          method: post\n          cors: true\n  delete:\n    handler: admin/delete.delete\n    events:\n      - http:\n          path: droids/{id}\n          method: delete\n          cors: true\n  get:\n    handler: admin/get.get\n    events:\n      - http:\n          path: droids/{id}\n          method: get\n          cors: true\n  list:\n    handler: admin/list.list\n    events:\n      - http:\n          path: droids\n          method: get\n          cors: true\n  update:\n    handler: admin/update.update\n    events:\n      - http:\n          path: droids/{id}\n          method: put\n          cors: true\n  color:\n    handler: control/color.color\n    events:\n      - http:\n          path: droids/color/{thingName}\n          method: post\n          cors: true\n  move:\n    handler: control/move.move\n    events:\n      - http:\n          path: droids/move/{thingName}\n          method: post\n          cors: true\n  stop:\n    handler: control/stop.stop\n    events:\n      - http:\n          path: droids/stop/{thingName}\n          method: post\n          cors: true\n      - iot:\n          sql: \"SELECT topic(3) AS thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported.speed > 200\"\n          enabled: true\n\nresources:\n  Resources:\n    DroidsDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: \"${self:provider.environment.DROID_TABLE}\"\n","service: frontend\n\ncustom:\n  bucket: \"${self:service}-${opt:stage, self:provider.stage}-web\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n\n    # Create S3 bucket to store the web application in\n    S3BucketWeb:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.bucket}\n\n    # Create S3 bucket policy to allow CloudFront to access the content\n    S3BucketPolicyWeb:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: S3BucketWeb\n        PolicyDocument:\n          Statement:\n            - Action:\n                - s3:GetObject\n              Effect: Allow\n              Principal: \"*\"\n              Resource: arn:aws:s3:::${self:custom.bucket}/*\n\n    # Create a CloudFront Distribution to serve the application\n    CloudFrontDistributionWeb:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n\n          # Let the web application handle routing\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n\n          DefaultCacheBehavior:\n            ForwardedValues:\n              Cookies:\n                Forward: none\n              QueryString: false\n            TargetOriginId: Web\n            ViewerProtocolPolicy: redirect-to-https\n          DefaultRootObject: index.html\n          Enabled: true\n          HttpVersion: http2\n          Origins:\n            - DomainName: ${self:custom.bucket}.s3.amazonaws.com\n              Id: Web\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n\n  Outputs:\n\n    # Include the domain name in the outputs to show it when running `serverless info --verbose`\n    CloudFrontDistributionDomainName:\n      Value:\n        'Fn::GetAtt': [ CloudFrontDistributionWeb, DomainName ]\n"]},{"id":116685115,"files":["service: haiiku\n\ncustom:\n  table_name: haiiku-${self:provider.stage}\n  post_index_name: post-id-index-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, env:AWS_DEFAULT_REGION, 'us-east-1'}\n  environment:\n    TABLE_NAME: ${self:custom.table_name}\n    POST_INDEX_NAME: ${self:custom.post_index_name}\n    SITE_ID: ${env:SITE_ID}\n    QUERY_LIMIT: ${env:QUERY_LIMIT}\n\nfunctions:\n  get_comments:\n    handler: src/comments.get\n    events:\n      - http:\n          path: comments/{post_id}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                post_id: true\n  put_comment:\n    handler: src/comments.put\n    events:\n      - http:\n          path: comment/{post_id}\n          method: post\n          cors: true\n          request:\n            parameters:\n              paths:\n                post_id: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.table_name}\n        AttributeDefinitions:\n          - AttributeName: site_id\n            AttributeType: S\n          - AttributeName: post_id\n            AttributeType: S\n          - AttributeName: created_at\n            AttributeType: N\n        KeySchema:\n          - AttributeName: site_id\n            KeyType: HASH\n          - AttributeName: created_at\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: ${self:custom.post_index_name}\n            KeySchema:\n              - AttributeName: site_id\n                KeyType: HASH\n              - AttributeName: post_id\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: ${self:custom.table_name}\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/${self:custom.table_name}\n            - Effect: Allow\n              Action:\n                - dynamodb:Query\n              Resource: arn:aws:dynamodb:*:*:table/${self:custom.table_name}/index/${self:custom.post_index_name}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":121924475,"files":["service: serverless-workshop\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  saveEmail:\n    handler: handler.saveEmail\n    events:\n      - http:\n            path: saveEmail/{email}\n            method: get\n            cors: true\n            paths:\n                email: true\n\nresources:\n  Resources:\n    SlsWorkshopTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: email\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":165521563,"files":["service: gh2tg\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n  stage: production\n  region: ap-northeast-2\n  memorySize: 128\n\n  environment:\n    GH2TG_SECRET: ${env:GH2TG_SECRET}\n    GH2TG_TG_TOKEN: ${env:GH2TG_TG_TOKEN}\n    GH2TG_TG_CHATID: ${env:GH2TG_TG_CHATID}\n\nplugins:\n  - serverless-dotenv-plugin\n\nfunctions:\n  push:\n    handler: handler.push\n    events:\n      - http:\n          path: push\n          method: post\n"]},{"id":142443153,"files":["service: github-webhook-listener\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: ${env:SERVERLESS_STAGE, 'dev'}\n  # optional, in MB, default is 1024\n  memorySize: 128\n  # optional, in seconds, default is 6\n  timeout: 3\n  # optional, default is true\n  versionFunctions: false\n\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${env:GITHUB_WEBHOOK_SECRET}\n    TRELLO_TOKEN: ${env:TRELLO_TOKEN}\n    TRELLO_KEY: ${env:TRELLO_KEY}\n    TRELLO_BOARD: ${env:TRELLO_BOARD}\n    TRELLO_CARD_PREFIX: ${env:TRELLO_CARD_PREFIX}\n\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n"]},{"id":159796445,"files":["service:\n  name: multipart-forms-handling\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  test:\n    handler: first.hello\n    events:\n      - http:\n          method: post\n          path: test\ncustom:\n  "]},{"id":189552516,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ses-forwarder # NOTE: update this with your service name\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - Fn::Join:\n          - ''\n          -\n            - Fn::GetAtt: [EmailsBucket, Arn]\n            - '/*'\n    - Effect: Allow\n      Action: ses:SendRawEmail\n      Resource:\n        - \"*\"\n\nfunctions:\n  sesForwarder:\n    handler: handler.sesForwarder\n    memorySize: 128 # default is 1024\n    timeout: 10 # default is 6\n    environment:\n      stage: ${self:custom.stage}\n      bucketName: !Ref EmailsBucket\n\nresources:\n  # Lambda\n  - ${file(resources/lambda-permissions.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # SES\n  - ${file(resources/ses-rule.yml)}\n"]},{"id":30213191,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: call\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: io-serverless-admin\n  memorySize: 512\n\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n\nplugins:\n  - serverless-secrets-plugin\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  #  hello:\n  #    handler: handler.hello\n  #\n  ##    The following are a few example events you can configure\n  ##    NOTE: Please make sure to change your handler code to work with those events\n  ##    Check the event documentation for details\n  #    events:\n  #      - http:\n  #          path: call\n  #          method: any\n  hellotwiml:\n    handler: handler.hellotwiml\n    environment:\n      PHONE_NUMBER: ${self:custom.secrets.PHONE_NUMBER}\n      CALLER_ID: ${self:custom.secrets.CALLER_ID}\n      TIMEZONE: ${self:custom.secrets.TIMEZONE}\n      DOOR_ACCESS_CALENDAR_URL: ${self:custom.secrets.DOOR_ACCESS_CALENDAR_URL}\n    events:\n      - http:\n          path: ${self:service}/twiml\n          method: get\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$\")\n            statusCodes:\n              200:\n                pattern: ''\n                template:\n                  application/json: $input.path(\"$\")\n                headers:\n                  Content-Type: \"'application/xml'\"\n\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sms\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: io-serverless-admin\n  memorySize: 512\n\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\n\nplugins:\n  - serverless-secrets-plugin\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  #  hello:\n  #    handler: handler.hello\n  #\n  ##    The following are a few example events you can configure\n  ##    NOTE: Please make sure to change your handler code to work with those events\n  ##    Check the event documentation for details\n  #    events:\n  #      - http:\n  #          path: call\n  #          method: any\n  hellotwiml:\n    handler: handler.hellotwiml\n    environment:\n      PHONE_NUMBER: ${self:custom.secrets.PHONE_NUMBER}\n      CALLER_ID: ${self:custom.secrets.CALLER_ID}\n      TIMEZONE: ${self:custom.secrets.TIMEZONE}\n      DOOR_ACCESS_CALENDAR_URL: ${self:custom.secrets.DOOR_ACCESS_CALENDAR_URL}\n    events:\n      - http:\n          path: ${self:service}/twiml\n          method: post\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'application/xml'\"\n            template: $input.path(\"$\")\n            statusCodes:\n              200:\n                pattern: ''\n                template:\n                  application/json: $input.path(\"$\")\n                headers:\n                  Content-Type: \"'application/xml'\"\n\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":177579611,"files":["service: release-verfication\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:10\n\nfunctions:\n  versions:\n    handler: index.versions\n    events:\n      - http: GET /api/versions\n  version_files:\n    handler: index.version_files\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}\n          resp: http\n  validate_version_file:\n    handler: index.validate_version_file\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}/validate\n          resp: http\n  version_vote_text:\n    handler: index.version_vote_text\n    events:\n      - http:\n          method: GET\n          path: /api/versions/{version}/vote\n          resp: http\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":181374324,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: blixen-api # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: ANY /\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n# Allow offline development on local devices\nplugins:\n  - serverless-offline\n"]},{"id":147780089,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: example-invoke-deployment # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    invokeAfterDeploy: true\n\n  hello2:\n    handler: handler.hello\n    invokeAfterDeploy:\n      enabled: true\n      payload:\n        varA : varA\n        varB : 20\n        varObject:\n          object1 : a\n          object2 : 1\n        varArray:\n          - a\n          - b\n\n  hello3:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n\nplugins:\n  - serverless-plugin-invoke-deployment"]},{"id":159868061,"files":["service:\n  name: serverless-aws-nodejs-typescript\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":168569031,"files":["service:\n  name: serverless-aws-nodejs-2019\n  publish: false\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    packager: yarn\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  environment: ${file(env.yml):${self:custom.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: ${opt:region, 'us-west-2'}\n  environment: ${self:custom.environment}\n\nfunctions:\n  getFunction:\n    description: Response a JSON with the GET params received\n    handler: handlers/getFunction.handler\n    events:\n      - http:\n          path: get-function\n          method: get\n          cors: true\n\n  postFunction:\n    description: Response a JSON with the POST params received\n    handler: handlers/postFunction.handler\n    events:\n      - http:\n          path: post-function\n          method: post\n          cors: true\n"]},{"id":145272739,"files":["service: sls-meetup-alexa-skill\n\nplugins:\n  - serverless-alexa-skills\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    MEETUP_API_KEY: ${env:MEETUP_API_KEY}\n\ncustom:\n  alexa:\n    vendorId: ${env:AMAZON_VENDOR_ID}\n    clientId: ${env:AMAZON_CLIENT_ID}\n    clientSecret: ${env:AMAZON_CLIENT_SECRET}\n    localServerPort: 9000\n    skills:\n      - id: <YOUR_SKILL_ID_HERE>\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: MeetupEvents\n          apis:\n            custom:\n              endpoint:\n                uri: <YOUR_LAMBDA_FUNCTION_ARB_HERE>\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: meetup events\n                intents:\n                  - name: MeetupIntent\n                    samples:\n                    - 'my events'\n                    - 'my meetup events'\n                    - 'anything interesting in my meetup'\n                    - 'give me all my meetup events'\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n\nfunctions:\n  meetupHandler:\n    handler: index.meetupHandler\n    events:\n      - alexaSkill: <YOUR_SKILL_ID_HERE>\n"]},{"id":79363201,"files":["service: wolf-sample01\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello","service: wolf-sample02\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello\n    events:\n      - http: \n          path: hello\n          method: GET","service: wolf-sample03\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\ncustom:\n  dbTable: \"Wolf-Triggers\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n   - Effect: Allow\n     Action:\n     - dynamodb:*\n     Resource:\n      - \"arn:aws:dynamodb:*:*:table/${self:custom.dbTable}*\"\n   - Effect: Allow\n     Action:\n      - dynamodb:*\n     Resource:\n      - \"arn:aws:dynamodb:*:*:table/${self:custom.dbTable}*/stream/*\"\n\nfunctions:\n  writer:\n    description: \"Write some data on Wolf table\"\n    handler: writer.write\n    environment:\n      DB_TABLE: ${self:custom.dbTable}    \n  listener:\n    description: \"Listen changes on Wolf table\"\n    handler: listener.listen\n\nresources:\n  Resources: \n    WolfDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n    WolfDbTableEvent:\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 1\n        EventSourceArn:\n          Fn::GetAtt:\n            - WolfDbTable\n            - StreamArn      \n        FunctionName:\n          Fn::GetAtt:\n            - ListenerLambdaFunction\n            - Arn\n        StartingPosition: TRIM_HORIZON","service: wolf-sample04\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  timeout: 60\n  memorySize: 128\n\nfunctions:\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello","service: wolf-sample05 #authorize\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\ncustom:\n  s3Bucket: wolf-web-app\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nfunctions:\n  auth:\n    description: Auth0 authorizer func\n    handler: authorizer.check\n    environment:\n      AUTH0_CLIENT_ID: zSIkjbVKVgvROA7jQEfmolnjiWIf567Q\n      AUTH0_CLIENT_SECRET: rOJI4sOSWPe8wsYeCcLhPuQ3W4Nfcb1pFQYTeDN7pDmJr1d_M1f3qB5bkGNw25yQ\n  couponizer:\n    description: get a discount for a beer\n    handler: handler.couponizer\n    events:\n      - http:\n          path: couponizer\n          method: GET\n          cors: true\n          ## Specifying the authorizer lambda\n          authorizer: \n            name: auth\n            resultTtlInSeconds: 0\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WolfAppS3Bucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are available\n    WolfAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WolfAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*","service: wolf-sample06\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n\nplugins:\n  - serverless-plugin-simulate\n\nfunctions:\n  bye:\n    description: \"Hello wolf lambda!\"\n    handler: handler.bye\n    events:\n    - http: \n        path: bye\n        method: GET\n  hello:\n    description: \"Hello wolf lambda!\"\n    handler: handler.hello\n    events:\n      - http: \n          path: hello\n          method: GET\n  generic:\n    description: \"Hello wolf lambda!\"\n    handler: handler.generic\n    events:\n      - http: \n          path: generic/{proxy+}\n          method: GET\n"]},{"id":133937448,"files":["service: performance\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  profile: default\n  timeout: 300\n  versionFunctions: false\n  reservedConcurrency: 2\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: aws.hello128\n    events:\n      - http: GET hello128\n    memorySize: 128\n\n  fibo128:\n    handler: aws.fibo128\n    events:\n      - http: GET fibo128\n    memorySize: 128\n  fibo256:\n    handler: aws.fibo256\n    events:\n      - http: GET fibo256\n    memorySize: 256\n  fibo512:\n    handler: aws.fibo512\n    events:\n      - http: GET fibo512\n    memorySize: 512\n  fibo1024:\n    handler: aws.fibo1024\n    events:\n      - http: GET fibo1024\n    memorySize: 1024\n  fibo2048:\n    handler: aws.fibo2048\n    events:\n      - http: GET fibo2048\n    memorySize: 2048\n\n  fft128:\n    handler: aws.fft128\n    events:\n      - http: GET fft128\n    memorySize: 128\n  fft256:\n    handler: aws.fft256\n    events:\n      - http: GET fft256\n    memorySize: 256\n  fft512:\n    handler: aws.fft512\n    events:\n      - http: GET fft512\n    memorySize: 512\n  fft1024:\n    handler: aws.fft1024\n    events:\n      - http: GET fft1024\n    memorySize: 1024\n  fft2048:\n    handler: aws.fft2048\n    events:\n      - http: GET fft2048\n    memorySize: 2048\n\n  pi128:\n    handler: aws.pi128\n    events:\n      - http: GET pi128\n    memorySize: 128\n  pi256:\n    handler: aws.pi256\n    events:\n      - http: GET pi256\n    memorySize: 256\n  pi512:\n    handler: aws.pi512\n    events:\n      - http: GET pi512\n    memorySize: 512\n  pi1024:\n    handler: aws.pi1024\n    events:\n      - http: GET pi1024\n    memorySize: 1024\n  pi2048:\n    handler: aws.pi2048\n    events:\n      - http: GET pi2048\n    memorySize: 2048\n\n  matrix128:\n    handler: aws.matrix128\n    events:\n      - http: GET matrix128\n    memorySize: 128\n  matrix256:\n    handler: aws.matrix256\n    events:\n      - http: GET matrix256\n    memorySize: 256\n  matrix512:\n    handler: aws.matrix512\n    events:\n      - http: GET matrix512\n    memorySize: 512\n  matrix1024:\n    handler: aws.matrix1024\n    events:\n      - http: GET matrix1024\n    memorySize: 1024\n  matrix2048:\n    handler: aws.matrix2048\n    events:\n      - http: GET matrix2048\n    memorySize: 2048\n\n  sleep128:\n    handler: aws.sleep128\n    events:\n      - http: GET sleep128\n    memorySize: 128\n  sleep256:\n    handler: aws.sleep256\n    events:\n      - http: GET sleep256\n    memorySize: 256\n  sleep512:\n    handler: aws.sleep512\n    events:\n      - http: GET sleep512\n    memorySize: 512\n  sleep1024:\n    handler: aws.sleep1024\n    events:\n      - http: GET sleep1024\n    memorySize: 1024\n  sleep2048:\n    handler: aws.sleep2048\n    events:\n      - http: GET sleep2048\n    memorySize: 2048\n\n  unionfind128:\n    handler: aws.unionfind128\n    events:\n      - http: GET unionfind128\n    memorySize: 128\n  unionfind256:\n    handler: aws.unionfind256\n    events:\n      - http: GET unionfind256\n    memorySize: 256\n  unionfind512:\n    handler: aws.unionfind512\n    events:\n      - http: GET unionfind512\n    memorySize: 512\n  unionfind1024:\n    handler: aws.unionfind1024\n    events:\n      - http: GET unionfind1024\n    memorySize: 1024\n  unionfind2048:\n    handler: aws.unionfind2048\n    events:\n      - http: GET unionfind2048\n    memorySize: 2048\n","service: performance-thesis\n\nprovider:\n  name: azure\n  location: Central US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n    - .gcloud/**\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - package.json\n    - platform/**\n\nfunctions:\n  hello128:\n    handler: azure.hello128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  fibo128:\n    handler: azure.fibo128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo256:\n    handler: azure.fibo256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo512:\n    handler: azure.fibo512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo1024:\n    handler: azure.fibo1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo2048:\n    handler: azure.fibo2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  fft128:\n    handler: azure.fft128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft256:\n    handler: azure.fft256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft512:\n    handler: azure.fft512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft1024:\n    handler: azure.fft1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft2048:\n    handler: azure.fft2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  matrix128:\n    handler: azure.matrix128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix256:\n    handler: azure.matrix256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix512:\n    handler: azure.matrix512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix1024:\n    handler: azure.matrix1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix2048:\n    handler: azure.matrix2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  pi128:\n    handler: azure.pi128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi256:\n    handler: azure.pi256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi512:\n    handler: azure.pi512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi1024:\n    handler: azure.pi1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi2048:\n    handler: azure.pi2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  sleep128:\n    handler: azure.sleep128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep256:\n    handler: azure.sleep256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep512:\n    handler: azure.sleep512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep1024:\n    handler: azure.sleep1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep2048:\n    handler: azure.sleep2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  unionfind128:\n    handler: azure.unionfind128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind256:\n    handler: azure.unionfind256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind512:\n    handler: azure.unionfind512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind1024:\n    handler: azure.unionfind1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind2048:\n    handler: azure.unionfind2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n","service: performance\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: thesis-serverless\n  timeout: 540s\n  credentials: .gcloud/keyfile.json\n  labels:\n    application: Serverless Performance Example\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: hello128\n    events:\n      - http: path\n    memorySize: 128\n\n  fft128:\n    handler: fft128\n    events:\n      - http: path\n    memorySize: 128\n  fft256:\n    handler: fft256\n    events:\n      - http: path\n    memorySize: 256\n  fft512:\n    handler: fft512\n    events:\n      - http: path\n    memorySize: 512\n  fft1024:\n    handler: fft1024\n    events:\n      - http: path\n    memorySize: 1024\n  fft2048:\n    handler: fft2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  fibo128:\n    handler: fibo128\n    events:\n      - http: path\n    memorySize: 128\n  fibo256:\n    handler: fibo256\n    events:\n      - http: path\n    memorySize: 256\n  fibo512:\n    handler: fibo512\n    events:\n      - http: path\n    memorySize: 512\n  fibo1024:\n    handler: fibo1024\n    events:\n      - http: path\n    memorySize: 1024\n  fibo2048:\n    handler: fibo2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  matrix128:\n    handler: matrix128\n    events:\n      - http: path\n    memorySize: 128\n  matrix256:\n    handler: matrix256\n    events:\n      - http: path\n    memorySize: 256\n  matrix512:\n    handler: matrix512\n    events:\n      - http: path\n    memorySize: 512\n  matrix1024:\n    handler: matrix1024\n    events:\n      - http: path\n    memorySize: 1024\n  matrix2048:\n    handler: matrix2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  pi128:\n    handler: pi128\n    events:\n      - http: path\n    memorySize: 128\n  pi256:\n    handler: pi256\n    events:\n      - http: path\n    memorySize: 256\n  pi512:\n    handler: pi512\n    events:\n      - http: path\n    memorySize: 512\n  pi1024:\n    handler: pi1024\n    events:\n      - http: path\n    memorySize: 1024\n  pi2048:\n    handler: pi2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  sleep128:\n    handler: sleep128\n    events:\n      - http: path\n    memorySize: 128\n  sleep256:\n    handler: sleep256\n    events:\n      - http: path\n    memorySize: 256\n  sleep512:\n    handler: sleep512\n    events:\n      - http: path\n    memorySize: 512\n  sleep1024:\n    handler: sleep1024\n    events:\n      - http: path\n    memorySize: 1024\n  sleep2048:\n    handler: sleep2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  unionfind128:\n    handler: unionfind128\n    events:\n      - http: path\n    memorySize: 128\n  unionfind256:\n    handler: unionfind256\n    events:\n      - http: path\n    memorySize: 256\n  unionfind512:\n    handler: unionfind512\n    events:\n      - http: path\n    memorySize: 512\n  unionfind1024:\n    handler: unionfind1024\n    events:\n      - http: path\n    memorySize: 1024\n  unionfind2048:\n    handler: unionfind2048\n    events:\n      - http: path\n    memorySize: 2048\n","service: performance\n\n# self-hosted option\nprovider:\n  name: openwhisk\n  ignore_certs: true\n  timeout: 300\n\nplugins:\n  - serverless-openwhisk\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: openwhisk.hello128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /hello128\n    memory: 128\n\n  fibo128:\n    handler: openwhisk.fibo128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo128\n    memory: 128\n  fibo256:\n    handler: openwhisk.fibo256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo256\n    memory: 256\n  fibo512:\n    handler: openwhisk.fibo512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo512\n    memory: 512\n  fibo1024:\n    handler: openwhisk.fibo1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo1024\n    memory: 512\n  fibo2048:\n    handler: openwhisk.fibo2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo2048\n    memory: 512\n\n  fft128:\n    handler: openwhisk.fft128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft128\n    memory: 128\n  fft256:\n    handler: openwhisk.fft256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft256\n    memory: 256\n  fft512:\n    handler: openwhisk.fft512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft512\n    memory: 512\n  fft1024:\n    handler: openwhisk.fft1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft1024\n    memory: 512\n  fft2048:\n    handler: openwhisk.fft2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft2048\n    memory: 512\n\n  matrix128:\n    handler: openwhisk.matrix128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix128\n    memory: 128\n  matrix256:\n    handler: openwhisk.matrix256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix256\n    memory: 256\n  matrix512:\n    handler: openwhisk.matrix512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix512\n    memory: 512\n  matrix1024:\n    handler: openwhisk.matrix1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix1024\n    memory: 512\n  matrix2048:\n    handler: openwhisk.matrix2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix2048\n    memory: 512\n\n  pi128:\n    handler: openwhisk.pi128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi128\n    memory: 128\n  pi256:\n    handler: openwhisk.pi256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi256\n    memory: 256\n  pi512:\n    handler: openwhisk.pi512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi512\n    memory: 512\n  pi1024:\n    handler: openwhisk.pi1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi1024\n    memory: 512\n  pi2048:\n    handler: openwhisk.pi2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi2048\n    memory: 512\n\n  sleep128:\n    handler: openwhisk.sleep128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep128\n    memory: 128\n  sleep256:\n    handler: openwhisk.sleep256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep256\n    memory: 256\n  sleep512:\n    handler: openwhisk.sleep512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep512\n    memory: 512\n  sleep1024:\n    handler: openwhisk.sleep1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep1024\n    memory: 512\n  sleep2048:\n    handler: openwhisk.sleep2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep2048\n    memory: 512\n\n  unionfind128:\n    handler: openwhisk.unionfind128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind128\n    memory: 128\n  unionfind256:\n    handler: openwhisk.unionfind256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind256\n    memory: 256\n  unionfind512:\n    handler: openwhisk.unionfind512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind512\n    memory: 512\n  unionfind1024:\n    handler: openwhisk.unionfind1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind1024\n    memory: 512\n  unionfind2048:\n    handler: openwhisk.unionfind2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind2048\n    memory: 512\n"]},{"id":205004938,"files":["service: week-cron\ntenant: chiefwizard\napp: cron-database-rollover\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: 'us-east-1'\n  frameworkVersion: \">=1.43.0\"\n  timeout: 900\n  environment:\n    DB_HOST: ${file(./secrets.json):DB_HOST}\n    DB_USER: ${file(./secrets.json):DB_USER}\n    DB_PASS: ${file(./secrets.json):DB_PASS}\n    DB_NAME: ${file(./secrets.json):DB_NAME}\nplugins:\n  - serverless-offline\nfunctions:\n  init:\n    handler: handler.init\n    events:\n      - http:\n          path: /init\n          method: get\n  transfer:\n    handler: handler.transfer\n    events:\n      # every Monday at 03:15 AM\n      - schedule: cron(15 3 ? * MON *)\n"]},{"id":183459395,"files":["service: oauth-workflow\n\ncustom:\n  namespace: ${env:OW_NAMESPACE}\n  shared_namespace: ${env:OW_SHARED_NAMESPACE, 'adobeio'}\n  shared_oauth_package: oauth\n  shared_cache_package: cache\n  client_id: ${env:OAUTH_API_KEY, 'change-me'}\n  client_secret: ${env:CLIENT_SECRET, 'change-me'}\n  scopes: ${env:SCOPES, 'openid,AdobeID'}\n  persistence: ${env:IMS_AUTH_PERSIST, 'false'}\n  accessKeyId: ${env:AWS_ACCESS_KEY_ID, 'XXX'}\n  secretAccessKey: ${env:AWS_SECRET_ACCESS_KEY, 'XXX'}\n  base_url: https://runtime.adobe.io\n  redirect_url: ${env:REDIRECT_URL, 'http://www.adobe.com'}\n  # Cookie path after $(BASE_URL)/api/v1/web/\n  cookie_path: ${env:COOKIE_PATH, self:custom.namespace}\n  # package binding to the shared package\n  adobe_oauth_package: ${env:LOCAL_AUTH_PACKAGE_BINDING, 'myauthp-shared'}\n  adobe_cache_package: ${env:LOCAL_CACHE_PACKAGE_BINDING, 'mycachep-shared'}\n  # package for the auth sequence\n  adobe_auth_seq_package: ${env:LOCAL_AUTH_PACKAGE, 'myauthp'}\n  auth_seq_name: ${self:custom.adobe_auth_seq_package}/authenticate\n\nprovider:\n  name: openwhisk\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-openwhisk\n\nfunctions:\n  # adobe/authenticate sequence\n  authenticate:\n    name: ${self:custom.auth_seq_name}\n    sequence:\n      - /${self:custom.namespace}/${self:custom.adobe_oauth_package}/login\n      - /${self:custom.shared_namespace}/${self:custom.shared_cache_package}/encrypt\n      - /${self:custom.namespace}/${self:custom.adobe_oauth_package}/success\n    annotations:\n      web-export: true\n\n\nresources:\n  packages:\n    adobe-oauth:\n      name: ${self:custom.adobe_oauth_package}\n      binding: /${self:custom.shared_namespace}/${self:custom.shared_oauth_package}\n      parameters:\n        auth_provider: \"adobe-oauth2\"\n        auth_provider_name: \"adobe\"\n        client_id: ${self:custom.client_id}\n        client_secret: ${self:custom.client_secret}\n        scopes: ${self:custom.scopes}\n        persistence: ${self:custom.persistence}\n        callback_url: ${self:custom.base_url}/api/v1/web/${self:custom.namespace}/${self:custom.auth_seq_name}\n        redirect_url: ${self:custom.redirect_url}\n        cookie_path: ${self:custom.cookie_path}\n        cache_namespace: ${self:custom.namespace}\n        cache_package: ${self:custom.adobe_cache_package}\n\n    adobe:\n      name: ${self:custom.adobe_auth_seq_package}\n","service: jwtauth-workflow\n\ncustom:\n  package: ${env:OW_PACKAGE, 'change-me'}\n  namespace: ${env:OW_NAMESPACE}\n  shared_namespace: ${env:OW_SHARED_NAMESPACE, 'adobeio'}\n  shared_oauth_package: oauth\n  shared_cache_package: cache\n  jwt_client_id: ${file(./jwt.json):jwt_client_id}\n  jwt_client_secret: ${file(./jwt.json):jwt_client_secret}\n  technical_account_id: ${file(./jwt.json):technical_account_id}\n  org_id: ${file(./jwt.json):org_id}\n  meta_scopes: ${file(./jwt.json):meta_scopes}\n  private_key: ${file(./jwt.json):private_key}\n  persistence: ${env:IMS_AUTH_PERSIST, 'false'}\n  accessKeyId: ${env:AWS_ACCESS_KEY_ID, 'XXX'}\n  secretAccessKey: ${env:AWS_SECRET_ACCESS_KEY, 'XXX'}\n  base_url: https://runtime.adobe.io\n  redirect_url: ${env:REDIRECT_URL, 'http://www.adobe.com'}\n  adobe_auth_package: ${env:LOCAL_AUTH_PACKAGE_BINDING, 'jwtauthp-shared'}\n  adobe_cache_package: ${env:LOCAL_CACHE_PACKAGE_BINDING, 'jwtcachep-shared'}\n  adobe_auth_seq_package: ${env:LOCAL_AUTH_PACKAGE, 'jwtauthp'}\n  jwtauth_seq_name: ${self:custom.adobe_auth_seq_package}/jwtauthenticate\n\n\nprovider:\n  name: openwhisk\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-openwhisk\n\nfunctions:\n  # adobe/jwtauthenticate sequence\n  jwtauthenticate:\n    name: ${self:custom.jwtauth_seq_name}\n    sequence:\n      - /${self:custom.namespace}/${self:custom.adobe_auth_package}/jwtauth\n    annotations:\n      web-export: true\n\nresources:\n  packages:\n    adobe-oauth:\n      name: ${self:custom.adobe_auth_package}\n      binding: /${self:custom.shared_namespace}/${self:custom.shared_oauth_package}\n      parameters:\n        jwt_client_id: ${self:custom.jwt_client_id}\n        jwt_client_secret: ${self:custom.jwt_client_secret}\n        technical_account_id: ${self:custom.technical_account_id}\n        org_id: ${self:custom.org_id}\n        meta_scopes: ${self:custom.meta_scopes}\n        private_key: ${self:custom.private_key}\n        persistence: ${self:custom.persistence}\n        redirect_url: ${self:custom.redirect_url}\n        cache_namespace: ${self:custom.namespace}\n        cache_package: ${self:custom.adobe_cache_package}\n\n    adobe:\n      name: ${self:custom.adobe_auth_seq_package}\n"]},{"id":127665371,"files":["service: mediocre-saga-sample \n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \n        - \"lambda:InvokeFunction\"\n      Resource: \"arn:aws:lambda:*:*:*\"\n    - Effect: \"Allow\"\n      Action: \n        - \"states:ListStateMachines\"\n        - \"states:StartExecution\"\n        - \"states:GetExecutionHistory\"\n      Resource: \"arn:aws:states:*:*:*\"\n\nfunctions:\n  get-forecast:\n    handler: functions/get-forecast.handler\n\n  get-flight:\n    handler: functions/get-flight.handler\n\n  get-departure:\n    handler: functions/get-departure.handler\n    events:\n      - http:\n          path: /getdeparture/\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n                date: true\n\n  get-departure-steps-fn:\n    handler: functions/get-departure-steps-fn.handler\n    events:\n      - http:\n          path: /getdeparture-step/\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n                date: true\n\n  get-departure-steps-fn-status:\n    handler: functions/get-status.handler\n    events:\n      - http:\n          path: /getdeparture-step/status\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n\nstepFunctions:\n  stateMachines: \n    GetDepartureMachine:\n      definition:\n        Comment: \"Get Departure information\"\n        StartAt: Parallel\n        States:\n          Parallel:\n            Type: Parallel\n            Next: FinalState\n            Branches:\n              - StartAt: GetFlight\n                States:\n                  GetFlight:\n                    Type: Task\n                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-get-flight\n                    End: true\n              - StartAt: GetForecast\n                States:\n                  GetForecast:\n                    Type: Task\n                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-get-forecast\n                    End: true\n          FinalState:\n            Type: Pass\n            End: true\n\n"]},{"id":124128442,"files":["# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\nservice: buefy-shop-serverless\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n\n# Configuration variables\ncustom:\n  secrets: ${file(secrets.json)}\n  prune:\n    automatic: true\n    number: 3\n  webpack:\n    includeModules: true\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  environment:\n    STRIPE_SECRET_KEY: ${self:custom.secrets.stripeSecretKey}\n\n# The `functions` block defines what code to deploy\nfunctions:\n  createCharge:\n    handler: functions/createCharge/createCharge.handler\n    # The `events` block defines how to trigger the handler.createCharge code\n    events:\n      - http:\n          path: charges\n          method: post\n          cors: true\n"]},{"id":168217283,"files":["service: strava-kudos-lambda\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 1536\n  timeout: 60\n  region: eu-west-1\n \nfunctions:\n  kudos:\n    handler: kudos.handler\n    environment:\n      DEBUG: 0\n      STRAVA_CLUB_URL: \"https://strava.com/clubs/28521/recent_activity\"\n    events:\n      - schedule:\n          rate: rate(4 hours)\n          enabled: true\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package\n"]},{"id":156440126,"files":["service: serverless-offline-sqs-tutorial\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: local\n  region: eu-west-2\n\npackage:\n  individually: true\n  exclude:\n  - functions/**\n  - stage_variables/**\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sqs\n  - serverless-domain-manager\n\ncustom:\n  stage: ${file(stage_variables/${opt:stage, self:provider.stage}.yaml)}\n  serverless-offline-sqs:\n    endpoint: http://0.0.0.0:9324\n    region: ${self:provider.region}\n    accessKeyId: root\n    secretAccessKey: root\n\nfunctions:\n  message_producer:\n    handler: functions/function_producer/handler_producer.producer\n    package:\n      include:\n      - functions/function_producer/**/*\n    environment:\n      CAT_FACTS_QUEUE_URL: ${self:custom.stage.sqs.cat_facts.url}\n    events:\n    - http:\n        path: api/cat_facts\n        method: get\n        integration: lambda\n  message_consumer:\n    handler: functions/function_consumer/handler_consumer.consumer\n    package:\n      include:\n      - functions/function_consumer/**/*\n    events:\n      - sqs: ${self:custom.stage.sqs.cat_facts.arn}\n\nresources:\n  Resources:\n    cat_facts:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: cat_facts"]},{"id":144790427,"files":["service: serverless-rekognition\n\nprovider: \n  name: aws\n  runtime: nodejs8.10\n  stage: test\n  environment:\n    ACCESS_KEY_ID: ${file(./serverless.env.yml):prd.ACCESS_KEY_ID}\n    SECRET_ACCESS_KEY: ${file(./serverless.env.yml):prd.SECRET_ACCESS_KEY}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nfunctions:\n  rekognition:\n    handler: src/api.default\n    events:\n      - http: ANY /\n      - http: 'ANY {proxi+}'\n\ncustom:\n  webpackIncludeModules:\n    forceInclude:\n      - request\n"]},{"id":160197874,"files":["service: sls-movies\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  environment: ${file(env.yml)}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\npackage:\n  individually: true\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: false\n    packager: 'yarn'\n\nfunctions: ${file(functions.yml)}\n"]},{"id":194949568,"files":["service: handle-email-bounces-aws-ses \n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${{opt:stage}}\n  region: ${{opt:region}}\n  variableSyntax: '\\${{([\\s\\S]+?)}}'\n\nfunctions:\n\n  handle-bounces:\n    handler: bounces.handler\n    role: HandleBouncesLambdaRole\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - EmailBouncesQueue\n              - Arn\n\nresources:\n  Resources:\n\n    EmailBouncesQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"EmailBouncesQueue\"\n\n    EmailBouncesTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: \"Bounces topic\"\n        TopicName: \"EmailBouncesTopic\"\n\n    BouncesQueueSubscription:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: \n          Ref: EmailBouncesTopic\n        Endpoint: \n          Fn::GetAtt:\n            - EmailBouncesQueue\n            - Arn\n        Protocol: sqs\n        RawMessageDelivery: 'true' \n\n    SnsToSqsSendMessagePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Sid: \"allow-sns-messages\"\n              Effect: Allow\n              Principal: \"*\"\n              Resource: !GetAtt\n                - EmailBouncesQueue\n                - Arn\n              Action: \"SQS:SendMessage\"\n              Condition:\n                ArnEquals:\n                  \"aws:SourceArn\": !Ref EmailBouncesTopic\n        Queues:\n          - Ref: EmailBouncesQueue\n\n    HandleBouncesLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /bounces/\n        RoleName: HandleBouncesLogAccessRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n\n          - PolicyName: HandleBouncesLogPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n\n          - PolicyName: HandleBouncesSQSPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sqs:SendMessage\n                    - sqs:ReceiveMessage\n                    - sqs:DeleteMessage\n                    - sqs:GetQueueAttributes\n                    - sqs:ChangeMessageVisibility\n                  Resource: \n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:sqs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'EmailBouncesQueue'       \n\n          - PolicyName: HandleBouncesLambdaPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - lambda:CreateEventSourceMapping\n                    - lambda:ListEventSourceMappings\n                    - lambda:ListFunctions\n                  Resource: \n                    Fn::Sub: 'arn:aws:lambda:${{opt:region}}:${AWS::AccountId}:function:handle-email-bounces-aws-ses-${{opt:stage}}-handle-bounces'  "]},{"id":167917747,"files":["service: serverless-example # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: scup-serverless-deployments-rc\n\n\nplugins:\n  - serverless-ini-env\n  - serverless-offline\n\ncustom:\n  serverless-ini-env:\n    dev: \"./configs/dev.ini\"\n    prod: \"./configs/prod.ini\"\n\nfunctions:\n  bar:\n    events:\n      - http:\n          path: /bar\n          method: get\n    handler: handler_bar.bar\n  foo:\n    events:\n      - http:\n          path: /foo\n          method: get\n    handler: handler_foo.foo\n"]},{"id":171656170,"files":["service: my-telegram-bot\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  environment:\n    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}\n    TELEGRAM_PROXY: ${env:TELEGRAM_PROXY}\n\nfunctions:\n  processWebhook:\n    handler: handler.processWebhook\n    events:\n      - http:\n          path: /\n          method: post\n"]},{"id":200533685,"files":["service: scrapeit-serverless\n\nprovider:\n  stage: prod\n  name: aws\n  runtime: nodejs8.10\n  timeout: 480\n  region: us-east-1\n\nfunctions:\n  scrapeit:\n    handler: handler.scrapeit\n    events:\n      - http:\n          path: scraper/scrapeit\n          method: post"]},{"id":215326431,"files":["org:\napp: form-handler\nservice: form-handler\n\nprovider:\n    name: aws\n    stage: ${opt:stage, 'dev'}\n    # region us-west-1 doesn't support Lambda logging, hence us-west-2\n    region: us-west-2\n    runtime: nodejs10.x\n\nfunctions:\n    handle:\n        handler: index.handler\n        description: \"Form post endpoint.\"\n        timeout: 10\n        environment:\n            MAILGUN_API_KEY:\n            MAILGUN_DOMAIN:\n            SLACK_CHANNEL:\n            SLACK_ENDPOINT:\n            SITE_NAME:\n            ROOT_REDIRECT:\n            ALLOWED_ORIGINS:\n        events:\n            - http:\n                  path: /\n                  method: get\n                  cors: true\n            - http:\n                  path: /\n                  method: post\n                  cors: true\n            - http:\n                  path: /{proxy+}\n                  method: post\n                  cors: true\n\npackage:\n    exclude:\n        - .ddev/**\n        - .idea/**\n","- name: form endpoint returns 200\n  endpoint:\n      function: handle\n  request:\n      headers:\n          Foo: bar\n      body:\n          email:\n      response:\n          status: 200\n"]},{"id":109114506,"files":["service: serverless-cat-detector\n\nprovider:\n  name: aws\n  region: eu-west-1\n  profile: appliscale-dev\n  runtime: nodejs6.10\n  tracing: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - rekognition:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - xray:*\n      Resource: \"*\"\n\nfunctions:\n  uploadcatpicture:\n    handler: src/upload.saveToS3\n    events:\n      - http:\n          path: upload\n          method: post\n          cors: true\n  getresults:\n    handler: src/results.getClassification\n    events:\n     - http:\n         path: results\n         method: get\n  catrekognition:\n    handler: src/classification.imgClassification\n\nresources:\n  Resources:\n    S3BucketServerlessDashCatDashDetectorDashImgDashRepo:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event:  \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [CatrekognitionLambdaFunction, Arn]\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders: [\"*\"]\n              AllowedMethods: [\"GET\", \"PUT\"]\n              AllowedOrigins: [\"*\"]\n    CatrekognitionLambdaPermissionS3BucketMyBucketDevS3:\n      DependsOn:\n        - CatrekognitionLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ CatrekognitionLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}\"\n    CatStatusDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: 'name'\n            AttributeType: S\n        KeySchema:\n          - AttributeName: 'name'\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: \"${self:custom.catDetectorConfig.serverless_cat_detector_results_table}\"\n\nplugins:\n  - serverless-s3-remover\n  - serverless-plugin-tracing\n\ncustom:\n  catDetectorConfig: ${file(src/config.js)}\n  remover:\n    buckets:\n      - ${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}"]},{"id":49236870,"files":["service: weather-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n\n  environment: ${file(./serverless.env.yml)}\n\npackage:\n  individually: true\n  exclude:\n    - functions/**\n    - lambda/**\n    - '*.spec.js'\n    - .env\n    - .gitignore\n    - .git/**\n    - '*.yml'\n    - .eslintrc\n\nplugins:\n  - serverless-plugin-include-dependencies\n\nfunctions:\n  weather:\n    handler: lambda/weather.handler\n    package:\n      include:\n        - lambda/weather.js\n    \n    events:\n      - http:\n          path: weather\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"lat\": \"$input.params(''lat'')\", \"long\": \"$input.params(''long'')\"}'\n\n  forecast:\n    handler: lambda/forecast.handler\n    package:\n      include:\n        - lambda/forecast.js\n    \n    events:\n      - http:\n          path: forecast\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"lat\": \"$input.params(''lat'')\", \"long\": \"$input.params(''long'')\"}'\n\n  search:\n    handler: lambda/search.handler\n    package:\n      include:\n        - lambda/search.js\n    \n    events:\n      - http:\n          path: search\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"search\": \"$input.params(''search'')\"}'"]},{"id":137862671,"files":["service: contact-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # Set the AWS region to your preference, this is set to London.\n  region: eu-west-2\n\n# Add the required plugins\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\n# Function (lambda) we want to trigger\nfunctions:\n  # Important this and the below 'handler:' are the same as the handler.js exported method\n  contact:\n    handler: handler.contact\n    # This will be triggered on a post, 'http://some_awsurl/contact'\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true"]},{"id":143526638,"files":["service: ${env:SERVICE_NAME, \"chatops-webhook-proxy\"}\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, env:AWS_REGION, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n      SSM_PREFIX: ${env:SSM_PREFIX, \"/service/chatops-webhook-proxy/default/\"}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n        - \"ssm:GetParametersByPath\"\n      Resource:\n        - Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:ssm:\"\n            - Ref: 'AWS::Region'\n            - \":\"\n            - Ref: 'AWS::AccountId'\n            - \":parameter${self:provider.environment.SSM_PREFIX}\"\n        - Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:ssm:\"\n            - Ref: 'AWS::Region'\n            - \":\"\n            - Ref: 'AWS::AccountId'\n            - \":parameter${self:provider.environment.SSM_PREFIX}*\"\n\nfunctions:\n  webhook:\n    handler: index.webhook\n    events:\n      - http:\n          path: webhook/{serviceName}\n          method: any\n          request:\n            parameters:\n              paths:\n                serviceName: true\n","---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Cloudformation stack to manage permission to deploy a serverless service'\n\nParameters:\n  ServiceName:\n    Description: Name of the Service you want to deploy\n    Type: String\n\nResources:\n  ServerlessDeployBot:\n    Type: AWS::IAM::User\n    Properties:\n      ManagedPolicyArns:\n      - !Ref ServelessDeployCFPolicy\n      - !Ref ServelessDeployS3Policy\n      - !Ref ServelessDeployLogsPolicy\n      - !Ref ServelessDeployIAMPolicy\n      - !Ref ServelessDeployLambdaPolicy\n\n  ServerlessDeployBotAccessKey:\n    Type: AWS::IAM::AccessKey\n    Properties:\n      UserName: !Ref ServerlessDeployBot\n\n  ServelessDeployCFPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action: 'cloudformation:ValidateTemplate'\n            Resource: '*'\n\n          - Effect: Allow\n            Action:\n            - 'cloudformation:Describe*'\n            - 'cloudformation:List*'\n            - 'cloudformation:Get*'\n            - 'cloudformation:PreviewStackUpdate'\n            - 'cloudformation:CreateStack'\n            - 'cloudformation:UpdateStack'\n            Resource:\n            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ServiceName}-*'\n\n  ServelessDeployS3Policy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 's3:Get*'\n            - 's3:List*'\n            Resource:\n            - !Sub 'arn:aws:s3:::${ServiceName}-*'\n\n          - Effect: Allow\n            Action:\n            - 's3:*'\n            Resource:\n            - !Sub 'arn:aws:s3:::${ServiceName}-*/*'\n\n  ServelessDeployLogsPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'logs:DescribeLogGroups'\n            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:*'\n\n          - Effect: Allow\n            Action:\n            - 'logs:CreateLogGroup'\n            - 'logs:CreateLogStream'\n            - 'logs:DeleteLogGroup'\n            - 'logs:DeleteLogStream'\n            - 'logs:DescribeLogStreams'\n            - 'logs:FilterLogEvents'\n            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*'\n\n  ServelessDeployIAMPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'iam:GetRole'\n            - 'iam:PassRole'\n            - 'iam:CreateRole'\n            - 'iam:DeleteRole'\n            - 'iam:DetachRolePolicy'\n            - 'iam:PutRolePolicy'\n            - 'iam:AttachRolePolicy'\n            - 'iam:DeleteRolePolicy'\n            Resource:\n            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-*-lambdaRole'\n\n  ServelessDeployLambdaPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'apigateway:GET'\n            - 'apigateway:POST'\n            - 'apigateway:PUT'\n            - 'apigateway:DELETE'\n            Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis'\n\n          - Effect: Allow\n            Action:\n            - 'apigateway:GET'\n            - 'apigateway:POST'\n            - 'apigateway:PUT'\n            - 'apigateway:DELETE'\n            Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/*'\n\n          - Effect: Allow\n            Action:\n            - 'lambda:*'\n            Resource:\n            - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ServiceName}-*'\n\n          - Effect: Allow\n            Action:\n            - 'ec2:DescribeSecurityGroups'\n            - 'ec2:DescribeSubnets'\n            - 'ec2:DescribeVpcs'\n            Resource: '*'\n\n          - Effect: Allow\n            Action:\n            - 'events:Put*'\n            - 'events:Remove*'\n            - 'events:Delete*'\n            - 'events:Describe*'\n            Resource:\n            - !Sub 'arn:aws:events::${AWS::AccountId}:rule/${ServiceName}-*'\n\nOutputs:\n  ServerlessDeployBotAccessKey:\n    Value: !Ref ServerlessDeployBotAccessKey\n    Export:\n      Name: !Sub '${AWS::StackName}-ServerlessDeployBotAccessKey'\n\n"]},{"id":135507019,"files":["service: serverless-graphql\n\nplugins: \n  - serverless-pseudo-parameters\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: dynamodb:GetItem\n      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_users\n    - Effect: Allow\n      Action: dynamodb:scan\n      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_orders\n\nfunctions:\n  graphql:\n    handler: functions/graphql.handler\n    events:\n      - http:\n           path: /graphql\n           method: post\n    environment:\n      tableOrders: ${self:custom.stage}_orders\n      tableUsers: ${self:custom.stage}_users\n\nresources:\n  Resources:\n    ordersTable:\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: ${self:custom.stage}_orders\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id \n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    \n    usersTable:\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: ${self:custom.stage}_users\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":140273460,"files":["service: s3-cp-lambda\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:PutBucketNotification\"\n    - \"s3:ListBucket\"\n    Resource: \"arn:aws:s3:::${opt:sourcebucket}\"\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:GetObject\"\n    Resource: \"arn:aws:s3:::${opt:sourcebucket}/*\"\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:PutObject\"\n    Resource: \"*\"\n\nplugins:\n - serverless-plugin-existing-s3\n\nfunctions:\n  s3-cp:\n    handler: s3-cp.handler\n    environment:\n      DEST_BUCKETS: ${opt:destbuckets}\n    events:\n    - existingS3:\n        bucket: ${opt:sourcebucket}\n        events:\n        - s3:ObjectCreated:*\n        rules:\n        - prefix: \"${opt:prefix}\"\n    \n\n"]},{"id":139329211,"files":["service: sqs-lambda-worker-demo\n\n\nplugins:\n  - serverless-webpack # Use serverless-webpack plugin to transpile ES6/ES7\n  - serverless-offline\n  # - serverless-domain-manager\n  # - serverless-plugin-aws-alerts\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn'\n    package:\n        individually: true #Webpack compiles and optimizes each function individually,\n        # removing unnecessary imports and reducing code sizes significantly\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n      # QUEUE: ${ssm:/${self:custom.stage}/sqs-lambda/queue-name~true}\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:*\n    Resource: arn:aws:sqs:ap-southeast-2:xxx:sqs-lambda-example-queue\n\n\nfunctions:\n  worker:\n    handler: src/worker.default\n    events:\n      - sqs:\n          arn: arn:aws:sqs:ap-southeast-2:xxx:sqs-lambda-example-queue\n          batchSize: 10\n    description: worker fn consuming from sqs\n    reservedConcurrency: 5\n  producer:\n    handler: src/producer.default\n"]},{"id":102319190,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: getAwsRoleCred\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\n\ncustom:\n  aws_region: us-east-1\n  user_pool_id: us-east-1_XXXXXXXXXX\n  identity_pool_id: us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\n\nfunctions:\n  getAwsRoleCred:\n    handler: getAwsRoleCred.getAwsRoleCred\n    environment:\n      REGION: ${self:custom.aws_region}\n      USER_POOL_ID: ${self:custom.user_pool_id}\n      IDENTITY_POOL_ID: ${self:custom.identity_pool_id}\n      admin_group_name: arn:aws:iam::XXX456789:role/my-admin-role\n    events:\n      - http:\n          path: getAwsRoleCred\n          method: post\n          cors: true\n          authorizer: aws_iam\n  adminOnlyFcn:\n    handler: adminOnly.adminOnlyFcn\n    environment:\n      REGION: ${self:custom.aws_region}\n      USER_POOL_ID: ${self:custom.user_pool_id}\n      IDENTITY_POOL_ID: ${self:custom.identity_pool_id}      \n    events:\n      - http:\n          path: adminOnly\n          method: get\n          cors: true\n          authorizer: aws_iam\n"]},{"id":115527128,"files":["service: topws-serverless\n\nplugins:\n  - serverless-webpack\n  - serverless-finch\n  - serverless-plugin-export-endpoints\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  webpack: ./config/webpack/serverless.js\n  webpackIncludeModules:\n    packagePath: './package.json'\n  client:\n    bucketName: ${self:service}-${self:custom.stage}-static\n    distributionFolder: static-dist\n  authorizer:\n    facebook:\n      name: authorizerFacebook\n      type: TOKEN\n      resultTtlInSeconds: 0\n      identitySource: method.request.header.Authorization\n      identityValidationExpression: Bearer (.*)\n  sns:\n    telegram: ${self:service}-telegram\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"TOPWSUsers\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"TOPWSConfig\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource:\n        - { \"Ref\": \"TOPWSTelegram\" }\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - logs:DescribeLogGroups\n        - logs:DescribeSubscriptionFilters\n        - logs:PutSubscriptionFilter\n      Resource: \"*\"\n  environment:\n    TABLE_USERS: { \"Ref\": \"TOPWSUsers\" }\n    TABLE_CONFIGURATION: { \"Ref\": \"TOPWSConfig\" }\n    SNS_TELEGRAM: { \"Ref\": \"TOPWSTelegram\" }\n    LAMBDA_SCRAPE: ${self:service}-${opt:stage, self:provider.stage}-user-scrape\n\nfunctions:\n  user-list:\n    handler: lambda/online.list\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\n  user-vote:\n    handler: lambda/online.vote\n    events:\n      - http:\n          path: users/{userId}/vote\n          method: put\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n\n  user-scrape:\n    handler: lambda/batch.scrape\n\n  config-get:\n    handler: lambda/configuration.get\n    events:\n      - http:\n          path: config/{configKey}\n          method: get\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n          request:\n            parameters:\n              paths:\n                configKey: true\n\n  config-list:\n    handler: lambda/configuration.list\n    events:\n      - http:\n          path: config\n          method: get\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n\n  config-set:\n    handler: lambda/configuration.set\n    events:\n      - http:\n          path: config\n          method: post\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n\n  authorizerFacebook:\n    handler: lambda/authorizer.facebook\n\n  telegram-handleMessage:\n    handler: lambda/telegram.handleMessage\n    events:\n     - http:\n        path: telegram\n        method: post\n\n  telegram-registerEndpoint:\n    handler: lambda/telegram.registerEndpoint\n\n  dispatchToTelegram:\n    handler: lambda/telegram.forwardSNS\n    events:\n      - sns:\n          arn:\n            Fn::Join:\n              - \"\"\n              - - \"arn:aws:sns:\"\n                - Ref: \"AWS::Region\"\n                - \":\"\n                - Ref: \"AWS::AccountId\"\n                - \":\"\n                - ${self:custom.sns.telegram}\n          topicName: ${self:custom.sns.telegram}\n\n  dispatchLogs:\n    handler: lambda/logs.handle\n    # events:\n    #   - cloudwatchLog: /aws/lambda/topws-serverless-${self:custom.stage}-*\n\n  subscribeToLogs:\n    handler: lambda/logs.subscribe\n    environment:\n      DEST_FUNC:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:lambda:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":function:\"\n            - ${self:service}\n            - \"-\"\n            - ${self:custom.stage}\n            - \"-dispatchLogs\"\n    # events:\n    #   - cloudwatchEvent:\n    #       event:\n    #         source:\n    #           - aws.logs\n    #         detail-type:\n    #           - AWS API Call via CloudTrail\n    #         detail:\n    #           eventSource:\n    #             - logs.amazonaws.com\n    #           eventName:\n    #             - CreateLogGroup\n\nresources:\n  Resources:\n    TOPWSTelegram:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: Telegram messages pipeline\n        TopicName: ${self:custom.sns.telegram}\n    TOPWSUsers:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    TOPWSConfig:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      DependsOn: DispatchLogsLambdaFunction\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:lambda:\"\n              - Ref: \"AWS::Region\"\n              - \":\"\n              - Ref: \"AWS::AccountId\"\n              - \":function:\"\n              - ${self:service}\n              - \"-\"\n              - ${self:custom.stage}\n              - \"-dispatchLogs\"\n        Principal:\n          Fn::Join:\n            - \"\"\n            - - \"logs.\"\n              - Ref: \"AWS::Region\"\n              - \".amazonaws.com\"\n"]},{"id":134432189,"files":["service: serverless-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    SUPER_SECRET: ${file(./env.json):SUPER_SECRET}\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule: rate(1 minute)"]},{"id":140796492,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n#\n# opt params\n#  - stack - pulls AWS(SSM) from cloud formation setup\n#  - stage - gets appended to service name 'polly-api'\n#  - region - AWS region to use\n#\nservice: polly-api\n\n\n# used for readability\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  stack: ${opt:stack, 'pollybase'} # base reference stack\n\n  pollydb: ${ssm:/${self:custom.stack}/pollyDB}\n  audiobucket: ${ssm:/${self:custom.stack}/audioBucketName}\n  newpoststopic: ${ssm:/${self:custom.stack}/newPostsTopic}\n  domainname: ${ssm:/${self:custom.stack}/domainName}\n  hostname: ${ssm:/${self:custom.stack}/apiHostName}\n  acmarn: ${ssm:/${self:custom.stack}/apiAcmArn}\n\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - ${self:custom.pollydb}\n            - \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetBucketLocation\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:s3:::\"\n            - ${self:custom.audiobucket}\n            - \"*\"\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource: \"${self:custom.newpoststopic}\"\n    - Effect: Allow\n      Action:\n        - polly:SynthesizeSpeech\n      Resource: \"*\"\n\n  environment:\n    STAGE: ${self:custom.stage}\n    DB_TABLE_NAME: ${self:custom.pollydb}\n    SNS_TOPIC: ${self:custom.newpoststopic}\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  pollyapi:\n    handler: handler.apihandler\n    tags:\n      created: serverless.yaml from polly project\n      Name: handles API calls for Polly UI\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n      - http:\n          path: /\n          method: post\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Origin\n            allowCredentials: false\n\n  convertaudio:\n    handler: convert_audio.lambda_handler\n    tags:\n      created: serverless.yaml from polly project\n      Name: Lambda function to convert text to audio\n    events:\n      - sns: ${self:custom.newpoststopic}\n    environment:\n      BUCKET_NAME: ${self:custom.audiobucket}\n\n\n\nresources:\n  Resources:\n    ApiGatewayDomain:\n      Type: 'AWS::ApiGateway::DomainName'\n      Properties:\n        DomainName: ${self:custom.hostname}.${self:custom.domainname}\n        CertificateArn: ${self:custom.acmarn}\n\n    ApiGatewayMapping:\n      Type: 'AWS::ApiGateway::BasePathMapping'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        DomainName: { \"Ref\" : ApiGatewayDomain }\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    ApiGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId: { \"Ref\" : ApiGatewayRestApi }\n\n    MyDNSRecord:\n      Type: 'AWS::Route53::RecordSetGroup'\n      DependsOn: ApiGatewayDomain\n      Properties:\n        HostedZoneName: { \"Fn::Sub\" : \"${self:custom.domainname}.\" }\n        RecordSets:\n          - Type: A\n            Name: ${self:custom.hostname}.${self:custom.domainname}\n            AliasTarget:\n              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront\n              DNSName: { \"Fn::GetAtt\" : ApiGatewayDomain.DistributionDomainName }\n\n  Outputs:\n    ExportServiceEndpoint:\n      Description: \"URL Endpoint for the REST Service\"\n      Value:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"https://\"\n            - Ref: \"ApiGatewayRestApi\"\n            - \".execute-api.\"\n            - Ref: \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - ${self:custom.stage}\n      Export:\n        Name: ${self:service}-${self:custom.stage}-PollyServiceEndPoint\n"]},{"id":101562132,"files":["service: elm-serverless-auth-jwt-demo\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    dontPrintOutput: true\n\nfunctions:\n  hello:\n    handler: src/Auth/api.handler\n    events:\n      - http:\n          integration: lambda-proxy\n          path: /\n          method: ANY\n"]},{"id":96488255,"files":["service: glad-starter\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nresources:\n  Resources:\n    users:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          - AttributeName: username\n            AttributeType: S\n        KeySchema:\n          - AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nfunctions:\n  signup:\n    handler: src/authentication.signup\n    events:\n      - http:\n          path: signup\n          method: post\n  login:\n    handler: src/authentication.login\n    events:\n      - http:\n          path: login\n          method: post\n  logout:\n    handler: src/authentication.logout\n    events:\n      - http:\n          path: logout\n          method: post\n\n  graphql_get:\n    handler: src/graphql.get\n    events:\n      - http:\n          path: graphql\n          method: get\n  graphql_post:\n    handler: src/graphql.post\n    events:\n      - http:\n          path: graphql\n          method: post\n"]},{"id":111494730,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hello-serverless\n\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":82578019,"files":["service: serverless-lambda-boilerplate\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: %branch%\n  region: eu-west-1\n  iamRoleStatements:\n      -  Effect: \"Allow\"\n         Action:\n           - \"s3:ListBucket\"\n           - \"s3:PutObject\"\n           - \"s3:GetObject\"\n         Resource: arn:aws:s3:::*\n\nfunctions:\n  usersGet:\n    handler: userHandler.users\n    events:\n      - http:\n          path: users\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userGet:\n    handler: userHandler.user\n    events:\n      - http:\n          path: user\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n\n  userCreate:\n    handler: userHandler.create\n    events:\n      - http:\n          path: user\n          method: post\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userUpdate:\n    handler: userHandler.update\n    events:\n      - http:\n          path: user\n          method: put\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false\n  userDelete:\n    handler: userHandler.delete\n    events:\n      - http:\n          path: user\n          method: delete\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: false"]},{"id":111848923,"files":["service: sgrcoed\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverlessSGRCOED\n\nfunctions:\n  getDepartamentos:\n    handler: handler.getDepartamentos\n    events:\n      - http:\n          path: get/getDepartamentos\n          method: get\n          cors: true\n\n  helloWorld:\n    handler: handler.helloWorld\n    events:\n      - http:\n          path: get/helloWorld\n          method: get\n          cors: true"]},{"id":99508321,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  buffer:\n    handler: handler.buffer\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http: POST buffer\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":109226681,"files":["service: serverless-wechat\n\nplugins:\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 120\n  region: us-east-1\n\nfunctions:\n  runserver:\n    handler: handler.runserver\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      TOKEN: ${file(./config.yml):TOKEN}\n      APP_ID: ${file(./config.yml):APP_ID}\n      AESKey: ${file(./config.yml):AESKey}\n\ncustom:\n  customDomain:\n    domainName: wechat.wdsm.io\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n"]},{"id":85168474,"files":["service: slackBot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\ncustom:\n  secrets: ${file(secrets.yml)}\n  dev: dev\n  prod: bookmarks\n\nfunctions:\n  bookmark:\n    handler: handler.bookmark\n    environment:\n      SLACK_TOKEN: ${self:custom.secrets.SLACK_TOKEN}\n      SLACK_BOOKMARK_CHANNEL: ${self:custom.${opt:stage, self:provider.stage}}\n    events:\n     - http: \n        path: add\n        method: POST\n        cors: true\n"]},{"id":121390115,"files":["service: ${env:SERVICE_NAME}\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    forceExclude:\n      - aws-sdk\n      - serverless\n    packager: 'yarn'\n  cors:\n    origin: '*'\n    headers:\n      - Content-Type\n      - X-StorageApi-Token\n      - X-Amz-Date\n      - X-Amz-Security-Token\n      - X-Amz-User-Agent\n    allowCredentials: false\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:REGION}\n  stage: ${env:STAGE}\n  memorySize: 128\n  timeout: 30\n  versionFunctions: false\n  deploymentBucket:\n    name: \"${env:SERVICE_NAME}-${env:REGION}-deployment\"\n  cfnRole: ${env:CLOUDFORMATION_ROLE_ARN}\n  role: ${env:LAMBDA_EXECUTION_ROLE_ARN}\n  stackTags:\n    KeboolaStack: ${env:KEBOOLA_STACK}\n  environment:\n\npackage:\n  individually: true\n  include:\n    - src/**\n    - node_modules/**\n  exclude:\n    - .codeclimate.yml\n    - .env\n    - .env.template\n    - .eslintignore\n    - .eslintrc.json\n    - .git/**\n    - .gitignore\n    - .travis.yml\n    - cf-stack.json\n    - docker-compose.yml\n    - Dockerfile\n    - LICENSE\n    - README.md\n    - yarn.lock\n    - test/**\n\nfunctions:\n\n  handler:\n    handler: src/lambda.handler\n    tags:\n      KeboolaStack: ${env:KEBOOLA_STACK}\n    events:\n      -\n        http:\n          method: get\n          path: \"/\"\n          cors: ${self:custom.cors}\n"]},{"id":138509190,"files":["service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  awsToTgNotifier:\n    handler: src/functions/awsToTgNotifier\n    name: AwsToTgNotifier\n    description: Aggregate info about AWS services availability and push notifications to Telegram\n    memorySize: 128\n    timeout: 60\n"]},{"id":159403238,"files":["service: serverless-aws-node-starter\n\npackage:\n  individually: true\n  exclude:\n    - \"*\"\n    - .output/**\n    - docs/**\n    - src/**\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:STAGE, 'dev'}\n  region: ${opt:AWS_REGION, 'eu-west-1'}\n  tags:\n    PROJECT: ${self:service}\n\nplugins:\n  - serverless-aws-documentation\n  - serverless-offline\n  - serverless-stack-output\n\ncustom:\n  output:\n    file: .serverless/output.json\n  documentation: ${file(./docs/docs.yml):custom.documentation}\n\nfunctions:\n  hello: ${file(./src/handler.yml):functions.hello}\n"]},{"id":162491125,"files":["frameworkVersion: \">=1.54.0 <2.0.0\"\n\nservice: serverless-site-config-github-check\n\nplugins:\n    - serverless-webpack\n    - serverless-offline\n\ncustom:\n    webpack:\n        includeModules: true\n        packager: yarn\n        packagerOptions:\n            ignoreScripts: true\n\nprovider:\n    name: aws\n    runtime: nodejs12.x\n    profile: default\n    region: ${opt:region, 'eu-west-1'}\n    environment:\n        NAMESPACE: Site config\n        # SecureString from SSM Parameters\n        GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\nfunctions:\n    extension:\n        handler: handler.checkExtension\n        description: Validate file extensions\n        events:\n            -\n                http:\n                    path: webhook/extension\n                    method: post\n                    cors: true\n"]},{"id":106674404,"files":["service: elmServerless\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.yml):${self:custom.stage}}\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'dev'}\n  runtime: nodejs6.10\n  region: eu-west-2\n  profile: default\n  environment:\n    GLOBAL_VAR:\"${self:custom.secrets.GLOBAL_VAR}\"\n    ENV_DEPENDENT_VAR:\"${self:custom.secrets.ENV_DEPENDENT_VAR}\"\n\nfunctions:\n  hello:\n    handler: app/handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n          cors: true\n"]},{"id":147960482,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: todo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:AWS_REGION, 'eu-west-1'}\n  stage: dev\n  stackTags:\n    STACK: \"todo\"\n  # optional, in MB, default is 1024, min 128\n  memorySize: 128\n  # optional, in seconds, default is 6\n  timeout: 6\n  # optional, default is true\n  versionFunctions: false\n  # IAM custom roles\n  iamRoleStatements:\n    # Allow access to DynamoDB in role\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [ \"TodoDynamoDBTable\", \"Arn\" ] }\n    # Allow publishing message in our own queue\n    - Effect: Allow\n      Action:\n        - sqs:GetQueueAttributes\n        - sqs:SendMessage\n        - sqs:DeleteMessage\n        - sqs:ReceiveMessage\n        - sqs:GetQueueUrl\n      Resource:\n        - { \"Fn::GetAtt\": [ \"TodoEventQueue\", \"Arn\" ] }\n        \n  # Define additional env vars for deployment\n  environment:\n    TODO_TABLE: ${self:custom.todoTable}\n    TODO_EVENT_QUEUE: ${self:custom.todoEventQueue}\n    API_URL: ${self:custom.apiUrlByCustomDomain.${env:CUSTOM_DOMAIN_ENABLED, 'false'}}\n\ncustom:\n  todoTable: 'todos'\n  todoEventQueue: 'todos-events'\n  # If set, CDN bucket will be created\n  cdnBucketName: ${env:CDN_BUCKET, ''}\n  # Set API_URL by custom domain here\n  apiUrlByCustomDomain:\n    true: https://${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}/api\n    false: 'http://localhost:3000/api'\n  # Make special webpack transpiling for Serverless\n  webpack:\n    webpackConfig: ./webpack.serverless.js\n    includeModules: true\n    packager: 'npm'\n  # Create custom domain and serve it using https://$CUSTOM_DOMAIN/* -> <api endpoint>/*\n  customDomain:\n    domainName: ${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}\n    createRoute53Record: true\n    enabled: ${env:CUSTOM_DOMAIN_ENABLED, 'false'}\n  # Add binary images as handled in API gateway\n  apigwBinary:\n    types:\n      - 'image/*'\n      - 'application/font*'\n      - 'application/pdf'\n  s3Sync:\n    - bucketName: ${self:custom.cdnBucketName, 'undefined'}\n      localDir: ./dist\n      acl: public-read\n      followSymlinks: true\n      defaultContentType: application/octet-stream\n      params:\n        - \"*.*\":\n            CacheControl: 'no-cache'\n\npackage:\n  exclude:\n    - tmp/**\n    - node_modules/aws_sdk/**\n\nfunctions:\n  app:\n    handler: server.serverless\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n      - http:\n          # List all todos\n          path: api/todo\n          method: get\n      - http:\n          # Get all queue\n          path: api/queue\n          method: get\n      - http:\n          # Add new todo\n          path: api/todo\n          method: post\n      - http:\n          # Get one todo\n          path: api/todo/{any+}\n          method: get\n      - http:\n          # Update todo\n          path: api/todo/{any+}\n          method: post\n      - http:\n          # Update todo\n          path: api/todo/{any+}\n          method: delete\n      - http:\n          # Reinit todo db\n          path: api/init\n          method: post\n  event:\n    handler: server.receiveEvent\n    events:\n      - sqs:\n          # Invoke function once for every message\n          batchSize: 1\n          arn:\n            Fn::GetAtt:\n              - TodoEventQueue\n              - Arn\nplugins:\n  - serverless-webpack\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-offline\n  - serverless-s3-sync\n\nresources:\n  Conditions:\n    CreateCdnBucket:\n      Fn::Not:\n        - Fn::Equals:\n          - ${self:custom.cdnBucketName, ''}\n          - ''\n  Resources:\n    TodoDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 3\n        TableName: ${self:custom.todoTable}\n    TodoEventQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ${self:custom.todoEventQueue}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n    CdnBucket:\n      Type: AWS::S3::Bucket\n      Condition: CreateCdnBucket\n      Properties:\n        BucketName: ${self:custom.cdnBucketName, 'undefined'}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n"]},{"id":154576692,"files":["service:\n  name: nametag-example\n\n\nplugins:\n  localPath: ../../\n  modules:\n    - serverless-plugin-nametag\n\n\npackage:\n  include:\n    - \"handler.js\"\n\n\ncustom:\n  nametag:\n    tag: true\n\n\nprovider:\n  name: aws\n  stage: ${opt:stage, \"dev\"}\n  region: ${opt:region, \"us-east-1\"}\n  logRetentionInDays: 30\n  runtime: python3.6\n\n  tags:\n    MyTag: IsCool\n    AnotherTag: there\n\n  environment:\n\n\nfunctions:\n  ExampleOne:\n    description: 'Tags will be { \"Name\": \"nametag-example-dev-ExampleOneLambdaFunction\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n  ExampleTwo:\n    description: 'Tags will be { \"CustomName\": \"nametag-example-dev-ExampleTwoLambdaFunction\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tagName: CustomName\n  ExampleThree:\n    description: 'Tags { \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tag: false\n      tagName: DoesNotMatter\n  ExampleFour:\n    description: >-\n      Tags will be { \"Name\": \"nametag-example-dev-ExampleFourLambdaFunction\", \"AnotherTag\": \"here\", \"MyTag\": \"IsCool\" }\n    handler: handler.foo\n    tags:\n      AnotherTag: here\n  ExampleFive:\n    description: 'Tags will be { \"AnotherTag\": \"here\", \"MyTag\": \"IsCool\" }'\n    handler: handler.foo\n    nametag:\n      tag: false\n    tags:\n      AnotherTag: here\n"]},{"id":132766163,"files":["service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n"]},{"id":116040754,"files":["service: fastly-exporter\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    FASTLY_TOKEN: ${env:FASTLY_TOKEN}\n    FASTLY_SERVICE: ${env:FASTLY_SERVICE}\n\nfunctions:\n  metrics:\n    handler: index.metrics\n    events:\n      - http:\n          path: metrics\n          method: get\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n"]},{"id":106003039,"files":["service: boilerplate-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  memorySize: 128\n\nfunctions:\n  houses:\n    handler: src/handlers/houses.handler\n    events:\n      - http:\n          method: get\n          path: houses\n          cors: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: webpack.config.js\n    includeModules:\n      forceExclude:\n        - aws-sdk\n"]},{"id":102528939,"files":["service: karma-weekly-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    USER_TABLE_NAME: \"${self:service}-${opt:stage, self:provider.stage}-user\"\n    SUBREDDIT_ISSUE_TABLE_NAME: \"${self:service}-${opt:stage, self:provider.stage}-subreddit_issue\"\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:Scan\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  sendSubredditNewsletters:\n    handler: handler.sendSubredditNewsletters\n    memorySize: 512\n    timeout: 600\n\n  graphql:\n    handler: handler.graphql\n    memorySize: 512\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n          integration: lambda-proxy\n\nresources:\n  Resources:\n    UsersDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.USER_TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: \"email\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"email\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    SubredditIssueDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.SUBREDDIT_ISSUE_TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: \"name\"\n            AttributeType: \"S\"\n          - AttributeName: \"date\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"name\"\n            KeyType: \"HASH\"\n          - AttributeName: \"date\"\n            KeyType: \"RANGE\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":84999480,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: elm-lambda-auth-boilerplate\n\ncustom:\n  stage: \"${opt:stage, self:provider.stage}\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: your-iam-user\n  region: us-west-2\n  environment: ${file(env.yml):${self:custom.stage}}\n\nfunctions:\n  oauthcallback:\n    handler: oauth.authCallback\n    events:\n      - http:\n          path: oauth/callback\n          method: get\n\n"]},{"id":132741801,"files":["service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n"]},{"id":136099685,"files":["service: serverless-municipios-por-estado\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    packager: 'yarn'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  getStates:\n    handler: src/endpoint/getStates.func\n    events:\n       - http:\n           path: getStates\n           method: get\n\n  getCities:\n    handler: src/endpoint/getCities.func\n    events:\n       - http:\n           path: getCities/{stateId}\n           method: get\n"]},{"id":125306323,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: book-lending-app-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  TABLE_BOOK: book-lending-app-book\n\nresources:\n  Resources:\n    BookDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n#      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"itemId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"itemId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.TABLE_BOOK}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        Fn::GetAtt:\n          - BookDynamoTable\n          - Arn\n\nfunctions:\n  authorize:\n    handler: handlers/authorize.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n    # you need to generate one JWT secret here... you can get one at https://www.grc.com/passwords.htm\n      JWT_SECRET: \n  listBooks:\n    handler: handlers/listBooks.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n          # authorizer: authorize  # no need for authorization for listing books\n  reserveBook:\n    handler: handlers/reserveBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: reservations/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n  borrowBook:\n    handler: handlers/borrowBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: lendings/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n  returnBook:\n    handler: handlers/returnBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: returnings/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n\n"]},{"id":164475039,"files":["service: serverless-marketplace\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  memorySize: 128\n  apiKeys:\n    - main\n  environment:\n    ISSUER: ${self:service}\n    PRODUCTS_TABLE: ${self:service}-products\n    CARTS_TABLE: ${self:service}-carts\n    PHOTO_BUCKET: ${self:service}-photos\n    MAX_PHOTO_SIZE: 1048576 #Bytes = 1 MB\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CARTS_TABLE}\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:ListBucket\n      Resource:\n        - arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}\n        - arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*\n\nfunctions:\n  updateItem:\n    handler: src/products.update\n    events:\n      - http:\n          path: products/update\n          method: post\n          private: true\n          authorizer: adminAuth\n          cors: false\n  getItems:\n    handler: src/products.getAll\n    events:\n      - http:\n          path: products/query\n          method: get\n          private: true\n  queryItem:\n    handler: src/products.query\n    events:\n      - http:\n          path: products/query\n          method: post\n          private: true\n  createCart:\n    handler: src/carts.create\n    events:\n      - http:\n          path: cart/create\n          method: post\n          private: true\n  updateCart_addItem:\n    handler: src/carts.addItem\n    events:\n      - http:\n          path: cart/update\n          method: put\n          private: true\n          authorizer: userAuth\n  updateCart_removeItem:\n    handler: src/carts.removeItem\n    events:\n      - http:\n          path: cart/update\n          method: delete\n          private: true\n          authorizer: userAuth\n  completeCart:\n    handler: src/carts.complete\n    events:\n      - http:\n          path: cart/complete\n          method: post\n          private: true\n          authorizer: userAuth\n  cartInfo:\n    handler: src/carts.info\n    events:\n      - http:\n          path: cart/info\n          method: post\n          private: true\n          authorizer: userAuth\n  userAuth:\n    handler: src/security.userAuthorizer\n  adminAuth:\n    handler: src/security.adminAuthorizer\n\nresources:\n  Resources:\n    ProductsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.PRODUCTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: title\n            AttributeType: S\n        KeySchema:\n          - AttributeName: title\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    CartsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.CARTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: username\n            AttributeType: S\n        KeySchema:\n          - AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    PhotoBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.PHOTO_BUCKET}\npackage:\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-offline\n"]},{"id":99659438,"files":["service: ddns-updater\nplugins:\n  - serverless-domain-manager\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 3\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - lambda:InvokeFunction\n    Resource: arn:aws:lambda:*:*:function:${self:custom.process}\n  - Effect: Allow\n    Action:\n      - route53:ListHostedZones\n      - route53:ListResourceRecordSets\n      - route53:ChangeResourceRecordSets\n    Resource: \"*\"\n\ncustom:\n  domain: ${file(config.json):update_endpoint}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  customDomain:\n      basePath: \"\"\n      domainName: ${self:custom.domain}\n      stage: ${self:custom.stage}\n      createRoute53Record: true\n\npackage:\n include:\n    - handler.js\n    - auth.js\n    - ddns-updater.js\n\nfunctions:\n  index:\n    timeout: 10\n    handler: handler.index\n    events:\n      - http:\n          path: \"/\"\n          method: any\n  update:\n    timeout: 10\n    handler: handler.update\n    events:\n      - http:\n          path: update\n          method: any\n          authorizer: auth\n  auth:\n    handler: auth.auth\n"]},{"id":104004733,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: simplepipe\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  pipe:\n    handler: handler.pipe\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/pipe'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":143137944,"files":["service: sls-rekognition-compare-base64 \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-northeast-1 # Nearest AZ to offer rekognition is Tokyo  \n  deploymentBucket: my-serverless-projects-ap-northeast-1  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-northeast-1:*:*:*\"  \n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"             \n\nfunctions:\n  compareFacesBase64:\n    handler: handler.compareFacesBase64\n    events:\n    - http:\n        path: compare-faces-base64\n        method: post    ","service: sls-download-base64-from-s3\n\ncustom:\n  bucket: my-serverless-projects/test-content\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  downloadBase64Content:\n    handler: handler.downloadBase64Content\n    environment:\n      BUCKET: ${self:custom.bucket}    \n    events:\n    - http:\n        path: download-base64-content-from-s3/{filename}\n        method: get   \n\n","service: sls-http-endpoints-mocha\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true      \n  login:\n    handler: src/handler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true                ","service: sls-http-endpoints\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n\nfunctions:\n  queryString:\n    handler: handler.queryString\n    events:\n      - http:\n          path: query-string\n          method: get\n          cors: true\n  pathParameters:\n    handler: handler.pathParameters\n    events:\n      - http:\n          path: path-parameters/{id}\n          method: get\n          cors: true \n  multiPathParameters:\n    handler: handler.multiPathParameters\n    events:\n      - http:\n          path: multipath-parameters/{id1}/{id2}\n          method: get\n          cors: true                    \n  postRequest:\n    handler: handler.postRequest\n    events:\n      - http:\n          path: post-request\n          method: post    \n          cors: true            ","service: sls-rekognition-compare-faces \n\ncustom:\n  bucket: ap-northeast-1-test-content\n  sourceImage: margot-1.jpg\n  targetImage: margot-2.jpg\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-northeast-1 # Nearest AZ to offer rekognition is Tokyo  \n  deploymentBucket: my-serverless-projects-ap-northeast-1  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-northeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\" \n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"             \n\nfunctions:\n  compareFaces:\n    handler: handler.compareFaces\n    environment:\n      BUCKET: ${self:custom.bucket}    \n      SOURCE_IMAGE: ${self:custom.sourceImage}\n      TARGET_IMAGE: ${self:custom.targetImage}\n","service: sls-upload-to-s3\n\ncustom:\n  bucket: my-serverless-projects/test-content\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  uploadToS3:\n    handler: handler.uploadToS3\n    environment:\n      BUCKET: ${self:custom.bucket}    \n    events:\n    - http:\n        path: upload-to-s3\n        method: post\n"]},{"id":130147719,"files":["service: wonderq\nplugins:\n  - serverless-webpack\n  - serverless-finch\ncustom:\n  webpackIncludeModules: true\n  client:\n    bucketName: quick-start-dev-serverlessdeploymentbucket-ntikgcvze067\n\nprovider:\n  name: aws\n  vpc:\n   securityGroupIds:\n     - sg-2547fb43\n   subnetIds:\n     - subnet-4814e13e\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    REDIS_HOST: wonderq.bewcvz.ng.0001.use1.cache.amazonaws.com\n    REDIS_PORT: '6379'\n\nfunctions:\n  init:\n      handler: handler.init\n      events:\n        - http:\n            path: /init\n            method: post\n            cors: true\n  listQueues:\n    handler: handler.listQueues\n    events:\n      - http:\n          path: /queues\n          method: get\n          cors: true\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: /messages/send\n          method: post\n          cors: true\n  receiveMessage:\n      handler: handler.receiveMessage\n      events:\n        - http:\n            path: /messages/receive\n            method: get\n            cors: true\n  deleteMessage:\n    handler: handler.deleteMessage\n    events:\n      - http:\n          path: /messages/delete\n          method: post\n          cors: true\n  getInfo:\n    handler: handler.getInfo\n    events:\n      - http:\n          path: /info\n          method: get\n          cors: true\n"]},{"id":151255994,"files":["service: simple-dynamic-webpage\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  homepage:\n    handler: controller/homeController.home\n    events:\n      - http:\n          method: GET\n          path: '/'\n\ncustom:\n  serverless-offline:\n    port: 4000\n\nplugins:\n  - serverless-offline","service: simple-dynamic-webpage-backend\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  configurationStyle:\n    handler: handlers/configuration.getStyle\n    events:\n      - http:\n          path: '/config/style'\n          method: GET\n\n  configurationContent:\n    handler: handlers/configuration.getContent\n    events:\n      - http:\n          path: '/config/content'\n          method: GET\n\n  configurationFlags:\n    handler: handlers/configuration.getFeatureFlags\n    events:\n      - http:\n          path: '/config/featureflags'\n          method: GET\n\n  data:\n    handler: handlers/retrieveData.getData\n    events:\n      - http:\n          path: '/data'\n          method: GET\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4001\n  \n","service: a-simple-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: '/'\n          method: GET\n\n  myfunction:\n    handler: another-handler.myexample\n    events:\n      - http:\n          path: '/myAPI/{mypath1}/{mypath2}'\n          method: GET\n  \n  appendExtension:\n    handler: another-handler.appendExtension \n    events: \n      - http:\n          path: '/append/{extension}'\n          method: POST\n\nplugins:\n  - serverless-offline\n  \n"]},{"id":151431490,"files":["service: lambda-form\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-plugin-existing-s3\n  - serverless-apigw-binary\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  serverless-offline:\n    host: 0.0.0.0\n    port: 5000\n    corsAllowOrigin: \"*\"\n    corsAllowHeaders: \"Origin, X-Requested-With, Content-Type, Accept\"\n  apigwBinary:\n    types:\n      - 'application/x-www-form-urlencoded'\n      - 'multipart/form-data'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource:\n        - \"*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  environment: ${file(env.yml):${self:provider.stage}}\n\npackage:\n  exclude:\n    - demo/**\n    - node_modules/**\n    - tests/**\n    - .babelrc\n    - .d*\n    - .e*\n    - .g*\n    - .git/**\n    - .DS_*\n    - docker*.yml\n    - run-*.sh\n\nfunctions:\n  formPostHandler:\n    handler: handler.formPostHandler\n    events:\n      - http:\n            method: post\n            path: form/{id}\n            cors: true\n            request:\n              parameters:\n                paths:\n                  id: true\n\n  submissionHandler:\n    handler: handler.submissionHandler\n    events:\n      - existingS3:\n            bucket: ${file(env.yml):${self:provider.stage}.FORMBUCKET}\n            events:\n              - s3:ObjectCreated:*\n            rules:\n              - suffix: .submit\n\n  authHandler:\n    handler: handler.authHandler\n    events:\n      - http:\n            method: post\n            path: auth/{id}/{type}\n            cors: true\n            request:\n              parameters:\n                paths:\n                  id: true\n                  type: true\n"]},{"id":97499841,"files":["service: test-webhook-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  webhookConsumer:\n    handler: handler.endpoint\n    environment:\n      WEBHOOK_TOKEN: \"SAMPLE_WEBHOOK_TOKEN\"\n    events:\n      - http:\n          path: webhook\n          method: post\n"]},{"id":94524953,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-webpack-starter # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  webpack: webpack/${self:provider.stage}.config.js\n  webpackIncludeModules: true\n  serverless-offline: ${file(./env.yml):serverless-offline}\n  cors:\n    origins:\n      - '*'\n    headers:\n      - Content-Type\n      - X-Amz-Date\n      - Authorization\n      - X-Api-Key\n      - X-Amz-Security-Token\n      - X-Requested-With\n      - X-Requested-By\n    allowCredentials: false\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    NODE_ENV: ${self:provider.stage}\n\n# you can add packaging information here\npackage:\n  individual: true\n\nfunctions:\n  hello:\n    handler: src/functions/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n  first:\n    handler: src/functions/first/handler.hello\n    events:\n      - http:\n          path: first\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n  second:\n    handler: src/functions/second/handler.hello\n    events:\n      - http:\n          path: second\n          method: get\n          cors: ${self:custom.cors, \"true\"}\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":112904215,"files":["service: aws-simple-file-sharing\n\ncustom:\n  bucket: file-sharing-bucket\n  table: file-sharing-table\n\nresources:\n  Resources:\n    FileSharingDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n#      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"itemId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"itemId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.table}\n    FileSharingBucket:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.bucket}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  # put the default region here (should be according to your profile region)\n  region: us-west-2\n  # put the profile you created configuring your AWS CLI (if you don't have a\n  # profile delete this line to get the default configuration)\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - FileSharingDynamoTable\n          - Arn\n\nfunctions:\n  saveImage:\n    handler: handlers/post.saveImage\n    description: Saves image into S3 and store some data in DynamoDB\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      BUCKET: ${self:custom.bucket}\n      TABLE: ${self:custom.table}\n      REGION: ${self:provider.region}\n    events:\n      - http:\n          path: images\n          method: post\n          cors: true\n  getImages:\n    handler: handlers/get.listImages\n    description: Lists all images in S3 and data in DynamoDB\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.table}\n    events:\n      - http:\n          path: images\n          method: get\n          cors: true\n"]},{"id":161074266,"files":["service: exampleapi\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n  region: eu-west-1\n  memorySize: 512\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n  apiKeys:\n    - ${opt:stage}-ExampleApi\n\nplugins:\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-Employee\n  tableThroughputs:\n    prod: 1\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\nfunctions:\n  createLocalDb:\n    handler: handlers.createLocalDb\n    events:\n      - http:\n          path: create-local-db\n          method: get\n  getAppVersion:\n    handler: handlers.getAppVersion\n    events:\n      - http:\n          path: version\n          method: get\n          private: true\n  getEmployee:\n    handler: handlers.getEmployee\n    events:\n      - http:\n          path: employees\n          method: get\n  createEmployee:\n    handler: handlers.createEmployee\n    events:\n      - http:\n          path: employees\n          method: post\n          cors: true\n\nresources:\n  - ${file(resources/dynamodb-table.yml)}\n"]},{"id":164350784,"files":["type: participation-api\nservice: participation-api\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:us-east-1:942252418694:table/participationsDB\nfunctions:\n  participationsGet:\n    handler: code/api.get\n    events:\n      - http:\n          path: /\n          method: get\n  participationsPost:\n    handler: code/api.post\n    events:\n       - http:\n           path: /\n           method: post\n  participationsDelete:\n    handler: code/api.delete\n    events:\n      - http:\n          path: /\n          method: delete\n\nresources:   \n  Resources:     \n    ParticipationsTable:       \n      Type: 'AWS::DynamoDB::Table'       \n      Properties:        \n        TableName: participationsDB        \n        AttributeDefinitions:           \n          -             \n            AttributeName: id             \n            AttributeType: S         \n        KeySchema:           \n          -             \n            AttributeName: id             \n            KeyType: HASH         \n        ProvisionedThroughput:            \n          ReadCapacityUnits: 1           \n          WriteCapacityUnits: 1"]},{"id":69191081,"files":["service: amp-validator\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: v1\n  region: us-east-1\n\nfunctions:\n  validate:\n    handler: handler.validate\n    memorySize: 512\n    events:\n      - http:\n          path: validate\n          method: get\n"]},{"id":153669336,"files":["service:\n  name: s3-file-upload-api\n\nplugins:\n  - serverless-webpack\n  - serverless-apigw-binary\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: yarn\n  apigwBinary:\n    types:\n      - 'image/jpeg'\n      - 'image/png'\n  s3_bucket_name: ${self:service.name}-${self:provider.stage}\n  s3_bucket_arn:\n    Fn::Join:\n      - \"\"\n      - - \"arn:aws:s3::\"\n        - \":${self:custom.s3_bucket_name}\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'stage'}\n  profile: ${opt:profile}\n  region: us-east-1\n  environment:\n    S3_BUCKET_NAME: ${self:custom.s3_bucket_name}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource:\n        - ${self:custom.s3_bucket_arn}\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3::\"\n            - \":${self:custom.s3_bucket_name}/*\"\n\npackage:\n  individually: true\n\nfunctions:\n  post_file:\n    handler: handler.handler\n    events:\n      - http:\n          path: /file\n          method: post\n          authorizer: aws_iam # Remove this line to make the endpoint completely public (not recommended)\n\nresources:\n  # TODO: create an IAM user and policy for invoking the APIG endpoint\n  Resources:\n    S3BucketReceipts:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3_bucket_name}\n"]},{"id":119687562,"files":["service: alexa-sls-test-aws-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  versionFunctions: false\n\npackage:\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - alexaSkill\n","service: alexa-sls-test-azure-functions\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n","service: alexa-sls-test-gcf\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: kb-tests\n  credentials: ~/.gcloud/key.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: alexa\n    events:\n      - http: path"]},{"id":139470020,"files":["service: serverless-by-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DB_URL: ${env:DB_URL}\n    JWT_SECRET: ${opt:jwt-secret}\n\nfunctions:\n  basics-aws-based:\n    handler: functions/basics/aws-based.handler\n    events:\n      - http:\n          method: get\n          path: basics/aws-based\n\n  basics-express-based:\n    handler: functions/basics/express-based.handler\n    events:\n      - http:\n          method: get\n          path: basics/express-based\n\n  auth-jwt-generate:\n    handler: functions/auth/jwt/generate.handler\n    events:\n      - http:\n          method: post\n          path: auth/jwt/generate\n\n  auth-jwt-verify:\n    handler: functions/auth/jwt/verify.handler\n    events:\n      - http:\n          method: get\n          path: auth/jwt/verify\n\n  auth:\n    handler: functions/auth/index.handler\n    events:\n      - http:\n          method: get\n          path: auth\n\n  db-mongo:\n    handler: functions/db/mongo.handler\n    events:\n      - http:\n          method: get\n          path: db/mongo\n\n  graphql:\n    handler: functions/graphql/apollo-server.handler\n    events:\n      - http:\n          method: ANY\n          path: graphql\n\nplugins:\n  - serverless-offline\n"]},{"id":139649748,"files":["service: express-serverless-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: v1\n  region: us-east-1\n  timeout: 30\n  memorySize: 512\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline      \n"]},{"id":151180153,"files":["service: sls-group-telegram-bot\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    TELEGRAM_TOKEN: ${ssm:telegram-token~true} \n    GROUP_TABLE: \"group-bot-groups\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/*\"\n\nfunctions:\n  process:\n    handler: src/handler.handle\n    events:\n      - http:\n          path: /\n          method: post\n\nresources:\n  Resources:\n    groupsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.GROUP_TABLE}\n        AttributeDefinitions:\n          -\n            AttributeName: chatId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: chatId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  serverless-offline:\n    port: 7002\n    skipCacheInvalidation: false\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true      \n\n\n"]},{"id":104670846,"files":["service:\n  name: weshare-with-webtask\n\nprovider:\n  name: webtasks\n  environment:\n    RETHINKDB_SERVER: \"${env:RETHINKDB_SERVER, opt:rethinkdb-server, self:provider.defaults.RETHINKDB_SERVER}\"\n  defaults:\n    RETHINKDB_SERVER: \"127.0.0.1\"\n\nfunctions:\n  main:\n    handler: handler\n\nplugins:\n  - '@webtask/serverless-webtasks'\n"]},{"id":134895146,"files":["service: stockup-gql\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n          - Effect: Allow\n            Action:\n              - dynamodb:DescribeTable\n              - dynamodb:Query\n              - dynamodb:Scan\n              - dynamodb:GetItem\n              - dynamodb:PutItem\n              - dynamodb:UpdateItem\n              - dynamodb:DeleteItem\n            Resource:\n               Fn::Join:\n                 - \"\"\n                 - - \"arn:aws:dynamodb:*:*:table/\"\n                   - Ref: ProductsDynamoDbTable\n\nfunctions:\n  queryProducts:\n    handler: handler.queryProducts\n    events:\n    - http:\n        path: products\n        method: post\n        cors: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: products\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":141306071,"files":["\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: AWSLambdaPostgresConnection\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10 # Choose development environment according to your taste between C#, Node.js, Python, Go and Java8\n  stage: dev # Choose stage for development or production.\n  region: rds_region # Choose specific AWS region for lambda function where the other AWS service instance resides.\n  environment: # Add DB Configuration values as environment variables.\n    DB_USER: \"db_name\"\n    DB_PASSWORD: \"db_password\"\n    DB_NAME: \"db_name\"\n    DB_HOST: \"db_rds_host_name\"\n    DB_PORT: 5432\n    DB_MAX_CONNECTIONS: 10\n    DB_IDLE_TIMEOUT: 300000\n    DB_CONNECTION_TIMEOUT: 1000\n  vpc: # Add security group and subnets configured for RDS instance on AWS Console.\n    securityGroupIds:\n      - sg-xxxxxx\n    subnetIds:\n      - subnet-xxxxxx\n      - subnet-xxxxxx\n\nfunctions:\n  connectWithPostgres:\n    handler: app.connectWithPostgres # Add name of the Lambda function\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n    events: # events trigger lambda functions\n      - http: # this is an API Gateway HTTP event trigger\n          path: /user_count\n          method: get\n          cors: true\n"]},{"id":212179739,"files":["service: countyapi\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  timeout: 30\npackage:\n  include:\n    - ./data/**/**/*\nfunctions:\n  county:\n    handler: handler.county\n    events:\n      - http:\n          path: api/{state}/county/boundary\n          method: get\n"]},{"id":229475960,"files":["service:\n  name: example-serverless-type\n\ncustom:\n  serverless-layers:\n    layersDeploymentBucket: ${env:LAYERS_DEPLOYMENT_BUCKET}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  stage: ${opt:stage,\"dev\"}\n\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-layers\n  - serverless-dotenv-plugin\n  - serverless-dynamodb-local\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: ap-northeast-1\n  apiGateway:\n    minimumCompressionSize: 1024\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n  stage: ${self:custom.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:DYNAMO_TABLE}\"\n\n\nfunctions:\n  hello:\n    handler: functions/hello.main\n    description: Hello world!\n    environment:\n      API_KEY: ${env:API_KEY}\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\n  dynamo:\n    handler: functions/dynamo.main\n    description: DynamoDB example\n    environment:\n      DYNAMO_TABLE: ${env:DYNAMO_TABLE}\n    events:\n      - http:\n          path: dynamo\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: Id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: Id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${env:DYNAMO_TABLE}"]},{"id":97581690,"files":["service:\n  name: aws-nodejs-typescript\n#app: your-app-name\n#tenant: your-tenant-name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":82894842,"files":["service: versionwatcher\n\nprovider:\n    name: aws\n    runtime: nodejs6.10\n    profile: versionwatcher\n    stage: stage\n    region: eu-west-1\n    apiKeys:\n        - ${opt:stage}-VersionWatcher\n    environment:\n        TABLE_VERSION: ${file(./serverless.env.yml):${opt:stage}.TABLE_VERSION}\n        TABLE_PACKAGE: ${file(./serverless.env.yml):${opt:stage}.TABLE_PACKAGE}\n        TABLE_STABLE: ${file(./serverless.env.yml):${opt:stage}.TABLE_STABLE}\n        WATCH_WEBHOOK: ${env:WATCH_WEBHOOK}\n        IFTTT_KEY: ${env:IFTTT_KEY}\n\nfunctions:\n    watchVersion:\n        handler: handlers.watchHandler\n        description: Inspect and notify about old package versions\n        events:\n            #- schedule:\n                #rate: cron(0 12 * * ? *)\n            - http:\n                path: tracker/watch\n                method: get\n                private: true\n\n    trackWp:\n        handler: handlers.wp\n        description: Track Wordpress dependencies\n        events:\n            - http:\n                path: tracker/wp\n                method: post\n                private: true\n\n    trackNode:\n        handler: handlers.node\n        description: Track Node.js dependencies\n        events:\n            - http:\n                path: tracker/node\n                method: post\n                private: true\n\n    trackPython:\n        handler: handlers.python\n        description: Track python dependencies\n        events:\n            - http:\n                path: tracker/python\n                method: post\n                private: true\n\n    stableHandler:\n        handler: handlers.stableHandler\n        description: List stable versions\n        events:\n            - http:\n                path: tracker/stable\n                method: get\n                private: true\n\n    corsProxyHandler:\n        handler: handlers.corsHandler\n        description: Small proxy to bypass cors for frontend\n        events:\n            - http:\n                path: tracker/cors\n                method: get\n                private: true\n\nresources:\n  Resources:\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:PutItem\n                - dynamodb:GetItem\n                - dynamodb:Query\n                - dynamodb:Scan\n              Resource:\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherVersion\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherStable\n                - arn:aws:dynamodb:*:*:table/stage-VersionWatcherPackage\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherVersion\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherStable\n                - arn:aws:dynamodb:*:*:table/prod-VersionWatcherPackage\n        Roles:\n          - Ref: IamRoleLambdaExecution\n","stage:\n    TABLE_VERSION: 'stage-VersionWatcherVersion'\n    TABLE_PACKAGE: 'stage-VersionWatcherPackage'\n    TABLE_STABLE: 'stage-VersionWatcherStable'\n\nprod:\n    TABLE_VERSION: 'prod-VersionWatcherVersion'\n    TABLE_PACKAGE: 'prod-VersionWatcherPackage'\n    TABLE_STABLE: 'prod-VersionWatcherStable'\n"]},{"id":83438276,"files":["service: faceswap\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:ListBucket\"\n      Resource: arn:aws:s3:::${self:custom.bucketName}/*\n    - Effect: \"Allow\"\n      Action:\n        - rekognition:DetectFaces\n      Resource: '*'\ncustom:\n  bucketName: ${self:service}-${opt:stage}-uploads\nfunctions:\n  facereplace:\n    handler: src/facereplace.handler\n    timeout: 30\n    environment:\n      BUCKET_NAME: ${self:custom.bucketName}\n      ALLOWED_EXTENSIONS: .jpg|.jpeg|.png\n      PROCESSED_DIR_NAME: processed\n    events:\n      - s3:\n          bucket: ${self:custom.bucketName}\n          event: s3:ObjectCreated:*\n          rules:\n          - prefix: uploads/\n"]},{"id":107680795,"files":["service: events\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  cron:\n    handler: handler.cron\n    events:\n      - schedule: rate(1 minute)\n  api:\n    handler: handler.api\n    events:\n      - http:\n          path: lambda/hello\n          method: GET\n  # log:\n  #   handler: handler.log\n  #   events:\n  #     - cloudwatchLog: '/aws/lambda/events-dev-cron'","service: graphql-offline\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    environment:\n      DB_TABLE: ${self:custom.dbTable}\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n","service: graphql\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    environment:\n      DB_TABLE: { \"Ref\": \"DbTable\" }\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n","service: intro-sls\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  nano-user-get:\n    handler: handler.getUser\n    events:\n      - http: GET nano/users\n  nano-user-delete:\n    handler: handler.deleteUser\n    events:\n      - http: DELETE nano/users\n  nano-cart-get:\n    handler: handler.getCart\n    events:\n      - http: GET nano/carts\n  nano-cart-delete:\n    handler: handler.deleteCart\n    events:\n      - http: DELETE nano/carts\n  micro-user:\n    handler: handler.users\n    events:\n      - http: GET micro/users\n      - http: DELETE micro/users\n  micro-cart:\n    handler: handler.carts\n    events:\n      - http: GET micro/carts\n      - http: DELETE micro/carts\n  monolith:\n    handler: handler.all\n    events:\n      - http: GET monolith/users\n      - http: DELETE monolith/users\n      - http: GET monolith/carts\n      - http: DELETE monolith/carts\n","service: step-functions\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - states:StartExecution\n      Resource:  ${self:resources.Outputs.TrafficLightStateMachineARN.Value}\n\nfunctions:\n  entrypoint:\n    handler: handler.entrypoint\n    environment:\n          STATE_MACHINE_ARN: { \"Ref\": \"TrafficLightStateMachine\" }\n    events:\n      - http:\n          path: trafficlight\n          method: get\n          cors: true\n          private: false\n  on-red:\n    handler: handler.red\n  on-green:\n    handler: handler.green\n  on-yellow:\n    handler: handler.yellow\n  on-response:\n    handler: handler.response\n\nstepFunctions:\n  stateMachines:\n    TrafficLightStateMachine:\n      name: TrafficLightStateMachine\n      definition:\n        Comment: \"An example of the Amazon States Language\"\n        StartAt: ReadState\n        States:\n          ReadState:\n            Type: Choice\n            Choices:\n            - Variable: \"$.color\"\n              StringEquals: \"red\"\n              Next: RedState\n            - Variable: \"$.color\"\n              StringEquals: \"yellow\"\n              Next: YellowState\n            - Variable: \"$.color\"\n              StringEquals: \"green\"\n              Next: GreenState\n            Default: DefaultState\n          RedState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-red\n            Next: WaitState\n          GreenState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-green\n            Next: WaitState\n          YellowState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-yellow\n            Next: WaitState\n          WaitState:\n            Type: Wait\n            TimestampPath: \"$.wait\"\n            Next: ResponseState\n          DefaultState:\n            Type: Fail\n            Cause: \"No Color Matches!\"\n          ResponseState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-response\n            End: true\n\nresources:\n  Outputs:\n    TrafficLightStateMachineARN:\n      Description: The ARN of the Traffic Light state machine\n      Value:\n        Ref: TrafficLightStateMachine","service: streams\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n        \nfunctions:\n  dynamo-add:\n    handler: handler.dynamoAdd\n    environment:\n      DB_TABLE: { \"Ref\": \"DbTable\" }\n  dynamo-listener:\n    handler: handler.dynamoListener\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - DbTable\n              - StreamArn\n\nresources:\n  Outputs:\n    DbTableStreamArn:\n      Description: \"Db Table Name\"\n      Value: \n        Fn::GetAtt: [ DbTable, StreamArn ]\n      Export:\n        Name: ExportDbTableStreamArn\n    DbTableName:\n      Description: \"Db Table Name\"\n      Value:\n        Ref: DbTable\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE"]},{"id":140828959,"files":["service: CompanyXServiceName\n\nplugins:\n  - serverless-domain-manager\n  - serverless-jest-plugin\n  - serverless-offline # serverless-offline needs to be last in the list\n\npackage:\n  exclude:\n    - __tests__/**\n    - scripts/**\n    - .git/**\n    - env.yml\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  domains:\n    prod: ''\n    stage: ''\n    dev: ''\n    local: localhost\n  versions-prod: true\n  versions-default: false\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'CompanyXServiceName'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  serverless-offline:\n    resourceRoutes: true\n    port: 4000\n  jest:\n    collectCoverage: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  variableSyntax: \"\\\\${((?!AWS)[ ~:a-zA-Z0-9._'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}\"\n  stage: ${self:custom.stage}\n  environment: ${file(./env.yml):${self:custom.stage}}\n  region: ${file(./env.yml):${self:custom.stage}.REGION}\n  versionFunctions: ${self:custom.versions-${self:custom.stage}, self:custom.versions-default}\n  # uncomment if you want to use ssm as your key storage\n  #iamRoleStatements:\n  #  - Effect: 'Allow'\n  #    Action: 'ssm:GetParameters'\n  #    Resource:\n  #      - 'Fn::Sub': 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'\n  #  - Effect: 'Allow'\n  #    Action: 'kms:Decrypt'\n  #    Resource:\n        - 'Fn::Sub': 'arn:aws:kms:us-east-1:${AWS::AccountId}:key/<your-kms-key>'\n\nfunctions:\n  yourfunc:\n    handler: handlers.yourfunc\n    description: Test function for your service\n    events:\n      - http:\n          path: ''\n          method: get\n          cors:\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n          # uncomment if you want a cognito authorizer\n          # authorizer:\n          #  name: authorizer\n          #  arn: ${file(./env.yml):${self:custom.stage}.COGNITO_POOL_ARN}\n"]},{"id":216851993,"files":["service: sinote\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n\ncustom:\n  allowedHeaders:\n    - Accept\n    - Content-Type\n    - Content-Length\n    - Authorization\n    - X-Amz-Date\n    - X-Api-Key\n    - X-Amz-Security-Token\n    - X-Amz-User-Agent\n    - app_user_id\n    - app_user_name\n  customDomain:\n    domainName: api.sinote.me\n    basePath: 'v1'\n    stage: ${self:provider.stage}\n    certificateName: sinote.me\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-northeast-1\n  stage: dev\n  memorySize: 128\n  timeout: 5\n  endpointType: regional\n  environment:\n    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    COGNITO_IDENTITY_POOL_ID: ap-northeast-1:87753187-b49f-4d5d-90cb-dfcc9c194baa\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}'\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/*'\n\nfunctions:\n  authenticate-google:\n    handler: api/authenticate/google.handler\n    description: Google IDP Authentication\n    events:\n      - http:\n          path: auth\n          method: get\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  hello:\n    handler: api/hello.handler\n    description: GET /\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # category endpoint\n  get-category:\n    handler: api/category/get-category.handler\n    description: GET /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-categories:\n    handler: api/category/get-categories.handler\n    description: GET /categories\n    events:\n      - http:\n          path: categories\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-category:\n    handler: api/category/create-category.handler\n    description: POST /category\n    events:\n      - http:\n          path: categories\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  update-category:\n    handler: api/category/update-category.handler\n    description: PATCH /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: patch\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  delete-category:\n    handler: api/category/delete-category.handler\n    description: DELETE /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: delete\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # tag endpoint\n  get-tag:\n    handler: api/tag/get-tag.handler\n    description: GET /tags/{tagId}\n    events:\n      - http:\n          path: tags/{tagId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-tags:\n    handler: api/tag/get-tags.handler\n    description: GET /tags\n    events:\n      - http:\n          path: tags\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-tag:\n    handler: api/tag/create-tag.handler\n    description: POST /tags\n    events:\n      - http:\n          path: tags\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # note endpoint\n  get-note:\n    handler: api/note/get-note.handler\n    description: GET /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-notes:\n    handler: api/note/get-notes.handler\n    description: GET /notes\n    events:\n      - http:\n          path: notes\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-note:\n    handler: api/note/create-note.handler\n    description: POST /notes\n    events:\n      - http:\n          path: notes\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  update-note:\n    handler: api/note/update-note.handler\n    description: PATCH /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: patch\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  change-note-category:\n    handler: api/note/change-category.handler\n    description: POST /notes/{noteId}/change-note-cate\n    events:\n      - http:\n          path: notes/{noteId}/change-note-cate\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  delete-note:\n    handler: api/note/delete-note.handler\n    description: DELETE /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: delete\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  attach-tag:\n    handler: api/note/attach-tag.handler\n    description: POST /notes/{noteId}/attach-tag\n    events:\n      - http:\n          path: notes/{noteId}/attach-tag\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  unattach-tag:\n    handler: api/note/unattach-tag.handler\n    description: POST /notes/{noteId}/unattach-tag\n    events:\n      - http:\n          path: notes/{noteId}/unattach-tag\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\nresources:\n  Resources:\n    NotesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.NOTES_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: relationship_id\n            AttributeType: S\n          - AttributeName: create_timestamp\n            AttributeType: S\n          - AttributeName: update_timestamp\n            AttributeType: S\n          - AttributeName: user_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: relationship_id\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: create_time-index\n            KeySchema:\n              - AttributeName: id\n                KeyType: HASH\n              - AttributeName: create_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: update_time-index\n            KeySchema:\n              - AttributeName: id\n                KeyType: HASH\n              - AttributeName: update_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: user-index\n            KeySchema:\n              - AttributeName: user_id\n                KeyType: HASH\n              - AttributeName: update_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n    GatewayResponseDefault4XX:\n      Type: AWS::ApiGateway::GatewayResponse\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponseDefault5XX:\n      Type: AWS::ApiGateway::GatewayResponse\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n"]},{"id":205552453,"files":["service:\n  name: ichef-api\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: ./config/webpack/webpack.config.js\n    includeModules: true\n    packager: npm\n\nfunctions:\n  graphql:\n    handler: src/lambda/graphql.handler\n    memorySize: 128\n    timeout: 5\n    events:\n      - http:\n          path: graphql\n          method: get\n          # cors: true\n      - http:\n          path: graphql\n          method: post\n          authorizer: aws_iam\n          # cors:\n          # origin: 'http://localhost:3000'\n"]},{"id":92340150,"files":["service: kapbot\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    TWITCH_CLIENT_ID: XXXXX\n\nfunctions:\n  live:\n    handler: kapbot.live\n    events:\n      - http:\n          path: /live\n          method: get\n  game:\n    handler: kapbot.game\n    events:\n      - http:\n          path: /game\n          method: get\n  random:\n    handler: kapbot.random\n    events:\n      - http:\n          path: /random\n          method: get\n  popular:\n    handler: kapbot.popular\n    events:\n      - http:\n          path: /popular\n          method: get\n"]},{"id":98621131,"files":["\nservice: aws-stop-rds\npackage:\n  include:\n   - lib/**\n  exclude:\n    - src/**\n    - test/**\n    - reports/**\n    - package.json\n    - .gitignore\n    - .babelrc\n    - .eslintrc.json\n    - README.md\n    - .gitignore\n    - .nvmrc\n    - yarn.lock\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # you can overwrite defaults here\n  #  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n        - rds:*\n    Resource: \"*\"\n\nfunctions:\n      stop:\n        handler: lib/index.stop\n        events:\n         - schedule:\n             name: stop-rds-scheduler\n             description: 'scheduled stop fn for rds instances'\n             rate: cron(0 8 ? * MON-FRI *)\n"]},{"id":124561629,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: kenService\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello/get\n          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116861410,"files":["service: beer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  environment:\n    SERVICE: ${self:service}\n    STAGE: ${self:provider.stage}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"dynamodb:Query\"\n         - \"dynamodb:Scan\"\n         - \"dynamodb:GetItem\"\n         - \"dynamodb:PutItem\"\n         - \"dynamodb:UpdateItem\"\n         - \"dynamodb:DeleteItem\"\n       Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${self:provider.stage}\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::\"\n             - Ref: ServerlessDeploymentBucket\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::\"\n             - Ref: ServerlessDeploymentBucket\n             - \"/*\"\n\nresources:\n  Resources:\n    DynamoDBTableBeer:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: Name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-prune-plugin\n\ncustom:\n  customDomain:\n    domainName: ${env:DOMAIN}\n    basePath: ${self:provider.stage}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  prune:\n    automatic: true\n    number: 2\n\nfunctions:\n  beer:\n    handler: handler.handler\n    events:\n      - http:\n          path: help\n          method: get\n          cors: true\n      - http:\n          path: add\n          method: post\n          cors: true\n      - http:\n          path: list\n          method: get\n          cors: true\n      - http:\n          path: vote\n          method: post\n          cors: true\n      - http:\n          path: remove\n          method: post\n          cors: true\n      - http:\n          path: purge\n          method: post\n          cors: true\n"]},{"id":109876636,"files":["# Welcome to Serverless!\n# Happy Coding!\n\nservice: comic-fetcher\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/comics\"\n      Action:\n        - \"dynamodb:*\"\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - handler.js\n    - services/**\n    - node_modules/**\n  exclude:\n    - tests/**\n\nfunctions:\n  comicFetch:\n    handler: handler.checkComics\n    events:\n          - schedule: cron(10 10 ? * * *)\n\n"]},{"id":113234453,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: santas-assistant-skill\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n\n# The `functions` block defines what code to deploy\nfunctions:\n  handler:\n    handler: index.handler\n    events:\n      - alexaSkill\n\nplugins:\n  serverless-webpack\n\npackage:\n  exclude: \n    - front-end/**\n\ncustom:\n  webpackIncludeModules: true # enable auto-packing of external modules"]},{"id":110745904,"files":["service: serverless-fido\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    SLACK_CLIENT_ID: ${SLACK_CLIENT_ID}\n    SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET}\n\nfunctions:\n  authorization:\n    handler: handler.authorization\n    events:\n      - http:\n          path: slack/authorization\n          method: get\n\n  fido:\n    handler: handler.fido\n    events:\n      - http:\n          path: slack/fido\n          method: post\n"]},{"id":178620954,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lamda-test-rahul # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n     - http:\n         path: users/create\n         method: get\n\n  imageResize:\n    handler: handler.imageResize\n    events:\n     - http:\n         path: /imageResize\n         method: get       \n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":117490396,"files":["service: ExchangeCrawler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 256\n  tracing: true\n  versionFunctions: false\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource: '*'\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: 'arn:aws:sns:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource: '*'\n\n  environment:\n    CURRENCY_CHANGED_SNS_ARN:\n      Fn::Join:\n        - ':'\n        - - arn\n          - aws\n          - sns\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - currencychanged\n    DATADOG_API_KEY: ${ssm:/exchangecrawler/DATADOG_API_KEY}\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules:\n      forceExclude:\n        - aws-sdk\n\nresources:\n  Resources:\n    currencyTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: currency\n        AttributeDefinitions:\n          - AttributeName: bank\n            AttributeType: S\n        KeySchema:\n          - AttributeName: bank\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    currencyStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: currencybucket\n\nfunctions:\n  Crawler:\n    handler: api/crawler.main\n    events:\n      - schedule:\n          rate: rate(1 hour)\n  FetchHistory:\n    handler: api/fetchhistory.main\n    events:\n      - http:\n          path: history/{date}\n          method: get\n          cors: true\n  LinePub:\n    handler: api/linepub.main\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - currencyTable\n              - StreamArn\n    environment:\n      LINE_ACCESSTOKEN: ${ssm:/exchangecrawler/LINE_ACCESSTOKEN}\n      LINE_SECRET: ${ssm:/exchangecrawler/LINE_SECRET}\n  Bot:\n    handler: api/bot.main\n    events:\n      - http:\n          path: bot/\n          method: post\n  AddHistory:\n    handler: api/addhistory.main\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - currencyTable\n              - StreamArn\n    environment:\n      GCP_PROJECT_ID: ${ssm:/exchangecrawler/GCP_PROJECT_ID}\n      GCP_CLIENT_EMAIL: ${ssm:/exchangecrawler/GCP_CLIENT_EMAIL}\n      GCP_PRIVATE_KEY: ${ssm:/exchangecrawler/GCP_PRIVATE_KEY}\n  GetSubscription:\n    handler: api/getsub.main\n    events:\n      - http:\n          path: /{plat}/subscription\n          method: get\n          cors: true\n  UpdateSubscription:\n    handler: api/updatesub.main\n    events:\n      - http:\n          path: /{plat}/subscription\n          method: post\n          cors: true"]},{"id":96934931,"files":["service: dictbot\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  environment: ${file(env.yml)}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lex:PostContent\"\n        - \"lex:PostText\"\n        - \"polly:SynthesizeSpeech\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n        - \"s3:PutObjectTagging\"\n      Resource:\n        - 'Fn::ImportValue': dictbot-s3-polly-cache-bucket-arn\n        - 'Fn::Join':\n            - '/'\n            - - 'Fn::ImportValue': dictbot-s3-polly-cache-bucket-arn\n              - '*'\n\npackage:\n  exclude:\n    - '.*'\n    - '*.iml'\n    - 'env.yml*'\n    - 'cloudformation/*'\n    - 'data/*'\n    - 'utils/*'\n\nfunctions:\n  facebook-get:\n    handler: facebook.get\n    description: GET handler for verification\n    memorySize: 128\n    timeout: 5\n    events:\n      - http: GET /\n  facebook-post:\n    handler: facebook.post\n    description: POST handler for receiving and sending json\n    memorySize: 128\n    timeout: 35\n    events:\n      - http: POST /\n  lex-handler:\n    handler: lex.handler\n    description: Lex handler\n    memorySize: 128\n    timeout: 30\n    environment:\n      POLLY_CACHE_S3_BUCKET_NAME:\n        'Fn::ImportValue': dictbot-s3-polly-cache-bucket-name\n\nresources:\n  Resources:\n    FacebookDashgetLogGroup:\n      Properties:\n        RetentionInDays: 7\n    FacebookDashpostLogGroup:\n      Properties:\n        RetentionInDays: 7\n    LexDashhandlerLogGroup:\n      Properties:\n        RetentionInDays: 7\n"]},{"id":113948856,"files":["service: imageService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n  timeout: 10\n  stage: dev\n  region: ap-southeast-2\n\n  iamRoleStatements:\n   - Effect: Allow\n     Action:\n       - s3:*\n     Resource: \"*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"rekognition:*\"\n     Resource: \"*\"\n\nfunctions:\n  images:\n    handler: handler.images\n    events:\n      - http:\n          integration: lambda\n          path: images\n          cors: true\n          method: get\n  getFaces:\n    handler: handler.getFaces\n    events:\n      - http:\n          integration: lambda\n          path: getFaces\n          method: get\n          cors: true"]},{"id":106547107,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-dynamodb-triggers\n\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  stage: prod\n  environment:\n    # Login to AWS, go to DynamoDB, create a table\n    # In Table Details, the Resource is listed under \"Amazon Resource Name (ARN)\"\n    DYNAMODB_TABLE: \"arn:aws:dynamodb:eu-west-1:123456789:table/TABLENAME\"\n    # Enable streams for the table\n    # The Resource should be the full \"Latest stream ARN\" value\n    DYNAMODB_STREAM: \"arn:aws:dynamodb:eu-west-1:123456789:table/TABLENAME/stream/2017-10-11T09:32:34.385\"\n  # you can use an either existing IAM role, or create a statement. But not both\n  # In this example, we're using `iamRoleStatements`, which is why `role` is commented out\n  # If you want to use `role`, comment out all of the `iamRoleStatements` rules\n  # role: arn:aws:iam::123456789:role/ROLENAME\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Scan\n      Resource: ${self:provider.environment.DYNAMODB_TABLE}\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: ${self:provider.environment.DYNAMODB_STREAM}\n\n\n# The `functions` block defines what code to deploy\nfunctions:\n  receiveOrder:\n    description: Save orders to a database\n    handler: handler.receiveOrder\n    events:\n      - http:\n          path: receiveOrder\n          method: post\n          cors: true\n\n  processOrder:\n    description: Process orders\n    handler: handler.processOrder\n    events:\n      - stream: ${self:provider.environment.DYNAMODB_STREAM}\n\n\npackage:\n  include:\n    - node_modules/**\n    - events/**"]},{"id":154863935,"files":["# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ibm-audio\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: ${opt:stage, 'dev'}\n  region: us-east-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    BOX_SKILLS_IBM_SPEECH_TO_TEXT_KEYWORDS_CALLBACK_ENDPOINT: { \"Fn::Join\" : [\"\", [ \"https://\", { \"Ref\" : \"ApiGatewayRestApi\" }, \".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/${self:service}\" ] ]  }\n    BOX_SKILLS_IBM_SPEECH_TO_TEXT_RESULTS_TTL_MINUTES: ${opt:resultsTtl, '720'} # make 5mins for prod\n    SKILL_ACCEPTED_FORMATS: 'aac,aif,aifc,aiff,amr,au,flac,m4a,mp3,ra,wav,wma'\n    SKILL_USE_ORIGINAL_FILE_FOR: 'flac,mp3,wav'\n    SKILL_FILE_SIZE_LIMIT_MB: '1000'\n    SPEECH_TO_TEXT_USERNAME: 'ADD_FROM_YOUR_IBM_ACCOUNT'\n    SPPECH_TO_TEXT_PASSWORD: 'ADD_FROM_YOUR_IBM_ACCOUNT'\n    SIGNATURE_HASH_KEY: ${opt:signatureHashKey, 'MANUALLY_ADD_SIGNATURE_HASH_KEY_FOR_DEV'}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'MANUALLY_ADD_SYMMETRIC_ENCRYPTION_KEY_FOR_DEV'}\n\n# packaging information\npackage:\n  artifact: ./watson-audio-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n","# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-video-audio\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: 'prod'\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    ARM_AAD_AUDIENCE: https://management.core.windows.net/\n    AAD_ENDPOINT: https://login.microsoftonline.com/\n    ARM_ENDPOINT: https://management.azure.com/\n    AAD_CLIENT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_SECRET: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_TENANT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    SUBSCRIPTION_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    RESOURCE_GROUP: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    ACCOUNT_NAME: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    REGION: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    STAGE: 'prod'\n    AUDIO_FILE_EXTENSIONS: \"3g2,asf,m2tf,mod,ts,xesc,mpeg,m2v,aiff,mp3,m4b,wma,wav,m4a,flac\"\n    SKILL_FILE_SIZE_LIMIT_MB: \"10240\"\n    LANGUAGE: ${opt:language, 'en-US'}\n    SERVICE: ${self:service}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'REPLACE_WITH_OWN_KEY_HASH'}\n\n# packaging information\npackage:\n  artifact: ./ms-ams-audio-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n"]},{"id":161805450,"files":["# serverless.yml\n\nservice: stargazing\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    WEBHOOK_URL: \"https://hooks.slack.com/services/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\"\n\nfunctions:\n  stargazer:\n    handler: handler.stargazer\n    events:\n      - http: POST stargazer\n"]},{"id":151765049,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: backend\n# app and org for use with dashboard.serverless.com\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: private\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  list:\n    handler: books.books\n    events:\n      - http:\n          path: api/books\n          method: get\n  book:\n    handler: book.book\n    events:\n      - http:\n          path: api/book/{record}\n          method: get\n  renew:\n    handler: renew.renew\n    events:\n      - http:\n          path: api/book/renew/{barcode}\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":87383347,"files":["service: ical2gcal\n\nframeworkVersion: \">=1.10.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v0\n  memorySize: 512\n  timeout: 300\n  region: ap-northeast-1\n\nfunctions:\n  sync:\n    handler: handler.sync\n    events:\n      - schedule: rate(15 minutes)\n"]},{"id":98127471,"files":["service: s3-ensure-logging-enabled\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetBucketLogging\"\n        - \"s3:PutBucketLogging\"\n      Resource: \"arn:aws:s3:::*\"\nfunctions:\n  S3LoggingEnforcer:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n    environment:\n      LOG_BUCKET: ${opt:logbucket}\n","service: s3-ensure-versioning-enabled\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetBucketVersioning\"\n        - \"s3:PutBucketVersioning\"\n      Resource: \"arn:aws:s3:::*\"\nfunctions:\n  S3VersioningEnforcer:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n","service: open-bucket-notifier\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: ${opt:snsTopicArn}\nfunctions:\n  S3OpenBucketNotifier:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"CreateBucket\"\n                - \"DeleteBucketPolicy\"\n                - \"PutBucketAcl\"\n                - \"PutBucketPolicy\"\n    environment:\n      SNS_TOPIC_ARN: ${opt:snsTopicArn}\n","service: open-object-notifier\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: ${opt:snsTopicArn}\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObjectAcl\"\n      Resource: \"*\"\nfunctions:\n  S3OpenBucketNotifier:\n    handler: index.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.s3\"\n            detail-type:\n              - \"AWS API Call via CloudTrail\"\n            detail:\n              eventSource:\n                - \"s3.amazonaws.com\"\n              eventName:\n                - \"PutObjectAcl\"\n    environment:\n      SNS_TOPIC_ARN: ${opt:snsTopicArn}\n"]},{"id":132354143,"files":["service: tic-tac-toe-serverless-demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: local\n  region: ${file(./env.yml):${opt:stage, self:provider.stage}.AWS_REGION_CODE}\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n\npackage:\n  exclude:\n    - .git\n\nfunctions:\n\n  create-game:\n    handler: src/functions/create-game.handler\n    events:\n      - http:\n          path: /games\n          cors: true\n          method: post\n          integration: lambda\n\n  get-game:\n    handler: src/functions/get-game.handler\n    events:\n      - http:\n          path: /games/{gameId}\n          cors: true\n          method: get\n          integration: lambda\n\n  list-games:\n    handler: src/functions/list-games.handler\n    events:\n      - http:\n          path: /games\n          cors: true\n          method: get\n          integration: lambda\n\n  play:\n    handler: src/functions/play.handler\n    events:\n      - http:\n          path: /games/{gameId}\n          cors: true\n          method: post\n          integration: lambda\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: games\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/games\n        Roles:\n          - Ref: IamRoleLambdaExecution\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n"]},{"id":154091757,"files":["service: sls-pg\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  vpc:\n    securityGroupIds:\n      - sg-0e567b68\n    subnetIds:\n      - subnet-0a053c6e\n      - subnet-7a427e0c\n      - subnet-95dfa5cd\n\nfunctions:\n  books-post-resource:\n    handler: src/books/functions/post-resource.handler\n    events:\n      - http:\n          path: books\n          method: post\n          cors: true\n\n  books-get-collection:\n    handler: src/books/functions/get-collection.handler\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n\n  books-get-resource:\n    handler: src/books/functions/get-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: get\n          cors: true\n\n  books-put-resource:\n    handler: src/books/functions/put-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: put\n          cors: true\n\n  books-delete-resource:\n    handler: src/books/functions/delete-resource.handler\n    events:\n      - http:\n          path: books/{id}\n          method: delete\n          cors: true\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\ncustom:\n  serverless-offline:\n    port: ${env:OFFLINE_PORT}\n"]},{"id":129637516,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: flightCards-skill\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  handler:\n    handler: main.handler\n    events:\n      - alexaSkill\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":85002767,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n\nplugins:\n - serverless-webpack\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":85970214,"files":["service: react-notes\n# use serverless-webpack plugin to transpile to ES6\nplugins:\n  - serverless-webpack\n# enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: prod\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  notesCreate:\n    handler: notes/create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesGet:\n    handler: notes/get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesList:\n    handler: notes/list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesUpdate:\n    handler: notes/update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n\n  notesDelete:\n    handler: notes/delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:723184708744:userpool/us-east-1_1NtE2Kxrs\n"]},{"id":104579425,"files":["service: email-chk\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\nfunctions:\n  api:\n    handler: handler.api\n    events:\n      - http:\n          path: /\n          method: get"]},{"id":114938989,"files":["service: sp-aws-direct-to-s3\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"*\"\n      Resource: \"*\"\n\nfunctions:\n  requestUploadUrl:\n    handler: handler.requestUploadUrl\n    events:\n      - http:\n          path: requestUploadUrl\n          method: post\n          cors: true\n\n  afterSend:\n    handler: handler.afterSend\n\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\n\ncustom:\n  optimize:\n    minify: true\n    presets: [\"env\"]\n  s3:\n    host: 0.0.0.0\n    port: 3030\n    directory: /tmp\n    cors: true\n    # Uncomment only if you already have a S3 server running locally\n    noStart: true\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-s3-local\n"]},{"id":108621610,"files":["service: aws-ses-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  sendEmail:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: sendEmail\n          method: post\n"]},{"id":144018618,"files":["service: serverless-vandium-demo\nprovider:\n  name: aws\n  runtime: nodejs8.10\nfunctions:\n  user:\n    handler: src/index.user\n    events:\n      - http:\n          path: user\n          method: get\n          cors: true\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n      - http:\n          path: user\n          method: post\n          cors: true"]},{"id":155135052,"files":["# Serving HTML through API Gateway for AWS Lambda\nservice: redirector\n\ncustom:\n  bucket: redirector-111222333 # change name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  environment:\n    BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n      Resource: 'arn:aws:s3:::${self:custom.bucket}/*'\n\nfunctions:\n  redirect:\n    handler: lib/handlers.redirect\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: get\n          path: /{any+}\n\nresources:\n  Resources:\n    redirect:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucket}\n"]},{"id":140910897,"files":["service: namewhisk-api\n\nplugins:\n  - serverless-dotenv-plugin\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  dotenv:\n    path: ./.env\n    include:\n      - WEBKNOX_API_KEY\n      - GREPWORDS_API_KEY\n      - DNS_SIMPLE_ENDPOINT\n      - DNS_SIMPLE_TOKEN\n      - AWS_IOT_HOST\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  timeout: 15\n  deploymentBucket: \n    name: ${self:custom.deploymentBucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - route53domains:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  trends:\n    handler: src/handler.trends\n    events:\n      - http:\n          path: trends/{id}\n          method: get\n          cors: true\n  lookup:\n    handler: src/handler.lookup\n    events:\n      - http:\n          path: lookup/{id}\n          method: get\n          cors: true\n  stats:\n    handler: src/handler.stats\n    events:\n      - http:\n          path: stats/{id}\n          method: get\n          cors: true\n  synonyms:\n    handler: src/handler.synonyms\n    events:\n      - http:\n          path: synonyms/{id}\n          method: get\n          cors: true\n   ","service: namewhisk-pubsub\n\nplugins:\n  - serverless-dotenv-plugin\n\ncustom:\n  stage: dev\n  debug: \"*\"\n  deploymentBucket: 'global-deployment-bucket'\n  dotenv:\n    path: ./.env\n    include:\n      - AWS_IOT_HOST\n  namewhisk:\n    functions:\n      - run\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: us-east-1\n  profile: default\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    DEBUG: ${self:custom.debug}\n  apiKeys:\n    - ${self:custom.stage}-namewhisk-session-key\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Connect\"\n        - \"iot:Publish\"\n        - \"iot:Subscribe\"\n        - \"iot:Receive\"\n        - \"iot:GetThingShadow\"\n        - \"iot:UpdateThingShadow\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - Ref: AWS::AccountId\n            - \"-\"\n            - Ref: AWS::Region\n            - -namewhisk\n            - /*\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"route53domains:*\"\n\nfunctions:\n  run:\n    memorySize: 1536\n    timeout: 300\n    handler: src/run.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'namewhisk/new-session'\"\n    environment:\n      namewhisk_S3_BUCKET_NAME:\n        Fn::Join:\n          - \"\"\n          - - Ref: AWS::AccountId\n            - \"-\"\n            - Ref: AWS::Region\n            - -namewhisk\n      namewhisk_S3_OBJECT_KEY_PREFIX: \"\"\n      namewhisk_S3_OBJECT_ACL: \"public-read\"\n      namewhisk_S3_BUCKET_URL:\n        Fn::GetAtt:\n          - Bucket\n          - DomainName\n  version:\n    memorySize: 128\n    handler: src/version.handler\n    events:\n    - http:\n        path: /version\n        method: GET\n  session:\n    memorySize: 128\n    timeout: 10\n    handler: src/session.handler\n    events:\n      - http:\n          method: OPTIONS\n          path: /\n          cors: true\n      - http:\n          method: GET\n          path: /\n          cors: true\n  disconnect:\n    memorySize: 256\n    handler: src/disconnect.handler\n    timeout: 10\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'namewhisk/last-will'\"\n\nresources:\n  Resources:\n    RunLogGroup:\n      Properties:\n        RetentionInDays: 7\n    VersionLogGroup:\n      Properties:\n        RetentionInDays: 7\n    SessionLogGroup:\n      Properties:\n        RetentionInDays: 7\n    DisconnectLogGroup:\n      Properties:\n        RetentionInDays: 7\n    Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName:\n          Fn::Join:\n            - \"\"\n            - - Ref: AWS::AccountId\n              - \"-\"\n              - Ref: AWS::Region\n              - -namewhisk\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled"]},{"id":179751915,"files":["service: translatetts\npackage:\n  exclude:\n    - env.yml\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  environment: ${file(env.yml):${self:provider.stage}}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - lambda:InvokeFunction\n        - polly:SynthesizeSpeech\n        - translate:TranslateText\n      Resource: '*'\n\nfunctions:\n  postTranslateTTS:\n    handler: index.postTranslateTTS\n    events:\n      - http:\n          path: translatetts\n          method: post\n          cors: true\nresources:\n  Resources:\n    audioBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n      Properties:\n        AccessControl: PublicRead\n        BucketName: translatetts-audio-${self:provider.stage}\ncustom:\n  prune:\n    automatic: true\n    number: 2\n\nplugins:\n  - serverless-prune-plugin\n"]},{"id":209775667,"files":["service: doodle-hours\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-southeast-2\n  memorySize: 128\n  timeout: 30\n  stage: ${opt:stage, 'dev'}\n  environment:\n    NODE_ENV: ${self:custom.nodeEnv.${opt:stage, self:provider.stage}, 'development'}\n    AIRTABLE_API_KEY: ${env:AIRTABLE_API_KEY}\n    AIRTABLE_BASE_ID: ${env:AIRTABLE_BASE_ID}\n\nfunctions:\n  app:\n    handler: ./functions/index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\ncustom:\n  nodeEnv:\n    dev: \"development\"\n    prod: \"production\"\n  serverless-offline:\n    port: 9000"]},{"id":95390062,"files":["service: chris-hutchinson-svelte\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.stage}\n  region: ${opt:region, self:custom.region}\n  profile: ${opt:profile}\n  environment:\n    STATIC_RESOURCE_DOMAIN: ${file(./config/${self:provider.stage}.env.yml):static_domain}\n\nfunctions:\n  app:\n    handler: handler.app\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /index.html\n          method: get\n  file:\n    handler: handler.file\n    events:\n      - http:\n          path: /app.js\n          method: get\n      - http:\n          path: /sw.js\n          method: get\n      - http:\n          path: /main.css\n          method: get\n      - http:\n          path: /manifest.json\n          method: get\n\npackage:\n  exclude:\n    - node_modules/babel-core/**\n    - node_modules/babel-loader/**\n    - node_modules/babel-plugin-external-helpers/**\n    - node_modules/babel-plugin-*/**\n    - node_modules/babel-preset-env/**\n    - node_modules/rollup/**\n    - node_modules/rollup-plugin-babel/**\n    - node_modules/rollup-plugin-copy/**\n    - node_modules/rollup-plugin-livereload/**\n    - node_modules/rollup-plugin-serve/**\n    - node_modules/rollup-plugin-svelte/**\n    - node_modules/rollup-plugin-uglify/**\n    - node_modules/rollup-watch/**\n    - node_modules/serverless-offline/**\n    - node_modules/serverless-plugin-custom-domain/**\n    - node_modules/svelte-loader/**\n    - node_modules/uglifyjs-webpack-plugin/**\n    - node_modules/webpack/**\n\ncustom:\n  stage: local\n  region: eu-west-1\n  \nplugins:\n  - serverless-offline"]},{"id":219040465,"files":["service: ofr-contact\napp: ofreport\norg: joshukraine\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment:\n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    SRC_EMAIL: ${self:custom.secrets.SRC_EMAIL}\n    DEST_EMAIL: ${self:custom.secrets.DEST_EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":196026627,"files":["name: sls-es-demo\nstage: dev\nregion: eu-west-1\n\nawsElasticsearch:\n  component: \"../../aws-elasticsearch\"\n  inputs:\n    name: sls-es-demo\n    ebsOptions:\n      EBSEnabled: true\n      VolumeSize: 20\n      VolumeType: 'gp2'\n    accessPolicies:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            AWS:\n              - \"*\"\n          Action:\n            - es:*\n          Resource:\n            - \"arn:aws:es:${region}:*:domain/sls-es-demo/*\"\n    region: ${region}\n"]},{"id":160097218,"files":["service: ox-banking-chile\n\nprovider:\n name: aws\n runtime: nodejs8.10\n memorySize: 128\n timeout: 15 # optional, in seconds, default is 6\n stage: prod\n region: us-west-2\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-offline-scheduler\n\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n"]},{"id":86751400,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-first-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":164102969,"files":["service:\n  name: ${self:custom.serviceName}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${env:REGION}\n  profile: ${env:PROFILE}\n  environments:\n    GLOBAL_SECRET: ${ssm:/${self:custom.serviceName}/${env:STAGE}/onekey~true}\n\ncustom:\n  serviceName: fii-sls\n  stage: ${opt:stage, self:custom.defaultStage}\n  defaultStage: dev\n  stages:\n    - ${opt:stage}\n    - dev\n    - integration\n    - production\n\nfunctions:\n  hello:\n    handler: src/handlers/authorizer/index.default\n    events:\n      - http:\n          path: /slshello\n          method: get\n    environment:\n      HELLO_SECRET: ${ssm:/${self:custom.serviceName}/${env:STAGE}/onekey~true}\n    layers:\n      - arn:aws:lambda:us-east-1:568614285549:layer:dbconnection:1\n"]},{"id":154862924,"files":["# For full Serverless config options, check the docs:\n#    https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\n\nservice: box-skills-ms-ams-video-audio\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 60 # 1 min\n  versionFunctions: true # maintains past versions in single deployment\n\n# overwriting defaults\n  stage: 'prod'\n  region: us-west-2\n\n# service wide environment variables\n  environment:\n    BOX_API_ENDPOINT: https://api.box.com/2.0\n    DEBUG: ${opt:debug, 'true'}\n    ARM_AAD_AUDIENCE: https://management.core.windows.net/\n    AAD_ENDPOINT: https://login.microsoftonline.com/\n    ARM_ENDPOINT: https://management.azure.com/\n    AAD_CLIENT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_SECRET: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    AAD_TENANT_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    SUBSCRIPTION_ID: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    RESOURCE_GROUP: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    ACCOUNT_NAME: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    REGION: 'FILL_FROM_YOUR_AZURE_ACCOUNT'\n    STAGE: 'prod'\n    SKILL_ACCEPTED_FORMATS: \"3gp,3gp2,mts,avi,dv,vob,mp4,mpg,ismv,ac3,bwf,mov,wmv\"\n    SKILL_FILE_SIZE_LIMIT_MB: \"10240\"\n    LANGUAGE: ${opt:language, 'en-US'}\n    SERVICE: ${self:service}\n    SYMMETRIC_ENCRYPTION_KEY: ${opt:symmetricEncryptionKey, 'REPLACE_WITH_OWN_KEY_HASH'}\n\n# packaging information\npackage:\n  artifact: ./ms-ams-video-nodejs.zip\n\nfunctions:\n  skill:\n    handler: index.handler\n    events: # The Events that trigger this Function\n      - http:\n          path: ${self:service}\n          method: any\n"]},{"id":161118164,"files":["service: at2gh\n\nplugins:\n  - serverless-secrets-plugin\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    GITHUB_API_KEY: ${self:custom.secrets.GITHUB_API_KEY}\n    AIRTABLE_API_KEY: ${self:custom.secrets.AIRTABLE_API_KEY}\n    REPO_OWNER: ${self:custom.secrets.REPO_OWNER}\n    REPO_NAME: ${self:custom.secrets.REPO_NAME}\n    AIRTABLE_BASE: ${self:custom.secrets.AIRTABLE_BASE}\n    AIRTABLE_LINK_PRE: ${self:custom.secrets.AIRTABLE_LINK_PRE}\n\nfunctions:\n  # init:\n  #   handler: handler.init\n  cron:\n    handler: handler.transferTasks\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":66138738,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: guve-slack-library\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Scan\n        - dynamodb:CreateTable\n        - dynamodb:PutItem\n        - dynamodb:UpdateTable\n        - dynamodb:DescribeTable\n      Resource: \"*\"\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:custom.profiles.${self:provider.stage}, ''}\n\ncustom:\n  defaultStage: dev\n  profiles:\n    dev: wd-sandbox\n    prod: prodProfile\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nfunctions:\n  api-library:\n    handler: api/books/index.route\n    events:\n      - http:\n          path: api/v2/book/{id}\n          method: get\n      - http:\n          path: api/v2/books/\n          method: get\n      - http:\n          path: api/v2/books/{query}\n          method: get\n      - http:\n          path: api/v2/books/add\n          method: post\n      - http:\n          path: api/v2/slack/library\n          method: post\n    package:\n      include:\n        - api/books/**\n\nresources:\n  Resources:\n    EBookBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: wunderdog-ebooks\n"]},{"id":105284845,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: notes-app-api # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# Use serverless-webpack to transpile ES6+\nplugins:\n  - serverless-webpack\n\n# Enable bundling & auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# You can overwrite defaults here\n  stage: prod\n  region: us-east-2\n\n# You can add statements to the Lambda function's IAM Role here\n# Grant Lambda functions with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\n# You can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# You can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  # The HTTP API endpoint which calls main() in the create API to create notes\n  create:\n    handler: create.main\n    events:\n      - http:\n          # url path is /notes\n          path: notes\n          # POST request\n          method: post\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the get API to retrieve notes\n  get:\n    handler: get.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: get\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the get API to retrieve a\n  # list of notes\n  list:\n    handler: list.main\n    events:\n      - http:\n          # url path is /notes\n          path: notes\n          # POST request\n          method: get\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the update API to update notes\n  update:\n    handler: update.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: put\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the delete API to delete notes\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: delete\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125674769,"files":["service: serverless-sns-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  getMessage:\n    handler: handler.getMessage\n    events:\n      - sns: sns-example-topic\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: sendMessage\n          method: get\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-offline-sns:\n    port: 4002\n    debug: true "]},{"id":132206463,"files":["service: aws-serverless-express\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  memorySize: 512\n  timeout: 10\n\n  environment:\n    NODE_ENV: ${file(./serverless.env.yml):${opt:stage, 'dev'}.NODE_ENV}\n    DB_DSN: ${file(./serverless.env.yml):${opt:stage, 'dev'}.DB_DSN}\n    SESSION_SECRET_KEY: ${file(./serverless.env.yml):${opt:stage, 'dev'}.SESSION_SECRET_KEY}\n    MESSAGES_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.aws.account_id}/${self:custom.aws.messages_queue}\n    REGION: ${self:provider.region}\n\npackage:\n  excludeDevDependencies: true\n  individually: true\n  exclude:\n    - .git/**\n    - .webpack\n    - .idea/**\n    - .severless*\n    - _optimize/**\n    - .babelrc\n    - package.json\n    - webpack.config.js\n\nplugins:\n  - serverless-plugin-common-excludes\n  - serverless-plugin-include-dependencies\n  - serverless-iam-roles-per-function\n  - serverless-webpack\n  - serverless-plugin-warmup\n  - serverless-offline\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  warmup:\n    memorySize: 256\n    timeout: 120\n    prewarm: true\n    role: LambdaInvokeRole\n  aws:\n    account_id: ${file(./serverless.env.yml):${opt:stage, 'dev'}.AWS_ACCOUNT_ID}\n    messages_queue: \"messages-${opt:stage, 'dev'}\"\n\nfunctions:\n  login:\n    handler: app/controllers/session/login.handler\n    warmup: true\n    events:\n      - http: 'POST /sessions'\n\n  createUser:\n    handler: app/controllers/user/createUser.handler\n    warmup: true\n    events:\n      - http: 'POST /users'\n\n  getUser:\n    handler: app/controllers/user/getUser.handler\n    events:\n      - http: 'GET /users/{id+}'\n\n  publishMessage:\n    handler: app/controllers/message/publishMessage.handler\n    events:\n      - http: 'POST /messages'\n    iamRoleStatements:\n      - Effect: 'Allow'\n        Action:\n          - sqs:SendMessage\n        Resource: arn:aws:sqs:*:*:${self:custom.aws.messages_queue}\n\nresources:\n  Resources:\n    LambdaInvokeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: LambdaInvokeRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: LambdaInvokePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'lambda:InvokeFunction'\n                  Resource:\n                  - Fn::Join:\n                    - ':'\n                    - - arn:aws:lambda\n                      - Ref: AWS::Region\n                      - Ref: AWS::AccountId\n                      - function:${self:service}-${opt:stage, self:provider.stage}-*\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\":\", [\"arn:aws:logs\", { \"Ref\" : \"AWS::Region\" }, { \"Ref\" : \"AWS::AccountId\" }, \"log-group:/aws/lambda/*:*:*\" ] ]  }\n\n    MessageQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.aws.messages_queue}\n        VisibilityTimeout: 60\n"]},{"id":189866954,"files":["service: secret-santa\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n\nfunctions:\n  wishlist:\n    handler: handler.wishlist\n    events:\n      - http:\n          path: /wishlist/{id}\n          method: get\n          cors: true\n\n  index:\n    handler: handler.index\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n\n  handleWishlistSubmision:\n    handler: handler.handleWishlistSubmision\n    events:\n      - http:\n          path: /wishlist/{id}/form\n          method: post\n          cors: true\n\n  handlePairCreation:\n    handler: handler.handlePairCreation\n    events:\n      - http:\n          path: /form\n          method: post\n          cors: true\n"]},{"id":174171579,"files":["service: lambda-cwlogs-to-logsene\n\nplugins:\n  - serverless-iam-roles-per-function\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ${self:custom.secrets.REGION, \"us-east-1\"}\n  versionFunctions: false\n\nfunctions:\n  shipper:\n    handler: shipper.handler\n    description: Sends CloudWatch logs from Kinesis to Sematext Elastic Search API\n    memorySize: 128\n    timeout: 3\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - LogsKinesisStream\n              - Arn\n          batchSize: ${self:custom.secrets.BATCH_SIZE}\n          startingPosition: LATEST\n          enabled: true\n    environment:\n      LOGS_TOKEN: ${self:custom.secrets.LOGS_TOKEN}\n      LOGS_RECEIVER_URL: ${self:custom.secrets.LOGS_RECEIVER_URL}\n      LOGS_BULK_SIZE: 100\n      LOG_INTERVAL: 2000\n      SPM_TOKEN: ${self:custom.secrets.SPM_TOKEN}\n      SPM_RECEIVER_URL: ${self:custom.secrets.SPM_RECEIVER_URL}\n  \n  subscriber:\n    handler: subscriber.handler\n    description: Subscribe all CloudWatch log groups to Kinesis\n    memorySize: 128\n    timeout: 30\n    events:\n      - http:\n          path: subscribe\n          method: get\n      - cloudwatchEvent:\n          event:\n            source:\n              - aws.logs\n            detail-type:\n              - AWS API Call via CloudTrail\n            detail:\n              eventSource:\n                - logs.amazonaws.com\n              eventName:\n                - CreateLogGroup\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"iam:PassRole\"\n          - \"sts:AssumeRole\"\n          - \"logs:PutSubscriptionFilter\"\n          - \"logs:DeleteSubscriptionFilter\"\n          - \"logs:DescribeSubscriptionFilters\"\n          - \"logs:DescribeLogGroups\"\n          - \"logs:PutRetentionPolicy\"\n        Resource: \"*\"\n    environment:\n      filterName: ${self:custom.stage}-${self:provider.region}\n      region: ${self:provider.region}\n      shipperFunctionName: \"shipper\"\n      subscriberFunctionName: \"subscriber\"\n      prefix: ${self:custom.secrets.PREFIX, \"/aws/lambda\"}\n      retentionDays: ${self:custom.secrets.LOG_GROUP_RETENTION_IN_DAYS}\n      kinesisArn: \n        Fn::GetAtt:\n          - LogsKinesisStream\n          - Arn\n      roleArn: \n        Fn::GetAtt:\n          - CloudWatchLogsRole\n          - Arn\n\nresources:\n  Resources:\n    LogsKinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties: \n        Name: ${self:service}-${self:custom.stage}-logs\n        ShardCount: ${self:custom.secrets.KINESIS_SHARD_COUNT}\n        RetentionPeriodHours: ${self:custom.secrets.KINESIS_RETENTION_IN_HOURS}\n\n    CloudWatchLogsRole:\n      Type: AWS::IAM::Role\n      Properties: \n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement: \n            - Effect: Allow\n              Principal: \n                Service: \n                  - logs.amazonaws.com\n              Action: \n                - sts:AssumeRole\n        Policies:\n          - PolicyName: root\n            PolicyDocument: \n              Version: \"2012-10-17\"\n              Statement: \n                - Effect: Allow\n                  Action: \n                    - kinesis:PutRecords\n                    - kinesis:PutRecord\n                  Resource:\n                    Fn::GetAtt:\n                      - LogsKinesisStream\n                      - Arn\n        RoleName: ${self:service}-${self:custom.stage}-cloudwatchrole"]},{"id":97208964,"files":["service: botmatic-assistant\nprovider:\n  name: aws\n  profile: default\n  runtime: nodejs6.10\n  stage: ${opt:stage}\n  region: eu-west-2\n  memorySize: 512\n  timeout: 300\n  environment:\n    CONFIG: ${file(./config/${self:provider.stage}/config.json.config)}\n\nfunctions:\n  api:\n    handler: api.handler\n    events:\n      - http:\n          cors: true\n          method: post\n          path: api\n\n  query:\n    handler: query.handler\n    events:\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .csv\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .xlsx\n      - s3:\n          bucket: documentBucket\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .xls\n\nresources:\n  Resources:\n    user:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_user\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    userSession:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_user_session\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    queryCache:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.stage}_query_cache\n        AttributeDefinitions:\n          - AttributeName: id # sha256'd query\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    documentBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}_document_bucket\n\n    siteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}_site_bucket\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-dynamodb-ttl\n  - serverless-offline\n  - serverless-s3-deploy\n  - serverless-s3-local\n  - serverless-webpack\n\ncustom:\n  assets:\n    auto: true\n    targets:\n      - bucket: ${self:provider.stage}_site_bucket\n        files:\n          - source: ../client/\n            globs: '**/*'\n\n  dynamodb:\n    start:\n      port: 18764\n      inMemory: true\n      migrate: true\n      seed: true\n    ttl:\n      - table: ${self:provider.stage}_user_session\n        field: ttl\n    seed:\n      domain:\n        sources:\n          - table: ${self:provider.stage}_user\n            sources: [./seed/staging/db/user.json]\n\n  s3:\n    port: 52361\n    cors: true\n    directory: ./build/tmp\n    buckets:\n      - ${self:provider.stage}_document_bucket\n\n  serverless-offline:\n    port: 4000\n\n  webpack: ./webpack/config/server.js\n      \n  webpackIncludeModules: true\n"]},{"id":98594215,"files":["service: serverless-store\n\ncustom:\n  awsAccountId: 1234567890  \n  cognitoAuthorizer: arn:aws:cognito-idp:us-east-1:${self:custom.awsAccountId}:userpool/us-east-1_aBcdeFghi\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  timeout: 30\n  environment:\n    IOT_ENDPOINT: abcdefghijklm.iot.us-east-1.amazonaws.com\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sdb:BatchPutAttributes\"\n        - \"sdb:PutAttributes\"\n        - \"sdb:Select\"\n      Resource: [\n        \"arn:aws:sdb:us-east-1:*:domain/Products\",\n        \"arn:aws:sdb:us-east-1:*:domain/ShoppingCart\"\n      ]\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:Scan\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:BatchWriteItem\"\n      Resource: [\n        \"arn:aws:dynamodb:us-east-1:*:table/Products\",\n        \"arn:aws:dynamodb:us-east-1:*:table/ShoppingCart\"\n      ]\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource: \n        \"arn:aws:iot:${self:provider.region}:${self:custom.awsAccountId}:topic/serverless-store-*\"\n\nfunctions:\n  products:\n    handler: functions/products.handler\n    events:\n      - http: GET products\n      - http:\n          method: GET\n          path: productsAuth\n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}          \n      - http: OPTIONS productsAuth\n      - http:\n          method: POST\n          path: cart\n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}\n      - http: OPTIONS cart\n      - http:\n          method: PUT\n          path: checkout  \n          authorizer: \n            arn: ${self:custom.cognitoAuthorizer}\n      - http: OPTIONS checkout\n      \n  comments:\n    handler: functions/comments.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'serverless-store-comments'\"\n          "]},{"id":123897587,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: amazon-get-product\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    PRODUCT_API_KEY: \"${self:custom.secrets.PRODUCT_API_KEY}\"\n    PRODUCT_API_SECRET: \"${self:custom.secrets.PRODUCT_API_SECRET}\"\n    PRODUCT_ASSOC_TAG: \"${self:custom.secrets.PRODUCT_ASSOC_TAG}\"\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.yml):${self:custom.stage}}\n\n# The `functions` block defines what code to deploy\nfunctions:\n  amazonGetProduct:\n    handler: handler.amazonGetProduct\n    events:\n      - http:\n          path: amazon-get-product\n          method: get\n          cors: true\n"]},{"id":187526935,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-domain-manager\n\n# The `service` block is the name of the service\nservice: serverless-exyos\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\ncustom:\n  customDomain:\n    domainName: exyos.acari.io\n    basePath: ''\n    stage: prd\n    createRoute53Record: true\n\n# The `functions` block defines what code to deploy\nfunctions:\n  API:\n    handler: src/api/index.handler\n    events:\n      - http:\n          path: /api # this matches the base path\n          method: ANY\n      - http:\n          path: /api/{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n  exyos:\n    handler: src/index.handler\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: / # this matches the base path\n          method: ANY\n      - http:\n          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special\n          method: ANY\n"]},{"id":209345724,"files":["service: ecupcakes-sls-nodejs-aws-demo\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  memorySize: 2048\n  timeout: 15\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - lambda:InvokeFunction\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n  usagePlan:\n    throttle:\n      burstLimit: 500\n      rateLimit: 1000\n  tracing:\n    apiGateway: true\n    lambda: true\n\nfunctions:\n  create:\n    handler: orders/create.create\n    events:\n      - http:\n          path: api/v1/ecupcakes/order\n          method: post\n          cors: true\n\n  list:\n    handler: orders/list.list\n    events:\n      - http:\n          path: api/v1/ecupcakes/order\n          method: get\n          cors: true\n\nresources:\n Resources:\n   UserOrders:\n     Type: AWS::DynamoDB::Table\n     DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy\n     Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n"]},{"id":136851450,"files":["\n\nservice: contact-form\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  app:\n    handler: handler.form\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\n\n\nplugins:\n  - serverless-offline"]},{"id":77827813,"files":["# https://github.com/laardee/serverless-authentication-boilerplate\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: serverless-authentication # change this\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-west-2\n\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n    - Effect: Allow\n      Action:\n      - cognito-sync:*\n      - cognito-identity:*\n      Resource: arn:aws:cognito-identity:*:*:*\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n\npackage:\n  exclude:\n    - .git/**\n\n# Functions\n\nfunctions:\n  signin:\n    handler: handler.signin\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/signin/{provider}\n          method: get\n          integration: lambda-proxy\n  callback:\n    handler: handler.callback\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/callback/{provider}\n          method: get\n          integration: lambda-proxy\n  refresh:\n    handler: handler.refresh\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/refresh/{refresh_token}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: |\n                {\n                  \"refresh_token\":\"$input.params('refresh_token')\",\n                  \"id\":\"$input.params('id')\",\n                  \"state\":\"$input.params('state')\",\n                  \"host\":\"$input.params().header.get('host')\",\n                  \"stage\":\"$context.stage\"\n                }\n  authorize:\n    handler: handler.authorize\n\nresources:\n  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template\n  Resources:\n    CacheTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: token\n          AttributeType: S\n        - AttributeName: type\n          AttributeType: S\n        KeySchema:\n        - AttributeName: token\n          KeyType: HASH\n        - AttributeName: type\n          KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.CACHE_DB_NAME}\n#    UsersTable:\n#      Type: AWS::DynamoDB::Table\n#      Properties:\n#        AttributeDefinitions:\n#        - AttributeName: userId\n#          AttributeType: S\n#        KeySchema:\n#        - AttributeName: userId\n#          KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 1\n#          WriteCapacityUnits: 1\n#        TableName: ${self:provider.environment.USERS_DB_NAME}\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: greeting\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  # you can overwrite defaults here\n  #  stage: dev\n  region: us-west-2\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-west-2:*:*\"\n\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  list:\n    handler: greetings/list.list\n    memorySize: 128\n    events:\n      - http:\n          path: greetings\n          method: get\n          cors: true\n  #    The following are a few example events you can configure\n  #    NOTE: Please make sure to change your handler code to work with those events\n  #    Check the event documentation for details\n\n  #      - s3: ${env:BUCKET}\n  #      - schedule: rate(10 minutes)\n  #      - sns: greeter-topic\n  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n  #      - alexaSkill\n\n  #    Define function environment variables here\n  #    environment:\n  #      variable2: value2\n\n  create:\n    handler: greetings/post.post\n    memorySize: 128\n    events:\n      - http:\n          path: greetings\n          method: post\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n  read:\n    handler: greetings/get.get\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: greetings/put.put\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: put\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n  delete:\n    handler: greetings/delete.delete\n    memorySize: 128\n    events:\n      - http:\n          path: greetings/{id}\n          method: delete\n          cors: true\n          integration: lambda\n          authorizer:\n            arn: ${file(./config/authorizer.js):arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    greetingsDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${file(./greetings/config.js):tableName}\n        AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n        KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-dynamodb-local\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migration: true\n    migration:\n      dir: offline/migrations\n  optimize:\n    includePaths: ['config']\n\npackage:\n  individually: true\n","# https://github.com/serverless/examples/tree/master/aws-node-single-page-app-via-cloudfront\n\nservice: greeting-app\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - app/**\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: ${file(./config/config.js):s3Bucket}\n  appDist: app/dist/\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n"]},{"id":191153551,"files":["\nservice: rest-api # NOTE: update this with your service name\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n\ncustom:\n  packageExternal:\n    external:\n      - '../../api'\n\nfunctions:\n  app:\n    handler: handler.handler\n    # The `events` block defines how to trigger the http events\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\n\n\nplugins:\n  # - serverless-offline\n  - serverless-package-external\n","service: single-page-app-via-cloudfront7\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: lf-serverless-frontend\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]"]},{"id":192565509,"files":["service: jira-github-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-dotenv-plugin\n\n# you can add packaging information here\npackage:\n  include:\n    - pr-lambda.js\n    - branch-lambda.js\n    - pr-handler.js\n    - branch-handler.js\n    - client.js\n    - node_modules/**\n\nfunctions:\n  pr-github-jira-hook:\n    handler: pr-lambda.handler\n    environment:\n      JIRA_DOMAIN: ${env:JIRA_DOMAIN}\n      TOKEN: ${env:TOKEN}\n      USERNAME: ${env:USERNAME}\n      GITHUB_PR_OPEN: ${env:GITHUB_PR_OPEN}\n      GITHUB_BRANCH_OPEN: ${env:GITHUB_BRANCH_OPEN}\n      GITHUB_PR_MERGED: ${env:GITHUB_PR_MERGED}\n\n  branch-github-jira-hook:\n    handler: branch-lambda.handler\n    environment:\n      JIRA_DOMAIN: ${env:JIRA_DOMAIN}\n      TOKEN: ${env:TOKEN}\n      USERNAME: ${env:USERNAME}\n      GITHUB_PR_OPEN: ${env:GITHUB_PR_OPEN}\n      GITHUB_BRANCH_OPEN: ${env:GITHUB_BRANCH_OPEN}\n      GITHUB_PR_MERGED: ${env:GITHUB_PR_MERGED}\n"]},{"id":153861195,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\niamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    # Restrict our IAM role permissions to\n    # the specific table for the stage\n    Resource:\n      - \"Fn::GetAtt\": [NotesTable, Arn]\n\n# These environment variables are made available to our functions\n# under process.env.\nenvironment:\n  tableName: ${self:custom.tableName}\n  stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\nbilling:\n  handler: billing.main\n  events:\n    - http:\n        path: billing\n        method: post\n        cors: true\n        authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n"]},{"id":123959517,"files":["service: sls-data-extraction\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  cfLogs: true\n  versionFunctions: false\n  logRetentionInDays: 7\n  environment:\n    DB_HOST: ${file(serverless.env.yml):DB_HOST, env:DB_HOST}\n    DB_DATABASE: ${file(serverless.env.yml):DB_DATABASE, env:DB_DATABASE}\n    DB_USERNAME: ${file(serverless.env.yml):DB_USERNAME, env:DB_USERNAME}\n    DB_PASSWORD: ${file(serverless.env.yml):DB_PASSWORD, env:DB_PASSWORD}\n    GITHUB_TOKEN: ${file(serverless.env.yml):GITHUB_TOKEN, env:GITHUB_TOKEN}\n\nfunctions:\n  # Daily statistics for all properties: sell\n  base-data-sell:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: sell\n    events:\n      - schedule: cron(15 0 * * ? *)\n\n  # Daily statistics for all properties: buy\n  base-data-buy:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: buy\n    events:\n      - schedule: cron(10 0 * * ? *)\n\n  # Daily statistics for all properties: rent\n  base-data-rent:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: rent\n    events:\n      - schedule: cron(5 0 * * ? *)\n\n  # Daily statistics for all properties: want-to-rent\n  base-data-want-to-rent:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: want_to_rent\n    events:\n      - schedule: cron(0 0 * * ? *)\n\n  # Weekly market share analysis\n  market-share:\n    handler: src/market-share.run\n    events:\n      - schedule: rate(7 days)\n\n  # Median monthly SELLING price for APARTMENTS in Riga\n  regional-data-apartment-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(30 0 1 * ? *)\n  regional-price-per-sqm-apartment-sell-monthly:\n    name: RegionalPricePerSqmApartmentSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(31 0 1 * ? *)\n\n  # Median monthly RENT price for APARTMENTS in Riga\n  regional-data-apartment-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(35 0 1 * ? *)\n  regional-price-per-sqm-apartment-rent-monthly:\n    name: RegionalPricePerSqmApartmentRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(36 0 1 * ? *)\n\n  # Median monthly SELLING price for HOUSES in Riga\n  regional-data-house-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(40 0 1 * ? *)\n  regional-price-per-sqm-house-sell-monthly:\n    name: RegionalPricePerSqmHouseSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(41 0 1 * ? *)\n\n  # Median monthly RENT price for HOUSES in Riga\n  regional-data-house-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(45 0 1 * ? *)\n  regional-price-per-sqm-house-rent-monthly:\n    name: RegionalPricePerSqmHouseRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(46 0 1 * ? *)\n\n  # Median monthly SELLING price for LAND in Riga\n  regional-data-land-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(50 0 1 * ? *)\n  regional-price-per-sqm-land-sell-monthly:\n    name: RegionalPricePerSqmLandSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(51 0 1 * ? *)\n\n  # Median monthly RENT price for LAND in Riga\n  regional-data-land-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(55 0 1 * ? *)\n  regional-price-per-sqm-land-rent-monthly:\n    name: RegionalPricePerSqmLandRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(56 0 1 * ? *)\n\n  # Median monthly SELLING price for APARTMENTS in Latvia\n  regional-data-apartment-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(32 0 1 * ? *)\n  regional-price-per-sqm-apartment-sell-monthly-lv:\n    name: RegionalPricePerSqmApartmentSellMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(33 0 1 * ? *)\n\n  # Median monthly RENT price for APARTMENTS in Latvia\n  regional-data-apartment-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(37 0 1 * ? *)\n  regional-price-per-sqm-apartment-rent-monthly-lv:\n    name: RegionalPricePerSqmApartmentRentMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(38 0 1 * ? *)\n\n  # Median monthly SELLING price for HOUSES in Latvia\n  regional-data-house-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(42 0 1 * ? *)\n  regional-price-per-sqm-house-sell-monthly-lv:\n    name: RegionalPricePerSqmHouseSellMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(43 0 1 * ? *)\n\n  # Median monthly RENT price for HOUSES in Latvia\n  regional-data-house-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(47 0 1 * ? *)\n  regional-price-per-sqm-house-rent-monthly-lv:\n    name: RegionalPricePerSqmHouseRentMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(48 0 1 * ? *)\n\n  # Median monthly SELLING price for LAND in Latvia\n  regional-data-land-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n\n  # Median monthly RENT price for LAND in Latvia\n  regional-data-land-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n","DB_HOST: 127.0.0.1\nDB_DATABASE: brokalys\nDB_USERNAME: root\nDB_PASSWORD: secret\n\nGITHUB_TOKEN: token\n"]},{"id":168455603,"files":["service: puller\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  puller:\n    handler: puller.puller\n    environment:\n      GITHUB_TOKEN: ${ssm:puller-githubToken~true}\n      baseRepoOwner: ${ssm:puller-baseRepoOwner}\n      repoName: ${ssm:puller-repoName}\n      baseRepoBranch: ${ssm:puller-baseRepoBranch}\n      headRepoOwner: ${ssm:puller-headRepoOwner}\n      headRepoBranch: ${ssm:puller-headRepoBranch}\n    events:\n      - schedule: rate(1 hour)\n"]},{"id":111888121,"files":["service: ses-to-slack\n\nplugins:\n  - serverless-webpack\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-northeast-1\n\nfunctions:\n  handle:\n    handler: handler.handle\n"]},{"id":140923308,"files":["app: memopad\ntenant: holnet1026\nservice: memopad-api # NOTE: update this with your service name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n#  - serverless-apigw-binary\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    NODE_ENV: ${opt:stage}\nfunctions:\n  app:\n    handler: src/serverless.handler \n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    cors:\n      origin: '*' \n      \n"]},{"id":173962875,"files":["service: aws-iot-api\n\nprovider:\n  name: aws\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Publish\"\n      Resource:\n        Fn::Join:\n          - \":\"\n          - - \"arn:aws:iot\"\n            - Ref: \"AWS::Region\"\n            - Ref: \"AWS::AccountId\"\n            - \"topic/devopstar/alexa/esp8266-group\"\n  runtime: nodejs8.10\n  environment:\n    IOT_ENDPOINT: xxxxxxxxxxxx.iot.us-east-1.amazonaws.com\n    IOT_TOPIC: devopstar/alexa/esp8266-group\n\nfunctions:\n  lights:\n    handler: handler.lights\n    events:\n      - http:\n          path: lights\n          method: post\n"]},{"id":169236762,"files":["service: todo-app-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: server.run\n    events:\n      - http:\n          path: api/todos\n          method: any\n          cors: \n            allowCredentials: true\n            origin: '*'\n            headers: \n              - accept\n              - Content-Type\n              - Origin\n              - User-Agent\n              - Referer\n      - http:\n          path: api/todos/{id}\n          method: any\n          request:\n            parameters:\n              paths:\n                id: true\n          cors: \n            allowCredentials: true\n            origin: '*'\n            headers: \n              - accept\n              - Content-Type\n              - Origin\n              - User-Agent\n              - Referer"]},{"id":209023237,"files":["service: python3-spacy-lambda\n\nprovider:\n  name: aws\n  # Ensure our function has write access to cloudwatch logs.\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'logs:*'\n      Resource:\n        - '*'\n  runtime: python3.7\n  stage: dev\n  region: ap-southeast-2\n  memorySize: 2056\n\nfunctions:\n  main:\n    handler: handler.main\n    layers:\n      - arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python37-SciPy1x:2\n      - arn:aws:lambda:ap-southeast-2:273047674297:layer:spacy_layer_lite:2\n    events:\n      - http:\n          path: /\n          method: any\n          cors: true\n\nplugins:\n  - serverless-python-requirements\n  - serverless-offline\n  - serverless-plugin-warmup\ncustom:\n  serverless-offline:\n    port: 4000\n  # https://github.com/UnitedIncome/serverless-python-requirements\n  warmup:\n    enabled: true\n    events:\n      - schedule: rate(5 minutes)\n  pythonRequirements:\n    # Docker must be installed on Windows/Mac:\n    # https://serverless.com/blog/serverless-python-packaging/\n    dockerizePip: non-linux\n    # Reduces package size by removing directories like `PyCache`.\n    # Do NOT use this option on win32 systems.\n    # slim: true\n    # strip: false\n\npackage:\n  #  exclude:\n  #  - src/**\n  include:\n    - src/handler.py\n  exclude:\n    - node_modules/**\n    - venv/**\n    - en_core_web_sm-2.1.0/**\n    - .idea/**\n    - __pycache__/**\n    - package.json\n    - package-lock.json"]},{"id":138886608,"files":["service: go-til\n\nprovider:\n  name: aws\n  runtime: go1.x\n  region: eu-central-1\n  memorySize: 512\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-central-1:*:table/tils\"\n\nresources:\n  Resources:\n    TilDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'tils'\n\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  insert:\n    handler: bin/insert\n    description: Insert new til\n    events:\n      - http:\n          path: tils\n          method: post\n          authorizer: aws_iam\n  remove:\n    handler: bin/remove\n    description: Remove til\n    events:\n      - http:\n          path: tils/{id}\n          method: delete\n          authorizer: aws_iam\n  list:\n    handler: bin/list\n    description: List tils by user id\n    events:\n      - http:\n          path: tils\n          method: get\n          authorizer: aws_iam"]},{"id":159141041,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: service-name-js # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":124797795,"files":["service: tvass\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  environment:\n    PUSHER_APP_ID: your-app-id\n    PUSHER_APP_KEY: your-app-key\n    PUSHER_APP_SECRET: your-app-secret\n    PUSHER_APP_CLUSTER: your-app-cluster\n\nfunctions:\n  home:\n    handler: handler.home\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  webhook:\n    handler: handler.webhook\n    events:\n    - http:\n        path: /webhook\n        method: post\n        cors: true\n"]},{"id":205958653,"files":["service:\n  name: sls-vscode-debug-ts\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 1234\n    printOutput: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":114248834,"files":["service: caverna-menubot\n\ncustom:\n  targetBucketName: caverna-menus\n  targetSiteUrl: https://caverna.fi/lounas/\n  chrome:\n    flags:\n      - --window-size=1280x1696 # Letter size\n      - --hide-scrollbars\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-west-1\n  environment:\n    PAGE_LOAD_TIMEOUT: 20000\n    LOGGING: true\n    SLACK_WEBHOOK_URL: ${file(./slack.yml):WebhookUrl}\n    TARGET_SITE_URL: ${self:custom.targetSiteUrl}\n    TARGET_BUCKET_NAME: ${self:custom.targetBucketName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.targetBucketName}/*\"\n\nplugins:\n  - serverless-plugin-chrome\n\nfunctions:\n  screenshot:\n    description: Takes picture of Caverna menu\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/screenshot.default\n    events:\n      - http:\n          path: screenshot\n          method: get\n      - schedule: cron(30 7 ? * 2-6 *) # Mon-Fri, 10:30. Just before lunch time.\n\n  slack:\n    description: Post menu to slack\n    memorySize: 128\n    timeout: 10\n    handler: src/handlers/slackPoster.default\n    events:\n      - http:\n          path: slack\n          method: get\n      - s3:\n          bucket: ${self:custom.targetBucketName}\n          event: s3:ObjectCreated:*\n\n# Uncomment when deploying the first time to create required buckets\n# resources:\n#   Resources:\n#     NewResource:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${self:custom.targetBucketName}"]},{"id":82834616,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: line-bot-pipi\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  linebot:\n    handler: handler.linebot\n    # イベントを追加\n    events:\n      - http:\n          path: bot\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n    environment:\n      CHANNEL_ACCESS_TOKEN: ${env:CHANNEL_ACCESS_TOKEN}\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116652126,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: form-recaptcha\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs6.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  form:\n    handler: handler.form\n    description: Contact form submission + Recaptcha (To prevent Abuse). Finally, emails the form data.\n    memorySize: 128\n    timeout: 5\n    events:\n    - http:\n        path: form\n        method: post\n        cors:\n          origin: '*'\n          headers:\n            - Content-Type\n            - X-Amz-Date\n            - Authorization\n            - X-Api-Key\n            - X-Amz-Security-Token\n            - X-Amz-User-Agent\n          methods:\n            - OPTIONS\n            - POST\n          allowCredentials: false\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":195915755,"files":["service: lambda-waf-demo\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: demo\n  region: us-east-1\n  deploymentBucket: lambda-waf-demo-us-east-1\n  # This API Key prevents requests targeting APIG directly to skip the WAF\n  apiKeys:\n    - value: mySecretApiKeyThatOnlyCloudFrontKnows\n      description: Api key that ensures that APIG is only accessed through CloudFormation\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          private: true\n\nresources:\n  Resources:\n    # S3 bucket that stores the CloudFront logs\n    CloudFrontAccessLogBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: lambda-waf-cloudfront-logs\n        AccessControl: Private\n\n    # WAF Security Automations stack\n    WafStack:\n      Type: \"AWS::CloudFormation::Stack\"\n      Properties:\n        TemplateURL: \"https://s3.amazonaws.com/lambda-waf-demo-us-east-1/aws-waf-security-automations/v2.3.0/aws-waf-security-automations.template\"\n        Parameters:\n          # We don't need this honeyepot for our API\n          ActivateBadBotProtectionParam: \"no\"\n          EndpointType: \"CloudFront\"\n          AppAccessLogBucket: !Ref CloudFrontAccessLogBucket\n          # We want to use Athena to query the access logs using SQL\n          ActivateHttpFloodProtectionParam: \"yes - Amazon Athena log parser\"\n          ActivateScannersProbesProtectionParam: \"yes - Amazon Athena log parser\"\n\n    # CloudFront distribution\n    # https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudfront-distribution/\n    ApiDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          # Associates the distribution with the WAF\n          WebACLId:\n            Fn::GetAtt: [WafStack, Outputs.WAFWebACL]\n          Origins:\n            - Id: ApiGateway\n              DomainName:\n                Fn::Join:\n                  - \"\"\n                  - - Ref: ApiGatewayRestApi\n                    - \".execute-api.\"\n                    - Ref: AWS::Region\n                    - \".amazonaws.com\"\n              OriginPath:\n                Fn::Join:\n                  - \"\"\n                  - - \"/\"\n                    - ${self:provider.stage}\n              OriginCustomHeaders:\n                - HeaderName: X-API-Key\n                  HeaderValue: mySecretApiKeyThatOnlyCloudFrontKnows\n              CustomOriginConfig:\n                OriginProtocolPolicy: https-only\n          Enabled: true\n          HttpVersion: http2\n          PriceClass: PriceClass_100\n          Logging:\n            Bucket: !GetAtt CloudFrontAccessLogBucket.DomainName\n            IncludeCookies: true\n            Prefix: \"\"\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            CachedMethods:\n              - GET\n              - HEAD\n              - OPTIONS\n            ForwardedValues:\n              QueryString: true\n              # Required when using cloufront.net domain\n              # on a custom domain ou can set \"*\" and disable caching\n              Headers:\n                - Accept\n                - Referer\n                - Athorization\n                - Content-Type\n              Cookies:\n                Forward: all\n            Compress: true\n            MinTTL: \"0\"\n            MaxTTL: \"0\"\n            DefaultTTL: \"0\"\n            TargetOriginId: ApiGateway\n            ViewerProtocolPolicy: https-only\n"]},{"id":99372691,"files":["service: monolambda-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: production\n  region: us-east-2\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n    - resources/**\n    - README.md\n    - LICENSE\n    - .eslintrc\n  \nfunctions:\n  contactForm:\n    description: Handles submitted contact forms on monolambda.com\n    handler: src/functions/contactForm/contactForm.handleMessage\n    memorySize: 256\n    timeout: 3\n    events:\n      - http:\n          path: contact-form\n          method: POST\n          cors: true\n  healthCheck:\n    description: Handles health check for all other functions\n    handler: src/functions/healthCheck/healthCheck.handleHealthCheck\n    memorySize: 128\n    timeout: 3\n    events:\n      - http:\n          path: health-check\n          method: GET\n          cors: true"]},{"id":211548473,"files":["service: ES6Lambda\napp: es6-lambda-slack\n#frameworkVersion: '>=1.28.0 <2.0.0'\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  # API Endpoint\n  api_url_path: sky-api\n  webpack:\n    webpackConfig: ./webpack.config.js \n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n      - http:\n          path: ${self:custom.api_url_path}\n          method: any\n          integration: lambda\n          request:\n            template:\n              application/json: '{\n  \"method\": \"$context.httpMethod\",\n  \"body\" : $input.json(''$''),\n  \"headers\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n  },\n  \"queryParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"\n  },\n  \"pathParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\n  }  \n}'\n              application/x-www-form-urlencoded: '{\n  \"method\": \"$context.httpMethod\",\n  \"body\" : $input.json(''$''),\n  \"headers\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n  },\n  \"queryParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"\n  },\n  \"pathParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\n  }  \n}'\n          response:\n            template: $input.json('$')\n          cors: true\n\nplugins:\n  - serverless-offline\n  # Use the serverless-webpack plugin to transpile ES6\n  - serverless-webpack\n\n# serverless optimization\npackage:\n  individually: true\n"]},{"id":196246021,"files":["name: sls-es-demo\nstage: dev\nregion: eu-west-1\n\nAwsEcsTaskDefinition:\n  component: \"../\"\n  inputs:\n    region: ${region}\n    taskDefinition:\n      family: my-task\n      cpu: \"1024\"\n      memory: \"2048\"\n      volumes:\n          - name: foo\n            host:\n              sourcePath: /home/foo\n          - name: bar\n            host:\n              sourcePath: /home/bar\n      containerDefinitions:\n          - name: myContainer\n            portMappings:\n              - hostPort: 80\n                containerPort: 80\n                protocol: tcp\n            cpu: 0\n            environment:\n              - name: FOO\n                value: BAR\n            mountPoints:\n              - containerPath: /var/www/foo\n                sourceVolume: foo\n              - containerPath: /var/www/bar\n                sourceVolume: bar\n            memory: 768\n            image: alpine:latest\n            essential: true\n"]},{"id":101948705,"files":["service: letterpost-docx\n# plugins:\n#   - serverless-pseudo-parameters\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  region: 'us-east-1'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    AWS_BUCKET: letterpost\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\n# package:\n#   exclude:\n#     - libre-office-layer/**\n\nfunctions:\n  handler:\n    timeout: 300\n    handler: src/handler.handler\n    events:\n      - sns: letterpost-docx\n\n# layers:\n#   libre-office:\n#     path: libre-office-layer\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-messages\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  bucket: 'letterpost-messages'\n\nprovider:\n  stage: dev\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    AWS_IOT_HOST: 'adx5fx5ykfiey-ats.iot.us-east-1.amazonaws.com'\n    DYNAMODB_PREFIX: 'letterpost-api-prod'\n    AWS_BUCKET: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - iot:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - sns:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - sns: letterpost-messages\n","service: letterpost-ghostscript\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom: \n  bucket: 'global-deployment-bucket'\n  region: 'us-east-1'\n  thumbnailsBucket: 'letterpost'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  timeout: 300\n  environment:\n    AWS_BUCKET: ${self:custom.thumbnailsBucket}\n    WRAPUP_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-wrapup\n    GHOSTSCRIPT_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-ghostscript\n    VERAPDF_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-verapdf\n\n  deploymentBucket:\n    name: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  worker: \n    handler: src/worker.handler\n    timeout: 300\n    events:\n      - sns: letterpost-ghostscript\n  pdfThumbnail:\n    handler: src/pdf-thumbnail.handler\n    timeout: 300\n    events:\n      - sns: letterpost-pdf-thumbnail\n\nresources:\n  Resources:\n    WorkerLogGroup:\n      Properties:\n        RetentionInDays: 7\n    PdfThumbnailLogGroup:\n      Properties:\n        RetentionInDays: 7\n","service: letterpost-verapdf\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  bucket: global-deployment-bucket\n  topic: letterpost-verapdf\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  environment:\n    SNS_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topic}\n    VERAPDF_ZIP_URL: https://s3.amazonaws.com/aws-lambda-binaries/verapdf.zip \n  deploymentBucket:\n    name: ${self:custom.bucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  worker:\n    timeout: 300\n    handler: src/worker.handler\n    memorySize: 2048\n    events:\n      - sns: ${self:custom.topic}\n  handler: \n    handler: src/handler.handler\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7\n    WorkerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-chromeless\n\ncustom:\n  stage: prod\n  debug: \"*\"\n  deploymentBucket: 'global-deployment-bucket'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.stage}\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"s3:*\"\n\nfunctions:\n  handler:\n    memorySize: 1536\n    timeout: 180\n    handler: handler.handler\n    events:\n      - sns: letterpost-process-html\n    environment:\n      CHROMELESS_S3_BUCKET_NAME: 'letterpost'\n      CHROMELESS_S3_OBJECT_KEY_PREFIX: 'letterpost/'\n      CHROMELESS_S3_OBJECT_ACL: 'public-read'\n      CHROMELESS_S3_BUCKET_URL: 's3.amazonaws.com/letterpost'\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-email\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  email: 'no-reply@letterpost.co'\n  region: 'us-east-1'\n  website: 'https://letterpost.co'\n  address: '8705 COLESVILLE RD STE B #325, Silver Spring, MD 20910'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    MAILING_ADDRESS: ${self:custom.address}\n    WEBSITE: ${self:custom.website}\n    SOURCE_EMAIL: ${self:custom.email}\n    SOURCE_EMAIL_ARN: 'arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/${self:custom.email}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n\nfunctions:\n  handler:\n    handler: handler.handler\n    events:\n      - sns: letterpost-email\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-session\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: api.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n    basePath: 'session'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    CLIENT_SESSION_ID: ${ssm:/printawesome-api/CLIENT_SESSION_ID}\n    CLIENT_SESSION_SECRET: ${ssm:/printawesome-api/CLIENT_SESSION_SECRET~true}\n    CLIENT_AUTH_ID: ${ssm:/printawesome-api/CLIENT_AUTH_ID}\n    DYNAMODB_PREFIX: 'letterpost-graphql-prod'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n\nfunctions:\n  handle: \n    handler: handler.handler\n    events: \n      - http:\n          path: token\n          method: post\n          integration: lambda-proxy\n          cors: true\n\nresources:\n  Resources:\n    HandleLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-webhook\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  prefix: letterpost-graphql-prod\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: webhook.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket: \n    name: ${self:custom.deploymentBucket}\n  environment: \n    DYNAMODB_TABLE: ${self:custom.prefix}\n    DEBUG: 'true'\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: arn:aws:dynamodb:us-east-1:*:*\n\nfunctions:\n  handler: \n    handler: handler.handler\n    events: \n      - http:\n          path: /\n          method: post\n          integration: lambda-proxy\n          cors: true\n\nresources:\n  Resources:\n    HandlerLogGroup:\n      Properties:\n        RetentionInDays: 7","service: letterpost-graphql\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-domain-manager\npackage:\n  individually: true\n  exclude:\n    - \"**/*\"\n\ncustom:\n  region: us-east-1\n  deploymentBucket: 'global-deployment-bucket'\n  customDomain:\n    domainName: graphql.letterpost.co\n    stage: ${self:provider.stage}\n    certificateName: 'letterpost.co'\n    createRoute53Record: true\n  \nprovider:\n  stage: prod\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket}\n  environment:\n    DYNAMODB_PREFIX: ${self:service}-${opt:stage, self:provider.stage}\n    CLIENT_SESSION_ID: ${ssm:/printawesome-api/CLIENT_SESSION_ID}\n    CLIENT_SESSION_SECRET: ${ssm:/printawesome-api/CLIENT_SESSION_SECRET~true}\n    CLIENT_AUTH_ID: ${ssm:/printawesome-api/CLIENT_AUTH_ID}\n    STRIPE_TEST_API_KEY: ${ssm:/printawesome-api/STRIPE_TEST_API_KEY~true}\n    STRIPE_PRODUCTION_API_KEY: ${ssm:/printawesome-api/STRIPE_PRODUCTION_API_KEY~true}\n    LOB_PRODUCTION_API_KEY: ${ssm:/printawesome-api/LOB_PRODUCTION_API_KEY~true}\n    LOB_TEST_API_KEY: ${ssm:/printawesome-api/LOB_TEST_API_KEY~true}\n    PRINTAWESOME_API_KEY: ${ssm:/printawesome-api/PRINTAWESOME_API_KEY~true}\n    HEAL_SQS_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/#{AWS::AccountId}/letterpost-heal\n    AWS_BUCKET: letterpost\n    SES_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:letterpost-email\n    AWS_ACCOUNT_ID: '#{AWS::AccountId}'\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - ses:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - sns:*\n      Resource: \"*\"\n\nfunctions:\n  heal:\n    handler: src/heal/handler.handler\n    package:\n      include:\n        - src/heal/**\n        - node_modules/dynamodb-tools/**\n    events:\n      - schedule: rate(5 minutes)\n  graphql:\n    handler: src/graphql/handler.handler\n    package:\n      include:\n        - src/graphql/**\n        - node_modules/**\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda-proxy\n          authorizer: auth\n          cors: true\n      - http:\n          path: graphql\n          method: get\n          integration: lambda-proxy\n          authorizer: auth\n          cors: true\n      - http:\n          path: graphiql\n          method: get\n          cors: true\n  auth:\n    handler: src/authorizer/handler.handler\n    package:\n      include:\n        - src/authorizer/**\n        - node_modules/**\n\n  record:\n    handler: src/record/handler.handler\n    package:\n      include:\n        - src/record/**\n        - node_modules/dynamodb-tools/**\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - UsersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - UploadsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - OrdersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - ContactsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - CardsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - ChargesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - LettersDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - EventsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - MessagesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - AddressesDynamoDbTable\n              - StreamArn\n          batchSize: 1\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - OptionsDynamoDbTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    GraphqlLogGroup:\n      Properties:\n        RetentionInDays: 7\n    HealLogGroup:\n      Properties:\n        RetentionInDays: 7\n    AuthLogGroup:\n      Properties:\n        RetentionInDays: 7\n    RecordLogGroup:\n      Properties:\n        RetentionInDays: 7\n    MessagesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-messages\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    UsersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-users\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: emailAddress\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: emails-index\n            KeySchema: \n            - AttributeName: emailAddress\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1      \n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    ChargesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-charges\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    EventsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-events\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    OptionsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-options\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    AddressesDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-addresses\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    LettersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-letters\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    OrdersDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-orders\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n          - AttributeName: contact\n            AttributeType: S\n          - AttributeName: upload\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n        - IndexName: users-index\n          KeySchema: \n          - AttributeName: user\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        - IndexName: contacts-index\n          KeySchema: \n          - AttributeName: contact\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        - IndexName: uploads-index\n          KeySchema: \n          - AttributeName: upload\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n          Projection: \n            ProjectionType: ALL\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    UploadsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-uploads\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    ContactsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-contacts\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    CardsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}-cards\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n          - IndexName: users-index\n            KeySchema: \n            - AttributeName: user\n              KeyType: HASH\n            - AttributeName: id\n              KeyType: RANGE\n            Projection: \n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES"]},{"id":108994625,"files":["# Serverless main config file\n\nservice: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  runReport:\n    handler: handler.runReport"]},{"id":141798940,"files":["service: api-with-auth\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}\n    DB: ${self:custom.secrets.DB}\n\nfunctions:\n  verify-token:\n    handler: auth/VerifyToken.auth\n\n  login:\n    handler: auth/AuthHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  register:\n    handler: auth/AuthHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n\n  me:\n    handler: auth/AuthHandler.me\n    events:\n      - http:\n          path: me\n          method: get\n          cors: true\n          authorizer: verify-token\n\nplugins:\n  - serverless-offline"]},{"id":129971218,"files":["service: cloud-slacker\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\nplugins:\n  - serverless-mocha-plugin\nfunctions:\n  code-build:\n    handler: handlers/code-build.notify\n    environment:\n      slack_url: ${opt:slack_url}\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - 'IN_PROGRESS'\n                - 'SUCCEEDED'\n                - 'FAILED'\n                - 'STOPPED'\n"]},{"id":182468252,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-notes\n  tableThroughputs: \n    prod: 5\n    default: 1\n  tableTrhroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update: \n    handler: update.main\n    events: \n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: \n            type: aws_iam\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n    \n\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}"]},{"id":192492399,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: Trello-Bug-Reporting\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n  environment:\n    TOKEN: '<TRELLO_API_TOKEN>'\n    KEY: '<TRELLO_API_KEY>'\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  initialise: \n    handler: bug/handler.initialise\n    events:\n      - http:\n          path: bug/init\n          method: POST\n          cors: true\n\n  create_bug: \n    handler: bug/handler.create_bug\n    events:\n      - http:\n          path: bug/create\n          method: POST\n          cors: true\n  \n  retrieve_all: \n    handler: bug/handler.retrieve_all\n    events:\n      - http:\n          path: bug\n          method: GET\n          cors: true\n\n  retrieve_bug: \n    handler: bug/handler.retrieve_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: GET\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\n  update_bug: \n    handler: bug/handler.update_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: PUT\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\n  delete_bug: \n    handler: bug/handler.delete_bug\n    events:\n      - http:\n          path: bug/{id}\n          method: DELETE\n          cors: true\n          request: \n            parameters:\n              paths:\n                id: true\n\nresources:\n  Resources:\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: ApiGatewayRestApi\n\n#Plugins\nplugins:\n  - serverless-offline"]},{"id":195278448,"files":["service: zaptalk-checkout-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    snsTopic: ${self:custom.secrets.aws.snsTopic}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  init:\n    handler: checkout.handle\n    events:\n      - http:\n          path: checkout\n          method: post\n          cors: true"]},{"id":185639182,"files":["service: fastify-dev-env-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs8\n  websocketsApiRouteSelectionExpression: '$request.body.type'\n\n# Functions\nfunctions:\n  fastify-serverless-api:\n    name: ${self:service}-${self:provider.stage}-fastify-serverless-api\n    handler: lambda.handler\n    timeout: 30\n    events:\n      - http:\n          path: '{proxy+}'\n          method: any\n          cors: true\n      - websocket:\n          routeKey: $connect\n      - websocket:\n          routeKey: $disconnect\n  connect:\n    handler: lambda.handler\n    events:\n      - websocket:\n          route: $connect\n  disconnect:\n    handler: lambda.handler\n    events:\n      - websocket:\n          route: $disconnect\n\n# Plugins\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n  - serverless-websockets-plugin\n\n# serverless optimization\npackage:\n  individually: true\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n"]},{"id":181245319,"files":["service: boardless-backend # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-db\n\n  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: api/test\n          method: get\n          cors:\n                origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects\n                allowCredentials: true\n                headers: # <-- Specify allowed headers\n                  - Access-Control-Allow-Origin\n                  - Access-Control-Allow-Credentials\n\n  getBoards:\n    handler: handler.getBoards\n    events:\n      - http:\n          origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects\n          path: api/getBoards\n          method: get\n          cors: #Removed origin parameter to see if this still works\n                allowCredentials: true\n                headers: # <-- Specify allowed headers\n                  - Access-Control-Allow-Origin\n                  - Access-Control-Allow-Credentials\n\nresources:\n  Resources:\n    DBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuid\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:provider.environment.DB_TABLE}"]},{"id":218249269,"files":["service:\n  name: aws-fanout-example\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: !Ref fanoutTopic\n\nresources:\n  Resources:\n    fanoutQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: fanout-queue\n        VisibilityTimeout: 30\n        ReceiveMessageWaitTimeSeconds: 20\n    fanoutTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: fanout-topic\n        Subscription:\n          - Endpoint:\n              !GetAtt \n                - fanoutQueue\n                - Arn\n            Protocol: sqs\n    fanoutQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Id:\n            Fn::Join:\n              - \"\"\n              - - !GetAtt \n                  - fanoutQueue\n                  - Arn\n                - \"/\"\n                - \"SQSSendMessagePolicy\"\n          Statement:\n            - Sid: \"SendMessagePolicy\"\n              Effect: \"Allow\"\n              Principal:\n                AWS: \"*\"\n              Action:\n                - \"SQS:SendMessage\"\n              Resource:\n                !GetAtt \n                  - fanoutQueue\n                  - Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref fanoutTopic\n        Queues:\n          - !GetAtt \n              - fanoutQueue\n              - QueueName\nfunctions:\n  emitMessage:\n    handler: src/pushMessage.handler\n    environment:\n      TOPIC_ARN: !Ref fanoutTopic\n    events:\n      - http:\n          method: post\n          path: message\n  fanoutLambdaTrigger:\n    handler: src/handler.handler\n    events:\n      - sqs:\n          arn:\n            !GetAtt \n              - fanoutQueue\n              - Arn\n          batchSize: 10\n    \n","service:\n  name: aws-lambda-sqs-long-polling\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"sqs:*\"\n    Resource:\n      Fn::Join:\n        - \"\"\n        - - \"arn:aws:sqs:\"\n          - Ref: AWS::Region\n          - \":\"\n          - Ref: AWS::AccountId\n          - \":long-polling-queue\"\n\nresources:\n  Resources:\n    LongPollingQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: \"long-polling-queue\"\n        ReceiveMessageWaitTimeSeconds: 20\n\nfunctions:\n  sqsLongPollingHanlder:\n    handler: src/handler.handler\n    timeout: 5\n    memorySize: 128\n    events:\n      - sqs:\n          arn: \n            Fn::Join:\n              - \"\"\n              - - \"arn:aws:sqs:\"\n                - Ref: AWS::Region\n                - \":\"\n                - Ref: AWS::AccountId\n                - \":long-polling-queue\"\n          batchSize: 10\n  pushMessageToQueue:\n    handler: src/provider.handler\n    timeout: 10\n    memorySize: 256\n    environment:\n      QUEUE_URL: \n        Fn::Join:\n          - \"\"\n          - - \"https://sqs.\"\n            - \"Ref\": \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - Ref: AWS::AccountId\n            - \"/long-polling-queue\"\n    events:\n      - http:\n          path: messages/bulkCreate\n          method: post ","service:\n  name: aws-step-func-example\n\nplugins:\n  - serverless-webpack\n  - serverless-step-functions\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:BatchGet*\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:Get*\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:BatchWrite*\"\n        - \"dynamodb:CreateTable\"\n        - \"dynamodb:Delete*\"\n        - \"dynamodb:Update*\"\n        - \"dynamodb:PutItem\"\n      Resource:\n        Fn::GetAtt: [orderTable, Arn]\n\nresources:\n  Resources:\n    orderTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: order-table\n        BillingMode: PROVISIONED\n        AttributeDefinitions: \n          - AttributeName : Id\n            AttributeType : S\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 3\n\nfunctions:\n  validate-order:\n    handler: src/validateOrder.handler\n  create-order:\n    handler: src/createOrder.handler\n  validate-creditCard:\n    handler: src/validateCreditCard.handler\n  mark-order-as-proccessed:\n    handler: src/markOrderAsProccessed.handler\n\nstepFunctions:\n  stateMachines:\n    orderStateMachine:\n      events:\n        - http:\n            path: /order\n            method: POST\n      name: orderStateMachine\n      definition:\n        Comment: \"Order State Machine\"\n        StartAt: ValidateOrder\n        States:\n          ValidateOrder:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [validate-order, Arn]\n            Next: CreateOrder\n          CreateOrder:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [create-order, Arn]\n            Next: ValidateCreditCard\n          ValidateCreditCard:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [validate-creditCard, Arn]\n            Next: MarkOrderAsProccessed\n          MarkOrderAsProccessed:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [mark-order-as-proccessed, Arn]\n            End: true\n      tags:\n        Name: orderStateMachine\n","service:\n  name: aws-waf-lambda-apigateway\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nresources:\n  Resources:\n    MyIPSetBlacklist: \n      Type: AWS::WAF::IPSet\n      Properties: \n        Name: IPSet for blacklisted IP adresses\n        IPSetDescriptors: \n          - \n            Type: \"IPV4\"\n            Value: \"10.0.0/16\"\n    MyIPSetRateBasedRule:\n      Type: AWS::WAFRegional::Rule\n      Properties: \n        Predicates: \n          - DataId:\n              Ref: MyIPSetBlacklist\n            Negated: false\n            Type: IPMatch\n        MetricName: MyIPSetRateBasedRule\n        Name: MyIPSetRateBasedRule\n    MyWebACL:\n      Type: AWS::WAFRegional::WebACL\n      Properties: \n        Name: MyWebACL\n        DefaultAction: \n          Type: ALLOW\n        MetricName: MyWebACL\n        Rules: \n          - \n            Action: \n              Type: BLOCK\n            Priority: 1\n            RuleId: \n              Ref: MyIPSetRateBasedRule\n    MyWebACLAssiociation:\n      Type: AWS::WAFRegional::WebACLAssociation\n      Properties: \n        ResourceArn:\n          Fn::Join:\n            - \"/\"\n            - \n              - Fn::Join: [\":\", [\"arn:aws:execute-api\", {\"Ref\": \"AWS::Region\"}, {\"Ref\":\"AWS::AccountId\"}, {\"Ref\": \"ApiGatewayRestApi\"}]]\n              - \"*\"\n        WebACLId:\n          Ref: MyWebACL\n            \nfunctions:\n  simpleFunc:\n    handler: src/handler.handler\n    events:\n      - http:\n          method: get\n          path: developers\n    \n","service:\n  name: serverless-lambda-cognito-authentication\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'ap-southeast-2'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"cognito-identity:*\"\n        - \"cognito-sync:*\"\n        - \"cognito-idp:*\"\n      Resource: \"*\"\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: user-pool-example\n        MfaConfiguration: \"OFF\"\n        UsernameAttributes:\n          - email\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 8\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: True\n            RequireUppercase: True\n        Schema:\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n    CognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: client-example\n        UserPoolId: !Ref CognitoUserPool\n        GenerateSecret: false\n        ExplicitAuthFlows:\n          - \"USER_PASSWORD_AUTH\"\n          - \"ADMIN_NO_SRP_AUTH\"\n    ApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      DependsOn:\n        - ApiGatewayRestApi\n      Properties:\n        Name: cognito-authorizer\n        IdentitySource: method.request.header.Authorization\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Type: COGNITO_USER_POOLS\n        ProviderARNs:\n          - Fn::GetAtt: [CognitoUserPool, Arn]\n\nfunctions:\n  authenticate:\n    handler: src/handler.authenticate\n    timeout: 5\n    memorySize: 128\n    environment:\n      COGNITO_USER_POOL_ID: !Ref CognitoUserPool\n      COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient\n    events:\n      - http:\n          method: post\n          path: authenticate\n  register:\n    handler: src/handler.register\n    timeout: 5\n    memorySize: 128\n    environment:\n      COGNITO_USER_POOL_ID: !Ref CognitoUserPool\n      COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient\n    events:\n      - http:\n          method: post\n          path: register\n  public-func:\n    handler: src/handler.noAuth\n    timeout: 5\n    memorySize: 128\n    events:\n      - http:\n          method: get\n          path: public\n  private-func:\n    handler: src/handler.requireAuth\n    timeout: 5\n    memorySize: 128\n    events:\n      - http:\n          method: get\n          path: private\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  pre-signup:\n    handler: src/hooks/pre-signup.handler\n    timeout: 5\n    memorySize: 128\n    events:\n      - cognitoUserPool:\n          pool: user-pool-example # must be name of cognito user pool\n          trigger: PreSignUp\n          existing: true","service:\n  name: serverless-aws-kinesis-lambda\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'ap-southeast-2'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:GetRecords\"\n        - \"kinesis:PutRecord\"\n        - \"kinesis:PutRecords\"\n      Resource:\n        Fn::GetAtt: [KinesisStream, Arn]\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: MyKinesisStream \n        RetentionPeriodHours: 48 \n        ShardCount: 1\n        Tags: \n            - Key: Stage\n              Value: ${opt:stage}\nfunctions:\n  read-record-from-stream:\n    handler: src/handler.readRecord\n    timeout: 5\n    memorySize: 128\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - KinesisStream\n              - Arn\n  put-record-to-stream:\n    handler: src/handler.putRecord\n    timeout: 5\n    memorySize: 128\n    environment:\n      STREAM_NAME: !Ref KinesisStream\n    events:\n      - http:\n          method: post\n          path: records","service:\n  name: aws-s3-sftp-sync\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"sqs:*\"\n    Resource:\n      Fn::GetAtt:\n        - SyncedItemsQueue\n        - Arn\n  - Effect: \"Allow\"\n    Action:\n      - \"s3:*\"\n    Resource: \"arn:aws:s3:::*\"\n\nresources:\n  Resources:\n    SyncedItemsQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${env:QUEUE_NAME}\n        ReceiveMessageWaitTimeSeconds: 20\n        VisibilityTimeout: 900\n\nfunctions:\n  sync-s3-to-sftp-func:\n    handler: src/handler.syncS3ToSFTP\n    timeout: 900\n    memorySize: 3000\n    events:\n      - s3:\n          bucket: \"my-sftp-synced-bucket\"\n          event: s3:ObjectCreated:*\n          existing: true\n  list-sftp-files-to-be-synced-func:\n    handler: src/handler.listSFTPFilesToBeSynced\n    timeout: 900\n    memorySize: 256\n    environment:\n      QUEUE_URL: !Ref SyncedItemsQueue\n      SFTP_HOST: ${env:SFTP_HOST}\n      SFTP_USERNAME: ${env:SFTP_USERNAME}\n      SFTP_PASSWORD: ${env:SFTP_PASSWORD}\n      SFTP_DIR: ${env:SFTP_DIR}\n      S3_SYNCED_BUCKET: ${env:S3_SYNCED_BUCKET}\n    events:\n      - schedule:\n          rate: rate(10 minutes)\n          enabled: true\n  sync-single-sftp-file-to-s3-func: \n    handler: src/handler.syncSFTPFileToS3\n    timeout: 900\n    memorySize: 256\n    environment:\n      SFTP_HOST: ${env:SFTP_HOST}\n      SFTP_USERNAME: ${env:SFTP_USERNAME}\n      SFTP_PASSWORD: ${env:SFTP_PASSWORD}\n      SFTP_DIR: ${env:SFTP_DIR}\n      S3_SYNCED_BUCKET: ${env:S3_SYNCED_BUCKET}\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - SyncedItemsQueue\n              - Arn\n          batchSize: 2\n  "]},{"id":223923111,"files":["service: business-logic\n\nplugins:\n  - serverless-latest-layer-plugin # activate plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # programming language & version\n  stage: ${opt:stage, 'dev'} # current stage dev/test/prod\n  region: ${opt:region, 'eu-central-1'} # current AWS Region\n\ncustom:\n  config: ${file(../ouputs.json)} # load json\n  ACCOUNT_ID: ${self:custom.config.account_id} #reference of the id \n\nfunctions:\n  helloWorld:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloWorld\n          method: get\n          cors: true\n    environment:\n      NODE_PATH: \"./:/opt/node_modules\" # Important otherwise node_modules imported can not be found\n    layers:\n      - arn:aws:lambda:${opt:region, 'eu-central-1'}:${self:custom.ACCOUNT_ID}:layer:${opt:stage, 'dev'}-base-layer:latest \n      # ARN is created automatically with given informations\n\n\n","service: microservices\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # programming language & version\n  stage: ${opt:stage, 'dev'} # current stage dev/test/prod\n  region: ${opt:region, 'eu-central-1'} # current AWS Region\n\nlayers:\n  dependencies:\n    path: dependencies-layer # required path of layer\n    name: ${self:provider.stage}-dependencies-layer # optional\n    description: Description of what the lambda layer does # optional\n    compatibleRuntimes: # optional\n      - nodejs8.10\n      - nodejs10.x\n"]},{"id":212264236,"files":["service: ${self:custom.serviceName}\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 256\n  reservedConcurrency: 2\n  timeout: 6\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-central-1'}\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 5\n\n  environment: #Global Environment variables\n    ${file(./config/${self:provider.stage}.yml)}\n\nfunctions:\n  ${file(./handlers/endpoints/index.yml)}\n\ncustom:\n  serviceName: ${opt:name, 'serverless-boilerplate'}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n\n  serverless-offline:\n    host: '0.0.0.0'\n    port: '4000'\n\nplugins:\n  - serverless-offline\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - node_modules/**\n    - '!node_modules/slugify/**'\n    - ./__test__/**\n    - ./.nvmrc\n    - ./config/**\n    - ./handlers/**\n"]},{"id":217221407,"files":["service: # The service name is the top-level name attached to this stack\n  name: cdb04api # BUG: Must not contain dashes, else will fail in nested Gaxios dependency?\n\nplugins: # A list of plugins; we're just using the regular Google Cloud Functions package here\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google # The cloud provider\n  region: europe-west1 # OPTIONAL: Edit if you want\n\n  # THESE TWO MUST BE UPDATED BY YOU!\n  project: 'cloud-developer-basics' # EDIT THIS to your value\n  credentials: ~/.gcloud/{KEYFILE}.json # EDIT THIS to your value\n\n  runtime: nodejs10 # Specifying a global runtime, where all of our code is Node 10 (can also be done per-function, but not relevant for us)\n  memorySize: 256 # Specify memory size; will add performance for a slightly higher cost\n  timeout: 10s # Max time until timeout; should be short in serverless environments\n\nfunctions:\n  api: # This will be the endpoint name, so always use meaningful names here\n    handler: api # This must point to the handler function! Google Cloud Functions default to index.js, which in our case exports a function called' api'\n    events:\n      - http: api # This event name doesn't really do much, so just default to same as above\n        method: POST # Allowed methods; because this is a GraphQL API it's all POST"]},{"id":203046057,"files":["org: ecee91\napp: awsserverlessnotificationapp\nservice: awsserverlessnotificationapp # NOTE: update this with your service name\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs8.10\r\n  stage: dev\r\n  region: us-east-1\r\n  environment:\r\n    DOMAIN: http://127.0.0.1:8887/ # no need to change this domain for testing it\r\n    VAPID_PUBLIC_KEY: BLpTsaEAy-BGQnkZ1DeFYYNS6EH1gWP-cP49n9NmbWtjkSVMJQjj-wVI0tapfsK7Ju9r0VQz7jpE9kf8BETAdns\r\n    VAPID_PRIVATE_KEY: LtWhacMtRs63fhABUUMLOynMRTKTffIf7oQuRpwChFc\r\n\r\nfunctions:\r\n  vapidPublicKey:\r\n    handler: handler.vapidPublicKey\r\n    events: \r\n      - http:\r\n          path: vapidPublicKey\r\n          method: get\r\n\r\n  sendNotification:\r\n    handler: handler.sendNotification\r\n    events: \r\n      - http:\r\n          path: sendNotification\r\n          method: post\r\n\r\n  registerOrSendToAll:\r\n    handler: handler.registerOrSendToAll\r\n    events: \r\n      - http:\r\n          path: register\r\n          method: post\r\n      - http:\r\n          path: sendToAll\r\n          method: post\r\n\r\n  statics:\r\n    handler: handler.statics\r\n    events: \r\n      - http:\r\n          path: index.html\r\n          method: get\r\n      - http:\r\n          path: index.js\r\n          method: get\r\n      - http:\r\n          path: service-worker.js\r\n          method: get\r\n\r\n"]},{"id":195278307,"files":["service: zaptalk-invoice-microservice\n\nplugins:\n  - serverless-pseudo-parameters\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ${self:custom.secrets.aws.region}\n  memorySize: 128\n  tracing:\n    lambda: true\n  environment:\n    accountId: ${self:custom.secrets.aws.accountId}\n    region: ${self:custom.secrets.aws.region}\n    bucket: ${self:custom.secrets.aws.bucket}\n    snsTopicToListen: ${self:custom.secrets.aws.snsTopicToListen}\n    snsTopicErrorHandling: ${self:custom.secrets.aws.snsTopicErrorHandling}\n    notificationSNS: ${self:custom.secrets.aws.notificationSNS}\n    loggerSNS: ${self:custom.secrets.aws.loggerSNS}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.secrets.aws.bucket}/*\"\n\nfunctions:\n  invoice:\n    handler: invoice.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicToListen}\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.secrets.aws.snsTopicErrorHandling}\n  error:\n    handler: error.handle\n    events:\n      - sns: ${self:custom.secrets.aws.snsTopicErrorHandling}"]},{"id":34302698,"files":["# Hello World for AWS Lambda\nservice: hello-world # Service Name\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n","service: hello-world # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: capitalize\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: nodejs6\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  capitalize:\n    handler: handler.capitalize\n","# Welcome to Serverless!\n#\n# For full config options, check the kubeless plugin docs:\n#    https://github.com/serverless/serverless-kubeless\n#\n# For documentation on kubeless itself:\n#    http://kubeless.io\n\n# Update the service name below with your own service name\nservice: hello-world\n\n# Please ensure the serverless-kubeless provider plugin is installed globally.\n# $ npm install -g serverless-kubeless\n#\n# ...before installing project dependencies to register this provider.\n# $ npm install\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello:\n    handler: handler.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-nodejs # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-php # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-python # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-swift # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  hello:\n    handler: ping.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-java8\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: java8\n    handler: com.serverless.Handler\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-nodejs # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: nodejs8.3\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-python # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: python2.7\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: spotinst-ruby # NOTE: update this with your service name\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional. Defaults to 'dev', see https://help.spotinst.com/hc/en-us/articles/115005893409\n  spotinst:\n    environment: #<env-XXXX> Required.\n\nfunctions:\n  hello:\n    runtime: ruby2.4.1\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    iamRoleConfig:\n#      roleId: # role-id\n#    activeVersions:\n#        - \"version\": \"$LATEST\"\n#          \"percentage\": 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: Value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n","service: hello-world # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: python37\n  project: my-project\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-ruby # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  hello:\n    handler: handler.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-ruby # NOTE: update this with your service name\n\n# Remember to install project dependencies to register the provider plugin.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  hello:\n    handler: handler.main\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  helloWorld:\n    handler: handler.hello\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  helloWorld:\n    handler: handler.index\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","# Hello World for Apache OpenWhisk\nservice: hello-world # Service Name\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  greeting:\n    handler: handler.main\n    events:\n      - http: GET hello\n\n# remember to run npm install to download the provider plugin.\nplugins:\n  - serverless-openwhisk\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: hello\n    script: helloWorld\n    events:\n      - http:\n          url: example.com/hello/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n\n  foo:\n    name: foo\n    script: bar\n    events:\n      - http:\n          url: example.com/foo/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\ncustom:\n  domain: example.com\n\nfunctions:\n  hello:\n    name: hello\n    webpack: webpack.config.js\n    script: helloWorld\n    events:\n      - http:\n          url: ${self:custom.domain}/hello/*\n          method: GET\n\n    resources:\n      wasm:\n        - variable: WASM\n          file: rust-wasm/pkg/rust_wasm_bg.wasm\n","service:\n  name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: hello\n    script: helloWorld # there must be a file called helloWorld.js\n    events:\n      - http:\n          url: example.com/hello/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value\n","# Welcome to serverless. Read the fn provider docs\n# https://serverless.com/framework/docs/providers/fn/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice:\n  name: hello-world\n#    config:\n#        some: 'val'\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: fn\n\nplugins:\n  - serverless-fn\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello: # <- hello references the ./hello folder and the func.go file inside\n    name: hello\n    version: 0.0.1\n    format: json\n    runtime: go\n    events:\n      - http:\n          path: /hellogo\n","# Welcome to serverless. Read the fn provider docs\n# https://serverless.com/framework/docs/providers/fn/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice:\n  name: hello-world\n#    config:\n#        some: 'val'\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: fn\n\nplugins:\n  - serverless-fn\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello: # <- hello references the ./hello folder and the func.js file inside\n    name: hello\n    version: 0.0.1\n    idletimeout: 45\n    format: json\n    memory: 256\n    #    config:\n    #        another: value\n    runtime: node\n    events:\n      - http:\n          path: /hello\n","service: gcf-go111 # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: go111\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: gcf-nodejs # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: gcf-python # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: python37\n  region: us-central1\n  project: my-project\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: openwhisk-java-maven # NOTE: update this with your service name\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  runtime: java\n\n# you can add packaging information here\npackage:\n  artifact: target/demo-function.jar\n\nfunctions:\n  demo:\n    handler: com.example.FunctionApp\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - 'serverless-openwhisk'\n# you can define custom triggers and trigger feeds using the resources section.\n#\n#resources:\n#  triggers:\n#    my_trigger:\n#      parameters:\n#        hello: world\n#    alarm_trigger:\n#      parameters:\n#        hello: world\n#     feed: /whisk.system/alarms/alarm\n#     feed_parameters:\n#       cron: '*/8 * * * * *'\n","service: twilio-nodejs-runtime-example # NOTE: update this with your service name\n\nprovider:\n  # Twilio runtime as your preferred provider\n  name: twilio\n\n  # Auth credentials which you'll find at twilio.com/console\n  config:\n    accountSid: ${env:TWILIO_ACCOUNT_SID}\n    authToken: ${env:TWILIO_AUTH_TOKEN}\n\n  # Dependency definitions similar\n  # to dependencies in a package.json\n  # -> these dependencies will be available in the\n  #    Twilio Node.js runtime\n  dependencies:\n    asciiart-logo: '*'\n\n  # Twilio runtime supports several domains\n  # your functions and assets will be available under\n  # -> defaulting to 'dev'\n  environment: ${env:TWILIO_RUNTIME_ENV, 'dev'}\n\n  # Environment variables passed to your functions\n  # available via process.env\n  environmentVars:\n    MY_MESSAGE: 'THIS IS cool stuff'\n\n# Twilio runtime has to be added a plugin\nplugins:\n  - '@twilio-labs/serverless-twilio-runtime'\n\nfunctions:\n  hello-world:\n    # Path to the JS handler function in the project (without file extension '.js')\n    handler: handler\n    # URL path of the function after deployment\n    path: /hello/world\n    # visibility of the function (can be \"public\" or \"protected\")\n    access: public\n\nresources:\n  assets:\n    # Asset name\n    example-image:\n      # path to the asset in the project\n      filePath: example.jpg\n      # URL path to the asset after deployment\n      path: /assets/foo/example.jpg\n      # visibility of the asset\n      access: public\n","service: 'some-aws-service'\nprovider: 'aws'\n","service: 'some-other-service'\nprovider: 'other'\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-clojure\n# NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n  timeout: 300\n  memorySize: 1536\n  logRetentionInDays: 30\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: ${file(build/build.json):distribution}\n\nfunctions:\n  hello:\n    handler: hello::handler\n    tags:\n      VERSION: ${file(build/build.json):version}\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-csharp # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore2.1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello\n\n    # you can add packaging information here\n    package:\n      artifact: bin/release/netcoreapp2.1/hello.zip\n    #  exclude:\n    #    - exclude-me.js\n    #    - exclude-me-dir/**\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-fsharp # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: dotnetcore2.1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: FsharpHandlers::AwsDotnetFsharp.Handler::hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go-dep # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go-mod # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-go # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: '>=1.28.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-groovy-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: ${file(build/build.json):distribution}\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/hello.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-java-maven # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-maven # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: target/hello-dev.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-provided # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: provided\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-ruby # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-scala-sbt # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n# Make sure to run \"sbt assembly\" to create a jar file\n# with all your dependencies and put that jar file name here.\npackage:\n  artifact: target/scala-2.13/hello.jar\n\nfunctions:\n  hello:\n    handler: hello.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# For full config options, check out the Alibaba Cloud Function Compute\n# plugin docs:\n#    https://github.com/aliyun/serverless-aliyun-function-compute\n#\n# For documentation on Alibaba Cloud Function Compute itself:\n#    https://serverless.aliyun.com\n\n# Update the service name below with your own service name\n\nservice: aliyun-nodejs\n\nprovider:\n  name: aliyun\n  runtime: nodejs8\n  credentials: ~/.aliyuncli/credentials # path must be absolute\n\nplugins:\n  - serverless-aliyun-function-compute\n\npackage:\n  exclude:\n    - package-lock.json\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello:\n    handler: index.hello\n    events:\n      - http:\n          path: /foo\n          method: get\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: tabarlow-azure-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  region: West Europe\n  runtime: python3.6\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: A356AC8C-E310-44F4-BF85-C7F29044AF99\n  # stage: dev\n  # type: premium  # premium azure functions\n\n  environment: # these will be created as application settings\n    VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.py\n  #   - include-me-dir/**\n  exclude:\n    - env/**\n    - .env/**\n  #   # - exclude-me.py\n  #   # - exclude-me-dir/**\n  #   - local.settings.json\n  #   - .vscode/**\n  #   - node_modules/**\n  #   - .gitignore\n  #   - .git/**\n  #   - env/**\n  #   - package.json\n  #   - package-lock.json\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.main\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n\n  goodbye:\n    handler: src/handlers/goodbye.main\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n","service: knative\n\nprovider:\n  name: knative\n  # optional Docker Hub credentials you need if you're using local Dockerfiles as function handlers\n  docker:\n    username: ${env:DOCKER_HUB_USERNAME}\n    password: ${env:DOCKER_HUB_PASSWORD}\n\nfunctions:\n  hello:\n    handler: hello-world.dockerfile\n    context: ./code\n    # either use a container image URL for your function `handler` as the commented out `handler`\n    # below shows or make sure that you update the application code and corresponding Dockerfile\n    # to process incoming CloudEvents event data when using the event sources listed below\n    # handler: gcr.io/knative-releases/github.com/knative/eventing-contrib/cmd/event_display:latest\n    # events:\n    #   - custom:\n    #       filter:\n    #         attributes:\n    #           type: greeting\n    #   - kafka:\n    #       consumerGroup: KAFKA_CONSUMER_GROUP_NAME\n    #       bootstrapServers:\n    #         - server1\n    #         - server2\n    #       topics:\n    #         - my-topic\n    #   - awsSqs:\n    #       secretName: aws-credentials\n    #       secretKey: credentials\n    #       queue: QUEUE_URL\n    #   - gcpPubSub:\n    #       project: knative-hackathon\n    #       topic: foo\n    #   - cron:\n    #       schedule: '* * * * *'\n    #       data: '{\"message\": \"Hello world from a Cron event source!\"}'\n\nplugins:\n  - serverless-knative\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python3 # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python3.8\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-jvm-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: java11\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/libs/hello-dev-all.jar\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Hello World for AWS Lambda\nservice: hello-world # Service Name\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  helloWorld:\n    handler: handler.helloWorldHandler\n","service:\n  name: aws-alexa-typescript\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\nplugins:\n  - serverless-webpack\n  - serverless-alexa-skills\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\ncustom:\n  alexa:\n    # Step 1: Run `sls alexa auth` to authenticate\n    # Step 2: Run `sls alexa create --name \"Serverless Alexa Typescript\" --locale en-GB --type custom` to create a new skill\n    skills:\n      # Step 3: Paste the skill id returned by the create command here:\n      - id: amzn1.ask.skill.xxxx-xxxx-xxxx-xxxx-xxxx\n        manifest:\n          publishingInformation:\n            locales:\n              en-GB:\n                name: Serverless Alexa Typescript\n          apis:\n            custom:\n              endpoint:\n                # Step 4: Do your first deploy of your Serverless stack\n                # Step 5: Paste the ARN of your lambda here:\n                uri: arn:aws:lambda:[region]:[account-id]:function:[function-name]\n                # Step 6: Run `sls alexa update` to deploy the skill manifest\n                # Step 7: Run `sls alexa build` to build the skill interaction model\n                # Step 8: Enable the skill in the Alexa app to start testing.\n          manifestVersion: '1.0'\n        models:\n          en-GB:\n            interactionModel:\n              languageModel:\n                invocationName: serverless typescript\n                intents:\n                  - name: HelloIntent\n                    samples:\n                      - 'hello'\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - alexaSkill: ${self:custom.alexa.skills.0.id}\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-clojurescript-gradle\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  exclude:\n    - ./**\n    - build/**\n  include:\n    - node_modules/**\n    - build/clojurescript/main/functions.js\n\nfunctions:\n  hello:\n    handler: build/clojurescript/main/functions.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n  now:\n    handler: build/clojurescript/main/functions.now\n    events:\n      - http:\n          path: now\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-kotlin-nodejs-gradle # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nfunctions:\n  hello:\n    handler: build/js/packages/aws-kotlin-nodejs-gradle/kotlin/aws-kotlin-nodejs-gradle.Handler\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service:\n  name: aws-nodejs-ecma-script\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  first:\n    handler: first.hello\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n","service:\n  name: aws-nodejs-typescript\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  apiGateway:\n    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  region: West US 2\n  runtime: nodejs12.x\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: A356AC8C-E310-44F4-BF85-C7F29044AF99\n  # stage: dev\n  # type: premium  # premium azure functions\n\n  environment: # these will be created as application settings\n    VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.js\n  #   - include-me-dir/**\n  exclude:\n    # - exclude-me.js\n    # - exclude-me-dir/**\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.sayHello\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous # can also be `function` or `admin`\n\n  goodbye:\n    handler: src/handlers/goodbye.sayGoodbye\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob.printMessage\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue.printMessage\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer.printMessage\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub.printMessage\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n","# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-hello-world\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n# The `functions` block defines what code to deploy\nfunctions:\n  helloWorld:\n    handler: handler.helloWorld\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: hello-world\n          method: get\n          cors: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  apiKeys:\n    - name: CHANGE_TO_UNIQUE_PER_RUN\n      value: CHANGE_TO_UNIQUE_PER_RUN\n\nfunctions:\n  # core functions\n  minimal:\n    handler: core.minimal\n    events:\n      - http: GET /\n      - http:\n          method: POST\n          path: minimal-1\n      - http:\n          method: PUT\n          path: /minimal-2\n      - http:\n          method: DELETE\n          path: /minimal-3/\n  cors:\n    handler: core.cors\n    events:\n      - http:\n          method: GET\n          path: simple-cors\n          cors: true\n      - http:\n          method: GET\n          path: complex-cors\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: true\n  customAuthorizers:\n    handler: core.customAuthorizers\n    events:\n      - http:\n          path: custom-auth\n          method: GET\n          authorizer: authorizer\n  apiKeys:\n    handler: core.apiKeys\n    events:\n      - http:\n          path: api-keys\n          method: GET\n          private: true\n  timeout:\n    handler: core.timeout\n    timeout: 1\n    events:\n      - http:\n          method: GET\n          integration: lambda\n          path: integration-lambda-timeout\n  # helper functions\n  authorizer:\n    handler: helper.auth\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  basic:\n    handler: core.basic\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n  existingSimple:\n    handler: core.existingSimple\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n          existing: true\n  # testing if two functions share one cognito user pool with multiple configs\n  existingMulti:\n    handler: core.existingMulti\n    events:\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreSignUp\n          existing: true\n      - cognitoUserPool:\n          pool: CHANGE_TO_UNIQUE_PER_RUN\n          trigger: PreAuthentication\n          existing: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  eventBusDefault:\n    handler: core.eventBusDefault\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - serverless.test\n  eventBusCustom:\n    handler: core.eventBusCustom\n    events:\n      - eventBridge:\n          eventBus: CHANGE_TO_UNIQUE_PER_RUN\n          pattern:\n            source:\n              - serverless.test\n  eventBusArn:\n    handler: core.eventBusArn\n    events:\n      - eventBridge:\n          eventBus: CHANGE_TO_UNIQUE_PER_RUN\n          pattern:\n            source:\n              - serverless.test\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  iotBasic:\n    handler: core.iotBasic\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'CHANGE_TO_UNIQUE_PER_RUN'\"\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  minimal:\n    handler: core.minimal\n    events:\n      - s3: CHANGE_TO_UNIQUE_PER_RUN\n  extended:\n    handler: core.extended\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos/\n            - suffix: .jpg\n  existing:\n    handler: core.existing\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: Files/\n            - suffix: .TXT\n          existing: true\n  # testing if two functions share one bucket with multiple bucket configs\n  existingCreated:\n    handler: core.existingCreated\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: photos\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: photos\n            - suffix: .png\n          existing: true\n  existingRemoved:\n    handler: core.existingRemoved\n    events:\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos\n            - suffix: .jpg\n          existing: true\n      - s3:\n          bucket: CHANGE_TO_UNIQUE_PER_RUN\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: photos\n            - suffix: .png\n          existing: true\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  scheduleMinimal:\n    handler: core.scheduleMinimal\n    events:\n      - schedule: rate(1 minute)\n  scheduleExtended:\n    handler: core.scheduleExtended\n    events:\n      - schedule:\n          rate: cron(* * * * ? *)\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"name\": \"transformedInput\"}'\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  snsMinimal:\n    handler: core.snsMinimal\n    events:\n      - sns: CHANGE_TO_UNIQUE_PER_RUN\n\n  snsMultipleFilteredLeft:\n    handler: core.snsMultipleFilteredLeft\n    events:\n      - sns:\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n          displayName: CHANGE_TO_UNIQUE_PER_RUN\n          filterPolicy:\n            side:\n              - left\n  snsMultipleFilteredRight:\n    handler: core.snsMultipleFilteredRight\n    events:\n      - sns:\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n          displayName: CHANGE_TO_UNIQUE_PER_RUN\n          filterPolicy:\n            side:\n              - right\n\n  snsExisting:\n    handler: core.snsExisting\n    events:\n      - sns:\n          arn:\n            Fn::Join:\n              - ':'\n              - - 'arn:aws:sns'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - CHANGE_TO_UNIQUE_PER_RUN\n          topicName: CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  sqsBasic:\n    handler: core.sqsBasic\n    events:\n      - sqs:\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - sqs\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n\nfunctions:\n  streamDynamoDb:\n    handler: core.streamDynamoDb\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [DynamoDbTable, StreamArn]\n          batchWindow: 10\n  streamKinesis:\n    handler: core.streamKinesis\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - kinesis\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - stream/CHANGE_TO_UNIQUE_PER_RUN\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          batchWindow: 1\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        BillingMode: 'PAY_PER_REQUEST'\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: KEYS_ONLY\n        TableName: CHANGE_TO_UNIQUE_PER_RUN\n","service: CHANGE_TO_UNIQUE_PER_RUN\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  logs:\n    websocket: true\n\nfunctions:\n  # core functions\n  minimal:\n    handler: core.minimal\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n      - websocket:\n          route: $default\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n\npackage:\n  artifact: artifact.zip\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      individually: true\n      include:\n        - handler.js\n      exclude:\n        - handler2.js\n  hello2:\n    handler: handler2.hello\n    package:\n      individually: true\n      include:\n        - handler2.js\n      exclude:\n        - handler.js\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      include:\n        - handler.js\n      exclude:\n        - handler2.js\n  hello2:\n    handler: handler2.hello\n    package:\n      include:\n        - handler2.js\n      exclude:\n        - handler.js\n","service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n  custom-name:\n    name: ${self:service}-${self:provider.region}-custom-name\n    handler: handler.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Go1\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - ./**\n#  include:\n#    - ./bin/**\n\nfunctions:\n  hello_world:\n    handler: index\n    description: Tencent Serverless Cloud Function\n    runtime: Go1\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Php7 # Php7 or Php5\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Php7 # Php7 or Php5\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: test\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# Tencent Cloud serverless.yml Reference\n# https://github.com/serverless-tencent/serverless-tencent-scf/blob/master/docs/en/yaml.md\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Python3.6 # Python3.6 or Python2.7\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n#  vpcConfig:\n#    vpcId: test\n#    subnetId: test\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello_world:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Python3.6 # Python3.6 or Python2.7\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    vpcConfig:\n#      vpcId: test\n#      subnetId: testls\n\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","<!--\ntitle: Serverless Framework - Apache OpenWhisk Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 15\ndescription: A list of all available properties on serverless.yml for Apache OpenWhisk\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/openwhisk/guide/serverless.yml)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# OpenWhisk - serverless.yml Reference\n\nHere is a list of all available properties in `serverless.yml` when the provider is set to `openwhisk`.\n\n```yml\n# serverless.yml\n\nservice: myService\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:default\n  memory: 256 # Overwrite default memory size. Default is 512.\n  timeout: 10 # The default is 60\n  overwrite: true # Can we overwrite deployed functions? default is true\n  namespace: 'custom' # use custom namespace, defaults to '_'\n  ignore_certs: true # ignore ssl verification issues - used for local deploys\n\nfunctions:\n  usersCreate: # A Function\n    handler: users.create # The file and module for this specific function.\n    sequence: # Use sequences rather than handler to handle events. handler and sequence properties are mutually exclusive.\n      - function_a\n      - function_b\n      - function_c\n    memory: 256 # memory size for this specific function.\n    timeout: 10 # Timeout for this specific function.  Overrides the default set above.\n    runtime: nodejs:6\n    overwrite: false # Can we overwrite deployed function?\n    namespace: 'custom' # use custom namespace, defaults to '_'\n    annotations:\n      parameter_name: value\n    parameters:\n      parameter_name: value\n    events: # The Events that trigger this Function\n      # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n      - http: METHOD /path/to/url\n      - trigger: my_trigger # bind function to trigger event\n      - trigger:\n        name: my_trigger\n        rule: rule_name\n\n# The \"Resources\" your \"Functions\" use. This can be used to define custom Triggers and Rules which are bound to your Actions.\nresources:\n  triggers:\n    my_trigger: # trigger with default parameter bound.\n      parameters:\n        hello: world\n    alarm_trigger: # trigger connected to event feed\n      parameters:\n        hello: world\n      feed: /whisk.system/alarms/alarm\n      feed_parameters:\n        cron: '*/8 * * * * *'\n```\n","<!--\ntitle: Serverless Framework - Spotinst Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 5\ndescription: Serverless.yml reference\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://serverless.com/framework/docs/providers/spotinst/guide/serverless.yml/)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# Serverless.yml Reference\n\nThis is an outline of a `serverless.yml` file with descriptions of the properties for reference\n\n```yml\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: four\n\nprovider:\n  name: spotinst\n  #stage: <Stage Name>  #Optional setting. By default it is set to 'dev'\n  spotinst:\n    environment: #{Your Environment ID}\n\n# Here is where you will list your functions for this service. Each Function is\n# required to have a name, runtime, handler, memory and timeout. The runtime is\n# the language that you want to run your function with, the handler tells which\n# file and function to run, memory is the amount of memory needed to run your\n# function, timeout is the time the function will take to run, if it goes over\n# this time it will terminate itself. Access is default set to private so if you\n# want to be able to run the function by HTTPS request this needs to be set to\n# public. The environment variables can be set in here or on the Spotinst console.\n# Once they are set you can access the variables in your handler file with\n# process.env['{Your Key}']\n\nfunctions:\n  function-name:\n    runtime: nodejs8.3\n    handler: handler.main\n    memory: 128\n    timeout: 30\n    access: private\n#    activeVersions:\n#        - version: $LATEST\n#          percentage: 100.0\n#    cors:\n#        enabled: # false by default\n#        origin:  # '*' by default\n#        headers: # 'Content-Type,Authorization' by default\n#        methods: # 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT' by default\n#    cron:  # Setup scheduled trigger with cron expression\n#      active: true\n#      value: '* * * * *'\n#    environmentVariables:\n#      key: value\n\n# extend the framework using plugins listed here:\n# https://github.com/serverless/plugins\nplugins:\n  - serverless-spotinst-functions\n```\n","<!--\ntitle: Serverless Framework - AWS Lambda Guide - Serverless.yml Reference\nmenuText: Serverless.yml\nmenuOrder: 16\ndescription: A list of all available properties on serverless.yml for AWS\nlayout: Doc\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml)\n\n<!-- DOCS-SITE-LINK:END -->\n\n# Serverless.yml Reference\n\nHere is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n\n```yml\n# serverless.yml\n\nservice:\n  name: myService\n  awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash # Optional KMS key arn which will be used for encryption for all functions\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev\n  region: ${opt:region, 'us-east-1'} # Overwrite the default region used. Default is us-east-1\n  stackName: custom-stack-name # Use a custom name for the CloudFormation stack\n  apiName: custom-api-name # Use a custom name for the API Gateway API\n  websocketsApiName: custom-websockets-api-name # Use a custom name for the websockets API\n  websocketsApiRouteSelectionExpression: $request.body.route # custom route selection expression\n  profile: production # The default profile to use with this service\n  memorySize: 512 # Overwrite the default memory size. Default is 1024\n  reservedConcurrency: 5 # optional, Overwrite the default reserved concurrency limit. By default, AWS uses account concurrency limit\n  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds\n  logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup\n  deploymentBucket:\n    name: com.serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework\n    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false\n    serverSideEncryption: AES256 # server-side encryption method\n    sseKMSKeyId: arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa # when using server-side encryption\n    sseCustomerAlgorithim: AES256 # when using server-side encryption and custom keys\n    sseCustomerKey: string # when using server-side encryption and custom keys\n    sseCustomerKeyMD5: md5sum # when using server-side encryption and custom keys\n\n    tags: # Tags that will be added to each of the deployment resources\n      key1: value1\n      key2: value2\n  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless\n  role: arn:aws:iam::XXXXXX:role/role # Overwrite the default IAM role which is used for all functions\n  cfnRole: arn:aws:iam::XXXXXX:role/role # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials\n  versionFunctions: false # Optional function versioning\n  environment: # Service wide environment variables\n    serviceEnvVar: 123456789\n  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.\n  apiKeys: # List of API keys to be used by your service API Gateway REST API\n    - myFirstKey\n    - ${opt:stage}-myFirstKey\n    - ${env:MY_API_KEY} # you can hide it in a serverless variable\n  apiGateway: # Optional API Gateway global config\n    restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework\n    restApiRootResourceId: xxxxxxxxxx # Root resource ID, represent as / path\n    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted\n      '/users': xxxxxxxxxx\n      '/users/create': xxxxxxxxxx\n    websocketApiId: # Websocket API resource ID. Default is generated by the framework\n    apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.\n    minimumCompressionSize: 1024 # Compress response when larger than specified size in bytes (must be between 0 and 10485760)\n    description: Some Description # Optional description for the API Gateway stage deployment\n    binaryMediaTypes: # Optional binary media types the API might return\n      - '*/*'\n  usagePlan: # Optional usage plan configuration\n    quota:\n      limit: 5000\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 200\n      rateLimit: 100\n  stackTags: # Optional CF stack tags\n    key: value\n  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role\n    - arn:aws:iam:*****:policy/some-managed-policy\n  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account\n    - Effect: 'Allow'\n      Action:\n        - 's3:ListBucket'\n      Resource:\n        Fn::Join:\n          - ''\n          - - 'arn:aws:s3:::'\n            - Ref: ServerlessDeploymentBucket\n  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)\n    - Effect: Allow\n      Principal: '*'\n      Action: 'Update:*'\n      Resource: '*'\n    - Effect: Deny\n      Principal: '*'\n      Resource: '*'\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n    securityGroupIds:\n      - securityGroupId1\n      - securityGroupId2\n    subnetIds:\n      - subnetId1\n      - subnetId2\n  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.\n    - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'\n  resourcePolicy:\n    - Effect: Allow\n      Principal: '*'\n      Action: execute-api:Invoke\n      Resource:\n        - execute-api:/*/*/*\n      Condition:\n        IpAddress:\n          aws:SourceIp:\n            - '123.123.123.123'\n  tags: # Optional service wide function tags\n    foo: bar\n    baz: qux\n  tracing:\n    apiGateway: true\n    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'\n  logs:\n    restApi: # Optional configuration which specifies if API Gateway logs are used. This can either be set to `true` to use defaults, or configured via subproperties.\n      accessLogging: true # Optional configuration which enables or disables access logging. Defaults to true.\n      format: 'requestId: $context.requestId' # Optional configuration which specifies the log format to use for access logging.\n      executionLogging: true # Optional configuration which enables or disables execution logging. Defaults to true.\n      level: INFO # Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR.\n      fullExecutionData: true # Optional configuration which specifies whether or not to log full requests/responses for execution logging. Defaults to true.\n      role: arn:aws:iam::123456:role # Optional IAM role for ApiGateway to use when managing CloudWatch Logs\n    websocket: # Optional configuration which specifies if Websocket logs are used. This can either be set to `true` to use defaults, or configured via subproperties.\n      level: INFO # Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR.\n    frameworkLambda: true # Optional, whether to write CloudWatch logs for custom resource lambdas as added by the framework\n\npackage: # Optional deployment packaging configuration\n  include: # Specify the directories and files which should be included in the deployment package\n    - src/**\n    - handler.js\n  exclude: # Specify the directories and files which should be excluded in the deployment package\n    - .git/**\n    - .travis.yml\n  excludeDevDependencies: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n  artifact: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n  individually: true # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n\nfunctions:\n  usersCreate: # A Function\n    handler: users.create # The file and module for this specific function.\n    name: ${self:provider.stage}-lambdaName # optional, Deployed Lambda name\n    description: My function # The description of your function.\n    memorySize: 512 # memorySize for this specific function.\n    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit\n    provisionedConcurrency: 3 # optional, Count of provisioned lambda instances\n    runtime: nodejs12.x # Runtime for this specific function. Overrides the default which is set on the provider level\n    timeout: 10 # Timeout for this specific function.  Overrides the default set above.\n    role: arn:aws:iam::XXXXXX:role/role # IAM role which will be used for this function\n    onError: arn:aws:sns:us-east-1:XXXXXX:sns-topic # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig\n    awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)\n    environment: # Function level environment variables\n      functionEnvVar: 12345678\n    tags: # Function specific tags\n      foo: bar\n    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n      securityGroupIds:\n        - securityGroupId1\n        - securityGroupId2\n      subnetIds:\n        - subnetId1\n        - subnetId2\n    package:\n      include: # Specify the directories and files which should be included in the deployment package for this specific function.\n        - src/**\n        - handler.js\n      exclude: # Specify the directories and files which should be excluded in the deployment package for this specific function.\n        - .git/**\n        - .travis.yml\n      artifact: path/to/my-artifact.zip # Own package that should be use for this specific function. You must provide this file.\n      individually: true # Enables individual packaging for specific function. If true you must provide package for each function. Defaults to false\n    layers: # An optional list Lambda Layers to use\n      - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN\n    tracing: Active # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)\n    condition: SomeCondition # optional, adds 'Condition' clause\n    dependsOn: # optional, appends these additional resources to the 'DependsOn' list\n      - MyThing\n      - MyOtherThing\n    events: # The Events that trigger this Function\n      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in \"events/apigateway\"\n          path: users/create # Path for this endpoint\n          method: get # HTTP method for this endpoint\n          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response\n          private: true # Requires clients to add API keys values in the `x-api-key` header of their request\n          authorizer: # An AWS API Gateway custom authorizer function\n            name: authorizerFunc # The name of the authorizer function (must be in this service)\n            arn: xxx:xxx:Lambda-Name # Can be used instead of name to reference a function outside of service\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: someRegex\n            type: token # token or request. Determines input to the authorizer function, called with the auth token or the entire request event. Defaults to token\n      - websocket:\n          route: $connect\n          authorizer:\n            # name: auth    NOTE: you can either use \"name\" or arn\" properties\n            arn: arn:aws:lambda:us-east-1:1234567890:function:auth\n            identitySource:\n              - 'route.request.header.Auth'\n              - 'route.request.querystring.Auth'\n      - s3:\n          bucket: photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n          existing: true # optional, if you're using an existing Bucket\n      - schedule:\n          name: my scheduled event\n          description: a description of my scheduled event's purpose\n          rate: rate(10 minutes)\n          enabled: false\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - sns:\n          topicName: aggregate\n          displayName: Data aggregation pipeline\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          batchSize: 10\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: false\n      - alexaSkill:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: true\n      - alexaSmartHome:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: true\n      - iot:\n          name: myIoTEvent\n          description: An IoT event\n          enabled: true\n          sql: \"SELECT * FROM 'some_topic'\"\n          sqlVersion: beta\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - cloudwatchLog:\n          logGroup: '/aws/lambda/hello'\n          filter: '{$.userIdentity.type = Root}'\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PreSignUp\n          existing: true # optional, if you're referencing an existing User Pool\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            host: example.com\n            path: /hello\n      - eventBridge:\n          # using the default AWS event bus\n          schedule: rate(10 minutes)\n          # creating an event bus\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n          # re-using an existing event bus\n          eventBus: arn:aws:events:us-east-1:12345:event-bus/custom-private-events\n          pattern:\n            source:\n              - custom.private\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n          # using `inputs`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          # using `inputPath`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputPath: '$.stageVariables'\n          # using `inputTransformer`\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /docs*\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n\nlayers:\n  hello: # A Lambda layer\n    path: layer-dir # required, path to layer contents on disk\n    name: ${self:provider.stage}-layerName # optional, Deployed Lambda layer name\n    description: Description of what the lambda layer does # optional, Description to publish to AWS\n    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with\n      - python3.8\n    licenseInfo: GPLv3 # optional, a string specifying license information\n    allowedAccounts: # optional, a list of AWS account IDs allowed to access this layer.\n      - '*'\n    retain: false # optional, false by default. If true, layer versions are not deleted as new ones are created\n\n# The \"Resources\" your \"Functions\" use.  Raw AWS CloudFormation goes in here.\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n  # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    UsersTableArn:\n      Description: The ARN for the User's Table\n      Value:\n        'Fn::GetAtt': [usersTable, Arn]\n      Export:\n        Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.\n```\n"]},{"id":149026292,"files":["service: event-analytics-example-backend\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  secrets: ${file(secrets.yml):${self:provider.stage}}\n\nprovider:\n  stage: ${opt:stage, 'dev'}\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n        - \"athena:*\"\n        - \"s3:*\"\n        - \"glue:*\"\n      Resource:\n        - \"*\"\n# When you uncomment vpc please make sure lambda has access to internet: https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12  \n  vpc:\n    securityGroupIds:\n     - \"${self:custom.secrets.SECURITY_GROUP_IDS}\" # Your DB and Redis security groups here\n    subnetIds:\n     - \"${self:custom.secrets.SUBNET_IDS}\" # Your DB and Redis subnets here\n  environment:\n    CUBEJS_AWS_REGION: \"${self:custom.secrets.CUBEJS_AWS_REGION}\"\n    CUBEJS_AWS_S3_OUTPUT_LOCATION: \"${self:custom.secrets.CUBEJS_AWS_S3_OUTPUT_LOCATION}\"\n    CUBEJS_DB_TYPE: \"${self:custom.secrets.CUBEJS_DB_TYPE}\"\n    CUBEJS_API_SECRET: \"${self:custom.secrets.CUBEJS_API_SECRET}\"\n    REDIS_URL: \"${self:custom.secrets.REDIS_URL}\"\n    CUBEJS_APP: \"${self:service.name}-${self:provider.stage}\"\n    NODE_ENV: \"${self:provider.stage}\"\n    CUBEJS_API_URL:\n      Fn::Join:\n        - \"\"\n        - - \"https://\"\n          - Ref: \"ApiGatewayRestApi\"\n          - \".execute-api.\"\n          - Ref: \"AWS::Region\"\n          - \".amazonaws.com/${self:provider.stage}\"\n    AWS_ACCOUNT_ID:\n      Fn::Join:\n        - \"\"\n        - - Ref: \"AWS::AccountId\"\n\nfunctions:\n  cubejs:\n    handler: cube.api\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: ANY\n  cubejsProcess:\n    handler: cube.process\n    timeout: 630\n    events:\n      - sns: \"${self:service.name}-${self:provider.stage}-process\"\n\nplugins:\n  - serverless-express\n","service: event-collection\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:PutRecord\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  collect:\n    handler: handler.collect\n    events:\n      - http:\n          path: collect\n          method: post\n          cors: true\n","service: hn-insights\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  secrets: ${file(secrets.yml):${self:provider.stage}}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:*\"\n# Athena permissions        \n        - \"athena:*\"\n        - \"s3:*\"\n        - \"glue:*\"\n      Resource:\n        - \"*\"\n# When you uncomment vpc please make sure lambda has access to internet: https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12  \n  vpc:\n    securityGroupIds:\n     - \"${self:custom.secrets.SECURITY_GROUP_IDS}\" # Your DB and Redis security groups here\n    subnetIds:\n     - \"${self:custom.secrets.SUBNET_IDS}\" # Your DB and Redis subnets here # Put here subnet with access to your DB, Redis and internet. For internet access 0.0.0.0/0 should be routed through NAT only for this subnet!\n  environment:\n    CUBEJS_EXT_DB_HOST: \"${self:custom.secrets.CUBEJS_EXT_DB_HOST}\"\n    CUBEJS_EXT_DB_USER: \"${self:custom.secrets.CUBEJS_EXT_DB_USER}\"\n    CUBEJS_EXT_DB_PASS: \"${self:custom.secrets.CUBEJS_EXT_DB_PASS}\"\n    CUBEJS_EXT_DB_NAME: \"${self:custom.secrets.CUBEJS_EXT_DB_NAME}\"\n    REDIS_URL: \"${self:custom.secrets.REDIS_URL}\"\n    CUBEJS_AWS_REGION: \"${self:custom.secrets.CUBEJS_AWS_REGION}\"\n    CUBEJS_AWS_S3_OUTPUT_LOCATION: \"${self:custom.secrets.CUBEJS_AWS_S3_OUTPUT_LOCATION}\"\n    CUBEJS_DB_TYPE: athena\n    CUBEJS_API_SECRET: \"${self:custom.secrets.CUBEJS_API_SECRET}\"\n    CUBEJS_APP: \"${self:service.name}-${self:provider.stage}\"\n    NODE_ENV: \"${self:provider.stage}\"\n    AWS_ACCOUNT_ID:\n      Fn::Join:\n        - \"\"\n        - - Ref: \"AWS::AccountId\"\n\npackage:\n  exclude:\n    - dashboard-app/**\n\nfunctions:\n  cubejs:\n    handler: cube.api\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: GET\n      - http:\n          path: /{proxy+}\n          method: ANY\n  cubejsProcess:\n    handler: cube.process\n    timeout: 630\n    events:\n      - sns: \"${self:service.name}-${self:provider.stage}-process\"\n  hnCrawlerSchedule:\n    handler: hnCrawler.schedule\n    timeout: 60\n    reservedConcurrency: 1\n    events:\n      - schedule:\n          rate: rate(1 minute)\n  hnCrawlerRefreshPartitions:\n    handler: hnCrawler.refreshPartitions\n    timeout: 60\n    events:\n      - schedule:\n          rate: rate(5 minutes)\n\nplugins:\n  - serverless-express\n"]},{"id":73526083,"files":["service: replicator\n\ncustom:\n  inputBucket: input-bucket-12345 # Change to unique name\n  outputBucket: output-bucket-12345 # Change to unique name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.outputBucket}/*\"\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:GetObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.inputBucket}/*\"\n\nfunctions:\n  replicate:\n    handler: handler.replicate\n    environment:\n      OUTPUT_BUCKET: ${self:custom.outputBucket}\n    events:\n      - s3: ${self:custom.inputBucket}\n\nresources:\n  Resources:\n    S3BucketOutputs:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.outputBucket}\n","service: aws-lambda-and-heroku-postgres # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello\n      - http: POST onrelease","service: aws-java-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: java8\n  \npackage:\n  artifact: build/distributions/aws-java-simple-http-endpoint.zip\n\nfunctions:\n  currentTime:\n    handler: com.serverless.Handler\n    events:\n      - http:\n          path: ping\n          method: get\n","service: hellotime-app\nprovider:\n  name: aws\n\nfunctions:\n  hello:\n    runtime: python3.6\n    events:\n      - http:\n          method: get\n          path: greet\n    handler: web/handler.hello\n  time:\n    runtime: nodejs6.10\n    events:\n      - http:\n          method: get\n          path: time\n    handler: api/handler.timestamp\n","service: serverless-dynamodb-backup\n\ncustom:\n  bucket: EXAMPLE\n  dynamoDBTableName: \"${opt:stage, self:provider.stage}_EXAMPLE\"\n  prefix: FOO\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: staging\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/${self:custom.prefix}/${self:custom.dynamoDBTableName}/*\"\n    - Effect: Allow\n      Action:\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:ListStreams\"\n      Resource: \"arn:aws:dynamodb:ap-southeast-1:*:table/${self:custom.dynamoDBTableName}/stream/*\"\n\nfunctions:\n  backup:\n    handler: handler.backup\n    environment:\n      STAGE: \"${opt:stage, self:provider.stage}\"\n      BUCKET: \"${self:custom.bucket}\"\n      TABLE: \"${self:custom.dynamoDBTableName}\"\n      PREFIX: \"${self:custom.prefix}\"\n    timeout: 300\n","service: rekognition-analysis-s3-image\n\nframeworkVersion: \">=1.10.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"   \n\nfunctions:\n  imageAnalysis:\n    handler: handler.imageAnalysis\n    events:\n      - http:\n          path: analysis\n          method: post    \n","service: aws-node-rest-api-mongodb\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - http:\n          path: user\n          method: post\n          cors: true\n\n  updateUser:\n    handler: handler.updateUser\n    events:\n      - http:\n          path: user/{id}\n          method: put\n          cors: true\n\n  deleteUser:\n    handler: handler.deleteUser\n    events:\n      - http:\n          path: user/{id}\n          method: delete\n          cors: true\n\n  user:\n    handler: handler.user\n    events:\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-node-stripe-integration\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"lambda:InvokeAsync\"\n#        - \"lambda:InvokeFunction\"\n#      Resource: \n#        - \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - config/**\n    - node_modules/**\n  exclude:\n    - package.json\n\nfunctions:\n  incoming:\n    handler: handler.incoming\n    events:\n      - http:\n          path: stripe/incoming\n          method: post","service: sls-typescript-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-python-alexa-skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  luckyNumber:\n    handler: handler.lucky_number\n    events:\n      - alexaSkill\n","service: aws-python-pynamodb-s3-sigurl\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-python-requirements\n\npackage:\n  exclude:\n    - node_modules/**\n    - .idea/**\n    - .requirements/**\n    - env/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - requirements.txt\n\n# DRY constants: define all compound/generated names in one place\n# Override args are: .. defaults:\n# --app_acroym          signed-uploader\n# --s3_bucket           self:custom.app_acronym\n# --s3_key_base         self:custom.stage\n# --region              us-east-1\n# --stage               test\n# --deletion_policy     delete\ncustom:\n  app_acronym: sig-s3-uploader\n  default_stage: test\n  stage: ${opt:stage, self:custom.default_stage}\n  stack_name: ${self:custom.app_acronym}-${self:custom.stage}\n  region: ${opt:region, self:provider.region}\n  deletion_policy: Delete\n  dynamodb_table: ${self:custom.stack_name}\n  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}\n  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com\n  # Default to using app_acronym as bucket name\n  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}\n  # default to using ${stage} as key base path, keeps stages from namespace collisions\n  s3_key_base: ${opt:s3_key_base, self:custom.stage}\n  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}\n  s3_role_resource: ${self:custom.s3_bucket_arn}/${self:custom.s3_key_base}/*\n  # Put this here rather than in code (presigned URL TTL)\n  url_default_ttl: 60\n\nprovider:\n  name: aws\n  runtime: python3.6\n  region: us-east-1\n  environment:\n    DYNAMODB_TABLE: ${self:custom.dynamodb_table}\n    DYNAMODB_HOST: ${self:custom.dynamodb_host}\n    REGION: ${self:custom.region}\n    S3_BUCKET: ${self:custom.s3_bucket}\n    S3_KEY_BASE: ${self:custom.s3_key_base}\n    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource: ${self:custom.dynamodb_arn}\n\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: ${self:custom.s3_role_resource}\n\nfunctions:\n  create:\n    name: ${self:custom.stack_name}-create\n    description: Generate a presigned URL for PUT upload\n    handler: asset/create.create\n    events:\n      - http:\n          path: asset\n          method: post\n          cors: true\n          integration: lambda\n\n  bucket:\n    handler: asset/bucket.event\n    name: ${self:custom.stack_name}-bucket\n    description: Called by s3 create/remove events to manage asset state in dynamo\n    events:\n      - s3:\n          bucket: ${self:custom.s3_bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.s3_key_base}\n      - s3:\n          bucket: ${self:custom.s3_bucket}\n          event: s3:ObjectRemoved:*\n          rules:\n            - prefix: ${self:custom.s3_key_base}\n\n  list:\n    handler: asset/list.asset_list\n    name: ${self:custom.stack_name}-list\n    description: List all assets\n    events:\n      - http:\n          path: asset\n          method: get\n          cors: true\n          integration: lambda\n\n  get:\n    handler: asset/get.get\n    name: ${self:custom.stack_name}-get\n    description: Get a presigned download url for <asset-id>\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n              parameters:\n                 paths:\n                   timeout: true\n  update:\n    handler: asset/update.update\n    name: ${self:custom.stack_name}-update\n    description: Mark an RECEIVED asset as UPLOADED, fail if not RECEIVED\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: put\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n  delete:\n    handler: asset/delete.delete\n    name: ${self:custom.stack_name}-delete\n    description: Delete an asset by <asset-id>\n    events:\n      - http:\n          path: asset/{asset_id}\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              asset_id: true\n\nresources:\n  Resources:\n\n# Comment assetDynamoDbTable if using existing table\n    assetDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: ${self:custom.deletion_policy}\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: asset_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: asset_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.dynamodb_table}\n","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: serverless-rest-api-with-faunadb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - venv/**\n\nplugins:\n  - serverless-python-requirements\n\nprovider:\n  name: aws\n  runtime: python2.7\n  region: us-east-1\n  stage: dev\n  environment:\n    FAUNADB_SECRET: YOUR-SECRET-HERE\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\n  schema:\n    handler: todos/schema.schema\n","service: serverless-rest-api-with-pynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-python-requirements\n\npackage:\n  exclude:\n    - node_modules/**\n    - .idea/**\n    - .requirements/**\n    - env/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - requirements.txt\n\nprovider:\n  name: aws\n  runtime: python2.7\n  region: eu-central-1\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.todo_list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: put\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{todo_id}\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            paths:\n              todo_id: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: todo_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: todo_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-python-scheduled-cron\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n  secondCron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every 2nd minute from Mon-Fri\n      - schedule: cron(0/2 * ? * MON-FRI *)\n","service: serverless-telegram-bot\n\nprovider:\n  name: aws\n  runtime: python3.6\n  profile: ckl\n  environment:\n    TELEGRAM_TOKEN: ${file(./serverless.env.yml):TELEGRAM_TOKEN, ''}\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http: POST /\n\n  set_webhook:\n    handler: handler.set_webhook\n    events:\n      - http: POST /set_webhook\n\nplugins:\n  - serverless-python-requirements\n","service: azfx-node-http\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  hello:\n     handler: handler.hello\n     events:\n       - http: true\n         x-azure-settings:\n           authLevel: anonymous\n","service: node-simple-http-endpoint # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: my-project-1234\n  credentials: ~/.gcloud/keyfile.json # path must be absolute\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  helloWorld:\n    handler: http\n    events:\n      - http: path\n","service: go-service\n\nprovider:\n  name: openwhisk\n  runtime: binary \n\nfunctions:\n  greeting:\n    handler: handler\n\nplugins:\n  - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: testing\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  location_from_address:\n    handler: handler.locationFromAddress\n  sunrise_sunset:\n    handler: handler.sunriseSunset\n  jq:\n    handler: jamesthomas/openwhisk-jq\n    runtime: docker\n    parameters: \n      jq: '.results[0].geometry.location'\n  location_sunrise_sunset:\n    sequence: \n      - location_from_address\n      - jq\n      - sunrise_sunset\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  split:\n    handler: utils.split\n  reverse:\n    handler: utils.reverse\n  join:\n    handler: utils.join\n  chained_seq:\n    sequence:\n      - split\n      - reverse\n      - join\n  manual_seq:\n    handler: handler.chain\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  cron:\n    handler: handler.cron\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  time:\n    handler: handler.time\n    events:\n      - http: GET time\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my_service # NOTE: update this with your service name\n\nprovider:\n  name: openwhisk\n\nfunctions:\n  hello_world:\n    handler: hello_world.handler\n    events:\n      - trigger: event_name\n  left_pad:\n    handler: left_pad.handler\n  delay:\n    handler: delay.handler\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: php-service\n\nprovider:\n  name: openwhisk\n  runtime: php\n\nfunctions:\n  greeting:\n    handler: handler.greeting\n\nplugins:\n  - serverless-openwhisk\n","service: python_service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: python-service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n\nplugins:\n  - serverless-openwhisk\n","service: python-service\n\nprovider:\n  name: openwhisk\n  runtime: python\n\nfunctions:\n  greeting:\n    handler: handler.endpoint\n\nplugins:\n  - serverless-openwhisk\n","service: swift-packages\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  hello:\n    handler: .build/release/hello\n  welcome:\n    handler: .build/release/welcome\n\ncustom:\n  scripts:\n    hooks:\n      'package:initialize': npm run-script compile\nplugins:\n  - serverless-openwhisk\n  - serverless-plugin-scripts\n","service: swift_service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  cron:\n    handler: handler.main\n    events:\n      - schedule: cron(* * * * *)\n\n# remember to run npm install to download the provider plugin.        \nplugins:\n    - serverless-openwhisk\n","service: swift-service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  ping:\n    handler: ping.main\n    events:\n      - http:\n          path: ping\n          method: get\n\n\nplugins:\n  - serverless-openwhisk\n","service: swift-service\n\nprovider:\n  name: openwhisk\n  runtime: swift\n\nfunctions:\n  ping:\n    handler: ping.main\n\nplugins:\n  - serverless-openwhisk\n","\nservice: aws-custom-authorizer-auth0\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment:\n    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}\n\nfunctions:\n  auth:\n    handler: handler.auth\n    cors: true\n  publicEndpoint:\n    handler: handler.publicEndpoint\n    events:\n      - http:\n          path: api/public\n          method: post\n          cors: true\n  privateEndpoint:\n    handler: handler.privateEndpoint\n    events:\n      - http:\n          path: api/private\n          method: post\n          # See custom authorizer docs here: http://bit.ly/2gXw9pO\n          authorizer: auth\n          cors: true\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n","service:\n  name: ${self:custom.serviceName}\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: dev-fii\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 100\n      rateLimit: 50\n\ncustom:\n  serviceName: image-resizing\n  stage: ${opt:stage, self:custom.defaultStage}\n  bucket: dynamic-image-resizing\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  defaultStage: dev\n  stages:\n    - ${opt:stage}\n    - dev\n    - integration\n    - production\n\nfunctions:\n  resize:\n    handler: src/handlers/resizer/index.handler\n    events:\n      - http:\n          path: /{size}/{image}\n          method: get\n    environment:\n      # Provide your bucket name here\n      BUCKET: dynamic-image-resizing\n      REGION: us-east-1\n    # layers:\n    #   - {Ref: ImageLibsLambdaLayer}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:GetObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing/*\"\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:PutObject\"\n        Resource: \"arn:aws:s3:::dynamic-image-resizing/*\"\n\npackage:\n  exclude:\n    - layer/**\n    - node_modules/**\n    - '!node_modules/babel-runtime/**'\n    - '!node_modules/sharp/**'\n\n# layers:\n#   imageLibs:\n#     path: layer\n#     compatibleRuntimes:\n#       - nodejs8.10\n","service: websocket-authorizer-example\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs8.10\n\nfunctions:\n  connect:\n    handler: handler.connect\n    events:\n      - websocket:\n          route: $connect # authorizers are only for connect routes\n          authorizer:\n            name: auth\n            identitySource:\n              - 'route.request.header.Auth'\n  default:\n    handler: handler.default\n    events:\n      - websocket:\n          route: $default\n\n  auth:\n    handler: handler.auth\n","service: aws-python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7 # or python3.7, supported as of November 2018\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n","service:\n  name: serverless-nest-example\n\nplugins:\n  - '@hewmen/serverless-plugin-typescript'  \n  - serverless-plugin-optimize\n  - serverless-offline\n  # - serverless-plugin-warmup\n\n# custom:\n#   # Enable warmup on all functions (only for production and staging)\n#   warmup:      \n#       - production\n#       - staging\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  individually: true\n\nfunctions:\n  main:\n    handler: src/main.handler\n    events:\n      - http:\n          method: any\n          path: /{proxy+}\n","service: shared-gateway\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\nresources:\n  Resources:\n    SharedGW:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: SharedGW\n  Outputs:\n    apiGatewayRestApiId:\n      Value:\n        Ref: SharedGW\n      Export:\n        Name: SharedGW-restApiId\n    apiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt:\n          - SharedGW\n          - RootResourceId\n      Export:\n        Name: SharedGW-rootResourceId\n","service: eshop-products\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-products:\n    handler: handler.getProducts\n    events:\n      - http:\n          path: products/list\n          method: get\n","service: eshop-transactions\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-transactions:\n    handler: handler.getTransactions\n    events:\n      - http:\n          path: transactions/list\n          method: get\n","service: eshop-users\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n  apiGateway:\n    restApiId:\n      \"Fn::ImportValue\": SharedGW-restApiId\n    restApiRootResourceId:\n      \"Fn::ImportValue\": SharedGW-rootResourceId\nfunctions:\n  get-users:\n    handler: handler.getUsers\n    events:\n      - http:\n          path: users/list\n          method: get\n","service: fetch-file-and-store-in-s3\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: <your-bucket-name>\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  save:\n    handler: handler.save\n    environment:\n      BUCKET: ${self:custom.bucket}\n","service: aws-golang-dynamo-stream-to-elasticsearch\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    ELASTICSEARCH_URL:\n      Fn::GetAtt: [\"PuppySearch\", \"DomainEndpoint\"]\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'dynamodb:ListTables'\n        - 'dynamodb:DescribeTable'\n        - 'dynamodb:DescribeStream'\n        - 'dynamodb:ListStreams'\n        - 'dynamodb:GetShardIterator'\n        - 'dynamodb:BatchGetItem'\n        - 'dynamodb:GetItem'\n        - 'dynamodb:Query'\n        - 'dynamodb:Scan'\n        - 'dynamodb:DescribeReservedCapacity'\n        - 'dynamodb:DescribeReservedCapacityOfferings'\n        - 'dynamodb:GetRecords'\n      Resource:\n        - { \"Fn::GetAtt\": [\"PuppyDemo\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - es:ESHttpPost\n        - es:ESHttpPut\n        - es:ESHttpDelete\n        - es:ESHttpGet\n      Resource:\n        - { \"Fn::GetAtt\": [\"PuppySearch\", \"DomainArn\"] }\n        - { \"Fn::Join\": [\"\", [\"Fn::GetAtt\": [\"PuppySearch\", \"DomainArn\"], \"/*\"]] }\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./bin/**\n\nfunctions:\n  aws-golang-dynamo-stream-to-elasticsearch:\n    name: aws-golang-dynamo-stream-to-elasticsearch\n    handler: bin/aws-golang-dynamo-stream-to-elasticsearch\n    memorySize: 128\n    timeout: 60\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 100\n          enabled: true\n          arn: { \"Fn::GetAtt\": [\"PuppyDemo\", \"StreamArn\"] }\n\nresources:\n  Resources:\n    PuppyDemo:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: name\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: puppies\n    PuppySearch:\n      Type: \"AWS::Elasticsearch::Domain\"\n      Properties:\n        ElasticsearchVersion: \"6.3\"\n        DomainName: \"puppy-search\"\n        ElasticsearchClusterConfig:\n          DedicatedMasterEnabled: false\n          InstanceCount: \"1\"\n          ZoneAwarenessEnabled: false\n          InstanceType: \"t2.small.elasticsearch\"\n        EBSOptions:\n          EBSEnabled: true\n          Iops: 0\n          VolumeSize: 10\n          VolumeType: \"gp2\"\n\n        ## Attention! Before you enable this lines, check out the README to avoid an open access policy\n        # AccessPolicies:\n        #   Version: \"2012-10-17\"\n        #   Statement:\n        #     -\n        #       Effect: \"Allow\"\n        #       Principal:\n        #         AWS: \"*\"\n        #       Action: \"es:*\"\n        #       Resource: \"*\"\n        AdvancedOptions:\n          rest.action.multi.allow_explicit_index: \"true\"\n\n","\nservice: aws-custom-authorizer-auth0\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - vendored/**\n    - lambda_handlers.py\n\nprovider:\n  name: aws\n  runtime: python3.6\n  region: us-east-1\n  environment:\n    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}\n    PYTHONPATH: \"/var/runtime:/var/task/vendored\"\n\nfunctions:\n  auth:\n    handler: lambda_handlers.auth\n    cors: true\n  publicEndpoint:\n    handler: lambda_handlers.public_endpoint\n    events:\n      - http:\n          path: api/public\n          method: post\n          cors: true\n  privateEndpoint:\n    handler: lambda_handlers.private_endpoint\n    events:\n      - http:\n          path: api/private\n          method: post\n          # See custom authorizer docs here: http://bit.ly/2gXw9pO\n          authorizer: auth\n          cors: true\n\nresources:\n  Resources:\n    # This response is needed for custom authorizer failures cors support ¯\\_(ツ)_/¯\n    GatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: EXPIRED_TOKEN\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n    AuthFailureGatewayResponse:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: UNAUTHORIZED\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n        StatusCode: '401'\n","service: dropbox\nprovider:\n  profile: personal\n  runtime: nodejs6.10\n  name: aws\n  region: ap-south-1\n  timeout: 60\n  stage: ${opt:stage}\n  environment:\n    CLIENT_SECRET: ${file(./config/${self:provider.stage}.yml):CLIENT_SECRET}\n    CLIENT_ID: ${file(./config/${self:provider.stage}.yml):CLIENT_ID}\n    STAGE: ${file(./config/${opt:stage}.yml):STAGE}\n    CALLBACK_URL: ${file(./config/${self:provider.stage}.yml):CALLBACK_URL}\n    \nplugins:\n  - serverless-offline\n  - serverless-plugin-optimize\ncustom:\n  serverless-offline:\n    port: 9999\n    host: 0.0.0.0\n    babelOptions:\n      presets: [\"es2015\", \"latest\"]\n  optimize:\n    minify: true\n\n\nfunctions:\n  dropbox_step1:\n    handler: dropbox/handler.step1\n    events:\n      - http:\n          method: get\n          path: dropbox\n          cors: true\n          \n  dropbox_step2:\n    handler: dropbox/handler.step2\n    events:\n      - http:\n          method: get\n          path: dropbox/callback\n          cors: true","service: graphql-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n\nresources:\n  Resources:\n    NicknamesTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: firstName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: firstName\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: gcp-node-typescript-simple # NOTE: Don't put the word \"google\" in here\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: gcp-node-typescript-simple\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/keyfile.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  include:\n    - ./src/App.ts\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  first:\n    handler: http\n    events:\n      - http: path\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: aws-golang-kinesis-to-elasticsearch\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    ELASTICSEARCH_HOST: my.elastic.host\n    ELASTICSEARCH_SCHEMA: http\n\nfunctions:\n  streamer:\n    handler: bin/stream\n    events:\n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:<region>:<accountID>:stream/<streamname>\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n","service: aws-golang-simple-http-endpoint\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n","service: baddadjokesbot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-west-1'}\n\ncustom:\n  env: ${file(./${self:provider.stage}.env.json)}\n\nfunctions:\n  bot:\n    handler: handler.bot\n    events:\n      - schedule: rate(5 hours)\n    environment:\n      JOKES_API_URL: ${self:custom.env.JOKES_API_URL}\n      TWITTER_CONSUMER_KEY: ${self:custom.env.TWITTER_CONSUMER_KEY}\n      TWITTER_CONSUMER_SECRET: ${self:custom.env.TWITTER_CONSUMER_SECRET}\n      TWITTER_ACCESS_TOKEN_KEY: ${self:custom.env.TWITTER_ACCESS_TOKEN_KEY}\n      TWITTER_ACCESS_TOKEN_SECRET: ${self:custom.env.TWITTER_ACCESS_TOKEN_SECRET}\n","service: ruby-service\n\nprovider:\n  name: openwhisk\n  runtime: ruby\n\nfunctions:\n  greeting:\n    handler: handler.main\n\nplugins:\n  - serverless-openwhisk\n","service: serverless-ruby-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\nfunctions:\n  current_time:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get","service: serverless-gong\nframeworkVersion: '>=1.4.0 <2.0.0'\nprovider:\n  name: aws\n  runtime: nodejs8.10\nfunctions:\n  handleGong:\n    handler: handler.gongHandler\n    description:\n      Fn::Sub:\n        - 'Stackery Stack #{StackeryStackTagName} Environment #{StackeryEnvironmentTagName} Function #{ResourceName}'\n        - ResourceName: handleGong\n    events:\n      - http:\n          path: /webhook\n          method: POST\n    environment:\n      GITHUB_WEBHOOK_SECRET:\n        Ref: StackeryEnvConfiggithubSecretAsString\n      SLACK_WEBHOOK_URL:\n        Ref: StackeryEnvConfigslackWebhookURLAsString\nresources:\n  Parameters:\n    StackeryStackTagName:\n      Type: String\n      Description: Stack Name (injected by Stackery at deployment time)\n      Default: serverless-gong\n    StackeryEnvironmentTagName:\n      Type: String\n      Description: Environment Name (injected by Stackery at deployment time)\n      Default: dev\n    StackeryEnvConfiggithubSecretAsString:\n      Type: AWS::SSM::Parameter::Value<String>\n      Default: /Stackery/Environments/<StackeryEnvId>/Config/githubSecret\n    StackeryEnvConfigslackWebhookURLAsString:\n      Type: AWS::SSM::Parameter::Value<String>\n      Default: /Stackery/Environments/<StackeryEnvId>/Config/slackWebhookURL\n  Metadata:\n    StackeryEnvConfigParameters:\n      StackeryEnvConfiggithubSecretAsString: githubSecret\n      StackeryEnvConfigslackWebhookURLAsString: slackWebhookURL\nplugins:\n  - serverless-cf-vars","service: python-hello\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: python-clock\n\nprovider:\n  name: kubeless\n  runtime: python2.7\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  clock:\n    handler: handler.printClock\n    events:\n      - schedule: '* * * * *'\n","service: hello-world\n\nprovider:\n  name: aws\n  runtime: go1.x\n  region: eu-west-1\n  memorySize: 128\n\npackage:\n  exclude:\n  - ./**\n  include:\n  - ./bin/**\n\nfunctions:\n  authorize:\n    handler: bin/auth\n  authorize2:\n    handler: bin/auth2\n  hello-world:\n    handler: bin/hello-world\n    events:\n    - http:\n        path: /hello\n        method: get\n    - http:\n        path: /\n        method: get\n        authorizer:\n          name: authorize\n          resultTtlInSeconds: 0\n  hello-world2:\n    handler: bin/hello-world2\n    events:\n    - http:\n        path: me\n        method: get\n        authorizer:\n          name: authorize2\n          resultTtlInSeconds: 0\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: goservice # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  get:\n    handler: bin/getBin\n    events:\n      - http:\n          path: get/{name}\n          method: get\n          request:\n            parameter:\n              paths:\n                name: true\n  getquery:\n    handler: bin/getQueryBin\n    events:\n      - http:\n          path: getQ\n          method: get\n          request:\n            parameters:\n              querystrings:\n                name: true\n  post:\n    handler: bin/postBin\n    events:\n      - http:\n          path: post\n          method: post\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: aws-node-singned-uploads\n\nplugins:\n  - serverless-webpack\n  - serverless-offline #serverless-offline needs to be last in the list\n\ncustom:\n  bucketName: testbucket123notaken\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'yarn'\n  serverless-offline:\n    port: 4000\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, env:AWS_STAGE, 'dev'}\n  region: ${opt:region, env:AWS_REGION, 'eu-central-1'}\n  environment:\n    REGION: ${self:provider.region}\n    BUCKET: { Ref: Uploads }\n  versionFunctions: false\n  iamRoleStatements:\n  -  Effect: \"Allow\"\n     Action:\n       - \"s3:*\"\n     Resource: \"*\"\n\nfunctions:\n  upsert-objects:\n    handler: src/upload.handler\n    name: ${self:provider.stage}-${self:service}-upload\n    memorySize: 128\n    events:\n      - http:\n          path: upload\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    Uploads:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucketName}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders:\n                - \"Authorization\"\n              AllowedMethods:\n                - GET\n              AllowedOrigins:\n                - \"*\"\n            - AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n","service: aws-node-alexa-skill\n\nframeworkVersion: \">=1.4.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  luckyNumber:\n    handler: handler.luckyNumber\n    events:\n      - alexaSkill\n","\nservice: aws-node-auth0-cognito-custom-authorizers-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  publicEndpoint:\n    handler: handler.publicEndpoint\n    events:\n      - http:\n          path: api/public\n          method: get\n          integration: lambda\n          cors: true\n  auth:\n    handler: auth.authorize\n  privateEndpoint:\n    handler: handler.privateEndpoint\n    events:\n      - http:\n          path: api/private\n          method: get\n          authorizer: auth\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n","service: env-variables-encrypted-in-a-file\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-secrets-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n\nfunctions:\n  resetPassword:\n    handler: handler.resetPassword\n    environment:\n      SESSION_KEY: ${self:custom.secrets.SESSION_KEY}\n      EMAIL_SERVICE_API_KEY: ${self:custom.secrets.EMAIL_SERVICE_API_KEY}\n","service: function-with-environment-variables\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    EMAIL_SERVICE_API_KEY: KEYEXAMPLE1234\n\nfunctions:\n  createUser:\n    handler: handler.createUser\n    environment:\n      PASSWORD_ITERATIONS: 4096\n      PASSWORD_DERIVED_KEY_LENGTH: 256\n\n  resetPassword:\n    handler: handler.resetPassword\n","service: function-compiled-with-babel\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  babelPresets:\n    - latest\n\nplugins:\n  - serverless-babel-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: github-webhook-listener\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    GITHUB_WEBHOOK_SECRET: REPLACE-WITH-YOUR-SECRET-HERE\n\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n","service: aws-node-iot-event\n\nframeworkVersion: \">=1.5.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  log:\n    handler: handler.log\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'mybutton'\"\n","\nservice: recursive-invocation-example\n\ncustom:\n  functionARN: yourFunctionARN\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n#  iamRoleStatements:\n#    -  Effect: \"Allow\"\n#       Action:\n#         - \"lambda:InvokeFunction\"\n#       Resource: ${self:custom.functionARN}\n\nfunctions:\n  recursiveExample:\n    handler: handler.recursiveLambda","service: scheduled-cron-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every minute\n      - schedule: rate(1 minute)\n  secondCron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every 2nd minute from Mon-Fri\n      - schedule: cron(0/2 * ? * MON-FRI *)\n","service: scheduled-weather-example\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    RECIPIENT: tom@carrotcreative.com\n    DARK_SKY_API_KEY: abc123\n    POSTMARK_API_KEY: abc123\n    POSTMARK_SENDER: devops@carrotcreative.com\n    LATITUDE: 40.702637\n    LONGITUDE: -73.989406\n\nfunctions:\n  weather:\n    handler: handler.run\n    memorySize: 128\n    timeout: 5\n    events:\n        # 10am UTC, daily\n      - schedule: cron(0 10 * * ? *)\n","# Serving HTML through API Gateway for AWS Lambda\nservice: serve-dynamic-html-via-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  landingPage:\n    handler: handler.landingPage\n    events:\n      - http:\n          method: get\n          path: landing-page\n","service: serverless-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n","service: single-page-app-via-cloudfront7\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: yourBucketName123\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n","service: text-analysis-via-sns-post-processing\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  addNote:\n    handler: addNote.addNote\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n\n  analyzeNote:\n    handler: analyzeNote.analyzeNote\n    events:\n      - sns: analyzeNote\n","service: aws-node-twilio\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    # replace these env variables with your twilio account values\n    TWILIO_ACCOUNT_SID: YOUR-TWILIO-ACCOUNT-SID-HERE\n    TWILIO_AUTH_TOKEN: YOUR-TWILIO-AUTH-TOKEN-HERE\n    TWILIO_PHONE_NUMBER: YOUR-TWILIO-PHONE-NUMBER-HERE\n\npackage:\n  exclude:\n    - \"*.test.js\"\n    - 'node_modules/**'\n    - '!node_modules/twilio/**'\n    - 'frontend/**'\n\nfunctions:\n  sendText:\n    handler: handler.sendText\n    events:\n      - http:\n          path: api/sendText\n          method: post\n          integration: lambda\n          cors: true\n","service: upload-to-s3-and-postprocess\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: <your-bucket-name>\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  postprocess:\n    handler: handler.postprocess\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - suffix: .png\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-telegram-bot\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n","service: python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nplugins:\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google\n  runtime: python37\n  project: <projectnamehere-1234>\n  credentials: ~/.gcloud/keyfile.json # path must be absolute\n\nfunctions:\n  currentTime:\n    handler: endpoint\n    events:\n      - http: path\n","service: gifmaker\nframeworkVersion: \">=1.34.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  mkgif:\n    handler: handler.mkgif\n    events:\n      - s3: ${self:custom.bucket}\n    layers:\n      - {Ref: FfmpegLambdaLayer}\n\nlayers:\n  ffmpeg:\n    path: layer\n\ncustom:\n  bucket: ${env:BUCKET, 'ffmpeg-layer-gif-maker'}\n","\nservice: ${file(env.configs.yml):feature}\n\nframeworkVersion: \">=1.6.0 <2.1.0\"\n\nprovider:\n  name: aws\n  stackName: ${file(env.configs.yml):feature}-${file(env.configs.yml):environment}\n  runtime: dotnetcore2.1\n  region: ${file(env.configs.yml):region}\n  accountId: ${file(env.configs.yml):accountId}\n  environment:\n    DynamoDbConfiguration__TableName: ${file(env.configs.yml):dynamoTable}\n    \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DynamoDbConfiguration__TableName}\"\n\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n  \nfunctions:\n  create:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.CreateItemFunction::Run\n    events:\n      - http:\n          path: items\n          method: post\n          cors: true\n\n  get:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.GetItemFunction::Run\n    events:\n      - http:\n          path: items/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: DotNetServerless.Lambda::DotNetServerless.Lambda.Functions.UpdateItemFunction::Run\n    events:\n      - http:\n          path: items\n          method: put\n          cors: true\n\nresources:\n  Resources:\n    ItemsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: Id\n            AttributeType: S\n          - AttributeName: Code\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n          - AttributeName: Code\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DynamoDbConfiguration__TableName}\n        \n","service: golang-simple-http-endpoint\n\nframeworkVersion: \">=1.33.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n# https://serverless.com/framework/docs/providers/google/guide/credentials/\n#\n# NOTE: the golang runtime is currently in alpha state, you must have access from google to use the alpha toolchain\nprovider:\n  name: google\n  runtime: go111                           # currently both vendored and go.mod repos are supported\n  project: sborza-91                    # replace with your project name here\n  credentials: ~/.gcloud/slsframework.json # path must be absolute, change to whichever keyfile you need\n\nfunctions:\n  hello:\n    handler: Hello\n    events:\n      - http: path\n","service: my-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello","service: serverless-side-rendering-vue-nuxt\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\nplugins:\n  - serverless-apigw-binary\n  # - serverless-domain-manager\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  # customDomain:\n  #   domainName: ${self:custom.secrets.DOMAIN}\n  #   basePath: ''\n  #   stage: ${self:custom.secrets.NODE_ENV}\n  #   createRoute53Record: true\n    ## endpointType: 'regional'\n    ## if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`","service: aws-node-simple-transcribe-s3\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    S3_AUDIO_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-records\n    S3_TRANSCRIPTION_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-transcriptions\n    LANGUAGE_CODE: en-US\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - 'arn:aws:s3:::${self:provider.environment.S3_AUDIO_BUCKET}/*'\n        - 'arn:aws:s3:::${self:provider.environment.S3_TRANSCRIPTION_BUCKET}/*'\n    - Effect: Allow\n      Action:\n        - transcribe:StartTranscriptionJob\n      Resource: '*'\n\nfunctions:\n  transcribe:\n    handler: handler.transcribe\n    events:\n      - s3:\n          bucket: ${self:provider.environment.S3_AUDIO_BUCKET}\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3TranscriptionBucket:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:provider.environment.S3_TRANSCRIPTION_BUCKET}\n","service: aws-node-ses-receive-email-body\n\nframeworkVersion: \">=1.1.0\"\n\ncustom:\n  bucket: sesreceiveemailbody\n  bucketRef: S3BucketSesreceiveemailbody\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n\nfunctions:\n  postprocess:\n    handler: handler.postprocess\n    events:\n      - s3:\n          bucket: ${self:custom.bucket}\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3EMailBucketPermissions:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: \n          Ref: ${self:custom.bucketRef}\n        PolicyDocument:\n          Statement:\n            - Principal: \n                Service: \"ses.amazonaws.com\"\n              Action:\n                - s3:PutObject\n              Effect: Allow\n              Sid: \"AllowSESPuts\"\n              Resource: \n                Fn::Join: ['', ['arn:aws:s3:::', Ref: \"${self:custom.bucketRef}\", '/*'] ]\n              Condition:\n                StringEquals:\n                  \"aws:Referer\": { Ref: AWS::AccountId }","service: aws-node-ses-receive-email-header\n\nframeworkVersion: \">=1.1.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n\nfunctions:\n  processheader:\n    handler: handler.processheader\n  processacceptreject:\n    handler: handler.processacceptreject\n\nresources:\n  Resources:\n    GiveSESPermissionToInvokeProcessheaderLambdaFunction:\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName: { \"Fn::GetAtt\": [ \"ProcessheaderLambdaFunction\", \"Arn\" ] }\n        Principal: ses.amazonaws.com\n        Action: 'lambda:InvokeFunction'\n        SourceAccount: { Ref: AWS::AccountId }\n    GiveSESPermissionToInvokeProcessacceptrejectLambdaFunction:\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName: { \"Fn::GetAtt\": [ \"ProcessacceptrejectLambdaFunction\", \"Arn\" ] }\n        Principal: ses.amazonaws.com\n        Action: 'lambda:InvokeFunction'\n        SourceAccount: { Ref: AWS::AccountId }\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: azure-line-bot-example\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n\n# The following are a few examples of other events you can configure:\n#\n# events:\n#   - queue: YourQueueName\n#     x-azure-settings:\n#       connection : StorageAppSettingName\n#   - blob:\n#     x-azure-settings:\n#       name: bindingName\n#       direction: in\n","service: ${file(./secrets.json):ApiName}\n\nprovider:\n  name: aws\n  region: us-east-1\n  stage: dev\n  memorySize: 256\n  runtime: nodejs8.10\n  role: LambdaRole\n  environment:\n    #aurora\n    AURORA_HOST: ${self:custom.AURORA.HOST}\n    AURORA_PORT: ${self:custom.AURORA.PORT}\n    #mysql\n    MYSQL_HOST: ${self:custom.MYSQL.HOST}\n    MYSQL_PORT: ${self:custom.MYSQL.PORT}\n    #postgresql\n    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}\n    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}\n    #common\n    DB_NAME: ${self:custom.DB_NAME}\n    USERNAME: ${self:custom.USERNAME}\n    PASSWORD: ${self:custom.PASSWORD}\ncustom:\n  DB_NAME: graphql\n  USERNAME: master\n  PASSWORD: password\n  AURORA:\n    HOST:\n      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]\n    VPC_CIDR: 10\n  MYSQL:\n    HOST:\n      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]\n  POSTGRESQL:\n    HOST:\n      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]\n    PORT:\n      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]\n\nplugins:\n  - serverless-pseudo-parameters\nresources:\n  Resources:\n    LambdaRole: ${file(./resource/LambdaRole.yml)}\n    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}\n    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}\n    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}\n    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}\n    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}\n    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}\n    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}\n    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}\n    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}\n    RoutePublic: ${file(./resource/RoutePublic.yml)}\n    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}\n    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}\n    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}\n\n    AuroraRDSClusterParameter: ${file(./resource/AuroraRDSClusterParameter.yml)}\n    AuroraRDSInstanceParameter: ${file(./resource/AuroraRDSInstanceParameter.yml)}\n    AuroraRDSCluster: ${file(./resource/AuroraRDSCluster.yml)}\n    AuroraRDSInstance: ${file(./resource/AuroraRDSInstance.yml)}\n\n    MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}\n\n    PostgreSqlRDSInstance: ${file(./resource/PostgreSqlRDSInstance.yml)}\n    \nfunctions:\n  graphql:\n    handler: handler.server\n    events:\n      - http:\n          path: /\n          method: post\n          cors: true\n  playground:\n    handler: handler.playground\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n    ","service: aws-python-line-echo-bot\nprovider:\n  name: aws\n  runtime: python3.7\n\nfunctions:\n  line_bot:\n    handler: handler.webhook\n    events:\n      - http:\n          path: /webhook\n          method: POST\nplugins:\n  - serverless-python-requirements\n","service: aws-ruby-line-bot\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n\nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - bundle install --deployment\n","tenant: ac360 # Enter your tenant name here\napp: enterprise # Enter your application name here\nservice: demo-email-form\n\nframeworkVersion: '>=1.38.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  # credentials: ${secrets:aws-enterprise} # Enter an AWS Secret like this, after you create it in the Dashboard.\n\nfunctions:\n  formSubmit:\n    handler: index.submit\n    events:\n      - http:\n          path: submit\n          method: post\n          cors: true\n\nplugins:\n  # - serverless-finch # If you want to deploy the front-end uncomment this and the \"custom\" object below\n\n# custom:\n  # client:\n    # bucketName: sfe-demo-email-form # If you want to deploy the front-end, change this to a universally unique AWS S3 bucket name\n    # distributionFolder: ../frontend/build\n","service: scrapper-lambda\nprovider:\n  name: aws\n  profile: <your aws profile>\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-chrome\n  \npackage:\n  exclude:\n    - node_modules/puppeteer/.local-chromium/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    memorySize: 1536MB\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: your-service # update this with your service name\n\nprovider:\n  name: twilio\n\n  # Twilio access credentials (mandatory)\n  config:\n    accountSid: ${env:TWILIO_ACCOUNT_SID}\n    authToken: ${env:TWILIO_AUTH_TOKEN}\n\n  # Twilio runtime supports several domains\n  # your functions and assets will be available under\n  # -> defaulting to 'dev'\n  environment: ${env:TWILIO_RUNTIME_ENV, 'dev'}\n\n  # Environment variables passed to your functions\n  # available in the Twilio runtim via `context` parameter\n  environmentVars:\n    MY_PHONE_NUMBER: ${env:MY_PHONE_NUMBER}\n\n# Twilio runtime has to be added as a plugin\nplugins:\n  - '@twilio-labs/serverless-twilio-runtime'\n\nfunctions:\n  # Function name\n  forward-call:\n    # Path to the JS handler function in the project (without file extension '.js')\n    handler: forward-call\n    # URL path of the function after deployment\n    path: /forward-call\n    # visibility of the function (can be \"public\" or \"protected\")\n    access: public","service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n    migration:\n      dir: offline/migrations\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service: aws-node-telegram-echo-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: gomapservice # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: go1.x\n  environment:\n    GOOGLE_API_KEY: AIzaXXXX #CHANGE YOUR API KEY\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  getgeolocation:\n    handler: bin/getgeolocation\n    events:\n      - http:\n          path: geolocation\n          method: get\n          request:\n            parameters:\n              querystrings:\n                address: true\n  getnearbylocation:\n    handler: bin/getnearbylocation\n    events:\n      - http:\n          path: nearbylocation\n          method: get\n          request:\n            parameters:\n              querystrings:\n                location: true\n                radius: true\n                name: false\n                type: false\n  getgeodetail:\n    handler: bin/getgeodetail\n    events:\n      - http:\n          path: geodetail\n          method: get\n          request:\n            parameters:\n              querystrings:\n                placeid: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n# events:\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","Type: AWS::EC2::InternetGateway\nProperties:\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessInternetGateway\"","DependsOn: ServerlessVPC\nType: AWS::EC2::SecurityGroup\nProperties:\n  GroupDescription: SecurityGroup for Serverless Functions\n  VpcId:\n    Ref: ServerlessVPC\n  SecurityGroupIngress:\n    - IpProtocol: tcp\n      FromPort: '0'\n      ToPort: '65535'\n      CidrIp: \"0.0.0.0/0\"\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSecurityGroup\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}a\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetA\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}b\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetB\"","DependsOn: ServerlessVPC\nType: AWS::EC2::Subnet\nProperties:\n  VpcId:\n    Ref: ServerlessVPC\n  AvailabilityZone: ${self:provider.region}c\n  CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24\n  Tags: \n    - \n      Key: \"Name\"\n      Value: \"ServerlessSubnetC\""]},{"id":51905436,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-ruby # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: ruby2.5\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: http\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          # integration: lambda\n          method: get\n          path: hello\n    handler: handler.hello\n","service: websocket\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  connect:\n    events:\n      - websocket:\n          route: $connect\n    handler: handler.connect\n\n  disconnect:\n    events:\n      - websocket:\n          route: $disconnect\n    handler: handler.disconnect\n\n  default:\n    events:\n      - websocket:\n          route: $default\n    handler: handler.default\n","service: babel-register-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","service: esm-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","service: nodemon-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: serverless-webpack-example\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: ts-node-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/bridge.hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: basic\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  apiKeys:\n    - token\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n\n  rejectedPromise:\n    handler: src/handler.rejectedPromise\n    events:\n      - http:\n          path: rejectedPromise\n          method: any\n\n  helloAuthorizerWithArn:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithArn\n          method: get\n          authorizer:\n            arn: sometest\n  helloAuthorizerWithAuthorizerId:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithAuthorizerId\n          method: get\n          authorizer:\n            type: CUSTOM\n            authorizerId: commonAuthorizerId\n\n  helloAuthorizerWithFunctionName:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: helloAuthorizerWithCustomFunction\n          method: get\n          authorizer:\n            name: authFunction\n            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default\n            resultTtlInSeconds: 0 #prevents caching the authorizer\n\n  authFunction:\n    handler: src/handler.authFunction\n\n  hello500:\n    handler: src/handler.hello500\n    events:\n      - http:\n          path: hello500\n          method: get\n      - http:\n          path: hello500\n          method: post\n\n  helloLambdaIntegration:\n    handler: src/handler.helloLambdaIntegration\n    events:\n      - http:\n          path: helloLambdaIntegration\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration\n          method: post\n          integration: lambda\n\n  helloLambdaIntegration500:\n    handler: src/handler.helloLambdaIntegration500\n    events:\n      - http:\n          path: helloLambdaIntegration500\n          method: get\n          integration: lambda\n      - http:\n          path: helloLambdaIntegration500\n          method: post\n          integration: lambda\n\n  #      - s3: ${env:BUCKET}\n  #      - schedule: rate(10 minutes)\n  #      - sns: greeter-topic\n  basicAuthentication:\n    handler: src/handler.basicAuthentication\n    events:\n      - http:\n          path: fn2\n          method: GET\n          private: true\n\n  samePathPublicGet:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: fn3\n          method: GET\n\n  samePathPrivatePost:\n    handler: src/handler.basicAuthentication\n    events:\n      - http:\n          path: fn3\n          method: POST\n          private: true\n\n  pathParams:\n    handler: src/handler.pathParams\n    events:\n      - http:\n          path: /pathParams/{id}\n          method: GET\n\n  failure:\n    handler: src/handler.failure\n    events:\n      - http:\n          path: /failure\n          method: GET\n\n  catchAll:\n    handler: src/handler.catchAll\n    events:\n      - http:\n          path: /{proxy+}\n          method: ANY\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    EchoProxyResource:\n      Type: AWS::ApiGateway::Resource\n      Properties:\n        PathPart: echo/{proxy+}\n    EchoProxyMethod:\n      Type: AWS::ApiGateway::Method\n      Properties:\n        ResourceId:\n          Ref: EchoProxyResource\n        HttpMethod: ANY\n        Integration:\n          IntegrationHttpMethod: ANY\n          Type: HTTP_PROXY\n          Uri: http://mockbin.org/request/{proxy}\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: schedule\n\nplugins:\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  schedule1:\n    events:\n      - schedule: rate(1 minute)\n    handler: handler.schedule1\n\n  schedule2:\n    events:\n      - schedule:\n          enabled: true\n          input:\n            foo1: bar1\n            foo2: bar2\n            foobar:\n              test: 1\n          rate: rate(2 minutes)\n    handler: handler.schedule2\n","service: lambda-invoke\n\nplugins:\n  - serverless-offline\n\nprovider:\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: '*'\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: test-handler\n    handler: handler.hello\n\n  toBeInvoked:\n    handler: handler.toBeInvoked\n","service: authorizer\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  user:\n    events:\n      - http:\n          authorizer: authorizerCallback\n          method: get\n          path: user1\n      - http:\n          authorizer: authorizerAsyncFunction\n          method: get\n          path: user2\n    handler: handler.user\n\n  authorizerCallback:\n    handler: authorizer.authorizerCallback\n\n  authorizerAsyncFunction:\n    handler: authorizer.authorizerAsyncFunction\n","service: handler-payload-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  # https://github.com/serverless/serverless/issues/4218#issue-255617750\n  # bug?\n  # - ${file(./handler.yml)}\n\n  contextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: context-done-handler\n    handler: handler.contextDoneHandler\n\n  contextDoneHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: context-done-handler-deferred\n    handler: handler.contextDoneHandlerDeferred\n\n  contextSucceedHandler:\n    events:\n      - http:\n          method: get\n          path: context-succeed-handler\n    handler: handler.contextSucceedHandler\n\n  contextSucceedHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: context-succeed-handler-deferred\n    handler: handler.contextSucceedHandlerDeferred\n\n  callbackHandler:\n    events:\n      - http:\n          method: get\n          path: callback-handler\n    handler: handler.callbackHandler\n\n  callbackHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: callback-handler-deferred\n    handler: handler.callbackHandlerDeferred\n\n  promiseHandler:\n    events:\n      - http:\n          method: get\n          path: promise-handler\n    handler: handler.promiseHandler\n\n  promiseHandlerDeferred:\n    events:\n      - http:\n          method: get\n          path: promise-handler-deferred\n    handler: handler.promiseHandlerDeferred\n\n  asyncFunctionHandler:\n    events:\n      - http:\n          method: get\n          path: async-function-handler\n    handler: handler.asyncFunctionHandler\n\n  promiseWithDefinedCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: promise-with-defined-callback-handler\n    handler: handler.promiseWithDefinedCallbackHandler\n\n  contextSucceedWithContextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: context-succeed-with-context-done-handler\n    handler: handler.contextSucceedWithContextDoneHandler\n\n  callbackWithContextDoneHandler:\n    events:\n      - http:\n          method: get\n          path: callback-with-context-done-handler\n    handler: handler.callbackWithContextDoneHandler\n\n  callbackWithPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: callback-with-promise-handler\n    handler: handler.callbackWithPromiseHandler\n\n  callbackInsidePromiseHandler:\n    events:\n      - http:\n          method: get\n          path: callback-inside-promise-handler\n    handler: handler.callbackInsidePromiseHandler\n\n  throwExceptionInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: throw-exception-in-promise-handler\n    handler: handler.throwExceptionInPromiseHandler\n\n  throwExceptionInCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: throw-exception-in-callback-handler\n    handler: handler.throwExceptionInCallbackHandler\n\n  NoAnswerInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: no-answer-in-promise-handler\n    handler: handler.NoAnswerInPromiseHandler\n\n  BadAnswerInPromiseHandler:\n    events:\n      - http:\n          method: get\n          path: bad-answer-in-promise-handler\n    handler: handler.BadAnswerInPromiseHandler\n\n  BadAnswerInCallbackHandler:\n    events:\n      - http:\n          method: get\n          path: bad-answer-in-callback-handler\n    handler: handler.BadAnswerInCallbackHandler\n","service: lambda-invoke-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: '*'\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  invocationTypeEvent:\n    events:\n      - http:\n          method: get\n          path: invocation-type-event\n    handler: handler.invocationTypeEvent\n\n  testHandler:\n    events:\n      - http:\n          method: get\n          path: test-handler\n    handler: handler.testHandler\n\n  noPayload:\n    events:\n      - http:\n          method: get\n          path: no-payload\n    handler: handler.noPayload\n\n  invokedHandler:\n    handler: handler.invokedHandler\n","service: python-big-json-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: python-2-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python2.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: python-3-tests\n\nplugins:\n  - ../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: ruby-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: ruby2.5\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: uncategorized-tests\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  # https://github.com/serverless/serverless/issues/4218#issue-255617750\n  # bug?\n  # - ${file(./handlerPayload.yml)}\n\n  uncategorizedHandler1:\n    events:\n      - http:\n          integration: lambda\n          method: get\n          path: uncategorized-1\n          responses:\n            default:\n              responseModels:\n                application/json;charset=UTF-8: Empty\n              responseParameters:\n                method.response.header.x-foo: 'integration.response.body.foo'\n              responseTemplates:\n                application/json;charset=UTF-8: ''\n              statusCode: 200\n    handler: handler.uncategorizedHandler1\n\n  uncategorizedHandler2:\n    events:\n      - http:\n          integration: lambda\n          method: get\n          path: uncategorized-2\n          responses:\n            default:\n              responseModels:\n                application/json;charset=UTF-8: Empty\n              responseParameters:\n                method.response.header.x-foo: 'integration.response.body.more-foo.property-of-undefined'\n              responseTemplates:\n                application/json;charset=UTF-8: ''\n              statusCode: 200\n    handler: handler.uncategorizedHandler2\n","service: serverless-webpack-test\n\nplugins:\n  - serverless-webpack\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: serverless-webpack\n    handler: src/index.serverlessWebpack\n","service: serverless-plugin-typescript-test\n\nplugins:\n  - serverless-plugin-typescript\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: serverless-plugin-typescript\n    handler: src/index.serverlessPluginTypescript\n","service: serverless-plugin-typescript-example\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-offline\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/index.hello\n","service: docker-serverless-webpack-test\n\nplugins:\n  - serverless-webpack\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: docker-serverless-webpack\n    handler: src/index.serverlessWebpack\n","service: docker-nodejs12.x-test\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n  environment:\n    HOST_OS: ${opt:host-os}\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: src/handler.hello\n","service: docker-go-1.x-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: go1.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: bin/hello\n","service: docker-multiple-containers-test\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello1:\n    events:\n      - http:\n          method: get\n          path: hello1\n    handler: handler.hello\n\n  hello2:\n    events:\n      - http:\n          method: get\n          path: hello2\n    handler: handler.hello\n    runtime: nodejs10.x\n\n  hello3:\n    events:\n      - http:\n          method: get\n          path: hello3\n    handler: handler.hello\n    runtime: python3.8\n","service: docker-nodejs10.x-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs10.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-nodejs12.x-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-nodejs8.10-test\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs8.10\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-provided-tests\n\nplugins:\n  - ./../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: provided\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-2.7-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python2.7\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.6-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.6\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.7-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.7\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-python-3.8-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: python3.8\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: docker-ruby2.5-tests\n\nplugins:\n  - ./../../../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: ruby2.5\n  stage: dev\n  versionFunctions: false\n\ncustom:\n  serverless-offline:\n    useDocker: true\n\nfunctions:\n  hello:\n    events:\n      - http:\n          method: get\n          path: hello\n    handler: handler.hello\n","service: apollo-server-lambda-test\n\nplugins:\n  - ../../../\n\nprovider:\n  memorySize: 128\n  name: aws\n  region: us-east-1 # default\n  runtime: nodejs12.x\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  graphql:\n    events:\n      - http:\n          method: any\n          path: graphql\n    handler: src/index.graphql\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manual-test-websocket-RouteSelection\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  websocketsApiRouteSelectionExpression: $request.body.service.do\n\nfunctions:\n  echo:\n    handler: handler.echo\n    events:\n      - websocket:\n          route: echo\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: manual-test-websocket-main\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - 'execute-api:ManageConnections'\n      Resource:\n        - 'arn:aws:execute-api:*:*:**/@connections/*'\n\nfunctions:\n  # http:\n  #   handler: handler.http\n  #   events:\n  #     - http:\n  #         path: /http\n  #         method: GET\n  connect:\n    handler: handler.connect\n    events:\n      - websocket:\n          route: $connect\n          # authorizer: auth\n  # auth:\n  #   handler: handler.auth\n  disconnect:\n    handler: handler.disconnect\n    events:\n      - websocket:\n          route: $disconnect\n  default:\n    handler: handler.defaultHandler\n    events:\n      - websocket:\n          route: $default\n  getClientInfo:\n    handler: handler.getClientInfo\n    events:\n      - websocket:\n          route: getClientInfo\n  getCallInfo:\n    handler: handler.getCallInfo\n    events:\n      - websocket:\n          route: getCallInfo\n  makeError:\n    handler: handler.makeError\n    events:\n      - websocket:\n          route: makeError\n  replyViaCallback:\n    handler: handler.replyViaCallback\n    events:\n      - websocket:\n          route: replyViaCallback\n  replyErrorViaCallback:\n    handler: handler.replyErrorViaCallback\n    events:\n      - websocket:\n          route: replyErrorViaCallback\n  multiCall1:\n    handler: handler.multiCall1\n    events:\n      - websocket:\n          route: makeMultiCalls\n  multiCall2:\n    handler: handler.multiCall2\n    events:\n      - websocket:\n          route: makeMultiCalls\n  send:\n    handler: handler.send\n    events:\n      - websocket:\n          route: send\n  registerListener:\n    handler: handler.registerListener\n    events:\n      - websocket:\n          route: registerListener\n  deleteListener:\n    handler: handler.deleteListener\n    events:\n      - websocket:\n          route: deleteListener\n\nresources:\n  Resources:\n    ListenersTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: name\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: listeners\n","plugins:\n# - serverless-offline\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n","plugins:\n# - serverless-offline\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n","plugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 3004\n","######################################\n### DO NOT EDIT THIS FILE DIRECTLY ###\n###                                ###\n### User either:                   ###\n###   'npm run deploy-offline' or  ###\n###   'npm run deploy-aws'         ###\n######################################","plugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n","######################################\n### DO NOT EDIT THIS FILE DIRECTLY ###\n###                                ###\n### User either:                   ###\n###   'npm run deploy-offline' or  ###\n###   'npm run deploy-aws'         ###\n######################################\n"]},{"id":84632322,"files":["service: serverless-chrome-lambda-pkg-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DEBUG: \"*\"\n\nfunctions:\n  test:\n    description: serverless-chrome/lambda test\n    memorySize: 1536\n    timeout: 30\n    handler: handler.run\n\n    events:\n      - http:\n          path: package/lambda/test\n          method: get\n","service: serverless-chrome-sls-plugin-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    DEBUG: \"*\"\n\nplugins:\n#  - serverless-plugin-typescript\n  - serverless-plugin-chrome\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n      - --ignore-certificate-errors\n    functions:\n      - test\n      - anotherTest\n\nfunctions:\n  test:\n    handler: src/handler.default\n  anotherTest:\n    handler: src/anotherHandler.default\n    package:\n      # individually: true\n  noChromeHere:\n    handler: src/noChrome.default\n\n\n  # typescript-test:\n  #   handler: src/typescript-handler.default\n","service: serverless-chrome-examples\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n  environment:\n    PAGE_LOAD_TIMEOUT: 20000\n    LOGGING: true\n\nplugins:\n  - serverless-plugin-chrome\n  - serverless-webpack\n\ncustom:\n  chrome:\n    flags:\n      - --window-size=1280,1696 # Letter size\n      - --hide-scrollbars\n\nfunctions:\n  version-info:\n    description: Headless Chrome Serverless-framework version info example\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/version.default\n    events:\n      - http:\n          path: version-info\n          method: get\n\n  request-logger:\n    description: Headless Chrome Serverless-framework request logging example\n    memorySize: 1024\n    timeout: 30\n    handler: src/handlers/requestLogger.default\n    events:\n      - http:\n          path: request-logger\n          method: get\n\n  screenshot:\n    description: Headless Chrome Serverless-framework screenshot example\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/screenshot.default\n    events:\n      - http:\n          path: screenshot\n          method: get\n\n  pdf:\n    description: Headless Chrome Serverless-framework PDF example\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/pdf.default\n    events:\n      - http:\n          path: pdf\n          method: get\n\nresources:\n  Resources:\n    ApiGatewayRestApi:\n      Properties:\n        BinaryMediaTypes:\n          - \"*/*\"\n\n    # Enable X-Ray tracing on Lambda functions\n    # ScreenshotLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n    # PdfLambdaFunction:\n    #   Properties:\n    #     TracingConfig:\n    #       Mode: Active\n"]},{"id":116817549,"files":["name: webiny-cms\n\nvars:\n  region: ${env.AWS_REGION}\n\nsite:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    description: Webiny Site\n    region: ${vars.region}\n    memory: 128\n    timeout: 30\n    code: ./site/build\n    env:\n      SSR_FUNCTION: ${ssr.name}\n\nssr:\n  component: \"@webiny/serverless-function\"\n  inputs:\n    description: Site SSR\n    region: ${vars.region}\n    hook: yarn build:${cli.env}\n    root: ./site\n    code: ./site/build-ssr\n    handler: handler.handler\n    memory: 2048\n    timeout: 30\n\nadmin:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    region: ${vars.region}\n    description: Webiny Admin\n    hook: yarn build:${cli.env}\n    root: ./admin\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: Apps Gateway\n    description: Serverless React Apps\n    endpoints:\n      - path: /admin/{key+}\n        method: GET\n        function: ${admin}\n      - path: /admin\n        method: GET\n        function: ${admin}\n      - path: /{key+}\n        method: GET\n        function: ${site}\n      - path: /\n        method: GET\n        function: ${site}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - url: ${api.url}\n","name: webiny-apps-[PROJECT_ID]\n\nvars:\n  region: ${env.AWS_REGION}\n\nsite:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    description: Webiny Site\n    region: ${vars.region}\n    memory: 128\n    timeout: 30\n    code: ./site/build\n    env:\n      SSR_FUNCTION: ${ssr.name}\n\nssr:\n  component: \"@webiny/serverless-function\"\n  inputs:\n    description: Site SSR\n    region: ${vars.region}\n    hook: yarn build:${cli.env}\n    root: ./site\n    code: ./site/build-ssr\n    handler: handler.handler\n    memory: 2048\n    timeout: 30\n\nadmin:\n  component: \"@webiny/serverless-app\"\n  inputs:\n    region: ${vars.region}\n    description: Webiny Admin\n    hook: yarn build:${cli.env}\n    root: ./admin\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: Apps Gateway\n    binaryMediaTypes: [\"*/*\"]\n    description: Serverless React Apps\n    endpoints:\n      - path: /admin/{key+}\n        method: GET\n        function: ${admin}\n      - path: /admin\n        method: GET\n        function: ${admin}\n      - path: /{key+}\n        method: GET\n        function: ${site}\n      - path: /\n        method: GET\n        function: ${site}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - url: ${api.url}\n","name: webiny-api-[PROJECT_ID]\n\nvars:\n  region: ${env.AWS_REGION}\n  bucket: ${env.S3_BUCKET}\n  apollo:\n    server:\n      introspection: ${env.GRAPHQL_INTROSPECTION}\n      playground: ${env.GRAPHQL_PLAYGROUND}\n  commodo:\n    database:\n      server: ${env.MONGODB_SERVER}\n      name: ${env.MONGODB_NAME}\n  security:\n    token:\n      expiresIn: 2592000 # 30 days\n      secret: ${env.JWT_SECRET}\n\ngateway:\n  component: \"@webiny/serverless-apollo-gateway\"\n  inputs:\n    name: Apollo Gateway\n    region: ${vars.region}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-gateway\"\n        options:\n          server: ${vars.apollo.server}\n          services:\n            - name: security\n              url: ${security.api.graphqlUrl}\n            - name: files\n              url: ${files.api.graphqlUrl}\n            - name: pageBuilder\n              url: ${pageBuilder.api.graphqlUrl}\n            - name: i18n\n              url: ${i18n.api.graphqlUrl}\n            - name: formBuilder\n              url: ${formBuilder.api.graphqlUrl}\n\ncognito:\n  component: \"@webiny/serverless-aws-cognito-user-pool\"\n  inputs:\n    name: \"webiny-pool-[PROJECT_ID]\"\n    region: ${vars.region}\n    appClients:\n      - name: \"react-app-[PROJECT_ID]\"\n\nsecurity:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: \"Security\"\n    region: ${vars.region}\n    memory: 512\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins\"\n        options: ${vars.security}\n      - factory: \"@webiny/api-plugin-security-cognito\"\n        options:\n          region: ${vars.region}\n          userPoolId: ${cognito.userPool.Id}\n\nfiles:\n  component: \"@webiny/serverless-files\"\n  inputs:\n    region: ${vars.region}\n    bucket: ${vars.bucket}\n    functions:\n      apolloService:\n        memory: 512\n        timeout: 10\n        uploadMinFileSize: 0 # 0 MB\n        uploadMaxFileSize: 26214400 # 25 MB\n        plugins:\n          - factory: \"@webiny/api-plugin-create-apollo-handler\"\n            options: ${vars.apollo}\n          - factory: \"@webiny/api-plugin-commodo-mongodb\"\n            options: ${vars.commodo}\n          - factory: \"@webiny/api-security/plugins/service\"\n            options: ${vars.security}\n          - \"@webiny/api-files/plugins\"\n          - \"@webiny/api-plugin-files-resolvers-mongodb\"\n      downloadFile:\n        memory: 512\n        timeout: 10\n      imageTransformer:\n        memory: 1600\n        timeout: 30\n\ni18n:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: \"I18N\"\n    region: ${vars.region}\n    memory: 512\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-i18n/plugins\"\n\npageBuilder:\n  component: \"@webiny/serverless-page-builder\"\n  inputs:\n    name: \"Page Builder\"\n    region: ${vars.region}\n    files: ${files}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-page-builder/plugins\"\n      - \"@webiny/api-plugin-page-builder-resolvers-mongodb\"\n      - \"@webiny/api-google-tag-manager\"\n      - \"@webiny/api-mailchimp\"\n      - \"@webiny/api-cookie-policy\"\n\nformBuilder:\n  component: \"@webiny/serverless-form-builder\"\n  inputs:\n    name: \"Form Builder\"\n    region: ${vars.region}\n    files: ${files}\n    i18n: ${i18n}\n    memory: 512\n    timeout: 30\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-plugin-form-builder-resolvers-mongodb\"\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: \"API Gateway\"\n    region: ${vars.region}\n    description: \"Main API Gateway\"\n    endpoints:\n      - path: /graphql\n        method: ANY\n        function: ${gateway}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    origins:\n      - ${files.cdnOrigin}\n      - url: ${api.url}\n        pathPatterns:\n          \"/graphql\":\n            ttl: 0\n            forward:\n              headers: [\"Accept\", \"Accept-Language\"]\n            allowedHttpMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"POST\", \"PATCH\", \"DELETE\"]\n","name: webiny-cms-project\n\nvars:\n  region: ${env.AWS_REGION}\n  bucket: ${env.S3_BUCKET}\n  apollo:\n    server:\n      introspection: ${env.GRAPHQL_INTROSPECTION}\n      playground: ${env.GRAPHQL_PLAYGROUND}\n  commodo:\n    database:\n      server: ${env.MONGODB_SERVER}\n      name: ${env.MONGODB_NAME}\n  security:\n    token:\n      expiresIn: 2592000 # 30 days\n      secret: ${env.JWT_SECRET}\n\ngateway:\n  component: \"@webiny/serverless-apollo-gateway\"\n  inputs:\n    name: Apollo Gateway\n    region: ${vars.region}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-gateway\"\n        options:\n          server: ${vars.apollo.server}\n          services:\n            - name: security\n              url: ${security.api.graphqlUrl}\n            - name: files\n              url: ${files.api.graphqlUrl}\n            - name: pageBuilder\n              url: ${pageBuilder.api.graphqlUrl}\n            - name: i18n\n              url: ${i18n.api.graphqlUrl}\n            - name: formBuilder\n              url: ${formBuilder.api.graphqlUrl}\n\ncognito:\n  component: \"@webiny/serverless-aws-cognito-user-pool\"\n  inputs:\n    name: WebinyPool\n    region: ${vars.region}\n    appClients:\n      - name: ReactApp\n\nsecurity:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: Security\n    region: ${vars.region}\n    memory: 512\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins\"\n        options: ${vars.security}\n      - factory: \"@webiny/api-plugin-security-cognito\"\n        options:\n          region: ${vars.region}\n          userPoolId: ${cognito.userPool.Id}\n\nfiles:\n  component: \"@webiny/serverless-files/dist\"\n  inputs:\n    region: ${vars.region}\n    bucket: ${vars.bucket}\n    functions:\n      apolloService:\n        memory: 512\n        timeout: 10\n        uploadMinFileSize: 0 # 0 MB\n        uploadMaxFileSize: 26214400 # 25 MB\n        webpackConfig: ./webpack.config.js\n        plugins:\n          - factory: \"@webiny/api-plugin-create-apollo-handler\"\n            options: ${vars.apollo}\n          - factory: \"@webiny/api-plugin-commodo-mongodb\"\n            options: ${vars.commodo}\n          - factory: \"@webiny/api-security/plugins/service\"\n            options: ${vars.security}\n          - \"@webiny/api-files/plugins\"\n          - \"@webiny/api-plugin-files-resolvers-mongodb\"\n      downloadFile:\n        memory: 512\n        timeout: 10\n      imageTransformer:\n        memory: 1600\n        timeout: 30\n\ni18n:\n  component: \"@webiny/serverless-apollo-service\"\n  inputs:\n    name: I18N\n    region: ${vars.region}\n    memory: 512\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-i18n/plugins\"\n\npageBuilder:\n  component: \"@webiny/serverless-page-builder\"\n  inputs:\n    name: Page Builder\n    region: ${vars.region}\n    files: ${files}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-page-builder/plugins\"\n      - \"@webiny/api-plugin-page-builder-resolvers-mongodb\"\n      - \"@webiny/api-google-tag-manager\"\n      - \"@webiny/api-mailchimp\"\n      - \"@webiny/api-cookie-policy\"\n\nformBuilder:\n  component: \"@webiny/serverless-form-builder\"\n  inputs:\n    name: Form Builder\n    region: ${vars.region}\n    files: ${files}\n    i18n: ${i18n}\n    memory: 512\n    timeout: 30\n    webpackConfig: ./webpack.config.js\n    plugins:\n      - factory: \"@webiny/api-plugin-create-apollo-handler\"\n        options: ${vars.apollo}\n      - factory: \"@webiny/api-plugin-commodo-mongodb\"\n        options: ${vars.commodo}\n      - factory: \"@webiny/api-security/plugins/service\"\n        options: ${vars.security}\n      - \"@webiny/api-plugin-form-builder-resolvers-mongodb\"\n\napi:\n  component: \"@webiny/serverless-api-gateway\"\n  inputs:\n    name: \"API Gateway\"\n    region: ${vars.region}\n    description: \"Main API Gateway\"\n    endpoints:\n      - path: /graphql\n        method: ANY\n        function: ${gateway}\n\ncdn:\n  component: \"@webiny/serverless-aws-cloudfront\"\n  inputs:\n    comment: pavel910-webiny-js-api\n    origins:\n      - ${files.cdnOrigin}\n      - url: ${api.url}\n        pathPatterns:\n          \"/graphql\":\n            ttl: 0\n            forward:\n              headers: [\"Accept\", \"Accept-Language\"]\n            allowedHttpMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"POST\", \"PATCH\", \"DELETE\"]\n"]},{"id":55159824,"files":["service: MoonMail-v2-lists\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-aws-documentation\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${self:custom.config.REGION}\n  timeout: 300\n  environment:\n    SERVERLESS_REGION: ${self:custom.config.REGION}\n    LOG_LEVEL: ${self:custom.config.LOG_LEVEL}\n    LISTS_TABLE: ${self:custom.config.LISTS_TABLE}\n    RECIPIENTS_TABLE: ${self:custom.config.RECIPIENTS_TABLE}\n    LIST_SEGMENTS_TABLE: ${self:custom.config.LIST_SEGMENTS_TABLE}\n    ES_HOST: ${self:custom.config.ES_HOST}\n    ES_REGION: ${self:custom.config.ES_REGION}\n    LIST_RECIPIENT_STREAM_NAME: ${self:custom.resourcesPrefix}-listEventStream  \n    LIST_RECIPIENT_STREAM_NAME2: ${self:custom.resourcesPrefix}-listEventStream2 \n    IOT_ENDPOINT: ${file(./config.${self:custom.currentStage}.json):IOT_ENDPOINT}\n    GET_USER_CONTEXT_FUNCTION: ${file(./config.${self:custom.currentStage}.json):GET_USER_CONTEXT_FUNCTION}\n    ES_RECIPIENTS_INDEX_NAME: ${file(./config.${self:custom.currentStage}.json):ES_RECIPIENTS_INDEX_NAME}\n    ES_RECIPIENTS_INDEX_TYPE: ${file(./config.${self:custom.currentStage}.json):ES_RECIPIENTS_INDEX_TYPE}\n    DEAD_LETTER_QUEUE_URL:\n      Ref: ListMicroserviceDeadLetterQueue\n    RECIPIENTS_ACTIVITY_S3_BUCKET: ${file(./config.${self:custom.currentStage}.json):RECIPIENTS_ACTIVITY_S3_BUCKET}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n        - \"lambda:*\"\n        - \"kinesis:*\"\n        - \"firehorse:*\"\n        - \"s3:*\"\n        - \"sqs:*\"\n        - \"logs:*\"\n        - \"iot:*\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n        - \"ec2:DeleteNetworkInterface\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  recipientsBucket: next-recipients.moonmail.${self:custom.currentStage}.${self:provider.region}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  recipientsTableStreamArn: ${self:custom.config.RECIPIENTS_TABLE_STREAM_ARN}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  customDomain:\n    domainName: ${self:custom.config.CUSTOM_API_HOST}\n    certificateName: ${self:custom.config.ACM_CERTIFICATE_NAME}\n    basePath: 'lists'\n    stage: prod\n    createRoute53Record: false\n  documentation:\n    api:\n      info:\n        version: '2'\n        title: MoonMail API\n        description: >\n          Welcome to the MoonMail API reference, which lets you easily inject, repair and burn\n          off recipients and metafields from your space.\n\n          The MoonMail API is organized around the REST methodology. It uses resource-oriented\n          URLs, and common HTTP response codes to indicate API errors. All requests are\n          authenticated using an `api-key` which can be obtained from your\n          <a href=\"https://app.moonmail.io/profile/api\" target=\"_blank\">profile</a>.\n        termsOfService: http://support.moonmail.io/terms-and-policies/terms-of-service\n        contact:\n          name: MoonMail\n          url: https://moonmail.io/\n          email: hi@moonmail.io\n      tags:\n        -\n          name: Recipients\n          description: Email recipients\n        -\n          name: Lists\n          description: Email recipients' lists\n    models:\n      -\n        name: Recipient\n        description: Recipient's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - id\n            - listId\n            - userId\n            - email\n            - status\n          properties:\n            id:\n              type: string\n            listId:\n              type: string\n            userId:\n              type: string\n            email:\n              type: string\n            subscriptionOrigin:\n              type: string\n              enum:\n                - signupForm\n                - manual\n                - listImport\n                - api\n            isConfirmed:\n              type: boolean\n            status:\n              type: string\n              enum:\n                - awaitingConfirmation\n                - subscribed\n            metadata:\n              type: object\n      -\n        name: List\n        description: Email list's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - id\n            - userId\n            - name\n          properties:\n            id:\n              type: string\n            userId:\n              type: string\n            name:\n              type: string\n            processed:\n              type: boolean\n            archived:\n              type: boolean\n            total:\n              type: integer\n              minimum: 0\n            subscribedCount:\n              type: integer\n              minimum: 0\n            unsubscribedCount:\n              type: integer\n              minimum: 0\n            awaitingConfirmationCount:\n              type: integer\n              minimum: 0\n            complainedCount:\n              type: integer\n              minimum: 0\n            bouncedCount:\n              type: integer\n              minimum: 0\n            totalPostProcessed:\n              type: integer\n              minimum: 0\n            createdAt:\n              type: integer\n              minimum: 0\n            importStatus:\n              type: object\n            metadataAttributes:\n              type: object\n            senderId:\n              type: string\n            successConfirmationUrl:\n              type: string\n            confirmationEmailBody:\n              type: string\n      -\n        name: RecipientsList\n        description: A list of recipients\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"{{model: Recipient}}\"\n            total:\n              type: integer\n              minimum: 0\n              description: Count of the recipients contained in the list\n      -\n        name: Lists\n        description: A set of recipients' lists\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: \"{{model: List}}\"\n      -\n        name: NewRecipient\n        description: New recipient\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - email\n            - subscriptionOrigin\n            - status\n          properties:\n            email:\n              type: string\n              format: email\n            #subscriptionOrigin:\n            #  enum:\n            #    - signupForm\n            #    - listImport\n            #    - manual\n            #    - api\n            #  type: string\n            status:\n              enum:\n                - subscribed\n                - awaitingConfirmation\n              type: string\n            isConfirmed:\n              type: boolean\n            metadata:\n              type: object\n              properties: {}\n              additionalProperties: true\n      -\n        name: RecipientCreatedResponse\n        description: Create recipient response\n        contentType: \"application/json\"\n        schema:\n          type: object\n          required:\n            - recipient\n          properties:\n            recipient:\n              type: object\n              properties:\n                id:\n                  type: string\n      -\n        name: CreateRecipientRequest\n        description: Recipient's model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            recipient:\n              $ref: \"{{model: NewRecipient}}\"\n      -\n        name: UpdateRecipientRequest\n        description: Recipient updates model\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            status:\n              enum:\n                - subscribed\n                - awaitingConfirmation\n                - unsubscribed\n              type: string\n            isConfirmed:\n              type: boolean\n            metadata:\n              type: object\n              properties: {}\n              additionalProperties: true\n          additionalProperties: false\n      -\n        name: EmptyResponse\n        description: Empty response\n        contentType: \"application/json\"\n        schema:\n          type: object\n      - name: RecipientMalformed\n        description: Malformed recipient error\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n            message:\n              type: string\n\npackage:\n  individually: true\n\nfunctions:\n  # Event handlers\n  eventStreamProcessorHandler:\n    handler: handler.eventStreamProcessor\n    name: ${self:custom.resourcesPrefix}-eventStreamProcessor\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt:\n              - ListEventStream\n              - Arn\n  eventStreamProcessorHandler2:\n    handler: handler.eventStreamProcessor\n    name: ${self:custom.resourcesPrefix}-eventStreamProcessor2\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          arn:\n            Fn::GetAtt:\n              - ListEventStream2\n              - Arn\n\n  # recipientCreatedEventHandler:\n  #   handler: handler.recipientCreatedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientCreatedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  # recipientUpdatedEventHandler:\n  #   handler: handler.recipientUpdatedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientUpdatedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  # recipientDeletedEventHandler:\n  #   handler: handler.recipientDeletedProcessor\n  #   name: ${self:custom.resourcesPrefix}-recipientDeletedEventHandler\n  #   events:\n  #     - stream:\n  #         type: kinesis\n  #         batchSize: 100\n  #         startingPosition: TRIM_HORIZON\n  #         arn:\n  #           Fn::GetAtt:\n  #             - ListEventStream\n  #             - Arn\n\n  importRecipients:\n    handler: handler.importRecipientsCsvFromS3\n    name: ${self:custom.resourcesPrefix}-importRecipients\n    events:\n      - s3:\n          bucket: ${self:custom.recipientsBucket}\n          event: s3:ObjectCreated:*\n\n  syncRecipientStreamWithES:\n    handler: handler.syncRecipientStreamWithES\n    name: ${self:custom.resourcesPrefix}-syncRecipientStreamWithES\n    events:\n      - stream:\n          type: dynamodb\n          batchSize: 50\n          startingPosition: TRIM_HORIZON\n          arn: ${self:custom.recipientsTableStreamArn}\n              \n  # Public API\n  createRecipient:\n    handler: handler.createRecipient\n    name: ${self:custom.resourcesPrefix}-createRecipient\n    events:\n      - http:\n          path: /{listId}/recipients\n          method: post\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n          documentation:\n            summary: Creates a recipient\n            tags:\n              - Recipients\n            description: >\n              Creates a recipient within the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n            requestModels:\n              \"application/json\": CreateRecipientRequest\n            requestBody:\n              description: Recipient create request body\n            methodResponses:\n              -\n                statusCode: \"202\"\n                description: \"Request accepted\"\n                responseModels:\n                  \"application/json\": RecipientCreatedResponse\n                responseHeaders:\n                  -\n                    name: Location\n                    description: Path of the newly created recipient\n                    type: string\n              -\n                statusCode: \"422\"\n                description: \"Recipient malformed\"\n                responseModels:\n                  \"application/json\": RecipientMalformed\n\n  updateRecipient:\n    handler: handler.updateRecipient\n    name: ${self:custom.resourcesPrefix}-updateRecipient\n    events:\n      - http:\n          path: /{listId}/recipients/{recipientId}\n          method: put\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n                recipientId: true\n          documentation:\n            summary: Updates a recipient\n            tags:\n              - Recipients\n            description: >\n              Updates the specified recipient. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n              -\n                name: recipientId\n                description: The ID of the recipient\n            requestModels:\n              \"application/json\": UpdateRecipientRequest\n            requestBody:\n              description: Recipient update request body\n            methodResponses:\n              -\n                statusCode: \"202\"\n                description: \"Request accepted\"\n              -\n                statusCode: \"422\"\n                description: \"Recipient malformed\"\n                responseModels:\n                  \"application/json\": RecipientMalformed\n\n  getRecipient:\n    handler: handler.getRecipient\n    name: ${self:custom.resourcesPrefix}-getRecipient\n    events:\n      - http:\n          path: /{listId}/recipients/{recipientId}\n          method: get\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n                recipientId: true\n          documentation:\n            summary: Gets a recipient\n            tags:\n              - Recipients\n            description: >\n              Gets a single recipient of the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n              -\n                name: recipientId\n                description: The ID of the recipient\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": Recipient\n              -\n                statusCode: \"404\"\n                description: \"Recipient not found\"\n\n  searchRecipientsRaw:\n    handler: handler.searchRecipientsRaw\n    name: ${self:custom.resourcesPrefix}-searchRecipientsRaw\n\n  listRecipients:\n    handler: handler.listRecipients\n    name: ${self:custom.resourcesPrefix}-listRecipients\n    events:\n      - http:\n          path: /{listId}/recipients\n          method: get\n          private: true\n          request:\n            parameters:\n              paths:\n                listId: true\n              querystring:\n                limit: true\n                page: true\n                status: true\n                q: true\n          documentation:\n            summary: Gets a list of recipients\n            tags:\n              - Recipients\n            description: >\n              Gets a set recipients of the specified list. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            pathParams:\n              -\n                name: listId\n                description: The ID of the list the recipient belongs to\n                required: true\n            queryParams:\n              -\n                name: page\n                description: \"Page to show (default: 1)\"\n              -\n                name: limit\n                description: \"Amount of results (default: 10; maximum: 100)\"\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": RecipientsList\n\n  getAllLists:\n    handler: handler.getAllLists\n    name: ${self:custom.resourcesPrefix}-getAllLists\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          documentation:\n            summary: Gets all the user's lists\n            tags:\n              - Lists\n            description: >\n              Gets all the recipients' lists of the specified user. You can get the list\n              ID in your <a target=\"_blank\" href=\"https://app.moonmail.io/lists\">MoonMail\n              dashboard</a>, under the Settings tab after selecting your list\n            methodResponses:\n              -\n                statusCode: \"200\"\n                description: \"OK\"\n                responseModels:\n                  \"application/json\": Lists\n  createSegment:\n    handler: handler.createSegment\n    name: ${self:custom.resourcesPrefix}-createSegment\n\n  updateSegment:\n   handler: handler.updateSegment\n   name: ${self:custom.resourcesPrefix}-updateSegment\n\n  deleteSegment:\n    handler: handler.deleteSegment\n    name: ${self:custom.resourcesPrefix}-deleteSegment\n\n  getSegment:\n    handler: handler.getSegment\n    name: ${self:custom.resourcesPrefix}-getSegment\n\n  listSegments:\n    handler: handler.listSegments\n    name: ${self:custom.resourcesPrefix}-listSegments\n\n  listSegmentMembers:\n    handler: handler.listSegmentMembers\n    name: ${self:custom.resourcesPrefix}-listSegmentMembers\n  \nresources:\n  Resources:\n    ListEventStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-listEventStream\n        ShardCount: 1\n    ListEventStream2:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-listEventStream2\n        ShardCount: 1\n    ListMicroserviceDeadLetterQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ListMicroserviceDeadLetterQueue\n        MessageRetentionPeriod: 1209600\n    # FirehoseToS3Role:\n    #   Type: AWS::IAM::Role\n    #   Properties:\n    #     RoleName: FirehoseToS3Role\n    #     AssumeRolePolicyDocument:\n    #       Statement:\n    #       - Effect: Allow\n    #         Principal:\n    #           Service:\n    #           - firehose.amazonaws.com\n    #         Action:\n    #         - sts:AssumeRole\n    #     Policies:\n    #     - PolicyName: FirehoseToS3Policy\n    #       PolicyDocument:\n    #         Statement:\n    #           - Effect: Allow\n    #             Action:\n    #             - s3:AbortMultipartUpload\n    #             - s3:GetBucketLocation\n    #             - s3:GetObject\n    #             - s3:ListBucket\n    #             - s3:ListBucketMultipartUploads\n    #             - s3:PutObject\n    #             Resource: '*'\n    # RecipientActivityBucket:\n    #   Type: AWS::S3::Bucket\n    #   DeletionPolicy: Retain\n    #   Properties:\n    #     BucketName: ${env:RECIPIENTS_ACTIVITY_S3_BUCKET}\n    # ServerlessKinesisFirehose:\n    #   Type: AWS::KinesisFirehose::DeliveryStream\n    #   Properties:\n    #     DeliveryStreamName: ${self:custom.resourcesPrefix}-firehorseRecipientsActivityS3\n    #     S3DestinationConfiguration:\n    #       BucketARN:\n    #         Fn::Join:\n    #         - ''\n    #         - - 'arn:aws:s3:::'\n    #           - Ref: RecipientActivityBucket\n    #       BufferingHints:\n    #         IntervalInSeconds: \"60\"\n    #         SizeInMBs: \"1\"\n    #       CompressionFormat: \"UNCOMPRESSED\"\n    #       Prefix: \"firehorse/\"\n    #       RoleARN: { Fn::GetAtt: [ FirehoseToS3Role, Arn ] }\n  Outputs:\n    ListEventStreamARN:\n      Description: ListEventStream Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - ListEventStream\n          - Arn\n    ListEventStream2ARN:\n      Description: ListEventStream Kinesis Stream 2 ARN\n      Value:\n        'Fn::GetAtt':\n          - ListEventStream2\n          - Arn\n","service: moonmail-screenshots-service\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    SCREENSHOTS_S3_BUCKET: ${file(./config.${self:custom.currentStage}.json):SCREENSHOTS_S3_BUCKET}\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  optimize: \n    includePaths: ['bin/phantomjs', 'bin/screenshot_script.jss']\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\npackage:\n  individually: true\n\nfunctions:\n  takeScreenshot:\n    handler: screenshots.takeScreenshot\n    name: ${self:custom.resourcesPrefix}-takeScreenshot\n\n  takeScreenshotFromHtml:\n    handler: screenshots.takeScreenshotFromHtml\n    name: ${self:custom.resourcesPrefix}-takeScreenshotFromHtml","service: MoonMail-v2-webhooks\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:stage}\n  region: ${self:custom.config.REGION}\n  environment:\n    WEBHOOKTABLENAME: ${self:custom.resourcesPrefix}-${self:custom.webhookTableName}\n    FAILEDREQUESTTABLENAME: ${self:custom.resourcesPrefix}-${self:custom.failedRequestTableName}\n    REQUESTATTEMPTS: ${self:custom.requestAttempts}\n    REQUESTRETRYDELAY: ${self:custom.requestRetryDelay}\n    REQUESTTIMER: ${self:custom.requestTimer}\n    REQUESTTIMERMULTIPLIER: ${self:custom.requestTimerMultiplier}\n    MAXREQUESTATTEMPTS: ${self:custom.maxRequestAttempts}\n    TRIGGERWBFUNCTIONNAME: ${self:custom.resourcesPrefix}-${self:custom.defaultTriggerWebhooksFunctionName}\n    DEBUG: ${self:custom.config.REGION}\n    USERSTABLE: ${self:custom.config.USERTABLE}\n    LISTSTABLE: ${self:custom.config.LISTTABLE}\n    PEMBUCKETNAME: ${self:custom.config.PEMBUCKETNAME}\n    PEMFILENAME: ${self:custom.config.PEMFILENAME}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:*\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n\ncustom:\n  webpackIncludeModules: true\n\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n\n  defaultWebHookTableName: webhooks\n  webhookTableName: ${self:custom.config.WEBHOOKTABLE, self:custom.defaultWebHookTableName}\n\n  defaultPathName: webhooks\n  pathName: ${self:custom.config.PATHNAME, self:custom.defaultPathName}\n\n  defaultFailedRequestTableName: failed-requests\n  failedRequestTableName: ${self:custom.config.FAILEDREQUESTTABLE, self:custom.defaultFailedRequestTableName}\n\n  defaultRequestAttempts: 3\n  requestAttempts: ${self:custom.config.REQUESTATTEMPTS, self:custom.defaultRequestAttempts}\n\n  defaultRequestRetryDelay: 2000\n  requestRetryDelay: ${self:custom.config.REQUESTRETRYDELAY, self:custom.defaultRequestRetryDelay}\n\n  defaultRequestTimer: 60000\n  requestTimer: ${self:custom.config.REQUESTTIMER, self:custom.defaultRequestTimer}\n\n  defaultRequestTimerMultiplier: 2\n  requestTimerMultiplier: ${self:custom.config.REQUESTTIMERMULTIPLIER, self:custom.defaultRequestTimerMultiplier}\n\n  defaultMaxRequestAttempts: 10\n  maxRequestAttempts: ${self:custom.config.MAXREQUESTATTEMPTS, self:custom.defaultMaxRequestAttempts}\n\n  config: ${file(./config.${self:custom.currentStage}.json)}\n\n  defaultTriggerWebhooksFunctionName: triggerWebhooks\n\n  defaultKinesisName: event-stream\n\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\nfunctions:\n  create:\n    handler: handler.create\n    name: ${self:custom.resourcesPrefix}-createWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}\n          method: post\n          cors: true\n  readAll:\n    handler: handler.readAll\n    name: ${self:custom.resourcesPrefix}-readAllWebhooks\n    events:\n      - http:\n          path: ${self:custom.pathName}\n          method: get\n          cors: true\n  readOne:\n    handler: handler.readOne\n    name: ${self:custom.resourcesPrefix}-readOneWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    name: ${self:custom.resourcesPrefix}-updateWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    name: ${self:custom.resourcesPrefix}-deleteWebhook\n    events:\n      - http:\n          path: ${self:custom.pathName}/{id}\n          method: delete\n          cors: true\n  handleWebhookEvents:\n    handler: src/handlerWebhookEvents.handlerWebhookEvents\n    name: ${self:custom.resourcesPrefix}-handleWebhookEvents\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - EventStream\n              - Arn\n          enabled: true\n  sniffFailedRequests:\n    handler: src/snifferFailedRequests.sniffFailedWebhookRequests\n    name: ${self:custom.resourcesPrefix}-sniffFailedRequests\n    events:\n      - schedule: rate(1 minute)\n  triggerWebhooks:\n    handler: src/triggerWebhooks.triggerWebbhook\n    name: ${self:custom.resourcesPrefix}-${self:custom.defaultTriggerWebhooksFunctionName}\n\nresources:\n  Resources:\n    WebhooksDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n          -\n            AttributeName: wb\n            AttributeType: S\n          -\n            AttributeName: userId\n            AttributeType: S\n          -\n            AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes: \n        - IndexName: wb-index\n          KeySchema: \n          - AttributeName: wb\n            KeyType: HASH\n          - AttributeName: createdAt\n            KeyType: RANGE\n          Projection: \n            ProjectionType: \"ALL\"\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1  \n        - IndexName: userId-index\n          KeySchema: \n          - AttributeName: userId\n            KeyType: HASH\n          Projection: \n            ProjectionType: \"ALL\"\n          ProvisionedThroughput: \n            ReadCapacityUnits: 1\n            WriteCapacityUnits: 1\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.resourcesPrefix}-${self:custom.webhookTableName}\n    FailedRequestsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.resourcesPrefix}-${self:custom.failedRequestTableName}\n    EventStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-${self:custom.defaultKinesisName}\n        ShardCount: 1\n","service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n","service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n","service: MoonMail-v2-campaigns\n\nplugins:\n  - serverless-plugin-optimize\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:custom.config.PROFILE}\n  region: ${self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n    REPORTS_TABLE: ${self:custom.config.REPORTS_TABLE}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n\nfunctions:\n  processSesNotification:\n    handler: handler.processEmailNotifications\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 25\n          arn:\n            Fn::GetAtt:\n              - ReportsStream\n              - Arn\n\nresources:\n  Resources:\n    ReportsStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-ReportsStream\n        RetentionPeriodHours: 168\n        ShardCount: ${self:custom.config.KINESIS_SHARDS}\n","service: MoonMail-v2-events-router\n\nplugins:\n  - serverless-plugin-optimize\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  recipientsBucket: next-recipients.moonmail.${self:custom.currentStage}.${self:provider.region}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  ssmPath: /moonmail/events-router/${self:custom.currentStage}\n  defaultShardCount: 1\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${opt:profile, \"\"}\n  region: ${opt:region}\n  timeout: 300\n  environment:\n    REGION: ${self:provider.region}\n    DEAD_LETTER_QUEUE_URL:\n      Ref: EventsDeadLetterQueue\n    EVENT_SUBSCRIPTIONS: ${ssm:${self:custom.ssmPath}/event-subscriptions}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:*\"\n        - \"kinesis:*\"\n        - \"logs:*\"\n        - \"sqs:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  routeEvents:\n    handler: handler.routeEvents\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - EventsIngestionStream\n              - Arn\n\nresources:\n  Resources:\n    EventsIngestionStream:\n      Type: \"AWS::Kinesis::Stream\"\n      Properties:\n        Name: ${self:custom.resourcesPrefix}-EventsIngestionStream\n        RetentionPeriodHours: 168\n        ShardCount: ${self:custom.config.KINESIS_SHARDS, self:custom.defaultShardCount}\n    EventsDeadLetterQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: EventsDeadLetterQueue\n  Outputs:\n    EventsIngestionStreamName:\n      Value:\n        Ref: EventsIngestionStream\n      Export:\n        Name: EventsRouterStreamName-${self:custom.currentStage}\n","service: moonmail-extensions\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${file(./config.${self:custom.currentStage}.json):PROFILE}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    USERS_TABLE: ${file(./config.${self:custom.currentStage}.json):USERS_TABLE}\n    STRIPE_API_KEY: ${file(./config.${self:custom.currentStage}.json):STRIPE_API_KEY}\n    STRIPE_FILE_ATTACHMENT_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_FILE_ATTACHMENT_PLAN}\n    STRIPE_IP_ADDRESS_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_IP_ADDRESS_PLAN}\n    STRIPE_DOWNLOAD_CLEAN_LIST_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_DOWNLOAD_CLEAN_LIST_PLAN}\n    STRIPE_RSS_TO_EMAIL_PLAN: ${file(./config.${self:custom.currentStage}.json):STRIPE_RSS_TO_EMAIL_PLAN}\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${opt:stage}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\npackage:\n  individually: true\n\nfunctions:\n  installExtension:\n    handler: handler.installExtension\n    name: ${self:custom.resourcesPrefix}-installExtension\n  uninstallExtension:\n    handler: handler.uninstallExtension\n    name: ${self:custom.resourcesPrefix}-uninstallExtension\n","service: MoonMail-v2-template-marketplace\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:service}-${self:custom.currentStage}\n  region: ${file(./config.${self:custom.currentStage}.json):REGION}\n  timeout: 300\n  environment:\n    LOG_LEVEL: ${file(./config.${self:custom.currentStage}.json):LOG_LEVEL}\n    TEMPLATES_TABLE: ${self:custom.templatesTable}\n    ES_HOST: ${file(./config.${self:custom.currentStage}.json):ES_HOST}\n    ES_REGION: ${file(./config.${self:custom.currentStage}.json):ES_REGION}\n    ES_TEMPLATES_MARKETPLACE_INDEX_NAME: mm_${self:custom.currentStage}_template_marketplace_index\n    ES_TEMPLATES_MARKETPLACE_INDEX_TYPE: templates\n    SCREENSHOT_SERVICE_FUNCTION_NAME: moonmail-screenshots-service-${self:custom.currentStage}-takeScreenshotFromHtml\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n        - \"lambda:*\"\n        - \"logs:*\"\n        - \"ec2:CreateNetworkInterface\"\n        - \"ec2:DescribeNetworkInterfaces\"\n        - \"ec2:DeleteNetworkInterface\"\n      Resource: \"*\"\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  templatesTable: ${self:service}-${self:custom.currentStage}-templates\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  \n\npackage:\n  individually: true\n\nfunctions:\n  createTemplate:\n    handler: templates.createTemplate\n    name: ${self:custom.resourcesPrefix}-createTemplate\n\n  updateTemplate:\n    handler: templates.updateTemplate\n    name: ${self:custom.resourcesPrefix}-updateTemplate\n\n  getTemplate:\n    handler: templates.getTemplate\n    name: ${self:custom.resourcesPrefix}-getTemplate\n\n  listTemplates:\n    handler: templates.listTemplates\n    name: ${self:custom.resourcesPrefix}-listTemplates\n\n  syncTemplatesWithES:\n    handler: templates.syncTemplatesWithES\n    name: ${self:custom.resourcesPrefix}-syncTemplatesWithES\n    events:\n      - stream:\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: true\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - templatesTable\n              - StreamArn\n\n  getAllTags:\n    handler: templates.getAllTags\n    name: ${self:custom.resourcesPrefix}-getAllTags\n\nresources:\n  Resources:\n    templatesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName:  ${self:custom.templatesTable}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5","service: MoonMail-v2-emails\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  ssmPath: /moonmail/emails-microservice/${self:custom.currentStage}\n  legacyEmailNotificationsTopicArn: ${ssm:${self:custom.ssmPath}/legacy-notifications-topic-arn}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  emailNotificationsTopicName: ${self:custom.resourcesPrefix}-EmailNotificationsTopic\n  emailNotificationsTopicArn:\n    Fn::Join:\n      - \":\"\n      - - arn:aws:sns\n        - Ref: AWS::Region\n        - Ref: AWS::AccountId\n        - ${self:custom.emailNotificationsTopicName}\n  emailEventTopicName: ${self:custom.resourcesPrefix}-EmailEvent\n  emailEventTopicArn:\n    Fn::Join:\n      - \":\"\n      - - arn:aws:sns\n        - Ref: AWS::Region\n        - Ref: AWS::AccountId\n        - ${self:custom.emailEventTopicName}\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile}\n  region: ${opt:region}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n    EVENTS_ROUTER_STREAM_NAME:\n      Fn::ImportValue: EventsRouterStreamName-${self:custom.currentStage}\n    CLICKS_TABLE: ${self:custom.config.CLICKS_TABLE}\n    OPENS_TABLE: ${self:custom.config.OPENS_TABLE}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:putRecord\"\n        - \"dynamodb:*\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource: ${self:custom.emailEventTopicArn}\n\npackage:\n  individually: true\n\nfunctions:\n  processSesNotification:\n    handler: handler.processSesNotification\n    events:\n      - sns:\n          arn: ${self:custom.emailNotificationsTopicArn}\n          topicName: ${self:custom.emailNotificationsTopicName}\n      - sns:\n          arn: ${self:custom.legacyEmailNotificationsTopicArn}\n          topicName: LegacyEmailNotifications\n  processLinkClick:\n    handler: handler.processLinkClick\n    events:\n      - http:\n          path: /links/click/{campaignId}/{linkId}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                campaignId: true\n                linkId: true\n    environment:\n      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}\n      ENCRYPTION_PWD: ${self:custom.config.ENCRYPTION_PWD}\n  processEmailOpen:\n    handler: handler.processEmailOpen\n    events:\n      - http:\n          path: /links/open/{campaignId}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                campaignId: true\n    environment:\n      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}\n  persistEmailEvent:\n    handler: handler.persistEmailEvent\n    events:\n      - sns:\n          topicName: ${self:custom.emailEventTopicName}\n          displayName: Notifies link clicks\n\n\nresources:\n  Resources:\n    EmailNotificationsTopic:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: ${self:custom.emailNotificationsTopicName}\n    EmailNotificationsTopicPolicy:\n      Type: \"AWS::SNS::TopicPolicy\"\n      Properties:\n        PolicyDocument:\n          Statement:\n            -\n              Effect: Allow\n              Principal:\n                AWS: \"*\"\n              Action: \"SNS:Publish\"\n              Resource:\n                Ref: EmailNotificationsTopic\n        Topics:\n          -\n            Ref: EmailNotificationsTopic\n"]},{"id":65856000,"files":["service: babel-multiple-static-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  # Individual packaging MUST NOT be enabled as we use static entry definitions!\n  # package:\n  #   individually: true\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n          integration: lambda\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n          integration: lambda\n","service: babel-webpack-4-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: test\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    # If you use Yarn instead of NPM in your environment, uncomment the following line.\n    # packager: yarn\n\npackage:\n  individually: true\n\nfunctions:\n  first:\n    handler: handlers/first.hello\n    events:\n      - http:\n          method: get\n          path: first\n  second:\n    handler: handlers/second.hello\n    events:\n      - http:\n          method: get\n          path: second\n","service: serverless-webpack-multiple-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  webpackIncludeModules: true # enable auto including modules\n  # You also can forcefully include or exclude modules by defining it this way.\n  # Be aware that this only should be done for packages that webpack does not\n  # correctly detect as dependencies.\n  #\n  # webpackIncludeModules:\n  #   forceInclude:\n  #     - myModule1\n  #   forceExclude:\n  #     - myModule2\n  #\n  # This can be used to exclude aws-sdk even if it is present in the production dependencies\n\nfunctions:\n  first:\n    handler: handler.hello\n    events:\n      - http:\n          method: GET\n          path: first\n          integration: lambda\n","service: multiple-statically-entries-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: GET\n          path: first\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: GET\n          path: second\n          integration: lambda\n","service: serverless-webpack-offline-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  webpackIncludeModules: true\n\nfunctions:\n  first:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: GET\n          path: first\n","service: babel-example\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  first:\n    handler: first.hello\n    events:\n      - http:\n          method: get\n          path: first\n          integration: lambda\n  second:\n    handler: second.hello\n    events:\n      - http:\n          method: get\n          path: second\n          integration: lambda\n","service: serverless-webpack-typescript-example\npackage:\n  individually: true\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda\n  goodbye:\n    handler: src/handler2.goodbye\n    events:\n      - http:\n          method: get\n          path: goodbye\n          integration: lambda\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":76508594,"files":["service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    zip: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    slim: false\n    dockerizePip: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    usePoetry: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    dockerizePip: false\n    pythonBin: ${opt:pythonBin, self:provider.runtime}\n\npackage:\n  individually: false\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    # call `pip install` inside a container - useful for packages that have native dependencies (scipy et-al)\n    dockerizePip: true\n\n    # aws lambda has an after-extraction size limit - with native dependencies we pass the limit quickly\n    # zip the requirements and extract them on the fly (see handler.py)\n    zip: true\n\npackage:\n  # exclude everything...\n  exclude:\n    - '**/*'\n\n  # include - we have to explicitly list packages with native dependencies.\n  include:\n    - '*.py'\n    - 'numpy'\n    - 'scipy'\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    zip: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    slim: false\n    dockerizePip: false\n\npackage:\n  exclude:\n    - '**/*'\n  include:\n    - handler.py\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: sls-py-req-test-indiv\n\nprovider:\n  name: aws\n  runtime: python3.6\n\npackage:\n  individually: true\n  exclude: 'node_modules/**'\ncustom:\n  pythonRequirements:\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n  defaults:\n    dockerizePip: false\n\nfunctions:\n  hello1:\n    handler: handler1.hello\n    module: module1\n  hello2:\n    handler: handler2.hello\n    module: module2\n\nplugins:\n  - serverless-python-requirements\n","service: sls-py-req-test\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime, 'python3.6'}\n\nplugins:\n  - serverless-python-requirements\ncustom:\n  pythonRequirements:\n    zip: ${opt:zip, self:custom.defaults.zip}\n    dockerizePip: ${opt:dockerizePip, self:custom.defaults.dockerizePip}\n    slim: ${opt:slim, self:custom.defaults.slim}\n    slimPatterns: ${file(./slimPatterns.yml):slimPatterns, self:custom.defaults.slimPatterns}\n    slimPatternsAppendDefaults: ${opt:slimPatternsAppendDefaults, self:custom.defaults.slimPatternsAppendDefaults}\n    vendor: ${opt:vendor, ''}\n    fileName: ${opt:fileName, 'requirements.txt'}\n    useStaticCache: ${opt:useStaticCache, self:custom.defaults.useStaticCache}\n    useDownloadCache: ${opt:useDownloadCache, self:custom.defaults.useDownloadCache}\n    cacheLocation: ${opt:cacheLocation, ''}\n  defaults:\n    slim: false\n    slimPatterns: false\n    slimPatternsAppendDefaults: true\n    zip: false\n    dockerizePip: false\n    individually: false\n    useStaticCache: true\n    useDownloadCache: true\n\npackage:\n  individually: ${opt:individually, self:custom.defaults.individually}\n  exclude:\n    - '**/*'\n  include:\n    - 'handler.py'\n\nfunctions:\n  hello:\n    handler: handler.hello\n  hello2:\n    handler: handler.hello\n  hello3:\n    handler: handler.hello\n    runtime: nodejs6.10\n  hello4:\n    handler: fn2_handler.hello\n    module: fn2\n    package:\n      include:\n        - 'fn2/**'\n\n\n"]},{"id":86108846,"files":["# NOTE: update this with your service name\nservice: serverless-nodejs-starter\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to .env and uncomment\n  # the following line. Also, make sure to not\n  # commit your .env.\n  #\n  #environment:\n  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n"]},{"id":103012131,"files":["service: puppeteer-lambda-starter-kit\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n  # if needed (e.g. upload snapshot)\n  # iamRoleStatements:\n  #  -  Effect: \"Allow\"\n  #     Action:\n  #       - \"s3:PutObject\"\n  #     Resource: \"arn:aws:s3:::<bucket name>/*\"  \n\nfunctions:\n  test-function:\n    handler: index.handler\n    environment:\n      DEBUG: 0\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":54150474,"files":["frameworkVersion: \">=1.30.3 <2.0.0\"\n\nservice: serverless-authentication # change this\n\nprovider:\n  name: aws\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - dynamodb:Scan\n      - dynamodb:Query\n      - dynamodb:PutItem\n      - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n    - Effect: Allow\n      Action:\n      - cognito-sync:*\n      - cognito-identity:*\n      Resource: arn:aws:cognito-identity:*:*:*\n    - Effect: Allow\n      Action:\n      - cognito-idp:*\n      Resource: arn:aws:cognito-idp:*:*:*\n  runtime: nodejs8.10\n\npackage:\n  exclude:\n    - .git/**\n\n# Functions\n\nfunctions:\n  signin:\n    handler: handler.signin\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/signin/{provider}\n          method: get\n          integration: lambda-proxy\n  callback:\n    handler: handler.callback\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/callback/{provider}\n          method: get\n          integration: lambda-proxy\n  refresh:\n    handler: handler.refresh\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: authentication/refresh/{refresh_token}\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: |\n                {\n                  \"refresh_token\":\"$input.params('refresh_token')\",\n                  \"id\":\"$input.params('id')\",\n                  \"state\":\"$input.params('state')\",\n                  \"host\":\"$input.params().header.get('host')\",\n                  \"stage\":\"$context.stage\"\n                }\n  authorize:\n    handler: handler.authorize\n\nplugins:\n  - deployment-info\n\nresources:\n  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template\n  # Condition is used to switch API Gateway custom domain creation\n  Conditions:\n    CreateCustomDomain:\n      Fn::Not:\n        - Fn::Equals:\n          - ${self:provider.environment.REDIRECT_DOMAIN_NAME, \"\"}\n          - \"\"\n  Resources:\n    AuthorizationFunctionArnParameter:\n      Type: AWS::SSM::Parameter\n      Properties:\n        Name: \"/authentication/${self:provider.environment.STAGE}/authorization-function-arn\"\n        Type: \"String\"\n        Value:\n          Fn::GetAtt:\n            - AuthorizeLambdaFunction\n            - Arn\n        Description: \"SSM Parameter for Authorization function arn\"\n    CacheTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: token\n          AttributeType: S\n        - AttributeName: type\n          AttributeType: S\n        KeySchema:\n        - AttributeName: token\n          KeyType: HASH\n        - AttributeName: type\n          KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.CACHE_DB_NAME}\n\n    # UsersTable:\n    #   Type: AWS::DynamoDB::Table\n    #   Properties:\n    #     SSESpecification:\n    #       SSEEnabled: true\n    #     AttributeDefinitions:\n    #     - AttributeName: userId\n    #       AttributeType: S\n    #     KeySchema:\n    #     - AttributeName: userId\n    #       KeyType: HASH\n    #     ProvisionedThroughput:\n    #       ReadCapacityUnits: 1\n    #       WriteCapacityUnits: 1\n    #     TableName: ${self:provider.environment.USERS_DB_NAME}\n\n# API Gateway Custom domain is created if \"REDIRECT_DOMAIN_NAME\" is defined in the env.yml\n    RedirectDomainName:\n      Type: AWS::ApiGateway::DomainName\n      Condition: CreateCustomDomain\n      Properties:\n        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n        CertificateArn: ${self:provider.environment.REDIRECT_CERTIFICATE_ARN}\n    RedirectBasePathMapping:\n      Type: AWS::ApiGateway::BasePathMapping\n      Condition: CreateCustomDomain\n      DependsOn: RedirectDomainName\n      Properties:\n        Stage: ${self:provider.environment.STAGE}\n        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n        RestApiId:\n          Ref: ApiGatewayRestApi\n    RedirectRecordSetGroup:\n      Type: AWS::Route53::RecordSetGroup\n      Condition: CreateCustomDomain\n      Properties:\n        HostedZoneId: ${self:provider.environment.REDIRECT_HOSTED_ZONE_ID}\n        RecordSets:\n        - Name: ${self:provider.environment.REDIRECT_DOMAIN_NAME}\n          Type: A\n          AliasTarget:\n            HostedZoneId: Z2FDTNDATAQYW2 # don't change -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid\n            DNSName:\n              Fn::GetAtt:\n                - RedirectDomainName\n                - DistributionDomainName\n","service: serverless-authentication-test-token # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n  runtime: nodejs8.10\n\nfunctions:\n  testToken:\n    handler: handler.test\n    events:\n      - http:\n          path: test-token\n          method: get\n          cors:\n            origins:\n              - '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n          authorizer:\n            arn: ${ssm:/authentication/${opt:stage, self:provider.stage}/authorization-function-arn}\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: .*\n","name: placeholder-for-install\n"]},{"id":171566590,"files":["service: basic-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    routes:\n      - src: post\n        path: post/{slug}\n        request:\n          parameters:\n            paths:\n              slug: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","nextApp:\n  component: \"../../\"\n","service: basic-next-serverless-app\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    routes:\n      - src: post\n        path: post/{slug}\n        request:\n          parameters:\n            paths:\n              slug: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: app-using-cloudfront\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: prod\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n  - serverless-offline\n\ncustom:\n  serverless-nextjs:\n    assetsBucketName: cloudfront.example # replace with your own name\n    cloudFront: true\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: app-with-custom-handler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - serverless-nextjs-plugin\n\ncustom:\n  serverless-nextjs:\n    customHandler: ./my-lambda-handler.js\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","myNextApp:\n component: \"../../\"\n inputs:\n  domain:\n    - ${env.subdomain}\n    - ${env.domain}","service: automatic-static-optimised-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: nested-next-config-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\ncustom:\n  serverless-nextjs:\n    nextConfigDir: ./app\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: nested-page-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: one-page-app-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\ncustom:\n  serverless-nextjs:\n    assetsBucketName: onepageappbucket\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n","service: single-api-fixture\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nstage: dev\nregion: eu-west-1\n\nplugins:\n  - index\n\npackage:\n  # exclude everything\n  # page handlers are automatically included by the plugin\n  exclude:\n    - ./**\n"]},{"id":76302910,"files":["# 'service' is the name of the service\nservice: ${self:custom.repoName}-status-board\n\n# 'custom' is a place to define custom variables used elsewhere in the yaml config\ncustom:\n  repoName: ADD_YOUR_REPO_NAME_HERE\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n  openItemsTable: ${self:custom.repoName}-${self:custom.currentStage}-open-items\n  closedItemsTable: ${self:custom.repoName}-${self:custom.currentStage}-closed-items\n\n\n# 'provider' specifies where to deploy the service. Aka deploy to 'aws'\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # ${self:custom.currentRegion} references the 'custom' field in this file\n  # it grabs the 'currentRegion' key and places it in the 'region' key defined below\n  region: ${self:custom.currentRegion}\n  stage: ${self:custom.currentStage}\n  # 'environment' is where you define any process.env environment variables needed in code\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${file(./config.${self:custom.currentStage}.json):GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_TOKEN: ${file(./config.${self:custom.currentStage}.json):GITHUB_API_TOKEN}\n    GITHUB_USERNAME: ${file(./config.${self:custom.currentStage}.json):GITHUB_USERNAME}\n    REPO: ${file(./config.${self:custom.currentStage}.json):REPO}\n    OPEN_ITEMS_TABLE: ${self:custom.openItemsTable}\n    CLOSED_ITEMS_TABLE: ${self:custom.closedItemsTable}\n    DEBUG: false\n  # Set IAM permissions for the functions\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n      - dynamodb:BatchWriteItem\n    # Allow function to access only this database\n    Resource: [\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.openItemsTable}\",\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.closedItemsTable}\"\n      ]\n\n# 'functions' references all the functions and events in the service\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n  getOpenIssues:\n    handler: handler.getOpenIssues\n    events:\n      - http:\n          path: open\n          method: get\n          cors: true\n  getClosedIssues:\n    handler: handler.getClosedIssues\n    events:\n      - http:\n          path: closed\n          method: get\n          cors: true\n  setup:\n    handler: handler.setup\n    timeout: 40\n  teardown:\n    handler: handler.tearDown\n    timeout: 20\n\n# 'resources' defines any infrastructure needed for the service aka a database\nresources:\n  Resources:\n    OpenIssues:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.openItemsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    ClosedIssues:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.closedItemsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n"]},{"id":133681780,"files":["service: DownloadThisVideo\nplugins:\n- serverless-dotenv-plugin\n- serverless-plugin-aws-alerts\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: beta\n  memorySize: 128\n  timeout: 100\n  logRetentionInDays: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource:\n        - \"Fn::Join\":\n          - ':'\n          - - \"arn:aws:sns:us-east-1\"\n            - Ref: AWS::AccountId\n            - \"newMention\"\n    - Effect: Allow\n      Action:\n        - cloudwatch:PutMetricData\n      Resource:\n        - \"*\"\n\n  environment:\n    TWITTER_CONSUMER_KEY: ${env:TWITTER_CONSUMER_KEY}\n    TWITTER_CONSUMER_SECRET: ${env:TWITTER_CONSUMER_SECRET}\n    TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}\n    TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}\n    TWITTER_CALLBACK_URL: ${env:TWITTER_CALLBACK_URL}\n    REDIS_HOSTNAME: ${env:REDIS_HOSTNAME}\n    REDIS_PORT: ${env:REDIS_PORT}\n    REDIS_PASSWORD: ${env:REDIS_PASSWORD}\n    TWITTER_SCREEN_NAME: ${env:TWITTER_SCREEN_NAME}\n    EXTERNAL_URL: ${env:EXTERNAL_URL}\n    FIREBASE_PROJECT_ID: ${env:FIREBASE_PROJECT_ID}\n    TOPIC_ARN:\n      \"Fn::Join\":\n      - ':'\n      -\n        - \"arn:aws:sns:us-east-1\"\n        - Ref: AWS::AccountId\n        - \"newMention\"\n\npackage:\n  include:\n  - views/**\n  exclude:\n  - \"*.md\"\n  - \"*.png\"\n  - \"*.ico\"\n  - .*\n  - .*/**\n  - awscli-bundle.zip\n  - awscli-bundle/**\n  - spec/**\n  - assets/*.png\n\nfunctions:\n  fetchTweetsToDownload:\n    handler: handler.fetchTweetsToDownload\n    events:\n    - schedule: rate(1 minute)\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 5000\n\n  retryFailedTasks:\n    handler: handler.retryFailedTasks\n\n  sendDownloadLink:\n    handler: handler.sendDownloadLink\n    events:\n    - sns: newMention\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 5000\n\n  startTwitterSignIn:\n    handler: handler.startTwitterSignIn\n    events:\n      - http:\n          path: /_/starttwittersignin\n          method: get\n\n  completeTwitterSignIn:\n    handler: handler.completeTwitterSignIn\n    events:\n      - http:\n          path: /_/completetwittersignin\n          method: get\n          request:\n            parameters:\n              querystrings:\n                username: true\n                action: false\n                fbtoken: false\n\n  page:\n    handler: handler.page\n    events:\n      - http:\n          path: /p/{page}\n          method: get\n          request:\n            parameters:\n              paths:\n                page: true\n\n  getDownloadsOrStaticFiles:\n    handler: handler.getDownloadsOrStaticFiles\n    events:\n    - http:\n        path: /{username}\n        method: get\n        request:\n          parameters:\n            paths:\n              username: true\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 2000\n\n  getHomePage:\n    handler: handler.getHomePage\n    events:\n    - http:\n        path: /\n        method: get\n    alarms:\n    - functionErrors\n    - name: functionDuration\n      threshold: 1000\n\ncustom:\n  alerts:\n    definitions:\n      functionErrors:\n        # alert if function throws an error\n        threshold: 1\n        period: 60\n        treatMissingData: notBreaching\n      functionDuration:\n        # alert if function takes more than 2 seconds too many times\n        threshold: 2000\n        period: 60\n        datapointsToAlarm: 10\n        evaluationPeriods: 30\n        treatMissingData: notBreaching\n    topics:\n      alarm:\n        topic: ${self:service}-dev-alerts-alarm\n        notifications:\n        - protocol: email\n          endpoint: shalvah.adebayo+awsalerts@gmail.com\n"]},{"id":80246428,"files":["frameworkVersion: '>=1.20.2'\n\nplugins:\n  - environment-variables\n  - remove-storage\n  - serverless-webpack\n  - content-handling\n  - codebox-tools\n  - set-api-host\n\nservice: codebox-npm\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage}\n  region: ${env:CODEBOX_REGION}\n  environment:\n    admins: ${env:CODEBOX_ADMINS}\n    restrictedOrgs: ${env:CODEBOX_RESTRICTED_ORGS}\n    registry: ${env:CODEBOX_REGISTRY}\n    githubUrl: ${env:CODEBOX_GITHUB_URL}\n    githubClientId:  ${env:CODEBOX_GITHUB_CLIENT_ID}\n    githubSecret:  ${env:CODEBOX_GITHUB_SECRET}\n    bucket: ${env:CODEBOX_BUCKET}-${self:provider.stage}\n    region: ${self:provider.region}\n\n    clientId: ${env:CODEBOX_INSIGHTS_CLIENT_ID}\n    secret: ${env:CODEBOX_INSIGHTS_SECRET}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n        - \"sns:Publish\"\n      Resource:\n        - \"arn:aws:s3:::${self:provider.environment.bucket}*\"\n        - \"Fn::Join\":\n          - \"\"\n          - - \"arn:aws:sns:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":${self:service}-${opt:stage}-log\"\n\nfunctions:\n  authorizerGithub:\n    handler: authorizerGithub.default\n\n  put:\n    handler: put.default\n    events:\n      - http:\n          path: 'registry/{name}'\n          method: put\n          authorizer: authorizerGithub\n  get:\n    handler: get.default\n    events:\n      - http:\n          path: 'registry/{name}'\n          method: get\n          authorizer: authorizerGithub\n\n  distTagsGet:\n    handler: distTagsGet.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags'\n          method: get\n          authorizer: authorizerGithub\n  distTagsPut:\n    handler: distTagsPut.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags/{tag}'\n          method: put\n          authorizer: authorizerGithub\n  distTagsDelete:\n    handler: distTagsDelete.default\n    events:\n      - http:\n          path: 'registry/-/package/{name}/dist-tags/{tag}'\n          method: delete\n          authorizer: authorizerGithub\n\n  userPut:\n    handler: userPut.default\n    events:\n      - http:\n          path: 'registry/-/user/{id}'\n          method: put\n\n  userDelete:\n    handler: userDelete.default\n    events:\n      - http:\n          path: 'registry/-/user/token/{token}'\n          method: delete\n          authorizer: authorizerGithub\n\n  whoamiGet:\n    handler: whoamiGet.default\n    events:\n      - http:\n          path: 'registry/-/whoami'\n          method: get\n          authorizer: authorizerGithub\n\n  tarGet:\n    handler: tarGet.default\n    events:\n      - http:\n          integration: lambda\n          authorizer: authorizerGithub\n          path: 'registry/{name}/-/{tar}'\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n          request:\n            template:\n              application/json: >\n                {\n                  \"name\": \"$input.params('name')\",\n                  \"tar\": \"$input.params('tar')\"\n                }\n\nresources:\n  Resources:\n    PackageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: Private\n        BucketName: ${self:provider.environment.bucket}\n    PackageStoragePolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      DependsOn: \"PackageStorage\"\n      Properties:\n        Bucket:\n          Ref: \"PackageStorage\"\n        PolicyDocument:\n          Statement:\n            - Sid: DenyIncorrectEncryptionHeader\n              Effect: Deny\n              Principal: \"*\"\n              Action: \"s3:PutObject\"\n              Resource: \"arn:aws:s3:::${self:provider.environment.bucket}/*\"\n              Condition:\n               StringNotEquals:\n                 \"s3:x-amz-server-side-encryption\": AES256\n            - Sid: DenyUnEncryptedObjectUploads\n              Effect: Deny\n              Principal: \"*\"\n              Action: \"s3:PutObject\"\n              Resource: \"arn:aws:s3:::${self:provider.environment.bucket}/*\"\n              Condition:\n                \"Null\":\n                 \"s3:x-amz-server-side-encryption\": true\n\ncustom:\n  webpackIncludeModules: true\n"]},{"id":73655892,"files":["service: service-test-alerts-plugin\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\npackage:\n  exclude:\n    - node_modules/**\n    - yarn.lock\n\ncustom:\n  notifications:\n    - protocol: email\n      endpoint: ${env:NOTIFICATION_EMAIL}\n\n\n  alerts:\n    stages: # Optionally - select which stages to deploy alarms to\n      - production\n      - staging\n\n    dashboards: true\n\n    topics:\n      ok:\n        topic: ${self:service}-${opt:stage}-alerts-ok\n        notifications: ${self:custom.notifications}\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications: ${self:custom.notifications}\n      insufficientData:\n        topic: ${self:service}-${opt:stage}-alerts-insufficientData\n        notifications: ${self:custom.notifications}\n\n    definitions:  # these defaults are merged with your definitions\n      functionErrors:\n        period: 600\n      functionInvocations:\n        threshold: 10\n        period: 600\n      customAlarm:\n        description: 'My custom alarm'\n        namespace: 'AWS/Lambda'\n        metric: duration\n        threshold: 200\n        statistic: Average\n        period: 300\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n    global:\n      - functionThrottles\n      - functionErrors\n    function:\n      - functionInvocations\n      - functionDuration\n\nplugins:\n  - serverless-plugin-aws-alerts\n\nfunctions:\n  foo:\n    handler: foo.handler\n    alarms: # merged with function alarms\n      - customAlarm\n      - name: fooAlarm\n        namespace: 'AWS/Lambda'\n        metric: errors # define custom metrics here\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n    events:\n      - http:\n          path: success\n          method: get\n\n  error:\n    handler: error.handler\n    alarms:\n      - customAlarm\n      - name: bunyanErrors\n        namespace: 'AWS/Lambda'\n        metric: BunyanErrors\n        threshold: 0\n        statistic: Sum\n        period: 60\n        evaluationPeriods: 1\n        datapointsToAlarm: 1\n        comparisonOperator: GreaterThanThreshold\n        pattern: '{$.level > 40}'\n    events:\n      - http:\n          path: error\n          method: get\n\n  slow:\n    handler: slow.handler\n    alarms:\n      - customAlarm\n    events:\n      - http:\n          path: slow\n          method: get\n"]},{"id":176532971,"files":["name: my-chat-app\nstage: dev\n\nmyChatApp:\n  component: \"@serverless/realtime-app\"\n  inputs:\n    name: my-chat-app\n    description: My Chat App\n    region: us-east-1\n\n    # backend config to be passed to the socket component\n    backend:\n      code: ./backend\n      memory: 512\n      timeout: 10\n      env:\n        dbConnectionsName: ${comp:connectionsTable.name}\n\n    # frontend config to be passed to the website component\n    frontend:\n      code: ./frontend\n      build:\n        dir: ./build\n        command: npm run build\n        envFile: ./src/env.js\n\nconnectionsTable:\n  component: \"@serverless/aws-dynamodb\"\n  inputs:\n    name: ${name}-connections\n    attributeDefinitions:\n      - AttributeName: 'connectionId'\n        AttributeType: 'S'\n    keySchema:\n      - AttributeName: 'connectionId'\n        KeyType: 'HASH'\n    provisionedThroughput:\n      ReadCapacityUnits: 1\n      WriteCapacityUnits: 1\n"]},{"id":230700276,"files":["service: chromda\n\ncustom:\n  s3Bucket: chromda-files\n  snsTopic: chromda\n\nprovider:\n  name: aws\n  region: ${opt:region, 'us-east-1'}\n  versionFunctions: false\n  layers:\n    # Google Chrome for AWS Lambda as a layer\n    # Make sure you use the latest version depending on the region\n    # https://github.com/shelfio/chrome-aws-lambda-layer\n    - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:10\n    # dependencies layer\n    - { Ref: ChromdaLambdaLayer }\n  runtime: nodejs12.x\n  memorySize: 2048\n  timeout: 30\n  tracing:\n    lambda: true\n\nfunctions:\n  captureScreenshot:\n    handler: src/captureScreenshot.handler\n    description: Captures a screenshot of a webpage.\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - xray:PutTraceSegments\n          - xray:PutTelemetryRecords\n        Resource: \"*\"\n      - Effect: Allow\n        Action:\n          - s3:PutObject\n          - s3:PutObjectAcl\n        # If you plan to support multiple buckets via request parameter,\n        # add all possible buckets here\n        Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    environment:\n      S3_REGION: ${self:provider.region}\n      S3_BUCKET: ${self:custom.s3Bucket}\n      # Optional vars\n      CHROMIUM_ARGS: \"[]\"\n      TIMEOUT: \"30000\"\n      IGNORE_HTTPS_ERRORS: \"false\"\n      VIEWPORT_WIDTH: \"1920\"\n      VIEWPORT_HEIGHT: \"1200\"\n      DEVICE_SCALE_FACTOR: \"1\"\n      IS_MOBILE: \"false\"\n      IS_LANDSCAPE: \"false\"\n    events:\n      - sns:\n          arn: !Ref chromdaTopic\n          topicName: ${self:custom.snsTopic}\n      # TODO: add SQS event\n      # TODO: add Scheduled event\n      # TODO: add API Gateway event\n\nlayers:\n  chromda:\n    package:\n      # This file will be created during `npm run deploy`\n      artifact: layer/export/layer.zip\n\npackage:\n  exclude:\n    - layer/**\n    - node_modules/**\n    - package.json\n    - yarn.lock\n\nresources:\n  Resources:\n    # Bucket where the screenshots are stored\n    chromdaBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: Private\n    # Change this if you don't want public read access\n    chromdaBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Action:\n                - s3:GetObject\n              Principal: \"*\"\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n        Bucket:\n          Ref: chromdaBucket\n    chromdaTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: ${self:custom.snsTopic}\n\nplugins:\n  - serverless-webpack\n  - serverless-iam-roles-per-function\n"]},{"id":158269226,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serviceName\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n  timeout: 30\n\n  iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  hello:\n    handler: src/handlers/hello.default\n    events:\n      - http:\n          path: hello/{path+}\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n\n\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 3001\n  dynamodb:\n    start:\n      migrate: true\n      port: 8000\n  webpack:\n    includeModules: true\n"]},{"id":75615428,"files":["service: serverless-aws-documentation-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\n# Remember to reference the plugin\nplugins:\n  - serverless-aws-documentation\n\n# Let's keep this deployment lightweight. Probably not something you should copy\npackage:\n  exclude:\n    - ./**\n  include:\n    - handler.js\n\ncustom:\n  # You must have the documentation object\n  documentation:\n    # this is general info about the API\n    api:\n      info:\n        version: '2'\n        title: Example API\n        description: Some example API\n        termsOfService: https://www.google.com\n        contact:\n          name: The contact person\n          url: https://www.serverless.com/framework\n          email: some-fake@email.com\n        license:\n          name: The license\n          url: https://www.github.com\n      tags:\n        -\n          name: Tag1\n          description: The first tag\n        -\n          name: Tag2\n          description: That other tag that we all love\n    # Now we describe all the models that we use\n    models:\n      -\n        name: MessageResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n      -\n        name: DoSomethingRequest\n        contentType: \"application/json\"\n        schema:\n          type: array\n          items:\n            type: string\n      -\n        name: DoSomethingResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            result:\n              type: string\n            submittedItems:\n              type: number\n      -\n        name: 400JsonResponse\n        contentType: \"application/json\"\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n            statusCode:\n              type: number\n  commonModelSchemaFragments:\n    # defining common fragments means you can reference them with a single line\n    MethodResponse400Json:\n      statusCode: '400'\n      responseModels:\n        \"application/json\": 400JsonResponse\n\nfunctions:\n  theRouter:\n    handler: handler.router\n    events:\n      - http:\n          path: example/message\n          method: get\n          cors: true\n          documentation:\n            summary: Gets a simple message\n            tags:\n              - Tag1\n            description: >\n              Demonstrates a GET method. You can see query string parameters,\n              request headers, response body and response headers.\n            queryParams:\n              -\n                name: firstParam\n                description: The first param that we want, you MUST pass it\n                required: true\n              -\n                name: secondParam\n                description: The second param. This one is optional\n            methodResponses:\n              -\n                statusCode: '200'\n                responseModels:\n                  \"application/json\": MessageResponse\n                responseHeaders:\n                  -\n                    name: link\n                    description: describes other actions that can be taken\n                    type: string\n      - http:\n          path: example/do-something\n          method: post\n          cors: true\n          documentation:\n            summary: Takes a request body\n            tags:\n              - Tag2\n            description: Demonstrates a POST method. We show a request body here and have multiple response models.\n            requestModels:\n               \"application/json\": DoSomethingRequest\n            methodResponses:\n              -\n                statusCode: '200'\n                responseModels:\n                  \"application/json\": DoSomethingResponse\n              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}\n"]},{"id":117262830,"files":["service: canary-deployments-test\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - codedeploy:*\n      Resource:\n        - \"*\"\nplugins:\n  - serverless-plugin-aws-alerts\n  - serverless-plugin-canary-deployments\n\ncustom:\n  alerts:\n    dashboards: false\n  deploymentSettings:\n    stages:\n      - dev\n      - prod\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - StreamsTestTable\n              - StreamArn\n      - sns: snsTopic\n      - sns:\n          topicName: fooTopic\n          displayName: fooTopic\n          filterPolicy:\n            eventType:\n              - FooEvent\n      - schedule:\n          rate: rate(1 minute)\n          enabled: false\n      - cloudwatchLog: \"/aws/lambda/sls-wshop-dev-hello\"\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - MyQueue\n              - Arn\n      - iot:\n          sql: \"SELECT * FROM 'some_topic'\"\n    alarms:\n      - name: foo\n        namespace: 'AWS/Lambda'\n        metric: Errors\n        threshold: 1\n        statistic: Minimum\n        period: 60\n        evaluationPeriods: 1\n        comparisonOperator: GreaterThanOrEqualToThreshold\n    deploymentSettings:\n      type: Linear10PercentEvery1Minute\n      alias: Live\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      alarms:\n        - HelloFooAlarm\n  preHook:\n    handler: hooks.pre\n  postHook:\n    handler: hooks.post\n\nresources:\n  Resources:\n    StreamsTestTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: StreamsTestTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    MyQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        DelaySeconds: 0\n        VisibilityTimeout: 120"]},{"id":95246216,"files":["# serverless-build-rules.yml\n\n# tag-name\n#   sbr-type: a mandatory type of the tag it can be primitive (int, bool, str, enum) conventional (aws-id, aws-artifact-name, aws-var-name, path, ... )\n#             or composed having the reference to some other complex type described inside the file.\n#             It can also describe arrays with square brakets like [int] and maps with the square brackets and colon like that [aws-var-name:path]\n#   sbr-render: a mandatory enum that can contain the values as follows: config-only or user-only or config-wins (if both specified and mismatched),\n#               user-wins or exception-on-mismatch or merge (only applicable for map and array types of congigurable type)\n#   sbr-primary: an optional true or false that means whether this tag can be used inside the file directly or it is just used for the complex type description like in case of function, the default value is true\n#   sbr-constraint: an optional value contains the path inside the whitelist.yml that the value can be assigned to like 'whitelist.yml/resources' or 'whitelist.yml/actions'\n#                   or the list of enum values that they can be assigned to or ranges of ints\n#   sbr-enum: a child of sbr-constraint containing the list of values the tag can accept\n#   sbr-from: a child of sbr-constraint containing the lowest/minmal value the integer value can be assigned to\n#   sbr-to: a child of sbr-constraint containing the highest/maximum value the integer value can be assigned to\n#   sbr-whitelist: a child of sbr-constraint containing a section of whitelist.yml where the values can be selected from\n#   sbr-value: an optional value that contains the formula or formulas to calculate the config driven values to be inserted\n#   sbr-example: is a child of sbr-value. It is designated to store the default value for tag\n#   sbr-formula:  is a child of sbr-value. It is designated to store the formula that derives the value from the set of config values and inline constants\n#   sbr-template: is used instead of value in non-primary rules and itself contains the sub-set of rules because it cannot be represented by a single value\n#   sbr-mandatory: indicates whether the field must be inserted inside the output file no matter whether it exists in the user's original file or not\n#                  only primary config-only, config-wins and merge rendered fields can have a mandatory status\n\nservice:\n  name:\n    sbr-type: aws-artifact-name\n    sbr-render: config-only\n    sbr-value:\n      sbr-formula: ${context.INSTANCE_PREFIX}-${config.domain}-${config.service}\n    sbr-mandatory: true\n\n  awsKmsKeyArn:\n    sbr-type: arn-kms\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: 'arn:aws:kms:us-east-1:XXXXXX:key/some-hash'\n\nframeworkVersion:\n  sbr-type: str\n  sbr-render: config-wins\n  sbr-mandatory: true\n  sbr-value:\n    sbr-formula: ${context.serverlessFrameworkVersion}\n    sbr-example: '>=1.0.0 <2.0.0'\n\ncustom:\n  sbr-type: \"[aws-var-name:aws-tag-value]\"\n  sbr-render: merge\n  sbr-mandatory: true\n  sbr-value:\n    sbr-example:\n      key1: value1\n      key2: value2\n\nprovider:\n  name:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-constraint:\n      sbr-enum:\n        - aws\n        - azure\n    sbr-value:\n      sbr-formula: ${context.cloudProvider}\n      sbr-example: aws\n    sbr-mandatory: true\n\n  runtime:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-constraint:\n      sbr-enum:\n        - nodejs8.10\n        - nodejs10.x\n        - java8\n        - python3.6\n        - go1.x\n    sbr-value:\n      sbr-formula: ${config.providerRuntime}\n      sbr-example: nodejs10.x\n    sbr-mandatory: true\n\n\n  stage: # It will be setup automagically so you may not want to touch it\n    sbr-type: deployment-stage\n    sbr-render: config-wins\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula: ${context.environment_logical_id}\n      sbr-example: dev\n\n  region:\n    sbr-type: enum\n    sbr-render: config-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-enum:\n        - 'us-east-2'\n        - 'us-east-1'\n        - 'us-west-1'\n        - 'us-west-2'\n        - 'ap-south-1'\n        - 'ap-northeast-3'\n        - 'ap-northeast-2'\n        - 'ap-southeast-1'\n        - 'ap-southeast-2'\n        - 'ap-northeast-1'\n        - 'ca-central-1'\n        - 'cn-north-1'\n        - 'cn-northwest-1'\n        - 'eu-central-1'\n        - 'eu-west-1'\n        - 'eu-west-2'\n        - 'eu-west-3'\n        - 'eu-north-1'\n        - 'sa-east-1'\n        - 'us-gov-east-1'\n        - 'us-gov-west-1'\n    sbr-value:\n      sbr-formula: ${context.REGION}\n      sbr-example: 'us-east-1'\n\n  stackName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-wins\n    sbr-value:\n      sbr-formula: ${context.INSTANCE_PREFIX}-${config.domain}-${config.service}-${context.environment_logical_id}\n      sbr-example: custom-stack-name # Use a custom name for the CloudFormation stack\n\n  apiName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: custom-api-name # Use a custom name for the API Gateway API\n\n  websocketsApiName:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: custom-websockets-api-name # Use a custom name for the websockets API\n\n  websocketsApiRouteSelectionExpression:\n    sbr-type: aws-artifact-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: $request.body.route # custom route selection expression\n\n  memorySize: # in MB\n    sbr-type: int\n    sbr-render: user-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-from: 128\n      sbr-to: 2048\n    sbr-value:\n      sbr-formula: ${config.providerMemorySize}\n      sbr-example: 256\n\n  timeout: # in seconds 1 sec to 15 mins\n    sbr-type: int\n    sbr-render: user-wins\n    sbr-mandatory: true\n    sbr-constraint:\n      sbr-from: 1\n      sbr-to: 900\n    sbr-value:\n      sbr-example: 30\n      \n  logRetentionInDays:  # Set the default RetentionInDays for a CloudWatch LogGroup\n    sbr-type: int\n    sbr-render: user-only\n    sbr-constraint:\n      sbr-from: 5\n      sbr-to: 21\n    sbr-value:\n      sbr-example: 14\n\n  deploymentBucket: # Deployment bucket name. Default is generated by the framework\n    name:\n      sbr-type: aws-bucket-name\n      sbr-render: config-wins\n      sbr-mandatory: true\n      sbr-value:\n        sbr-formula: _${opt:bucket} # Mind the _ that will prevent the ${} from resolving\n        sbr-example: com.serverless.${self:provider.region}.deploys\n\n    serverSideEncryption:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - AES-256\n          - AWS-KMS\n      sbr-value:\n        sbr-example: AES-256\n\n\n    tags: # Tags that will be asbred to each of the deployment resources\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          key1: value1\n          key2: value2\n\n\n  deploymentPrefix: # The S3 prefix under which deployed artifacts should be stored. Default is serverless\n    sbr-type: aws-bucket-name\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: serverless\n\n  role:\n    sbr-type: arn-iam\n    sbr-render: user-only # was config-wins\n    sbr-value:\n      sbr-formula: ${config.iamRoleARN}\n      sbr-example: arn:aws:iam::XXXXXX:role/role\n\n  cfnRole:  # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials\n    sbr-type: arn-iam\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: arn:aws:iam::XXXXXX:role/role\n\n  versionFunctions: # Optional function versioning\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: false\n\n  environment: # Service wide environment variables\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        serviceEnvVar: 123456789\n\n  endpointType: # Optional endpoint configuration for API Gateway REST API. Default is Edge.\n    sbr-type: enum\n    sbr-render: user-only\n    sbr-constraint:\n      sbr-enum:\n        - EDGE\n        - REGIONAL\n    sbr-value:\n      sbr-example: regional\n\n  apiKeys: # List of API keys to be used by your service API Gateway REST API\n    sbr-type: \"[aws-artifact-name]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - myFirstKey\n        - ${opt:stage}-myFirstKey\n        - ${env:MY_API_KEY} # you can hide it in a serverless variable\n\n  apiGateway: # Optional API Gateway global config\n    restApiId: # REST API resource ID. Default is generated by the framework\n      sbr-type: aws-id\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: xxxxxxxxxx\n\n    restApiRootResourceId: # REST API resource ID. Default is generated by the framework\n      sbr-type: aws-id\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: xxxxxxxxxx\n\n    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted\n      sbr-type: \"[path:aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          '/users': xxxxxxxxxx\n          '/users/create': xxxxxxxxxx\n\n    apiKeySourceType: # Source of API key for usage plan. HEADER or AUTHORIZER.\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - HEADER\n          - AUTHORIZER\n      sbr-value:\n        sbr-example: HEADER\n\n    minimumCompressionSize: # Compress response when larger than specified size in bytes (must be between 0 and 10485760)\n      sbr-type: int\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-from: 512\n        sbr-to: 10485760\n      sbr-value:\n        sbr-example: 1024\n\n    description: # optional description for the API Gateway stage deployment\n      sbr-type: str\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: Some Description\n\n  usagePlan: # Optional usage plan configuration\n    quota:\n      limit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 5000\n      offset:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 2\n\n      period:\n        sbr-type: enum\n        sbr-render: user-only\n        sbr-constraint:\n          sbr-enum:\n            - MONTH\n            - WEEK\n            - DAY\n        sbr-value:\n          sbr-example: WEEK\n\n    throttle:\n      burstLimit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 200\n\n      rateLimit:\n        sbr-type: int\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 100\n\n\n  stackTags: # Optional CF stack tags\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: merge\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula:\n        application: ${context.INSTANCE_PREFIX}\n        service: ${config.service}\n        domain: ${config.domain}\n        owner: ${config.created_by}\n        environment: ${context.environment_logical_id}\n      sbr-example:\n        key: value\n\n  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role\n    sbr-type: \"[arn-iam-policy]\"\n    sbr-render: merge\n    sbr-value:\n      sbr-formula: ${config.iamRoleARN}\n      sbr-example:\n        - arn:aws:iam:*****:policy/some-managed-policy\n\n  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account\n    sbr-type: \"[arn-iam-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: 'Allow'\n          Action:\n            - 's3:ListBucket'\n          Resource:\n            Fn::Join:\n              - ''\n              - - 'arn:aws:s3:::'\n                - Ref: ServerlessDeploymentBucket\n\n\n  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)\n    sbr-type: \"[aws-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: Allow\n          Principal: \"*\"\n          Action: \"Update:*\"\n          Resource: \"*\"\n        - Effect: Deny\n          Principal: \"*\"\n          Resource: \"*\"\n          Action:\n            - Update:Replace\n            - Update:Delete\n          Condition:\n            StringEquals:\n              ResourceType:\n                - AWS::EC2::Instance\n\n  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n    securityGroupIds:\n      sbr-type: \"[aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - securityGroupId1\n          - securityGroupId2\n    subnetIds:\n      sbr-type: \"[aws-id]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - subnetId1\n          - subnetId2\n  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.\n    sbr-type: \"[aws-id]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'\n\n  resourcePolicy:\n    sbr-type: \"[aws-policy]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - Effect: Allow\n          Principal: \"*\"\n          Action: execute-api:Invoke\n          Resource:\n            - execute-api:/*/*/*\n          Condition:\n            IpAsbrress:\n              aws:SourceIp:\n                - \"123.123.123.123\"\n\n  tags: # Optional service wide function tags\n    sbr-type: \"[aws-var-name:aws-tag-value]\"\n    sbr-render: merge\n    sbr-value:\n      sbr-formula:\n        application: ${context.INSTANCE_PREFIX}\n        service: ${config.service}\n        domain: ${config.domain}\n        owner: ${config.created_by}\n        environment: ${env}\n      sbr-example:\n        key: value\n\npackage: # Optional deployment packaging configuration\n  include: # Specify the directories and files which should be included in the deployment package\n    sbr-type: \"[path]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - .git/**\n        - .travis.yml\n  exclude: # Specify the directories and files which should be excluded in the deployment package\n    sbr-type: \"[path]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        - .git/**\n        - .travis.yml\n  excludeDevDependencies:\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-default: false\n      sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n  artifact:\n    sbr-type: path\n    sbr-render: user-only\n    sbr-value:\n      sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n\n  individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n    sbr-type: bool\n    sbr-render: user-only\n    sbr-value:\n      sbr-default: false\n      sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n\nfunctions:\n    sbr-type: \"[aws-var-name:function]\"\n    sbr-render: user-only\n\n# works as expected when using sbr-formula only NOT with sbr-example\nplugins:\n    sbr-type: \"[plugin]\"\n    sbr-render: merge\n    sbr-mandatory: true\n    sbr-value:\n      sbr-formula:\n       - serverless-plugin-log-subscription\n\n# The \"Resources\" your \"Functions\" use.  Raw AWS CloudFormation goes in here.\nresources:\n  Resources:\n    sbr-type: \"[aws-var-name:resource]\"\n    sbr-render: user-only\n    # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    sbr-type: \"[aws-artifact-name:arn]\"\n    sbr-render: user-only\n    sbr-value:\n      sbr-example:\n        UsersTableArn:\n          Description: The ARN for the User's Table\n          Value:\n            \"Fn::GetAtt\": [ usersTable, Arn ]\n          Export:\n            Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.\n\n# ------------ Below we put all NON-PRIMARY types --------------------\naws-policy:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    Effect:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - Allow\n          - Deny\n    Principal:\n      sbr-type: aws-principal\n      sbr-render: user-only\n    Resource:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: resource\n    Action:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: action\n\n\nfunction:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    handler:\n      sbr-type: path\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: index.handler\n\n    name:\n      sbr-type: aws-artifact-name\n      sbr-render: config-wins\n      sbr-mandatory: true\n      sbr-value:\n        sbr-formula: ${context.INSTANCE_PREFIX}_${config.domain}_${config.service}_${asterisk0}_${context.environment_logical_id}\n\n    description:\n      sbr-type: aws-description\n      sbr-render: user-wins\n      sbr-value:\n        sbr-formula: Description for ${context.asterisk0} function\n\n    memorySize: # memorySize in MB for this specific function.\n      sbr-type: int\n      sbr-render: user-wins\n      sbr-mandatory: true\n      sbr-constraint:\n        sbr-from: 128\n        sbr-to: 2048\n      sbr-value:\n        sbr-formula: ${config.providerMemorySize}\n        sbr-example: 256\n\n    runtime:\n      sbr-type: enum\n      sbr-render: config-wins\n      sbr-constraint:\n        sbr-enum:\n          - nodejs8.10\n          - nodejs10.x\n          - java8\n          - python3.6\n          - go1.x\n      sbr-value:\n        sbr-formula: ${config.providerRuntime}\n        sbr-example: nodejs10.x\n\n    timeout: # in seconds 1 sec to 15 mins\n      sbr-type: int\n      sbr-render: user-wins\n      sbr-mandatory: true\n      sbr-constraint:\n        sbr-from: 1\n        sbr-to: 900\n      sbr-value:\n        sbr-example: 30\n\n    role: # none provided in config, serverless creates if not user provided\n      sbr-type: arn-iam\n      sbr-render: user-only\n      sbr-value:\n        sbr-formula: ${config.role}\n        sbr-example: arn:aws:iam::XXXXXX:role/role\n\n    onError: # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig\n      sbr-type: arn-sns\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: arn:aws:sns:us-east-1:XXXXXX:sns-topic\n\n    awsKmsKeyArn:  # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)\n      sbr-type: arn-kms\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: arn:aws:kms:us-east-1:XXXXXX:key/some-hash\n\n    environment: # Function level environment variables\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          functionEnvVar: 12345678\n\n    tags: # Function specific tags\n      sbr-type: \"[aws-var-name:aws-tag-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          foo: bar\n\n    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required\n      securityGroupIds:\n        sbr-type: \"[aws-id]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - securityGroupId1\n            - securityGroupId2\n      subnetIds:\n        sbr-type: \"[aws-id]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - subnetId1\n            - subnetId2\n\n    package:\n      include: # Specify the directories and files which should be included in the deployment package\n        sbr-type: \"[path]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - .git/**\n            - .travis.yml\n      exclude: # Specify the directories and files which should be excluded in the deployment package\n        sbr-type: \"[path]\"\n        sbr-render: user-only\n        sbr-value:\n          sbr-example:\n            - .git/**\n            - .travis.yml\n    excludeDevDependencies:\n      sbr-type: bool\n      sbr-render: user-only\n      sbr-value:\n        sbr-default: false\n        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n    artifact:\n      sbr-type: path\n      sbr-render: user-only\n      sbr-value:\n        sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.\n\n    individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false\n      sbr-type: bool\n      sbr-render: user-only\n      sbr-value:\n        sbr-default: false\n        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true\n\n    layers: # An optional list Lambda Layers to use\n      sbr-type: \"[arn-layer]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN\n    tracing:  # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-enum:\n          - Active\n          - PassThrough\n      sbr-value:\n        sbr-example: Active\n\n    events: # The Events that trigger this Function\n      sbr-type: \"[event]\"\n      sbr-render: user-only\n\n    lambdaAtEdge:\n      distribution:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'WebsiteDistribution'\n      eventType:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'origin-request'\n      pathPattern:\n        sbr-type: str\n        sbr-render: user-only\n        sbr-value:\n          sbr-example: 'images/*.jpg'\n\nevent:\n  sbr-primary: false\n  sbr-type: \"[enum]\"\n  sbr-render: user-only\n  sbr-template:\n    - s3:\n        bucket:\n          sbr-type: aws-bucket-name\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: photos\n\n        event:\n          sbr-type: \"[enum]\"\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-whitelist: actions\n          sbr-value:\n            sbr-example:\n              - s3:ObjectCreated:*\n        rules:\n          - prefix:\n              sbr-type: path\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: uploads/\n          - suffix:\n              sbr-type: str\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: .jpg\n\n    - http:\n        path:\n          sbr-type: path\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: 'path/to/function'\n        method:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - GET\n              - PUT\n              - POST\n              - DELETE\n              - OPTIONS\n        cors:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        async:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        integration:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - lambda\n              - http\n              - lambda-proxy\n\n        private:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        authorizer:\n          name:\n            sbr-type: aws-artifact-name\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: 'customauthorizer'\n          arn:\n            sbr-type: arn-lambda\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: arn:aws:lambda:region:XXXXXX:function:myfunc\n          resultTtlInSeconds:\n            sbr-type: int\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: 0\n          identitySource:\n            sbr-type: str\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: method.request.header.Authorization\n          identityValidationExpression:\n            sbr-type: str\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: someRegex\n          type:\n            sbr-type: enum\n            sbr-render: user-only\n            sbr-constraint:\n              sbr-enum:\n                - token\n                - request\n\n    - schedule:\n        name:\n          sbr-type: aws-artifact-name\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: 'Abrahadabrah'\n        description:\n          sbr-type: aws-description\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: The description for ${self.name}\n        rate:\n          sbr-type: aws-schedule-rate\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: rate(5 minutes)\n        enabled:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n        input:\n          sbr-type: \"[aws-var-name:aws-tag-value]\"\n          sbr-render: user-only\n          sbr-value:\n            sbr-example:\n              key1: value1\n              key2: value2\n              stageParams:\n                stage: dev\n\n        inputPath:\n          sbr-type: path\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: '$.stageVariables'\n        inputTransformer:\n          inputPathsMap:\n            eventTime:\n              sbr-type: str\n              sbr-render: user-only\n              sbr-value:\n                sbr-example: '$.time'\n          inputTemplate:\n            sbr-type: json\n            sbr-render: user-only\n            sbr-value:\n              sbr-example: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n\n    - sqs:\n        arn:\n          sbr-type: arn-sqs\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: arn:aws:sqs:region:XXXXXX:myQueue\n        batchSize:\n          sbr-type: int\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-from: 3\n            sbr-to: 100\n          sbr-value:\n            sbr-example: 10\n\n    - stream:\n        arn:\n          sbr-type: arn-kinesis\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: arn:aws:kinesis:region:XXXXXX:myKineisisStream\n        batchSize:\n          sbr-type: int\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-from: 3\n            sbr-to: 100\n          sbr-value:\n            sbr-example: 10\n        startingPosition:\n          sbr-type: enum\n          sbr-render: user-only\n          sbr-constraint:\n            sbr-enum:\n              - AT_SEQUENCE_NUMBER\n              - AFTER_SEQUENCE_NUMBER\n              - AT_TIMESTAMP\n              - TRIM_HORIZON\n              - LATEST\n          sbr-value:\n            sbr-example: LATEST\n        enabled:\n          sbr-type: bool\n          sbr-render: user-only\n          sbr-value:\n            sbr-example: false\n\nresource:\n  sbr-primary: false\n  sbr-type: sequence\n  sbr-render: user-only\n  sbr-template:\n    Type:\n      sbr-type: enum\n      sbr-render: user-only\n      sbr-constraint:\n        sbr-whitelist: resources\n      sbr-value:\n        sbr-example: AWS::DynamoDB::Table\n    DeletionPolicy:\n      sbr-type: str\n      sbr-render: user-only\n    Properties:\n      sbr-type: \"[aws-var-name:aws-var-value]\"\n      sbr-render: user-only\n      sbr-value:\n        sbr-example:\n          AttributeDefinitions:\n            - AttributeName: email\n              AttributeType: S\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent python plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: main\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    {event_source_sqs}:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent Java plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\npackage:\n  artifact: target/${file(deployment-env.yml):artifact}\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: ${file(deployment-env.yml):mainClass}\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once we need monitoring enabled across the board.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: index.handler\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n       Type: AWS::SQS::Queue\n       Properties:\n         QueueName: {event_source_sqs}\n         VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n","service: ${file(deployment-env.yml):service}\n\nprovider:\n  name: aws\n  deploymentBucket: ${opt:bucket}\n  region: ${file(deployment-env.yml):region}\n  stage: dev\n  owner: jazz\n  domain: \"\"\n  stackTags:\n    application: {inst_stack_prefix}\n    service: ${file(deployment-env.yml):service}\n    domain: ${file(deployment-env.yml):domain, self:provider.domain}\n    owner: ${file(deployment-env.yml):owner, self:provider.owner}\n    environment: ${opt:stage, self:provider.stage}\n\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n# This settings will be enabled once equivalent python plugin is added.\n#  alerts:\n#    topics:\n#      alarm: ${self:service}-${opt:stage}-alerts-alarm\n#    global:\n#      - functionThrottles\n#      - functionErrors\n#      - functionInvocations\n#      - functionDuration\n#\n#plugins:\n#  - serverless-plugin-aws-alerts\n\nfunctions:\n  handler:\n    name: ${functionName}\n    handler: index.handler\n    role: ${file(deployment-env.yml):iamRoleARN}\n    description: ${self:service} Lambda Function\n    runtime: ${file(deployment-env.yml):providerRuntime}\n    memorySize: ${file(deployment-env.yml):providerMemorySize}\n    timeout: ${file(deployment-env.yml):providerTimeout}\n    #Start:events\n    eventsDisabled:\n      #Start:isScheduleEnabled\n      - schedule:\n          rate: ${file(deployment-env.yml):eventScheduleRate}\n          name: ${self:service}-${self:custom.myStage}-schedule\n          enabled: ${file(deployment-env.yml):eventScheduleEnable}\n      #End:isScheduleEnabled\n      #Start:isDynamoDbEnabled\n      - stream:\n          type: dynamodb\n          #Start:dynamoDbstreamArn\n          streamArnDisabled: {event_dynamodb_stream_arn}\n          #End:dynamoDbstreamArn\n          #Start:dynamoDbstreamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceDynamoDbTable\n              - StreamArn\n          #End:dynamoDbstreamGetArn\n          batchSize: 1\n          startingPosition: LATEST\n          enabled: true\n      #End:isDynamoDbEnabled\n      #Start:isSQSEventEnabled\n      - sqs:\n          enabled: true\n          arn: {event_sqs_arn}\n      #End:isSQSEventEnabled\n      #Start:isStreamEnabled\n      - stream:\n          type: kinesis\n          startingPosition: LATEST\n          enabled: true\n          #Start:streamGetArn\n          arn:\n            Fn::GetAtt:\n              - sourceKinesisStreams\n              - Arn\n          #End:streamGetArn\n          #Start:streamArn\n          arnDisabled: {event_stream_arn}\n          #End:streamArn\n      #End:isStreamEnabled\n      #Start:isS3EventEnabled\n      - s3:\n          bucket: {event_source_s3}\n          event: {event_action_s3}\n      #End:isS3EventEnabled\n    #End:events\n\n    vpcDisabled:\n      securityGroupIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):securityGroupIds}\n      subnetIds:\n        \"Fn::Split\":\n          - \",\"\n          - ${file(deployment-env.yml):subnetIds}\n\n#Start:resources\nresourcesDisabled:\n  Resources:\n    #Start:isS3EventRoleEnabled\n    customEventRole: ${file(policyFile.yml):s3Role}\n    #End:isS3EventRoleEnabled\n    #Start:isStreamEnabled\n    customEventRole: ${file(policyFile.yml):kinesisRole}\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    customEventRole: ${file(policyFile.yml):dynamoDbRole}\n    #End:isDynamoDbEnabled\n    #Start:isSQSEventEnabled\n    customEventRole: ${file(policyFile.yml):sqsRole}\n    #End:isSQSEventEnabled\n    #Start:isSQSEventEnabled\n    #Start:isSqsResourceNotExist\n    sourceQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: {event_source_sqs}\n        VisibilityTimeout: 165\n    #End:isSqsResourceNotExist\n    #End:isSQSEventEnabled\n    #Start:isStreamEnabled\n    #Start:isKinesisStreamNotExist\n    sourceKinesisStreams:\n       Type: AWS::Kinesis::Stream\n       Properties:\n         Name: {event_source_kinesis}\n         ShardCount: 1\n    #End:isKinesisStreamNotExist\n    #End:isStreamEnabled\n    #Start:isDynamoDbEnabled\n    #Start:isDynamoDbtableNotExist\n    sourceDynamoDbTable:\n       Type: AWS::DynamoDB::Table\n       Properties:\n         TableName: {event_source_dynamodb}\n         AttributeDefinitions:\n           - AttributeName: ID\n             AttributeType: S\n         KeySchema:\n           - AttributeName: ID\n             KeyType: HASH\n         ProvisionedThroughput:\n           ReadCapacityUnits: 5\n           WriteCapacityUnits: 5\n         StreamSpecification:\n           StreamViewType: NEW_AND_OLD_IMAGES\n    #End:isDynamoDbtableNotExist\n    #End:isDynamoDbEnabled\n#End:resources\n"]},{"id":135220798,"files":["\nservice: aws-rust # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: rust\n  memorySize: 128\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-rust\n\nfunctions:\n  hello:\n    handler: test-func","\nservice: aws-rust # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: rust\n  memorySize: 128\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-rust\n\ncustom:\n  rust:\n    profile: dev\n\nfunctions:\n  hello:\n    handler: test-func"]},{"id":113743358,"files":["service: laconia-acceptance\n\nplugins:\n  - serverless-s3-remover\n  - serverless-s3-sync\n  - serverless-pseudo-parameters\n  - serverless-plugin-tracing\n\npackage:\n  exclude:\n    - node_modules/**/aws-sdk/**\n\nprovider:\n  name: aws\n  runtime: nodejs${env:NODE_VERSION, '10' }.x\n  stage: node${env:NODE_VERSION, '10' }\n  region: ${env:AWS_REGION, 'eu-west-1'}\n  tracing: true\n  apiGateway:\n    binaryMediaTypes:\n      - \"*/*\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action: sns:Publish\n      Resource:\n        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n      Resource: \"arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.fullName}/*\"\n    - Effect: \"Allow\"\n      Action:\n        - kinesis:PutRecord\n      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/${self:custom.orderEventsStreamName}\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.userEmailQueueName}\n  environment:\n    TRACKER_BUCKET_NAME: ${self:custom.trackerBucketName}\n    LACONIA_TEST_SPY_BUCKET: ${self:custom.trackerBucketName}\n\ncustom:\n  accountId: ${file(./src/sts.js):getAccountId}\n  fullName: ${self:service}-${self:provider.stage}\n  trackerBucketName: ${self:custom.fullName}-${self:custom.accountId}-tracker\n  totalOrderBucketName: ${self:custom.fullName}-${self:custom.accountId}-total-order\n  userEmailQueueName: ${self:custom.fullName}-user-email-queue\n  restaurantBucketName: ${self:custom.fullName}-${self:custom.accountId}-restaurant\n  orderEventsStreamName: ${self:custom.fullName}-order-events\n  restaurantNotificationTopicName: ${self:custom.fullName}-restaurant-notification\n  orderDynamoDbBatchTableName: ${self:custom.fullName}-order\n  connectionDynamoDbTableName: ${self:custom.fullName}-connection\n  remover:\n    buckets:\n      - ${self:custom.trackerBucketName}\n      - ${self:custom.totalOrderBucketName}\n  s3Sync:\n    - bucketName: ${self:custom.restaurantBucketName}\n      localDir: src/resources\n  apigatewayUrl:\n    Fn::Join:\n      - \"\"\n      - - \"https://\"\n        - Ref: \"ApiGatewayRestApi\"\n        - \".execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}\"\n  webSocketEndpoint:\n    Fn::Join:\n      - \"\"\n      - - \"https://\"\n        - Ref: \"WebsocketsApi\"\n        - \".execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}\"\n\nfunctions:\n  place-order:\n    handler: src/place-order.handler\n    events:\n      - http:\n          path: order\n          method: post\n      - schedule:\n          name: warmer-schedule-name\n          rate: rate(30 days)\n          enabled: true\n          input:\n            warmer: true\n            concurrency: 1\n    environment:\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n      ORDER_STREAM_NAME: ${self:custom.orderEventsStreamName}\n      LACONIA_CONFIG_API_KEY: ssm:/${self:custom.fullName}/apikey\n      LACONIA_CONFIG_RESTAURANTS: s3:${self:custom.restaurantBucketName}/restaurants.json\n      LACONIA_CONFIG_ENABLED: boolean:true\n  accept-order:\n    handler: src/accept-order.handler\n    events:\n      - http:\n          path: order/{id}/accept\n          method: put\n    environment:\n      ORDER_STREAM_NAME: ${self:custom.orderEventsStreamName}\n  process-card-payments:\n    timeout: 6 # Force recursion\n    handler: src/process-card-payments.handler\n    environment:\n      LACONIA_INVOKER_CAPTURE_CARD_PAYMENT: ${self:custom.fullName}-capture-card-payment\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n  capture-card-payment:\n    handler: src/capture-card-payment.handler\n  calculate-total-order:\n    timeout: 6 # Force recursion\n    handler: src/calculate-total-order.handler\n    environment:\n      RESTAURANT_BUCKET_NAME: ${self:custom.restaurantBucketName}\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}\n  convert-total-order-to-xml:\n    handler: src/convert-total-order-to-xml.handler\n    environment:\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n    events:\n      - s3:\n          bucket: ${self:custom.totalOrderBucketName}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: json/\n  notify-restaurant:\n    handler: src/notify-restaurant.handler\n    environment:\n      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}\n      RESTAURANT_NOTIFICATION_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n  notify-user:\n    handler: src/notify-user.handler\n    environment:\n      USER_EMAIL_QUEUE_URL:\n        Ref: UserEmailQueue\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n  send-email:\n    handler: src/send-email.handler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - UserEmailQueue\n              - Arn\n  fake-restaurant:\n    handler: src/fake-restaurant.handler\n    events:\n      - sns:\n          topicName: ${self:custom.restaurantNotificationTopicName}\n          arn:\n            Ref: RestaurantNotificationTopic\n    environment:\n      API_BASE_URL: ${self:custom.apigatewayUrl}\n\n  update-user:\n    handler: src/update-user.handler\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - OrderEventsStream\n              - Arn\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n      WEBSOCKET_ENDPOINT: ${self:custom.webSocketEndpoint}\n  update-user-receipt:\n    handler: src/update-user-receipt.handler\n    events:\n      - websocket:\n          route: $default\n    environment:\n      WEBSOCKET_ENDPOINT: ${self:custom.webSocketEndpoint}\n  connect-websocket:\n    handler: src/connect-websocket.handler\n    events:\n      - websocket:\n          route: $connect\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n  disconnect-websocket:\n    handler: src/disconnect-websocket.handler\n    events:\n      - websocket:\n          route: $disconnect\n    environment:\n      CONNECTION_TABLE_NAME: ${self:custom.connectionDynamoDbTableName}\n  download-image:\n    handler: src/download-image.handler\n    events:\n      - http:\n          path: image\n          method: get\n\nresources:\n  Resources:\n    S3Tracker:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.trackerBucketName}\n    RestaurantBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.restaurantBucketName}\n    OrderEventsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: ${self:custom.orderEventsStreamName}\n        ShardCount: 1\n    RestaurantNotificationTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:custom.restaurantNotificationTopicName}\n        TopicName: ${self:custom.restaurantNotificationTopicName}\n    UserEmailQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: ${self:custom.userEmailQueueName}\n    OrderTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"orderId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"orderId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.orderDynamoDbBatchTableName}\n    ConnectionTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"connectionId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"connectionId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.connectionDynamoDbTableName}\n"]},{"id":83125150,"files":["service: YoYo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  region: us-east-1\n  environment:\n    YOYO_EMAIL: ${opt:YOYO_EMAIL}\n    YOYO_DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SITE_OWNER_EMAIL: ${opt:SITE_OWNER_EMAIL}\n    SENDGRID_API_KEY: ${opt:SENDGRID_API_KEY}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.YOYO_DB_TABLE}\"\n\npackage:\n  include:\n    - handler.js\n    - config.js\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: /comments\n          method: post\n          cors: true\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: /comments\n          method: get\n          cors: true\n  get:\n    handler: handler.get\n    events:\n      - http:\n          path: /comments/{id}\n          method: get\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          path: /comments/{id}\n          method: put\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: ${self:provider.environment.YOYO_DB_TABLE}\n"]},{"id":71295310,"files":["service: ${self:custom.project.name}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: ${self:custom.project.provider.profile}\n  stage: ${self:custom.project.provider.stage}\n  region: ${self:custom.project.provider.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:GetObjectAcl\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.project.sourceBucket}\n            - \"/\"\n            - ${self:custom.project.sourcePrefix}\n            - \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n        - \"s3:GetObjectAcl\"\n        - \"s3:ListBucketMultipartUploads\"\n        - \"s3:ListMultipartUploadParts\"\n        - \"s3:PutObject\"\n        - \"s3:PutObjectAcl\"\n        - \"s3:PutObjectTagging\"\n        - \"s3:PutObjectVersionAcl\"\n        - \"s3:PutObjectVersionTagging\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.project.destinationBucket}\n            - \"/\"\n            - ${self:custom.project.destinationPrefix}\n            - \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - rekognition:DetectFaces\n\n\n\ncustom:\n  webpackIncludeModules: false # disable auto including modules\n  project: ${file(src/config.js):serverless}\n\n\nplugins:\n  - serverless-webpack\n\npackage:\n  exclude:\n    - .serverless\n    - .webpack\n    - coverage\n    - .babelrc\n    - .eslintignore\n    - .eslintrc\n    - .gitignore\n    - LICENSE\n    - package.json\n    - README.md\n    - serverless.yml\n    - webpack.config.js\n\nfunctions:\n  sharpImage:\n    description: Resizes images\n    memorySize: 1024\n    timeout: 30\n    handler: handler.processImage\n    events:\n      - s3:\n          bucket: ${self:custom.project.sourceBucket}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:custom.project.sourcePrefix}\n\n\n# Comment out the imageDestinationBucket section\n# if you want to use previously existing buckets\nresources:\n  Resources:\n    imageDestinationBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.project.destinationBucket}\n"]},{"id":169335633,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mercury\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  # If you want to change to a different AWS profile\n  # from ~/.aws/credentials, you can do so here\n  profile: default\n  # you can overwrite defaults here\n  #  stage: dev\n  #  region: us-east-1\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn' # Packager that will be used to package your external modules\n\nfunctions:\n  mercuryParser:\n    handler: src/mercury-parser.default\n    timeout: 10\n    memorySize: 256\n    events:\n      - http:\n          method: get\n          path: parser\n          cors: true\n      # Ping every 5 minutes to avoid cold starts\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n\n  parseHtml:\n    handler: src/parse-html.default\n    timeout: 10\n    memorySize: 256\n    events:\n      - http:\n          method: post\n          path: parse-html\n          cors: true\n      # Ping every 5 minutes to avoid cold starts\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n"]},{"id":134855786,"files":["service: lambda-powertools-demo\n\nplugins:\n  - serverless-iam-roles-per-function\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-2\n  environment:\n    STAGE: dev\n    DATADOG_API_KEY: idunno\n    DATADOG_PREFIX: lambda-powertools-demo.\n\ncustom:\n  pseudoParameters:\n    allowReferences: true\n\nfunctions:\n  api-a:\n    handler: functions/api-a.handler\n    events:\n      - http:\n          path: /\n          method: get\n    environment:\n      KINESIS_STREAM: !Ref KinesisStream\n      FIREHOSE_STREAM: !Ref FirehoseStream\n    iamRoleStatements:\n      - Effect: Allow\n        Action: kinesis:PutRecord\n        Resource: !GetAtt KinesisStream.Arn\n      - Effect: Allow\n        Action: firehose:PutRecord\n        Resource: !GetAtt FirehoseStream.Arn\n  \n  api-b:\n    handler: functions/api-b.handler\n    events:\n      - http:\n          path: /\n          method: post\n\n  kinesis:\n    handler: functions/kinesis.handler\n    events:\n      - stream:\n          type: kinesis\n          arn: !GetAtt KinesisStream.Arn\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n      TABLE_NAME: !Ref DynamoDBTable\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n      - Effect: Allow\n        Action: dynamodb:PutItem\n        Resource: !GetAtt DynamoDBTable.Arn\n\n  dynamodb:\n    handler: functions/dynamodb.handler    \n    events:\n      - stream:\n          type: dynamodb\n          arn: !GetAtt DynamoDBTable.StreamArn\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n  \n  sns:\n    handler: functions/sns.handler\n    events:\n      - sns: \n          arn: !Ref SnsTopic\n          topicName: lambda-powertools-demo\n    environment:\n      STATE_MACHINE_ARN: !Ref LambdaPowertoolsDemo\n    iamRoleStatements:\n      - Effect: Allow\n        Action: states:StartExecution\n        Resource: !Ref LambdaPowertoolsDemo\n      - Effect: Allow\n        Action: lambda:InvokeFunction\n        Resource: !GetAtt StandDashaloneLambdaFunction.Arn\n\n  firehose:\n    handler: functions/firehose.handler\n    environment:\n      TOPIC_ARN: !Ref SnsTopic\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: !Ref SnsTopic\n\n  stand-alone:\n    handler: functions/stand-alone.handler\n\n  add:\n    handler: functions/add.handler\n\n  double:\n    handler: functions/double.handler\n    \nstepFunctions:\n  stateMachines:\n    lambda-powertools-demo:      \n      name: lambdaPowertoolsDemo\n      definition:\n        Comment: A demo to show off the Lambda powertools packages\n        StartAt: Add\n        States:\n          Add:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [add, Arn]\n            ResultPath: $.z\n            Next: Double\n          Double:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [double, Arn]\n            ResultPath: $.result\n            End: true\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties: \n        ShardCount: 1\n\n    S3Bucket:\n      Type: AWS::S3::Bucket\n\n    FirehoseDeliveryIamRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service: firehose.amazonaws.com\n              Action: sts:AssumeRole\n        Path: \"/\"\n        Policies:\n          - PolicyName: root\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action: glue:GetTableVersions\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - s3:AbortMultipartUpload\n                    - s3:GetBucketLocation\n                    - s3:GetObject\n                    - s3:ListBucket\n                    - s3:ListBucketMultipartUploads\n                    - s3:PutObject\n                  Resource:\n                    - \"#{S3Bucket.Arn}\"\n                    - \"#{S3Bucket.Arn}/*\"\n                - Effect: Allow\n                  Action:\n                    - kinesis:DescribeStream\n                    - kinesis:GetShardIterator\n                    - kinesis:GetRecords\n                  Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/%FIREHOSE_STREAM_NAME%\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                    - lambda:GetFunctionConfiguration\n                  Resource:\n                    - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%\n                    - \"#{FirehoseLambdaFunction.Arn}\"\n\n    FirehoseStream:\n      Type: AWS::KinesisFirehose::DeliveryStream\n      Properties:\n        DeliveryStreamType: DirectPut\n        ExtendedS3DestinationConfiguration:\n          BucketARN:\n            Fn::GetAtt: [S3Bucket, Arn]\n          BufferingHints:\n            IntervalInSeconds: 60\n            SizeInMBs: 5\n          CloudWatchLoggingOptions:\n            Enabled: false\n          CompressionFormat: GZIP\n          Prefix: \"\"\n          RoleARN: \n            Fn::GetAtt: [FirehoseDeliveryIamRole, Arn]\n          ProcessingConfiguration:\n            Enabled: true\n            Processors:\n              - Type: Lambda\n                Parameters:\n                  - ParameterName: LambdaArn\n                    ParameterValue: \n                      Fn::GetAtt: [FirehoseLambdaFunction, Arn]\n\n    SnsTopic:\n      Type: AWS::SNS::Topic      \n      Properties: \n        DisplayName: lambda-powertools-demo\n        TopicName: lambda-powertools-demo\n\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        BillingMode: PAY_PER_REQUEST\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n        AttributeDefinitions:\n          - AttributeName: Id\n            AttributeType: S\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n"]},{"id":76601709,"files":["#      _____                          _               \n#     / ____|                        | |              \n#    | (___   ___ _ ____   _____ _ __| | ___  ___ ___ \n#     \\___ \\ / _ \\ '__\\ \\ / / _ \\ '__| |/ _ \\/ __/ __|\n#     ____) |  __/ |   \\ V /  __/ |  | |  __/\\__ \\__ \\\n#    |_____/ \\___|_|    \\_/ \\___|_|  |_|\\___||___/___/\n#      _____ _               \n#     / ____| |          | |                          \n#    | (___ | | __ _  ___| | __                       \n#     \\___ \\| |/ _` |/ __| |/ /                       \n#     ____) | | (_| | (__|   <                        \n#    |_____/|_|\\__,_|\\___|_|\\_\\                       \n#                               \n#\n#\n# This file is the main config file for your bot.\n# You can always add more config options for more control.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n\nservice: serverless-slack\n\ncustom:\n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n  # The dynamodb table to store OAuth access data\n  slack_table_name: Teams\n\n  # The path used to post Slack events to\n  slack_event_path: slack\n\n  # The path used to install the Slack App\n  slack_install_path: slack\n\n  # The path to redirect to after an install\n  slack_install_redirect: https://slack.com\n\n  # Verification token\n  slack_verification_token: \"xxxxxxxxxxxxx\"            \n  \n  # Space delimited scopes\n  slack_client_scopes: \"bot commands incoming-webhook\"\n  \n  # Client ID - quotes required\n  slack_client_id: \"xxxxxxxxxx.xxxxxxxxxxxx\"\n  \n  # Client Secret - quotes required\n  slack_client_secret: \"xxxxxxxxxxxxxxxxxx\"\n  \n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n  environment:\n    TABLE_NAME: ${self:custom.slack_table_name}\n    CLIENT_ID: ${self:custom.slack_client_id}\n    CLIENT_SECRET: ${self:custom.slack_client_secret}\n    CLIENT_SCOPES: ${self:custom.slack_client_scopes}\n    INSTALL_REDIRECT: ${self:custom.slack_install_redirect}\n    VERIFICATION_TOKEN: ${self:custom.slack_verification_token}\n    ENABLE_LOGGING: ${self:custom.slack_enable_logging}\n\n\nfunctions:\n  slack:\n    handler: src/index.handler\n    events:\n      ## Slash Commands, Events, and Interactive Messages\n      - http:\n          path: ${self:custom.slack_event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      \n      ## OAuth Routes      \n      - http:\n          path: ${self:custom.slack_install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"      \n\n\nresources:\n  Resources:\n    TeamsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.slack_table_name}\n"]},{"id":108043859,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'prod'}\n  region: us-east-1\n  timeout: 10 #Default Lambda timeout \n  memorySize: 512 #Default Lambda Memory Size\n  versionFunctions: false # No functions versioning \n  #role: arn:aws:iam::#{AWS::AccountId}:role/existing-role\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n      - .test/**\n  \n  environment: #Global Environment variables\n      ${file(./configs/${self:provider.stage}.yml)}\n\n  iamRoleStatements: # Permissions for all of your functions can be set here\n\n  - Effect: Allow\n    Action: # Gives permission to DynamoDB tables in a specific region\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\n  - Effect: Allow\n    Action: # Gives permission to Lambda execution\n      - lambda:InvokeFunction\n      - lambda:InvokeAsync\n    Resource: \"*\"\n\n  - Effect: Allow\n    Action: # Gives permission to SQS \n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n      - sqs:SendMessage\n    Resource: arn:aws:sqs:*:*:*\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  config: ${self:custom.prefix}-config\n  dynamo-books: ${self:custom.prefix}-BooksCatalog\n  sns-logs: ${self:custom.prefix}-trigger-logs\n  sqs-logs: ${self:custom.prefix}-messages-logs\n\n  serverless-offline:\n    host: '0.0.0.0'\n\n  splitStacks:\n    perFunction: true\n    perType: true\n\n  serverless-offline-sqs-esmq:\n    apiVersion: '2012-11-05'\n    endpoint: http://sqs:9324\n    region: sa-east-1\n    accessKeyId: root\n    secretAccessKey: root\n\n  dynamodb:\n    stages:\n      - local\n      - test\n      - dev\n\n    start:\n      host: \"dynamo\"\n      port: 8000\n      inMemory: false\n      migrate: true\n      noStart: true\n\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-dynamodb-local\n  - serverless-offline-scheduler\n  - serverless-offline-sqs-esmq\n  - serverless-offline\n\nfunctions: ${file(serverless-dynamic.js)}\n\n# Infrastrucure - Cloud Formation\nresources:  # CloudFormation template syntax\n\n  Resources:\n    #DynamoDB Books Table\n    BooksCatalog:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.dynamo-books}\n        AttributeDefinitions:\n          - AttributeName: hashkey\n            AttributeType: S\n        KeySchema:\n          - AttributeName: hashkey\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 1\n\n    # SQS Queue to Update DynamoDB\n    BooksQueueExample:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs-logs}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n"]},{"id":74924589,"files":["service: ${file(config.json):SERVICE_NAME}\n\nplugins:\n  - serverless-plugin-include-dependencies\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${file(config.json):STAGE}\n  region: ${file(config.json):REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:*\"\n      Resource: ${file(config.json):SENDER_ARN}\n\nfunctions:\n  receive:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n          request:\n            parameters:\n              querystrings:\n                format: true\n"]},{"id":159799172,"files":["service: serverless-puppeteer-layers\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\npackage:\n  exclude:\n    - chrome-aws-lambda/**\n    - node_modules/puppeteer/.local-chromium/**\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  puppeteer-orchestrator:\n    handler: handler.index\n    timeout: 30\n    memorySize: 2048\n    events:\n      - http:\n          method: GET\n          path: /screenshot\n          contentHandling: CONVERT_TO_BINARY\n    layers:\n      - { Ref: ChromeLambdaLayer }\n\nlayers:\n  chrome:\n    path: layer\n"]},{"id":82608997,"files":["# 'service' is the name of the service\nservice: ${file(./config.${self:custom.currentStage}.json):serviceName}\n\n# 'custom' = define custom variables used elsewhere in the yaml config\ncustom:\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n  scheduledPostsTable: ${self:service}-${self:custom.currentStage}-scheduled-posts\n\n# 'provider' specifies where to deploy the service. Aka deploy to 'aws'\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # ${self:custom.currentRegion} references the 'custom' field in this file\n  # it grabs the 'currentRegion' key and places it in the 'region' key defined below\n  region: ${self:custom.currentRegion}\n  stage: ${self:custom.currentStage}\n  # 'environment' is where you define any process.env environment variables needed in code\n  environment:\n    GITHUB_WEBHOOK_SECRET: ${file(./config.${self:custom.currentStage}.json):GITHUB_WEBHOOK_SECRET}\n    GITHUB_API_TOKEN: ${file(./config.${self:custom.currentStage}.json):GITHUB_API_TOKEN}\n    GITHUB_USERNAME: ${file(./config.${self:custom.currentStage}.json):GITHUB_USERNAME}\n    GITHUB_REPO: ${file(./config.${self:custom.currentStage}.json):GITHUB_REPO}\n    TIMEZONE: ${file(./config.${self:custom.currentStage}.json):TIMEZONE}\n    SCHEDULED_POSTS_TABLE: ${self:custom.scheduledPostsTable}\n\n  # Set IAM permissions for the functions\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n      - dynamodb:BatchWriteItem\n    # Allow function to access only this database\n    Resource: [\n      \"arn:aws:dynamodb:${self:custom.currentRegion}:*:table/${self:custom.scheduledPostsTable}\"\n      ]\n\n# 'functions' references all the functions and events in the service\nfunctions:\n  githubWebhookListener:\n    handler: handler.githubWebhookListener\n    events:\n      - http:\n          path: webhook\n          method: post\n          cors: true\n  publishScheduledPostCron:\n    handler: handler.publishScheduledPost\n    events:\n      - schedule: ${file(./config.${self:custom.currentStage}.json):CRON}\n\n# 'resources' defines any infrastructure needed for the service aka a database\nresources:\n  Resources:\n    ScheduledPostsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.scheduledPostsTable}\n        AttributeDefinitions:\n          - AttributeName: number\n            AttributeType: N\n        KeySchema:\n          - AttributeName: number\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":85000185,"files":["service: sqs-worker-serverless\n\nplugins:\n  - serverless-sqs-alarms-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n    Resource: arn:aws:dynamodb:*:*:table/${self:custom.config}\n  - Effect: Allow\n    Action:\n      - lambda:InvokeFunction\n    Resource: arn:aws:lambda:*:*:function:${self:custom.process}\n  - Effect: Allow\n    Action:\n      - sqs:DeleteMessage\n      - sqs:ReceiveMessage\n    Resource: arn:aws:sqs:*:*:${self:custom.sqs}\n\ncustom:\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n  process: ${self:custom.prefix}-process\n  config: ${self:custom.prefix}-config\n  sns: ${self:custom.prefix}-trigger\n  sqs: ${self:custom.prefix}-messages\n\n  sqs-alarms:\n    - queue: ${self:custom.sqs}\n      topic: ${self:custom.sns}\n      thresholds:\n        - 1\n        - 50\n        - 100\n        - 500\n        - 1000\n        - 5000\n\npackage:\n  exclude:\n    - docs/**\n    - helpers/**\n    - node_modules/**\n    - test/**\n\nfunctions:\n  scale:\n    timeout: 10\n    handler: functions/scale.handler\n    name: ${self:custom.prefix}-scale\n    environment:\n      config: ${self:custom.config}\n    events:\n      - sns: ${self:custom.sns}\n\n  worker:\n    timeout: 10\n    handler: functions/worker.handler\n    name: ${self:custom.prefix}-worker\n    environment:\n      config: ${self:custom.config}\n      process: ${self:custom.process}\n    events:\n      - schedule: rate(1 minute)\n\n  process:\n    timeout: 60\n    handler: functions/process.handler\n    name: ${self:custom.prefix}-process\n    environment:\n      region: ${self:custom.region}\n      sqs: ${self:custom.sqs}\n\nresources:\n  Resources:\n\n    Messages:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}\n        MessageRetentionPeriod: 1209600\n        VisibilityTimeout: 60\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - MessagesDeadLetterQueue\n            - Arn\n          maxReceiveCount: 10\n\n    MessagesDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.sqs}-dead-letter-queue\n        MessageRetentionPeriod: 1209600\n\n    Config:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.config}\n        AttributeDefinitions:\n          - AttributeName: key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\n"]},{"id":152357359,"files":["service: spider-less\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${self:custom.defaultRegion}\n  stage: ${env:NODE_ENV, self:custom.defaultNodeEnv}\n  environment:\n    NODE_ENV:  ${env:NODE_ENV, self:custom.defaultNodeEnv}\n    REGION: ${self:provider.region}\n    TABLE_SUBSCRIPTIONS: ${self:service}-subscriptions-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\nfunctions:\n  http:\n    handler: src/index.api\n    timeout: 30\n    events:\n      - http:\n          path: /{proxy+}\n          method: any\n          cors: true\n  cron:\n    handler: src/index.cron\n    timeout: 60\n    events:\n      - schedule:\n          rate: rate(60 minutes)\n  scrape:\n    handler: src/index.scrape\n    timeout: 60\n    memorySize: 1536\n\nresources:\n  Resources:\n    SubscriptionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy\n      Properties:\n        TableName: ${self:provider.environment.TABLE_SUBSCRIPTIONS}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-offline\n\ncustom:\n  defaultRegion: us-east-1\n  defaultNodeEnv: dev\n  serverless-offline:\n    dontPrintOutput: true\n"]},{"id":63844996,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-first-service\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: todos\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          method: POST\n          path: todos\n          cors: true\n  readAll:\n    handler: handler.readAll\n    events:\n      - http:\n          method: GET\n          path: todos\n          cors: true\n  readOne:\n    handler: handler.readOne\n    events:\n      - http:\n          method: GET\n          path: todos/{id}\n          cors: true\n  update:\n    handler: handler.update\n    events:\n      - http:\n          method: PUT\n          path: todos/{id}\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          method: DELETE\n          path: todos/{id}\n          cors: true\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'todos'\n"]},{"id":71698545,"files":["service: docker\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n\nplugins:\n  - serverless-plugin-simulate\n\ncustom:\n  simulate:\n    services: docker-compose.yml\n\nfunctions:\n  authorizer:\n    handler: functions/authorizer.handler\n    type: 'TOKEN'\n    identitySource: method.request.header.Authorization\n\n  bffHandler:\n    handler: functions/bff.handler\n    environment:\n      BFF_BACKEND_FUNC: ${self:service}-${opt:stage, self:provider.stage}-bffBackend\n    events:\n      - http:\n          path: bff\n          method: GET\n\n  bffBackend:\n    handler: functions/bff.backend\n\n  error:\n    handler: functions/lambda-proxy.unhandled\n    events:\n      - http:\n          path: error/unhandled\n          method: GET\n\n  unauthorized:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: unauthorized\n          method: GET\n          authorizer: authorizer\n\n  lambda:\n    handler: functions/lambda.success\n    events:\n      - http:\n          integration: lambda\n          path: lambda/{part}\n          method: GET\n          authorizer:\n            name: authorizer\n            type: 'TOKEN'\n            identitySource: method.request.header.Authorization\n      - http:\n          integration: lambda\n          path: lambda\n          method: POST\n          authorizer: authorizer\n      - http:\n          integration: lambda\n          path: lambda\n          method: PUT\n          request:\n            template:\n              application/xml: '{ \"stage\" : \"$context.stage\" }'\n              application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            headers:\n              My-Header: \"'some value'\"\n            template: $input.path('$')\n\n  lambdaError:\n    handler: functions/lambda.error\n    events:\n      - http:\n          path: error/lambda\n          method: GET\n          request:\n            template:\n              application/xml: '{ \"stage\" : \"$context.stage\" }'\n              application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n          response:\n            template: $input.path('$')\n            statusCodes:\n                409:\n                    pattern: '.*\"statusCode\":409,.*'\n                    template:\n                      application/json: $input.path(\"$.errorMessage\") # JSON return object\n                      application/xml: $input.path(\"$.errorMessage\") # XML return object\n                    headers:\n                      My-Header: \"'some value'\"\n\n  lambdaProxy:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: lambda-proxy/{part}\n          method: GET\n          authorizer:\n            name: authorizer\n            type: 'TOKEN'\n            identitySource: method.request.header.Authorization\n      - http:\n          path: lambda-proxy\n          method: POST\n          authorizer: authorizer\n      - http:\n          path: lambda-proxy\n          method: PUT\n\n  lambdaProxyError:\n    handler: functions/lambda-proxy.error\n    events:\n      - http:\n          path: error/lambda-proxy\n          method: GET\n\n  python:\n    handler: functions/handler.endpoint\n    runtime: python2.7\n    events:\n      - http:\n          path: ping\n          method: GET\n\n  anyMethod:\n    handler: functions/lambda-proxy.success\n    events:\n      - http:\n          path: any/{greedy+}\n          method: ANY\n\n\n  timeout:\n    handler: functions/timeout.handler\n    timeout: 1\n    memorySize: 128\n"]},{"id":115457737,"files":["service:\n  name: bitwarden-serverless\n  # When using the `prod` environment the DynamoDB tables will not be\n  # delete when removing the Cloudformation stack. It's better to risk\n  # having a forgotten table running than losing data\n  tableDeletionPolicy:\n    prod: Retain\n    other: Delete\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'prod'}\n  runtime: nodejs10.x\n  memorySize: 256\n  timeout: 10\n  environment:\n    DEVICES_TABLE: ${self:service}-${self:provider.stage}-devices\n    USERS_TABLE: ${self:service}-${self:provider.stage}-users\n    CIPHERS_TABLE: ${self:service}-${self:provider.stage}-ciphers\n    FOLDERS_TABLE: ${self:service}-${self:provider.stage}-folders\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DEVICES_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CIPHERS_TABLE}\"\n        - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOLDERS_TABLE}\"\n  usagePlan:\n    throttle:\n      burstLimit: 300 # request burst\n      rateLimit: 5 # requests per second\n\ndefault_cors: &default_cors\n  cors:\n    origin: \"*\"\n    headers:\n      - Content-Type\n      - Authorization\n      - Accept\n      # Special serverless header being sent\n      - Device-type\n      - Pragma\n      - Cache-Control\n    allowMethods: \"GET, POST, OPTIONS, PUT, DELETE\"\n\nfunctions:\n  # Identity endpoints\n\n  login:\n    handler: src/login.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: identity/connect/token\n\n  # Accounts endpoints\n\n  prelogin:\n    handler: src/prelogin.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/prelogin\n  profile:\n    handler: src/accounts.profileHandler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/accounts/profile\n  profile_put:\n    handler: src/accounts.putProfileHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/accounts/profile\n  keys:\n    handler: src/keys.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/keys\n  register:\n    handler: src/register.handler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/accounts/register\n  accounts_revision_date:\n    handler: src/accounts.revisionDateHandler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/accounts/revision-date\n\n  # Other endpoints, ciphers and data\n\n  sync:\n    handler: src/sync.handler\n    events:\n      - http:\n          method: get\n          <<: *default_cors\n          path: api/sync\n  cipher_post:\n    handler: src/ciphers.postHandler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/ciphers\n  cipher_put:\n    handler: src/ciphers.putHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/ciphers/{uuid}\n  cipher_delete:\n    handler: src/ciphers.deleteHandler\n    events:\n      - http:\n          method: delete\n          <<: *default_cors\n          path: api/ciphers/{uuid}\n  folder_post:\n    handler: src/folders.postHandler\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: api/folders\n  folder_put:\n    handler: src/folders.putHandler\n    events:\n      - http:\n          method: put\n          <<: *default_cors\n          path: api/folders/{uuid}\n  folder_delete:\n    handler: src/folders.deleteHandler\n    events:\n      - http:\n          method: delete\n          <<: *default_cors\n          path: api/folders/{uuid}\n  migrate:\n    handler: src/migrate.migrateHandler\n    timeout: 300\n    memorySize: 1024\n  two_factor_setup:\n    handler: src/two_factor.setupHandler\n  two_factor_complete:\n    handler: src/two_factor.completeHandler\n  import:\n    handler: src/import.postHandler\n    timeout: 30\n    events:\n      - http:\n          method: post\n          <<: *default_cors\n          path: /api/ciphers/import\n  icons:\n    handler: src/icons.handler\n    events:\n      - http:\n          method: get\n          path: /icons/{domain}/icon.png\n  default:\n    handler: src/default.handler\n    events:\n      - http:\n          method: any\n          <<: *default_cors\n          path: /{fallback+}\n\n\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    DevicesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.DEVICES_TABLE}\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    CiphersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.CIPHERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userUuid\n            AttributeType: S\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userUuid\n            KeyType: HASH\n          - AttributeName: uuid\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 3\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n    FoldersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}\n      Properties:\n        TableName: ${self:provider.environment.FOLDERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userUuid\n            AttributeType: S\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userUuid\n            KeyType: HASH\n          - AttributeName: uuid\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n"]},{"id":55360643,"files":["service: iopipe-lib-master-acceptance-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-west-2\n  role: ${env:IAM_ROLE}\n\nfunctions:\n  callback:\n    handler: acceptance/handler.callback\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextSuccess:\n    handler: acceptance/handler.succeed\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextFail:\n    handler: acceptance/handler.fail\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n  contextDone:\n    handler: acceptance/handler.done\n    environment:\n      IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":72846881,"files":["service: serverless-notifications\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - 'iot:DescribeEndpoint'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 'sts:AssumeRole'\n      Resource: \"*\"\n\nfunctions:\n  auth:\n    handler: handler.auth\n    events:\n      - http: GET iot/keys\n    memorySize: 128\n    timeout: 10\n\npackage:\n  exclude:\n    - .git/**\n    - create-role/**\n    - frontend/**\n    - iot/**\n    - LICENSE\n    - README.md"]},{"id":106048902,"files":["service: landsat-tiler\n\nprovider:\n  name: aws\n  runtime: python3.6\n  stage: production\n\n  region: us-west-2\n\n  iamRoleStatements:\n  -  Effect: \"Allow\"\n     Action:\n       - \"s3:GetObject\"\n     Resource:\n       - \"arn:aws:s3:::landsat-pds/*\"\n\n  environment:\n    GDAL_CACHEMAX: 75%\n    GDAL_TIFF_OVR_BLOCKSIZE: 512\n    VSI_CACHE: TRUE\n    VSI_CACHE_SIZE: 536870912\n    GDAL_DISABLE_READDIR_ON_OPEN: true\n    CPL_VSIL_CURL_ALLOWED_EXTENSIONS: \".TIF,.ovr\"\n\n  #Optional Bucket where you store your lambda package\n  # deploymentBucket: {YOUR-BUCKET}\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n\nplugins:\n  - serverless-apigw-binary\n\npackage:\n  artifact: package.zip\n\nfunctions:\n  landsat-tiler:\n    handler: app.landsat.APP\n    memorySize: 1536\n    timeout: 20\n    events:\n      - http:\n          path: landsat/{proxy+}\n          method: get\n          cors: true\n"]},{"id":89182558,"files":["service: realworld\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  environment:\n    DYNAMODB_NAMESPACE: ${opt:stage, \"dev\"}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*\"\n\npackage:\n  exclude:\n    - test/**\n    - coverage/**\n    - lambda-node-logo.png\n    - .nyc_output/**\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nfunctions:\n\n  ## Users API\n  createUser:\n    handler: src/User.create\n    events:\n      - http:\n          method: POST\n          path: /api/users\n          cors: true\n\n  loginUser:\n    handler: src/User.login\n    events:\n      - http:\n          method: POST\n          path: /api/users/login\n          cors: true\n\n  getUser:\n    handler: src/User.get\n    events:\n      - http:\n          method: GET\n          path: /api/user\n          cors: true\n\n  updateUser:\n    handler: src/User.update\n    events:\n      - http:\n          method: PUT\n          path: /api/user\n          cors: true\n\n  getProfile:\n    handler: src/User.getProfile\n    events:\n      - http:\n          method: GET\n          path: /api/profiles/{username}\n          cors: true\n\n  followUser:\n    handler: src/User.follow\n    events:\n      - http:\n          method: POST\n          path: /api/profiles/{username}/follow\n          cors: true\n\n  unfollowUser:\n    handler: src/User.follow\n    events:\n      - http:\n          method: DELETE\n          path: /api/profiles/{username}/follow\n          cors: true\n\n  ## Articles API\n  createArticle:\n    handler: src/Article.create\n    events:\n      - http:\n          method: POST\n          path: /api/articles\n          cors: true\n\n  getArticle:\n    handler: src/Article.get\n    events:\n      - http:\n          method: GET\n          path: /api/articles/{slug}\n          cors: true\n\n  udpateArticle:\n    handler: src/Article.update\n    events:\n      - http:\n          method: PUT\n          path: /api/articles/{slug}\n          cors: true\n\n  deleteArticle:\n    handler: src/Article.delete\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}\n          cors: true\n\n  favoriteArticle:\n    handler: src/Article.favorite\n    events:\n      - http:\n          method: POST\n          path: /api/articles/{slug}/favorite\n          cors: true\n\n  unfavoriteArticle:\n    handler: src/Article.favorite\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}/favorite\n          cors: true\n\n  listArticles:\n    handler: src/Article.list\n    events:\n      - http:\n          method: GET\n          path: /api/articles\n          cors: true\n\n  getArticlesFeed:\n    handler: src/Article.getFeed\n    events:\n      - http:\n          method: GET\n          path: /api/articles/feed\n          cors: true\n\n  getTags:\n    handler: src/Article.getTags\n    events:\n      - http:\n          method: GET\n          path: /api/tags\n          cors: true\n\n  ## Comments API\n  createComment:\n    handler: src/Comment.create\n    events:\n      - http:\n          method: POST\n          path: /api/articles/{slug}/comments\n          cors: true\n\n  getComments:\n    handler: src/Comment.get\n    events:\n      - http:\n          method: GET\n          path: /api/articles/{slug}/comments\n          cors: true\n\n  deleteComment:\n    handler: src/Comment.delete\n    events:\n      - http:\n          method: DELETE\n          path: /api/articles/{slug}/comments/{id}\n          cors: true\n\n  ## Utils API\n  ping:\n    handler: src/Util.ping\n    events:\n      - http:\n          method: GET\n          path: /api/ping\n          cors: true\n\n  purgeData:\n    handler: src/Util.purgeData\n    events:\n      - http: DELETE /api/__TESTUTILS__/purge\n\nresources:\n  Resources:\n\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: username\n            AttributeType: S\n          -\n            AttributeName: email\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users\n        GlobalSecondaryIndexes:\n          -\n            IndexName: email\n            KeySchema:\n              -\n                AttributeName: email\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n    ArticlesDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: slug\n            AttributeType: S\n          -\n            AttributeName: dummy\n            AttributeType: S\n          -\n            AttributeName: updatedAt\n            AttributeType: N\n        KeySchema:\n          -\n            AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles\n        GlobalSecondaryIndexes:\n          -\n            IndexName: updatedAt\n            KeySchema:\n              -\n                AttributeName: dummy\n                KeyType: HASH\n              -\n                AttributeName: updatedAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n\n    CommentsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n          -\n            AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments\n        GlobalSecondaryIndexes:\n          -\n            IndexName: article\n            KeySchema:\n              -\n                AttributeName: slug\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":107423907,"files":["service: image-resize-on-the-fly-bucket\n\ncustom:\n  secrets: ${file(../secrets/secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  region: us-east-1\n  environment:\n    BUCKET: ${env:BUCKET}\n\nresources:\n  Resources:\n    ImageResizeOnTheFly:\n      Type: AWS::S3::Bucket\n      Properties:\n        AccessControl: PublicReadWrite\n        BucketName: ${env:BUCKET}\n        WebsiteConfiguration:\n          ErrorDocument: error.html\n          IndexDocument: index.html\n          RoutingRules:\n            - \n              RedirectRule:\n                HostName: ${self:custom.secrets.DOMAIN}\n                HttpRedirectCode: \"307\"\n                Protocol: \"https\"\n                ReplaceKeyPrefixWith: \"${self:provider.stage}/resize?key=\"\n              RoutingRuleCondition:\n                HttpErrorCodeReturnedEquals: \"404\"\n                KeyPrefixEquals: \"\"\n    ImageResizeOnTheFlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties: \n        Bucket: \n          Ref: ImageResizeOnTheFly\n        PolicyDocument: \n          Statement: \n            - \n              Action: \n                - \"s3:*\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join: \n                  - \"\"\n                  - \n                    - \"arn:aws:s3:::\"\n                    - \n                      Ref: ImageResizeOnTheFly\n                    - \"/*\"\n              Principal: \"*\"","service: image-resize-on-the-fly-functions\n\nplugins:\n  - serverless-plugin-tracing\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:STAGE, 'dev'}\n  profile: serverless-admin\n  tracing: true\n  region: ${env:REGION, 'us-east-1'}\n  environment:\n    BUCKET: ${env:BUCKET}\n    REGION: ${env:REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:ListBucket\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutObject\"\n      Resource: \"arn:aws:s3:::${env:BUCKET}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"xray:PutTraceSegments\"\n        - \"xray:PutTelemetryRecords\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  resize:\n    handler: resize.handler\n    events:\n      - http:\n          path: resize\n          method: get"]},{"id":122835814,"files":["service:\n  name: serverless-with-next\n\nframeworkVersion: \">=1.26.1\"\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-jest-plugin\n  - serverless-domain-manager\n\n# Enable auto-packing of external modules\n# See https://serverless-stack.com/chapters/add-support-for-es6-es7-javascript.html\ncustom:\n  serverless-offline:\n    port: 3000 # We run our SLS endpoints on another port (Next app will run on 3001)\n  webpackIncludeModules: true\n  domains:\n    enabled_development: false\n    url_development: '' # Unused, just avoid SLS warning variable not found\n    enabled_staging: true # TODO Pass this to false if you don't want to use a custom domain (custom domain is currently recommended because it fixes sub routes, but not really if you just wanna play around, see \"Known issues\")\n    url_staging: 'swn.dev.vadorequest.fr'\n    enabled_production: true\n    url_production: 'swn.prod.vadorequest.fr' # TODO change\n  memorySizes: # TODO Check how much is actually needed\n    development: 512 # Unused, just avoid SLS warning variable not found\n    staging: 512\n  customDomain:\n    enabled: ${self:custom.domains.enabled_${self:provider.stage}}\n    domainName: ${self:custom.domains.url_${self:provider.stage}}\n#    basePath: '' # This will be prefixed to all routes\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  timeout: 30 # 30 seconds is the maximal allowed by API Gateway\n  stage: ${opt:stage, 'development'}\n  region: ${opt:region, 'us-east-1'}\n  memorySize: ${self:custom.memorySizes.${self:provider.stage}}\n  environment:\n    NODE_ENV: ${self:provider.stage}\n\n#package:\n#  individually: true\n\nfunctions:\n  server:\n    handler: src/functions/server/server.handler\n    events:\n      - http:\n          method: GET\n          path: /\n      - http:\n          method: GET\n          path: /static/{any+}\n      - http:\n          method: GET\n          path: /_next/{proxy+} # Catch Next specific routes\n      - http:\n          method: ANY\n          path: /{any+} # Catch all unknown routes and redirect to main handler\n\n  status:\n    handler: src/functions/status/status.handler\n    events:\n      - http:\n          method: get\n          path: status\n\n"]},{"id":73476931,"files":["service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-plugin-existing-s3\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: ./s3-local\n    # Uncomment the first line only if you want to use cors with specified policy\n    # Uncomment the second line only if you don't want to use cors\n    # Not uncomment the these lines only if your wanto use cors with default policy\n    # cors: relative/path/to/your/cors.xml\n    # website: relative/path/to/your/website.xml\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          method: get\n  s3EventResponse:\n    handler: handler.s3EventResponse\n    events:\n      - existingS3:\n          bucket: existing-bucket\n          events:\n            - s3:ObjectCreated:Put\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: /tmp\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nfunctions:\n  s3hook:\n    handler: handler.s3hook\n    events:\n      - s3:\n          bucket: local-bucket\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: incoming/\n            - suffix: .jpg\n","service: serverless-s3-local-example\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-s3-local\n  - serverless-offline\n\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: /tmp\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: /\n          method: GET\n  s3hook:\n    handler: handler.s3hook\n    environment:\n      ENV_000: 123\n      ENV_001: 456\n    events:\n      - s3: local-bucket\n","service: serverless-s3-local-example\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-s3-local\n  - serverless-offline\n\ncustom:\n  s3:\n    port: 8000\n    directory: /tmp\n\nfunctions:\n  s3hook:\n    handler: handler.s3hook\n    events:\n      - s3: local-bucket\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-s3-local\n  - serverless-plugin-existing-s3\n  - serverless-offline\ncustom:\n  # Uncomment only if you want to collaborate with serverless-plugin-additional-stacks\n  # additionalStacks:\n  #    permanent:\n  #      Resources:\n  #        S3BucketData:\n  #            Type: AWS::S3::Bucket\n  #            Properties:\n  #                BucketName: ${self:service}-data\n  s3:\n    port: 8000\n    directory: ./s3-local\n    # Uncomment the first line only if you want to use cors with specified policy\n    # Uncomment the second line only if you don't want to use cors\n    # Not uncomment the these lines only if your wanto use cors with default policy\n    # cors: relative/path/to/your/cors.xml\n    # website: relative/path/to/your/website.xml\n    # Uncomment only if you already have a S3 server running locally\n    # noStart: true\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          method: get\n","service: serverless-s3-local-example\nprovider:\n  name: aws\n  runtime: nodejs8.10\nplugins:\n  - serverless-webpack\n  - serverless-s3-local\n  - serverless-offline\ncustom:\n  webpackIncludeModules: true\n  s3:\n    port: 8000\n    directory: /tmp\n\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\nfunctions:\n  webhook:\n    handler: src/handler.webhook\n    events:\n      - http:\n          method: GET\n  s3hook:\n    handler: src/handler.s3hook\n    events:\n      - s3: local-bucket\n"]},{"id":67488466,"files":["service: ${self:provider.environment.FAULTLINE_SERVICE_NAME}\n\nframeworkVersion: \">=1.24.1 <2.0.0\"\n\nprovider:\n  name: aws\n  environment:\n    FAULTLINE_STAGE: ${env:FAULTLINE_STAGE, file(./config.yml):stage, 'dev'}\n    FAULTLINE_SERVICE_NAME: ${env:FAULTLINE_SERVICE_NAME, file(./config.yml):serviceName, 'faultline'}\n    FAULTLINE_REGION: ${env:FAULTLINE_REGION, file(./config.yml):region, 'us-east-1'}\n    FAULTLINE_S3_BUCKET_NAME: ${env:FAULTLINE_S3_BUCKET_NAME, file(./config.yml):s3BucketName}\n    FAULTLINE_DEPLOYMENT_BUCKET: ${file(./config.yml):deploymentBucket, ''}\n    FAULTLINE_DYNAMODB_TABLE_PREFIX: ${env:FAULTLINE_DYNAMODB_TABLE_PREFIX, file(./config.yml):dynamodbTablePrefix, 'faultline'}\n    FAULTLINE_DYNAMODB_TABLE_SUFFIX: ${env:FAULTLINE_DYNAMODB_TABLE_SUFFIX, file(./config.yml):dynamodbTableSuffix, \"-${self:provider.environment.FAULTLINE_STAGE}\"}\n    FAULTLINE_DYNAMODB_READ_CAPACITY_UNITS: ${env:FAULTLINE_DYNAMODB_READ_CAPACITY_UNITS, file(./config.yml):dynamodbReadCapacityUnits, '1'}\n    FAULTLINE_DYNAMODB_WRITE_CAPACITY_UNITS: ${env:FAULTLINE_DYNAMODB_WRITE_CAPACITY_UNITS, file(./config.yml):dynamodbWriteCapacityUnits, '1'}\n    FAULTLINE_TIMEUNIT: ${env:FAULTLINE_TIMEUNIT, file(./config.yml):timeunit, 'minute'}\n    FAULTLINE_MASTER_API_KEY: ${env:FAULTLINE_MASTER_API_KEY, file(./config.yml):masterApiKey}\n    FAULTLINE_CLIENT_API_KEY: ${env:FAULTLINE_CLIENT_API_KEY, file(./config.yml):clientApiKey}\n    FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS: ${env:FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS, file(./config.yml):errorDataRetentionInDays, '-1'}\n    FAULTLINE_LOG_RETENTION_IN_DAYS: ${env:FAULTLINE_LOG_RETENTION_IN_DAYS, file(./config.yml):logRetentionInDays, '180'}\n    FAULTLINE_USE_KMS: ${env:FAULTLINE_USE_KMS, file(./config.yml):useKms, '0'}\n    FAULTLINE_KMS_KEY_ALIAS: ${env:FAULTLINE_KMS_KEY_ALIAS, file(./config.yml):kmsKeyAlias, 'faultline'}\n    FAULTLINE_VERSION: ${file(./package.json):version}\n  runtime: nodejs12.x\n  stage: ${self:provider.environment.FAULTLINE_STAGE}\n  region: ${self:provider.environment.FAULTLINE_REGION}\n  deploymentBucket: ${self:provider.environment.FAULTLINE_DEPLOYMENT_BUCKET}\n  timeout: 10\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: Allow\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:dynamodb:\", \"${self:provider.environment.FAULTLINE_REGION}\", \":*:*\" ] ] }\n      Action:\n        - \"dynamodb:*\"\n    - Effect: Allow\n      Action:\n        - \"s3:ListBucket\"\n        - \"s3:GetObject\"\n        - \"s3:PutObject\"\n        - \"s3:DeleteObject\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}\"] ] }\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}\n            - \"/*\"\n    - Effect: Allow\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n      Resource:\n        - \"arn:aws:lambda:${self:provider.environment.FAULTLINE_REGION}:*:function:${self:provider.environment.FAULTLINE_SERVICE_NAME}-${self:provider.stage}-callNotifications\"\n    - Effect: Allow\n      Action:\n        - \"kms:Encrypt\"\n        - \"kms:Decrypt\"\n        - \"kms:ListAliases\"\n      Resource:\n        - \"*\"\n\npackage:\n  exclude:\n    - .github/**\n    - .nyc_output/**\n    - coverage/**\n    - docs/**\n    - src/**/__tests__/*.js\n\nplugins:\n  - faultline-env-checker\n  - faultline-resources\n  - serverless-prune-plugin\n\nfunctions:\n  projectsList:\n    handler: src/handlers/projectsList.handler\n    events:\n      - http:\n          path: projects\n          method: get\n          cors: true\n          integration: lambda-proxy\n  projectsDelete:\n    handler: src/handlers/projectsDelete.handler\n    timeout: 30\n    events:\n      - http:\n          path: projects/{project}\n          method: delete\n          cors: true\n          integration: lambda-proxy\n  errorsPost:\n    handler: src/handlers/errorsPost.handler\n    events:\n      - http:\n          path: projects/{project}/errors\n          method: post\n          integration: lambda-proxy\n  errorsList:\n    handler: src/handlers/errorsList.handler\n    events:\n      - http:\n          path: projects/{project}/errors\n          method: get\n          cors: true\n          integration: lambda-proxy\n  errorsGet:\n    handler: src/handlers/errorsGet.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: get\n          cors: true\n          integration: lambda-proxy\n  errorsPatch:\n    handler: src/handlers/errorsPatch.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: patch\n          cors: true\n          integration: lambda-proxy\n  errorsDelete:\n    handler: src/handlers/errorsDelete.handler\n    timeout: 30\n    events:\n      - http:\n          path: projects/{project}/errors/{message}\n          method: delete\n          cors: true\n          integration: lambda-proxy\n  occurrencesList:\n    handler: src/handlers/occurrencesList.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}/occurrences\n          method: get\n          cors: true\n          integration: lambda-proxy\n  occurrencesGet:\n    handler: src/handlers/occurrencesGet.handler\n    events:\n      - http:\n          path: projects/{project}/errors/{message}/occurrences/{reversedUnixtime}\n          method: get\n          cors: true\n          integration: lambda-proxy\n  callNotifications:\n    handler: src/handlers/callNotifications.handler\n    timeout: 30\n  deleteExpiredErrors:\n    handler: src/handlers/deleteExpiredErrors.handler\n    events:\n      - schedule:\n          rate: cron(0 0 * * ? *)\n          enabled: false # ${env:FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS, file(./config.yml):errorDataRetentionInDays, '-1'}\n  encrypt:\n    handler: src/handlers/encrypt.handler\n    events:\n      - http:\n          path: encrypt\n          method: post\n          integration: lambda-proxy\n  info:\n    handler: src/handlers/info.handler\n    events:\n      - http:\n          path: info\n          method: get\n          cors: true\n          integration: lambda-proxy\n"]},{"id":174438690,"files":["service: my-service\n\nplugins:\n  localPath: '../../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\ncustom:\n  bundle:\n    linting: false\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: services/main/handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  default:\n    handler: handler.hello\n  hello:\n    handler: _warmup/index.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: my-service\n\nplugins:\n  localPath: '../../'\n  modules:\n    - index\n\ncustom:\n  bundle:\n    copyFiles:\n      - to: './'\n        from: 'public/*'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":159688756,"files":["service: ssr-react-next\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  server:\n    handler: index.server\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  \nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN}\n    basePath: ''\n    stage: ${self:custom.secrets.NODE_ENV}\n    createRoute53Record: true\n    # endpointType: 'regional'\n    # if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`"]},{"id":144729463,"files":["service: serverless-side-rendering-vue-nuxt\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n  api:\n    handler: index.api\n    events:\n      - http: ANY /api\n      - http: ANY /api/{proxy+}\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-domain-manager\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  apigwBinary:\n    types:\n      - '*/*'\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN}\n    basePath: ''\n    stage: ${self:custom.secrets.NODE_ENV}\n    createRoute53Record: true\n    # endpointType: 'regional'\n    # if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`"]},{"id":94588559,"files":["service: kinesis-stream-fanout\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  processPositive:\n    handler: lambda/handler.processPositive\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n          arn:\n            Fn::GetAtt:\n              - PositiveTransactionsStream\n              - Arn\n  processNegative:\n    handler: lambda/handler.processNegative\n    timeout: 10\n    events:\n      - stream:\n          type: kinesis\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n          enabled: true\n          arn:\n            Fn::GetAtt:\n              - NegativeTransactionsStream\n              - Arn\n\nresources:\n  Resources:\n    TransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: Transactions\n        ShardCount: 1\n    PositiveTransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: PositiveTransactions\n        ShardCount: 1\n    NegativeTransactionsStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: NegativeTransactions\n        ShardCount: 1\n    KinesisAnalyticsIAMRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Sid: 'KinesisAnalyticsAssumeRole'\n              Effect: Allow\n              Principal:\n                Service: kinesisanalytics.amazonaws.com\n              Action: 'sts:AssumeRole'\n        Policies:\n          - PolicyName: kinesis-stream-fanout-kinesis-analytics\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:GetShardIterator\"\n                    - \"kinesis:GetRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - TransactionsStream\n                      - Arn\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:PutRecord\"\n                    - \"kinesis:PutRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - PositiveTransactionsStream\n                      - Arn\n                - Effect: \"Allow\"\n                  Action:\n                    - \"kinesis:DescribeStream\"\n                    - \"kinesis:PutRecord\"\n                    - \"kinesis:PutRecords\"\n                  Resource:\n                    'Fn::GetAtt':\n                      - NegativeTransactionsStream\n                      - Arn\n  Outputs:\n    TransactionsStreamARN:\n      Description: Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - TransactionsStream\n          - Arn\n    PositiveTransactionsStreamARN:\n      Description: Positive Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - PositiveTransactionsStream\n          - Arn\n    NegativeTransactionsStreamARN:\n      Description: Negative Transactions Kinesis Stream ARN\n      Value:\n        'Fn::GetAtt':\n          - NegativeTransactionsStream\n          - Arn\n    KinesisAnalyticsIAMRoleARN:\n      Description: IAM Role ARN for Kinesis Analytics\n      Value:\n        'Fn::GetAtt':\n          - KinesisAnalyticsIAMRole\n          - Arn\n"]},{"id":101673357,"files":["service: serverless-medium-transcriptions\n\npackage:\n  exclude:\n    - front/**\n    - assets/**\n    - LICENSE\n    - README.md\n    - sample-article.json\n\ncustom:\n  serverless-offline:\n    port: 1337\n  s3:\n    bucket: serverless-medium-transcriptions-${opt:stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    TRANSCRIPTS_BUCKET: ${self:custom.s3.bucket}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:*'\n      Resource: '*'\n    - Effect: 'Allow'\n      Action:\n        - 'polly:SynthesizeSpeech'\n      Resource: '*'\n\nfunctions:\n  transcoder:\n    handler: transcoder.handle\n    events:\n      - http:\n          path: transcode\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3.bucket}\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\n"]},{"id":81650763,"files":["service: users\n\nfunctions:   \n usersCreate:\n   events:   \n     - http: post users/create\n usersCreate:\n   events:\n     - http: delete users/delete\n\nresource:\n","service: serverless-simple-http-endpoint\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n currentTime:\n   handler: handler.endpoint\n   events:\n     - http:\n         path: ping\n         method: get\n","service: aws-node-iot-event\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n log:\n   handler: handler.log\n   events:\n     - iot:\n         sql: \"SELECT * FROM 'mybutton'\"","service: scheduled-cron-example\n\nprovider:\n name: aws\n runtime: nodejs4.3\n\nfunctions:\n cron:\n   handler: handler.run\n   events:\n     - schedule: rate(1 minute) \n secondCron:\n   handler: handler.run\n   events:\n     - schedule: cron(0/2 * ? * MON-FRI *) \n","service: aws-python-alexa-skill\n\nprovider:\n name: aws\n runtime: python2.7\n\nfunctions:\n luckyNumber:\n   handler: handler.lucky_number\n   events:\n     - alexaSkill\n","service: users\n\nprovider:\n name: aws\n runtime: nodejs4.3\n memorySize: 512\n\nfunctions:\n usersCreate:   \n   handler: index.create\n   events:      \n     - http:\n         path: users/create\n         method: post\n usersDelete:   \n   handler: index.delete\n   events:      \n     - http:\n         path: users/delete\n         method: delete\n\nresource:       \n Resource:\n   usersTable:\n     Type: AWS::DynamoDB::Table\n     Properties:\n       TableName: usersTable\n       AttributeDefinitions:\n         - AttributeName: email\n           AttributeType: S\n       KeySchema:\n         - AttributeName: email\n           KeyType: HASH\n       ProvisionedThroughput:\n         ReadCapacityUnits: 1\n         WriteCapacityUnits: 1\n"]},{"id":61877309,"files":["service: letsmeetup\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  cfLogs: true\n  stage: development\n  region: ap-northeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"arn:aws:dynamodb:*:*:*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nplugins:\n  - serverless-webpack\n\n# neeed to work on these plugins to enable faster development\n# plugins:\n#   - serverless-dynamodb-local\n#   - serverless-offline\n\ncustom: ${file(./config.json)}\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda\n          memorySize: 256\n          timeout: 10\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n  secondLambda:\n    handler: handler.secondLambda\n    events:\n      - sns: slackbot\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"eventId\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"eventId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: \"event\"\n"]},{"id":52991635,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: serverless-boilerplate # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  cfLogs: true\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n#    - Effect: Allow\n#      Action:\n#      - dynamodb:*\n#      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n#    - Effect: Allow\n#      Action:\n#      - SNS:*\n#      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\n#    - Effect: Allow\n#      Action:\n#      - KMS:Decrypt\n#      Resource: ${self:custom.kmsSecrets.keyArn}\npackage:\n  individually: true\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n  - serverless-kms-secrets\n  - serverless-plugin-custom-roles\n  - serverless-plugin-split-stacks\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n# Uncomment these if you need to run the service offline for testing\n#    preTestCommands:\n#      - bash .tools/startOffline.sh\n#    postTestCommands:\n#      - bash .tools/stopOffline.sh\n  webpackIncludeModules: true\n#  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}\n\n\n\n#resources:\n#  Resources:\n#    SessionsTable:\n#      Type: AWS::DynamoDB::Table\n#      DeletionPolicy: Delete\n#      Properties:\n#        AttributeDefinitions:\n#          - AttributeName: id\n#            AttributeType: S\n#        KeySchema:\n#          - AttributeName: id\n#            KeyType: HASH\n#        ProvisionedThroughput:\n#          ReadCapacityUnits: 1\n#          WriteCapacityUnits: 1\n#        TableName: ${self:provider.environment.TABLE_NAME}"]},{"id":95754625,"files":["service: ${file(package.json):name}\n\nplugins:\n  # - serverless-plugin-diff\n  - serverless-webpack\n\ncustom:\n  cloudWatchNamespace: Coinboss\n  highBuyPriceTopicName: ${self:service}-high-buy-price-${self:custom.stage}\n  lowBuyPriceTopicName: ${self:service}-low-buy-price-${self:custom.stage}\n  highSellPriceTopicName: ${self:service}-high-sell-price-${self:custom.stage}\n  lowSellPriceTopicName: ${self:service}-low-sell-price-${self:custom.stage}\n  stage: ${env:STAGE}\n  webpackIncludeModules: true\n\nprovider:\n  cfLogs: true\n  environment:\n    ENVIRONMENT: ${self:custom.stage}\n    NODE_ENV: ${self:custom.stage}\n    REGION: ${self:provider.region}\n    SERVICE_NAME: ${self:service}\n    STAGE: ${self:custom.stage}\n    VERSION: ${file(package.json):version}\n    # API Providers\n    COINBASE_API_KEY: ${env:COINBASE_API_KEY}\n    COINBASE_API_SECRET: ${env:COINBASE_API_SECRET}\n    # Exchange/Buy Settings\n    PREFERRED_CRYPTO_CURRENCY: ${env:PREFERRED_CRYPTO_CURRENCY}\n    PREFERRED_LOCAL_CURRENCY: ${env:PREFERRED_LOCAL_CURRENCY}\n    PREFERRED_WALLET: ${env:PREFERRED_WALLET}\n    BUY_AMOUNT: ${env:BUY_AMOUNT}\n    SELL_AMOUNT: ${env:SELL_AMOUNT}\n    # Alarm settings\n    CLOUDWATCH_NAMESPACE: ${self:custom.cloudWatchNamespace}\n    LOW_BUY_PRICE_THRESHOLD: ${env:LOW_BUY_PRICE_THRESHOLD}\n    HIGH_BUY_PRICE_THRESHOLD: ${env:HIGH_BUY_PRICE_THRESHOLD}\n    LOW_SELL_PRICE_THRESHOLD: ${env:LOW_SELL_PRICE_THRESHOLD}\n    HIGH_SELL_PRICE_THRESHOLD: ${env:HIGH_SELL_PRICE_THRESHOLD}\n    # SMS Settings\n    AWS_SMS_REGION: ${env:AWS_SMS_REGION}\n    AWS_SMS_TO: ${env:AWS_SMS_TO}\n  iamRoleStatements: ${file(cloudformation/iam.yml)}\n  name: aws\n  profile: ${env:AWS_PROFILE}\n  region: ${env:REGION}\n  runtime: nodejs6.10\n  versionFunctions: false\n\nfunctions:\n  getExchangeRates:\n    handler: handler.getExchangeRates\n    memorySize: 128\n    timeout: 5\n    events:\n      - schedule:\n          rate: rate(1 minute)\n          enabled: true\n      # - http:\n      #     method: GET\n      #     path: getExchangeRates\n\n  exchangeRateAlarm:\n    handler: handler.exchangeRateAlarm\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: HighBuyPriceTopic\n          topicName: ${self:custom.highBuyPriceTopicName}\n      - sns:\n          arn:\n            Ref: LowSellPriceTopic\n          topicName: ${self:custom.lowSellPriceTopicName}\n\n  buy:\n    handler: handler.buy\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: LowBuyPriceTopic\n          topicName: ${self:custom.lowBuyPriceTopicName}\n      # - http:\n      #     method: GET\n      #     path: buy\n\n  sell:\n    handler: handler.sell\n    memorySize: 128\n    timeout: 30\n    events:\n      - sns:\n          arn:\n            Ref: HighSellPriceTopic\n          topicName: ${self:custom.highSellPriceTopicName}\n      # - http:\n      #     method: GET\n      #     path: sell\n\nresources: ${file(cloudformation/template.yml)}\n"]},{"id":140176329,"files":["service: $APP_NAME\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'prod'}\n  region: us-east-1\n  timeout: 10\n\nfunctions:\n  app:\n    handler: node_modules/next-serverless/lib/server.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      NODE_ENV: production\n"]},{"id":108839908,"files":["service: auto-remediate\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: v1\n  region: ${opt:region, 'us-east-1'}\n  timeout: 10 # optional, in seconds, default is 6\n  stackTags:\n    service: auto-remediate\n\nfunctions:\n\n  AutoRemediateOrchestrator:\n    handler: functions/AutoRemediateOrchestrator.handler\n    timeout: 10\n    memorySize: 128\n    events:\n      - sns:\n          topicName: CloudConformity\n          displayName: CloudConformity topic\n    tags:\n      Name: Auto Remediate Orchestrator\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateOrchestrator.js\n    role: AutoRemediateOrchestratorRole\n\n  AutoRemediateS3-016:\n    handler: functions/AutoRemediateS3-016.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-016\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-016.js\n    role: AutoRemediateS3016Role\n\n  AutoRemediateIAM-001:\n    handler: functions/AutoRemediateIAM-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate IAM-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateIAM-001.js\n    role: AutoRemediateIAM001Role\n\n  AutoRemediateCT-001:\n    handler: functions/AutoRemediateCT-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CT-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCT-001.js\n    role: AutoRemediateCT001Role\n\n  AutoRemediateLambda-003:\n    handler: functions/AutoRemediateLambda-003.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Lambda-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateLambda-003.js\n    role: AutoRemediateLambda003Role\n\n  AutoRemediateS3-001:\n    handler: functions/AutoRemediateS3-001.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-001.js\n    role: AutoRemediateS3001Role\n\n  AutoRemediateS3-002:\n    handler: functions/AutoRemediateS3-002.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-002.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3002Role\n\n\n  AutoRemediateIAM-038:\n    handler: functions/AutoRemediateIAM-038.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate IAM-038\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateIAM-038.js\n    role: AutoRemediateIAM038Role\n\n  AutoRemediateS3-014:\n    handler: functions/AutoRemediateS3-014.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-014\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-014.js\n    role: AutoRemediateS3014Role\n\n  AutoRemediateS3-003:\n    handler: functions/AutoRemediateS3-003.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-003.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3003Role\n\n  AutoRemediateKMS-002:\n    handler: functions/AutoRemediateKMS-002.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate KMS-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKMS-002.js\n    role: AutoRemediateKMS002Role\n\n\n\n  AutoRemediateS3-004:\n    handler: functions/AutoRemediateS3-004.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-004.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3004Role\n\n\n  AutoRemediateRDS-023:\n    handler: functions/AutoRemediateRDS-023.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate RDS-023\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-023.js\n    role: AutoRemediateRDS023Role\n\n  AutoRemediateGD-001:\n    handler: functions/AutoRemediateGD-001.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate GD-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateGD-001.js\n    role: AutoRemediateGD001Role\n\n  AutoRemediateS3-005:\n    handler: functions/AutoRemediateS3-005.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-005.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3005Role\n\n  AutoRemediateS3-006:\n    handler: functions/AutoRemediateS3-006.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-006.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3006Role\n\n  AutoRemediateS3-007:\n    handler: functions/AutoRemediateS3-007.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-007\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-007.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3007Role\n\n\n  AutoRemediateKMS-004:\n    handler: functions/AutoRemediateKMS-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate KMS-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKMS-004.js\n    role: AutoRemediateKMS004Role\n\n\n  AutoRemediateOrganizations-002:\n    handler: functions/AutoRemediateOrganizations-002.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate Organizations-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateOrganizations-002.js\n    role: AutoRemediateOrganizations002Role\n\n  AutoRemediateS3-008:\n    handler: functions/AutoRemediateS3-008.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-008.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3008Role\n\n  AutoRemediateS3-009:\n    handler: functions/AutoRemediateS3-009.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-009\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-009.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3009Role\n\n  AutoRemediateCT-003:\n    handler: functions/AutoRemediateCT-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CT-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCT-003.js\n    role: AutoRemediateCT003Role\n\n  AutoRemediateRDS-006:\n    handler: functions/AutoRemediateRDS-006.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RDS-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-006.js\n    role: AutoRemediateRDS006Role\n\n  AutoRemediateS3-010:\n    handler: functions/AutoRemediateS3-010.handler\n    memorySize: 128\n    timeout: 10\n    tags:\n      Name: Auto Remediate S3-010\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-010.js\n        - utils/S3_utils.js\n        - node_modules/lodash.isequal/**\n    role: AutoRemediateS3010Role\n\n  AutoRemediateS3-012:\n    handler: functions/AutoRemediateS3-012.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate S3-012\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateS3-012.js\n    role: AutoRemediateS3012Role\n\n  AutoRemediateSQS-004:\n    handler: functions/AutoRemediateSQS-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate SQS-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateSQS-004.js\n    role: AutoRemediateSQS004Role\n  AutoRemediateRDS-008:\n    handler: functions/AutoRemediateRDS-008.handler\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RDS-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRDS-008.js\n    role: AutoRemediateRDS008Role\n\n  AutoRemediateConfig-001:\n    handler: functions/AutoRemediateConfig-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Config-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateConfig-001.js\n    role: AutoRemediateConfig001Role\n\n  AutoRemediateCFM-005:\n    handler: functions/AutoRemediateCFM-005.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate CFM-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateCFM-005.js\n    role: AutoRemediateCFM005Role\n\n  AutoRemediateVPC-001:\n    handler: functions/AutoRemediateVPC-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate VPC-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateVPC-001.js\n    role: AutoRemediateVPC001Role\n\n  AutoRemediateEBS-009:\n    handler: functions/AutoRemediateEBS-009.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EBS-009\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEBS-009.js\n    role: AutoRemediateEBS009Role\n\n\n  AutoRemediateRS-001:\n    handler: functions/AutoRemediateRS-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-001.js\n    role: AutoRemediateRS001Role\n\n  AutoRemediateEC2-002:\n    handler: functions/AutoRemediateEC2-002.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-002\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-002.js\n    role: AutoRemediateEC2002Role\n\n  AutoRemediateRS-019:\n    handler: functions/AutoRemediateRS-019.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-019\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-019.js\n    role: AutoRemediateRS019Role\n\n  AutoRemediateEC2-003:\n    handler: functions/AutoRemediateEC2-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-003.js\n    role: AutoRemediateEC2003Role\n\n  AutoRemediateEC2-005:\n    handler: functions/AutoRemediateEC2-005.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-005\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-005.js\n    role: AutoRemediateEC2005Role\n\n  AutoRemediateEC2-019:\n    handler: functions/AutoRemediateEC2-019.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-019\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-019.js\n    role: AutoRemediateEC2019Role\n\n  AutoRemediateEC2-004:\n    handler: functions/AutoRemediateEC2-004.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-004\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-004.js\n    role: AutoRemediateEC2004Role\n\n  AutoRemediateEC2-006:\n    handler: functions/AutoRemediateEC2-006.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-006\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-006.js\n    role: AutoRemediateEC2006Role\n\n  AutoRemediateEC2-008:\n    handler: functions/AutoRemediateEC2-008.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-008\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-008.js\n    role: AutoRemediateEC2008Role\n\n  AutoRemediateEC2-043:\n    handler: functions/AutoRemediateEC2-043.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-043\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-043.js\n    role: AutoRemediateEC2043Role\n\n  AutoRemediateRS-023:\n    handler: functions/AutoRemediateRS-023.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate RS-023\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateRS-023.js\n    role: AutoRemediateRS023Role\n\n\n  AutoRemediateEC2-045:\n    handler: functions/AutoRemediateEC2-045.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-045\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-045.js\n    role: AutoRemediateEC2045Role\n\n  AutoRemediateEC2-038:\n    handler: functions/AutoRemediateEC2-038.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-038\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-038.js\n    role: AutoRemediateEC2038Role\n\n  AutoRemediateEC2-040:\n    handler: functions/AutoRemediateEC2-040.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-040\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-040.js\n    role: AutoRemediateEC2040Role\n\n  AutoRemediateEC2-039:\n    handler: functions/AutoRemediateEC2-039.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate EC2-039\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateEC2-039.js\n    role: AutoRemediateEC2039Role\n\n  TrustedAdvisor-003:\n    handler: functions/AutoRemediateTrustedAdvisor-003.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate TrustedAdvisor-003\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateTrustedAdvisor-003.js\n    role: AutoRemediateTrustedAdvisor003Role\n\n  AutoRemediateKinesis-001:\n    handler: functions/AutoRemediateKinesis-001.handler\n    timeout: 120\n    memorySize: 128\n    tags:\n      Name: Auto Remediate Kinesis-001\n      Owner: CloudConformity\n      Role: Auto Remediate\n      Environment: Ops\n    package:\n      include:\n        - functions/AutoRemediateKinesis-001.js\n    role: AutoRemediateKinesis001Role\nresources:\n\n  Resources:\n\n    AutoRemediateEC2002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateS3014Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-014Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-014Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketPolicy\n                    - s3:PutBucketPolicy\n                  Resource: \"*\"\n\n\n    AutoRemediateEC2005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateLambda003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateLambda-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateLambda-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - lambda:UpdateFunctionConfiguration\n                    - lambda:GetFunctionConfiguration\n                    - iam:AttachRolePolicy\n\n                  Resource: \"*\"\n\n    AutoRemediateEC2043Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-043Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-043Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateIAM001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateIAM-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateIAM-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateEC2042Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-042Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-042Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRS001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyCluster\n                  Resource: \"*\"\n\n    AutoRemediateKMS002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKMS-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateKMS-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - kms:EnableKeyRotation\n                  Resource: \"*\"\n\n    AutoRemediateCFM005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCFM-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCFM-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cloudformation:UpdateTerminationProtection\n                  Resource: \"*\"\n\n    AutoRemediateRS019Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-019Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-019Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyCluster\n                  Resource: \"*\"\n\n    AutoRemediateConfig001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateConfig-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateConfig-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - config:PutConfigurationRecorder\n                    - config:PutDeliveryChannel\n                    - config:StartConfigurationRecorder\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - iam:AttachRolePolicy\n                    - iam:CreateRole\n                    - iam:GetRole\n                    - iam:PassRole\n                    - iam:PutRolePolicy\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - sts:GetCallerIdentity\n                  Resource: \"*\"\n\n    AutoRemediateRDS008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDBInstance\n                  Resource: \"*\"\n\n    AutoRemediateCT001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCT-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCT-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - cloudtrail:UpdateTrail\n                  Resource: \"*\"\n\n    AutoRemediateS3001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateGD001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateGD-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateGD-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - guardduty:CreateDetector\n                    - iam:CreateServiceLinkedRole\n                  Resource: \"*\"\n\n    AutoRemediateS3009Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-009Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-009Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateIAM038Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateIAM-038Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateIAM-038Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateS3012Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-012Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-012Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:PutBucketVersioning\n                  Resource: \"*\"\n\n\n    AutoRemediateOrganizations002Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateOrganizations-002Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateOrganizations-002Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - organizations:EnableAllFeatures\n                  Resource: \"*\"\n\n    AutoRemediateOrchestratorRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateOrchestratorRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateOrchestratorPolicy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"*\"\n\n    AutoRemediateS3004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateEBS009Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEBS-009Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEBS-009Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:ModifySnapshotAttribute\n                  Resource: \"*\"\n\n    AutoRemediateS3005Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-005Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-005Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3007Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-007Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-007Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateEC2019Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-019Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-019Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:ModifyImageAttribute\n                  Resource: \"*\"\n\n\n    AutoRemediateS3008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateS3010Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-010Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-010Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketAcl\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateRDS006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDbInstance\n                  Resource: \"*\"\n\n    AutoRemediateS3016Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateS3-016Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateS3-016Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:GetBucketPolicy\n                    - s3:PutBucketPolicy\n                  Resource: \"*\"\n\n    AutoRemediateVPC001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateVPC-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateVPC-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:AttachRolePolicy\n                    - iam:CreateRole\n                    - iam:GetRole\n                    - iam:PassRole\n                    - iam:PutRolePolicy\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - ec2:CreateFlowLogs\n                  Resource: \"*\"\n\n    AutoRemediateEC2008Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-008Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-008Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2045Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-045Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-045Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRS023Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRS-023Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRS-023Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - redshift:ModifyClusterParameterGroup\n                  Resource: \"*\"\n\n    AutoRemediateEC2006Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-006Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-006Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateRDS023Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateRDS-023Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateRDS-023Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - rds:ModifyDBSnapshotAttribute\n                  Resource: \"*\"\n\n    AutoRemediateEC2038Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-038Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-038Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n\n    AutoRemediateEC2040Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-040Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-040Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateCT003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateCT-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateCT-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - s3:PutBucketAcl\n                  Resource: \"*\"\n\n    AutoRemediateKMS004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKMS-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateKMS-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - kms:CancelKeyDeletion\n                  Resource: \"*\"\n\n    AutoRemediateEC2004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateEC2039Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateEC2-039Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateEC2-039Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:RevokeSecurityGroupIngress\n                  Resource: \"*\"\n\n    AutoRemediateTrustedAdvisor003Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateTrustedAdvisor-003Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: AutoRemediateTrustedAdvisor-003Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - iam:UpdateAccessKey\n                  Resource: \"*\"\n\n    AutoRemediateSQS004Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateSQS-004Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: SQS-004Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"kms:ListKeys\"\n                    - \"kms:ListAliases\"\n                    - \"kms:DescribeKey\"\n                    - \"sqs:SetQueueAttributes\"\n                  Resource: \"*\"\n\n    AutoRemediateKinesis001Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: AutoRemediateKinesis-001Role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: Kinesis-001Policy\n            PolicyDocument:\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"kms:ListKeys\"\n                    - \"kms:ListAliases\"\n                    - \"kms:DescribeKey\"\n                    - \"kinesis:StartStreamEncryption\"\n                  Resource: \"*\"\n"]},{"id":186600472,"files":["service: image-resize\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-south-1\n  apiKeys:\n    - ${env:MY_API_KEY}\n  usagePlan:\n    quota:\n      limit: 50 #The maximum number of requests that can be made in a given time period.\n      offset: 2 #The number of requests subtracted from the given limit in the initial time period.\n      period: MONTH #The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".\n    throttle:\n      burstLimit: 10 #The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity. \n      rateLimit: 10 #The API request steady-state rate limit (average requests per second over an extended period of time)\n\n\nfunctions:\n  imageResize:\n    handler: handler.imageResize\n\n    events:\n      - http:\n          path: image/resize\n          method: get\n          cors: true\n          private: true\n\n"]},{"id":55006901,"files":["service: open-api\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    AUTH0_CLIENT_ID: ${file(./src/config/secrets.js):getSecret.AUTH0_CLIENT_ID}\n    AUTH0_CLIENT_SECRET: ${file(./src/config/secrets.js):getSecret.AUTH0_CLIENT_SECRET}\n    AUTH0_NAMESPACE: ${file(./src/config/secrets.js):getSecret.AUTH0_NAMESPACE}\n    GRAPHQL_ENDPOINT_URL: ${file(./src/config/secrets.js):getSecret.GRAPHQL_ENDPOINT_URL}\n    JWT_CERT: ${file(./src/config/secrets.js):getSecret.JWT_CERT}\n    MONGODB_URL: ${file(./src/config/secrets.js):getSecret.MONGODB_URL}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline-scheduler\n  - serverless-offline\n  - serverless-plugin-notification-ojongerius\n  - serverless-plugin-aws-alerts\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  notification: # serverless-plugin-notification-ojongerius\n    webhook:\n      url: ${env:GITTER_WEBHOOK}\n  aws-notifications:\n      - protocol: email\n        endpoint: ${env:SERVERLESS_EMAIL_NOTIFICATIONS}\n  alerts:\n    stages: # Optionally - select which stages to deploy alarms to\n      - prod\n      - stage\n    dashboards: true\n    topics:\n      alarm:\n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications: ${self:custom.aws-notifications}\n    alarms:\n      - functionThrottles\n      - functionErrors\n      - functionInvocations\n      - functionDuration\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n\n  api:\n    handler: src/handler.apiHandler\n    events:\n    - http:\n        path: api\n        method: get\n        cors: true\n"]},{"id":186597250,"files":["service: email\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-south-1\n  apiKeys:\n    - ${env:MY_API_KEY}\n  usagePlan:\n    quota:\n      limit: 50 #The maximum number of requests that can be made in a given time period.\n      offset: 2 #The number of requests subtracted from the given limit in the initial time period.\n      period: MONTH #The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".\n    throttle:\n      burstLimit: 10 #The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity. \n      rateLimit: 10 #The API request steady-state rate limit (average requests per second over an extended period of time)\n\nfunctions:\n  sendEmail:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: sendEmail\n          method: post\n          cors: true\n          private: true\n"]},{"id":156385149,"files":["service: api-service\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${self:custom.defaultRegions.${self:provider.stage}}'}\n\ncustom:\n  apiConfig: ${file(./api-config.js)}\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../slic-config.json):domainConfig:domainPrefixes}\n  defaultRegions: ${file(../slic-config.json):defaultRegions}\n  apiDomainName: ${file:./domain-config.js):apiDomainName}\n  # The HostedZoneId for CloudFront distributions is always this value.\n  # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html\n  # AND http://docs.aws.amazon.com/general/latest/gr/rande.html\n  cloudFrontHostedZoneId: Z2FDTNDATAQYW2\n\nresources:\n  Resources:\n    apiCustomDomain:\n      Type: AWS::ApiGateway::DomainName\n      Properties:\n        CertificateArn: ${self:custom.apiConfig.apiCert}\n        DomainName: ${self:custom.apiDomainName}\n\n    apiDomainDns:\n      Type: AWS::Route53::RecordSetGroup\n      Properties:\n        HostedZoneId: ${self:custom.apiConfig.publicHostedZone}\n        RecordSets:\n          - Name: ${self:custom.apiDomainName}\n            Type: A\n            AliasTarget:\n              DNSName: !GetAtt apiCustomDomain.DistributionDomainName\n              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}\n          - Name: ${self:custom.apiDomainName}\n            Type: AAAA\n            AliasTarget:\n              DNSName: !GetAtt apiCustomDomain.DistributionDomainName\n              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}\n","service: certs\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n\ncustom:\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  apiDomainName: api.${self:custom.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}\n  siteDomainName: ${self:custom.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}\n\nresources:\n  Outputs:\n    publicHostedZone:\n      Value: !Ref publicHostedZone\n      Export:\n        Name: ${self:provider.stage}-public-hosted-zone\n    siteCert:\n      Value: !Ref siteCert\n      Export:\n        Name: ${self:provider.stage}-site-cert\n    apiCert:\n      Value: !Ref apiCert\n      Export:\n        Name: ${self:provider.stage}-api-cert\n\n  Resources:\n    publicHostedZone:\n      Type: AWS::Route53::HostedZone\n      Properties:\n        Name: ${self:custom.nsDomain}\n\n    siteCert:\n      Type: AWS::CertificateManager::Certificate\n      Properties:\n        DomainName: ${self:custom.siteDomainName}\n        DomainValidationOptions:\n          - DomainName: ${self:custom.siteDomainName}\n            ValidationDomain: ${self:custom.nsDomain}\n        ValidationMethod: EMAIL\n\n    apiCert:\n      Type: AWS::CertificateManager::Certificate\n      Properties:\n        DomainName: ${self:custom.apiDomainName}\n        DomainValidationOptions:\n          - DomainName: ${self:custom.apiDomainName}\n            ValidationDomain: ${self:custom.nsDomain}\n        ValidationMethod: EMAIL\n","service: frontend\n\nplugins:\n  - serverless-s3-sync\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n\ncustom: ${file(./custom.yml.js)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: cicd-deployment-target\n\ncustom:\n  stage: ${opt:stage, 'cicd'}\n  region: ${opt:region, '${file(../../slic-config.json):defaultRegions.cicd}'}\n  runtime: nodejs8.10\n  accountIds: ${file(../../slic-config.json):accountIds}\n\nprovider:\n  name: aws\n  runtime: ${self:custom.runtime}\n  stage: ${self:custom.stage}\n  region: ${self:custom.region}\n\nresources:\n  Resources:\n    deploymentRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: slic-cicd-deployment-role\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS: ${self:custom.accountIds.cicd}\n              Action: [sts:AssumeRole]\n        Path: /\n\n    deploymentPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: slic-cicd-deployment-policy\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - cloudformation:List*\n                - cloudformation:Get*\n                - cloudformation:PreviewStackUpdate\n                - cloudformation:ValidateTemplate\n                - cloudformation:CreateStack\n                - cloudformation:CreateUploadBucket\n                - cloudformation:DeleteStack\n                - cloudformation:Describe*\n                - cloudformation:UpdateStack\n                - cloudformation:CreateChangeSet\n                - cloudformation:ExecuteChangeSet\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - apigateway:*\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - iam:CreateServiceLinkedRole\n                - iam:DeleteServiceLinkedRole\n                - iam:AttachRolePolicy\n                - iam:DetachRolePolicy\n                - iam:GetRole\n                - iam:CreateRole\n                - iam:PassRole\n                - iam:GetRolePolicy\n                - iam:PutRolePolicy\n                - iam:DeleteRolePolicy\n                - iam:DeleteRole\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - s3:CreateBucket\n                - s3:DeleteBucket\n                - s3:DeleteBucketPolicy\n                - s3:GetBucket*\n                - s3:GetBucketPolicy\n                - s3:GetObject\n                - s3:GetObjectVersion\n                - s3:GetEncryptionConfiguration\n                - s3:PutEncryptionConfiguration\n                - s3:SetBucketEncryption\n                - s3:ListBucket\n                - s3:PutObject\n                - s3:PutBucketPolicy\n                - s3:PutBucketWebsite\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - lambda:Get*\n                - lambda:List*\n                - lambda:CreateEventSourceMapping\n                - lambda:DeleteEventSourceMapping\n                - lambda:CreateFunction\n                - lambda:AddPermission\n                - lambda:CreateAlias\n                - lambda:DeleteFunction\n                - lambda:InvokeFunction\n                - lambda:PublishVersion\n                - lambda:RemovePermission\n                - lambda:Update*\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - cloudfront:CreateDistribution\n                - cloudfront:DeleteDistribution\n                - cloudfront:GetDistribution\n                - cloudfront:UpdateDistribution\n                - cloudfront:TagResource\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - dynamodb:CreateTable\n                - dynamodb:DescribeTable\n                - dynamodb:Query\n                - dynamodb:Scan\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:UpdateItem\n                - dynamodb:DeleteItem\n              Resource: 'arn:aws:dynamodb:${self:custom.region}:*:*'\n            - Effect: Allow\n              Action: 'sqs:*'\n              Resource:\n                - arn:aws:sqs:*:*:*\n            - Effect: Allow\n              Action:\n                - cloudwatch:GetMetricStatistics\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:DeleteLogGroup\n                - logs:DeleteSubscriptionFilter\n                - logs:DescribeSubscriptionFilters\n                - logs:PutLogEvents\n                - logs:PutSubscriptionFilter\n                - logs:DescribeLogStreams\n                - logs:DescribeLogGroups\n                - logs:FilterLogEvents\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - events:Put*\n                - events:Remove*\n                - events:Delete*\n                - events:Describe*\n              Resource:\n                - 'arn:aws:events:*:*:rule/*'\n            - Effect: Allow\n              Action:\n                - 'acm:RequestCertificate'\n                - 'acm:DeleteCertificate'\n                - 'acm:DescribeCertificate'\n                - 'acm:AddTagsToCertificate'\n                - 'route53:GetChange'\n                - 'route53:GetHostedZone'\n                - 'route53:CreateHostedZone'\n                - 'route53:DeleteHostedZone'\n                - 'route53:ChangeResourceRecordSets'\n                - 'route53:ChangeTagsForResource'\n                - 'route53:ListResourceRecordSets'\n                - 'route53:ListHostedZones'\n                - 'route53:ListQueryLoggingConfigs'\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - events:Put*\n                - events:Remove*\n                - events:Delete*\n              Resource:\n                - 'arn:aws:events:*:*:rule/*'\n            - Effect: Allow\n              Action:\n                # Start permissions required for integration tests\n                - cognito-idp:AdminCreateUser\n                - cognito-idp:AdminDeleteUser\n                - cognito-idp:AdminInitiateAuth\n                - cognito-idp:AdminRespondToAuthChallenge\n                # End permissions required for integration tests\n                - cognito-idp:CreateUserPool*\n                - cognito-idp:DeleteUserPool*\n                - cognito-idp:ListUserPool*\n                - cognito-identity:CreateIdentityPool\n                - cognito-identity:DeleteIdentityPool\n                - cognito-identity:UpdateIdentityPool\n                - cognito-identity:ListIdentityPools\n                - cognito-identity:GetIdentityPoolRoles\n                - cognito-identity:SetIdentityPoolRoles\n              Resource:\n                - '*'\n            - Effect: Allow\n              Action:\n                - 'ssm:ListTagsForResource'\n                - 'ssm:AddTagsToResource'\n                - 'ssm:RemoveTagsFromResource'\n                - 'ssm:DeleteParameter'\n                - 'ssm:DescribeParameters'\n                - 'ssm:PutParameter'\n                - 'ssm:GetParameter'\n                - 'ssm:GetParameters'\n              Resource:\n                - '*'\n\n        Roles:\n          - Ref: deploymentRole\n","service: checklist-service\n\nplugins:\n  - serverless-webpack\n  # Order of plugins is important for dynamodb-local\n  # Using fork of serverless-dynamodb-local due to https://github.com/99xt/dynamodb-localhost/issues/25\n  - '@dathuis/serverless-dynamodb-local'\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource:\n        - '*'\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    SERVICE_NAME: ${file(./package.json):name}\n    SERVICE_VERSION: ${file(./package.json):version}\n    CHECKLIST_TABLE_NAME: ${self:custom.checklistTableName}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  checklistTableName: ${self:provider.stage}Checklists\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  checklistApiUrl:\n    Fn::Join:\n      - ''\n      - - 'https://'\n        - Ref: 'ApiGatewayRestApi'\n        - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'\n  serverless-offline:\n    port: 4000\n    stage: local\n    region: ${self:provider.region}\n  dynamodb:\n    start:\n      migrate: true\n  prune:\n    automatic: true\n    number: 3\n  logForwarding:\n    destinationARN: !ImportValue ${self:provider.stage}-log-forwarder-function-arn\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: email-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-offline-sqs\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  sesRegion: ${self:custom.sesRegions.${self:provider.region}, 'us-east-1'}\n  tracing:\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    SES_REGION: ${self:provider.sesRegion}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n  number: 3\n  nsDomain: ${env:SLIC_NS_DOMAIN}\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  sesRegions:\n    us-east-1: us-east-1\n    us-west-2: us-west-2\n    eu-west-1: eu-west-1\n  serverless-offline:\n    port: 4002\n    stage: local\n    region: ${opt:region, '${env:TARGET_REGION}'}\n  serverless-offline-sqs:\n    endpoint: ${env:SQS_ENDPOINT_URL,'http://0.0.0.0:4576'}\n    autoCreate: true\n    region: ${self:provider.region}\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml)}\n","service: sharing-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n    EMAIL_QUEUE_NAME: ${self:custom.emailQueueName}\n  resourcePolicy:\n    - Effect: Allow\n      Principal: '*'\n      Action: 'execute-api:Invoke'\n      Resource:\n        - execute-api:/*/*/*\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  domainPrefixes: ${file(../common-config.json):domainPrefixes}\n  cloudFrontHostedZoneId: Z2FDTNDATAQYW2\n  serverless-offline:\n    port: 4004\n    stage: local\n    region: ${self:provider.region}\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n    number: 3\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Resources: ${file(./sls-resources.yml.js)}\n","service: user-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    apiGateway: true\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n  logs:\n    restApi: true\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  stage: ${opt:stage, 'dev'}\n  serverless-offline:\n    port: 4003\n    stage: local\n    region: ${self:provider.region}\n    noAuth: true\n  prune:\n    automatic: true\n    number: 3\n  logForwarding:\n    destinationARN: !ImportValue ${self:provider.stage}-log-forwarder-function-arn\n\nfunctions: ${file(./sls-functions.yml)}\n\nresources:\n  Outputs:\n    userPool:\n      Value: !Ref slicUserPool\n      Export:\n        Name: ${self:provider.stage}-user-pool-id\n    userPoolClient:\n      Value: !Ref slicUserPoolClient\n      Export:\n        Name: ${self:provider.stage}-user-pool-client-id\n    identityPool:\n      Value: !Ref slicIdentityPool\n      Export:\n        Name: ${self:provider.stage}-identity-pool\n    slicUserPoolArn:\n      Value: !Ref slicUserPoolArn\n      Export:\n        Name: ${self:provider.stage}-user-pool-arn\n\n  Resources: ${file(./sls-resources.yml)}\n","service: welcome-service\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'local'}\n  region: ${opt:region, '${env:TARGET_REGION}'}\n  tracing:\n    lambda: true\n  environment:\n    SLIC_STAGE: ${self:provider.stage}\n  logRetentionInDays: 7\n\ncustom:\n  webpack:\n    keepOutputDirectory: true\n  emailQueueName: ${self:provider.stage}-email-queue\n  prune:\n    automatic: true\n    number: 3\n  serverless-offline:\n    port: 4001\n    stage: local\n    region: ${self:provider.region}\n\nfunctions: ${file(./sls-functions.yml)}\n"]},{"id":117472908,"files":["service: api-with-auth\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}\n    DB: ${self:custom.secrets.DB}\n\nfunctions:\n  verify-token:\n    handler: auth/VerifyToken.auth\n\n  login:\n    handler: auth/AuthHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  register:\n    handler: auth/AuthHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n\n  me:\n    handler: auth/AuthHandler.me\n    events:\n      - http:\n          path: me\n          method: get\n          cors: true\n          authorizer: verify-token\n\n  getUsers:\n    handler: user/UserHandler.getUsers\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":140978466,"files":["service: lambda-mailer\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    EMAIL: ${self:custom.secrets.EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n  sendFormEncoded:\n    handler: handler.sendFormEncoded\n    events:\n      - http:\n          path: email/send/formencoded\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":80318005,"files":["service: lumo-example\n\ncustom:\n  cljsCompiler: lumo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  example:\n    cljs: lumo-example.core/example\n\npackage:\n  exclude:\n    - node_modules/.yarn*\n\nplugins:\n  - serverless-cljs-plugin\n"]},{"id":82484365,"files":["service: serverless-slackbot\n\ncustom:\n  # debugging output\n  debug: '*'\n\n\n  services:\n    # The dynamodb table to store OAuth access data\n    table_name: slackbot-brain\n\n    # sns dispatch topic name\n    topic_name: dispatcher\n\n\n  nav:\n    # The path used to post Slack events to\n    event_path: callback\n\n    # The path used to install the Slack App\n    install_path: install\n\n    # The path to redirect to after an install\n    install_redirect: https://slack.com\n\n\n  slack:\n    # Verification token\n    verification_token: \"xxxxxxxxxxxxxxx\"\n    \n    # Space delimited scopes\n    client_scopes: \"bot commands\"\n    \n    # Client ID - quotes required\n    client_id: \"xxxxxxxxxxxxxxxxxx\"\n    \n    # Client Secret - quotes required\n    client_secret: \"xxxxxxxxxxxxxxxxxx\"\n\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: serverless\n  versionFunctions: false\n  iamRoleStatements:    \n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - sns:*\n        \nfunctions:\n  callbacks:\n    handler: src/index.handler\n    environment:\n      DEBUG: ${self:custom.debug}\n      TABLE_NAME: ${self:custom.services.table_name}\n      TOPIC_NAME: ${self:custom.services.topic_name}\n      CLIENT_ID: ${self:custom.slack.client_id}\n      CLIENT_SECRET: ${self:custom.slack.client_secret}\n      CLIENT_SCOPES: ${self:custom.slack.client_scopes}\n      INSTALL_REDIRECT: ${self:custom.nav.install_redirect}\n      VERIFICATION_TOKEN: ${self:custom.slack.verification_token}\n    events:\n      - sns: ${self:custom.services.topic_name}\n      - http:\n          path: ${self:custom.nav.event_path}\n          method: post\n          integration: lambda\n          response:\n            template: $input.path('$')\n      - http:\n          path: ${self:custom.nav.install_path}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                code: true\n                state: true\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n\nresources:\n  Resources:\n    dynamodb:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: team_id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: team_id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.services.table_name}"]},{"id":111685168,"files":["service: alexa-skills-test\n\nprovider:\n  name: aws\n  stage: dev\n  runtime: nodejs6.10\nfunctions:\n  hello:\n    handler: handler.hello\nplugins:\n  - serverless-alexa-skills\n\ncustom:\n  alexa:\n#    vendorId: ${env:AMAZON_VENDOR_ID}\n#    clientId: ${env:AMAZON_CLIENT_ID}\n#    clientSecret: ${env:AMAZON_CLIENT_SECRET}\n    skills:\n      - id: ${env:ALEXA_SKILL_ID}\n        manifest:\n          publishingInformation:\n            locales:\n              ja-JP:\n                name: test3\n          apis:\n            custom: {}\n          manifestVersion: '1.0'\n        models:\n          ja-JP:\n            interactionModel:\n              languageModel:\n                invocationName: hello\n                intents:\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n                  - name: HelloWorldIntent\n                    samples:\n                    - hello\n                    - say hello\n                    - hello world\n                    - hello my world\n"]},{"id":112726213,"files":["service: serverless-elasticache-vpc-nat\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-2\n  stage: development\n  profile: default\n  environment:\n    REDIS_ENDPOINT:\n      \"Fn::Join\": [\":\", [\"Fn::GetAtt\": [ServerlessElasticacheCluster, RedisEndpoint.Address], \"Fn::GetAtt\": [ServerlessElasticacheCluster, RedisEndpoint.Port]]]\nfunctions:\n  hello:\n    handler: handler.hello\n    vpc:\n      securityGroupIds:\n        - \"Fn::GetAtt\": ServerlessSecurityGroup.GroupId\n      subnetIds:\n        - Ref: ServerlessPrivateSubnetA\n    events:\n      - http:\n          path: \"api/${env:API_PATH, self:custom.api.apiPath}\"\n          method: ${env:API_METHOD, self:custom.api.apiMethod}\n          cors: true\nresources:\n  Resources:\n    ServerlessVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n    ElasticIpLambda:\n      Type: AWS::EC2::EIP\n      Properties:\n        Domain: vpc\n    InternetGatewayLambda:\n      Type: AWS::EC2::InternetGateway\n    VPCGatewayAttachmentLambda:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        InternetGatewayId:\n          Ref: InternetGatewayLambda\n    NatGatewayLambda:\n      Type: AWS::EC2::NatGateway\n      Properties:\n        AllocationId:\n          Fn::GetAtt:\n            - ElasticIpLambda\n            - AllocationId\n        SubnetId:\n          Ref: ServerlessPublicSubnetA\n    ServerlessPrivateSubnetA:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        AvailabilityZone: ${self:provider.region}a\n        CidrBlock: \"10.0.1.0/24\"\n    ServerlessPublicSubnetA:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n        AvailabilityZone: ${self:provider.region}a\n        CidrBlock: \"10.0.2.0/24\"\n    DefaultPrivateRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n    DefaultPrivateRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        RouteTableId:\n          Ref: DefaultPrivateRouteTable\n        DestinationCidrBlock: 0.0.0.0/0\n        NatGatewayId:\n          Ref: NatGatewayLambda\n    DefaultPublicRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessVPC\n    DefaultPublicRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        RouteTableId:\n          Ref: DefaultPublicRouteTable\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: InternetGatewayLambda\n    SubnetRouteTableAssociationLambdaPrivateA:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        SubnetId:\n          Ref: ServerlessPrivateSubnetA\n        RouteTableId:\n          Ref: DefaultPrivateRouteTable\n    SubnetRouteTableAssociationLambdaPublicA:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        SubnetId:\n          Ref: ServerlessPublicSubnetA\n        RouteTableId:\n          Ref: DefaultPublicRouteTable\n    ServerlessSecurityGroup:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: SecurityGroup for Serverless Functions\n        VpcId:\n          Ref: ServerlessVPC\n    ServerlessStorageSecurityGroup:\n      DependsOn: ServerlessVPC\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: Ingress for Redis Cluster\n        VpcId:\n          Ref: ServerlessVPC\n        SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '6379'\n          ToPort: '6379'\n          SourceSecurityGroupId:\n            Ref: ServerlessSecurityGroup\n    ServerlessCacheSubnetGroup:\n      Type: AWS::ElastiCache::SubnetGroup\n      Properties:\n        Description: \"Cache Subnet Group\"\n        SubnetIds:\n        - Ref: ServerlessPrivateSubnetA\n    ServerlessElasticacheCluster:\n      DependsOn: ServerlessStorageSecurityGroup\n      Type: AWS::ElastiCache::CacheCluster\n      Properties:\n        AutoMinorVersionUpgrade: true\n        Engine: redis\n        CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}\n        NumCacheNodes: 1\n        VpcSecurityGroupIds:\n        - \"Fn::GetAtt\": ServerlessStorageSecurityGroup.GroupId\n        CacheSubnetGroupName:\n          Ref: ServerlessCacheSubnetGroup\nplugins:\n  - serverless-webpack\n  - serverless-offline\ncustom:\n  api:\n    apiPath: \"{proxy+}\"\n    apiMethod: \"any\"\n  config:\n    CACHE_INSTANCE_SIZE: cache.t2.micro\n  webpackIncludeModules:  true # enable auto-packing of external modules\n"]},{"id":58233888,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: serverless-contact-form\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs6.10\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action: \n         - \"ses:SendEmail\"\n         - \"ses:SendRawEmail\"\n       Resource: \"*\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  contact:\n    handler: handler.contact\n    # The `events` block defines how to trigger the handler.helloWorld code\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true\n"]},{"id":140023497,"files":["service: serverless-offline-dynamodb-streams\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-dynamodb-streams\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - stream: arn:aws:dynamodb:region:XXXXXX:table/MyFirstTable\n      - stream:\n          type: dynamodb\n          arn: arn:aws:dynamodb:region:XXXXXX:table/MySecondTable\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - stream:\n          type: dynamodb\n          streamName: MyThirdTable\n          arn:\n            Fn::GetAtt:\n              - MyThirdTable\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - MyFourthTable\n              - Arn\n\nresources:\n  Resources:\n    MyFourthTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: MyFourthTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\ncustom:\n  serverless-offline:\n    port: 3443\n  serverless-offline-dynamodb-streams: ${file(./custom.yml):serverless-offline-dynamodb-streams}","service: serverless-offline-kinesis\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-kinesis\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - stream: arn:aws:kinesis:region:XXXXXX:stream/MyFirstStream \n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:region:XXXXXX:stream/MySecondStream\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - stream:\n          type: kinesis\n          streamName: MyThirdStream\n          arn:\n            Fn::GetAtt:\n              - MyThirdStream\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - MyFourthStream\n              - Arn\n\nresources:\n  Resources:\n    MyFourthStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: MyFourthStream\n        ShardCount: 1\n\ncustom:\n  serverless-offline:\n    port: 3223\n  serverless-offline-kinesis: ${file(./custom.yml):serverless-offline-kinesis}","service: serverless-offline-sqs\n\nprovider:\n  name: aws\n  region: us-west-2\n  runtime: nodejs8.10\n\nplugins:\n  localPath: '../../packages'\n  modules:\n    - serverless-offline-ssm-provider\n    - serverless-offline-sqs\n    - serverless-offline\n\nfunctions:\n  myPromiseHandler:\n    handler: lambda/handler.promise\n    events:\n      - sqs: arn:aws:sqs:region:XXXXXX:MyFirstQueue\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:MySecondQueue\n  myCallbackHandler:\n    handler: lambda/handler.callback\n    events:\n      - sqs:\n          queueName: MyThirdQueue\n          arn:\n            Fn::GetAtt:\n              - MyThirdQueue\n              - Arn\n  myPythonHandler:\n    runtime: python2.7\n    handler: lambda/handler.handler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - MyFourthQueue\n              - Arn\n\nresources:\n  Resources:\n    MyFourthQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: MyFourthQueue\n\ncustom:\n  serverless-offline:\n    port: 3333\n  serverless-offline-sqs: ${file(./custom.yml):serverless-offline-sqs}"]},{"id":120666358,"files":["service: bovine\nprovider:\n  name: aws\n  runtime: python2.7\n  profile: ${opt:profile}\n  role: lambdaAuditRole\n  stage: ${opt:stage}\n  environment:\n    S3_BUCKET: ${file(config/config.${self:provider.stage}.json):s3bucket}\n    REPORTS_BUCKET: ${file(config/config.${self:provider.stage}.json):reportsBucket}\n    STAGE: ${opt:stage, self:provider.stage}\n    RULES_BUCKET: ${file(config/config.${self:provider.stage}.json):rulesBucket}\n    AUDIT_LAMBDA: ${file(config/config.${self:provider.stage}.json):auditLambda}\n    ASSUME_ROLE: ${file(config/config.${self:provider.stage}.json):lambdaAssumeRole}\n    AUTH_URL: ${file(config/config.${self:provider.stage}.json):authUrl}\n    URL: ${file(config/config.${self:provider.stage}.json):domainName}\ncustom: \n  lambdaRole: ${file(config/config.${self:provider.stage}.json):lambdaRole}\n  accountId: ${file(config/config.${self:provider.stage}.json):accountId}\n  domainName: ${file(config/config.${self:provider.stage}.json):domainName}\n  authorizerArn: ${file(config/config.${self:provider.stage}.json):authorizerArn}\n  region: ${file(config/config.${self:provider.stage}.json):region}\n  s3bucket: ${file(config/config.${self:provider.stage}.json):s3bucket}\n  reportsBucket: ${file(config/config.${self:provider.stage}.json):reportsBucket}\n  rulesBucket: ${file(config/config.${self:provider.stage}.json):rulesBucket}\n  auditLambda: ${file(config/config.${self:provider.stage}.json):auditLambda}\npackage:\n  include:\n    - lib/**\n  exclude:\n    - README.md\n\nfunctions:\n  ping:\n    name: ${self:service}-ping\n    handler: ping.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/ping\n  main:\n    name: ${self:service}-main\n    handler: main.lambda_handler\n    role: lambdaAuditRole\n    timeout: 15\n    events:\n      - http: GET {proxy+}\n      - http: GET /\n  login:\n    name: ${self:service}-login\n    handler: login.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: login\n  dashboard:\n    name: ${self:service}-dashboard\n    handler: dashboard.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/dashboard\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  rules:\n    name: ${self:service}-rules\n    handler: getcompliancerules.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/rules\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  reports:\n    name: ${self:service}-reports\n    handler: getreports.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/reports\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  runreport:\n    name: ${self:service}-runreport\n    handler: runreport.lambda_handler\n    events:\n      - http:\n          method: get\n          path: api/reports/run\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  accountcount:\n    name: ${self:service}-accountcount\n    handler: accountcount.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: api/summary/accountcount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  usercount:\n    name: ${self:service}-usercount\n    handler: usercount.lambda_handler\n    timeout: 60\n    events:\n      - http:\n          method: get\n          path: api/summary/usercount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instancecount:\n    name: ${self:service}-instancecount\n    handler: instancecount.lambda_handler\n    timeout: 60\n    events:\n      - http:\n          method: get\n          path: api/summary/instancecount\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  accounts:\n    name: ${self:service}-accounts\n    handler: getaccounts.lambda_handler\n    timeout: 15\n    events:\n      - http:\n          method: get\n          path: api/accounts\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  account:\n    name: ${self:service}-account\n    handler: getaccount.lambda_handler\n    timeout: 10\n    events:\n      - http:\n          method: get\n          path: api/account\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  addAccount:\n    name: ${self:service}-addAccount\n    handler: add_account.lambda_handler\n    timeout: 10\n    events:\n      - http:\n          method: post\n          path: api/addAccount\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  users:\n    name: ${self:service}-users\n    handler: getusers.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/users\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  user:\n    name: ${self:service}-user\n    handler: getuser.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/user\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  roles:\n    name: ${self:service}-roles\n    handler: getroles.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/roles\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  publicips:\n    name: ${self:service}-publicips\n    handler: getpublicips.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/publicips\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instances:\n    name: ${self:service}-instances\n    handler: getinstances.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/instances\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  instance:\n    name: ${self:service}-instance\n    handler: getinstance.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/instance\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  securitygroups:\n    name: ${self:service}-securitygroups\n    handler: getsecuritygroups.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/securitygroups\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  securitygroup:\n    name: ${self:service}-securitygroup\n    handler: getsecuritygroup.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/securitygroup\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  elbs:\n    name: ${self:service}-elbs\n    handler: getelbs.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/elbs\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  elb:\n    name: ${self:service}-elb\n    handler: getelb.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/elb\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  dbs:\n    name: ${self:service}-databases\n    handler: getdbs.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/databases\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  dynamotables:\n    name: ${self:service}-dynamotables\n    handler: getdynamotables.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/dynamotables\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  redshift:\n    name: ${self:service}-redshift\n    handler: getredshiftclusters.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/redshiftclusters\n          authorizer:\n            arn: ${self:custom.authorizerArn} \n  s3buckets:\n    name: ${self:service}-s3\n    handler: gets3buckets.lambda_handler\n    timeout: 120\n    events:\n      - http:\n          method: get\n          path: api/s3\n          authorizer:\n            arn: ${self:custom.authorizerArn}\n  s3bucket:\n    name: ${self:service}-bucket\n    handler: gets3bucket.lambda_handler\n    timeout: 30\n    events:\n      - http:\n          method: get\n          path: api/bucket    \n          authorizer:\n            arn: ${self:custom.authorizerArn}     \nresources:\n  Resources:\n    #pathmapping:\n    #  Type: AWS::ApiGateway::BasePathMapping\n    #  Properties:\n    #    DomainName: ${self:custom.${opt:stage, self:provider.stage}DomainName}\n    #    RestApiId: \n    #      Ref: ApiGatewayRestApi\n    #    Stage: ${opt:stage, self:provider.stage}\n    s3bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${file(config/config.${self:provider.stage}.json):s3bucket}\n    lambdaAuditRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${file(config/config.${self:provider.stage}.json):lambdaRole}\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: \n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${file(config/config.${self:provider.stage}.json):lambdaPolicy}\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sts:AssumeRole\n                    - sts:GetSessionToken\n                  Resource: '*'\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/*:*:*\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.reportsBucket}\"                         \n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.reportsBucket}\"\n                          - \"/*\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.rulesBucket}\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.rulesBucket}\"\n                          - \"/*\"\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                      Fn::Join:\n                        - \"\"\n                        - - \"arn:aws:s3:::\"\n                          - \"${self:custom.s3bucket}\"\n                          - \"/*\"                          \n                - Effect: Allow\n                  Action:\n                    - dynamodb:Query\n                    - dynamodb:Scan\n                    - dynamodb:GetItem\n                    - dynamodb:PutItem\n                    - dynamodb:UpdateItem\n                    - dynamodb:DeleteItem\n                  Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/AWS-Accounts-Table*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:${self:service}-*\"\n                - Effect: Allow\n                  Action:\n                    - lambda:InvokeFunction\n                  Resource: \"arn:aws:lambda:${opt:region, self:provider.region}:${self:custom.accountId}:function:${self:custom.auditLambda}\"   "]},{"id":147949005,"files":["service: contacts-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-west-2\n\nfunctions:\n  - '${file(src/handlers/contacts/contacts.serverless.yml)}'\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    host: 0.0.0.0 # for docker container hosting\n","\n# handler paths are relative to the root serverless.yml file that this is being merged into\n# they are also compiled by babel into a 'dist' folder at the root\nlist:\n  handler: src/handlers/contacts/list.handler\n  events:\n    - http: get /contacts\nget:\n  handler: src/handlers/contacts/get.handler\n  events:\n    - http: get /contact/{id}\nadd:\n  handler: src/handlers/contacts/add.handler\n  events:\n    - http: post /contact\nupdate:\n  handler: src/handlers/contacts/update.handler\n  events:\n    - http: put /contact/{id}\ndelete:\n  handler: src/handlers/contacts/delete.handler\n  events:\n    - http: delete /contact/{id}"]},{"id":76106805,"files":["service: aws-iam-manager\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 30\n  stackTags: aws-iam-manager\n  region: us-east-1\n  profile: netguru_rnd\n  deploymentBucket: aws-iam-manager-deploys\n  environment:\n    GITHUB_ACCESS_TOKEN: ${file(./secrets.yml):GITHUB_ACCESS_TOKEN}\n    USERS_PATH: /aim-managed/\n    MAIL_SENDER: rafal.wilinski@netguru.co\n    EMAIL_DOMAIN: netguru.co\n    REGION: us-east-1\n    ROOT_ACCOUNT: netguru_rnd_account\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - iam:ListUsers\n        - iam:DeleteUser\n        - iam:CreateUser\n        - iam:ListAccessKeys\n        - iam:CreateLoginProfile\n        - iam:DeleteLoginProfile\n        - iam:CreateAccessKey\n        - iam:DeleteAccessKey\n        - iam:AddUserToGroup\n        - iam:RemoveUserFromGroup\n        - iam:ListPolicies\n        - iam:ListEntitiesForPolicy\n        - iam:CreatePolicy\n        - iam:DeletePolicy\n        - iam:GetPolicy\n        - iam:ListAccessKeys\n        - iam:ListGroups\n        - iam:ListGroupsForUser\n        - iam:GetGroup\n        - iam:CreateGroup\n        - iam:ListGroupsForUser\n        - iam:DeleteGroup\n        - iam:DeleteLoginProfile\n        - iam:DeleteGroupPolicy\n        - iam:AttachGroupPolicy\n        - iam:DetachGroupPolicy\n        - ses:SendEmail\n        - dynamodb:GetItem\n      Resource: \"*\"\n\npackage:\n  exclude:\n    - '*.png'\n\nregion: us-east-1\n\nfunctions:\n  IAMManagerSNSHandler:\n    handler: build/src/index.handler\n    events:\n      - sns:\n          topicName: IAMManagerNotifyTopic\n          displayName: IAMManagerNotifyTopic\n\nresources:\n  Resources:\n    # Create Role that will be used to Push Messages on Github's behalf\n    IAMManagerUser:\n      Type: \"AWS::IAM::User\"\n      Properties:\n        UserName: IAMManagerUser\n        Policies:\n          - PolicyName: IAMManagerGithubHookAllowSNSSubscriptionPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - sns:Publish\n                  Resource:\n                    Ref: SNSTopicIAMManagerNotifyTopic\n    IAMDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: account_name\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: account_name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'aim_roles'\n\n  Outputs:\n    IAMManagerNotifyTopicARN:\n      Description: ARN of Github Hook topic, (SNS topic on GitHub)\n      Value:\n        Ref: SNSTopicIAMManagerNotifyTopic\n"]},{"id":126472563,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sample-app\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: ServerlessHandsOnPart1\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n\nfunctions:\n  webapp:\n    handler: handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true","service: ServerlessTsNativeBuild\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nplugins:\n - serverless-apigw-binary\ncustom:\n  webpack:\n    includeModules:\n      forceInclude:\n        - mecab\n  apigwBinary:\n    types:\n      - 'application/json'\n      - 'text/html'\n      - '*/*'\n\nfunctions:\n  webapp:\n    handler: build/handler.api\n    events:\n      - http: \n          path: /{proxy+}\n          method: ANY\n          cors: true\n      - http: \n          path: /{proxy+}\n          method: OPTIONS\n          cors: true\n\npackage:\n  individually: true"]},{"id":86979819,"files":["service: aws-ses-serverless-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: development\n  region: ap-northeast-1\n\nplugins:\n  - serverless-webpack\n\nfunctions:\n  sendMail:\n    handler: handler.sendMail\n    description: Send email using SES service.\n    memorySize: 1024\n    timeout: 5\n    events:\n      - http:\n          path: sendMail\n          method: post\n          integration: lambda\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n"]},{"id":79318226,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  graphql:\n    handler: foo/bah.graphql\n\nplugins:\n  - serverless-plugin-graphiql\n"]},{"id":71724082,"files":["service: serverless-multiplayer-game\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sdb:PutAttributes\"\n        - \"sdb:Select\"\n      Resource: \"arn:aws:sdb:${self:provider.region}:*:domain/bombermon\"\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:DescribeEndpoint\"\n      Resource: \"*\"    \n    - Effect: \"Allow\"\n      Action:\n        - \"sts:AssumeRole\"\n      Resource: \"*\"      \n\nfunctions:\n  game:\n    handler: handler.game\n    events:\n      - http: GET iot/keys\n      - http: POST avatars/available\n      - http: PUT avatars/available\n      - http: OPTIONS avatars/available"]},{"id":143485570,"files":["service: notes-app-mono-database\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n  # Set the table name here so we can use it while testing locally\n  tableName: ${self:custom.stage}-mono-notes\n  # Set our DynamoDB throughput for prod and all other non-prod stages.\n  tableThroughputs:\n    prod: 5\n    default: 1\n  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    NotesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        # Generate a name based on the stage\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: noteId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: noteId\n            KeyType: RANGE\n        # Set the capacity based on the stage\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.tableThroughput}\n          WriteCapacityUnits: ${self:custom.tableThroughput}\n\n  Outputs:\n    NotesTableArn:\n      Value:\n         Fn::GetAtt:\n          - NotesTable\n          - Arn\n      Export:\n        Name: ${self:custom.stage}-NotesTableArn\n","service: notes-app-mono-auth\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        # Generate a name based on the stage\n        UserPoolName: ${self:custom.stage}-mono-user-pool\n        # Set email as an alias\n        UsernameAttributes:\n          - email\n        AutoVerifiedAttributes:\n          - email\n\n    CognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        # Generate an app client name based on the stage\n        ClientName: ${self:custom.stage}-mono-user-pool-client\n        UserPoolId:\n          Ref: CognitoUserPool\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n        GenerateSecret: false\n\n    # The federated identity for our user pool to auth with\n    CognitoIdentityPool:\n      Type: AWS::Cognito::IdentityPool\n      Properties:\n        # Generate a name based on the stage\n        IdentityPoolName: ${self:custom.stage}MonoIdentityPool\n        # Don't allow unathenticated users\n        AllowUnauthenticatedIdentities: false\n        # Link to our User Pool\n        CognitoIdentityProviders:\n          - ClientId:\n              Ref: CognitoUserPoolClient\n            ProviderName:\n              Fn::GetAtt: [ \"CognitoUserPool\", \"ProviderName\" ]\n              \n    # IAM roles\n    CognitoIdentityPoolRoles:\n      Type: AWS::Cognito::IdentityPoolRoleAttachment\n      Properties:\n        IdentityPoolId:\n          Ref: CognitoIdentityPool\n        Roles:\n          authenticated:\n            Fn::GetAtt: [CognitoAuthRole, Arn]\n            \n    # IAM role used for authenticated users\n    CognitoAuthRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: 'Allow'\n              Principal:\n                Federated: 'cognito-identity.amazonaws.com'\n              Action:\n                - 'sts:AssumeRoleWithWebIdentity'\n              Condition:\n                StringEquals:\n                  'cognito-identity.amazonaws.com:aud':\n                    Ref: CognitoIdentityPool\n                'ForAnyValue:StringLike':\n                  'cognito-identity.amazonaws.com:amr': authenticated\n        Policies:\n          - PolicyName: 'CognitoAuthorizedPolicy'\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'mobileanalytics:PutEvents'\n                    - 'cognito-sync:*'\n                    - 'cognito-identity:*'\n                  Resource: '*'\n                \n                # Allow users to invoke our API\n                - Effect: 'Allow'\n                  Action:\n                    - 'execute-api:Invoke'\n                  Resource:\n                    Fn::Join:\n                      - ''\n                      -\n                        - 'arn:aws:execute-api:'\n                        - Ref: AWS::Region\n                        - ':'\n                        - Ref: AWS::AccountId\n                        - ':'\n                        - 'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId\n                        - '/*'\n                \n                # Allow users to upload attachments to their\n                # folder inside our S3 bucket\n                - Effect: 'Allow'\n                  Action:\n                    - 's3:*'\n                  Resource:\n                    - Fn::Join:\n                      - ''\n                      -\n                        - 'Fn::ImportValue': ${self:custom.stage}-AttachmentsBucketArn\n                        - '/private/'\n                        - '$'\n                        - '{cognito-identity.amazonaws.com:sub}/*'\n\n  # Print out the Id of the User Pool and Identity Pool that are created\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: CognitoUserPool\n\n    UserPoolClientId:\n      Value:\n        Ref: CognitoUserPoolClient\n\n    IdentityPoolId:\n      Value:\n        Ref: CognitoIdentityPool\n","service: notes-app-mono-uploads\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\nresources:\n  Resources:\n    S3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        # Set the CORS policy\n        CorsConfiguration:\n          CorsRules:\n            -\n              AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - PUT\n                - POST\n                - DELETE\n                - HEAD\n              MaxAge: 3000\n\n  # Print out the name of the bucket that is created\n  Outputs:\n    AttachmentsBucketArn:\n      Value:\n         Fn::GetAtt:\n          - S3Bucket\n          - Arn\n      Export:\n        Name: ${self:custom.stage}-AttachmentsBucketArn\n\n    AttachmentsBucketName:\n      Value:\n        Ref: S3Bucket\n      Export:\n        Name: ${self:custom.stage}-AttachmentsBucket\n\n","service: notes-app-mono-notes\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName:\n      ${file(../database/serverless.yml):custom.tableName}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-NotesTableArn\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: handler.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n\nresources:\n  Outputs:\n    ApiGatewayRestApiId:\n      Value:\n        Ref: ApiGatewayRestApi\n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiId\n  \n    ApiGatewayRestApiRootResourceId:\n      Value:\n         Fn::GetAtt:\n          - ApiGatewayRestApi\n          - RootResourceId \n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n        \n","service: notes-app-mono-users\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    tableName:\n      ${file(../database/serverless.yml):custom.tableName}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      # Restrict our IAM role permissions to\n      # the specific table for the stage\n      Resource:\n        - 'Fn::ImportValue': ${self:custom.stage}-NotesTableArn\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /users\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /users/{id}\n    # - method: GET request\n    handler: handler.main\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n          authorizer: aws_iam\n\n"]},{"id":125552122,"files":["service: test-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-local-schedule\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule:\n          rate: cron(0 10 * * ? *)\n          name: test-crontab\n          timezone: America/New_York\n      - schedule:\n          rate: cron(0 5 * * ? *)\n          timezone: America/New_York\n"]},{"id":83279521,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-pdf\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: stage\n  region: us-west-2\n  profile: serverless\n\nfunctions:\n  print:\n    handler: handler.print\n    events:\n      - http:\n          method: post\n          path: print\n          cors: true\n\n# plugins:\n#   - serverless-webpack\n\npackage:\n  exclude:\n    - node_modules/**\n    - bin/**\n  include:\n    - bin/phantomjs-linux\n    - lib/rasterize.js\n"]},{"id":99590290,"files":["service: Image-Resizer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  memorySize: 1024 # optional, default is 1024\n  timeout: 100 # optional, default is 6\n\n  stage: dev\n  region: eu-west-1\n\n  role: BucketAccess\n\n  environment:\n    BUCKET: \"sample-bucket\"\n    SLS_DEBUG: \"*\"\n    RESIZE_LAMBDA: ${self:provider.stage}-resizeImage\n\n\npackage:\n  individually: true\n  # exclude:\n  #   - bin/**\n  #   - functions/**\n\nplugins:\n  - serverless-plugin-browserify\n\nfunctions:\n  getImage:\n    name: ${self:service}-${self:provider.stage}-getImage\n    handler: functions/getImage/index.handler\n    events:\n      - http: GET {proxy+}\n    package:\n      include:\n        - functions/getImage/**\n  resizeImage:\n    name: ${self:provider.environment.RESIZE_LAMBDA}\n    handler: functions/resizeImage/index.handler\n    package:\n      include:\n        - functions/resizeImage/**\n  uploadImage:\n    name: ${self:service}-${self:provider.stage}-uploadImage\n    handler: functions/uploadImage/index.handler\n    events:\n      - http: POST /upload\n    package:\n      include:\n        - functions/uploadImage/**\n\n\n\n# you can add CloudFormation resource templates here\n\nresources:\n  Resources:\n    BucketAccess:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:provider.environment.BUCKET}-S3-BUCKET-ACCESS-${self:service}\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:provider.environment.BUCKET}-access-bucket-${self:service}\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - \"s3:*\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.BUCKET}/*\"]]\n                - Effect: Allow\n                  Action:\n                    - \"lambda:InvokeFunction\"\n                  Resource:\n                    -  \"Fn::Join\": [\"\", [\"arn:aws:lambda:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":function:${self:provider.environment.RESIZE_LAMBDA}\"]]\n"]},{"id":115734980,"files":["service: ServerlessStepPlugin\n\nframeworkVersion: \">=1.13.0 <2.0.0\"\n\nplugins:\n   - serverless-step-functions\n   - serverless-step-functions-offline\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  region: eu-west-1\n  memorySize: 128\n  timeout: 3\n\ncustom:\n  stepFunctionsOffline:\n      FirstLambda: firstLambda\n\nfunctions:\n    firstLambda:\n        handler: examples/firstLambda/index.handler\n        name: TheFirstLambda\n\nstepFunctions:\n  stateMachines:\n    foo:\n      definition:\n        Comment: \"An example of the Amazon States Language using wait states\"\n        StartAt: FirstLambda\n        States:\n            FirstLambda:\n              Type: Task\n              Next: wait_using_seconds\n            wait_using_seconds:\n              Type: Wait\n              Seconds: 2\n              Next: wait_using_timestamp\n            wait_using_timestamp:\n              Type: Wait\n              Timestamp: '2015-09-04T01:59:00Z'\n              Next: wait_using_timestamp_path\n            wait_using_timestamp_path:\n              Type: Wait\n              TimestampPath: \"$.expirydate\"\n              Next: wait_using_seconds_path\n            wait_using_seconds_path:\n              Type: Wait\n              SecondsPath: \"$.expiryseconds\"\n              Next: FinalState\n            FinalState:\n              Type: Pass\n              End: true"]},{"id":115541982,"files":["service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id}\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline"]},{"id":106114725,"files":["service: deploy-with-serverless\n\nplugins:\n  - serverless-stack-output\n\ncustom:\n  queueName: serverless-projects-batch-queue\n  projectsTableName: serverless-projects\n  jobDefinitionName: serverless-batch-job-definition\n  keyPair: RafalWilinski-personal-ssh-key\n\n  output:\n    handler: scripts/deploy-proxy.handler\n    file: user-data.json\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    PROJECTS_TABLE: ${self:custom.projectsTableName}\n    JOB_QUEUE: ${self:custom.queueName}\n    JOB_DEFINITON_NAME: ${self:custom.jobDefinitionName}\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'dynamodb:GetItem'\n        - 'dynamodb:PutItem'\n        - 'batch:SubmitJob'\n        - 'lambda:InvokeFunction'\n        - 's3:*'\n      Resource: '*'\n\nfunctions:\n  handler:\n    handler: functions/handler.run\n    memory: 128\n  image-proxy:\n    handler: functions/image-proxy.run\n    memory: 128\n    events:\n      - http:\n          path: /image\n          method: GET\n          cors: true\n  href:\n    handler: functions/href.run\n    memory: 128\n    events:\n      - http:\n          path: /template\n          method: GET\n          cors: true\n\nresources:\n  Resources:\n\n    # S3\n    DeployWithServerlessBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: deploy-with-serverless\n        AccessControl: PublicRead\n\n    # DynamoDB\n    ServerlessTemplatesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.projectsTableName}\n        AttributeDefinitions:\n          - AttributeName: url\n            AttributeType: S\n        KeySchema:\n          - AttributeName: url\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n    # Networking\n    ServerlessBatchVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n        EnableDnsSupport: true\n        EnableDnsHostnames: true\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchInternetGateway:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchVPCIPGWAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        InternetGatewayId:\n          Ref: ServerlessBatchInternetGateway\n        VpcId:\n          Ref: ServerlessBatchVPC\n      DependsOn:\n        - ServerlessBatchInternetGateway\n        - ServerlessBatchVPC\n    ServerlessBatchRouteTable:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: ServerlessBatchVPC\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchSubnetRouteTableAssoc:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: ServerlessBatchRouteTable\n        SubnetId:\n          Ref: ServerlessBatchSubnet\n    ServerlessBatchInternetRoute:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: ServerlessBatchInternetGateway\n        RouteTableId:\n          Ref: ServerlessBatchRouteTable\n      DependsOn: ServerlessBatchInternetGateway\n    ServerlessBatchSubnet:\n      Type: AWS::EC2::Subnet\n      Properties:\n        CidrBlock: \"10.0.0.0/24\"\n        MapPublicIpOnLaunch: true\n        VpcId:\n          Ref: ServerlessBatchVPC\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n    ServerlessBatchSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupName: ServerlessBatchSecurityGroup\n        GroupDescription: Security Group for AWS Batch for Serverless-deploy-button project\n        VpcId:\n          Ref: ServerlessBatchVPC\n        SecurityGroupEgress:\n          -\n            IpProtocol: tcp\n            FromPort: \"0\"\n            ToPort: \"60000\"\n            CidrIp: \"0.0.0.0/0\"\n        SecurityGroupIngress:\n          -\n            IpProtocol: tcp\n            FromPort: \"22\"\n            ToPort: \"22\"\n            CidrIp: \"0.0.0.0/0\"\n        Tags:\n          - Key: project\n            Value: \"deploy-with-serverless\"\n\n    # ECR Repository\n    ServerlessBatchRepository:\n      Type: AWS::ECR::Repository\n      Properties:\n        RepositoryName: \"serverless-batch\"\n        RepositoryPolicyText: \n          Version: \"2012-10-17\"\n          Statement: \n            - \n              Sid: AllowPushPull\n              Effect: Allow\n              Principal: \n                AWS: \n                  - 'Fn::GetAtt':\n                    - ServerlessBatchUser\n                    - Arn\n              Action: \n                - \"ecr:GetDownloadUrlForLayer\"\n                - \"ecr:BatchGetImage\"\n                - \"ecr:BatchCheckLayerAvailability\"\n                - \"ecr:PutImage\"\n                - \"ecr:InitiateLayerUpload\"\n                - \"ecr:UploadLayerPart\"\n                - \"ecr:CompleteLayerUpload\"\n      DependsOn: ServerlessBatchUser\n    \n    # IAM\n    ServerlessBatchUser:\n      Type: AWS::IAM::User\n      Properties:\n        LoginProfile:\n          Password: ${file(./password.yml):password}\n        UserName: ServerlessBatchUser\n    ServerlessBatchUserPolicy:\n      Type: AWS::IAM::Policy\n      Properties:\n        PolicyName: ServerlessBatchUserPolicy\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Action:\n                - ecr:GetAuthorizationToken\n                - ecr:InitiateLayerUpload\n              Resource: \"*\"\n        Users:\n          - Ref: ServerlessBatchUser\n      DependsOn: ServerlessBatchUser\n    ServerlessBatchUserKeys:\n      Type: AWS::IAM::AccessKey\n      Properties:\n        UserName: ServerlessBatchUser\n      DependsOn: ServerlessBatchUser\n    ServerlessBatchServiceRole: # Standard AWS Batch Role\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ServerlessBatchServiceRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - batch.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ServerlessBatchPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Resource: '*'\n                  Action:\n                    - ec2:DescribeAccountAttributes\n                    - ec2:DescribeInstances\n                    - ec2:DescribeSubnets\n                    - ec2:DescribeSecurityGroups\n                    - ec2:DescribeKeyPairs\n                    - ec2:DescribeImages\n                    - ec2:DescribeImageAttribute\n                    - ec2:DescribeSpotFleetInstances\n                    - ec2:DescribeSpotFleetRequests\n                    - ec2:DescribeSpotPriceHistory\n                    - ec2:RequestSpotFleet\n                    - ec2:CancelSpotFleetRequests\n                    - ec2:ModifySpotFleetRequest\n                    - ec2:TerminateInstances\n                    - autoscaling:DescribeAccountLimits\n                    - autoscaling:DescribeAutoScalingGroups\n                    - autoscaling:DescribeLaunchConfigurations\n                    - autoscaling:DescribeAutoScalingInstances\n                    - autoscaling:CreateLaunchConfiguration\n                    - autoscaling:CreateAutoScalingGroup\n                    - autoscaling:UpdateAutoScalingGroup\n                    - autoscaling:SetDesiredCapacity\n                    - autoscaling:DeleteLaunchConfiguration\n                    - autoscaling:DeleteAutoScalingGroup\n                    - autoscaling:CreateOrUpdateTags\n                    - autoscaling:SuspendProcesses\n                    - autoscaling:PutNotificationConfiguration\n                    - autoscaling:TerminateInstanceInAutoScalingGroup\n                    - ecs:*\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:DescribeLogGroups\n                    - iam:GetInstanceProfile\n                    - iam:PassRole\n                    - ecr:*\n                    - dynamodb:PutItem\n                    - dynamodb:DescribeTable\n\n    # AWS Batch\n    ServerlessBatchComputeEnvironment:\n      Type: AWS::Batch::ComputeEnvironment\n      Properties:\n        Type: MANAGED\n        ComputeEnvironmentName: ServerlessBatchComputeEnvironment\n        ServiceRole:\n          Fn::GetAtt:\n            - ServerlessBatchServiceRole\n            - Arn\n        State: ENABLED\n        ComputeResources:\n          MinvCpus: 0\n          MaxvCpus: 4\n          DesiredvCpus: 0\n          Ec2KeyPair: ${self:custom.keyPair}\n          Type: \"EC2\"\n          ImageId: ami-ec33cc96 # ECS Optimized AMI\n          InstanceRole: ecsInstanceRole\n          InstanceTypes:\n            - m3.medium\n          SecurityGroupIds:\n            - Ref: ServerlessBatchSecurityGroup\n          Subnets:\n            - Ref: ServerlessBatchSubnet\n    ServerlessBatchJobQueue:\n      Type: \"AWS::Batch::JobQueue\"\n      Properties:\n        ComputeEnvironmentOrder:\n          - ComputeEnvironment: ServerlessBatchComputeEnvironment\n            Order: 1\n        Priority: 1\n        State: ENABLED\n        JobQueueName: ${self:custom.queueName}\n      DependsOn: ServerlessBatchComputeEnvironment\n    ServerlessBatchJobDefinition:\n      Type: 'AWS::Batch::JobDefinition'\n      Properties:\n        Type: container\n        JobDefinitionName: ${self:custom.jobDefinitionName}\n        ContainerProperties:\n          Memory: 1024\n          Privileged: true\n          Vcpus: 1\n          Image: \n            Fn::Join:\n              - \"\"\n              - - Ref: AWS::AccountId\n                - '.dkr.ecr.us-east-1.amazonaws.com/serverless-batch:latest'\n        RetryStrategy:\n          Attempts: 1\n  Outputs:\n    accessKey:\n      Description: Access Key\n      Value:\n        Ref: ServerlessBatchUserKeys\n    secretKey:\n      Description: Secret Key\n      Value:\n        Fn::GetAtt:\n          - ServerlessBatchUserKeys\n          - SecretAccessKey\n      "]},{"id":115530102,"files":["\n# Service name\nservice: serverless-ffmpeg\n\ncustom:\n  # Configure these\n  source_bucket: ${file(./config.yml):source_bucket}\n  destination_bucket: ${file(./config.yml):destination_bucket}\n  ffmpeg_params: ${file(./config.yml):ffmpeg_params}\n  # Leave as is\n  remover:\n     buckets:\n       - ${self:custom.source_bucket}\n       - ${self:custom.destination_bucket}\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-remover\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  timeout: 300\n  stage: ${file(./config.yml):stage}\n  region: ${file(./config.yml):region}\n  memorySize: ${file(./config.yml):memorySize}\n  environment:\n    DESTINATION_BUCKET: ${self:custom.destination_bucket}\n    FFMPEG_PARAMS: ${self:custom.ffmpeg_params}\n  iamRoleStatements:\n    # List buckets\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n      Resource:\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.source_bucket}\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.destination_bucket}\n    # Operate in buckets\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:DeleteObject\n      Resource:\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.source_bucket}\n            - \"/*\"\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - ${self:custom.destination_bucket}\n            - \"/*\"\n\nfunctions:\n  ffmpeg:\n    handler: handler.main\n    events:\n      - s3:\n          bucket: ${self:custom.source_bucket} # This will create the source bucket\n          event: s3:ObjectCreated:*\n\n\nresources:\n  Resources:\n    # Make the output bucket\n    FfmpegDestination:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.destination_bucket}"]},{"id":152268711,"files":["service: findme\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:10\n\npackage:\n  exclude:\n    - 'weights/**'\n\nfunctions:\n  search_status:\n    handler: search_status.main\n    name: \"findme/search_status\"\n    events:\n      - http:\n          method: GET\n          path: /api/search/{id}\n          resp: http\n    annotations:\n      final: true\n  schedule_search:\n    handler: schedule_search.main\n    name: \"findme/schedule_search\"\n    events:\n      - http: POST /api/search\n    annotations:\n      final: true\n  twitter_search:\n    handler: twitter_search.main\n    name: \"findme/twitter_search\"\n    events:\n      - trigger: search_request\n    annotations:\n      final: true\n  compare_images:\n    handler: compare_images.main\n    name: \"findme/compare_images\"\n    image: jamesthomas/action-nodejs-v10:tfjs-faceapi\n    memory: 512\n    events:\n      - trigger: tweet_image\n    annotations:\n      final: true\n\ncustom: \n  credentials: ${file(creds.json)}\n\nresources:\n  packages:\n    findme:\n      parameters:\n        redis: ${self:custom.credentials.redis}\n        auth0: ${self:custom.credentials.auth0}\n        twitter_client: ${self:custom.credentials.twitter}\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":139438884,"files":["service: ${file(./serverless-vpc-variables.yml):serviceName}\n\n\nplugins:\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\n\ncustom:\n  region: ${file(./serverless-vpc-variables.yml):region}\n  accountId: ${file(./serverless-vpc-variables.yml):accountId}\n  domain:\n    staging: staging-${self:service}.${file(./serverless-vpc-variables.yml):baseDomain}\n    production: production-${self:service}.${file(./serverless-vpc-variables.yml):baseDomain}\n  subnetId:\n    staging: ${file(./serverless-vpc-variables.yml):subnetId.staging}\n    production: ${file(./serverless-vpc-variables.yml):subnetId.production}\n  securityGroup:\n    staging: ${file(./serverless-vpc-variables.yml):securityGroup.staging}\n    production: ${file(./serverless-vpc-variables.yml):securityGroup.production}\n  customDomain:\n    basePath: ''\n    domainName: ${self:custom.domain.${opt:stage}}\n    certificateName: '*.${file(./serverless-vpc-variables.yml):baseDomain}'\n    stage: ${opt:stage}\n    createRoute53Record: true\n  apigwBinary:\n    types:\n      - '*/*'\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${file(./serverless-vpc-variables.yml):region}\n  memorySize: 128\n  environment:\n    DB_PREFIX: \"${opt:stage}_${self:service}_\"\n    SERVICE_AWS_REGION: \"${file(./serverless-vpc-variables.yml):region}\"\n    NODE_ENV: 'production'\n    STATIC_PATH: ''\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:BatchGetItem\"\n        - \"dynamodb:BatchWriteItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:DescribeTimeToLive\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:UpdateTable\"\n      Resource: \"arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${opt:stage}_${self:service}_*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:CreateTable\"\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:ListTables\"\n      Resource: \"*\"\n\n\n\nfunctions:\n  app:\n    handler: lambda.handler\n    vpc:\n      securityGroupIds: ${self:custom.securityGroup.${opt:stage}}\n      subnetIds: ${self:custom.subnetId.${opt:stage}}\n    events:\n      - http:\n          method: ANY\n          path: /\n          contentHandling: CONVERT_TO_BINARY\n      - http:\n          method: ANY\n          path: '{proxy+}'\n          contentHandling: CONVERT_TO_BINARY\n","---\n\nserviceName: \"dog\"\nbaseDomain: \"domain.io\"\nregion: \"ap-southeast-1\"\naccountId: \"111111111111\"\n\nsubnetId:\n  staging:\n    - \"subnet-aaaaaaaa\"\n    - \"subnet-bbbbbbbb\"\n  production:\n    - \"subnet-cccccccc\"\n    - \"subnet-dddddddd\"\n\nsecurityGroup:\n  staging:\n    - \"sg-eeeeeeee\"\n  production:\n    - \"sg-ffffffff\"\n"]},{"id":92947815,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-next\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\npackage:\n  individually: true\n\nfunctions:\n  web:\n    handler: aws/web.handler\n    events:\n      - http:\n          method: get\n          path: /\n      - http:\n          method: get\n          path: /_next/{proxy+}\n    package:\n      include:\n        - ../.next/**\n        - ../static/**\n\n  api:\n    handler: aws/api.handler\n    events:\n      - http:\n          method: any\n          path: /n/{proxy+}\n          authorizer: authorization\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\n  authentication:\n    handler: aws/authentication.handler\n    events:\n      - http:\n          method: post\n          path: /auth\n\n  authorization:\n    handler: aws/authorization.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\nplugins:\n  - serverless-offline\n  - serverless-jest-plugin\n  - serverless-plugin-webpack\n"]},{"id":87950021,"files":["service: sls-iopipe-offline-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nplugins:\n  - serverless-plugin-iopipe/index.js\n  - serverless-offline\nfunctions:\n  index:\n    handler: handlers/index.handler\n    events:\n      - http:\n          path: /\n          method: get\ncustom:\n  serverless-offline:\n    port: 4982\n    host: 127.0.0.1\n  iopipeHandlerDir: iopipe_handlers\n","service: example\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nfunctions:\n  hello:\n    handler: index.handler\ncustom:\n  iopipeNoVerify: true\n","service: sls-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n","service: sls-test\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  NODE_ENV: ${env:NODE_ENV}\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\ncustom:\n  iopipeQuote: double\n  iopipeExclude: excluded,foo\n  iopipePlaceholder: false\n  extraCustomKey: true\n  iopipeTestInterpolate: ${env:NODE_ENV}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n  multiple:\n    handler: handlers/multiple.handler\n  multipleDifferentHandler:\n    handler: handlers/multiple.differentNameHandler\n  es5:\n    handler: handlers/es5.handler\n  multiple-dots-in-name:\n    handler: handlers/multiple.dots.in.name.handler\n  noModule:\n    handler: handlers/noModule.handler\n  excluded:\n    handler: handlers/excluded.handler\n  syntaxError:\n    handler: handlers/syntaxError.handler\n  es5Named:\n    handler: handlers/es5Named.handler\n  python:\n    handler: python/main.longRunning\n    runtime: python2.7\n  nameMismatch:\n    handler: handlers/differentName.wow\n","service: sls-iopipe\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nenvironment:\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\nplugins:\n  - serverless-plugin-iopipe/index.js\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n","service: sls-iopipe\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: us-west-2\nplugins:\n  - serverless-plugin-iopipe/index.js\nenvironment:\n  NODE_ENV: ${env:NODE_ENV}\n  IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}\ncustom:\n  iopipeQuote: double\n  iopipeExclude: excluded,foo\n  iopipePlaceholder: false\n  extraCustomKey: true\n  iopipeTestInterpolate: ${env:NODE_ENV}\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"logs:*\"\n    Resource:\n      - \"*\"\nfunctions:\n  simple:\n    handler: handlers/simple.handler\n"]},{"id":88442673,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-facebook-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_STAGE}\n    FACEBOOK_BOT_VERIFY_TOKEN: ${self:custom.secrets.FACEBOOK_BOT_VERIFY_TOKEN}\n    FACEBOOK_BOT_PAGE_ACCESS_TOKEN: ${self:custom.secrets.FACEBOOK_BOT_PAGE_ACCESS_TOKEN}\n    DOWNLOAD_TOPIC: ${self:provider.environment.SERVERLESS_PROJECT}-download-topic-${opt:stage, self:provider.stage}\n    RENDER_BUCKET:\n      Fn::ImportValue: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    SOURCE_BUCKET:\n      Fn::ImportValue: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\npackage:\n  exclude:\n    - test/**\n    - .git/**\n    - templates\n  individually: true\n\nfunctions:\n  facebook:\n    handler: facebook/index.handler\n    timeout: 15\n    events:\n      - http:\n          path: facebook\n          method: get\n      - http:\n          path: facebook\n          method: post\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:video-render-ready-topic-${opt:stage, self:provider.stage} # fn import value not yet working in serverless\n  download:\n    handler: download/index.handler\n    timeout: 300\n    events:\n      - sns: ${self:provider.environment.DOWNLOAD_TOPIC}\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}\n","frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-upload-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    STATUS_TOPIC_NAME: video-status-topic-${opt:stage, self:provider.stage}\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_STAGE}\n    SOURCE_BUCKET:\n      Fn::ImportValue: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    RENDER_BUCKET:\n      Fn::ImportValue: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n      - S3:ListBucket\n      - S3:GetObject\n      - S3:PutObject\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\npackage:\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n  status:\n    handler: status/index.handler\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:video-render-ready-topic-${opt:stage, self:provider.stage} # fn import value not yet working in serverless\n  get-metadata:\n    handler: get-metadata/index.handler\n    events:\n      - http:\n          path: metadata/{session}\n          method: get\n          cors: true\n    timeout: 30\n  signed-url:\n    handler: signed-url/index.handler\n    events:\n      - http:\n          path: signed-url\n          method: get\n          cors: true\n    timeout: 20\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  webpackIncludeModules: true\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Resources:\n    SessionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}","frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: et-video-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  environment:\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_PROJECT: ${self:service}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    ACCOUNT: ${self:custom.secrets.ACCOUNT} # Using AWS::Account with SNS fails\n    STATUS_TOPIC: video-status-topic-${opt:stage, self:provider.stage}\n    SESSION_TOPIC_NAME: video-session-topic-${opt:stage, self:provider.stage}\n    CAPTURE_TOPIC_NAME: video-capture-topic-${opt:stage, self:provider.stage}\n    RENDER_START_TOPIC_NAME: video-render-start-topic-${opt:stage, self:provider.stage}\n    RENDER_READY_TOPIC_NAME: video-render-ready-topic-${opt:stage, self:provider.stage}\n    SOURCE_BUCKET:\n      Ref: SourceBucket\n    RENDER_BUCKET:\n      Ref: RenderBucket\n    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n    LABELS_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-labels-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}\n    VIDEO_MAX_DURATION: 30 # (in seconds) limit video duration (0 = no limit)\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:ListBucket\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:DeleteObject\n      Resource:\n        - \"*\"\n    - Effect: Allow\n      Action:\n      - dynamodb:*\n      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - SNS:*\n      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*\n    - Effect: Allow\n      Action:\n      - rekognition:DetectLabels\n      Resource: \"*\"\n\npackage:\n  exclude:\n    - test/**\n    - .git/**\n    - templates\n    - ffmpeg/**\n  individually: true\n\nfunctions:\n  create-session:\n    handler: create-session/index.handler\n    timeout: 15\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.SESSION_TOPIC_NAME}\n  status:\n    handler: status/index.handler\n    timeout: 30\n    events:\n      - sns: ${self:provider.environment.STATUS_TOPIC}\n      - schedule: rate(1 minute)\n  get-labels:\n    handler: get-labels/index.handler\n    timeout: 30\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.CAPTURE_TOPIC_NAME}\n  create-captures:\n    handler: create-captures/index.handler\n    memorySize: 1536\n    timeout: 300\n    optimize:\n      includePaths:\n        - ffmpeg/ffmpeg\n        - ffmpeg/ffprobe\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}\n  create-gif:\n    handler: create-gif/index.handler\n    memorySize: 1536\n    timeout: 300\n    optimize:\n      includePaths:\n        - ffmpeg/ffmpeg\n        - ffmpeg/ffprobe\n    events:\n      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-mocha-plugin:\n    functionTemplate: templates/function.ejs\n  secrets: ${file(../.secrets.yml)}\n\nresources:\n  Outputs:\n    RenderBucket:\n      Value:\n        Ref: RenderBucket\n      Export:\n        Name: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    SourceBucket:\n      Value:\n        Ref: SourceBucket\n      Export:\n        Name: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}\n    RenderReadyTopicArn:\n      Value:\n        Fn::Join:\n          - \":\"\n          - - arn:aws:sns\n            - Ref: AWS::Region\n            - Ref: AWS::AccountId\n            - Ref: RenderReadyTopic\n      Export:\n        Name: video-service-render-ready-topic-${self:provider.environment.SERVERLESS_STAGE}\n  Resources:\n    CaptureTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.CAPTURE_TOPIC_NAME}\n        TopicName: ${self:provider.environment.CAPTURE_TOPIC_NAME}\n    RenderStartTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.RENDER_START_TOPIC_NAME}\n        TopicName: ${self:provider.environment.RENDER_START_TOPIC_NAME}\n    RenderReadyTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}\n        TopicName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}\n    SessionTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: ${self:provider.environment.SESSION_TOPIC_NAME}\n        TopicName: ${self:provider.environment.SESSION_TOPIC_NAME}\n    CaptureTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: CaptureTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: CaptureTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: CaptureTopic\n        Topics:\n          - Ref: CaptureTopic\n    RenderStartTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: RenderStartTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: RenderStartTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: RenderStartTopic\n        Topics:\n          - Ref: RenderStartTopic\n    RenderReadyTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: RenderReadyTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: RenderReadyTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: RenderReadyTopic\n        Topics:\n          - Ref: RenderReadyTopic\n    SessionTopicPolicy:\n      Type: AWS::SNS::TopicPolicy\n      Properties:\n        PolicyDocument:\n          Id: SessionTopicPolicy\n          Version: '2012-10-17'\n          Statement:\n          - Sid: SessionTopicPolicy-001\n            Effect: Allow\n            Principal:\n              AWS: \"*\"\n            Action: sns:Publish\n            Resource:\n              Ref: SessionTopic\n        Topics:\n          - Ref: SessionTopic\n    SourceBucket:\n      Type: AWS::S3::Bucket\n      DependsOn:\n        - SessionTopic\n        - CaptureTopic\n      Properties:\n        AccessControl: BucketOwnerFullControl\n        # clean the bucket\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled\n        CorsConfiguration:\n          CorsRules:\n          - AllowedHeaders:\n              - '*'\n            AllowedMethods:\n              - PUT\n            AllowedOrigins:\n              - '*'\n            ExposedHeaders:\n              - Date\n            Id: CorsRule1\n            MaxAge: '3600'\n        NotificationConfiguration:\n          TopicConfigurations:\n            - Topic:\n                Ref: SessionTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: prefix\n                      Value: videos/\n            - Topic:\n                Ref: CaptureTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: prefix\n                      Value: captures/\n    RenderBucket:\n      Type: AWS::S3::Bucket\n      DependsOn:\n        - RenderReadyTopic\n      Properties:\n        AccessControl: BucketOwnerFullControl\n        # clean the bucket\n        LifecycleConfiguration:\n          Rules:\n          - ExpirationInDays: 1\n            Status: Enabled\n        NotificationConfiguration:\n          TopicConfigurations:\n            - Topic:\n                Ref: RenderReadyTopic\n              Event: s3:ObjectCreated:*\n              Filter:\n                S3Key:\n                  Rules:\n                    - Name: suffix\n                      Value: \"metadata.json\"\n\n    CreateDashgifLambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Fn::Join:\n            - \":\"\n            - - arn:aws:sns\n              - Ref: AWS::Region\n              - Ref: AWS::AccountId\n              - Ref: RenderStartTopic\n        FunctionName:\n          Fn::GetAtt:\n          - CreateDashgifLambdaFunction\n          - Arn\n    CreateDashcapturesLambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        Principal: sns.amazonaws.com\n        SourceArn:\n          Fn::Join:\n            - \":\"\n            - - arn:aws:sns\n              - Ref: AWS::Region\n              - Ref: AWS::AccountId\n              - Ref: RenderStartTopic\n        FunctionName:\n          Fn::GetAtt:\n          - CreateDashcapturesLambdaFunction\n          - Arn\n    StatusTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.SESSION_TABLE_NAME}\n    LabelsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: frame\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: frame\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 10\n          WriteCapacityUnits: 10\n        TableName: ${self:provider.environment.LABELS_TABLE_NAME}\n"]},{"id":135475607,"files":["service: syncService\n\ncustom:\n  myRegion: us-east-1\n  myDDB: Users\n  myPool: my-userpool-name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  UserOnboardingLambda:\n    handler: cognitoToDDB.handler\n    events:\n      - cognitoUserPool:\n          pool: ${self:custom.myPool}\n          trigger: PostConfirmation\n          existing: true\n    role: CustomUserOnboardingRole\n    environment:\n      TABLE_NAME: ${self:custom.myDDB}\n      REGION: ${self:custom.myRegion}\n\nresources:\n  Resources:\n    CustomUserOnboardingRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: CustomUserOnboardingRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: CustomCloudWatchLogsPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n          - PolicyName: CustomUserOnboardingPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - dynamodb:PutItem\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:dynamodb'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'table/${self:custom.myDDB}'\n"]},{"id":119206991,"files":["service: serverless-image-rendering\n\ncustom:\n  envName: '${self:provider.stage}'\n  apigwBinary:\n    types:\n      - '*/*'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  timeout: 5 # optional, in seconds, default is 6\n\n  role: ImageRenderingRole\n\n  environment:\n    ENV_NAME: ${self:custom.envName}\n    APP_NAME: serverless-image-rendering\n    BUCKET: YOUR-S3-BUCKET-NAME\n\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n\nfunctions:\n  resizeImage:\n    name: ${self:service}-${self:provider.stage}\n    description: real time image resizing\n    handler: handler.resizeImage\n    events:\n      - http:\n          path: resize-image\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n\nresources:\n  Resources:\n    ImageRenderingRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-S3-AND-LOG-ACCESS\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: ${self:service}-s3-and-log-access\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource:\n                    - 'arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - \"s3:GetObject\"\n                  Resource:\n                    - 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'\n"]},{"id":84279919,"files":["service: imageUploadDemo\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  # Provide permissions for this service to manipulate S3.\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::[bucketName]/*\"\n\n# Expose function to public API for POST requests.\nfunctions:\n  requestUploadURL:\n    handler: handler.requestUploadURL\n    events:\n      - http:\n          path: requestUploadURL\n          method: post\n          cors: true\n\n# Give service access to the specific S3 bucket.\nresources:\n  Resources:\n    UploadBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: [bucketName]\n        AccessControl: PublicRead\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n"]},{"id":149463320,"files":["# serverless.yml\nservice: resizeS3image\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom: ${file(env.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  stage: ${opt:stage,'dev'}\n  timeout: 5 # optional, in seconds, default is 6\n  environment:\n    BUCKET: ${self:custom.${self:provider.stage}.BUCKET}\n    URL: ${self:custom.${self:provider.stage}.URL}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 's3:PutObjectAcl'\n        - 's3:PutObject'\n        - 's3:ListBucket'\n      Resource: '*'\n\n# you can add packaging information here\npackage:\n  exclude:\n    - ./**\n\nfunctions:\n  handler:\n    handler: src/handler.imageprocess\n    name: resizeimage-${self:provider.stage}\n    memorySize: ${self:custom.${self:provider.stage}.MEMORY_SIZE}\n    timeout: ${self:custom.${self:provider.stage}.TIMEOUT}\n    reservedConcurrency: ${self:custom.${self:provider.stage}.TIMEOUT}\n    events:\n      - http:\n          path: /{key+}\n          method: get\n          integration: lambda-proxy\n          cors:\n            origins:\n              - ${self:custom.${self:provider.stage}.ORIGIN}\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Access-Control-Allow-Headers\n              - Access-Control-Allow-Origin\n            allowCredentials: true\n          parameters:\n            paths:\n              key: true\n    environment:\n      BUCKET: ${self:custom.${self:provider.stage}.BUCKET}\n      URL: ${self:custom.${self:provider.stage}.URL}\n"]},{"id":79894290,"files":["service: nj2jp\n\npackage:\n  exclude:\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: ${opt:stage}\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: Allow\n      Resource: \"*\"\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DetachNetworkInterface\n        - ec2:DeleteNetworkInterface\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:PutLogEvents\n        - ses:SendEmail\n        - ses:SendRawEmail\n        - lambda:InvokeFunction\n  environment:\n    MONGO_URI: ${file(./config.${self:provider.stage}.yml):mongoURI}\n    AUTH0_JWT_SECRET: ${file(./config.${self:provider.stage}.yml):auth0JwtSecret}\n    MARKET_HERO_API_KEY: ${file(./config.${self:provider.stage}.yml):marketHeroApiKey}\n    SQUARE_ENV: ${file(./config.${self:provider.stage}.yml):squareEnv}\n    US_SQUARE_LOCATION: ${file(./config.${self:provider.stage}.yml):usSquareLocation}\n    US_SQUARE_ACCESS_TOKEN: ${file(./config.${self:provider.stage}.yml):usSquareAccessToken}\n    US_SQUARE_APPLICATION_ID: ${file(./config.${self:provider.stage}.yml):usSquareApplicationId}\n    JP_SQUARE_LOCATION: ${file(./config.${self:provider.stage}.yml):jpSquareLocation}\n    JP_SQUARE_ACCESS_TOKEN: ${file(./config.${self:provider.stage}.yml):jpSquareAccessToken}\n    JP_SQUARE_APPLICATION_ID: ${file(./config.${self:provider.stage}.yml):jpSquareApplicationId}\n    JWT_SECRET: ${file(./config.${self:provider.stage}.yml):jwtSecret}\n    SAGAWA_ENV: ${file(./config.${self:provider.stage}.yml):sagawaEnv}\n    SAGAWA_JAPANESE: ${file(./config.${self:provider.stage}.yml):sagawaJapanese}\n    SAGAWA_ENGLISH: ${file(./config.${self:provider.stage}.yml):sagawaEnglish}\n    SLACK_SUPPORT_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackSupportWebhook}\n    SLACK_ERROR_NOTIFICATION_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackErrorNotificationWebhook}\n    SLACK_GENERAL_NOTIFICATION_WEBHOOK: ${file(./config.${self:provider.stage}.yml):slackGeneralNotificationWebhook}\n    LAMBDA_ENV: ${file(./config.${self:provider.stage}.yml):lambdaEnv}\n    LAMBDA_SECRET_ACCESS_KEY: ${file(./config.${self:provider.stage}.yml):lambdaSecretAccessKey}\n    LAMBDA_ACCESS_KEY_ID: ${file(./config.${self:provider.stage}.yml):lambdaAccessKeyId}\n    BASE_URL: ${file(./config.${self:provider.stage}.yml):baseUrl}\n    CEO_EMAIL: ${file(./config.${self:provider.stage}.yml):ceoEmail}\n    CTO_EMAIL: ${file(./config.${self:provider.stage}.yml):ctoEmail}\n    CDO_EMAIL: ${file(./config.${self:provider.stage}.yml):cdoEmail}\n    AWS_SES_REGION: ${file(./config.${self:provider.stage}.yml):awsSesRegion}\n    RECAPTCHA_SECRET_KEY: ${file(./config.${self:provider.stage}.yml):recaptchaSecretKey}\n    SAGAWA_SHIPPER_1: ${file(./config.${self:provider.stage}.yml):shipper1}\n    # SAGAWA_SHIPPER_2: ${file(./config.${self:provider.stage}.yml):shipper2}\n    # SAGAWA_SHIPPER_3: ${file(./config.${self:provider.stage}.yml):shipper3}\n    # SAGAWA_SHIPPER_4: ${file(./config.${self:provider.stage}.yml):shipper4}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n  graphiql:\n    babelOptions:\n      presets: [es2015, es2016, stage-0]\n      plugins: [transform-runtime]\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    memorySize: 1024\n    timeout: 20\n    vpc:\n      securityGroupIds:\n        - ${file(./config.${self:provider.stage}.yml):securityGroupId}\n      subnetIds:\n        - ${file(./config.${self:provider.stage}.yml):subnetId}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n          - ses:SendEmail\n          - ses:SendRawEmail\n          - lambda:InvokeFunction\n    events:\n      - http:\n          path: graphql\n          method: post\n          integration: lambda\n          cors: true\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n\n  sagawa:\n    handler: handler.sagawa\n    memorySize: 1024\n    timeout: 20\n    vpc:\n      securityGroupIds:\n        - ${file(./config.${self:provider.stage}.yml):securityGroupId}\n      subnetIds:\n        - ${file(./config.${self:provider.stage}.yml):subnetId}\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n          - ses:SendEmail\n          - ses:SendRawEmail\n          - lambda:InvokeFunction\n    events:\n      - schedule:\n          name: ${self:provider.stage}-weekly-upload\n          description: Upload weekend orders to sagawa\n          rate: cron(0 13 ? * MON *)\n          enabled: true\n          input:\n            type: weekly upload\n      - schedule:\n          name: ${self:provider.stage}-notify-sagawa\n          description: Send mail to sagawa of pending orders\n          rate: cron(0 14 * * ? *)\n          enabled: true\n          input:\n            type: notify sagawa\n"]},{"id":74042923,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: contact-form\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n\nfunctions:\n  sendForm:\n    handler: handler.processFormData\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true"]},{"id":92717859,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-aws-iot\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1 # Set your AWS region here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"iot:Connect\"\n        - \"iot:Publish\"\n        - \"iot:Subscribe\"\n        - \"iot:Receive\"\n        - \"iot:GetThingShadow\"\n        - \"iot:UpdateThingShadow\"\n      Resource: \"*\"\n\nfunctions:\n  iotPresignedUrl:\n    handler: src/iotPresignedUrl.handler\n    timeout: 30\n    events:\n      - http: OPTIONS /iot-presigned-url\n      - http:\n          method: GET\n          path: /iot-presigned-url\n    environment:\n      IOT_AWS_REGION: 'your-iot-region'\n      IOT_ENDPOINT_HOST: 'your-iot-host'\n      IOT_ACCESS_KEY: 'your-access-key'\n      IOT_SECRET_KEY: 'your-secret-key'\n  notifyDisconnect:\n    handler: src/notifyDisconnect.handler\n    timeout: 30\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'last-will'\"\n    environment:\n      IOT_AWS_REGION: 'your-iot-region'\n      IOT_ENDPOINT_HOST: 'your-iot-host'\n"]},{"id":215221300,"files":["service: my-service\n\nprovider:\n  name: tencent\n  credentials: ~/credentials # 绝对地址，默认为 ~/credentials\n  stage: test # 阶段，默认为 dev\n  runtime: Nodejs8.9 # 可以指定腾讯云Serverless Cloud Function支持的Runtime， 默认nodejs8.9\n  cosBucket: DEFAULT # 可以指定，默认为DEFAULT: sls-cloudfunction-{region}\n  role: QCS_SCFExcuteRole # 可以指定，默认是QCS_SCFExcuteRole\n  memorySize: 256 # 默认256M，优先级：函数设置>全局设置>默认设置\n  timeout: 10 # 默认10s，优先级：函数设置>全局设置>默认设置\n  region: ap-shanghai # 默认sp-guangzhou，优先级：函数设置>全局设置>默认设置\n  environment: # 公共环境变量\n    variables:\n      ENV_FIRST: env1\n      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-cloudfunction\n\npackage:\n  exclude:\n    - package-lock.json\n    - .gitignore\n    - .git/**\n    - node_modules/** # exclude all node_modules....\n  include:\n    - node_modules/moment/** # except necessary ones\n  excludeDevDependencies: false\n\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n    description: Tencent Serverless Cloud Function\n    runtime: Python3.6\n    memorySize: 256\n    timeout: 10\n    environment:\n      variables:\n        ENV_FIRST: env1\n        ENV_Third: env2\n    events:\n      - timer:\n          name: timer\n          parameters:\n            cronExpression: '*/5 * * * *'\n            enable: true\n      - cos:\n          name: cli-appid.cos.ap-beijing.myqcloud.com\n          parameters:\n            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n            filter:\n              prefix: filterdir/\n              suffix: .jpg\n            events: cos:ObjectCreated:*\n            enable: true\n      - apigw:\n          name: hello_world_apigw\n          parameters:\n            stageName: release\n            serviceId:\n            httpMethod: ANY\n      - cmq:\n          name: cmq_trigger\n          parameters:\n            name: test-topic-queue\n            enable: true\n      - ckafka:\n          name: ckafka_trigger\n          parameters:\n            name: ckafka-2o10hua5\n            topic: test\n            maxMsgNum: 999\n            offset: latest\n            enable: true\n  function_two:\n    handler: index.main_handler\n    description: Tencent Serverless Cloud Function\n    runtime: python3.6\n    memorySize: 256\n    timeout: 10\n    events:\n      - timer:\n          name: timer\n          parameters:\n            cronExpression: '*/5 * * * *'\n            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Go1\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - ./**\n#  include:\n#    - ./bin/**\n\nfunctions:\n  function_one:\n    handler: main\n#    description: Tencent Serverless Cloud Function\n#    runtime: Go1\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Nodejs8.9 # Nodejs8.9 or Nodejs6.10\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Php7 # Php7 or Php5\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\nfunctions:\n  function_one_one_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Php7 # Php7 or Php5\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # service name\n\nprovider: # provider information\n  name: tencent\n  runtime: Python3.6 # Python3.6 or Python2.7\n  credentials: ~/credentials\n\n# you can overwrite defaults here\n#  stage: dev\n#  cosBucket: DEFAULT\n#  role: QCS_SCFExcuteRole\n#  memorySize: 256\n#  timeout: 10\n#  region: ap-shanghai\n#  environment:\n#    variables:\n#      ENV_FIRST: env1\n#      ENV_SECOND: env2\n\nplugins:\n  - serverless-tencent-scf\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nfunctions:\n  function_one:\n    handler: index.main_handler\n#    description: Tencent Serverless Cloud Function\n#    runtime: Python3.6 # Python3.6 or Python2.7\n#    memorySize: 256\n#    timeout: 10\n#    environment:\n#      variables:\n#        ENV_FIRST: env1\n#        ENV_Third: env2\n#    events:\n#      - timer:\n#          name: timer\n#          parameters:\n#            cronExpression: '*/5 * * * *'\n#            enable: true\n#      - cos:\n#          name: cli-appid.cos.ap-beijing.myqcloud.com\n#          parameters:\n#            bucket: cli-appid.cos.ap-beijing.myqcloud.com\n#            filter:\n#              prefix: filterdir/\n#              suffix: .jpg\n#            events: cos:ObjectCreated:*\n#            enable: true\n#      - apigw:\n#          name: hello_world_apigw\n#          parameters:\n#            stageName: release\n#            serviceId:\n#            httpMethod: ANY\n#      - cmq:\n#          name: cmq_trigger\n#          parameters:\n#            name: test-topic-queue\n#            enable: true\n#      - ckafka:\n#          name: ckafka_trigger\n#          parameters:\n#            name: ckafka-2o10hua5\n#            topic: test\n#            maxMsgNum: 999\n#            offset: latest\n#            enable: true\n"]},{"id":72240875,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-snyk-test # NOTE: update this with your service name\n\nplugins:\n   - serverless-snyk\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-snyk-test # NOTE: update this with your service name\n\nplugins:\n   - serverless-snyk\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\ncustom:\n  snyk:\n    breakOnVuln: false\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello"]},{"id":83428108,"files":["service: assignment-build-executor-service\n\nprovider:\n  name: aws\n  runtime: java8\n  stage: dev\n  region: us-east-1\n  environment:\n    LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-submissions-${self:provider.stage}\"\n    LCRE_CANDIDATE_BUILD_REPORTS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-build-reports-${self:provider.stage}\"\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"s3:*\"\n        Resource: \"*\"\n      - Effect: Allow\n        Action:\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:UpdateItem\n          - dynamodb:DeleteItem\n        Resource: \"*\"\n\ncustom:\n  s3BucketPrefix: lcre\n\npackage:\n  artifact: build/distributions/assignment-build-executor-service.zip\n\nfunctions:\n  assignment-build-executor:\n    handler: xebia.lcre.BuildHandler\n    memorySize: 704\n    timeout: 300\n    events:\n      - s3:\n          bucket: ${self:provider.environment.LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET}\n          event: s3:ObjectCreated:*\n          \nresources:\n  Resources:\n    S3BucketForBuildReports:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.LCRE_CANDIDATE_BUILD_REPORTS_S3_BUCKET}\n        CorsConfiguration:\n          CorsRules:\n          - AllowedMethods:\n            - GET\n            - PUT\n            - POST\n            - HEAD\n            AllowedOrigins:\n            - \"*\"\n            AllowedHeaders:\n            - \"*\"\n\n","service: assignment-sender-service\n\nprovider:\n  name: aws\n  runtime: java8\n  region: us-east-1\n  stage: dev\n  environment:\n    LCRE_CANDIDATE_SUBMISSIONS_S3_BUCKET: \"${self:custom.s3BucketPrefix}-candidate-submissions-${self:provider.stage}\"\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n    LCRE_ASSIGNMENTS_BUCKET: \"${self:custom.s3BucketPrefix}-assignments-${self:provider.stage}\"\n    SOURCE_EMAIL: ${self:custom.sourceEmail}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"dynamodb:*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\ncustom:\n  awsAccountNumber: ${file(./env.yml):awsAccountNumber}\n  candidateTableStreamTimestamp: ${file(./env.yml):candidateTableStreamTimestamp}\n  s3BucketPrefix: lcre\n  sourceEmail: ${file(./env.yml):sourceEmail}\n\npackage:\n  artifact: target/scala-2.11/assignment-sender-service.jar\n\nfunctions:\n  sendAssignment:\n    handler: assignmentsender.AssignmentSenderHandler\n    events:\n      - stream: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountNumber}:table/${self:provider.environment.CANDIDATE_TABLE}/stream/${self:custom.candidateTableStreamTimestamp}\n","service: candidate-service\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    CANDIDATE_TABLE: candidate-${opt:stage, self:provider.stage}\n    CANDIDATE_EMAIL_TABLE: \"candidate-email-${opt:stage, self:provider.stage}\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/candidate-*\"\n\nfunctions:\n  candidateSubmission:\n    handler: api/candidate.submit\n    memorySize: 128\n    description: Submit candidate information and starts interview process.\n    events:\n      - http: \n          path: candidates\n          method: post\n          cors: true\n  listCandidates:\n    handler: api/candidate.list\n    memorySize: 128\n    description: List all candidates\n    events:\n      - http: \n          path: candidates\n          method: get\n          cors: true     \n  candidateDetails:\n    handler: api/candidate.get\n    events:\n      - http:\n          path: candidates/{id}\n          method: get\n          cors: true             \n\nresources:\n  Resources:\n    CandidatesDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"id\"\n            AttributeType: \"S\"   \n        KeySchema:\n          -\n            AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: \"NEW_IMAGE\"\n        TableName: ${self:provider.environment.CANDIDATE_TABLE}\n    CandidateEmailDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"email\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"email\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: ${self:provider.environment.CANDIDATE_EMAIL_TABLE}","service: ui-service\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nplugins:\n  - serverless-single-page-app-plugin\n\ncustom:\n  s3Bucket: lcre-website\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nresources:\n  Resources:\n    ## Specifying the S3 Bucket\n    WebAppS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3Bucket}\n        AccessControl: PublicRead\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: index.html\n    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront\n    WebAppS3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket:\n          Ref: WebAppS3Bucket\n        PolicyDocument:\n          Statement:\n            - Sid: PublicReadGetObject\n              Effect: Allow\n              Principal: \"*\"\n              Action:\n              - s3:GetObject\n              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*\n    ## Specifying the CloudFront Distribution to server your Web Application\n    WebAppCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Origins:\n            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com\n              ## An identifier for the origin which must be unique within the distribution\n              Id: WebApp\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig\n              # S3OriginConfig:\n              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z\n          Enabled: 'true'\n          ## Uncomment the following section in case you are using a custom domain\n          # Aliases:\n          # - mysite.example.com\n          DefaultRootObject: index.html\n          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html\n          ## The only exception are files that actually exist e.h. app.js, reset.css\n          CustomErrorResponses:\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - DELETE\n              - GET\n              - HEAD\n              - OPTIONS\n              - PATCH\n              - POST\n              - PUT\n            ## The origin id defined above\n            TargetOriginId: WebApp\n            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3\n            ForwardedValues:\n              QueryString: 'false'\n              Cookies:\n                Forward: none\n            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`\n            ViewerProtocolPolicy: redirect-to-https\n          ## The certificate to use when viewers use HTTPS to request objects.\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: 'true'\n          ## Uncomment the following section in case you want to enable logging for CloudFront requests\n          # Logging:\n          #   IncludeCookies: 'false'\n          #   Bucket: mylogs.s3.amazonaws.com\n          #   Prefix: myprefix\n\n  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation\n  Outputs:\n    WebAppCloudFrontDistributionOutput:\n      Value:\n        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]\n"]},{"id":95876882,"files":["service: aws-lambda-static-ip\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  vpc:\n    securityGroupIds:\n      - Fn::GetAtt: [VPCStaticIP, DefaultSecurityGroup]\n    subnetIds:\n      - Ref: SubnetPrivate\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ec2:CreateNetworkInterface\n        - ec2:DeleteNetworkInterface\n        - ec2:DescribeNetworkInterfaces\n      Resource: '*'\n\nfunctions:\n  logger:\n    handler: functions/logger/logger.handler\n    events:\n      - http:\n          path: log\n          method: get\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"sourceIp\" : \"$context.identity.sourceIp\" }'\n  caller:\n    environment:\n      URI:\n        Fn::Join: ['', [https://, Ref: ApiGatewayRestApi, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/log']]\n    handler: functions/caller/caller.handler\n    events:\n      - http:\n          path: call\n          method: get\n\nresources:\n  Resources:\n    # Resources created according to blog post:\n    # http://techblog.financialengines.com/2016/09/26/aws-lambdas-with-a-static-outgoing-ip/\n    \n    # Step 1: Create a new VPC\n    VPCStaticIP:\n      Type: AWS::EC2::VPC\n      Properties: \n        CidrBlock: 11.0.0.0/16\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-vpc\n    \n    # Step 2: Create 2 Subnets\n    SubnetPublic:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        CidrBlock: 11.0.0.0/24\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-public-subnet\n        VpcId:\n          Ref: VPCStaticIP\n\n    SubnetPrivate:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        CidrBlock: 11.0.1.0/24\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-private-subnet\n        VpcId:\n          Ref: VPCStaticIP\n    \n    # Step 3: Create an Internet Gateway\n    InternetGateway:\n      Type: AWS::EC2::InternetGateway\n      Properties:\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-igw\n\n    # Attach Internet Gateway to VPC\n    VPCGatewayAttachment:\n      Type: AWS::EC2::VPCGatewayAttachment\n      Properties:\n        InternetGatewayId:\n          Ref: InternetGateway\n        VpcId:\n          Ref: VPCStaticIP\n  \n    # Step 4: Create a public Route Table and Assign it to our public route\n    RouteTablePublic:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: VPCStaticIP\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-public-route\n  \n    RoutePublic:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        GatewayId:\n          Ref: InternetGateway\n        RouteTableId:\n          Ref: RouteTablePublic\n  \n    SubnetRouteTableAssociationPublic:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: RouteTablePublic\n        SubnetId:\n          Ref: SubnetPublic\n    \n    # Step 5: Create a NAT Gateway\n    # Before creating NAT Gateway, we need to create Elastic IP with vpc scope\n    EIP:\n      Type: AWS::EC2::EIP\n      Properties:\n        Domain: vpc\n  \n    NatGateway:\n      Type: AWS::EC2::NatGateway\n      Properties:\n        AllocationId:\n          Fn::GetAtt: [EIP, AllocationId]\n        SubnetId:\n          Ref: SubnetPublic\n\n    # In tutorial NAT Gateway is attached as default route 0.0.0.0/0 in main Route Table.\n    # Main Route Table is created implicitely during VPC creation and CloudFormation\n    # has no access to its ID. To overcome this limitation we create additional Route Table.\n    RouteTablePrivate:\n      Type: AWS::EC2::RouteTable\n      Properties:\n        VpcId:\n          Ref: VPCStaticIP\n        Tags:\n          - Key: Name\n            Value: ${self:service}-${self:provider.stage}-private-route\n\n    RoutePrivate:\n      Type: AWS::EC2::Route\n      Properties:\n        DestinationCidrBlock: 0.0.0.0/0\n        NatGatewayId:\n          Ref: NatGateway\n        RouteTableId:\n          Ref: RouteTablePrivate\n\n    SubnetRouteTableMainAssociationPrivate:\n      Type: AWS::EC2::SubnetRouteTableAssociation\n      Properties:\n        RouteTableId:\n          Ref: RouteTablePrivate\n        SubnetId:\n          Ref: SubnetPrivate\n"]},{"id":207653371,"files":["service: noiice\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-apigw-binary\n  - serverless-iam-roles-per-function\n  - serverless-pseudo-parameters\n  - noiiice-plugin\n  - build-apps\n  - serverless-stack-termination-protection\n\nprovider:\n  name: aws\n  endpointType: ${self:provider.config.endpointType}\n  stage: ${opt:stage, 'dev'}\n  profile: ${opt:profile, ''}\n  secrets: ${file(secrets.json)}\n  config: ${self:provider.secrets.${self:provider.stage}}\n  region: ${self:provider.config.region}\n  versionFunctions: false\n  stackName: ${self:service}-${self:provider.stage}\n  usagePlan:\n    - BlogUser:\n        quota:\n          limit: 5000\n          offset: 2\n          period: MONTH\n        throttle:\n          burstLimit: 10\n          rateLimit: 1\n    - AdminUser:\n        quota:\n          limit: 2000\n          offset: 1\n          period: MONTH\n        throttle:\n          burstLimit: 50\n          rateLimit: 5\n  tags:\n    project: Noiiice\n  environment:\n    blogCommentsDB: ${self:provider.config.blogCommentsDB}\n    blogPostDB:  ${self:provider.config.blogPostDB}\n    region: ${self:provider.config.region}\n    identityPoolId:\n      Ref: IdentityPool\n    userPoolId:\n      Ref: UserPool\n    appClientId:\n      Ref: UserPoolClient\n    authorizedRole:\n      Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n    restrictedStrings: ${self:provider.config.restrictedStrings}\n    apiPlanId: 'placeholder' #do not remove, must exist for dynamic replacement after api plan is created\n    stage: ${self:provider.stage}\n    baseUrl: ${self:provider.stage}/\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n  scriptHooks:\n    before:package:createDeploymentArtifacts: lambda/pkg.js\n  postActionsArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-postActions\n  commentActionsArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-commentAction\n  DomainEndpoint:\n    EDGE: DistributionDomainName\n    REGIONAL: RegionalDomainName\n  serverlessTerminationProtection:\n    stages:\n      - prod\n\n# This is for lambda function server\nlayers:\n  NoiiiceModules:\n    name: ${self:service}-${self:provider.stage}-NoiiiceModules\n    path: layers\n    description: 'Node modules for Noiiice Blog'\n    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with\n      - nodejs8.10\n    retain: false\n\nfunctions:\n  nuxt:\n    handler: index.nuxt\n    package:\n      exclude:\n        - \"**/*\"\n      include:\n        - nuxt.config.js\n        - nuxtHandler.js\n        - index.js\n        - package.json\n        - secrets.json\n        - binaryMimeTypes.js\n        - apps/app/config.js\n        - .nuxt/**\n\n    layers:\n      # - arn:aws:lambda:us-east-1:378603488134:layer:NoiiiceStaticLayer:2\n      - {Ref: NoiiiceModulesLambdaLayer}\n    events:\n      - http: ANY /\n      - http: ANY /{proxy+}\n\n  postActions:\n    handler: postActions.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/postActions/postActions.zip\n    iamRoleStatementsName: NoiiceLambdaRolePostActions-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n          - dynamodb:UpdateItem\n        Resource:\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogPostDB}*\n          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n    events:\n      - http:\n          path: /api/blog/post\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/blog/delete/{uid}\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n          request:\n            parameters:\n              paths:\n                uid: true\n\n  commentActions:\n    handler: commentActions.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/commentActions/commentActions.zip\n    environment:\n      DOMAIN: ${self:provider.config.domain}\n      ADMINEMAIL: ${self:provider.config.adminUserEmail}\n    iamRoleStatementsName: NoiiceLambdaRoleCommentActions-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:PutItem\n          - dynamodb:GetItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n          - dynamodb:UpdateItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n      - Effect: \"Allow\"\n        Action:\n          - ses:SendEmail\n        Resource:\n          - arn:aws:ses:#{AWS::Region}:#{AWS::AccountId}:identity/*\n    events:\n      - http:\n          path: /api/comment/post\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/comment/update\n          method: put\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n      - http:\n          path: /api/comment/delete/{postuid}/{uid}\n          method: post\n          private: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n          request:\n            parameters:\n              paths:\n                uid: true\n                postuid: true\n\n  getBlogPosts:\n    handler: getBlogPosts.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/getBlogPosts/getBlogPosts.zip\n    iamRoleStatementsName: NoiiceLambdaRoleGetBlog-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogPostDB}*\n    events:\n      - http:\n          path: /api/blog/get\n          cors: true\n          method: get\n\n  getComments:\n    handler: getComments.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/getComments/getComments.zip\n    iamRoleStatementsName: NoiiceLambdaRoleGetComments-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:DescribeTable\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:BatchGetItem\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.config.blogCommentsDB}*\n    events:\n      - http:\n          path: /api/comment/get/{uid}\n          cors: true\n          method: get\n          request:\n            parameters:\n              paths:\n                uid: true\n      - http:\n          path: /api/comment/getall\n          method: get\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n\n  upload:\n    handler: upload.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/upload/upload.zip\n    iamRoleStatementsName: NoiiceLambdaRoleUpload-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - s3:PutObject\n          - s3:PutObjectAcl\n          - s3:ListBucket\n          - s3:GetObject\n        Resource: \"arn:aws:s3:::${self:provider.config.mediaBucket}\"\n      - Effect: \"Allow\"\n        Action:\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n        Resource: \"arn:aws:logs:*:*:*\"\n    events:\n      - http:\n          path: /api/upload\n          cors: true\n          method: post\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  setup:\n    handler: setup.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/setup/setup.zip\n    iamRoleStatementsName: NoiiceLambdaRoleSetup-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - cognito-identity:*\n        Resource: \"arn:aws:cognito-identity:#{AWS::Region}:#{AWS::AccountId}:identitypool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - iam:PassRole\n        Resource:\n          Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n    events:\n      - http:\n          path: /api/setup\n          cors: true\n          method: get\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n\n  userConfirmation:\n    handler: userConfirmation.handler\n    runtime: nodejs8.10\n    package:\n      artifact: lambda/userConfirmation/userConfirmation.zip\n    iamRoleStatementsName: NoiiceLambdaUserConfirmation-${self:service}-${self:provider.stage}\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - cognito-identity:*\n        Resource: \"arn:aws:cognito-identity:#{AWS::Region}:#{AWS::AccountId}:identitypool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - cognito-idp:AdminUpdateUserAttributes\n        Resource: \"arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*\"\n      - Effect: \"Allow\"\n        Action:\n          - apigateway:*\n          - apigateway:POST\n        Resource:\n          - \"arn:aws:apigateway:#{AWS::Region}::/apikeys\"\n          - \"arn:aws:apigateway:#{AWS::Region}::/usageplans/*/keys\"\n\nresources:\n\n  - Resources:\n      BlogPostTable:\n        Type: AWS::DynamoDB::Table\n        Properties:\n          TableName: ${self:provider.config.blogPostDB}\n          AttributeDefinitions:\n          - AttributeName: uid\n            AttributeType: S\n          - AttributeName: slug\n            AttributeType: S\n          KeySchema:\n          - AttributeName: uid\n            KeyType: HASH\n          BillingMode: PAY_PER_REQUEST\n          GlobalSecondaryIndexes:\n          - IndexName: slug\n            KeySchema:\n            - AttributeName: slug\n              KeyType: HASH\n            Projection:\n              NonKeyAttributes:\n              - uid\n              ProjectionType: INCLUDE\n\n      CommentsTable:\n        Type: AWS::DynamoDB::Table\n        Properties:\n          TableName: ${self:provider.config.blogCommentsDB}\n          AttributeDefinitions:\n          - AttributeName: postuid\n            AttributeType: S\n          - AttributeName: uid\n            AttributeType: S\n          KeySchema:\n          - AttributeName: postuid\n            KeyType: HASH\n          - AttributeName: uid\n            KeyType: RANGE\n          BillingMode: PAY_PER_REQUEST\n\n      MediaBucket:\n        Type: AWS::S3::Bucket\n        Properties:\n          AccessControl: PublicRead\n          BucketName: ${self:provider.config.mediaBucket}\n          WebsiteConfiguration:\n            IndexDocument: index.html\n          CorsConfiguration:\n            CorsRules:\n              -\n                AllowedOrigins:\n                  - '*'\n                AllowedHeaders:\n                  - '*'\n                AllowedMethods:\n                  - GET\n                  - PUT\n                  - POST\n                  - DELETE\n                  - HEAD\n                MaxAge: 3000\n\n      UserPool:\n        Type: \"AWS::Cognito::UserPool\"\n        Properties:\n          UserPoolName: ${self:provider.config.userPool}-${self:provider.stage}\n          AutoVerifiedAttributes:\n          - email\n          MfaConfiguration: \"OFF\"\n          Schema:\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n          - Name: APIKey\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n          LambdaConfig:\n            PostConfirmation: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-userConfirmation\n\n      UserPoolGroup:\n        Type: \"AWS::Cognito::UserPoolGroup\"\n        DependsOn: UserPool\n        Properties:\n          GroupName: admin\n          Description: \"User with admin priveleges can create/modify posts and moderate comments\"\n          Precedence: 0\n          UserPoolId:\n            Ref: UserPool\n          RoleArn: arn:aws:iam::#{AWS::AccountId}:role/${self:provider.config.userPool}-AdminRole-${self:provider.stage}\n\n      UserPoolClient:\n        Type: \"AWS::Cognito::UserPoolClient\"\n        Properties:\n          ClientName: ${self:provider.config.userPool}-client-${self:provider.stage}\n          GenerateSecret: false\n          UserPoolId:\n            Ref: UserPool\n\n      IdentityPool:\n        Type: \"AWS::Cognito::IdentityPool\"\n        Properties:\n          IdentityPoolName: ${self:provider.config.userPool}Identity${self:provider.stage}\n          AllowUnauthenticatedIdentities: false\n          CognitoIdentityProviders:\n          - ClientId:\n              Ref: UserPoolClient\n            ProviderName:\n              Fn::GetAtt: [UserPool, ProviderName]\n\n      CognitoAuthorizedRole:\n        Type: \"AWS::IAM::Role\"\n        Properties:\n          RoleName: ${self:provider.config.userPool}-AuthRole-${self:provider.stage}\n          AssumeRolePolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Principal:\n                  Federated: \"cognito-identity.amazonaws.com\"\n                Action:\n                  - \"sts:AssumeRoleWithWebIdentity\"\n                Condition:\n                  StringEquals:\n                    \"cognito-identity.amazonaws.com:aud\":\n                      Ref: IdentityPool\n                  \"ForAnyValue:StringLike\":\n                    \"cognito-identity.amazonaws.com:amr\": authenticated\n          Policies:\n            - PolicyName: \"CognitoAuthorizedPolicy\"\n              PolicyDocument:\n                Version: \"2012-10-17\"\n                Statement:\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"cognito-sync:*\"\n                      - \"cognito-identity:*\"\n                    Resource: \"*\"\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"lambda:InvokeFunction\"\n                    Resource:\n                      - ${self:custom.postActionsArn}\n\n      AdminUserRole:\n        Type: \"AWS::IAM::Role\"\n        Properties:\n          RoleName: ${self:provider.config.userPool}-AdminRole-${self:provider.stage}\n          AssumeRolePolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Principal:\n                  Federated: \"cognito-identity.amazonaws.com\"\n                Action:\n                  - \"sts:AssumeRoleWithWebIdentity\"\n                Condition:\n                  StringEquals:\n                    \"cognito-identity.amazonaws.com:aud\":\n                      Ref: IdentityPool\n                  \"ForAnyValue:StringLike\":\n                    \"cognito-identity.amazonaws.com:amr\": authenticated\n          Policies:\n            - PolicyName: \"AdminCognitoAuthorizedPolicy\"\n              PolicyDocument:\n                Version: \"2012-10-17\"\n                Statement:\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"cognito-sync:*\"\n                      - \"cognito-identity:*\"\n                    Resource: \"*\"\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"lambda:InvokeFunction\"\n                    Resource:\n                      - ${self:custom.commentActionsArn}\n                      - ${self:custom.postActionsArn}\n                  - Effect: \"Allow\"\n                    Action:\n                      - \"s3:*\"\n                    Resource: arn:aws:s3:::${self:provider.config.mediaBucket}/*\n\n\n      IdentityPoolRoleMapping:\n        Type: \"AWS::Cognito::IdentityPoolRoleAttachment\"\n        Properties:\n          IdentityPoolId:\n            Ref: IdentityPool\n          Roles:\n            authenticated:\n              Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n\n      AdminUser:\n        Type: AWS::Cognito::UserPoolUser\n        DependsOn: UserPoolGroup\n        Properties:\n          DesiredDeliveryMediums:\n            - EMAIL\n          UserAttributes:\n            - Name: email\n              Value: ${self:provider.config.adminUserEmail}\n          UserPoolId:\n            Ref: UserPool\n          Username: ${self:provider.config.adminUser}\n\n      AdminToGroup:\n        Type: AWS::Cognito::UserPoolUserToGroupAttachment\n        Properties:\n          GroupName: \"admin\"\n          UserPoolId:\n            Ref: UserPool\n          Username:\n            Ref: AdminUser\n        DependsOn: AdminUser\n\n      ApiGatewayAuthorizer:\n        DependsOn:\n          - ApiGatewayRestApi\n        Type: AWS::ApiGateway::Authorizer\n        Properties:\n          Name: cognito-authorizer\n          IdentitySource: method.request.header.Authorization\n          RestApiId:\n            Ref: ApiGatewayRestApi\n          Type: COGNITO_USER_POOLS\n          ProviderARNs:\n            - Fn::GetAtt: [UserPool, Arn]\n\n      ApiGatewayBasepathMapping:\n        Type: AWS::ApiGateway::BasePathMapping\n        DependsOn: [ ApiGatewayUsagePlanBlogUser, ApiGatewayCustomDomain ]\n        Properties:\n          BasePath: ''\n          DomainName: ${self:provider.config.domain}\n          RestApiId:\n            Ref: ApiGatewayRestApi\n          Stage: ${self:provider.stage}\n\n      UserConfirmationLambdaTriggerPolicy:\n        Type: AWS::Lambda::Permission\n        Properties:\n          Action: lambda:InvokeFunction\n          FunctionName:\n            Fn::GetAtt: [UserConfirmationLambdaFunction, Arn]\n          Principal: \"cognito-idp.amazonaws.com\"\n          SourceArn:\n            Fn::GetAtt: [UserPool, Arn]\n\n  - ${file(apigwDomain${self:provider.config.endpointType}.yml)}\n\n  - Outputs:\n      UserPoolId:\n        Value:\n          Ref: UserPool\n      UserPoolClientId:\n        Value:\n          Ref: UserPoolClient\n      IdentityPoolId:\n        Value:\n          Ref: IdentityPool\n      AuthorizedRole:\n        Value:\n          Fn::GetAtt: [CognitoAuthorizedRole, Arn]\n      AdminUserRoleOut:\n        Value:\n          Ref: AdminUserRole\n      MediaBucket:\n        Value: ${self:provider.config.mediaBucket}\n      Stage:\n        Value: ${self:provider.stage}\n      Region:\n        Value: ${self:provider.config.region}\n      Domain:\n        Value: ${self:provider.config.domain}\n      UsagePlanId:\n        Value:\n          Ref: ApiGatewayUsagePlanBlogUser\n      AdminUsagePlanId:\n        Value:\n          Ref: ApiGatewayUsagePlanAdminUser\n      GoogleAnalyticsID:\n        Value: ${self:provider.config.googleAnalyticsID}\n      DomainEndpoint:\n        Value:\n          Fn::GetAtt:\n            - ApiGatewayCustomDomain\n            - ${self:custom.DomainEndpoint.${self:provider.config.endpointType}}\n"]},{"id":168457489,"files":["service: spm\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: spm.wdsm.io\n    basePath: ''\n    certificateName: '*.wdsm.io'\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  environment:\n    S3: ${self:service}-storage-${opt:stage, self:provider.stage}\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:DeleteItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::${self:provider.environment.S3}/*\"\n\nfunctions:\n  auth:\n    handler: src/auth.authorize\n  index:\n    handler: src/home.handler\n    events:\n      - http:\n          path: /\n          method: get\n\n  verify:\n    handler: src/verify.handler\n    events:\n      - http:\n          path: /verify\n          method: get\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\n  sync:\n    handler: src/sync.handler\n    events:\n      - http:\n          path: /sync\n          method: ANY\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\n  batch:\n    handler: src/batch.handler\n    events:\n      - http:\n          path: /batch\n          method: ANY\n          cors: true\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n\nresources:\n  Resources:\n    SPMDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: token\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: token\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":185531534,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n        - \"dynamodb:PutItem\"\n        - \"sns:*\"\n        - \"sqs:*\"\n        - \"s3:*\"\n      Resource:\n        - \"*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  parent:\n    handler: parent.handler\n\n  child:\n    handler: child.handler\n\n  slave-one:\n    handler: slave.handler\n    events:\n      - sns: slave-test-topic\n\n  slave-two:\n    handler: slave.handler\n    events:\n      - sns: slave-test-topic\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: /\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":195235863,"files":["service: serverless-plugin-nodejs\n\ncustom:\n    lumigo:\n        token: 1234\n        nodePackageManager: npm\n        edgeHost: test.execute-api.us-west-2.amazonaws.com\n\n\nprovider:\n    name: aws\n    runtime: nodejs10.x\n    environment:\n      LUMIGO_SWITCH_OFF: \"TRUE\"\n      LUMIGO_DEBUG: \"TRUE\"\n\nfunctions:\n    hello:\n        handler: handler.hello\n\nplugins:\n    - ./../../../serverless-lumigo-plugin\n","service: serverless-plugin-python\n\ncustom:\n  lumigo:\n    token: 1234\n    enhance_print: true\n    should_report: false\n\nprovider:\n  name: aws\n  runtime: python3.7\n  environment:\n    LUMIGO_DEBUG: \"TRUE\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  - ./../../../serverless-lumigo-plugin\n  - serverless-python-requirements\n"]},{"id":108401424,"files":["service: my-service\n\nprovider:\n  name: aws\n  runtime: python2.7 # StackStorm runners are based on Python 2\n\nfunctions:\n  get_issue:\n    stackstorm: # `stackstorm` object replaces `handler`. The rest is the same.\n      action: github.get_issue\n      input:\n        user: \"{{ input.pathParameters.user }}\"\n        repo: \"{{ input.pathParameters.repo }}\"\n        issue_id: \"{{ input.pathParameters.issue_id }}\"\n      output:\n        statusCode: 200\n        body: \"{{ output }}\"\n    events:\n      - http:\n          method: GET\n          path: issues/{user}/{repo}/{issue_id}\n\ncustom:\n  stackstorm:\n    indexRoot: http://localhost:45032/v1/\n    st2common_pkg: /dist/st2/st2common\n    python_runner_pkg: /dist/st2/contrib/runners/python_runner\n    buildImage: slstest\n    runImage: slstest\n\nplugins:\n  - ../../../../index.js\n","service: my_service\n\nprovider:\n  name: aws\n  runtime: python2.7 # StackStorm runners are based on Python 2\n\nfunctions:\n  get_issue:\n    stackstorm: # `stackstorm` object replaces `handler`. The rest is the same.\n      action: github.get_issue\n      input:\n        user: \"{{ input.pathParameters.user }}\"\n        repo: \"{{ input.pathParameters.repo }}\"\n        issue_id: \"{{ input.pathParameters.issue_id }}\"\n      output:\n        statusCode: 200\n        body: \"{{ output.result.body }}\"\n      config:\n#        Optional: use token for private repos or actions requiring authorization\n#        token: ${env:GITHUB_TOKEN}\n\n    environment:\n      ${file(env.yml):github}\n      # Uncomment the following line to enable debug mode (log level will be set\n      # to debug and more debug related information will be logged)\n      # ST2_DEBUG: \"true\"\n\n    events:\n      - http:\n          method: GET\n          path: issues/{user}/{repo}/{issue_id}\n\n\ncustom:\n  # Optional settings, to adjust defaults to your liking\n  stackstorm:\n    runImage: 'lambci/lambda:python2.7'\n    buildImage: 'lambci/lambda:build-python2.7'\n    indexRoot: 'https://index.stackstorm.org/v1/'\n    st2common_pkg: 'git+https://github.com/stackstorm/st2.git#egg=st2common&subdirectory=st2common'\n    python_runner_pkg: 'git+https://github.com/StackStorm/st2.git#egg=python_runner&subdirectory=contrib/runners/python_runner'\n\nplugins:\n  - serverless-plugin-stackstorm\n"]},{"id":130598860,"files":["service: slack-lunch-club-frontend\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  # SSL certs can only be approved in us-east-1\n  # http://docs.aws.amazon.com/acm/latest/APIReference/API_RequestCertificate.html\n  region: us-east-1\n  cfLogs: true\n  runtime: nodejs8.10\n  stage: ${opt:stage}\n  deploymentBucket: ${self:service}-deployment\n\nplugins:\n  - serverless-s3-deploy\n\ncustom:\n  domainName: ${opt:domainName}\n  assets:\n    auto: true\n    targets:\n      - bucket: ${self:custom.domainName}\n        files:\n          - source: ./build\n            globs: \"**\"\n  globalAws:\n    HostedZoneName: ${cf:slack-lunch-club-global-aws.HostedZoneName}\n    PrivateHostedZoneId: ${cf:slack-lunch-club-global-aws.PrivateHostedZoneId}\n    PublicHostedZoneId: ${cf:slack-lunch-club-global-aws.PublicHostedZoneId}\n    PublicSubnet: ${cf:slack-lunch-club-global-aws.PublicSubnet}\n    PrivateSubnet: ${cf:slack-lunch-club-global-aws.PrivateSubnet}\n    RootSSLCertificate: ${cf:slack-lunch-club-global-aws.RootSSLCertificate}\n    WildcardSSLCertificate: ${cf:slack-lunch-club-global-aws.WildcardSSLCertificate}\n\nresources:\n  Conditions:\n    isProduction:\n      Fn::Equals:\n        - ${opt:stage}\n        - \"production\"\n    isNotProduction:\n      Fn::Not:\n        - Fn::Equals:\n            - ${opt:stage}\n            - \"production\"\n  Resources: ${file(./resources.yml):Resources}\n  Outputs: ${file(./resources.yml):Outputs}\n","service: slack-lunch-club-global\n\nframeworkVersion: \">=1.27.3 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: aws\n  deploymentBucket: ${self:service}-deployment\n\ncustom:\n  secrets: ${file(./getSecrets.js)}\n\nresources:\n  Resources: ${file(./resources.yml):Resources}\n  Outputs: ${file(./resources.yml):Outputs}\n","service: slack-lunch-club-backend\n\nframeworkVersion: \">=1.27.3 <2.0.0\"\n\nprovider:\n  name: aws\n  region: us-east-1\n  cfLogs: true\n  runtime: nodejs8.10\n  vpc:\n    securityGroupIds:\n      - ${self:custom.globalAws.LambdaSecurityGroup}\n    subnetIds:\n      - ${self:custom.globalAws.PrivateSubnet}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"apigateway:GET\"\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:getObject\"\n        - \"s3:putObject\"\n      Resource: \"arn:aws:s3:::${self:custom.secrets.DB_BACKUP_BUCKET_NAME}/*\"\n  stage: ${opt:stage}\n  deploymentBucket: ${self:service}-deployment\n  environment:\n    NODE_ENV: ${opt:stage}\n    DOMAIN_NAME: ${self:custom.secrets.DOMAIN_NAME}\n    FRONTEND_DOMAIN_NAME: ${self:custom.secrets.FRONTEND_DOMAIN_NAME}\n    COOKIE_DOMAIN_NAME: ${self:custom.secrets.COOKIE_DOMAIN_NAME}\n    DB_HOST: ${self:custom.secrets.DB_HOST}\n    DB_PASS: ${self:custom.secrets.DB_PASS}\n    DB_USER: ${self:custom.secrets.DB_USER}\n    DB_NAME: ${self:custom.secrets.DB_NAME}\n    DB_BACKUP_BUCKET_NAME: ${self:custom.secrets.DB_BACKUP_BUCKET_NAME}\n    SMTP_HOST: ${self:custom.secrets.SMTP_HOST}\n    SMTP_USER: ${self:custom.secrets.SMTP_USER}\n    SMTP_PASS: ${self:custom.secrets.SMTP_PASS}\n    NOREPLY_EMAIL_ADDRESS: ${self:custom.secrets.NOREPLY_EMAIL_ADDRESS}\n    TEST_EMAILS_ONLY: ${self:custom.secrets.TEST_EMAILS_ONLY}\n    TEST_EMAIL_DOMAIN: ${self:custom.secrets.TEST_EMAIL_DOMAIN}\n    SLACK_CLIENT_ID: ${self:custom.secrets.SLACK_CLIENT_ID}\n    SLACK_CLIENT_SECRET: ${self:custom.secrets.SLACK_CLIENT_SECRET}\n    AUTH_TOKEN_SECRET: ${self:custom.secrets.AUTH_TOKEN_SECRET}\n    APOLLO_ENGINE_API_KEY: ${self:custom.secrets.APOLLO_ENGINE_API_KEY}\n\nplugins: # order matters\n  - serverless-plugin-warmup\n  - \"@keboola/serverless-papertrail-logging\"\n  - serverless-webpack\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-content-encoding\n\npackage:\n  include:\n    - .webpack/node_modules\n\ncustom:\n  warmup:\n    enabled: false # don't warmup by default\n    folderName: \"_warmup\"\n    concurrency: 2\n    timeout: 30\n  customDomain:\n    domainName: ${self:custom.secrets.DOMAIN_NAME}\n    hostedZoneId: ${self:custom.secrets.HOSTED_ZONE_ID}\n    createRoute53Record: true\n    endpointType: regional\n  papertrail:\n    host: ${self:custom.globalAws.PapertrailHost}\n    port: ${self:custom.globalAws.PapertrailPort}\n  secrets: ${file(./getSecrets.js)}\n  globalAws:\n    PrivateSubnet: ${cf:slack-lunch-club-global-aws.PrivateSubnet}\n    LambdaSecurityGroup: ${cf:slack-lunch-club-global-aws.LambdaSecurityGroup}\n    PapertrailHost: ${cf:slack-lunch-club-global-aws.PapertrailHost}\n    PapertrailPort: ${cf:slack-lunch-club-global-aws.PapertrailPort}\n    HostedZoneName: ${cf:slack-lunch-club-global-aws.HostedZoneName}\n    PrivateHostedZoneId: ${cf:slack-lunch-club-global-aws.PrivateHostedZoneId}\n    PublicHostedZoneId: ${cf:slack-lunch-club-global-aws.PublicHostedZoneId}\n  contentEncoding:\n    minimumCompressionSize: 0\n\nfunctions:\n  express-app:\n    description: \"Authentication and graphQL server.\"\n    handler: index.expressApp\n    memorySize: 3008\n    timeout: 30\n    events:\n      - http: any {proxy+}\n      - http: any /\n    warmup: true\n  match-mailer:\n    description: \"Email every user their weekly match.\"\n    handler: index.matchMailer\n    memorySize: 3008\n    timeout: 300 # 5 min\n    events:\n      - schedule: cron(0 12 ? * sat *) # every saturday at noon (UTC)\n  db-backup:\n    description: \"Backup the database to S3.\"\n    handler: index.dbBackup\n    memorySize: 3008\n    timeout: 300\n    events:\n      - schedule: cron(0 0 ? * * *) # every day at midnight\n  db-restore:\n    description: \"Restore the database from a backup. (must be triggered manually from AWS Console)\"\n    handler: index.dbRestore\n    memorySize: 3008\n    timeout: 300\n  publish-schema:\n    description: \"Publish the GraphQL schema to Apollo engine.\"\n    handler: index.publishSchema\n    memorySize: 3008\n    timeout: 300\n\nresources:\n  Conditions:\n    isProduction:\n      Fn::Equals:\n        - ${opt:stage}\n        - \"production\"\n  Resources: ${file(./resources.yml):Resources}\n"]},{"id":134405296,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n# The `service` block is the name of the service\nservice: serverless-starter\n\nplugins:\n  # - serverless-dynamodb-local #  DYNAMODB plugin\n  # - serverless-offline-scheduler # SCHEDULING plugin\n  - serverless-offline\n\n\n# exclude the code coverage files, examples and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n  - examples/**\n\ncustom:\n    # serverless-offline:\n    #   provider:\n    #     environment: ${file(env.yml)}\n  # dynamodb:\n  #   start:\n  #     port: 8080\n  #     inMemory: true\n  #     migrate: true\n  #   migration:\n  #     dir: migrations\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=1.27.3\"\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage} # set the stage based on what Circle Branch is deploying\n  region: eu-west-2 # default is us-east-1 \n  # environment: ${file(env.yml)} # for dev - serverless-offline, alternatively pass env vals as options\n  # environment:\n    # SERVICE_USER: ${opt:service_user} # pass in your environment variables as options from Circle\n    # SERVICE_SEC: ${opt:service_sec}\n    # SERVICE_URL: https://app.beapplied.com/api/\n  cfLogs: true # enable logging\n  apiKeys:\n    - starter-api-key # https://serverless.com/framework/docs/providers/aws/events/apigateway#setting-api-keys-for-your-rest-api\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # logging permissions\n        - logs:CreateLogGroup\n        - logs:CreateLogStream\n        - logs:DescribeLogStreams\n        - logs:PutLogEvents\n        - logs:CreateSubscriptionFilter\n        - logs:PutSubscriptionFilter\n      Resource: \"arn:aws:logs:${opt:region, self:provider.region}:serverless:log-group:/aws/cognito/*\"\n    # - Effect: Allow\n    #   Action:\n    #     - dynamodb:Query\n    #     - dynamodb:Scan\n    #     - dynamodb:GetItem\n    #     - dynamodb:PutItem\n    #     - dynamodb:UpdateItem\n    #     - dynamodb:DeleteItem\n    #   Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/job-scores\"\n\n# The `functions` block defines what code to deploy\nfunctions:\n  hello:\n    handler: index.hello\n    events:\n     - http:\n         path: /\n         method: get\n         cors: true\n  getEpoch:\n    handler: index.getEpoch\n    timeout: 10 # optional, in seconds, default is 6\n    events:\n     - schedule: # SCHEDULING\n        name: get-epoch-every-minute\n        description: 'get-epoch-every-minute'\n        rate: rate(1 minute) # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#RateExpressions\n        enable: true\n     - http:\n         path: /get-epoch\n         method: get\n         cors: true\n  fkReadability:\n    handler: index.fkReadability\n    events:\n     - http:\n         path: /flesch-kincaid\n         method: post\n         private: true\n         cors: true\n  saveFkReadabilityScore:\n    handler: index.saveFkReadabilityScore\n    events:\n     - http:\n         path: /save-fkscore/{jobId}\n         method: post\n         private: true\n         cors: true\n         request:\n           parameters:\n             paths:\n               jobId: true\n\n# you can add CloudFormation resource templates here\n# resources:\n#   Resources:\n#     JobsScoresDynamoDbTable:\n#       Type: 'AWS::DynamoDB::Table'\n#       DeletionPolicy: Retain\n#       Properties:\n#         AttributeDefinitions:\n#           -\n#             AttributeName: job_id\n#             AttributeType: N\n#           -\n#             AttributeName: score\n#             AttributeType: N\n#         KeySchema:\n#           -\n#             AttributeName: job_id\n#             KeyType: HASH\n#           -\n#             AttributeName: score\n#             KeyType: RANGE\n#         ProvisionedThroughput:\n#           ReadCapacityUnits: 10\n#           WriteCapacityUnits: 10\n#         TableName: job-scores"]},{"id":151428012,"files":["service: acceptance-node\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime}\n  region: ${opt:region, 'us-east-2'}\n  role: acceptanceRole\n  stage: ${self:custom.buildNumber}-${opt:runtimeName}\n  environment:\n    STAGE: dev\n    EPSAGON_DEBUG: \"TRUE\"\n  package:\n    exclude:\n    - './**'\n    - 'node_modules/**'\n\ncustom:\n  buildNumber: ${opt:buildNumber}\n\nfunctions:\n  sanity:\n    handler: handler.sanity\n  labels:\n    handler: handler.labels\n\n  failsafe_no_tracer_init:\n    handler: handler_tracer_test.failsafe_no_tracer_init\n\n  sync_no_param_promise:\n    handler: handler.sync_no_param_promise\n  sync_no_param_promise_e:\n    handler: handler.sync_no_param_promise_e\n  sync_no_param_simple_return:\n    handler: handler.sync_no_param_simple_return\n  sync_no_param_simple_return_e:\n    handler: handler.sync_no_param_simple_return_e\n  sync_no_param_no_return:\n    handler: handler.sync_no_param_no_return\n  sync_no_param_no_return_e:\n    handler: handler.sync_no_param_no_return_e\n\n  sync_1_param_promise:\n    handler: handler.sync_1_param_promise\n  sync_1_param_promise_e:\n    handler: handler.sync_1_param_promise_e\n  sync_1_param_simple_return:\n    handler: handler.sync_1_param_simple_return\n  sync_1_param_simple_return_e:\n    handler: handler.sync_1_param_simple_return_e\n  sync_1_param_no_return:\n    handler: handler.sync_1_param_no_return\n  sync_1_param_no_return_e:\n    handler: handler.sync_1_param_no_return_e\n\n  sync_2_param_succeed:\n    handler: handler.sync_2_param_succeed\n  sync_2_param_succeed_e:\n    handler: handler.sync_2_param_succeed_e\n  sync_2_param_fail:\n    handler: handler.sync_2_param_fail\n  sync_2_param_fail_e:\n    handler: handler.sync_2_param_fail_e\n  sync_2_param_done:\n    handler: handler.sync_2_param_done\n  sync_2_param_done_e:\n    handler: handler.sync_2_param_done_e\n  sync_2_param_promise:\n    handler: handler.sync_2_param_promise\n  sync_2_param_promise_e:\n    handler: handler.sync_2_param_promise_e\n  sync_2_param_simple_return:\n    handler: handler.sync_2_param_simple_return\n  sync_2_param_simple_return_e:\n    handler: handler.sync_2_param_simple_return_e\n  sync_2_param_no_return:\n    handler: handler.sync_2_param_no_return\n  sync_2_param_no_return_e:\n    handler: handler.sync_2_param_no_return_e\n\n  sync_3_param_succeed:\n    handler: handler.sync_3_param_succeed\n  sync_3_param_succeed_e:\n    handler: handler.sync_3_param_succeed_e\n  sync_3_param_fail:\n    handler: handler.sync_3_param_fail\n  sync_3_param_fail_e:\n    handler: handler.sync_3_param_fail_e\n  sync_3_param_done:\n    handler: handler.sync_3_param_done\n  sync_3_param_done_e:\n    handler: handler.sync_3_param_done_e\n  sync_3_param_promise:\n    handler: handler.sync_3_param_promise\n  sync_3_param_promise_e:\n    handler: handler.sync_3_param_promise_e\n  sync_3_param_simple_return:\n    handler: handler.sync_3_param_simple_return\n  sync_3_param_simple_return_e:\n    handler: handler.sync_3_param_simple_return_e\n  sync_3_param_no_return:\n    handler: handler.sync_3_param_no_return\n  sync_3_param_no_return_e:\n    handler: handler.sync_3_param_no_return_e\n  sync_3_param_callback:\n    handler: handler.sync_3_param_callback\n  sync_3_param_callback_e:\n    handler: handler.sync_3_param_callback_e\n  sync_3_param_callback_error:\n    handler: handler.sync_3_param_callback_error\n  sync_3_param_callback_error_e:\n    handler: handler.sync_3_param_callback_error_e\n  sync_3_param_callback_then_fail:\n    handler: handler.sync_3_param_callback_then_fail\n  sync_3_param_callback_then_fail_e:\n    handler: handler.sync_3_param_callback_then_fail_e\n\nresources:\n  Resources:\n    acceptanceRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: acceptanceRole-${self:custom.buildNumber}-${opt:runtimeName}\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: acceptancePolicyName-${self:custom.buildNumber}-${opt:runtimeName}\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                -  Effect: \"Allow\"\n                   Action:\n                     - \"s3:PutObject\"\n                   Resource:\n                     Fn::Join:\n                       - \"\"\n                       - - \"arn:aws:s3:::\"\n                         - \"Ref\" : \"ServerlessDeploymentBucket\"\n","service: hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":118756656,"files":["service: order-rest-api\n\npackage:\n  exclude:\n    - lib/**\n    - data-local\n    - node_modeules\n  include:\n    - dist\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  timeout: 20\n  versionFunctions: false\n  memorySize: 512\n  environment:\n    NODE_ENV: production\n\nfunctions:\n\n  create:\n    handler: dist/create.create\n    events:\n      - http:\n          path: v1/orders\n          method: post\n\n  list:\n    handler: dist/list.list\n    events:\n      - http:\n          path: v1/orders\n          method: get\n          request:\n            parameters:\n              querystrings:\n                limit: false\n                offset: false\n\n  get:\n    handler: dist/get.get\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n\n  update:\n    handler: dist/update.update\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: put\n          request:\n            parameters:\n              paths:\n                id: true      \n\n  delete:\n    handler: dist/delete.delete\n    events:\n      - http:\n          path: v1/orders/{id}\n          method: delete\n          request:\n            parameters:\n              paths:\n                id: true\n"]},{"id":127929051,"files":["service: cloudwatch-public-metrics\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    METRIC_NAME: ${opt:metricName, file(./config.yml):METRIC_NAME}\n    METRIC_TITLE: ${opt:metricTitle, file(./config.yml):METRIC_TITLE}\n    METRIC_DURATION: ${opt:metricDuration, file(./config.yml):METRIC_DURATION}\n    METRIC_STATISTIC: ${opt:metricStatistic, file(./config.yml):METRIC_STATISTIC}\n    METRIC_SUFFIX: ${opt:metricSuffix, file(./config.yml):METRIC_SUFFIX}\n    METRIC_DIMENSIONS: ${opt:metricDimensions, file(./config.yml):METRIC_DIMENSIONS}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"cloudwatch:GetMetricStatistics\"\n       Resource: \"*\"\n  usagePlan: ${file('./config.yml'):USAGE_PLAN}\n\npackage:\n  exclude:\n    - assets/\n    - src/\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  main:\n    handler: lambda.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{any+}\n          method: ANY\n"]},{"id":96726504,"files":["service: auth0-APIGateway-customAuthorizer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  timeout: 20\n  stage: dev\n  region: ap-northeast-1\n  environment:\n    AUTH0_DOMAIN: ${file(./config.yml):auth0Domain}\n    AUDIENCE: ${file(./config.yml):audience}\n    JWKS_URI: ${file(./config.yml):jwksUri}\n    TOKEN_ISSUER: ${file(./config.yml):tokenIssuer}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpackIncludeModules: true # enable auto including node_modules\n  graphiql:\n    babelOptions:\n      presets: [es2015, es2016, stage-0]\n      plugins: [transform-runtime]  \n\nfunctions:\n  customAuthorizer:\n    handler: handler.auth\n  public:\n    handler: handler.public\n    events:\n      - http:\n          path: public\n          method: get\n          integration: lambda\n          cors: true\n  private:\n    handler: handler.private\n    events:\n      - http:\n          path: private\n          method: get\n          integration: lambda\n          authorizer: customAuthorizer\n          cors: true\n"]},{"id":92459273,"files":["service: ${self:provider.environment.UTSUSEMI_SERVICE_NAME}\n\nframeworkVersion: \">=1.23.0 <2.0.0\"\n\nprovider:\n  name: aws\n  environment:\n    UTSUSEMI_STAGE: ${env:UTSUSEMI_STAGE, 'v0'}\n    UTSUSEMI_SERVICE_NAME: ${env:UTSUSEMI_SERVICE_NAME, file(./config.yml):serviceName, 'utsusemi'}\n    UTSUSEMI_REGION: ${env:UTSUSEMI_REGION, file(./config.yml):region, 'ap-northeast-1'}\n    UTSUSEMI_TARGET_HOST: ${env:UTSUSEMI_TARGET_HOST, file(./config.yml):targetHost}\n    UTSUSEMI_BUCKET_NAME: ${env:UTSUSEMI_BUCKET_NAME, file(./config.yml):bucketName}\n    UTSUSEMI_WORKER_PROCESS: ${env:UTSUSEMI_WORKER_PROCESS, file(./config.yml):workerProcess, '2'}\n    UTSUSEMI_WORKER_DELAY: ${env:UTSUSEMI_WORKER_DELAY, file(./config.yml):workerDelay, '100'}\n    UTSUSEMI_THREADS_PER_WORKER: ${env:UTSUSEMI_THREADS_PER_WORKER, file(./config.yml):threadsPerWorker, '1'}\n    UTSUSEMI_FORCE_TRAILING_SLASH: ${env:UTSUSEMI_FORCE_TRAILING_SLASH, file(./config.yml):forceTrailingSlash, '1'}\n    UTSUSEMI_WITH_QUERY_STRING: ${env:UTSUSEMI_WITH_QUERY_STRING, file(./config.yml):withQueryString, '0'}\n    UTSUSEMI_USE_API_KEY: ${env:UTSUSEMI_USE_API_KEY, file(./config.yml):useApiKey, '0'}\n    UTSUSEMI_CRAWLER_USER_AGENT: ${env:UTSUSEMI_CRAWLER_USER_AGENT, file(./config.yml):crawlerUserAgent, ''}\n  runtime: nodejs6.10\n  stage: ${self:provider.environment.UTSUSEMI_STAGE}\n  region: ${self:provider.environment.UTSUSEMI_REGION}\n  timeout: 10\n  cfLogs: true\n  apiKeys:\n    - \"${self:service}-${self:provider.stage}-apiKey\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource:\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\"] ] }\n        - { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\", \"/*\"] ] }\n    - Effect: Allow\n      Action:\n        - \"lambda:InvokeFunction\"\n        - \"lambda:InvokeAsync\"\n      Resource:\n        - \"arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-*\"\n    - Effect: Allow\n      Action:\n        - \"sqs:*\"\n      Resource:\n        - \"arn:aws:sqs:${self:provider.region}:*:${self:service}-${self:provider.stage}-Channel\"\n\nplugins:\n  - utsusemi-env-checker\n  - utsusemi-use-api-key\n  - serverless-s3-remover\n\ncustom:\n  remover:\n    prompt: true\n    buckets:\n      - \"${self:provider.environment.UTSUSEMI_BUCKET_NAME}\"\n\npackage:\n  include:\n    - package.json\n    - src/**\n  exclude:\n    - .git/**\n    - doc/**\n    - node_modules/aws-sdk/**\n\nfunctions:\n  starter:\n    handler: src/handler/starter.handler\n    timeout: 15\n    name: ${self:service}-${self:provider.stage}-starter\n    events:\n      - http:\n          path: /in\n          method: get\n          integration: lambda-proxy\n          private: false\n  purge:\n    handler: src/handler/purge.handler\n    events:\n      - http:\n          path: /purge\n          method: get\n          integration: lambda-proxy\n          private: false\n  delete:\n    handler: src/handler/delete.handler\n    timeout: 30\n    name: ${self:service}-${self:provider.stage}-delete\n    events:\n      - http:\n          path: /delete\n          method: get\n          integration: lambda-proxy\n          private: false\n  status:\n    handler: src/handler/status.handler\n    events:\n      - http:\n          path: /status\n          method: get\n          integration: lambda-proxy\n          private: false\n  nstarter:\n    handler: src/handler/nstarter.handler\n    events:\n      - http:\n          path: /nin\n          method: post\n          integration: lambda-proxy\n          private: false\n  worker:\n    handler: src/handler/worker.handler\n    timeout: 15\n    name: ${self:service}-${self:provider.stage}-worker\n  s3worker:\n    handler: src/handler/s3worker.handler\n    name: ${self:service}-${self:provider.stage}-s3worker\n\nresources:\n  Resources:\n    HostingBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.UTSUSEMI_BUCKET_NAME}\n        AccessControl: Private\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    HostingBucketPolicy:\n      Type: \"AWS::S3::BucketPolicy\"\n      Properties:\n        Bucket: { Ref: HostingBucket }\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:GetObject\"\n              Effect: \"Allow\"\n              Resource:\n                Fn::Join:\n                  - \"\"\n                  -\n                    - \"arn:aws:s3:::\"\n                    -\n                      Ref: HostingBucket\n                    - \"/*\"\n              Principal: \"*\"\n    Channel:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        DelaySeconds: 0\n        MaximumMessageSize: 262144\n        MessageRetentionPeriod: 3600\n        QueueName: ${self:service}-${self:provider.stage}-Channel\n        ReceiveMessageWaitTimeSeconds: 0\n        VisibilityTimeout: 30\n  Outputs:\n    UtsusemiWebsiteURL:\n      Value: { \"Fn::GetAtt\" : [ HostingBucket, WebsiteURL ] }\n      Description: \"URL for website hosted on S3\"\n"]},{"id":144443794,"files":["\n#    _____ _            _        \n#   /  ___| |          | |       \n#   \\ `--.| | __ _  ___| | __    \n#    `--. \\ |/ _` |/ __| |/ /    \n#   /\\__/ / | (_| | (__|   <     \n#   \\____/|_|\\__,_|\\___|_|\\_\\    \n#   ______           _   ___ _   \n#   |  _  \\         | | / (_) |  \n#   | | | |_____   _| |/ / _| |_ \n#   | | | / _ \\ \\ / /    \\| | __|\n#   | |/ /  __/\\ V /| |\\  \\ | |_ \n#   |___/ \\___| \\_/ \\_| \\_/_|\\__|\n#\n# This file is the main config file for your app.\n# You can always add more config options for more control.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\n\nservice: slack-devkit\n\ncustom:\n  # The API Gateway path\n  slack_path: slack\n\n  # The dynamodb table to store OAuth access data\n  slack_table_name: Workspaces\n\n  # Space delimited scopes\n  slack_scope: \"commands,conversations:read\"\n\n  # The path to redirect to after an install\n  slack_redirect_uri: https://abcd123.execute-api.us-east-1.amazonaws.com/\n\n  # Signing Secret\n  slack_signing_secret: \"1111111111111\"\n  \n  # Client ID - quotes required\n  slack_client_id: \"22222222.33333333\"\n  \n  # Client Secret - quotes required\n  slack_client_secret: \"12341234123412341234\"\n  \n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n  environment:\n    SCOPE: ${self:custom.slack_scope}\n    TABLE_NAME: ${self:custom.slack_table_name}\n    CLIENT_ID: ${self:custom.slack_client_id}\n    CLIENT_SECRET: ${self:custom.slack_client_secret}\n    SIGNING_SECRET: ${self:custom.slack_signing_secret}\n    ENABLE_LOGGING: ${self:custom.slack_enable_logging}\n    REDIRECT_URI: ${self:custom.slack_redirect_uri}\n\nfunctions:\n  slack:\n    handler: examples/lambda.handler\n    events:\n      - http:\n          path: ${self:custom.slack_path}\n          method: ANY\n          integration: lambda\n          response:\n            statusCodes:\n              201:\n                pattern: ''\n              301:\n                pattern: http.*\n                headers:\n                  Location: integration.response.body.errorMessage\n                  Cache-Control: \"'no-cache, no-store, must-revalidate'\"\n          request:\n            template:\n              application/x-www-form-urlencoded: >\n                {\n                  \"method\": \"$context.httpMethod\",\n                  \"body\": \"$util.escapeJavaScript($input.body).replace(\"\\'\", \"'\")\",\n                  \"query\": {\n                    #foreach($param in $input.params().querystring.keySet())\n                    \"$param\": \"$input.params().querystring.get($param)\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  },\n                  \"headers\": {\n                    #foreach($param in $input.params().header.keySet())\n                    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  }\n                }\n              application/json: >\n                {\n                  \"method\": \"$context.httpMethod\",\n                  \"body\": \"$util.escapeJavaScript($input.body).replace(\"\\'\", \"'\")\",\n                  \"query\": {\n                    #foreach($param in $input.params().querystring.keySet())\n                    \"$param\": \"$input.params().querystring.get($param)\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  },\n                  \"headers\": {\n                    #foreach($param in $input.params().header.keySet())\n                    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n                    #if($foreach.hasNext),#end\n                    #end\n                  }\n                }\n\n\nresources:\n  Resources:\n    TeamsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.slack_table_name}\n"]},{"id":93872934,"files":["\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n\nservice: lambda-probot-express\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\nfunctions:\n\n  router:\n    handler: handler.router\n\n    environment:\n      WEBHOOK_SECRET: development\n      APP_ID: 0000\n      SENTRY_DSN: https://<user>:<key>@sentry.io/0000\n\n    events:\n      - http:\n         path: \"{page+}\"\n         method: get\n      - http:\n         path: /\n         method: get\n      - http:\n         path: /\n         method: post\n"]},{"id":137424566,"files":["\nservice: ssr\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n\nfunctions:\n  app:\n    handler: handler.ssr\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\nplugins:\n  - serverless-offline"]},{"id":138269372,"files":["service: ServerlessHandsOnPart2\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  timeout: 30\n  stage:  ${file(./config.yml):STAGE}\n  region: ${file(./config.yml):AWS_REGION}\n  deploymentBucket: ${file(./config.yml):DEPLOYMENT_BUCKET}\n  environment:\n    NODE_ENV: production\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:*\"\n\nfunctions:\n  crawler:\n    handler: handler.crawler\n    events:\n      - schedule: rate(10 minutes)\n"]},{"id":133990343,"files":["service: service-name\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-west-2'}\n  stage: ${opt:stage, 'dev'}\n  accountId:\n    Ref: AWS::AccountId\n  tracing: true\n  deploymentBucket:\n    name: deployment-packages-bucket\n\ncustom:\n  test : 1\n  apiKeys:\n    dev:\n    - name: let-aws-set-the-value-for-this-key\n    - name: i-am-proving-a-value-for-the-key\n      value: some-value-for-the-key\n    int:\n    - name: i-am-providing-encrypted-value-for-this-key\n      value:\n        encrypted: some-encrypted-value-for-the-key\n        kmsKeyRegion: us-west-2\n    - name: key-with-usage-plan-name-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n    prod:\n    - name: key-with-usage-plan-detail-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n        description: Description of first plan\n        quota:\n          limit: 1000\n          period: DAY\n        throttle:\n          burstLimit: 100\n          rateLimit: 20\n\npackage:\n  individually: true\n\nplugins:\n  - add-api-key-plugin\n\nfunctions:\n  test-fn:\n    handler: lambda/index.handler\n    role:\n        \"Fn::GetAtt\": [ LambdaExecutionRole, Arn ]\n    description: Function description.\n    memorySize: 1024\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Enable-Debug\n              - X-Trace-Context\n            allowCredentials: false\n\nresources:\n  Resources:\n    LambdaExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n        Policies:\n        - PolicyName: testLambdaPolicy-${self:provider.region}\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n              Resource: \"*\"\n","service: service-name\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, 'us-west-2'}\n  stage: ${opt:stage, 'dev'}\n  accountId:\n    Ref: AWS::AccountId\n  tracing: true\n  deploymentBucket:\n    name: deployment-packages-bucket\n\ncustom:\n  test : 1\n  apiKeys:\n    - name: let-aws-set-the-value-for-this-key\n    - name: i-am-proving-a-value-for-the-key\n      value: some-value-for-the-key\n    - name: i-am-providing-encrypted-value-for-this-key\n      value:\n        encrypted: some-encrypted-value-for-the-key\n        kmsKeyRegion: us-west-2\n    - name: key-with-usage-plan-name-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n    - name: key-with-usage-plan-detail-and-value\n      value: some-value\n      usagePlan:\n        name: some-plan-mame\n        description: Description of first plan\n        quota:\n          limit: 1000\n          period: DAY\n        throttle:\n          burstLimit: 100\n          rateLimit: 20\n\npackage:\n  individually: true\n\nplugins:\n  - add-api-key-plugin\n\nfunctions:\n  test-fn:\n    handler: lambda/index.handler\n    role:\n        \"Fn::GetAtt\": [ LambdaExecutionRole, Arn ]\n    description: Function description.\n    memorySize: 1024\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: get\n          private: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Enable-Debug\n              - X-Trace-Context\n            allowCredentials: false\n\nresources:\n  Resources:\n    LambdaExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n        Policies:\n        - PolicyName: testLambdaPolicy-${self:provider.region}\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n            - Effect: Allow\n              Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n              Resource: \"*\"\n"]},{"id":139096878,"files":["service: serverless-graphql\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-webpack\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-plugin-warmup\n\ncustom:\n  customDomain:\n    domainName: api.gatsbyjs.org\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource: '*'\n  stage: dev\n  region: us-west-2\n\nfunctions:\n  publicAPI:\n    handler: src/graphql/public.graphql\n    warmup: true\n    events:\n      - http:\n          path: public\n          method: post\n          cors: true\n  graphql:\n    handler: src/graphql/server.graphql\n    warmup: true\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  playground:\n    handler: src/graphql/public.graphql\n    events:\n      - http:\n          path: public\n          method: get\n"]},{"id":83364312,"files":["service: serverless-activitypub\nframeworkVersion: \"^1.6.1\"\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\ncustom:\n  webpackIncludeModules: true\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  memorySize: 512\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${env:JWT_SECRET}\n    API_BASE: ${env:API_BASE}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:UpdateItem\"\n      Resource: arn:aws:dynamodb:*:*:table/${self:service}-*\npackage:\n  include:\n    - serverlessLambda.json\n    - serverless.yml\n    - .env.example\n\nfunctions:\n  hello:\n    handler: src/lambdaFunctions/handler.hello\n    environment:\n      QUEUE_WORKER_NAME: ${self:service}-${self:provider.stage}-queueWorker\n    events:\n      - http:\n          path: hello\n          method: get\n      - http:\n          path: hello\n          method: post\n  actorOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: /{actor_username}\n          method: options\n  actorGET:\n    handler: src/lambdaFunctions/actor.get\n    timeout: 10\n    events:\n      - http:\n          path: /{actor_username}\n          method: get\n  loginOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: login\n          method: options\n  loginGET:\n    handler: src/lambdaFunctions/login.get\n    timeout: 10\n    events:\n      - http:\n          path: login\n          method: get\n  loginPOST:\n    handler: src/lambdaFunctions/login.post\n    timeout: 15\n    events:\n      - http:\n          path: login\n          method: post\n  authorizeOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: authorize/{username}\n          method: options\n  authorizeGET:\n    handler: src/lambdaFunctions/authorize.get\n    timeout: 10\n    events:\n      - http:\n          path: authorize/{username}\n          method: get\n  authorizePOST:\n    handler: src/lambdaFunctions/authorize.post\n    timeout: 25\n    events:\n      - http:\n          path: authorize/{username}\n          method: post\n  inboxOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: inbox/{username}\n          method: options\n  inboxPOST:\n    handler: src/lambdaFunctions/inbox.post\n    timeout: 15\n    events:\n      - http:\n          path: inbox/{username}\n          method: post\n  inboxGET:\n    handler: src/lambdaFunctions/inbox.get\n    timeout: 15\n    events:\n      - http:\n          path: inbox/{username}\n          method: get\n  outboxOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: outbox/{username}\n          method: options\n  outboxPOST:\n    handler: src/lambdaFunctions/outbox.post\n    timeout: 15\n    events:\n      - http:\n          path: outbox/{username}\n          method: post\n  outboxGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: outbox/{username}\n          method: get\n  followingOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: following/{username}\n          method: options\n  followingGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: following/{username}\n          method: get\n  followersOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: followers/{username}\n          method: options\n  followersGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: followers/{username}\n          method: get\n  likesOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: likes/{username}\n          method: options\n  likesGET:\n    handler: src/lambdaFunctions/outbox.get\n    timeout: 15\n    events:\n      - http:\n          path: likes/{username}\n          method: get\n  objectOPTIONS:\n    handler: src/lambdaFunctions/cors.options\n    events:\n      - http:\n          path: object/{objectID}\n          method: options\n  objectGET:\n    handler: src/lambdaFunctions/object.get\n    timeout: 10\n    events:\n      - http:\n          path: object/{objectID}\n          method: get\n  queueWorker:\n    handler: src/lambdaFunctions/queueWorker.handler\n    timeout: 200\n  queueConsumer:\n    handler: src/lambdaFunctions/queueConsumer.handler\n    timeout: 10\n    environment:\n      QUEUE_WORKER_NAME: ${self:service}-${self:provider.stage}-queueWorker\n\nresources:\n  Resources:\n    FileBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-user-files\n    FailedOutgoingNotifications:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-failed-outgoing-notifications\n        DelaySeconds: 300\n    OutgoingNotifications:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-outgoing-notifications\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt:\n            - FailedOutgoingNotifications\n            - Arn\n          maxReceiveCount: 3\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n        - AttributeName: username\n          AttributeType: S\n        KeySchema:\n        - AttributeName: username\n          KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:service}-Users\n    Posts:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n        TableName: ${self:service}-Posts\n        AttributeDefinitions:\n        - AttributeName: username\n          AttributeType: S\n        - AttributeName: global_object_id\n          AttributeType: S\n        - AttributeName: modified\n          AttributeType: S\n        - AttributeName: join_collection_modified\n          AttributeType: S\n        - AttributeName: join_username_modified\n          AttributeType: S\n        - AttributeName: join_endpoint_modified\n          AttributeType: S\n        - AttributeName: actor_url\n          AttributeType: S        \n        KeySchema:\n        - AttributeName: global_object_id\n          KeyType: HASH\n        - AttributeName: join_username_modified\n          KeyType: RANGE\n        GlobalSecondaryIndexes:\n          - IndexName: user_collections_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: join_collection_modified\n                KeyType: RANGE\n          - IndexName: user_endpoints_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: join_endpoint_modified\n                KeyType: RANGE\n          - IndexName: user_posts_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 2\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n              - AttributeName: modified\n                KeyType: RANGE\n          - IndexName: actor_posts_GSI\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n            Projection:\n              ProjectionType: ALL\n            KeySchema:\n              - AttributeName: actor_url\n                KeyType: HASH\n              - AttributeName: join_username_modified\n                KeyType: RANGE\n"]},{"id":134096392,"files":["service: serverless-graphql-rest-api\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  stage: ${env:SLS_STAGE, opt:stage, self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: \"${self:custom.stage}.users\"\n            sources: [dynamodb/seed-data/users.json]\n          - table: \"${self:custom.stage}.companies\"\n            sources: [dynamodb/seed-data/companies.json]\n          - table: \"${self:custom.stage}.positions\"\n            sources: [dynamodb/seed-data/positions.json]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  role: defaultRole\n  stage: dev\n  environment:\n    STAGE: ${self:custom.stage}\n\nfunctions:\n  graphql:\n    handler: src/handler.graphqlHandler\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n  \n  graphiql:\n    handler: src/handler.graphiqlHandler\n    events:\n    - http:\n        path: graphiql\n        method: get\n        cors: true\n\n\nresources:\n  Resources: ${file(./serverless-dynamic.js):resources}\n"]},{"id":153585897,"files":["service: pokemon-service\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 512\n\nfunctions:\n  pokemonFunc:\n    handler: index.handler\n    events:\n      - http:\n          path: pokemon\n          method: get\n      - http:\n          path: pokemon/{id}\n          method: get\n      - http:\n          path: pokemon\n          method: post\n      - http:\n          path: pokemon/{id}\n          method: put\n      - http:\n          path: pokemon/{id}\n          method: delete\n\nplugins:\n  - serverless-offline"]},{"id":146214910,"files":["service: lambda-sns-dlq-error-handling\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nplugins:\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-central-1\n  profile: ${self:custom.secrets.profile, 'dev'}\n  memorySize: 128\n  environment:\n    accountId: '#{AWS::AccountId}'\n    region: ${self:provider.region}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  init:\n    handler: init.handler\n    events:\n      - http:\n          path: init\n          method: post\n          cors: true\n  calculate:\n    handler: calculate.handler\n    events:\n      - sns: calculate-topic\n    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:dlq-topic\n  error:\n    handler: error.handler\n    events:\n      - sns: dlq-topic\n    \n# TODO - ADD SQS QUEUE\n# resources:\n#   Resources:\n#     SQSDLQStream:"]},{"id":132361937,"files":["# NOTE: update this with your service name\nservice: grocery-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: ap-south-1\n  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes\n  timeout: 30 # the timeout is 10 seconds (default is 6 seconds)\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - cloudformation:DescribeStackResource\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"*\"\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n\nfunctions:\n  getGrocery:\n    handler: api/groceries/getGrocery.main\n    events:\n      - http:\n          path: grocery\n          method: get\n          cors: true\n  getGroceries:\n    handler: api/groceries/getGroceries.main\n    events:\n      - http:\n          path: groceries\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  updateStock:\n      handler: api/groceries/stock.updateStock\n      events:\n        - http:\n            path: updateStock\n            method: post\n            cors: true\n            authorizer:\n              arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  createCart:\n    handler: api/cart/createCart.main\n    events:\n      - http:\n          path: cart\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getCart:\n    handler: api/cart/getCart.main\n    events:\n      - http:\n          path: cart\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getCartWithDetails:\n    handler: api/cart/getCartWithDetails.main\n    events:\n      - http:\n          path: cartDetails\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  createOrder:\n    handler: api/order/createOrder.main\n    events:\n      - http:\n          path: createOrder\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  getUserOrders:\n    handler: api/order/getOrders.main\n    events:\n      - http:\n          path: getOrders\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  cancelOrder:\n    handler: api/order/cancelOrder.main\n    events:\n      - http:\n          path: cancelOrder\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG\n  makePayment:\n    handler: api/pay/makePayment.main\n    events:\n      - http:\n          path: pay\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:cognito-idp:ap-south-1:872196253669:userpool/ap-south-1_50ZoISXiG"]},{"id":105545043,"files":["service: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  stage: dev\n  region: eu-central-1\n  \nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello/get\n          method: get\nplugins:\n  - serverless-offline"]},{"id":133244213,"files":["service: serverless-pagespeed-monitoring\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n  iamRoleStatements:\n   -  Effect: \"Allow\"\n      Action:\n        - \"cloudwatch:PutMetricData\"\n        - \"cloudwatch:ListMetrics\"\n        - \"cloudwatch:ListMetrics\"\n      Resource: \"*\"  \n\nfunctions:\n  pagespeed:\n    handler: index.handler\n    events:\n      - schedule:\n          rate: ${file(./config.yml):rate}\n          enabled: true\n    environment:\n      DEBUG: 0\n      url: ${file(./config.yml):url}\n      metrics: ${file(./config.yml):metrics}\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n  - serverless-sam\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":132734757,"files":["service: serverless-jwt-auth\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  env: ${file(env.${opt:STAGE, 'prod'}.yml), file(env.yml)}\n  dynamodb: ${file(config/dynamodb-offline.yml)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:STAGE, self:custom.env.STAGE}\n  region: ${self:custom.env.REGION}\n  environment:\n    JWT_SECRET: ${self:custom.env.JWT_SECRET}\n    TABLENAME_USERS: ${self:service}-${self:provider.stage}-users\n    TABLENAME_TASKS: ${self:service}-${self:provider.stage}-tasks\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource:\n      # DynamoDB tables to provide access to\n      - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLENAME_USERS}\"\n      - \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLENAME_TASKS}\"\n\nfunctions:\n  - ${file(routes/users.yml)}\n  - ${file(routes/tasks.yml)}\n\nresources:\n  Resources:\n    - ${file(config/dynamodb.yml)}\n"]},{"id":116552009,"files":["service: static-file-handler-demo-proxy\n\nplugins:\n  - serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n","service: static-file-handler-demo-offline\n\nplugins:\n  - serverless-offline\n  - serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\" # Using */* doesn't have side effects that I can tell. The HTML response works fine.\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  html:\n    handler: handler.html\n    events:\n      - http:\n          path: /\n          method: get\n  png:\n    handler: handler.png\n    events:\n      - http:\n          path: png\n          method: get\n  jpg:\n    handler: handler.jpg\n    events:\n      - http:\n          path: jpg\n          method: get\n  binary:\n    handler: handler.binary\n    events:\n      - http:\n          path: /binary/{pathvar+}\n          method: get\n"]},{"id":163119373,"files":["service: <%= projectName %>\n\nframeworkVersion: \">=1.28.0 <2.0.0\"\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  cfLogs: true\n  runtime: go1.x\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n  stackTags:\n    squad: Test\n\nplugins:\n  - serverless-sam\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n## Uncomment for dev purpose only.\n## Re-comment it before deploy !!\n#plugins:\n#  - serverless-offline\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-python # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: python2.7\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.py\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.py\n#    - exclude-me-dir/**\n\nplugins:\n  - serverless-sam\n## Uncomment for dev purpose only. Re-comment it before deploy !!\n#  - serverless-offline\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: <%= projectName %>\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  runtime: java8\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  artifact: build/distributions/<%= projectName %>.zip\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","service: <%= projectName %>\n\ncustom: ${file(./config.json)}\n\nprovider:\n  name: aws\n  stage: ${opt:stage, self:custom.env}\n  region: us-east-1\n  memorySize: 128\n  runtime: dotnetcore2.1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\nplugins:\n  - serverless-sam\n# you can add packaging information here\npackage:\n  artifact: bin/release/netcoreapp2.1/deploy-package.zip\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n### yeoman hook ###\n## Don't touch this comment, the subgenerator needs it'\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":142411027,"files":["service: next-material\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: eu-central-1\n  memorySize: 264\n  timeout: 15\n  environment:\n    NODE_ENV: production\n    LAMBDA: true\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource:\n      - Fn::Join:\n        - ':'\n        - - arn:aws:lambda\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - function:${self:service}-${opt:stage, self:provider.stage}-*\n\npackage:\n  exclude:\n    - .git/**\n\nplugins:\n  - serverless-domain-manager\n  - serverless-apigw-binary\n  - serverless-plugin-warmup\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  domain:\n    dev: dev.example.com\n    prod: prod.example.com\n  customDomain:\n    enabled: true\n    stage: ${self:custom.stage}\n    domainName: ${self:custom.domain.${self:custom.stage}}\n    certificateName: '*.example.com'\n    basePath: ''\n    createRoute53Record: true\n    endpointType: regional\n  apigwBinary:\n    types:\n      - '*/*'\n\nfunctions:\n  next:\n    handler: lambda.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: /{any+}\n    warmup: true\n"]},{"id":68023701,"files":["# This is the Serverless Environment File\n#\n# It contains listing of your stages and their regions\n# It also manages serverless variables at 3 levels:\n#    - common variables: variables that apply to all stages/regions\n#    - stage variables: variables that apply to a specific stage\n#    - region variables: variables that apply to a specific region\n\nvars:\nstages:\n  dev:\n    vars:\n    regions:\n      eu-west-1:\n        vars:\n"]},{"id":114875074,"files":["service: graphql-api\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: rest-api\nprovider:\n    name: aws\n    runtime: nodejs6.10\n\nfunctions:\n    hello:\n        handler: handler.hello\n","service: auth\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: core\nprovider:\n    name: aws\n    runtime: nodejs6.10\n","service: main\nprovider:\n    name: aws\n    runtime: nodejs6.10\n"]},{"id":109306929,"files":["service: serverless-geoip\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 256\n  timeout: 30\n  region: us-east-1\n\npackage:\n  exclude:\n    - .gitignore\n    - CODE_OF_CONDUCT.md\n    - dist/**\n    - LICENSE.md\n    - README.md\n    - yarn.lock\n    - package.json\n    - package-lock.json\n\nfunctions:\n  lookup:\n    handler: src/lookup.run\n    events:\n      - http:\n          method: GET\n          path: /ip/{ip}\n          integration: lambda\n          request:\n            parameters:\n              paths:\n                ip: true\n            template:\n              application/json: '{ \"ip\" : \"$input.params(''ip'')\" }'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n            template: $input.json('$')"]},{"id":81870506,"files":["service: test\nprovider:\n    name: google\n    runtime: nodejs4.3\n    project: your-project-name\n    credentials: '~/.gcloud/keyfile.json'\nplugins:\n    - serverless-google-cloudfunctions\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: test, availableMemoryMb: 512, events: [{http: /}]}\n","service: amazon\nprovider:\n    name: aws\n    runtime: nodejs4.3\n    stage: dev\n    region: us-east-1\n    memorySize: 512\nfunctions:\n    test-fppbjs: {handler: handler.test, events: [{http: {path: /test, method: post, private: false}}]}\n","service: ibm\nprovider:\n    name: openwhisk\nfunctions:\n    test: {handler: handler.test, memory: 512, events: [{http: 'POST test'}]}\nplugins:\n    - serverless-openwhisk\n","service: your-service-name\nprovider:\n    name: azure\n    location: 'East US'\nplugins:\n    - serverless-azure-functions\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: handler.test, events: [{http: true, x-azure-settings: {authLevel: anonymous}}]}\n","service: prototype\nprovider:\n    name: prototype\n    location: 'East US'\nplugins:\n    - serverless-prototype-plugin\npackage:\n    exclude: ['node_modules/**', .gitignore, package.json, '.git/**']\nfunctions:\n    test0: {handler: index.js, memorySize: 512}\n"]},{"id":76279881,"files":["service: emojibot\n\npackage:\n  exclude:\n    - \"**\"\n  include:\n    - node_modules/**\n    - \"!node_modules/aws-sdk/**\"\n    - \"!node_modules/@types/**\"\n    - \"!node_modules/jasmine*/**\"\n    - src/**\n\nprovider:\n  name: aws\n  region: eu-west-1\n  stage: dev\n  runtime: nodejs10.x\n  environment:\n    CLIENT_ID: ${file(local.yml):${opt:stage, self:provider.stage}.slack.clientId}\n    CLIENT_SECRET: ${file(local.yml):${opt:stage, self:provider.stage}.slack.clientSecret}\n    ACCESS_TOKEN_TABLE_NAME: ${self:resources.Resources.accessTokenTable.Properties.TableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:*:*\n\nfunctions:\n  install:\n    handler: src/handler.install\n    events:\n      - http: GET install\n  authorized:\n    handler: src/handler.authorized\n    events:\n      - http: GET authorized\n  event:\n    handler: src/handler.event\n    events:\n      - http: POST event\n  explain:\n    handler: src/handler.explain\n    events:\n      - http: POST explain\n\nresources:\n  Resources:\n    accessTokenTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${opt:stage, self:provider.stage}-accessTokenTable\n        AttributeDefinitions:\n          - AttributeName: teamId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: teamId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":104522306,"files":["service: flickr-wormhole\n\nframeworkVersion: \">=1.21.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 1337\n  webpackIncludeModules: true\n\nfunctions:\n  api:\n    handler: src/index.server\n    events:\n      - http:\n          path: \"{proxy+}\"\n          method: any\n          cors: true\n  playground:\n      handler: src/index.playground\n      events:\n        - http:\n            path: \"/playground\"\n            method: get\n            cors: true\n"]},{"id":103318200,"files":["service: \n  name: cryptolambda \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n\n  region: eu-west-1\n\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n    - KMS:Decrypt\n    Resource: \"arn:aws:kms:eu-west-1:::blablabla-your-key-ARN-here\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      FIAT_CURRENCY: EUR\n      BTC_ORDER: 10\n      ETH_ORDER: 6\n\n    events:\n      - schedule: rate(1 day)\n"]},{"id":104791880,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-teams-gitlab-connector\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: events\n          method: post\n    environment:\n      channel_incoming_webhook_url: ${env:channel_incoming_webhook_url}\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n    #  environment:\n    #    variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\nplugins:\n  - serverless-offline\n"]},{"id":135306312,"files":["service: express-sls-app\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: production\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  app:\n    handler: app.server\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\n# plugins:\n#   - serverless-offline"]},{"id":122336394,"files":["service: serverless-iot-metrics-dashboard\n\ncustom:\n  accountId: 085108115628\n  appSync:\n    apiId: l47kzdrb3zfhfegyjnpqr3kbse\n    name: serverless-iot-metrics-dashboard\n    authenticationType: API_KEY\n    serviceRole: \"AppSyncServiceRole\"\n    userPoolConfig:\n      awsRegion: us-east-1\n      defaultAction: ALLOW\n      userPoolId: us-east-1\n    mappingTemplates:\n      - dataSource: Metrics\n        type: Query\n        field: getDatapoints\n        request: \"getDatapoints-request-mapping-template.txt\"\n        response: \"getDatapoints-response-mapping-template.txt\"\n    schema: schema.graphql\n    dataSources:\n      - type: AMAZON_DYNAMODB\n        name: Metrics\n        description: Table containing all metrics\n        config:\n          tableName: 'Metrics'\n          serviceRoleArn: \"arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}\"\n\nplugins:\n  - serverless-appsync-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nresources:\n  Resources:\n    IotMetricsAllowConnectAndPublicPolicy:\n      Type: \"AWS::IoT::Policy\"\n      Properties:\n        PolicyName: IotMetricsAllowConnectAndPublicPolicy\n        PolicyDocument: \n          Version: \"2012-10-17\"\n          Statement: \n            - \n              Effect: \"Allow\"\n              Action: \n                - \"iot:Connect\"\n                - \"iot:Publish\"\n              Resource: \n                - \"*\"\n    IotMetricsTopicRule:\n      Type: \"AWS::IoT::TopicRule\"\n      Properties:\n        RuleName: IotMetricsTopicRule\n        TopicRulePayload:\n          RuleDisabled: \"false\"\n          Sql: >-\n            Select * FROM 'metrics'\n          Actions: \n            - \n              DynamoDBv2: \n                PutItem:\n                  TableName: Metrics\n                RoleArn: \n                  Fn::GetAtt: \n                    - \"IotTopicPutToDynamoDBServiceRole\"\n                    - \"Arn\"\n    IotMetricsPolicyPrincipalAttachment:\n      Type: \"AWS::IoT::PolicyPrincipalAttachment\"\n      Properties:\n        PolicyName: IotMetricsAllowConnectAndPublicPolicy\n        Principal: ${file(./certificateArn.yml):arn}\n    MetricsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        KeySchema:\n          -\n            AttributeName: createdAt\n            KeyType: HASH\n        AttributeDefinitions:\n          -\n            AttributeName: createdAt\n            AttributeType: S\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n        TableName: \"Metrics\"\n    IotTopicPutToDynamoDBServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"IotTopicPutToDynamoDBServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"iot.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"IotTopicPutToDynamoDBServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:PutItem\"\n                  Resource:\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics\"\n    AppSyncServiceRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: \"Dynamo-AppSyncServiceRole\"\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Principal:\n                Service:\n                  - \"appsync.amazonaws.com\"\n              Action:\n                - \"sts:AssumeRole\"\n        Policies:\n          -\n            PolicyName: \"Dynamo-AppSyncServiceRole-Policy\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                -\n                  Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:Query\"\n                    - \"dynamodb:BatchWriteItem\"\n                    - \"dynamodb:GetItem\"\n                    - \"dynamodb:DeleteItem\"\n                    - \"dynamodb:PutItem\"\n                    - \"dynamodb:Scan\"\n                    - \"dynamodb:UpdateItem\"\n                  Resource:\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics\"\n                    - \"arn:aws:dynamodb:us-east-1:*:table/Metrics/*\"\n                    "]},{"id":150218642,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: certificate-creator-example\napp: certificate-creator-example-app\n\nplugins:\n  - serverless-certificate-creator\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n     - http:\n         path: example/something\n         method: get\n\ncustom:\n  customDomain:\n    domainName: certcreatorsample.greenelephant.io\n    certificateName: 'certcreatorsample.greenelephant.io'\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  customCertificate:\n    certificateName: 'certcreatorsample.greenelephant.io'\n    idempotencyToken: 'certcreatorsamplegreenelephantio'\n    writeCertInfoToFile: true\n    certInfoFileName: \"certs/${self:provider.stage}/cert-info.yml\"\n    hostedZoneNames: 'greenelephant.io.'\n    subjectAlternativeNames : \n      - 'certcreatorsample1.greenelephant.io'\n      - 'certcreatorsample2.greenelephant.io'\n    tags:\n      Name: 'somedomain.com'\n      Environment: 'prod'\n    rewriteRecords: false"]},{"id":108816237,"files":["service: serverless-react-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  lambda:\n    handler: dist/lambda.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n"]},{"id":73001448,"files":["service: serverless-image-resizer\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ${env:AWS_REGION}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"s3:*\"\n      Resource: \"*\"\n  environment:\n    SOURCE_S3_BUCKET_NAME: ${env:SOURCE_S3_BUCKET_NAME}\n    SOURCE_S3_PREFIX: ${env:SOURCE_S3_PREFIX}\n    RESIZE_OPTION: ${env:RESIZE_OPTION}\n    DEST_S3_BUCKET_NAME: ${env:DEST_S3_BUCKET_NAME}\n    DEST_S3_PREFIX: ${env:DEST_S3_PREFIX}\n\nfunctions:\n  imageResizer:\n    handler: index.handle\n    events:\n      - s3:\n          bucket: ${env:SOURCE_S3_BUCKET_NAME}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${env:SOURCE_S3_PREFIX}\n      - http:\n          method: post\n          path: /api/v1.0/resized_image\n          integration: aws_proxy\n          request:\n            parameters:\n              querystrings:\n                source_url: true\n                resize_option: false\n                dest_s3_bucket: false\n                dest_s3_prefix: false\n          response:\n            headers:\n              Content-Type: application/json\n            template: $input.path('$')\n            statusCodes:\n              201:\n                pattern: ''\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-remover\n\ncustom:\n  webpack: webpack.config.js\n  webpackIncludeModules: true\n  remover:\n    buckets:\n      - ${env:SOURCE_S3_BUCKET_NAME}\n      - ${env:DEST_S3_BUCKET_NAME}\n\nresources:\n  Resources:\n    DestImageBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Delete\n      Properties:\n        BucketName: ${env:DEST_S3_BUCKET_NAME}\n"]},{"id":82747467,"files":["service: azure-functions-app1234\n\nprovider:\n  name: azure\n  location: West US\n  #armTemplate:\n     #file: YourARMTemplate.json\n     #parameters:\n      #VariableNameToUserInArmTemplate: Value\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  httpjs: \n     handler: handler.hello\n     events: \n       - http: true\n         x-azure-settings:\n           authLevel : anonymous\n           \n  queuejs: \n     handler: handler.helloQueue\n     events: \n       - queue: SampleQueue\n         x-azure-settings:\n           name: queueItem\n           connection : AzureWebJobsStorage\n       - blob:\n         x-azure-settings:\n           name: blobOut\n           direction: out\n           connection : AzureWebJobsStorage\n     \n "]},{"id":198690918,"files":["service: ${self:custom.settings.serviceName}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage,'dev'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:GetObject\"\n      Resource: \"arn:aws:s3:::${self:custom.settings.environment.SOURCE_BUCKET}/*\"\n\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Comment: Cloudfront distribution for serverless image handler\n          DefaultCacheBehavior:\n            TargetOriginId: ApiGateway\n            ViewerProtocolPolicy: 'redirect-to-https'\n            DefaultTTL: 30\n            ForwardedValues:\n              Headers:\n                - 'Accept'\n              QueryString: true\n          Enabled: true\n          Origins:\n            - Id: ApiGateway\n              DomainName:\n                Fn::Join:\n                  - \".\"\n                  - - Ref: ApiGatewayRestApi\n                    - execute-api.${self:custom.settings.region}.amazonaws.com\n              OriginPath: \"/${self:provider.stage}\"\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n\nfunctions:\n  index:\n    handler: src/index.handler\n    events:\n      - http:\n          path: /{any+}\n          method: get\n          contentHandling: CONVERT_TO_BINARY\n    environment: ${self:custom.settings.environment}\nOutputs:\n  CloudFrontDistributionOutput:\n    Value:\n      'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]\ncustom:\n  settingsFilePath: ${opt:settings,'./settings.yml'}\n  settings: ${file(${self:custom.settingsFilePath}):stages.${self:provider.stage}}\n  serverless-offline:\n    port: ${self:custom.settings.offlinePort}\n  apigwBinary:\n    types:\n      - '*/*'\nplugins:\n  - serverless-offline\n  - serverless-apigw-binary\n  - serverless-apigwy-binary\n"]},{"id":140825256,"files":["service: sls-test\n\nplugins:\n  - serverless-modular\n\nprovider:\n  name: aws\n  runtime: 'nodejs8.10'\n  stage: test\n\nfunctions: ${file(./sm.functions.yml)}\n\ncustom:   \n  smConfig:\n    esVersion: es5","service: sls-test\n\nplugins:\n  - serverless-modular\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: 'nodejs8.10'\n  stage: test\n\nfunctions: ${file(./sm.functions.yml)}\n\ncustom:   \n  customDomain:\n      domainName: 'api.sudofy.com'\n  smConfig:\n    esVersion: es6"]},{"id":157638526,"files":["service: serverless-loopback\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: us-east-1\n\ncustom:\n  defaultStage: dev\n  DB:\n    dev:\n      # HOST: MY_HOST # provide this information if DB already exists\n      # PORT: MY_PORT # provide this information if DB already exists\n      NAME: MY_TEST_DB\n      USERNAME: admin\n      PASSWORD: password\n\nfunctions:\n  loopback:\n    handler: lambda-wrapper.handler\n    name: '${self:provider.stage}-loopback'\n    description: Sample loopback running in AWS lambda\n    memorySize: 512\n    timeout: 60\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n    environment:\n      DB_HOST: { 'Fn::GetAtt': ['mySqlDb', 'Endpoint.Address' ] }\n      DB_PORT: { 'Fn::GetAtt': ['mySqlDb', 'Endpoint.Port' ] }\n      DB_NAME: '${self:custom.DB.${self:provider.stage}.NAME}'\n      DB_USERNAME: '${self:custom.DB.${self:provider.stage}.USERNAME}' # this will show in clear text in CloudFormation\n      DB_PASSWORD: '${self:custom.DB.${self:provider.stage}.PASSWORD}' # this will show in clear text in CloudFormation\n    vpc:\n      securityGroupIds:\n        - { 'Fn::GetAtt' : ['myVPC', 'DefaultSecurityGroup'] }\n      subnetIds:\n        - Ref: mySubnet1\n        - Ref: mySubnet2\n\nresources:\n  Resources:\n    # https://serverless.com/framework/docs/providers/aws/guide/resources#aws-cloudformation-resource-reference\n    # uses CloudFormation syntax - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\n    myVPC:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: 172.31.0.0/16\n        Tags:\n        - Key: Name\n          Value: ${self:service}-vpc\n\n    mySubnet1:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}a\n        VpcId:\n          Ref: myVPC\n        CidrBlock: 172.31.0.0/20\n\n    mySubnet2:\n      Type: AWS::EC2::Subnet\n      Properties:\n        AvailabilityZone: ${self:provider.region}b\n        VpcId:\n          Ref: myVPC\n        CidrBlock: 172.31.16.0/20\n\n    myDBSubnetGroup:\n      Type: 'AWS::RDS::DBSubnetGroup'\n      Properties:\n        DBSubnetGroupDescription: 'description'\n        SubnetIds:\n          - Ref: mySubnet1\n          - Ref: mySubnet2\n\n    mySqlDb:\n      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html\n      Type: AWS::RDS::DBInstance\n      Properties:\n        AllocatedStorage: '5' # minimal size for this sample\n        BackupRetentionPeriod: 0 # disabling backups for this sample\n        DBInstanceClass: 'db.t2.micro' # minimal size for this sample\n        DBName: '${self:custom.DB.${self:provider.stage}.NAME}' # creating a database for this sample\n        DBSubnetGroupName: { 'Ref' : 'myDBSubnetGroup' }\n        Engine: 'mysql'\n        MasterUsername: '${self:custom.DB.${self:provider.stage}.USERNAME}' # this will show in clear text in CloudFormation\n        MasterUserPassword: '${self:custom.DB.${self:provider.stage}.PASSWORD}' # this will show in clear text in CloudFormation\n        MultiAZ: false # disabling for this sample\n        PubliclyAccessible: false\n        VPCSecurityGroups:\n          - { 'Fn::GetAtt' : ['myVPC', 'DefaultSecurityGroup'] }\n\n  # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    RdsDBInstanceIdentifier:\n      Description: The DB Name for the (MySQL) RDS created\n      Value:\n        Ref: mySqlDb\n"]},{"id":144584409,"files":["service: orangejellyfish-serverless-starter\nframeworkVersion: '=1.52.0'\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# Lambda function definitions. Each function defines itself in a separate YAML\n# file that resides alongside the function implementation. Unfortunately we have\n# to duplicate the function name here due to the way Serverless YAML importing\n# and parsing works (in an ideal world we could include these in a list as we do\n# for resources).\nfunctions:\n  hello: ${file(src/functions/hello/index.yml):hello}\n\n# Custom AWS resource definitions. This includes anything that the Serverless\n# framework doesn't handle for us, such as database setup, and overrides of\n# Serverless defaults.\nresources:\n  - ${file(src/resources/apigateway.yml)}\n  - ${file(src/resources/iam.yml)}\n\n# Serverless plugins. The \"stage-variables\" plugin is required to allow us to\n# customise the API Gateway stage that gets created automatically by Serverless.\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-iam-roles-per-function\n  - serverless-plugin-stage-variables\n"]},{"id":86390898,"files":["service: george # the word \"google\" can't be in here\n\nprovider:\n  name: google\n  stage: dev\n  runtime: nodejs8\n  region: us-central1\n  project: beatlemania-182023 # your project on google - create this first\n  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:\n  # https://serverless.com/framework/docs/providers/google/guide/credentials/\n  #\n  # the path to the credentials file needs to be absolute\n  credentials: ~/.gcloud/beatlemania.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - package.json\n    - .git/**\n\nfunctions:\n  sing:\n    handler: sing\n    events:\n      - http: sing\n\n\n  # NOTE: the following uses an \"event\" event (pubSub event in this case).\n  # Please create the corresponding resources in the Google Cloud\n  # before deploying this service through Serverless\n  #second:\n  #  handler: event\n  #  events:\n  #    - event:\n  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish\n  #        resource: projects/*/topics/my-topic\n# you can define resources, templates etc. the same way you would in a\n# Google Cloud deployment configuration\n#resources:\n#  resources:\n#    - type: storage.v1.bucket\n#      name: my-serverless-service-bucket\n#  imports:\n#    - path: my_template.jinja\n","service: paul\n\n# Please ensure the serverless-openwhisk provider plugin is installed globally.\n# $ npm install -g serverless-openwhisk\n# ...before installing project dependencies to register this provider.\n# $ npm install\nprovider:\n  name: openwhisk\n  #ignore_certs: true\n  runtime: nodejs:6\n\nfunctions:\n  sing:\n    handler: handler.sing\n    events:\n      - http: GET sing\n\n# remember to run npm install to download the provider plugin.\nplugins:\n    - serverless-openwhisk\n\n\n","service: beatlemania\napp: beatlemania\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n\n# you can overwrite defaults here\nregion: us-east-1\n\nfunctions:\n  sing:\n    handler: handlers/handler.sing\n    events:\n      - http:\n          path: sing\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n","service: beatlemania\n\nprovider:\n  name: azure\n  region: East US\n  runtime: nodejs10.x\n  # prefix: \"sample\"  # prefix of generated resource name\n  # subscriptionId: 53cd0336-4079-4703-b33b-28e6a6bd452a\n  stage: dev\n  # type: premium  # premium azure functions\n\n  #environment: # these will be created as application settings\n    #VARIABLE_FOO: 'foo'\n\n  # you can define apim configuration here\n  # apim:\n  #   apis:\n  #     - name: v1\n  #       subscriptionRequired: false # if true must provide an api key\n  #       displayName: v1\n  #       description: V1 sample app APIs\n  #       protocols:\n  #         - https\n  #       path: v1\n  #       tags:\n  #         - tag1\n  #         - tag2\n  #       authorization: none\n  #   cors:\n  #     allowCredentials: false\n  #     allowedOrigins:\n  #       - \"*\"\n  #     allowedMethods:\n  #       - GET\n  #       - POST\n  #       - PUT\n  #       - DELETE\n  #       - PATCH\n  #     allowedHeaders:\n  #       - \"*\"\n  #     exposeHeaders:\n  #       - \"*\"\n\nplugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins\n  - serverless-azure-functions\n\n# you can add packaging information here\npackage:\n  # include:\n  #   - include-me.js\n  #   - include-me-dir/**\n  exclude:\n    # - exclude-me.js\n    # - exclude-me-dir/**\n    - local.settings.json\n    - .vscode/**\n\nfunctions:\n  sing:\n    handler: handlers/handler.sing\n    events:\n      - http: true\n        x-azure-settings:\n          methods:\n            - GET\n          authLevel: anonymous\n\n\n  # The following are a few examples of other events you can configure:\n  # storageBlob:\n  #   handler: src/handlers/storageBlob.printMessage\n  #   events:\n  #     - blob:\n  #       x-azure-settings:\n  #         name: blob # Specifies which name is available on `context`\n  #         path: blob-sample/{blobName}\n  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String\n  # storageQueue:\n  #   handler: src/handlers/storageQueue.printMessage\n  #   events:\n  #     - queue: queue-sample\n  #       x-azure-settings:\n  #         name: message # Specifies which naem is available on `context`\n  #         connection: AzureWebJobsStorage\n  # timer:\n  #   handler: src/handlers/timer.printMessage\n  #   events:\n  #     - timer:\n  #       x-azure-settings:\n  #         schedule: '*/10 * * * * *'\n  # eventhub:\n  #   handler: src/handlers/eventHub.printMessage\n  #   events:\n  #     - eventHub:\n  #       x-azure-settings:\n  #         name: eventHubMessages # Specifies which name it's available on `context`\n  #         eventHubName: sample-hub # Specifies the Name of the Event Hub\n  #         consumerGroup: $Default # Specifies the consumerGroup to listen with\n  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String\n  # serviceBusQueue:\n  #   handler: src/handlers/serviceBusQueue.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name is available on `context`\n  #         queueName: sample-queue # Name of the service bus queue to consume\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n  # serviceBusTopic:\n  #   handler: src/handlers/serviceBusTopic.printMessage\n  #   events:\n  #     - serviceBus:\n  #       x-azure-settings:\n  #         name: message # Specifies which name it's available on `context`\n  #         topicName: sample-topic # Name of the service bus topic to consume\n  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from\n  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String\n"]},{"id":110094684,"files":["service: serverless-rest-api-with-dynamodb\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  private: true # Change to 'false' to disable api-key authorization, for example, for non-production environments.\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:custom.stage}-todos\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"TodosDynamoDbTable\", \"Arn\"] }\n  apiKeys:\n    - ${self:service}-${self:custom.stage}-api-key\n\nfunctions:\n  create:\n    handler: todos/create.create\n    events:\n      - http:\n          path: todos\n          method: post\n          cors: true\n          private: ${self:custom.private}\n\n  list:\n    handler: todos/list.list\n    events:\n      - http:\n          path: todos\n          method: get\n          cors: true\n          private: ${self:custom.private}\n\n  get:\n    handler: todos/get.get\n    events:\n      - http:\n          path: todos/{id}\n          method: get\n          cors: true\n          private: ${self:custom.private}\n\n  update:\n    handler: todos/update.update\n    events:\n      - http:\n          path: todos/{id}\n          method: put\n          cors: true\n          private: ${self:custom.private}\n\n  delete:\n    handler: todos/delete.delete\n    events:\n      - http:\n          path: todos/{id}\n          method: delete\n          cors: true\n          private: ${self:custom.private}\n\nresources:\n  Resources:\n    TodosDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n","service:\n  name: ${self:custom.service}\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n\ncustom:\n  service: serverless-cognito-userpool\n  stage: ${opt:stage, self:provider.stage}\n\nresources:\n  Resources:\n    UserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        UserPoolName: ${self:custom.service}-${self:custom.stage}-user-pool\n        SmsVerificationMessage: \"Your verification code is {####}.\"\n        AutoVerifiedAttributes:\n          - email\n        MfaConfiguration: \"OFF\"\n        EmailVerificationSubject: \"Your api gateway verification code\"\n        EmailVerificationMessage: \"Your api gateway verification code is {####}\"\n        SmsAuthenticationMessage: \"Your api gateway authentication code is {####}\"\n        Schema:\n          - Name: name\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n          - Name: phone_number\n            AttributeDataType: String\n            Mutable: true\n            Required: false\n        Policies:\n          PasswordPolicy:\n            RequireLowercase: true\n            RequireSymbols: false\n            RequireNumbers: true\n            MinimumLength: 8\n            RequireUppercase: true\n        AdminCreateUserConfig:\n          InviteMessageTemplate:\n            EmailMessage: \"Your Digispeaker username is {username} and temporary password is {####}.\"\n            EmailSubject: \"Your temporary api gateway password\"\n            SMSMessage: \"Your Digispeaker username is {username} and temporary password is {####}.\"\n          UnusedAccountValidityDays: 7\n          AllowAdminCreateUserOnly: false\n\n    # Creates a User Pool Client to be used by the identity pool\n    UserPoolClient:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.service}-${self:custom.stage}-client\n        GenerateSecret: false\n        UserPoolId: \n          Ref: UserPool\n\n    UserPoolGroupAdmin:\n      Type: \"AWS::Cognito::UserPoolGroup\"\n      Properties:\n        GroupName: ${self:custom.service}-${self:custom.stage}-group-admin\n        UserPoolId:\n          Ref: UserPool\n\n    UserPoolGroup01:\n      Type: \"AWS::Cognito::UserPoolGroup\"\n      Properties:\n        GroupName: ${self:custom.service}-${self:custom.stage}-group-1\n        UserPoolId:\n          Ref: UserPool\n\n  Outputs:\n    UserPoolId:\n      Value:\n        Ref: UserPool\n    UserPoolIdARN:\n      Value:\n        \"Fn::GetAtt\": [ UserPool, Arn ]\n    UserPoolClientId:\n      Value:\n        Ref: UserPoolClient    \n","service: serverless-authorizer\n\nframeworkVersion: \">=1.24.0 <2.0.0\"\n\nprovider: aws\n\nfunctions:\n  profile:\n    handler: index.profile\n    events:\n      - http:\n          path: profile\n          method: get\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            type: request\n  auth:\n    handler: index.auth\n\n","service: serverless-authorizer\n\nprovider: aws\n\nfunctions:\n  profile:\n    handler: index.profile\n    events:\n      - http:\n          path: profile\n          method: get\n          authorizer: auth\n\n  profile1:\n    handler: index.profile\n    events:\n      - http:\n          path: profile1\n          method: get\n          authorizer:\n            name: auth\n            resultTtlInSeconds: 300\n            identitySource: method.request.header.Authorization\n            type: token\n  auth:\n    handler: index.auth\n\n"]},{"id":116805724,"files":["service: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: us-east-1 # Lambda@Edge function must be us-east-1\n\n  environment:\n    WEBSITE_S3_BUCKET_NAME: ${env:WEBSITE_S3_BUCKET_NAME, 'sls-static-basic'}\n\nplugins:\n  - serverless-plugin-cloudfront-lambda-edge\n  - serverless-s3-sync\n\ncustom:\n  s3Sync:\n    - bucketName: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n      localDir: src\n\npackage:\n  exclude:\n    - src/*\n    - test/*\n    - package.json\n    - README.md\n\nfunctions:\n  basicAuth:\n    name: '${self:provider.environment.WEBSITE_S3_BUCKET_NAME}-viewer-request'\n    handler: handler.basicAuth\n    memorySize: 128\n    timeout: 1\n    lambdaAtEdge:\n      distribution: WebsiteDistribution\n      eventType: 'viewer-request'\n\nresources:\n  Resources:\n    WebsiteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.WEBSITE_S3_BUCKET_NAME}\n        AccessControl: Private\n        WebsiteConfiguration:\n          IndexDocument: index.html\n          ErrorDocument: error.html\n    WebsiteBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: { Ref: WebsiteBucket }\n        PolicyDocument:\n          Statement:\n            -\n              Action:\n                - \"s3:GetObject\"\n              Effect: Allow\n              Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { Ref : WebsiteBucket }, \"/*\" ] ]  }\n              Principal:\n                AWS: { \"Fn::Join\" : [\" \", [\"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity\", { Ref: WebsiteOriginAccessIdentity } ] ] }\n    WebsiteOriginAccessIdentity:\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: \"CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}\"\n    WebsiteDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          DefaultCacheBehavior:\n            AllowedMethods: [ \"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\" ]\n            CachedMethods:  [ \"GET\", \"HEAD\", \"OPTIONS\" ]\n            TargetOriginId: WebsiteBucketOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            DefaultTTL: 0\n            MaxTTL: 0\n            MinTTL: 0\n            Compress: true\n            ForwardedValues:\n              QueryString: true\n              Cookies:\n                Forward: 'all'\n          CustomErrorResponses:\n            -\n              ErrorCode: '403'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '404'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '500'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '502'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '503'\n              ErrorCachingMinTTL: 1\n            -\n              ErrorCode: '504'\n              ErrorCachingMinTTL: 1\n          DefaultRootObject: 'index.html'\n          Enabled: true\n          PriceClass: 'PriceClass_100'\n          HttpVersion: 'http2'\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n          Origins:\n            -\n              Id: 'WebsiteBucketOrigin'\n              DomainName: { 'Fn::GetAtt': [ WebsiteBucket, DomainName ] }\n              S3OriginConfig:\n                OriginAccessIdentity: { \"Fn::Join\" : [\"\", [\"origin-access-identity/cloudfront/\", { Ref: WebsiteOriginAccessIdentity } ] ]  }\n  Outputs:\n    WebsiteURL:\n      Value: { \"Fn::Join\" : [\"\", [\"https://\", { \"Fn::GetAtt\" : [ WebsiteDistribution, DomainName ] } ] ] }\n      Description: \"URL for website via CloudFront\"\n"]},{"id":148238948,"files":["service: sls-vpc-example\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  versionFunctions: false\n  logRetentionInDays: 1\n  deploymentBucket:\n    serverSideEncryption: AES256\n    blockPublicAccess: true\n  endpointType: regional\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'\n    NODE_ENV: development\n\nplugins:\n  - serverless-vpc-plugin\n  - serverless-webpack\n\npackage:\n  individually: true\n  excludeDevDependencies: true\n\ncustom:\n  secretName: 'rds-db-credentials/${self:service}/${self:provider.stage}'\n  databaseName: slsvpcexample\n  vpcConfig:\n    cidrBlock: '10.0.0.0/16'\n    createDbSubnet: true\n    createNatInstance: true\n    zones:\n      - us-east-1a\n      - us-east-1b\n      - us-east-1c\n    services:\n      - secretsmanager\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n    packager: npm\n\nfunctions:\n  rds:\n    handler: index.handler\n    description: RDS Test Handler\n    role: ExampleLambdaRole\n    environment:\n      SECRET_ARN:\n        Ref: DBSecret\n      RESOURCE_ARN:\n        'Fn::Join':\n          - ':'\n          - - 'arn:aws:rds'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - 'cluster:${self:service}-${self:provider.stage}'\n      DATABASE_NAME: ${self:custom.databaseName}\n      SCHEMA_NAME: public\n\nresources:\n  - ${file(resources/iam_cf.yml)}\n  - ${file(resources/rds_cf.yml)}\n  - ${file(resources/secretsmanager_cf.yml)}\n"]}]