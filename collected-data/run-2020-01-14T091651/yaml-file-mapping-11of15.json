[{"id":228922110,"files":["# NOTE: update this with your service name\nservice: serverless-plugin-sync-rds\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-bundle # Package our functions with Webpack\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n  - deploy-scheme-rds # custom Sync RDS plugin\n\ncustom:  \n  \n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage:                ${opt:stage, self:provider.stage}\n  deploy:               ${opt:deploy, REPLACE_DEPLOY_STRATEGY} # values local or bastion\n  aws_profile:          ${opt:aws_profile, REPLACE_PROFILE} # if your deploy is local set your aws_profile\n  PUBLIC_SUBNET_ID_1:   REPLACE_PUBLIC_SUBNET_ID_1\n  PUBLIC_SUBNET_ID_2:   REPLACE_PUBLIC_SUBNET_ID_2\n  PUBLIC_SUBNET_ID_3:   REPLACE_PUBLIC_SUBNET_ID_3\n\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to .env and uncomment\n  # the following line. Also, make sure to not\n  # commit your .env.\n  #\n  environment:\n    DB_NAME:      ${env.DB_NAME}-${self:custom.stage}\n    DB_USER:      ${env.DB_USER}\n    DB_PASSWORD:  ${env.DB_PASSWORD}\n    DB_PORT:      ${env.DB_PORT}\n    DB_HOST: \n      Fn::GetAtt: [RDSGiftcard, Endpoint.Address]\n\n  vpc:\n    securityGroupIds:\n      - Fn::GetAtt: [RDSSecurityGroup, GroupId]\n    subnetIds:      \n      - REPLACE_PRIVATE_SUBNET_ID_1\n      - REPLACE_PRIVATE_SUBNET_ID_2\n      - REPLACE_PRIVATE_SUBNET_ID_3      \n  \n  iamRoleStatements:\n    - Effect: Allow\n      Action: \"cognito-idp:*\"\n      Resource: \n        - Fn::GetAtt: [CognitoUserPool, Arn] \n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n  # Cognito\n  - ${file(resources/cognito-identity-pool.yml)}\n  - ${file(resources/cognito-user-pool.yml)}\n  # RDS\n  - ${file(resources/rds-mysql.yml)}v"]},{"id":205445265,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: crud\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n#  stage: dev\n  region: us-east-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":224297884,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-simple-http-endpoint\n# app and org for use with dashboard.serverless.com\napp: app-2\norg: ahlemzebda\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.endpoint\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: ping\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":219705855,"files":["service: account-ddb-to-rds\n\ncustom:\n  environments:\n    local: LOCAL\n    dev: DEV\n    prd: PRD\n  myStage: ${opt:stage, self:provider.stage}\n  scheduleEnabled:\n    local: false\n    dev: false\n    prd: true\n  \nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: local\n  region: ap-northeast-2\n  role: 'arn:aws:iam::827066198779:role/lambda-execute-role'\n  tracing:\n    lambda: true\n  environment:\n    DEBUG_LOG: true\n\npackage:\n  excludeDevDependencies: true\n  individually: true\n  exclude:\n    - node_modules/aws-sdk/**\n    - static/**\n    - tools/**\n\nfunctions:\n  - ${file(./function/function.yml)}\n  "]},{"id":219354954,"files":["service: movies-api\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-prune-plugin\n  - serverless-offline\n  - serverless-api-gateway-caching\n  - serverless-secrets-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-west-1\n  timeout: 15\n  profile: personal\n  logs:\n    restApi: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'lambda:InvokeFunction'\n        - 'lambda:InvokeAsync'\n        - 'logs:CreateLogGroup'\n        - 'logs:CreateLogStream'\n        - 'logs:PutLogEvents'\n        - 'api:*'\n      Resource: '*'\n\ncustom:\n  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}\n  prune:\n    automatic: true\n    number: 15\n  serverless-offline:\n    resourceRoutes: true\n  apiGatewayCaching:\n    enabled: true\n\nfunctions:\n  getMovie:\n    handler: src/handler.getMovie\n    description: use the movie url to get the link for the movie data\n    events:\n      - http:\n          path: /movies/{movie_path_url}\n          method: GET\n          request:\n            parameters:\n              paths:\n                movie_path_url: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n            cacheControl: 'max-age=3600'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n              Cache-Control: \"'max-age=3600'\"\n\n  getTrailer:\n    handler: src/handler.getTrailer\n    description: use the movie url to get the link for the movie trailer\n    environment:\n      themoviedb_api_key: ${self:custom.secrets.themoviedb_api_key}\n    events:\n      - http:\n          path: /movies/{movie_path_url}/trailer\n          method: GET\n          request:\n            parameters:\n              paths:\n                movie_path_url: true\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n            allowCredentials: false\n            cacheControl: 'max-age=3600'\n          response:\n            headers:\n              Content-Type: \"'application/json'\"\n              Cache-Control: \"'max-age=3600'\"\n"]},{"id":217273569,"files":["service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld\n          method: get","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld\n          method: post","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld/{name}\n          method: get","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld/{name}\n          method: get","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld/{name}\n          method: get","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  salute:\n    handler: src/functions/salute.handler\n    events:\n      - http:\n          path: api/salute/{name}\n          method: get","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld/{name}\n          method: get\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gettogethers\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  helloworld:\n    handler: src/functions/helloworld.handler\n    events:\n      - http:\n          path: api/helloworld/{name}\n          method: get\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gettogethers\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST","service: gettogether\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gettogethers\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-1\n  stage: dev\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/gettogethers\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gettogethers\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableName}\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableName}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableName}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${ssm:/gettogethers/${self:provider.stage}/secureTableName~true}\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableName}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n","service: cloudwatch-logs-to-logzio-bcn\n\nplugins:\n - serverless-pseudo-parameters\n - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n  versionFunctions: false\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  \nfunctions:\n  ship-logs-to-logzio:\n    handler: functions/ship-logs/handler.handler\n    description: Sends CloudWatch logs to Logz.io\n    memorySize: 128\n    environment:\n      logstash_host: listener.logz.io\n      logstash_port: 5050\n      token: icbXMIrbgOVuZWqvUFChEHIsHZTGYMmm\n\nresources:\n  Resources:\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"Ref\" : \"ShipDashlogsDashtoDashlogzioLambdaFunction\"\n        Principal: logs.#{AWS::Region}.amazonaws.com\n","service: cloudwatch-logs-to-logzio-bcn\n\nplugins:\n - serverless-pseudo-parameters\n - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n  versionFunctions: false\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  \nfunctions:\n  ship-logs-to-logzio:\n    handler: functions/ship-logs/handler.handler\n    description: Sends CloudWatch logs to Logz.io\n    memorySize: 128\n    environment:\n      logstash_host: listener.logz.io\n      logstash_port: 5050\n      token: icbXMIrbgOVuZWqvUFChEHIsHZTGYMmm\n\nresources:\n  Resources:\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"Ref\" : \"ShipDashlogsDashtoDashlogzioLambdaFunction\"\n        Principal: logs.#{AWS::Region}.amazonaws.com\n","service: cloudwatch-logs-to-logzio-bcn\n\nplugins:\n - serverless-pseudo-parameters\n - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n  versionFunctions: false\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  \nfunctions:\n  ship-logs-to-logzio:\n    handler: functions/ship-logs/handler.handler\n    description: Sends CloudWatch logs to Logz.io\n    memorySize: 128\n    environment:\n      logstash_host: listener.logz.io\n      logstash_port: 5050\n      token: icbXMIrbgOVuZWqvUFChEHIsHZTGYMmm\n\nresources:\n  Resources:\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"Ref\" : \"ShipDashlogsDashtoDashlogzioLambdaFunction\"\n        Principal: logs.#{AWS::Region}.amazonaws.com\n","service: cloudwatch-logs-to-logzio-bcn\n\nplugins:\n - serverless-pseudo-parameters\n - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n  versionFunctions: false\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  \nfunctions:\n  ship-logs-to-logzio:\n    handler: functions/ship-logs/handler.handler\n    description: Sends CloudWatch logs to Logz.io\n    memorySize: 128\n    environment:\n      logstash_host: listener.logz.io\n      logstash_port: 5050\n      token: icbXMIrbgOVuZWqvUFChEHIsHZTGYMmm\n\nresources:\n  Resources:\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"Ref\" : \"ShipDashlogsDashtoDashlogzioLambdaFunction\"\n        Principal: logs.#{AWS::Region}.amazonaws.com\n","service: cloudwatch-logs-to-logzio-bcn\n\nplugins:\n - serverless-pseudo-parameters\n - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n  versionFunctions: false\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  \nfunctions:\n  ship-logs-to-logzio:\n    handler: functions/ship-logs/handler.handler\n    description: Sends CloudWatch logs to Logz.io\n    memorySize: 128\n    environment:\n      logstash_host: listener.logz.io\n      logstash_port: 5050\n      token: icbXMIrbgOVuZWqvUFChEHIsHZTGYMmm\n\nresources:\n  Resources:\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"Ref\" : \"ShipDashlogsDashtoDashlogzioLambdaFunction\"\n        Principal: logs.#{AWS::Region}.amazonaws.com\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  sayHello:\n    handler: src/functions/sayHello.handler\n    events:\n      - http:\n          path: api/sayHello\n          method: get\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Transform: AWS::Serverless-2016-10-31\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    SubscribeToApiGatewayLogs:\n      Type: AWS::Serverless::Application\n      Properties:\n        Location:\n          ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-subscribe-log-group-to-arn\n          SemanticVersion: 1.9.3\n        Parameters:\n          DestinationArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cloudwatch-logs-to-logzio-bcn-dev-ship-logs-to-logzio\n          Prefix: \"/aws/lambda\"\n          OverrideManualConfigs: true\n\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  sayHello:\n    handler: src/functions/sayHello.handler\n    events:\n      - http:\n          path: api/sayHello\n          method: get\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Transform: AWS::Serverless-2016-10-31\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    SubscribeToApiGatewayLogs:\n      Type: AWS::Serverless::Application\n      Properties:\n        Location:\n          ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-subscribe-log-group-to-arn\n          SemanticVersion: 1.9.3\n        Parameters:\n          DestinationArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cloudwatch-logs-to-logzio-bcn-dev-ship-logs-to-logzio\n          Prefix: \"/aws/lambda\"\n          OverrideManualConfigs: true\n\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n  sayHello:\n    handler: src/functions/sayHello.handler\n    events:\n      - http:\n          path: api/sayHello\n          method: get\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Transform: AWS::Serverless-2016-10-31\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    SubscribeToApiGatewayLogs:\n      Type: AWS::Serverless::Application\n      Properties:\n        Location:\n          ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-subscribe-log-group-to-arn\n          SemanticVersion: 1.9.3\n        Parameters:\n          DestinationArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cloudwatch-logs-to-logzio-bcn-dev-ship-logs-to-logzio\n          Prefix: \"/aws/lambda\"\n          OverrideManualConfigs: true\n\n","service: gettogether\n\nplugins:\n  - serverless-pseudo-parameters\n  - serverless-iam-roles-per-function\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, self:custom.defaultStage}\n\ncustom:\n  defaultRegion: eu-west-1\n  defaultStage: dev${env:SLSUSER, \"\"}\n  getTogethersTableName: ${self:provider.stage}-gettogethers\n  getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName\n  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers\n  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}\n  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-joingettogetherdlq\n  notifyOrganiserDLQSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}\n\nfunctions: \n  getGetTogethers:\n    handler: src/functions/getGetTogethers.handler\n    events:\n      - http:\n          path: api/getGetTogethers\n          method: get\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:scan\n        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}\n      - Effect: Allow\n        Action: ssm:GetParameters*\n        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*\n    environment:\n      getTogethersTableName: ${self:custom.getTogethersTableNamePath}\n\n  sayHello:\n    handler: src/functions/sayHello.handler\n    events:\n      - http:\n          path: api/sayHello\n          method: get\n\n  notifyOrganiser:\n    handler: src/functions/notifyOrganiser.handler\n    events:\n      - sns: ${self:custom.joinGetTogetherSnsTopicName}\n    onError: ${self:custom.notifyOrganiserDLQSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.notifyOrganiserDLQSnsTopic}\n\n  notifyOrganiserDLQ:\n    handler: src/functions/notifyOrganiserDLQ.handler\n    events:\n      - sns: ${self:custom.notifyOrganiserDLQSnsTopicName}\n\n  joinGetTogether:\n    handler: src/functions/joinGetTogether.handler\n    events:\n      - http:\n          path: api/getTogether\n          method: post\n    environment:\n      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}\n    iamRoleStatements:\n      - Effect: Allow\n        Action: sns:Publish\n        Resource: ${self:custom.joinGetTogetherSnsTopic}\n\n\nresources:\n  Transform: AWS::Serverless-2016-10-31\n  Resources:\n    GetTogethersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.getTogethersTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    SubscribeToApiGatewayLogs:\n      Type: AWS::Serverless::Application\n      Properties:\n        Location:\n          ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-subscribe-log-group-to-arn\n          SemanticVersion: 1.9.3\n        Parameters:\n          DestinationArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cloudwatch-logs-to-logzio-bcn-dev-ship-logs-to-logzio\n          Prefix: \"/aws/lambda\"\n          OverrideManualConfigs: true\n\n"]},{"id":174514896,"files":["service: taplist\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: eu-west-2\n\nfunctions:\n  gettaplist:\n    handler: handler.gettaplist\n"]},{"id":199930942,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: auth-server\n#app: your-app-name\n#tenant: your-tenant-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-east-2\n  timeout: 60\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getAccessToken:\n    handler: handler.getAccessToken\n    events:\n      - http:\n          path: api/token/{code}\n          method: get\n\n  refreshAccessToken:\n    handler: handler.refreshAccessToken\n    events:\n      - http:\n          path: api/refresh/{code}\n          method: get\n\n#  hello:\n#   handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":98371230,"files":["# Options\n#\n#  --stage : (Optional) Deploy 先のステージを指定\n#  --region : (Optional) AWS の Region を指定\n#  --yumake-api-key : YuMake の API Key を指定\n\nservice: cfc-api\n\ncustom:\n  defaultStage: staging\n  defaultRegion: ap-northeast-1\n  env:\n    staging:\n      S3_WEATHER_PATH: weather.json\n      S3_BUCKET: api.staging.code4chiba.org\n    production:\n      S3_WEATHER_PATH: weather.json\n      S3_BUCKET: api.code4chiba.org\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ${opt:region, self:custom.defaultRegion}\n  environment:\n    S3_WEATHER_PATH: ${self:custom.env.${self:provider.stage}.S3_WEATHER_PATH}\n    S3_BUCKET: ${self:custom.env.${self:provider.stage}.S3_BUCKET}\n\nfunctions:\n  weather:\n    handler: api/weathers/index.handler\n    role: ${env:AWS_LAMBDA_S3_READ_ONLY_ARN}\n    events:\n      - http:\n          path: weathers\n          method: get\n          cors: true\n  updateWeatherData:\n    handler: schedule/updateWeatherData.handler\n    role: ${env:AWS_LAMBDA_S3_READ_WRITE_ARN}\n    events:\n      - schedule: cron(0 */6 * * ? *)\n    environment:\n      YUMAKE_API_KEY: ${opt:yumake-api-key}\n"]},{"id":197118272,"files":["service: backend\n\nplugins:\n  - serverless-plugin-include-dependencies\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  deploymentBucket:\n    name: ${file(./config.json):S3_bucketName}\n  deploymentPrefix: bicibici\n  environment:\n    TABLE_BIKES: ${file(./config.json):DB_Bikes}\n    TABLE_PLANS: ${file(./config.json):DB_Plans}\n    TABLE_STATIONS: ${file(./config.json):DB_Stations}\n    TABLE_USERS: ${file(./config.json):DB_User}\n    TABLE_REPORT: ${file(./config.json):DB_Report}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \n        - {\"Fn::GetAtt\": [\"BikeDynamoDBTable\", \"Arn\"],}\n        - {\"Fn::GetAtt\": [\"PlansDynamoDBTable\", \"Arn\"],}\n        - {\"Fn::GetAtt\": [\"StationsDynamoDBTable\", \"Arn\"],}\n        - {\"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\"],}\n        - {\"Fn::GetAtt\": [\"ReportDynamoDBTable\", \"Arn\"],}\n        \nfunctions:\n  verificar_movimiento_bicicleta:\n    handler: bicycleFunctions/verificar_movimiento.verificar_movimiento\n    events:\n      - iot:\n          name: ${file(./config.json):IoT_Name}\n          sql: ${file(./config.json):IoT_topic}\n          description: ${file(./config.json):IoT_Description}\n          enabled: true\n          sqlVersion: ${file(./config.json):IoT_Version}\n      - http:\n          path: verificar_movimiento\n          method: ANY\n  \n  enviar_mensaje_emergencia:\n    handler: bicycleFunctions/mensaje_emergencia.mensaje_emergencia\n    events:\n      - iot:\n          name: ${file(./config.json):IoT_Emergency}\n          sql: ${file(./config.json):IoT_topic}\n          description: ${file(./config.json):IoT_Description}\n          enabled: true\n          sqlVersion: ${file(./config.json):IoT_Version}          \n      - http:\n          path: mensaje_emergencia\n          method: ANY\n  \n  obtener_planes_usuarios:\n    handler: userFunctions/obtener_planes.obtener_planes\n    events:\n      - http:\n          path: planes\n          method: ANY\n\n  obtener_usuario:\n    handler: userFunctions/obtener_usuario.obtener_usuario\n    events:\n      - http:\n          path: usuario\n          method: ANY\n\n  revisar_planes_usuarios:\n    handler: cloudWatchFunctions/revisar_planes.revisar_planes\n    events:\n      - schedule: \n          rate: rate(10 minutes)\n          enabled: false\n      - http:\n          path: revisar_planes\n          method: ANY\n  \n  obtener_informacion_estaciones:\n    handler: userFunctions/informacion_estaciones.informacion_estaciones\n    events:\n      - http: \n          path: estacion\n          method: ANY\n  \n  obtener_estacionamientos_cercanos:\n    handler: userFunctions/estacionamientos_cercanos.estacionamientos_cercanos\n    events:\n      - http:\n          path: estaciones\n          method: ANY\n  \n  desbloquear_bicicleta:\n    handler: userFunctions/desbloquear_bicicleta.desbloquear_bicicleta\n    events:\n      - http:\n          path: desbloquearBicicleta\n          method: ANY\n\n  finalizar_viaje:\n    handler: userFunctions/finalizar_viaje.finalizar_viaje\n    events:\n      - http:\n          path: finalizar_viaje\n          method: ANY\n  \n  registrar_pago:\n    handler: userFunctions/registrar_pago.registrar_pago\n    events:\n      - http:\n          path: registrar_pago\n          method: ANY\n          \n  registrar_contacto_emergencia:\n    handler: userFunctions/registrar_emergencia.registrar_emergencia\n    events:\n      - http:\n          path: registrar_emergencia\n          method: ANY\n  \n  calcular_datos:\n    handler: userFunctions/calcular_datos.calcular_datos\n    events:\n      - http:\n          path: calcular_datos\n          method: ANY\n  \n  reportar_bicicleta:\n    handler: userFunctions/reportar_bicicleta.reportar_bicicleta\n    events:\n      - http:\n          path: reportar_bicicleta\n          method: ANY\n\n  registrar_usuario:\n    handler: userFunctions/registrar_usuario.registrar_usuario\n    events:\n\n      #need manual configuration\n      #ref forr names https://docs.aws.amazon.com/es_es/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html\n      #- cognitoUserPool:\n          #pool: ${file(./config.json):Cognito_pool}\n          #trigger: PostConfirmation\n          #existing: true\n          #https://medium.com/@Da_vidgf/using-cognito-for-users-management-in-your-serverless-application-1695fec9e225\n\nresources:\n  Resources:\n    BikeDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuidBike\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuidBike\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.TABLE_BIKES}\n    \n    PlansDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuidPlan\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuidPlan\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.TABLE_PLANS}\n    \n    StationsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuidStation\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuidStation\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.TABLE_STATIONS}\n    \n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuidUser\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuidUser\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.TABLE_USERS}\n    \n    ReportDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: uuidReport\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: uuidReport\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.TABLE_REPORT}\n"]},{"id":211542931,"files":["service: aws-sftp-active-directory-authorizer-template\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: addemo\n  stage: dev\n\nfunctions:\n  authorize:\n    handler: handler.authorize\n    role: lambdaExecutionRole\n    vpc:\n      securityGroupIds:\n        - Ref: authorizerSecurityGroup\n      subnetIds:\n        - Ref: subnet1\n        - Ref: subnet2\n    events:\n      - http:\n          path: /servers/{serverId}/users/{user}/config\n          method: GET\n          authorizer: aws_iam\n    environment:\n      SFTP_USER_ROLE_ARN: !GetAtt sftpUserRole.Arn\n      BUCKET_ARN:\n        Fn::Join:\n          - \":\"\n          - - \"arn\"\n            - Ref: \"AWS::Partition\"\n            - \"s3::\"\n            - ${env:TRANSFER_BUCKET_NAME}\n      LDAP_DIRECTORY_NAME: sftpdemo\n      LDAP_DNS_NAME: sftpdemo.example.com\n\nresources: # CloudFormation template syntax\n  Resources:\n    vpc:\n      Type: AWS::EC2::VPC\n      Properties:\n        CidrBlock: \"10.0.0.0/16\"\n        EnableDnsHostnames: true\n        EnableDnsSupport: true\n    subnet1:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: vpc\n        CidrBlock: 10.0.1.0/24\n        AvailabilityZone:\n          Fn::Select:\n            - 0\n            - Fn::GetAZs: \"\"\n    subnet2:\n      Type: AWS::EC2::Subnet\n      Properties:\n        VpcId:\n          Ref: vpc\n        CidrBlock: 10.0.2.0/24\n        AvailabilityZone:\n          Fn::Select:\n            - 1\n            - Fn::GetAZs: \"\"\n    authorizerSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: Allow LDAP connections\n        VpcId:\n          Ref: vpc\n        SecurityGroupEgress:\n          - IpProtocol: tcp\n            FromPort: 389\n            ToPort: 389\n            CidrIp: 10.0.0.0/16\n    activeDirectory:\n      Type: AWS::DirectoryService::SimpleAD\n      Properties:\n        Name: sftpdemo.example.com\n        Password: ${env:AD_ADMIN_PASSWORD}\n        Size: \"Small\"\n        VpcSettings:\n          SubnetIds:\n            - Ref: subnet1\n            - Ref: subnet2\n          VpcId:\n            Ref: vpc\n    lambdaExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /sftp/\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n    transferInvocationRole:\n      Type: AWS::IAM::Role\n      DependsOn:\n        - ApiGatewayRestApi\n      Properties:\n        Path: /sftp/\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - transfer.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: TransferCanInvokeAuthorizeApi\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - execute-api:Invoke\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      - - \"arn\"\n                        - Ref: \"AWS::Partition\"\n                        - execute-api\n                        - Ref: \"AWS::Region\"\n                        - Ref: \"AWS::AccountId\"\n                        - Fn::Join:\n                            - \"\"\n                            - - Ref: ApiGatewayRestApi\n                              - /${self:provider.stage}/GET/*\n          - PolicyName: TransferCanReadAuthorizeApi\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - apigateway:GET\n                  Resource: \"*\"\n    transferLoggingRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /sftp/\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - transfer.amazonaws.com\n              Action: sts:AssumeRole\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSTransferLoggingAccess\n    sftpUserRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /sftp/\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - transfer.amazonaws.com\n              Action: \"sts:AssumeRole\"\n        Policies:\n          - PolicyName: SftpBucketAccessPolicy\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - s3:*\n                  Resource:\n                    Fn::Join:\n                      - \":\"\n                      - - \"arn\"\n                        - Ref: \"AWS::Partition\"\n                        - \"s3::\"\n                        - ${env:TRANSFER_BUCKET_NAME}*\n    sftpServer:\n      Type: AWS::Transfer::Server\n      Properties:\n        IdentityProviderDetails:\n          InvocationRole:\n            Fn::GetAtt: [\"transferInvocationRole\", \"Arn\"]\n          Url:\n            Fn::Join:\n              - \"\"\n              - - https://\n                - Ref: ApiGatewayRestApi\n                - .execute-api.\n                - Ref: \"AWS::Region\"\n                - .amazonaws.com/${self:provider.stage}/\n        IdentityProviderType: \"API_GATEWAY\"\n        LoggingRole:\n          Fn::GetAtt: [\"transferLoggingRole\", \"Arn\"]\n    privateHostedZone:\n      Type: AWS::Route53::HostedZone\n      Properties:\n        Name: \"example.com\"\n        VPCs:\n          - VPCId:\n              Ref: vpc\n            VPCRegion: !Ref \"AWS::Region\"\n    adRecordSet:\n      Type: \"AWS::Route53::RecordSet\"\n      Properties:\n        HostedZoneId:\n          Ref: privateHostedZone\n        Name: sftpdemo.example.com.\n        Type: A\n        TTL: \"900\"\n        ResourceRecords: !GetAtt activeDirectory.DnsIpAddresses\n      DependsOn: privateHostedZone\n  #  Outputs:\n  #     NewOutput:\n  #       Description: \"Description for the output\"\n  #       Value: \"Some output value\"\n"]},{"id":182468662,"files":["service: lambda-sqs\n\nframeworkVersion: \"=1.41.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  environment: ${file(env.yml):${self:provider.stage}}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - sqs:*\n      Resource: arn:aws:sqs:${self:provider.region}:*:*\n    - Effect: \"Deny\"\n      Action:\n        - sqs:AddPermission\n        - sqs:CreateQueue\n        - sqs:DeleteQueue\n        - sqs:RemovePermission\n      Resource: arn:aws:sqs:${self:provider.region}:*:*\n\npackage:\n  exclude:\n    - test/**\n\ncustom:\n  lambda1SQS: \"lambda1SQS-${self:provider.stage}\"\n  lambda2SQS: \"lambda2SQS-${self:provider.stage}\"\n\nfunctions:\n  processSQSLambda1:\n    handler: handler.processSQSLambda1\n    reservedConcurrency: 10\n    events:\n      - sqs:\n          batchSize: 1\n          arn: \n            Fn::GetAtt:\n              - Lambda1SQS\n              - Arn\n    environment:\n      SQS_LAMBDA2_URL:\n        Ref: Lambda2SQS\n\nresources:\n  Resources:\n    Lambda1SQS:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.lambda1SQS}\n    Lambda2SQS:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.lambda2SQS}\n"]},{"id":205635947,"files":["service: auto-deploy-lambda\n\nprovider:\n  name: aws\n  region: ap-northeast-1\n  timeout: 120\n\n  environment:\n    SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}\n\npackage:\n  exclude:\n    - Dockerfile\n    - docker-compose.yml\n\nfunctions:\n  slack:\n    handler: src/index.post\n    description: \"Post message to Slack\"\n    timeout: 60\n"]},{"id":128588582,"files":["service: book-catalog\n\nplugins:\n  - serverless-iam-roles-per-function\n\npackage:\n  exclude:\n    - node_modules/**\n    - .idea/**\n    - img/**\n    - .requirements/**\n    - env/**\n    - README.md\n    - package.json\n    - package-lock.json\n    - yarn.lock\n    - buildspec.yml\n    - build.sh\n    - LICENSE\n    - test*\n  \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}  \n  region: ap-southeast-1\n  environment:\n      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n      \nfunctions:\n  list:\n    handler: functions/list.handler\n    events:\n      - http:\n         method: get\n         path: /books\n         cors: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:Scan\n        Resource: \n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"] ]\n\n  get:\n    handler: functions/get.handler\n    events:\n      - http:\n         method: get\n         path: /books/{id}\n         cors: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:GetItem\n        Resource: \n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"] ]\n\n  create:\n    handler: functions/create.handler\n    events:\n      - http:\n          method: post\n          path: /book\n          cors: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:PutItem\n        Resource: \n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"] ]\n\n  edit:\n    handler: functions/edit.handler\n    events:\n      - http:\n          method: put\n          path: /books/{id}\n          cors: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:UpdateItem\n        Resource: \n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"] ]\n\n  delete:\n    handler: functions/delete.handler\n    events:\n      - http:\n          method: delete\n          path: /books/{id}\n          cors: true\n    iamRoleStatements:\n      - Effect: Allow\n        Action: dynamodb:DeleteItem\n        Resource: \n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\" , {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"} , \":table/${self:provider.environment.DYNAMODB_TABLE}\"] ]\n    \nresources:\n  Resources:\n    BookCatalogDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}"]},{"id":198334243,"files":["service: sls-fact\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  memorySize: 128\n  environment:\n    VENDOR_ID: xxxxxxxxxxxxx\n    CLIENT_ID: amzn1.application-oa2-client.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    CLIENT_SECRET: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nfunctions:\n  skill-handler:\n    handler: handler.handler\n    events:\n      - alexaSkill: amzn1.ask.skill.xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx\n\ncustom:\n  alexa:\n    vendorId: ${env:VENDOR_ID}\n    clientId: ${env:CLIENT_ID}\n    clientSecret: ${env:CLIENT_SECRET}\n    localServerPort: 9000\n    skills:\n      - id: amzn1.ask.skill.xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: Fact\n          apis:\n            custom:\n              endpoint:\n                uri: arn:aws:lambda:<AWS Region>:<AWS Account ID>:function:sls-fact-dev-skill-handler\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel: ${file(models/en-US.json):interactionModel}\n\nplugins:\n  - serverless-alexa-skills\n"]},{"id":194953312,"files":["service: sls-csv-to-json-service\n\nplugins:\n  - serverless-plugin-existing-s3\n  - serverless-pseudo-parameters\n  - serverless-offline\n\ncustom:\n  bucket: intuit.akgupta.tech\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-west-1\n  cors: true\n  environment:\n    BUCKET: ${self:custom.bucket}\n    accountId: '#{AWS::AccountId}'\n    region: '#{AWS::Region}'\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:PutBucketNotification\"\n        - \"s3:GetBucketNotification\"\n        - \"s3:*\"\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n\n  createCsv:\n    handler: handler.createCsv\n    events:\n      - http:\n          method: post\n          path: csv/{name}\n\n  readFile:\n    handler: handler.readFile\n    events:\n      - http:\n          method: get\n          path: /{fileType}/{name}\n          request:\n            parameters:\n              paths:\n                fileType: true\n                name: true\n\n  jsonTransformer:\n    handler: handler.jsonTransformer\n    events:\n      - existingS3:\n          bucket: ${self:custom.bucket}\n          events:\n            - s3:ObjectCreated:*\n          rules:\n            - suffix: .csv\n\n  hello:\n    handler: hello.handler\n    events:\n      - http:\n          method: get\n          path: hello"]},{"id":181509680,"files":["service: aws-iot-example-ff\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  variableSyntax: \"\\\\${{([ ~:a-zA-Z0-9._\\\\'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}}\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n       - \"dynamodb:Scan\"\n       - \"dynamodb:Query\"\n      Resource:\n        Fn::GetAtt:\n          - \"StateTable\"\n          - \"Arn\"\n  environment:\n   REGION: ${{opt:stage, self:provider.region}}\n   TABLE: ${{self:custom.stateTable}}\n\ncustom:\n  # Rule for reading the state messages and include the clientId in the package as deviceId\n  stateRuleSQL: \"SELECT *, topic(3) as deviceId, FROM 'sensors/temperature/+/state'\"\n  # DynamoDB Table name\n  stateTable: StateTable\n\n\nfunctions:\n  getData:\n    handler: handler.getData\n    events:\n      - http:\n          path: data\n          method: get\n          cors: true\n      # - iot:\n      #     sql: \"SELECT * FROM 'some_topic'\"\n\nresources:\n  Resources:\n    # Table for holding state data\n    StateTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${{self:custom.stateTable}}\n        SSESpecification:\n          SSEEnabled: true\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        AttributeDefinitions:\n          - AttributeName: deviceId\n            AttributeType: S\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: deviceId\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n    # IAM Role & Policy to allow AWS IoT Service to write in our DynamoDB Table\n    StateRole:\n      Type: \"AWS::IAM::Role\"\n      Properties:\n        RoleName: state-iot-write-dynamo-ff\n        AssumeRolePolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Principal:\n                Service:\n                  - iot.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: \"statedynamodbwrite\"\n            PolicyDocument:\n              Version: \"2012-10-17\"\n              Statement:\n                - Effect: \"Allow\"\n                  Action:\n                    - \"dynamodb:PutItem\"\n                    - \"dynamodb:BatchWriteItem\"\n                  Resource:\n                    Fn::GetAtt:\n                      - \"StateTable\"\n                      - \"Arn\"\n    # Rule to forward state messages into the DynamoDB\n    StateRule:\n      Type: \"AWS::IoT::TopicRule\"\n      Properties:\n        RuleName: state_to_dynamo_ff\n        TopicRulePayload:\n          RuleDisabled: false\n          Sql: ${{self:custom.stateRuleSQL}}\n          AwsIotSqlVersion: \"2016-03-23\"\n          Actions:\n            -\n              DynamoDBv2:\n                RoleArn:\n                  Fn::GetAtt:\n                    - \"StateRole\"\n                    - \"Arn\"\n                PutItem:\n                  TableName: StateTable\n","service: simple-ui\n\nplugins:\n  - serverless-finch\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n\ncustom:\n  client:\n    # The contents of this bucket will be removed!\n    bucketName: ${env:BUCKET_NAME}\n    distributionFolder: dist"]},{"id":191382796,"files":["service:\n  name: aws-apache-to-json\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  memorySize: 128\n  region: us-east-1\n  runtime: nodejs8.11\n  timeout: 120\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:AbortMultipartUpload\"\n        - \"s3:GetBucketLocation\"\n        - \"s3:GetObject\"\n        - \"s3:ListBucket\"\n        - \"s3:ListBucketMultipartUploads\"\n        - \"s3:PutObject\"\n      Resource: ${file(./resources.yml):s3Buckets}\n    - Effect: \"Allow\"\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:Get*\"\n        - \"logs:PutLogEvents\"\n      Resource: ${file(./resources.yml):logGroups}\n    - Effect: \"Allow\"\n      Action:\n        - \"logs:CreateLogStream\"\n      Resource: ${file(./resources.yml):logStreams}\n\nfunctions:\n  processor:\n    handler: src/main/node/handler.processor\n\npackage:\n  exclude:\n    - node_modules/aws-sdk/**\n    - node_modules/aws-sdk-mock/**\n    - node_modules/serverless/**\n    - src/main/resources/**\n"]},{"id":191212727,"files":["# NOTE: update this with your service name\nservice: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  # To load environment variables externally\n  # rename env.example to env.yml and uncomment\n  # the following line. Also, make sure to not\n  # commit your env.yml.\n  #\n  #environment: ${file(env.yml):${self:provider.stage}}\n  \n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  hello:\n    handler: services/hello.handler\n    events:\n      - http:\n          path: hello\n          method: get\n          \n  create:\n    handler: services/notes/create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n          \n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: services/notes/get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n          \n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: services/notes/list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n          \n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: services/notes/update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n          \n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: services/notes/delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":145979624,"files":["service: admin-portal\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  # Our stage is based on what is passed in when running serverless\n  # commands. Or fallsback to what we have set in the provider section.\n  stage: ${opt:stage, self:provider.stage}\n\n  # Load our webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-2\n\n  # 'iamRoleStatement' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  # These environment variables are made available to our functions\n  # under process.env.\n  environment:\n    stripeSecretKey: ${self:custom.environment.stripeSecretKey}\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n\n  createCustomer:\n    handler: createCustomer.main\n    events:\n      - http:\n          path: createCustomer\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  subscribe:\n    handler: subscribe.main\n    events:\n      - http:\n          path: subscribe\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  createProduct:\n    handler: createProduct.main\n    events:\n      - http:\n          path: createProduct\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  createPlan:\n    handler: createPlan.main\n    events:\n      - http:\n          path: createPlan\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  updateDefaultPaymentMethod:\n    handler: updateDefaultPaymentMethod.main\n    events:\n      - http:\n          path: updateDefaultPaymentMethod\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  getCustomer:\n    handler: getCustomer.main\n    events:\n      - http:\n          path: getCustomer\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  cancelSubscription:\n    handler: cancelSubscription.main\n    events:\n      - http:\n          path: cancelSubscription\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n  reactivateSubscription:\n    handler: reactivateSubscription.main\n    events:\n      - http:\n          path: reactivateSubscription\n          method: post\n          cors: true\n          authorizer: aws_iam\n\n\n# Create our resources with separate CloudFormation templates\nresources:\n  # Cognito\n  - ${file(resources/cognito-user-pool.yml)}\n  - ${file(resources/cognito-identity-pool.yml)}\n"]},{"id":188024361,"files":["service: weekendr\n\nplugins:\n  - serverless-dotenv-plugin\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: \"${env:ENVIRONMENT}\"\n  region: eu-west-1\n  environment:\n    EMAIL: \"${env:EMAIL}\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  send:\n    name: \"${self:service}-send-email-${self:provider.stage}\"\n    handler: handler.send\n    events:\n      # Run at 3:00 pm (UTC) every Tuesday, since this is\n      # apparently one of the best times to find cheap flights\n      - schedule: cron(0 15 ? * TUE *)\n"]},{"id":125611400,"files":["service: kette\n\ncustom:\n  apiKeysTableName: 'apiKeys-table-${self:provider.stage}'\n  userIdIndex : 'apiKeys-table-userId-index-${self:provider.stage}'\n  usersTableName: 'users-table-${self:provider.stage}'\n\n  encryptionKeyId : ${env:ENCRYPTION_KEYID_${self:provider.stage}} \n  usagePlanId : ${env:USAGEPLANID_${self:provider.stage}} \n  \n  dynamodb:\n    start:\n      migrate: true\n\npackage:\n  exclude:\n    - _end2endTests/**\n    - _templates/**\n    - resources/**\n    - .dynamodb/**\n    - API-Documentation.MD\n    - LICENSE\n    - README.MD\n\nprovider:\n  name: aws\n  apiKeys:\t\n    - ${self:provider.stage}-forTests\n  usagePlan:\t\n    quota:\t\n      limit: 50000\t\n      offset: 0\t\n      period: MONTH\t\n    throttle:\t\n      burstLimit: 200\t\n      rateLimit: 100\n  runtime: nodejs8.10\n  region: eu-central-1\n  stage: ${opt:stage, 'dev'}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - \"arn:aws:dynamodb:eu-central-1:*:*\"\n    - Effect: Allow\n      Action: 'apigateway:POST'\n      Resource:\n        - \"arn:aws:apigateway:eu-central-1::/*\"\n    - Effect: Allow\n      Action: \n        - 'kms:Encrypt'\n        - 'kms:Decrypt'\n      Resource:\n        - \"arn:aws:kms:eu-central-1:*:key/${self:provider.environment.ENCRYPTION_KEYID}\"\n  environment:\n    APIKEYS_TABLE: ${self:custom.apiKeysTableName}\n    APIKEYS_TABLE_USERID_INDEX : ${self:custom.userIdIndex}\n    USERS_TABLE: ${self:custom.usersTableName}\n\n    STAGE: ${self:provider.stage}\n    \n    ENCRYPTION_KEYID: ${self:custom.encryptionKeyId}\n    USAGEPLAN_ID: ${self:custom.usagePlanId}\n    \nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n  - serverless-dotenv-plugin\nfunctions:\n  check:\n    handler: handlerCheck.check\n    events:\n      - http:\n              method: get\n              path: check\n              cors: true\n  getBike:\n    handler: handlerGetBike.getBike\n    events:\n      - http:\n              method: get\n              path: bikes\n              cors: true\n  getBikes:\n    handler: handlerGetBikes.getBikes\n    events:\n      - http:\n              method: get\n              path: bikes/{ethAddress}\n              cors: true\n  createBike:\n    handler: handlerCreateBike.createBike\n    events:\n      - http:\n              method: post\n              path: bikes\n              cors: true\n  getPrice:\n    handler: handlerGetPrice.getPrice\n    events:\n      - http:\n              method: get\n              path: price\n              cors: true\n  authCreateApiKey:\n    handler: handlerAuthCreateApiKey.createApiKey\n    events:\n      - http:\n              method: post\n              path: auth/apiKeys\n              cors: true\n              authorizer: aws_iam\n  authGetApiKeys:\n    handler: handlerAuthGetApiKeys.getApiKeys\n    events:\n      - http:\n              method: get\n              path: auth/apiKeys\n              cors: true\n              authorizer: aws_iam\n  authCreateBike:\n    handler: handlerAuthCreateBike.createBike\n    events:\n      - http:\n              method: post\n              path: auth/bikes\n              cors: true\n              private : true\n  authGetBike:\n    handler: handlerAuthGetBikes.getBikes\n    events:\n      - http:\n              method: get\n              path: auth/bikes/{id}\n              cors: true\n              private : true\nresources:\n  - ${file(resources/tables.yml)}\n  - ${file(resources/b2b-user-pool.yml)}\n  - ${file(resources/b2b-identity-pool.yml)}\n"]},{"id":185369929,"files":["service: dialogflow-fulfillment\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n\nfunctions:\n  hello:\n    handler: handler.fulfillment\n    events:\n      - http:\n          path: /\n          method: post\n"]},{"id":150005749,"files":["service: lambda-sns-dlq-error-handling # NOTE: update this with your service name\nplugins:\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 128\n  environment:\n    accountId: '#{AWS::AccountId}'\n    region: '#{AWS::Region}'\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Resource: '*'\n      Action:\n        - 'sns:*'\n  functions:\n    init:\n      handler: init.handler\n      events:\n        - http:\n            path: init\n            method: post\n            cors: true\n    calculate:\n      handler: calculate.handler\n      events:\n        - sns: calculate-topic # created immediately\n      onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:dlq-topic\n    error:\n      handler: error.handler\n      events:\n        - sns: dlq-topic # created immediately\n"]},{"id":181924842,"files":["service: salat-aws-test\nprovider:\n  name: aws\n  runtime: provided\n  stage: dev\n  region: eu-central-1\nfunctions:\n  hello:\n    handler: handler.hello\n    layers:\n      - arn:aws:lambda:eu-central-1:553035198032:layer:nodejs11:17\n    events:\n      - http:\n          path: /\n          method: get\n\n"]},{"id":181034884,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: lambda-deploy-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello\n          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":180906821,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: angularbot # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":176928061,"files":["service:\n  name: iblis-deploy-static\n\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - \"@silvermine/serverless-plugin-cloudfront-lambda-edge\"\n\npackage:\n  exclude:\n    - \"node_modules/**\"\n    - \"src/**\"\n\nfunctions:\n  languageRedirectCloudFront:\n    handler: languageRedirectCloudFront.handler\n    runtime: nodejs8.10\n    memorySize: 128\n    timeout: 5\n    lambdaAtEdge:\n      distribution: \"CloudFrontDistribution\"\n      eventType: \"viewer-request\"\n\nresources:\n  Resources:\n    S3Bucket: # We use this name as Ref later\n      Type: AWS::S3::Bucket\n    CloudFrontOriginAccessIdentity: # We use this name as Ref later\n      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n      Properties:\n        CloudFrontOriginAccessIdentityConfig:\n          Comment: CloudFront origin access identity\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      DependsOn:\n        - S3Bucket\n      Properties:\n        DistributionConfig:\n          Enabled: \"true\"\n          Origins:\n            - Id: !Join [\"-\", [!Ref S3Bucket, \"s3\"]]\n              DomainName: !Join [\".\", [!Ref S3Bucket, \"s3.amazonaws.com\"]]\n              S3OriginConfig:\n                OriginAccessIdentity:\n                  !Join [\n                    \"/\",\n                    [\n                      \"origin-access-identity/cloudfront\",\n                      !Ref CloudFrontOriginAccessIdentity,\n                    ],\n                  ]\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - GET\n              - HEAD\n            ViewerProtocolPolicy: redirect-to-https\n            TargetOriginId: !Join [\"-\", [!Ref S3Bucket, \"s3\"]]\n            ForwardedValues:\n              QueryString: false\n          DefaultRootObject: index.html\n          CustomErrorResponses: # For Single Page App\n            - ErrorCode: 404\n              ResponseCode: 200\n              ResponsePagePath: /index.html\n    S3BucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: { Ref: S3Bucket }\n        PolicyDocument:\n          Statement:\n            - Action:\n                - \"s3:GetObject\"\n              Effect: Allow\n              Resource:\n                { \"Fn::Join\": [\"\", [\"arn:aws:s3:::\", { Ref: S3Bucket }, \"/*\"]] }\n              Principal:\n                AWS:\n                  {\n                    \"Fn::Join\":\n                      [\n                        \" \",\n                        [\n                          \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity\",\n                          { Ref: CloudFrontOriginAccessIdentity },\n                        ],\n                      ],\n                  }\n  Outputs:\n    BucketSiteName:\n      Value:\n        Ref: S3Bucket\n    CloudFrontDistributionId:\n      Value:\n        Ref: CloudFrontDistribution\n    CloudFrontDistributionDomain:\n      Value:\n        \"Fn::GetAtt\": [CloudFrontDistribution, DomainName]\n"]},{"id":176290937,"files":["service: notes-app-api\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: us-east-1\n\n  # 'iamRoleStatements' defines the permission policy for the Lambda function.\n  # In this case Lambda functions are granted with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  # Defines an HTTP API endpoint that calls the main function in create.js\n  # - path: url path is /notes\n  # - method: POST request\n  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross\n  #     domain api call\n  # - authorizer: authenticate using the AWS IAM role\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    # Defines an HTTP API endpoint that calls the main function in get.js\n    # - path: url path is /notes/{id}\n    # - method: GET request\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    # Defines an HTTP API endpoint that calls the main function in list.js\n    # - path: url path is /notes\n    # - method: GET request\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update:\n    # Defines an HTTP API endpoint that calls the main function in update.js\n    # - path: url path is /notes/{id}\n    # - method: PUT request\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: aws_iam\n  delete:\n    # Defines an HTTP API endpoint that calls the main function in delete.js\n    # - path: url path is /notes/{id}\n    # - method: DELETE request\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n\n          \n# Create our resources with separate CloudFormation templates\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n"]},{"id":172828243,"files":["service: markov-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\nfunctions:\n  tweet:\n    handler: index.tweet\n    timeout: 60\n    events:\n      - schedule: rate(4 hours)\n"]},{"id":166112960,"files":["service: recsys-exporter\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  # Load our secret environment variables based on the current stage.\n  # Fallback to default if it is not in prod.\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: prod\n  region: ap-southeast-2\n  environment:\n    DB_HOST: ${self:custom.environment.DB_HOST}\n    DB_USER: ${self:custom.environment.DB_USER}\n    DB_PASS: ${self:custom.environment.DB_PASS}\n    DB_NAME: ${self:custom.environment.DB_NAME}\n  \n\nfunctions:\n  exportTable:\n    handler: handler.exportTable\n    vpc: ${file(vpc.yml)}\n"]},{"id":162863169,"files":["# Welcome to Serverless!\n\nservice: geoservice-lambda # NOTE: update this with your service name\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    ADDRESS_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    API_KEY: api_key\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"*\"\npackage:\n  include:\n    - utils/**\nfunctions:\n  hello:\n    handler: api/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  addressSubmission:\n    handler: api/address.submit\n    memorySize: 128\n    description: Submit address geocoding info and starts interview process.\n    events:\n      - http:\n          path: address\n          method: post\n  listAddress:\n    handler: api/address.list\n    memorySize: 128\n    description: List all address\n    events:\n      - http:\n          path: address\n          method: get\n  addressDetails:\n    handler: api/address.get\n    description: Get address detail\n    events:\n      - http:\n          path: address/{id}\n          method: get\nresources:\n  Resources:\n    AddressDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: \"id\"\n            AttributeType: \"S\"\n        KeySchema:\n          - AttributeName: \"id\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: ${self:provider.environment.ADDRESS_TABLE}\n"]},{"id":135258405,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: WebComicsReader\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  environment:\n    REGION: ${self:provider.region}\n    DYNAMODB_TABLE: ComicStrips\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/ComicStrips\n\npackage:\n  excludeDevDependencies: true\n  individually: true\n\nplugins:\n  - serverless-plugin-optimize\n  # - serverless-domain-manager\n  - serverless-pseudo-parameters\n\nfunctions:\n  newStrip:\n    handler: build/functions/newStrip.httpHandler\n    events:\n      - http:\n          path: /comics/{comicName}\n          method: post\n  getStrips:\n    handler: build/functions/getStrips.httpHandler\n    events:\n      - http:\n          path: /comics/{comicName}\n          method: get\n          # authorizer: aws_iam\n  getLatestImageForComics:\n    handler: build/functions/getLastImageForComics.httpHandler\n    events:\n      - http:\n          path: /latest\n          method: get\n          # authorizer: aws_iam\n\n# custom:\n#   customDomain:\n#     certificateName: 'comics.parsiweb.fr'\n#     domainName: comics.parsiweb.fr\n#     basePath: ${opt:stage, self:provider.stage}\n#     stage: ${opt:stage, self:provider.stage}\n#     createRoute53Record: true\n\nresources:\n  Resources:\n    WebComicsReaderCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Comment: The WebComics Reader CloudFront Distribution\n          Aliases:\n            - comics.parsiweb.fr\n          DefaultCacheBehavior:\n            AllowedMethods:\n              - HEAD\n              - DELETE\n              - POST\n              - GET\n              - OPTIONS\n              - PUT\n              - PATCH\n            CachedMethods:\n              - HEAD\n              - GET\n            TargetOriginId: WebComicsReaderBackend-aws-origin\n            ViewerProtocolPolicy: 'redirect-to-https'\n            DefaultTTL: 1314000\n            Compress: true\n            ForwardedValues:\n              # Headers:\n                # - \"*\"\n                # - \"Authorization\"\n                # - \"X-Amz-Security-Token\"\n                # - \"X-Amz-Date\"\n              QueryString: true\n          Enabled: true\n          PriceClass: PriceClass_100\n          Origins:\n            - Id: WebComicsReaderBackend-aws-origin\n              DomainName:\n                Fn::Join:\n                  - \".\"\n                  - - Ref: ApiGatewayRestApi\n                    - execute-api.${self:provider.region}.amazonaws.com\n              CustomOriginConfig:\n                HTTPPort: 80\n                HTTPSPort: 443\n                OriginProtocolPolicy: https-only\n# you can add CloudFormation resource templates here\n# resources:\n#   Resources:\n#     ComicsStripsDynamoDbTable:\n#       Type: 'AWS::DynamoDB::Table'\n#       DeletionPolicy: Retain\n#       Properties:\n#         AttributeDefinitions:\n#           - AttributeName: comicName\n#             AttributeType: S\n#           - AttributeName: id\n#             AttributeType: S\n#         KeySchema:\n#           - AttributeName: comicName\n#             KeyType: HASH\n#           - AttributeName: id\n#             KeyType: RANGE\n#         ProvisionedThroughput:\n#           ReadCapacityUnits: 1\n#           WriteCapacityUnits: 1\n#         TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":144551644,"files":["service: media-s3-sync\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource:\n        Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::env:${env:AWS_S3_BUCKET}\"\nfunctions:\n  create:\n    handler: src/handler.create\n    timeout: 30\n    events:\n      - existingS3:\n          bucket: ${env:AWS_S3_BUCKET}\n          events:\n            - s3:ObjectCreated:*\n    environment:\n      AWS_S3_ACCESS_KEY_ID: ${env:AWS_S3_ACCESS_KEY_ID}\n      AWS_S3_SECRET_ACCESS_KEY: ${env:AWS_S3_SECRET_ACCESS_KEY}\n      AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}\n      AWS_S3_REGION: ${env:AWS_S3_REGION}\n      AWS_S3_VERSION: ${env:AWS_S3_VERSION}\n      API_URL: ${env:API_URL}\n      API_SECRET_KEY: ${env:API_SECRET_KEY}\n  remove:\n    handler: src/handler.remove\n    timeout: 30\n    events:\n      - existingS3:\n          bucket: ${env:AWS_S3_BUCKET}\n          events:\n            - s3:ObjectRemoved:*\n    environment:\n      AWS_S3_ACCESS_KEY_ID: ${env:AWS_S3_ACCESS_KEY_ID}\n      AWS_S3_SECRET_ACCESS_KEY: ${env:AWS_S3_SECRET_ACCESS_KEY}\n      AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}\n      AWS_S3_REGION: ${env:AWS_S3_REGION}\n      AWS_S3_VERSION: ${env:AWS_S3_VERSION}\n      API_URL: ${env:API_URL}\n      API_SECRET_KEY: ${env:API_SECRET_KEY}\nplugins:\n  - serverless-webpack\n  - serverless-plugin-existing-s3\n\ncustom:\n  serverless-offline:\n    port: 3010\n    host: 0.0.0.0\n\n  webpack:\n    webpackConfig: internals/webpack.config.js\n"]},{"id":164324127,"files":["service: aws-api-lambda-s3-image-upload\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource: \"arn:aws:s3:::bucketName\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource: \"arn:aws:s3:::bucketName/*\"\n\nfunctions:\n  index:\n    handler: handler.handler\n    events:\n      - http: POST handler"]},{"id":163399469,"files":["service: notes-graphql-api \n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:dynamodb:*:*:table/\"\n            - Ref: NotesGqlDynamoDbTable\n\n              \nfunctions:\n  queryNotes:\n    handler: handler.queryNotes\n    events:\n    - http: \n        path: notes \n        method: post\n        cors: true \n    environment:\n      TABLE_NAME: note-app-gql-table\n\nresources:\n  Resources:\n    NotesGqlDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: note-app-gql-table\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":162860274,"files":["service: lambda-s3-rds-sls\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 6s\n  logRetentionInDays: 7\n  versionFunctions: false\n  deploymentBucket:\n    name: YOUR_DEPLOYMENT_BUCKET\n  region: YOUR_DEPLOYMENT_REGION\n  vpc:\n    securityGroupIds:\n      - YOUR_SECURITY_GROUP_ID\n    subnetIds:\n      - YOUR_SUBNET_IDS\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - YOUR_S3_BUCKET_NAME\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3:::\"\n            - YOUR_S3_BUCKET_NAME\n            - \"/*\"\n\nplugins:\n  - serverless-plugin-existing-s3\n\nfunctions:\n  hello:\n    description: lambda + s3 + rds\n    handler: handler.hello\n    events:\n      - existingS3:\n          bucket: YOUR_S3_BUCKET_NAME\n          events:\n            - s3:ObjectCreated:*\n          rules:\n            - prefix: YOUR_S3_OBJECT_PREFIX\n"]},{"id":161189509,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: batch-sqs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  profile: learner\n  region: eu-central-1\n  stage: dev\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  batchInsert:\n    handler: handler.batchInsert\n  queueProcessor:\n    handler: handler2.queueProcessor\n\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline"]},{"id":160717010,"files":["\nservice: customers-http-api\n\n# serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n\n  create:\n    handler: src/create.main\n    events:\n      - http:\n          path: customers\n          method: post\n          cors: true\n          authorize: aws_iam\n\n  get:\n    handler: src/get.main\n    events:\n      - http:\n          path: customers/{id}\n          method: get\n          cors: true\n          authorize: aws_iam\n          \n  list:\n    handler: src/list.main\n    events:\n      - http:\n          path: customers\n          method: get\n          cors: true\n          authorize: aws_iam\n\n  update:\n    handler: src/update.main\n    events:\n      - http:\n          path: customers/{id}\n          method: put\n          cors: true\n          authorize: aws_iam\n\n  delete:\n    handler: src/delete.main\n    events:\n      - http:\n          path: customers/{id}\n          method: delete\n          cors: true\n          authorize: aws_iam","\nservice: invoices-http-api\n\n# serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n\n  create:\n    handler: src/create.main\n    events:\n      - http:\n          path: invoices\n          method: post\n          cors: true\n          authorize: aws_iam\n\n  get:\n    handler: src/get.main\n    events:\n      - http:\n          path: invoices/{id}\n          method: get\n          cors: true\n          authorize: aws_iam\n          \n  list:\n    handler: src/list.main\n    events:\n      - http:\n          path: invoices\n          method: get\n          cors: true\n          authorize: aws_iam\n\n  update:\n    handler: src/update.main\n    events:\n      - http:\n          path: invoices/{id}\n          method: put\n          cors: true\n          authorize: aws_iam\n\n  delete:\n    handler: src/delete.main\n    events:\n      - http:\n          path: invoices/{id}\n          method: delete\n          cors: true\n          authorize: aws_iam"]},{"id":161212334,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rss-feed-to-amp-page # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n#plugins:\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - node_modules/**\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  feed:\n    handler: index.getFeed\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n         path: /\n         method: ANY\n      - http: 'ANY {proxy+}'\n         #cors: false\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":157645278,"files":["service: c37-cad-proxy\n\nplugins:\n  - serverless-apigw-binary\n\ncustom:\n  apigwBinary:\n    types:\n      - '*/*'\n      \nprovider:\n  name: aws\n  stage: ${opt:stage, 'dev'}\n  region: us-east-1\n  runtime: nodejs8.10\n\nfunctions:\n  function:\n    handler: config/server.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\npackage:\n  exclude:\n    - .vscode/**\n    - .gitignore\n    - package-lock.json\n    - package.json"]},{"id":160744552,"files":["service: codebuild-slacker\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    stage: dev\n    region: us-east-1\n    memorySize: 128\n    versionFunctions: false\n    cfLogs: true\npackage:\n    exclude:\n        - .npmignore\n        - fixtures/**\n        - .git/**\nfunctions:\n    event:\n        handler: handler.handle_event\n        description: Handle events from CodeBuild and send message to Slack\n        timeout: 30\n        events:\n            - cloudwatchEvent:\n                description: 'Cloudwatch Event triggered on codebuild build state change'\n                event:\n                    source:\n                        - \"aws.codebuild\"\n                enabled: true\nresources:\n    Resources:\n        EventLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n"]},{"id":159614673,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-nodecrud # NOTE: update this with your service name\napp: myapp-dev\ntenant: icecreamsandwich\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n  howdy:\n    handler: howdy.howdy\n  create:\n    handler: handler.create # point to exported create function in handler.js\n    events:\n      - http:\n          path: notes # path will be domain.name.com/dev/notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll # path will be domain.name.com/dev/notes\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n  update:\n    handler: handler.update # path will be domain.name.com/dev/notes/1\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n  delete:\n    handler: handler.delete\n    events:\n      - http:\n          path: notes/{id} # path will be domain.name.com/dev/notes/1\n          method: delete\n          cors: true         \n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":150297261,"files":["service:\n  name: Health-MX-API\n  publish: false\n\npackage:\n  exclude: ${file(./serverless/excludeFiles.yml)}\n\nplugins:\n  - serverless-appsync-plugin\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:provider.environment.STAGE}\n  region: ${self:provider.environment.REGION}\n  memorySize: 512 # in MB\n  timeout: 120 # in seconds\n  environment: ${file(./serverless/env.yml):environment}\n\nfunctions:\n  GraphqlHandler: ${file(./serverless/functions.yml):GraphqlHandler}\n  DeployedVersion: ${file(./serverless/functions.yml):DeployedVersion}\n\nresources:\n  Resources:\n    AppSyncLambdaServiceRole: ${file(./serverless/roles.yml):AppSyncLambdaServiceRole}\n    DeployedVersionServiceRole: ${file(./serverless/roles.yml):DeployedVersionServiceRole}\n    RDSSecurityGroup: ${file(./serverless/resources.yml):RDSSecurityGroup}\n    RDSInstance: ${file(./serverless/resources.yml):RDSInstance}\n    RoleTable: ${file(./serverless/tables.yml):RoleTable}\n    UserTable: ${file(./serverless/tables.yml):UserTable}\n    SessionTable: ${file(./serverless/tables.yml):SessionTable}\n\ncustom:\n  projectPrefix: ${self:provider.stage}-${self:service}\n  accountId: ${self:provider.environment.ACCOUNT_ID}\n  appSync:\n    name: ${self:custom.projectPrefix}\n    apiKey: ${self:provider.environment.API_KEY}\n    authenticationType: API_KEY\n    # userPoolConfig:\n    #   awsRegion: ${self:provider.region}\n    #   defaultAction: ALLOW\n    #   userPoolId: ${self:provider.environment.USER_POOL_CLIENT_ID}\n    mappingTemplatesLocation: app/mapping-templates\n    mappingTemplates: ${file(./serverless/mapping.autogen.yml)}\n    schema: app/global.schema.autogen.graphql\n    serviceRole: AppSyncLambdaServiceRole\n    dataSources: ${file(./serverless/appSyncDataSources.yml):dataSources}"]},{"id":159417496,"files":["service: customFass\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-1\n  stage: dev\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: src/hello.hello\n\n  apiTest:\n    handler: src/api/testEndpoint.handler\n    events:\n      - http:\n          path: /api/test\n          method: GET\n          cors: true\n\n  apiTest2:\n    handler: src/api/testEndpoint.handler2\n    events:\n      - http: GET /api/test2/{id?}\n      - http: POST /api/test2"]},{"id":159068685,"files":["service:\n  name: react-minimal-ssr-lambda\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  ssr-minimal-renderer:\n    handler: handler.render\n    memorySize: 512\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n"]},{"id":156902726,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: smartBrain-rankly-lambda # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n  stage: prod\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  rank:\n    handler: handler.rank\n    events:\n      - http:\n          path: rank\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":143044045,"files":["service: url-shortner\n\nprovider:\n name: aws\n runtime: nodejs6.10\n memorySize: 128\n timeout: 10\n stage: prod\n region: us-east-1 #region to host aws lambda\n profile: AWS_PROFILE #these takes aws cli profile from your machine\n\nfunctions:\n api:\n   handler: lambda.universal\n   events:\n     - http: ANY {proxy+}\n     - http: ANY /\n"]},{"id":156958860,"files":["service: serverless-ipsum-generator\n\nframeworkVersion: \">=1.9.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-1\n\nfunctions:\n  ipsum:\n    handler: handler.ipsum\n    events:\n      - http:\n          method: get\n          path: /"]},{"id":156247738,"files":["#service name\nservice: todos-api\n#provider aws lamda funtions\nprovider:\n  name: aws\n  runtime: nodejs8.10\n#exlude files\npackage:\n  exclude:\n    - package-lock.json\n    - test/**\n    - client/**\n\n\n#funtions details\nfunctions:\n  insertTodo:\n    handler: handler.insertTodo\n    events:\n     - http:\n         path: todo/api/v1.0/tasks\n         method: post\n         cors: true\n  getTodos:\n    handler: handler.getTodos\n    events:\n     - http:\n         path: todo/api/v1.0/tasks\n         method: get\n         cors: true\n  updateTodos:\n    handler: handler.updateTodos\n    events:\n     - http:\n         path: todo/api/v1.0/tasks/{id}\n         method: put\n         cors: true\n  deleteTodos:\n    handler: handler.deleteTodos\n    events:\n     - http:\n         path: todo/api/v1.0/tasks/{id}\n         method: delete\n         cors: true\n"]},{"id":155552049,"files":["\nservice: FXAnalyser-AWS\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ap-southeast-2\n\nfunctions:\n  caller:\n    handler: handler.caller\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":153852822,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: marmite-toast # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"s3:*\"\n    Resource:\n      Fn::Join:\n        - \"\"\n        - - \"arn:aws:s3:::\"\n          - \"Ref\": \"marmite-toast-private\"\n          - \"/*\"\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  getdata:\n    handler: handler.getdata\n    events:\n      - http:\n          path: users/getdata\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":152737387,"files":["service: siemprepe-test-api\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  secrets: ${file(secrets.json)}\n  usersTableName: 'users-table-${self:provider.stage}'\n  registrationTableName: 'registration-table-${self:provider.stage}'\n  parkingsTableName: 'parkings-table-${self:provider.stage}'\n  reservationsTableName: 'reservations-table-${self:provider.stage}'\n  dynamodb:\n    start:\n      migrate: true\n      seed: true\n    seed:\n      test:\n        sources:\n          - table: 'users-table-${self:provider.stage}'\n            sources: [./data/test-users.json]\n          - table: 'parkings-table-${self:provider.stage}'\n            sources: [./data/test-parkings.json]\n          - table: 'reservations-table-${self:provider.stage}'\n            sources: [./data/test-reservations.json]\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"UsersDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"RegistrationDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"ParkingsDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"ReservationsDynamoDBTable\", \"Arn\" ] }\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n  environment:\n    USERS_TABLE: ${self:custom.usersTableName}\n    REGISTRATION_TABLE: ${self:custom.registrationTableName}\n    PARKINGS_TABLE: ${self:custom.parkingsTableName}\n    RESERVATIONS_TABLE: ${self:custom.reservationsTableName}\n    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}\n    DEPLOY_URL: ${file(secrets.json):${opt:stage, self:provider.stage}.DEPLOY_URL}\n\nfunctions:\n  verify-token:\n    handler: auth/VerifyToken.auth\n    cors: true\n  register:\n    handler: auth/AuthHandler.handler\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n  activateRegistration:\n    handler: auth/AuthHandler.handler\n    events:\n      - http:\n          path: register/activate/{proxy+}\n          method: get\n          cors: true\n  login:\n    handler: auth/AuthHandler.handler\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n  getParkings:\n    handler: parkings/ParkingsHandler.handler\n    events:\n      - http:\n          path: parkings\n          method: get\n          cors: true\n          authorizer: verify-token\n  addParking:\n    handler: parkings/ParkingsHandler.handler\n    events:\n      - http:\n          path: parkings\n          method: post\n          cors: true\n          authorizer: verify-token\n  getReservations:\n    handler: reservations/ReservationsHandler.handler\n    events:\n      - http:\n          path: reservations/{proxy+}\n          method: get\n          cors: true\n          authorizer: verify-token\n  addReservation:\n    handler: reservations/ReservationsHandler.handler\n    events:\n      - http:\n          path: reservations\n          method: post\n          cors: true\n          authorizer: verify-token\n  deleteReservation:\n    handler: reservations/ReservationsHandler.handler\n    events:\n      - http:\n          path: reservations/{proxy+}\n          method: delete\n          cors: true\n          authorizer: verify-token\nresources:\n  Resources:\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n    GatewayResponseDefault5XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n    UsersDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.usersTableName}\n    RegistrationDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: token\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: token\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.registrationTableName}\n    ParkingsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: parkingId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: parkingId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.parkingsTableName}\n    ReservationsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: parkingId\n            AttributeType: S\n          -\n            AttributeName: reservationDate\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: parkingId\n            KeyType: HASH\n          -\n            AttributeName: reservationDate\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.reservationsTableName}\n"]},{"id":154240698,"files":["service: codebuild-slacker\n\nprovider:\n    name: aws\n    runtime: nodejs8.10\n    stage: dev\n    region: us-east-1\n    memorySize: 128\n    versionFunctions: false\n    cfLogs: true\npackage:\n    exclude:\n        - .npmignore\n        - fixtures/**\n        - .git/**\nfunctions:\n    event:\n        handler: handler.handle_event\n        description: Handle events from CodeBuild and send message to Slack\n        timeout: 30\n        events:\n            - cloudwatchEvent:\n                description: 'Cloudwatch Event triggered on codebuild build state change'\n                event:\n                    source:\n                        - \"aws.codebuild\"\n                enabled: true\nresources:\n    Resources:\n        EventLogGroup:\n            Properties:\n                RetentionInDays: \"7\"\n"]},{"id":152995373,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n  environment: \n    MY_CONST: secret_code505\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events: \n      - http: \n          path: first-endpoint\n          method: POST\n    \n  other:\n    handler: other.main\n    events:\n      - http:\n          path: users\n          method: GET\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    uploadbucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-uploadsvaca505\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":150505649,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: mascara-google-search # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  google-search-endpoint:\n    handler: src/google-search/handler.index\n    environment:\n      TOKEN: update-this-token\n    role: endopointRole\n    events:\n      - http:\n          path: mascare/google-search\n          method: post\n\n  google-search:\n    handler: src/google-search/main.index\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\nresources:\n  Resources:\n    endopointRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /\n        RoleName: endopointRole\n        ManagedPolicyArns:\n        # for invoke lambda\n        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'\n        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n              - lambda.amazonaws.com\n            Action: sts:AssumeRole\n"]},{"id":128946411,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: season-records-service\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-2\n\nplugins:\n  - serverless-offline\n\n# The `functions` block defines what code to deploy\nfunctions:\n  getCurrentSeasonRecords:\n    handler: handler.getCurrentSeasonRecords\n    events:\n      - http:\n          path: /league/current/records\n          method: get\n          cors: true\n"]},{"id":141409516,"files":["service: edge-redirect-function\nplugins:\n  - serverless-plugin-cloudfront-lambda-edge\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${self:custom.region}\n  stage: ${self:custom.stage}\n  # Note that Lambda@Edge does not actually support environment variables for lambda\n  # functions, but the plugin will strip the environment variables from any function\n  # that has edge configuration on it\n  environment:\n    SLS_SVC_NAME: ${self:service}\n    SLS_STAGE: ${self:custom.stage}\n\ncustom:\n  defaultRegion: us-east-1\n  defaultEnvironmentGroup: dev\n  region: ${opt:region, self:custom.defaultRegion}\n  stage: ${opt:stage, env:USER}\n  objectPrefix: '${self:service}-${self:custom.stage}'\n\npackage:\n  exclude:\n    - 'node_modules/**'\n\nfunctions:\n  RequestRewriter:\n    name: '${self:custom.objectPrefix}-viewer-request'\n    handler: src/handler.handler\n    memorySize: 128\n    timeout: 5\n    lambdaAtEdge:\n      distribution: 'WebsiteDistribution'\n      eventType: 'viewer-request'\n\nresources:\n  Resources:\n    WebsiteBucket:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: '${self:custom.objectPrefix}'\n        AccessControl: 'PublicRead'\n        WebsiteConfiguration:\n          IndexDocument: 'index.html'\n          ErrorDocument: 'error.html'\n    WebsiteDistribution:\n      Type: 'AWS::CloudFront::Distribution'\n      Properties:\n        DistributionConfig:\n          DefaultCacheBehavior:\n            TargetOriginId: 'WebsiteBucketOrigin'\n            ViewerProtocolPolicy: 'redirect-to-https'\n            DefaultTTL: 600 # ten minutes\n            MaxTTL: 600 # ten minutes\n            Compress: true\n            ForwardedValues:\n              QueryString: false\n              Cookies:\n                Forward: 'none'\n          DefaultRootObject: 'index.html'\n          Enabled: true\n          PriceClass: 'PriceClass_All'\n          HttpVersion: 'http2'\n          ViewerCertificate:\n            CloudFrontDefaultCertificate: true\n          Origins:\n            -\n              Id: 'WebsiteBucketOrigin'\n              DomainName: { 'Fn::GetAtt': [ 'WebsiteBucket', 'DomainName' ] }\n              S3OriginConfig: {}\n\n  Outputs:\n    CloudFrontEndpoint:\n      Value:\n        Fn::GetAtt: WebsiteDistribution.DomainName\n      Export:\n        Name: \"CFDistrib::URL\"\n      Description: Endpoint for CloudFront distribution\n"]}]