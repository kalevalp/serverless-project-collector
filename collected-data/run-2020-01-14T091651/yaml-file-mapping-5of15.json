[{"id":151049562,"files":["service: hacktoberfest2018checker\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  users:\n    handler: handler.index\n    timeout: 3\n\n    events:\n      - http:\n          path: /\n          method: GET\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                username: true\n                lng: true\n\n  locale:\n    handler: handler.locale\n    timeout: 3\n\n    events:\n      - http:\n          path: /locale/{lng}\n          method: GET\n          cors: true\n          request:\n            parameters:\n              paths:\n                lng: true\n"]},{"id":153669336,"files":["service:\n  name: s3-file-upload-api\n\nplugins:\n  - serverless-webpack\n  - serverless-apigw-binary\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: yarn\n  apigwBinary:\n    types:\n      - 'image/jpeg'\n      - 'image/png'\n  s3_bucket_name: ${self:service.name}-${self:provider.stage}\n  s3_bucket_arn:\n    Fn::Join:\n      - \"\"\n      - - \"arn:aws:s3::\"\n        - \":${self:custom.s3_bucket_name}\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'stage'}\n  profile: ${opt:profile}\n  region: us-east-1\n  environment:\n    S3_BUCKET_NAME: ${self:custom.s3_bucket_name}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:*\n      Resource:\n        - ${self:custom.s3_bucket_arn}\n        - Fn::Join:\n          - \"\"\n          - - \"arn:aws:s3::\"\n            - \":${self:custom.s3_bucket_name}/*\"\n\npackage:\n  individually: true\n\nfunctions:\n  post_file:\n    handler: handler.handler\n    events:\n      - http:\n          path: /file\n          method: post\n          authorizer: aws_iam # Remove this line to make the endpoint completely public (not recommended)\n\nresources:\n  # TODO: create an IAM user and policy for invoking the APIG endpoint\n  Resources:\n    S3BucketReceipts:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.s3_bucket_name}\n"]},{"id":140316995,"files":["service: clairy-hub\n\n##################\n## Provider\n##################\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  environment:\n    FIREBASE_DATABASE_URL:\n\n  package:\n    include:\n      - auth/**\n\n\n##################\n## Functions\n##################\n\nfunctions:\n  authorizer:\n    handler: auth/authorizer.handler\n\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: 'hello'\n          method: 'get'\n          authorizer:\n            name: authorizer\n\n\n##################\n## Plugins\n##################\n\nplugins:\n  - serverless-offline\n"]},{"id":149179887,"files":["service: tf-lambda-limit-one-entry\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  addLimitLogic:\n    handler: handler.addLimitLogic\n    environment:\n      FORM_ID: 'YOUR_FORM_ID' # Which form you want to update\n      FIELD_ID: 'YOUR_EMAIL_FIELD_ID' # Id of the unique field\n      FIELD_REF: 'YOUR_EMAIL_FIELD_REF' # Ref of the unique field\n      TF_TOKEN: 'TYPEFORM_PERSONAL_TOKEN' #Typeform API token\n      ALREADY_FILLED_FIELD_REF: 'STATEMENT_BLOCK_FIELD_REF' # Ref for the \"already filled\" statement block\n    events:\n      - http: POST addLimitLogic\n"]},{"id":144879197,"files":["---\nservice: serverless-graphql-neo4j\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, self:custom.defaultRegion}\n  deploymentBucket: ${self:service}-artefacts-${self:provider.region}\n  environment:\n    # for mapping prod config to env_var when deploy the service\n    NEO4J_URI: ${env:NEO4J_URI_PROD}\n    NEO4J_USER: ${env:NEO4J_USER_PROD}\n    NEO4J_PASSWORD: ${env:NEO4J_PASSWORD_PROD}\n\nfunctions:\n  graphql:\n    handler: src/server.default\n    memorySize: 256\n    events:\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: post\n          cors: true\n      - http:\n          path: ${self:provider.stage}/graphql\n          method: get\n          cors: true\n\nplugins:\n  - serverless-plugin-create-deployment-bucket\n  - serverless-dotenv-plugin  # for loading .env in local dev\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  defaultRegion: 'eu-west-1'\n  webpack:\n    packager: 'yarn'\n    includeModules: true\n"]},{"id":147900678,"files":["service: jira-slack-reminder\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  environment: ${file(./env.json)}\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      # Invoke Lambda function every day at 1700 UTC\n      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n      - schedule: cron(0 17 ? * MON-FRI *)"]},{"id":149415146,"files":["service: serverless-node-mailer\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  profile: default\n  runtime: nodejs6.10\n  stage: prod\n  region: us-east-1\n  deploymentBucket:\n    # name: \n    serverSideEncryption: AES256 # when using server-side encryption\n\n# The `functions` block defines what code to deploy\nfunctions:\n  notifier:\n    handler: handler.notifier\n    # The `events` block defines how to trigger the handler.helloWorld code\n    # events:\n    #   - http:\n    #       path: hello-world\n    #       method: post\n    #       cors: true\nplugins:\n  - serverless-offline\n"]},{"id":124128442,"files":["# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\nservice: buefy-shop-serverless\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-prune-plugin\n\n# Configuration variables\ncustom:\n  secrets: ${file(secrets.json)}\n  prune:\n    automatic: true\n    number: 3\n  webpack:\n    includeModules: true\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  environment:\n    STRIPE_SECRET_KEY: ${self:custom.secrets.stripeSecretKey}\n\n# The `functions` block defines what code to deploy\nfunctions:\n  createCharge:\n    handler: functions/createCharge/createCharge.handler\n    # The `events` block defines how to trigger the handler.createCharge code\n    events:\n      - http:\n          path: charges\n          method: post\n          cors: true\n"]},{"id":146322895,"files":["service: lambda-starter-kit\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 60\n  region: eu-west-1\npackage:\n  artifact: ./package.zip\nfunctions:\n  kinesisTestGET:\n    events:\n      - http:\n          method: get\n          path: /kinesisTest\n      - stream:\n          type: kinesis\n          arn:\n            'Fn::GetAtt':\n              - LambdaStarterKitKinesisStream\n              - Arn\n    handler: src/functions/kinesisTest/index.get\n  testGET:\n    environment:\n      NODE_ENV: production\n      DEBUG: true\n    events:\n      - http:\n          method: get\n          path: /test\n    handler: src/functions/test/index.get\n  testPOST:\n    environment:\n      NODE_ENV: production\n      DEBUG: true\n    events:\n      - http:\n          cors: true\n          method: post\n          path: /test\n    handler: src/functions/test/index.post\nresources:\n  Resources:\n    LambdaStarterKitKinesisStream:\n      Type: 'AWS::Kinesis::Stream'\n      Properties:\n        Name: LambdaStarterKitKinesisStream\n        ShardCount: 1\n    CWtoKinesisSubscription:\n      Type: 'AWS::Logs::SubscriptionFilter'\n      Properties:\n        DestinationArn:\n          'Fn::GetAtt':\n            - LambdaStarterKitKinesisStream\n            - Arn\n        LogGroupName:\n          Ref: TestGETLogGroup\n        FilterPattern: '[...]'\n        RoleArn:\n          'Fn::GetAtt':\n            - CWLogsToKinesisRole\n            - Arn\n    CWLogsToKinesisRole:\n      Type: 'AWS::IAM::Role'\n      Properties:\n        RoleName: LambdaStarterKitCWLogsToKinesisRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - logs.amazonaws.com\n              Action:\n                - 'sts:AssumeRole'\n        Policies:\n          - PolicyName: CWLogsToKinesisRolePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - 'kinesis:PutRecords'\n                    - 'kinesis:PutRecord'\n                  Resource:\n                    'Fn::GetAtt':\n                      - LambdaStarterKitKinesisStream\n                      - Arn\n","import path from 'path';\nimport yaml from 'js-yaml';\nimport packageJson from '../../package.json';\nimport { readFile, writeFile } from '../../src/common/utils';\nimport { getFunctionsConfig } from './getFunctionsConfig';\n\nconst cwd = process.cwd();\n\nconst configureProvider = async (config) => {\n  const providerConfigRaw = await readFile(\n    path.join(cwd, 'config/provider.yml'),\n    'utf8'\n  );\n  const providerConfig = yaml.safeLoad(providerConfigRaw);\n\n  return {\n    ...config,\n    ...providerConfig,\n    provider: {\n      ...providerConfig.provider,\n      region: process.env.AWS_REGION\n    }\n  };\n};\n\nconst configureFunctions = async (config) => {\n  const functionsConfig = await getFunctionsConfig();\n\n  return {\n    ...config,\n    functions: functionsConfig\n  };\n};\n\nconst configureResources = async (config) => {\n  const resourcesConfigRaw = await readFile(\n    path.join(cwd, 'config/resources.yml'),\n    'utf8'\n  );\n\n  if (resourcesConfigRaw.trim()) {\n    const resourcesConfig = yaml.safeLoad(resourcesConfigRaw || '');\n    return {\n      ...config,\n      resources: resourcesConfig\n    };\n  }\n  return config;\n};\n\nconst configureServerlessYml = async (config) => {\n  return [\n    configureProvider,\n    configureFunctions,\n    configureResources\n  ].reduce(async (nwConfig, func) => {\n    const newConfig = await nwConfig;\n    return func(newConfig);\n  }, config);\n};\n\nexport const generateServerlessConfig = async () => {\n  const compiledServerlessYml = await configureServerlessYml({\n    service: packageJson.name\n  });\n\n  await writeFile(\n    path.join(cwd, 'serverless.yml'),\n    yaml.safeDump(JSON.parse(JSON.stringify(compiledServerlessYml)))\n  );\n};\n"]},{"id":121924475,"files":["service: serverless-workshop\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  saveEmail:\n    handler: handler.saveEmail\n    events:\n      - http:\n            path: saveEmail/{email}\n            method: get\n            cors: true\n            paths:\n                email: true\n\nresources:\n  Resources:\n    SlsWorkshopTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: email\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":140828959,"files":["service: CompanyXServiceName\n\nplugins:\n  - serverless-domain-manager\n  - serverless-jest-plugin\n  - serverless-offline # serverless-offline needs to be last in the list\n\npackage:\n  exclude:\n    - __tests__/**\n    - scripts/**\n    - .git/**\n    - env.yml\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  domains:\n    prod: ''\n    stage: ''\n    dev: ''\n    local: localhost\n  versions-prod: true\n  versions-default: false\n  customDomain:\n    domainName: ${self:custom.domains.${self:custom.stage}}\n    basePath: 'CompanyXServiceName'\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n  serverless-offline:\n    resourceRoutes: true\n    port: 4000\n  jest:\n    collectCoverage: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  variableSyntax: \"\\\\${((?!AWS)[ ~:a-zA-Z0-9._'\\\",\\\\-\\\\/\\\\(\\\\)]+?)}\"\n  stage: ${self:custom.stage}\n  environment: ${file(./env.yml):${self:custom.stage}}\n  region: ${file(./env.yml):${self:custom.stage}.REGION}\n  versionFunctions: ${self:custom.versions-${self:custom.stage}, self:custom.versions-default}\n  # uncomment if you want to use ssm as your key storage\n  #iamRoleStatements:\n  #  - Effect: 'Allow'\n  #    Action: 'ssm:GetParameters'\n  #    Resource:\n  #      - 'Fn::Sub': 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'\n  #  - Effect: 'Allow'\n  #    Action: 'kms:Decrypt'\n  #    Resource:\n        - 'Fn::Sub': 'arn:aws:kms:us-east-1:${AWS::AccountId}:key/<your-kms-key>'\n\nfunctions:\n  yourfunc:\n    handler: handlers.yourfunc\n    description: Test function for your service\n    events:\n      - http:\n          path: ''\n          method: get\n          cors:\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n          # uncomment if you want a cognito authorizer\n          # authorizer:\n          #  name: authorizer\n          #  arn: ${file(./env.yml):${self:custom.stage}.COGNITO_POOL_ARN}\n"]},{"id":129971218,"files":["service: cloud-slacker\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\nplugins:\n  - serverless-mocha-plugin\nfunctions:\n  code-build:\n    handler: handlers/code-build.notify\n    environment:\n      slack_url: ${opt:slack_url}\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - \"aws.codebuild\"\n            detail-type:\n              - \"CodeBuild Build State Change\"\n            detail:\n              build-status:\n                - 'IN_PROGRESS'\n                - 'SUCCEEDED'\n                - 'FAILED'\n                - 'STOPPED'\n"]},{"id":147780089,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: example-invoke-deployment # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  region: ap-southeast-1\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    invokeAfterDeploy: true\n\n  hello2:\n    handler: handler.hello\n    invokeAfterDeploy:\n      enabled: true\n      payload:\n        varA : varA\n        varB : 20\n        varObject:\n          object1 : a\n          object2 : 1\n        varArray:\n          - a\n          - b\n\n  hello3:\n    handler: handler.hello\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n\n\nplugins:\n  - serverless-plugin-invoke-deployment"]},{"id":143137944,"files":["service: sls-rekognition-compare-base64 \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-northeast-1 # Nearest AZ to offer rekognition is Tokyo  \n  deploymentBucket: my-serverless-projects-ap-northeast-1  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-northeast-1:*:*:*\"  \n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"             \n\nfunctions:\n  compareFacesBase64:\n    handler: handler.compareFacesBase64\n    events:\n    - http:\n        path: compare-faces-base64\n        method: post    ","service: sls-download-base64-from-s3\n\ncustom:\n  bucket: my-serverless-projects/test-content\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  downloadBase64Content:\n    handler: handler.downloadBase64Content\n    environment:\n      BUCKET: ${self:custom.bucket}    \n    events:\n    - http:\n        path: download-base64-content-from-s3/{filename}\n        method: get   \n\n","service: sls-http-endpoints-mocha\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true      \n  login:\n    handler: src/handler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true                ","service: sls-http-endpoints\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n\nfunctions:\n  queryString:\n    handler: handler.queryString\n    events:\n      - http:\n          path: query-string\n          method: get\n          cors: true\n  pathParameters:\n    handler: handler.pathParameters\n    events:\n      - http:\n          path: path-parameters/{id}\n          method: get\n          cors: true \n  multiPathParameters:\n    handler: handler.multiPathParameters\n    events:\n      - http:\n          path: multipath-parameters/{id1}/{id2}\n          method: get\n          cors: true                    \n  postRequest:\n    handler: handler.postRequest\n    events:\n      - http:\n          path: post-request\n          method: post    \n          cors: true            ","service: sls-rekognition-compare-faces \n\ncustom:\n  bucket: ap-northeast-1-test-content\n  sourceImage: margot-1.jpg\n  targetImage: margot-2.jpg\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-northeast-1 # Nearest AZ to offer rekognition is Tokyo  \n  deploymentBucket: my-serverless-projects-ap-northeast-1  \n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-northeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\" \n    - Effect: \"Allow\"\n      Action:\n        - \"rekognition:*\"\n      Resource: \"*\"             \n\nfunctions:\n  compareFaces:\n    handler: handler.compareFaces\n    environment:\n      BUCKET: ${self:custom.bucket}    \n      SOURCE_IMAGE: ${self:custom.sourceImage}\n      TARGET_IMAGE: ${self:custom.targetImage}\n","service: sls-upload-to-s3\n\ncustom:\n  bucket: my-serverless-projects/test-content\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-1  \n  deploymentBucket: my-serverless-projects\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync        \n      Resource: \"arn:aws:lambda:ap-southeast-1:*:*:*\"  \n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  uploadToS3:\n    handler: handler.uploadToS3\n    environment:\n      BUCKET: ${self:custom.bucket}    \n    events:\n    - http:\n        path: upload-to-s3\n        method: post\n"]},{"id":132762497,"files":["service: geolocation-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 256\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'lambda:InvokeFunction'\n      Resource:\n      - Fn::Join:\n        - ':'\n        - - arn:aws:lambda\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - function:${self:service}-${opt:stage, self:provider.stage}-*\n\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-plugin-warmup\n\nfunctions:\n  fetchLocationData:\n    handler: handler.fetchLocationData\n    warmup: true\n    events:\n      - http:\n          path: location\n          method: get\n          cors: true"]},{"id":113948856,"files":["service: imageService\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 512\n  timeout: 10\n  stage: dev\n  region: ap-southeast-2\n\n  iamRoleStatements:\n   - Effect: Allow\n     Action:\n       - s3:*\n     Resource: \"*\"\n   - Effect: \"Allow\"\n     Action:\n       - \"rekognition:*\"\n     Resource: \"*\"\n\nfunctions:\n  images:\n    handler: handler.images\n    events:\n      - http:\n          integration: lambda\n          path: images\n          cors: true\n          method: get\n  getFaces:\n    handler: handler.getFaces\n    events:\n      - http:\n          integration: lambda\n          path: getFaces\n          method: get\n          cors: true"]},{"id":145272739,"files":["service: sls-meetup-alexa-skill\n\nplugins:\n  - serverless-alexa-skills\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    MEETUP_API_KEY: ${env:MEETUP_API_KEY}\n\ncustom:\n  alexa:\n    vendorId: ${env:AMAZON_VENDOR_ID}\n    clientId: ${env:AMAZON_CLIENT_ID}\n    clientSecret: ${env:AMAZON_CLIENT_SECRET}\n    localServerPort: 9000\n    skills:\n      - id: <YOUR_SKILL_ID_HERE>\n        manifest:\n          publishingInformation:\n            locales:\n              en-US:\n                name: MeetupEvents\n          apis:\n            custom:\n              endpoint:\n                uri: <YOUR_LAMBDA_FUNCTION_ARB_HERE>\n          manifestVersion: '1.0'\n        models:\n          en-US:\n            interactionModel:\n              languageModel:\n                invocationName: meetup events\n                intents:\n                  - name: MeetupIntent\n                    samples:\n                    - 'my events'\n                    - 'my meetup events'\n                    - 'anything interesting in my meetup'\n                    - 'give me all my meetup events'\n                  - name: AMAZON.HelpIntent\n                    samples: []\n                  - name: AMAZON.CancelIntent\n                    samples: []\n                  - name: AMAZON.StopIntent\n                    samples: []\n\nfunctions:\n  meetupHandler:\n    handler: index.meetupHandler\n    events:\n      - alexaSkill: <YOUR_SKILL_ID_HERE>\n"]},{"id":95858966,"files":["service: let-me-in\n\ncustom:\n  LMI_NAME: \"<<name>>\"\n  SG_ID: \"<<security group ID>>\"\n  TOPIC_NAME: \"lmi-notifications\"\n  EMAIL: \"<<email address to receive notifications about added/removed SG rules>>\"\n  TABLE_NAME: \"lmi-rule\"\n  MINS_TO_LIVE_CAP: 30 # hard limit on max time a rule is allowed to stay alive (value in minutes)\n  # USER_POOL_NAME: 'lmi-users'\n  USER_POOL_ARN: '<<plug here your pool ARN>>'\n  BUCKET_NAME: '<<unique bucket name>>'\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-2\n  stage: dev\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action: 'SNS:Publish'\n      Resource:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - ${self:custom.TOPIC_NAME}\n    - Effect: 'Allow'\n      Action: 'ec2:DescribeSecurityGroups'\n      Resource: '*'\n    - Effect: 'Allow'\n      Action:\n        - 'ec2:AuthorizeSecurityGroupIngress'\n        - 'ec2:RevokeSecurityGroupIngress'\n      Resource:\n        Fn::Join:\n          - ''\n          - - Fn::Join:\n              - ':'\n              - - 'arn:aws:ec2'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - 'security-group/'\n            - ${self:custom.SG_ID}\n    - Effect: 'Allow'\n      Action:\n        - 'dynamodb:Scan'\n        - 'dynamodb:GetItem'\n        - 'dynamodb:GetRecords'\n        - 'dynamodb:GetShardIterator'\n        - 'dynamodb:DescribeStream'\n        - 'dynamodb:ListStreams'\n        - 'dynamodb:PutItem'\n        - 'dynamodb:DeleteItem'\n      Resource:\n        Fn::Join:\n          - ''\n          - - Fn::Join:\n              - ':'\n              - - 'arn:aws:dynamodb'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - 'table/'\n            - ${self:custom.TABLE_NAME}\n\npackage:\n  exclude:\n    - tests/**\n\nfunctions:\n  lmi_apighandler:\n    handler: apighandler.handler\n    environment:\n      LMI_NAME: ${self:custom.LMI_NAME}\n      SG_ID: ${self:custom.SG_ID}\n      TABLE_NAME: ${self:custom.TABLE_NAME}\n      MINS_TO_LIVE_CAP: ${self:custom.MINS_TO_LIVE_CAP}\n    events:\n      - http:\n          path: lmi\n          method: post\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"minutesToLive\": $inputRoot.minutesToLive,\n                  \"rule\": {\n                    \"ip\": \"$inputRoot.ip\",\n                    \"ports\": [\n                #foreach($p in $inputRoot.ports)\n                      { \"from\": $p.from, \"to\": $p.to }#if($foreach.hasNext),#end\n                #end\n                    ]\n                  }\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n              # NOT SUPPORTED\n              # Fn::GetAtt:\n              #   - CognitoUserPool\n              #   - Arn\n            claims:\n              - email\n              - sub\n      - http:\n          path: lmi\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"action\": \"get-rules\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n      - http:\n          path: lmi\n          method: delete\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"action\": \"delete-rule\",\n                  \"ruleId\": \"$input.params('ruleId')\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n      - http:\n          path: updateIp\n          method: post\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: >\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"sourceIp\": \"$context.identity.sourceIp\",\n                  \"userId\": \"$context.authorizer.claims.email\",\n                  \"newIp\": \"$inputRoot.newIp\"\n                }\n          authorizer:\n            name: authorizer\n            arn: ${self:custom.USER_POOL_ARN}\n            claims:\n              - email\n              - sub\n\n  lmi_ddbhandler:\n    handler: ddbhandler.handler\n    environment:\n      LMI_NAME: ${self:custom.LMI_NAME}\n      TOPIC_ARN:\n        Fn::Join:\n          - ':'\n          - - 'arn:aws:sns'\n            - Ref: 'AWS::Region'\n            - Ref: 'AWS::AccountId'\n            - ${self:custom.TOPIC_NAME}\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - DdbRuleTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    SnsTopic:\n      Type: \"AWS::SNS::Topic\"\n      Properties:\n        TopicName: ${self:custom.TOPIC_NAME}\n        Subscription:\n          - Endpoint: ${self:custom.EMAIL}\n            Protocol: email\n    DdbRuleTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:custom.TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: user_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: user_id\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: expiry\n          Enabled: true\n    # COMMENTED OUT BECAUSE DUE TO SUPPORT LIMITATIONS I CREATED THE POOL BEFORE DEPLOYING THE PROJECT\n    # CognitoUserPool:\n    #   Type: \"AWS::Cognito::UserPool\"\n    #   Properties:\n    #     UserPoolName: ${self:custom.USER_POOL_NAME}\n    #     AdminCreateUserConfig:\n    #       AllowAdminCreateUserOnly: true\n    #     AutoVerifiedAttributes:\n    #       - email\n    # CognitoAppClient:\n    #   Type: \"AWS::Cognito::UserPoolClient\"\n    #   Properties:\n    #     ClientName: react\n    #     GenerateSecret: false\n    #     UserPoolId:\n    #       Ref: CognitoUserPool\n    S3BucketForStaticWebsite:\n        Type: \"AWS::S3::Bucket\"\n        Properties:\n          BucketName: ${self:custom.BUCKET_NAME}\n          AccessControl: PublicRead\n          WebsiteConfiguration:\n            IndexDocument: \"index.html\"\n            ErrorDocument: \"error.html\"\n  Outputs:\n    ReactAppBucketName:\n      Value:\n        Ref: S3BucketForStaticWebsite\n      Description: \"Name of S3 bucket to host React web app\"\n    ReactAppUrl:\n      Value:\n        Fn::GetAtt:\n          - S3BucketForStaticWebsite\n          - WebsiteURL\n      Description: \"React web app URL\""]},{"id":143526638,"files":["service: ${env:SERVICE_NAME, \"chatops-webhook-proxy\"}\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: ${opt:region, env:AWS_REGION, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n      SSM_PREFIX: ${env:SSM_PREFIX, \"/service/chatops-webhook-proxy/default/\"}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ssm:GetParameters\"\n        - \"ssm:GetParametersByPath\"\n      Resource:\n        - Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:ssm:\"\n            - Ref: 'AWS::Region'\n            - \":\"\n            - Ref: 'AWS::AccountId'\n            - \":parameter${self:provider.environment.SSM_PREFIX}\"\n        - Fn::Join:\n          - \"\"\n          -\n            - \"arn:aws:ssm:\"\n            - Ref: 'AWS::Region'\n            - \":\"\n            - Ref: 'AWS::AccountId'\n            - \":parameter${self:provider.environment.SSM_PREFIX}*\"\n\nfunctions:\n  webhook:\n    handler: index.webhook\n    events:\n      - http:\n          path: webhook/{serviceName}\n          method: any\n          request:\n            parameters:\n              paths:\n                serviceName: true\n","---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Cloudformation stack to manage permission to deploy a serverless service'\n\nParameters:\n  ServiceName:\n    Description: Name of the Service you want to deploy\n    Type: String\n\nResources:\n  ServerlessDeployBot:\n    Type: AWS::IAM::User\n    Properties:\n      ManagedPolicyArns:\n      - !Ref ServelessDeployCFPolicy\n      - !Ref ServelessDeployS3Policy\n      - !Ref ServelessDeployLogsPolicy\n      - !Ref ServelessDeployIAMPolicy\n      - !Ref ServelessDeployLambdaPolicy\n\n  ServerlessDeployBotAccessKey:\n    Type: AWS::IAM::AccessKey\n    Properties:\n      UserName: !Ref ServerlessDeployBot\n\n  ServelessDeployCFPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action: 'cloudformation:ValidateTemplate'\n            Resource: '*'\n\n          - Effect: Allow\n            Action:\n            - 'cloudformation:Describe*'\n            - 'cloudformation:List*'\n            - 'cloudformation:Get*'\n            - 'cloudformation:PreviewStackUpdate'\n            - 'cloudformation:CreateStack'\n            - 'cloudformation:UpdateStack'\n            Resource:\n            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ServiceName}-*'\n\n  ServelessDeployS3Policy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 's3:Get*'\n            - 's3:List*'\n            Resource:\n            - !Sub 'arn:aws:s3:::${ServiceName}-*'\n\n          - Effect: Allow\n            Action:\n            - 's3:*'\n            Resource:\n            - !Sub 'arn:aws:s3:::${ServiceName}-*/*'\n\n  ServelessDeployLogsPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'logs:DescribeLogGroups'\n            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:*'\n\n          - Effect: Allow\n            Action:\n            - 'logs:CreateLogGroup'\n            - 'logs:CreateLogStream'\n            - 'logs:DeleteLogGroup'\n            - 'logs:DeleteLogStream'\n            - 'logs:DescribeLogStreams'\n            - 'logs:FilterLogEvents'\n            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*'\n\n  ServelessDeployIAMPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'iam:GetRole'\n            - 'iam:PassRole'\n            - 'iam:CreateRole'\n            - 'iam:DeleteRole'\n            - 'iam:DetachRolePolicy'\n            - 'iam:PutRolePolicy'\n            - 'iam:AttachRolePolicy'\n            - 'iam:DeleteRolePolicy'\n            Resource:\n            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-*-lambdaRole'\n\n  ServelessDeployLambdaPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n            - 'apigateway:GET'\n            - 'apigateway:POST'\n            - 'apigateway:PUT'\n            - 'apigateway:DELETE'\n            Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis'\n\n          - Effect: Allow\n            Action:\n            - 'apigateway:GET'\n            - 'apigateway:POST'\n            - 'apigateway:PUT'\n            - 'apigateway:DELETE'\n            Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/*'\n\n          - Effect: Allow\n            Action:\n            - 'lambda:*'\n            Resource:\n            - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ServiceName}-*'\n\n          - Effect: Allow\n            Action:\n            - 'ec2:DescribeSecurityGroups'\n            - 'ec2:DescribeSubnets'\n            - 'ec2:DescribeVpcs'\n            Resource: '*'\n\n          - Effect: Allow\n            Action:\n            - 'events:Put*'\n            - 'events:Remove*'\n            - 'events:Delete*'\n            - 'events:Describe*'\n            Resource:\n            - !Sub 'arn:aws:events::${AWS::AccountId}:rule/${ServiceName}-*'\n\nOutputs:\n  ServerlessDeployBotAccessKey:\n    Value: !Ref ServerlessDeployBotAccessKey\n    Export:\n      Name: !Sub '${AWS::StackName}-ServerlessDeployBotAccessKey'\n\n"]},{"id":144018618,"files":["service: serverless-vandium-demo\nprovider:\n  name: aws\n  runtime: nodejs8.10\nfunctions:\n  user:\n    handler: src/index.user\n    events:\n      - http:\n          path: user\n          method: get\n          cors: true\n      - http:\n          path: user/{id}\n          method: get\n          cors: true\n      - http:\n          path: user\n          method: post\n          cors: true"]},{"id":141306071,"files":["\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: AWSLambdaPostgresConnection\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs8.10 # Choose development environment according to your taste between C#, Node.js, Python, Go and Java8\n  stage: dev # Choose stage for development or production.\n  region: rds_region # Choose specific AWS region for lambda function where the other AWS service instance resides.\n  environment: # Add DB Configuration values as environment variables.\n    DB_USER: \"db_name\"\n    DB_PASSWORD: \"db_password\"\n    DB_NAME: \"db_name\"\n    DB_HOST: \"db_rds_host_name\"\n    DB_PORT: 5432\n    DB_MAX_CONNECTIONS: 10\n    DB_IDLE_TIMEOUT: 300000\n    DB_CONNECTION_TIMEOUT: 1000\n  vpc: # Add security group and subnets configured for RDS instance on AWS Console.\n    securityGroupIds:\n      - sg-xxxxxx\n    subnetIds:\n      - subnet-xxxxxx\n      - subnet-xxxxxx\n\nfunctions:\n  connectWithPostgres:\n    handler: app.connectWithPostgres # Add name of the Lambda function\n    iamRoleStatements:\n      - Effect: Allow\n        Resource: \"*\"\n        Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DetachNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n    events: # events trigger lambda functions\n      - http: # this is an API Gateway HTTP event trigger\n          path: /user_count\n          method: get\n          cors: true\n"]},{"id":134438311,"files":["service: lessons-of-hn-telegram-bot\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    BOT_API_KEY: ${file(./env.json):BOT_API_KEY}\n    CHANNEL_ID: ${file(./env.json):CHANNEL_ID}\n    API_KEY: ${file(./env.json):FIREBASE.apiKey}\n    AUTH_DOMAIN: ${file(./env.json):FIREBASE.authDomain}\n    DATABASE_URL: ${file(./env.json):FIREBASE.databaseURL}\n    PROJECT_ID: ${file(./env.json):FIREBASE.projectId}\n    STORAGE_BUCKET: ${file(./env.json):FIREBASE.storageBucket}\n    MESSAGING_SENDER_ID: ${file(./env.json):FIREBASE.messagingSenderId}\n\nfunctions:\n  cron:\n    handler: handler.run\n    description: Cron job that runs every Sunday at 10 am UTC\n    events:\n      - schedule: cron(0 10 ? * SUN *)"]},{"id":140923308,"files":["app: memopad\ntenant: holnet1026\nservice: memopad-api # NOTE: update this with your service name\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n#  - serverless-apigw-binary\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment: \n    NODE_ENV: ${opt:stage}\nfunctions:\n  app:\n    handler: src/serverless.handler \n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    cors:\n      origin: '*' \n      \n"]},{"id":141798940,"files":["service: api-with-auth\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  environment:\n    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}\n    DB: ${self:custom.secrets.DB}\n\nfunctions:\n  verify-token:\n    handler: auth/VerifyToken.auth\n\n  login:\n    handler: auth/AuthHandler.login\n    events:\n      - http:\n          path: login\n          method: post\n          cors: true\n\n  register:\n    handler: auth/AuthHandler.register\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n\n  me:\n    handler: auth/AuthHandler.me\n    events:\n      - http:\n          path: me\n          method: get\n          cors: true\n          authorizer: verify-token\n\nplugins:\n  - serverless-offline"]},{"id":87992774,"files":["service: nib-batman \n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    GITHUB_SECRET: ${env:GITHUB_SECRET}\n    BRANCH_KEY: slice\n\n  region: ap-southeast-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"*\"\n      Resource: \"*\"\n\nfunctions:\n  cleanupStacks:\n    handler: handler.cleanupStacks\n    timeout: 45\n    events:\n      - schedule: rate(1 day)\n  cleanupBranch:\n    handler: branch.delete\n    timeout: 45\n    events:\n      - http:\n          path: branch/delete\n          method: post\n  dryRun:\n    handler: dryRun.test\n    timeout: 45\n    events:\n      - http: \n          path: dryRun\n          method: get\n\nresources: \n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Batman\n        AttributeDefinitions:\n          - AttributeName: Date\n            AttributeType: S\n          - AttributeName: StackName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: StackName\n            KeyType: HASH\n          - AttributeName: Date\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":84700389,"files":["# Welcome to Serverless!\n\nservice: serverless-slack-memebot # NOTE: update this with your service name\n\nframeworkVersion: \">1.8.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  timeout: 20\n\nplugins:\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n # include:\n #   - include-me.js\n #   - include-me-dir/**\n exclude:\n   - src/**\n   - package-lock.json\n\nfunctions:\n  # Handler for our /memebot command\n  memebot_slash_command:\n    handler: dist/functions/memebot_slash_command.handler\n    events:\n     - http:\n         path: memebot\n         method: post\n"]},{"id":140273460,"files":["service: s3-cp-lambda\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:PutBucketNotification\"\n    - \"s3:ListBucket\"\n    Resource: \"arn:aws:s3:::${opt:sourcebucket}\"\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:GetObject\"\n    Resource: \"arn:aws:s3:::${opt:sourcebucket}/*\"\n  - Effect: \"Allow\"\n    Action:\n    - \"s3:PutObject\"\n    Resource: \"*\"\n\nplugins:\n - serverless-plugin-existing-s3\n\nfunctions:\n  s3-cp:\n    handler: s3-cp.handler\n    environment:\n      DEST_BUCKETS: ${opt:destbuckets}\n    events:\n    - existingS3:\n        bucket: ${opt:sourcebucket}\n        events:\n        - s3:ObjectCreated:*\n        rules:\n        - prefix: \"${opt:prefix}\"\n    \n\n"]},{"id":140075019,"files":["service: svg-to-png-serverless\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 1536\n  timeout: 180\n\nfunctions:\n  convertToPng:\n    handler: index.handler\n    environment:\n      DEBUG: '0'\n    events:\n      - http:\n          path: /convert-to-png\n          method: post\n          cors: true\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package"]},{"id":139649748,"files":["service: express-serverless-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: v1\n  region: us-east-1\n  timeout: 30\n  memorySize: 512\n  package:\n    excludeDevDependencies: true\n    exclude:\n      - .git/**\n      - .vscode/**\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline      \n"]},{"id":138886608,"files":["service: go-til\n\nprovider:\n  name: aws\n  runtime: go1.x\n  region: eu-central-1\n  memorySize: 512\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:eu-central-1:*:table/tils\"\n\nresources:\n  Resources:\n    TilDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: 'tils'\n\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\nfunctions:\n  insert:\n    handler: bin/insert\n    description: Insert new til\n    events:\n      - http:\n          path: tils\n          method: post\n          authorizer: aws_iam\n  remove:\n    handler: bin/remove\n    description: Remove til\n    events:\n      - http:\n          path: tils/{id}\n          method: delete\n          authorizer: aws_iam\n  list:\n    handler: bin/list\n    description: List tils by user id\n    events:\n      - http:\n          path: tils\n          method: get\n          authorizer: aws_iam"]},{"id":136742044,"files":["service: express-sls-app-with-stitch\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n\nfunctions:\n  app:\n    handler: server.run\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n\nplugins:\n  - serverless-offline"]},{"id":115739034,"files":["# Serverless deployment config\nservice: fingperint-ninja\n\n# Bundle our handlers with webpack for ES6 support\nplugins:\n  - serverless-webpack\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: false\n    packager: 'npm'\n\n# AWS env variables\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource: 'arn:aws:dynamodb:eu-west-2:859976271487:table/fingerprint-ninja'\n\n# Function scaffolding\nfunctions:\n  fp:\n    handler: fp.submit\n    events:\n      - http:\n          path: submit\n          method: post\n          cors:\n            origin: 'https://fingerprint.ninja'\n            # `*` wildcard for 'Access-Control-Allow-Headers' unsupported by some common browsers\n            # headers:\n            #   - '*'\n            allowCredentials: false\n"]},{"id":138597845,"files":["service: sls-api-stitch\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  timeout: 10\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: eu-central-1\n  environment: \n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    DB: ${self:custom.secrets.DB}\n    APP_ID: ${self:custom.secrets.APP_ID}\n\nfunctions:\n  create:\n    handler: handler.create\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n  getOne:\n    handler: handler.getOne\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n  getAll:\n    handler: handler.getAll\n    events:\n     - http:\n         path: notes\n         method: get\n         cors: true\n  update:\n    handler: handler.update\n    events:\n     - http:\n         path: notes/{id}\n         method: put\n         cors: true\n  delete:\n    handler: handler.delete\n    events:\n     - http:\n         path: notes/{id}\n         method: delete\n         cors: true\n\nplugins:\n- serverless-offline"]},{"id":138509190,"files":["service: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  awsToTgNotifier:\n    handler: src/functions/awsToTgNotifier\n    name: AwsToTgNotifier\n    description: Aggregate info about AWS services availability and push notifications to Telegram\n    memorySize: 128\n    timeout: 60\n"]},{"id":137862671,"files":["service: contact-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  # Set the AWS region to your preference, this is set to London.\n  region: eu-west-2\n\n# Add the required plugins\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\n# Function (lambda) we want to trigger\nfunctions:\n  # Important this and the below 'handler:' are the same as the handler.js exported method\n  contact:\n    handler: handler.contact\n    # This will be triggered on a post, 'http://some_awsurl/contact'\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true"]},{"id":137323302,"files":["service: shopify-webhook-api\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${env:stage}\n  region: ${env:region}\n  accountId: ${env:accountId}\n  stackTags:\n      project: \"Shopify Webhook API\"\n      name: \"ShopifyWebhookAPI\"\n  versionFunctions: false\n  cfLogs: true\n  environment:    \n    region: ${env:region}\n    stage: ${env:stage}\n    logLevel: ${env:logLevel}   \n    shopifySecret: ${env:shopifySecret}\nfunctions:\n  webhook-api:\n    handler: api.handler\n    name: api-${self:provider.stage}\n    description: The API used by the Shopify Webhook\n    memorySize: 128\n    timeout: 30\n    events:      \n      - http:\n          path: webhook-api\n          method: post\n          integration: lambda-proxy"]},{"id":130147719,"files":["service: wonderq\nplugins:\n  - serverless-webpack\n  - serverless-finch\ncustom:\n  webpackIncludeModules: true\n  client:\n    bucketName: quick-start-dev-serverlessdeploymentbucket-ntikgcvze067\n\nprovider:\n  name: aws\n  vpc:\n   securityGroupIds:\n     - sg-2547fb43\n   subnetIds:\n     - subnet-4814e13e\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n  environment:\n    REDIS_HOST: wonderq.bewcvz.ng.0001.use1.cache.amazonaws.com\n    REDIS_PORT: '6379'\n\nfunctions:\n  init:\n      handler: handler.init\n      events:\n        - http:\n            path: /init\n            method: post\n            cors: true\n  listQueues:\n    handler: handler.listQueues\n    events:\n      - http:\n          path: /queues\n          method: get\n          cors: true\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: /messages/send\n          method: post\n          cors: true\n  receiveMessage:\n      handler: handler.receiveMessage\n      events:\n        - http:\n            path: /messages/receive\n            method: get\n            cors: true\n  deleteMessage:\n    handler: handler.deleteMessage\n    events:\n      - http:\n          path: /messages/delete\n          method: post\n          cors: true\n  getInfo:\n    handler: handler.getInfo\n    events:\n      - http:\n          path: /info\n          method: get\n          cors: true\n"]},{"id":136851450,"files":["\n\nservice: contact-form\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\nfunctions:\n  app:\n    handler: handler.form\n    events:\n        - http: ANY /\n        - http: 'ANY {proxy+}'\n\n\n\nplugins:\n  - serverless-offline"]},{"id":135507019,"files":["service: serverless-graphql\n\nplugins: \n  - serverless-pseudo-parameters\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action: dynamodb:GetItem\n      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_users\n    - Effect: Allow\n      Action: dynamodb:scan\n      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_orders\n\nfunctions:\n  graphql:\n    handler: functions/graphql.handler\n    events:\n      - http:\n           path: /graphql\n           method: post\n    environment:\n      tableOrders: ${self:custom.stage}_orders\n      tableUsers: ${self:custom.stage}_users\n\nresources:\n  Resources:\n    ordersTable:\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: ${self:custom.stage}_orders\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id \n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    \n    usersTable:\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: ${self:custom.stage}_users\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":132354143,"files":["service: tic-tac-toe-serverless-demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: local\n  region: ${file(./env.yml):${opt:stage, self:provider.stage}.AWS_REGION_CODE}\n  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}\n\npackage:\n  exclude:\n    - .git\n\nfunctions:\n\n  create-game:\n    handler: src/functions/create-game.handler\n    events:\n      - http:\n          path: /games\n          cors: true\n          method: post\n          integration: lambda\n\n  get-game:\n    handler: src/functions/get-game.handler\n    events:\n      - http:\n          path: /games/{gameId}\n          cors: true\n          method: get\n          integration: lambda\n\n  list-games:\n    handler: src/functions/list-games.handler\n    events:\n      - http:\n          path: /games\n          cors: true\n          method: get\n          integration: lambda\n\n  play:\n    handler: src/functions/play.handler\n    events:\n      - http:\n          path: /games/{gameId}\n          cors: true\n          method: post\n          integration: lambda\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: games\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n                - dynamodb:Scan\n              Resource: arn:aws:dynamodb:*:*:table/games\n        Roles:\n          - Ref: IamRoleLambdaExecution\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n"]},{"id":104588288,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: osmose-serverless # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\n# you can overwrite defaults here\n  stage: dev1\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  saveEmailStatus:\n    handler: handlers/ses-sns.saveEmailStatus\n    events:\n      - sns: arn:aws:sns:us-east-1:420906024005:osmose_mail\n  emailList:\n    handler: handlers/api-list.emailList\n    events:\n      - http:\n          path: list\n          method: post\n          cors: true\n      - http:\n          path: list\n          method: put\n          cors: true\n      - http:\n          path: list\n          method: delete\n          cors: true\n      - http:\n          path: list\n          method: get\n          cors: true\n  confirmEmail:\n    handler: handlers/confirm-email.sendConfirm\n    events:\n      - stream: arn:aws:dynamodb:us-east-1:420906024005:table/ClientList/stream/2018-03-27T17:57:25.787\n      - http:\n          path: confirm\n          method: get\n          cors: true\n  postEmail:\n    handler: handlers/ses-post.postEmail\n    events:\n      - http:\n          path: email\n          method: post\n          cors: true\n\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":134895146,"files":["service: stockup-gql\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n          - Effect: Allow\n            Action:\n              - dynamodb:DescribeTable\n              - dynamodb:Query\n              - dynamodb:Scan\n              - dynamodb:GetItem\n              - dynamodb:PutItem\n              - dynamodb:UpdateItem\n              - dynamodb:DeleteItem\n            Resource:\n               Fn::Join:\n                 - \"\"\n                 - - \"arn:aws:dynamodb:*:*:table/\"\n                   - Ref: ProductsDynamoDbTable\n\nfunctions:\n  queryProducts:\n    handler: handler.queryProducts\n    events:\n    - http:\n        path: products\n        method: post\n        cors: true\n\nresources:\n  Resources:\n    ProductsDynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: products\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":122729376,"files":["service: IotaProxy\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-2\n\nfunctions:\n  attHandler:\n    handler: AttHandler.handler\n    #5 mins, hopefully enough for PoW\n    timeout: 300"]},{"id":133937448,"files":["service: performance\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  profile: default\n  timeout: 300\n  versionFunctions: false\n  reservedConcurrency: 2\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: aws.hello128\n    events:\n      - http: GET hello128\n    memorySize: 128\n\n  fibo128:\n    handler: aws.fibo128\n    events:\n      - http: GET fibo128\n    memorySize: 128\n  fibo256:\n    handler: aws.fibo256\n    events:\n      - http: GET fibo256\n    memorySize: 256\n  fibo512:\n    handler: aws.fibo512\n    events:\n      - http: GET fibo512\n    memorySize: 512\n  fibo1024:\n    handler: aws.fibo1024\n    events:\n      - http: GET fibo1024\n    memorySize: 1024\n  fibo2048:\n    handler: aws.fibo2048\n    events:\n      - http: GET fibo2048\n    memorySize: 2048\n\n  fft128:\n    handler: aws.fft128\n    events:\n      - http: GET fft128\n    memorySize: 128\n  fft256:\n    handler: aws.fft256\n    events:\n      - http: GET fft256\n    memorySize: 256\n  fft512:\n    handler: aws.fft512\n    events:\n      - http: GET fft512\n    memorySize: 512\n  fft1024:\n    handler: aws.fft1024\n    events:\n      - http: GET fft1024\n    memorySize: 1024\n  fft2048:\n    handler: aws.fft2048\n    events:\n      - http: GET fft2048\n    memorySize: 2048\n\n  pi128:\n    handler: aws.pi128\n    events:\n      - http: GET pi128\n    memorySize: 128\n  pi256:\n    handler: aws.pi256\n    events:\n      - http: GET pi256\n    memorySize: 256\n  pi512:\n    handler: aws.pi512\n    events:\n      - http: GET pi512\n    memorySize: 512\n  pi1024:\n    handler: aws.pi1024\n    events:\n      - http: GET pi1024\n    memorySize: 1024\n  pi2048:\n    handler: aws.pi2048\n    events:\n      - http: GET pi2048\n    memorySize: 2048\n\n  matrix128:\n    handler: aws.matrix128\n    events:\n      - http: GET matrix128\n    memorySize: 128\n  matrix256:\n    handler: aws.matrix256\n    events:\n      - http: GET matrix256\n    memorySize: 256\n  matrix512:\n    handler: aws.matrix512\n    events:\n      - http: GET matrix512\n    memorySize: 512\n  matrix1024:\n    handler: aws.matrix1024\n    events:\n      - http: GET matrix1024\n    memorySize: 1024\n  matrix2048:\n    handler: aws.matrix2048\n    events:\n      - http: GET matrix2048\n    memorySize: 2048\n\n  sleep128:\n    handler: aws.sleep128\n    events:\n      - http: GET sleep128\n    memorySize: 128\n  sleep256:\n    handler: aws.sleep256\n    events:\n      - http: GET sleep256\n    memorySize: 256\n  sleep512:\n    handler: aws.sleep512\n    events:\n      - http: GET sleep512\n    memorySize: 512\n  sleep1024:\n    handler: aws.sleep1024\n    events:\n      - http: GET sleep1024\n    memorySize: 1024\n  sleep2048:\n    handler: aws.sleep2048\n    events:\n      - http: GET sleep2048\n    memorySize: 2048\n\n  unionfind128:\n    handler: aws.unionfind128\n    events:\n      - http: GET unionfind128\n    memorySize: 128\n  unionfind256:\n    handler: aws.unionfind256\n    events:\n      - http: GET unionfind256\n    memorySize: 256\n  unionfind512:\n    handler: aws.unionfind512\n    events:\n      - http: GET unionfind512\n    memorySize: 512\n  unionfind1024:\n    handler: aws.unionfind1024\n    events:\n      - http: GET unionfind1024\n    memorySize: 1024\n  unionfind2048:\n    handler: aws.unionfind2048\n    events:\n      - http: GET unionfind2048\n    memorySize: 2048\n","service: performance-thesis\n\nprovider:\n  name: azure\n  location: Central US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n    - .gcloud/**\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - package.json\n    - platform/**\n\nfunctions:\n  hello128:\n    handler: azure.hello128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  fibo128:\n    handler: azure.fibo128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo256:\n    handler: azure.fibo256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo512:\n    handler: azure.fibo512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo1024:\n    handler: azure.fibo1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fibo2048:\n    handler: azure.fibo2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  fft128:\n    handler: azure.fft128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft256:\n    handler: azure.fft256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft512:\n    handler: azure.fft512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft1024:\n    handler: azure.fft1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  fft2048:\n    handler: azure.fft2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  matrix128:\n    handler: azure.matrix128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix256:\n    handler: azure.matrix256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix512:\n    handler: azure.matrix512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix1024:\n    handler: azure.matrix1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  matrix2048:\n    handler: azure.matrix2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  pi128:\n    handler: azure.pi128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi256:\n    handler: azure.pi256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi512:\n    handler: azure.pi512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi1024:\n    handler: azure.pi1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  pi2048:\n    handler: azure.pi2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  sleep128:\n    handler: azure.sleep128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep256:\n    handler: azure.sleep256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep512:\n    handler: azure.sleep512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep1024:\n    handler: azure.sleep1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  sleep2048:\n    handler: azure.sleep2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n\n  unionfind128:\n    handler: azure.unionfind128\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind256:\n    handler: azure.unionfind256\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind512:\n    handler: azure.unionfind512\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind1024:\n    handler: azure.unionfind1024\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n  unionfind2048:\n    handler: azure.unionfind2048\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel: anonymous\n","service: performance\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: thesis-serverless\n  timeout: 540s\n  credentials: .gcloud/keyfile.json\n  labels:\n    application: Serverless Performance Example\n\nplugins:\n  - serverless-google-cloudfunctions\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: hello128\n    events:\n      - http: path\n    memorySize: 128\n\n  fft128:\n    handler: fft128\n    events:\n      - http: path\n    memorySize: 128\n  fft256:\n    handler: fft256\n    events:\n      - http: path\n    memorySize: 256\n  fft512:\n    handler: fft512\n    events:\n      - http: path\n    memorySize: 512\n  fft1024:\n    handler: fft1024\n    events:\n      - http: path\n    memorySize: 1024\n  fft2048:\n    handler: fft2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  fibo128:\n    handler: fibo128\n    events:\n      - http: path\n    memorySize: 128\n  fibo256:\n    handler: fibo256\n    events:\n      - http: path\n    memorySize: 256\n  fibo512:\n    handler: fibo512\n    events:\n      - http: path\n    memorySize: 512\n  fibo1024:\n    handler: fibo1024\n    events:\n      - http: path\n    memorySize: 1024\n  fibo2048:\n    handler: fibo2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  matrix128:\n    handler: matrix128\n    events:\n      - http: path\n    memorySize: 128\n  matrix256:\n    handler: matrix256\n    events:\n      - http: path\n    memorySize: 256\n  matrix512:\n    handler: matrix512\n    events:\n      - http: path\n    memorySize: 512\n  matrix1024:\n    handler: matrix1024\n    events:\n      - http: path\n    memorySize: 1024\n  matrix2048:\n    handler: matrix2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  pi128:\n    handler: pi128\n    events:\n      - http: path\n    memorySize: 128\n  pi256:\n    handler: pi256\n    events:\n      - http: path\n    memorySize: 256\n  pi512:\n    handler: pi512\n    events:\n      - http: path\n    memorySize: 512\n  pi1024:\n    handler: pi1024\n    events:\n      - http: path\n    memorySize: 1024\n  pi2048:\n    handler: pi2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  sleep128:\n    handler: sleep128\n    events:\n      - http: path\n    memorySize: 128\n  sleep256:\n    handler: sleep256\n    events:\n      - http: path\n    memorySize: 256\n  sleep512:\n    handler: sleep512\n    events:\n      - http: path\n    memorySize: 512\n  sleep1024:\n    handler: sleep1024\n    events:\n      - http: path\n    memorySize: 1024\n  sleep2048:\n    handler: sleep2048\n    events:\n      - http: path\n    memorySize: 2048\n\n  unionfind128:\n    handler: unionfind128\n    events:\n      - http: path\n    memorySize: 128\n  unionfind256:\n    handler: unionfind256\n    events:\n      - http: path\n    memorySize: 256\n  unionfind512:\n    handler: unionfind512\n    events:\n      - http: path\n    memorySize: 512\n  unionfind1024:\n    handler: unionfind1024\n    events:\n      - http: path\n    memorySize: 1024\n  unionfind2048:\n    handler: unionfind2048\n    events:\n      - http: path\n    memorySize: 2048\n","service: performance\n\n# self-hosted option\nprovider:\n  name: openwhisk\n  ignore_certs: true\n  timeout: 300\n\nplugins:\n  - serverless-openwhisk\n\n# needs more granular excluding in production as only the serverless provider npm\n# package should be excluded (and not the whole node_modules directory)\npackage:\n  exclude:\n    - node_modules/serverless-azure-functions/**\n    - node_modules/serverless-google-cloudfunctions/**\n    - node_modules/serverless-openwhisk/**\n    - .gitignore\n    - .git/**\n\nfunctions:\n  hello128:\n    handler: openwhisk.hello128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /hello128\n    memory: 128\n\n  fibo128:\n    handler: openwhisk.fibo128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo128\n    memory: 128\n  fibo256:\n    handler: openwhisk.fibo256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo256\n    memory: 256\n  fibo512:\n    handler: openwhisk.fibo512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo512\n    memory: 512\n  fibo1024:\n    handler: openwhisk.fibo1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo1024\n    memory: 512\n  fibo2048:\n    handler: openwhisk.fibo2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fibo2048\n    memory: 512\n\n  fft128:\n    handler: openwhisk.fft128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft128\n    memory: 128\n  fft256:\n    handler: openwhisk.fft256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft256\n    memory: 256\n  fft512:\n    handler: openwhisk.fft512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft512\n    memory: 512\n  fft1024:\n    handler: openwhisk.fft1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft1024\n    memory: 512\n  fft2048:\n    handler: openwhisk.fft2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /fft2048\n    memory: 512\n\n  matrix128:\n    handler: openwhisk.matrix128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix128\n    memory: 128\n  matrix256:\n    handler: openwhisk.matrix256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix256\n    memory: 256\n  matrix512:\n    handler: openwhisk.matrix512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix512\n    memory: 512\n  matrix1024:\n    handler: openwhisk.matrix1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix1024\n    memory: 512\n  matrix2048:\n    handler: openwhisk.matrix2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /matrix2048\n    memory: 512\n\n  pi128:\n    handler: openwhisk.pi128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi128\n    memory: 128\n  pi256:\n    handler: openwhisk.pi256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi256\n    memory: 256\n  pi512:\n    handler: openwhisk.pi512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi512\n    memory: 512\n  pi1024:\n    handler: openwhisk.pi1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi1024\n    memory: 512\n  pi2048:\n    handler: openwhisk.pi2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /pi2048\n    memory: 512\n\n  sleep128:\n    handler: openwhisk.sleep128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep128\n    memory: 128\n  sleep256:\n    handler: openwhisk.sleep256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep256\n    memory: 256\n  sleep512:\n    handler: openwhisk.sleep512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep512\n    memory: 512\n  sleep1024:\n    handler: openwhisk.sleep1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep1024\n    memory: 512\n  sleep2048:\n    handler: openwhisk.sleep2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /sleep2048\n    memory: 512\n\n  unionfind128:\n    handler: openwhisk.unionfind128\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind128\n    memory: 128\n  unionfind256:\n    handler: openwhisk.unionfind256\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind256\n    memory: 256\n  unionfind512:\n    handler: openwhisk.unionfind512\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind512\n    memory: 512\n  unionfind1024:\n    handler: openwhisk.unionfind1024\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind1024\n    memory: 512\n  unionfind2048:\n    handler: openwhisk.unionfind2048\n    annotations:\n      web-export: true\n    events:\n      - http: GET /unionfind2048\n    memory: 512\n"]},{"id":134432189,"files":["service: serverless-hello-world\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    SUPER_SECRET: ${file(./env.json):SUPER_SECRET}\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule: rate(1 minute)"]},{"id":125674769,"files":["service: serverless-sns-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"sns:*\"\n\nfunctions:\n  getMessage:\n    handler: handler.getMessage\n    events:\n      - sns: sns-example-topic\n  sendMessage:\n    handler: handler.sendMessage\n    events:\n      - http:\n          path: sendMessage\n          method: get\n\nplugins:\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-optimize\n\ncustom:\n  serverless-offline-sns:\n    port: 4002\n    debug: true "]},{"id":134262630,"files":["service: user-api # NOTE: update this with your service name\n\n#Use serverless-webpack plugin to transpile ES6/ES7\nplugins:\n  - serverless-webpack\n\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n# Provider \nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, \"prod\"}\n  region: eu-west-1\n  environment:\n    SERVICE_NAME: ${self:service}\n\n# you can add statements to the Lambda function's IAM Role here\niamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - dynamodb:DescribeTable\n      - dynamodb:Query\n      - dynamodb:Scan\n      - dynamodb:GetItem\n      - dynamodb:PutItem\n      - dynamodb:UpdateItem\n      - dynamodb:DeleteItem\n    Resource: arn:aws:dynamodb:eu-west-1:*:table/user_${opt:stage, \"prod\"}\n# Function\nfunctions:\n  create:\n    handler: user_create.main\n    name: ${self:provider.stage}-user_create\n    events:\n      - http:\n          path: create\n          method: post\n          cors: true\n          # authorizer: aws_iam\n  view:\n    handler: user_view.main\n    name: ${self:provider.stage}-user_view\n    events:\n      - http:\n          path: view/{id}\n          method: get\n          cors: true\n          # authorizer: aws_iam\n\n  update:\n    handler: user_update.main\n    name: ${self:provider.stage}-user_update\n    events:\n      - http:\n          path: update/{id}\n          method: post\n          cors: true\n          # authorizer: aws_iam\n\n  delete:\n    handler: user_delete.main\n    name: ${self:provider.stage}-user_delete\n    events:\n      - http:\n          path: delete/{id}\n          method: delete\n          cors: true\n          # authorizer: aws_iam\n# Resources\nresources:\n  Resources:\n    userTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: user_${opt:stage, \"prod\"}\n        AttributeDefinitions:\n          - AttributeName: userid\n            AttributeType: N\n        KeySchema:\n          - AttributeName: userid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1  \n        SSESpecification:\n          SSEEnabled: true\n"]},{"id":128112647,"files":["service:\n  name: aws-nodejs-ecma-script\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  vrt_api_mapper:\n    handler: mapper.handler\n    events:\n      - http:\n          method: get\n          cors: true\n          path: '/{channelCode}'\n          request:\n            parameters:\n              paths:\n                channelCode: true\n"]},{"id":121432394,"files":["service: ProCoders\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: eu-west-1\n  environment:\n    STRIPE_SECRET_KEY: ${file(./.env.${opt:stage}.yml):STRIPE_SECRET_KEY}\n\nfunctions:\n  checkForFinishedPayments:\n    handler: handler.call\n    events:\n      - http:\n          path: /\n          method: post"]},{"id":132957180,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-nodejs\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-offline\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":132741801,"files":["service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n"]},{"id":132766163,"files":["service: my-service-name\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-plugin-aws-alerts\n\ncustom:\n  defaultStage: dev\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  resourcesPrefix: ${self:service}-${self:custom.currentStage}\n  config: ${file(./config.${self:custom.currentStage}.json)}\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n  serverless-offline:\n    babelOptions:\n      presets: [\"es2015\"]\n  alerts:\n    stages:\n      - prod\n    topics:\n      alarm: \n        topic: ${self:service}-${opt:stage}-alerts-alarm\n        notifications:\n          - protocol: email\n            endpoint: name@domain.com # Change this to your email address\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  profile: ${opt:profile, self:custom.config.PROFILE}\n  region: ${opt:region, self:custom.config.REGION}\n  timeout: 300\n  environment:\n    REGION: ${self:custom.config.REGION}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: src/handler.default\n    events:\n      - http:\n          path: version\n          method: get\n\n"]},{"id":106929098,"files":["service:\n  name: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  cfLogs: true\n  stage: ${opt:stage, file(./config/output.yml):stage}\n  region: ${opt:region, file(./config/output.yml):region}\n\n  environment:\n    # MY_KMS_SECRET: ${self:custom.kmsSecrets.secrets.foo}\n    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}\n    SERVERLESS_REGION: ${opt:region, self:provider.region}\n    SERVERLESS_PROJECT: ${self:service}\n\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - dynamodb:*\n    Resource: arn:aws:dynamodb:*:*:table/${self:custom.my_table}\n\n\n\n  # # Enable the following IAM permissions for using KMS\n  # - Effect: Allow\n  #   Action:\n  #     - KMS:Decrypt\n  #   Resource: ${self:custom.kmsSecrets.keyArn}\n\n  # Enable the following IAM permissions for using VPC Discovery\n  # - Effect: Allow\n  #   Action:\n  #     - ec2:CreateNetworkInterface\n  #     - ec2:DescribeNetworkInterfaces\n  #     - ec2:DeleteNetworkInterfaces\n\n\nplugins:\n  # - serverless-vpc-discovery\n  # - serverless-domain-manager\n  - serverless-aws-documentation\n  - serverless-kms-secrets\n  - serverless-jest-plugin\n  - dynalite\n  - serverless-webpack\n  # - serverless-dynamodb-local\n  - serverless-offline\n\n\ncustom:\n  config: ${file(./config/output.yml)}\n  stage: ${opt:stage, self:custom.config.stage}\n  vpc_env: ${opt:vpc_env, self:custom.config.vpc_env}\n  prefix: ${self:custom.stage}-${self:service}\n  my_table: ${self:custom.config.db.tables.table}-${self:custom.stage}\n\n  # preTestCommands:\n  #   - bash .tools/startOffline.sh\n  # postTestCommands:\n  #   - bash .tools/stopOffline.sh\n\n  webpackIncludeModules: true\n\n  serverless-jest-plugin:\n    functionTemplate: config/templates/function-template.ejs\n    testTemplate: config/templates/test-template.ejs\n\n  # # For the serverless-kms-secrets plugin\n  # serverless-kms-secrets:\n  #   secretsFile:\n  #   secretsFile: kms2-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml # (optional)\n  # kmsSecrets: ${file(kms-secrets2.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}\n\n  # # For the serverless-domain-manager plugin\n  # customDomain:\n  #   basePath: ${opt:stage, self:custom.stage}\n  #   domainName: ${self:custom.config.domain.domainName}\n  #   stage: ${opt:stage, self:custom.stage}\n  #   # certificateName:\n  #   # createRoute53Record: true\n\n  # For the serverless-vpc-discovery plugin\n  # vpc:\n  #   vpcName: '${self:custom.stage}'\n  #   subnetNames:\n  #     - '${self:custom.stage}_NAME_OF_SUBNET'\n  #   securityGroupNames:\n  #     - '${self:custom.stage}_NAME_OF_SECURITY_GROUP'\n\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n\n  # customDomain:\n  #   basePath: ${self:custom.stage}\n  #   domainName: boilerplate.foo.com\n  #   stage: ${self:custom.stage}\n  #   certificateName: # default: determined using domain name\n  #   createRoute53Record: true # default: true\n\n  documentation:\n    api:\n      info:\n        ${file(docs/info.yml)}\n    tags:\n      - name: MyTag\n        description: This is my tag\n    resources:\n      - path: '/health'\n        description: 'Endpoint to see if the serverless app is working'\n      - path: '/hello'\n        description: 'Joyful greeting by your Serverless Application'\n    models:\n      ${file(docs/models.yml)}\n\n\n\nfunctions:\n  health:\n    handler: handler.health\n    events:\n      - http:\n          method: get\n          path: health\n          cors: true\n          documentation:\n            ${file(src/health.doc.yml)}\n\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          cors: true\n          documentation:\n            ${file(src/hello.doc.yml)}\n\n  error400:\n    handler: handler.error400\n    events:\n      - http:\n          method: get\n          path: error\n          cors: true\n          documentation:\n            ${file(src/error400.doc.yml)}\n\n  # kms:\n  #   handler: handler.kms\n  #   events:\n  #     - http:\n  #         method: get\n  #         path: kms\n\n\nresources:\n  Resources:\n    serverlessBoilerplateTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.my_table}\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":132206463,"files":["service: aws-serverless-express\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n  memorySize: 512\n  timeout: 10\n\n  environment:\n    NODE_ENV: ${file(./serverless.env.yml):${opt:stage, 'dev'}.NODE_ENV}\n    DB_DSN: ${file(./serverless.env.yml):${opt:stage, 'dev'}.DB_DSN}\n    SESSION_SECRET_KEY: ${file(./serverless.env.yml):${opt:stage, 'dev'}.SESSION_SECRET_KEY}\n    MESSAGES_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.aws.account_id}/${self:custom.aws.messages_queue}\n    REGION: ${self:provider.region}\n\npackage:\n  excludeDevDependencies: true\n  individually: true\n  exclude:\n    - .git/**\n    - .webpack\n    - .idea/**\n    - .severless*\n    - _optimize/**\n    - .babelrc\n    - package.json\n    - webpack.config.js\n\nplugins:\n  - serverless-plugin-common-excludes\n  - serverless-plugin-include-dependencies\n  - serverless-iam-roles-per-function\n  - serverless-webpack\n  - serverless-plugin-warmup\n  - serverless-offline\n\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  warmup:\n    memorySize: 256\n    timeout: 120\n    prewarm: true\n    role: LambdaInvokeRole\n  aws:\n    account_id: ${file(./serverless.env.yml):${opt:stage, 'dev'}.AWS_ACCOUNT_ID}\n    messages_queue: \"messages-${opt:stage, 'dev'}\"\n\nfunctions:\n  login:\n    handler: app/controllers/session/login.handler\n    warmup: true\n    events:\n      - http: 'POST /sessions'\n\n  createUser:\n    handler: app/controllers/user/createUser.handler\n    warmup: true\n    events:\n      - http: 'POST /users'\n\n  getUser:\n    handler: app/controllers/user/getUser.handler\n    events:\n      - http: 'GET /users/{id+}'\n\n  publishMessage:\n    handler: app/controllers/message/publishMessage.handler\n    events:\n      - http: 'POST /messages'\n    iamRoleStatements:\n      - Effect: 'Allow'\n        Action:\n          - sqs:SendMessage\n        Resource: arn:aws:sqs:*:*:${self:custom.aws.messages_queue}\n\nresources:\n  Resources:\n    LambdaInvokeRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: LambdaInvokeRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: LambdaInvokePolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: 'Allow'\n                  Action:\n                    - 'lambda:InvokeFunction'\n                  Resource:\n                  - Fn::Join:\n                    - ':'\n                    - - arn:aws:lambda\n                      - Ref: AWS::Region\n                      - Ref: AWS::AccountId\n                      - function:${self:service}-${opt:stage, self:provider.stage}-*\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\":\", [\"arn:aws:logs\", { \"Ref\" : \"AWS::Region\" }, { \"Ref\" : \"AWS::AccountId\" }, \"log-group:/aws/lambda/*:*:*\" ] ]  }\n\n    MessageQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:custom.aws.messages_queue}\n        VisibilityTimeout: 60\n"]},{"id":130597810,"files":["service: react-air-server\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  server:\n    handler: lambda.server\n    events:\n      - http:\n          path: server\n          method: get\n          cors: true\n"]},{"id":98403540,"files":["service: aws-python3 # NOTE: update this with your service name\n\nplugins:\n  - serverless-custom-packaging-plugin\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      path: ./src\n      artifact: src.zip\n      libs: ./libs\n\n"]},{"id":129637516,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: flightCards-skill\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  handler:\n    handler: main.handler\n    events:\n      - alexaSkill\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":47026076,"files":["service: authentication-service\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-admin\n  region: eu-west-1\nfunctions:\n  authorise:\n    handler: handler.authorise\n    environment:\n      AUTH0_SECRET: ${env:AUTH0_SECRET}\nresources:  \n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users \n        AttributeDefinitions:\n          - AttributeName: id \n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:GetItem\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/users\n        Roles:\n          - Ref: IamRoleLambdaExecution\n","service: playlist-service\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-admin\n  region: eu-west-1\nfunctions:\n  getPlaylistsByUserId:\n    handler: handler.getPlaylistsByUserId\n    events:\n      - http:\n          path: playlists\n          method: get\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\n  savePlaylist:\n    handler: handler.savePlaylist\n    events:\n      - http:\n          path: playlists\n          method: post\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\n  updatePlaylist:\n    handler: handler.updatePlaylist\n    events:\n      - http:\n          path: playlists\n          method: put\n          cors: true\n          authorizer:\n            arn: arn:aws:lambda:eu-west-1:${env:AWS_ACCOUNT_NO}:function:authentication-service-dev-authorise\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: playlists\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: userid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        # Allow queries to get playlists by userID\n        GlobalSecondaryIndexes:\n          - IndexName: PlaylistUsers\n            KeySchema:\n              - AttributeName: userid\n                KeyType: HASH\n              - AttributeName: id\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 5\n              WriteCapacityUnits: 5\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: lambda-dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:*\n              Resource:\n                - arn:aws:dynamodb:*:*:table/playlists\n                - arn:aws:dynamodb:*:*:table/playlists/index/*\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":100794077,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nplugins:\n  - serverless-async-await\n  \nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n"]},{"id":91560191,"files":["service: &service asana-mapper-service\n\ncustom:\n  writeEnvVars:\n    AUTH_SECRET: ${env:AUTH_SECRET}\n    AUTH_TOKEN: ${env:AUTH_TOKEN}\n    STAGE: ${opt:stage}\n    PROJECT_NAME: *service\n    RAYGUN_API_KEY: ${env:RAYGUN_API_KEY}\n    BASE_URL: ${env:BASE_URL}\n    NODE_ENV: ${env:NODE_ENV}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n        - lambda:InvokeAsync\n      Resource: \"*\"\n\nfunctions:\n  requestsPost:\n    handler: lambdas/requests-post/index.handler\n    timeout: 60\n    events:\n      - http:\n          path: requests\n          method: POST\n          authorizer: auth\n  auth:\n    handler: lambdas/auth/index.handler\n\nOutputs:\n  ServiceName:\n    Description: Service name\n    Value: asana-mapper\n  ServiceVersion:\n    Description: Service version\n    Value: 1\n  ServiceStage:\n    Description: Service deployment stage\n    Value: ${opt:stage}\n  RestApiName:\n    Description: API Gateway Rest API name\n    Value:\n      Fn::Join:\n        - \"-\"\n        -\n          - ${opt:stage}\n          - *service\n  RestApiStage:\n    Description: API Gateway Rest API stage\n    Value: ${opt:stage}\n\nplugins:\n  - serverless-offline\n  - serverless-plugin-write-env-vars\n\n"]},{"id":127665371,"files":["service: mediocre-saga-sample \n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \n        - \"lambda:InvokeFunction\"\n      Resource: \"arn:aws:lambda:*:*:*\"\n    - Effect: \"Allow\"\n      Action: \n        - \"states:ListStateMachines\"\n        - \"states:StartExecution\"\n        - \"states:GetExecutionHistory\"\n      Resource: \"arn:aws:states:*:*:*\"\n\nfunctions:\n  get-forecast:\n    handler: functions/get-forecast.handler\n\n  get-flight:\n    handler: functions/get-flight.handler\n\n  get-departure:\n    handler: functions/get-departure.handler\n    events:\n      - http:\n          path: /getdeparture/\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n                date: true\n\n  get-departure-steps-fn:\n    handler: functions/get-departure-steps-fn.handler\n    events:\n      - http:\n          path: /getdeparture-step/\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n                date: true\n\n  get-departure-steps-fn-status:\n    handler: functions/get-status.handler\n    events:\n      - http:\n          path: /getdeparture-step/status\n          method: get\n          request:\n            parameters:\n              querystrings:\n                id: true\n\nstepFunctions:\n  stateMachines: \n    GetDepartureMachine:\n      definition:\n        Comment: \"Get Departure information\"\n        StartAt: Parallel\n        States:\n          Parallel:\n            Type: Parallel\n            Next: FinalState\n            Branches:\n              - StartAt: GetFlight\n                States:\n                  GetFlight:\n                    Type: Task\n                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-get-flight\n                    End: true\n              - StartAt: GetForecast\n                States:\n                  GetForecast:\n                    Type: Task\n                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-get-forecast\n                    End: true\n          FinalState:\n            Type: Pass\n            End: true\n\n"]},{"id":124797795,"files":["service: tvass\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  environment:\n    PUSHER_APP_ID: your-app-id\n    PUSHER_APP_KEY: your-app-key\n    PUSHER_APP_SECRET: your-app-secret\n    PUSHER_APP_CLUSTER: your-app-cluster\n\nfunctions:\n  home:\n    handler: handler.home\n    events:\n      - http:\n          path: /\n          method: get\n          cors: true\n  webhook:\n    handler: handler.webhook\n    events:\n    - http:\n        path: /webhook\n        method: post\n        cors: true\n"]},{"id":121765509,"files":["service: lambda-test\n\n# exclude the code coverage files and circle ci files\npackage:\n  exclude:\n  - coverage/**\n  - .circleci/**\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: becual/hello\n          method: get\n  bye:\n    handler: handler.bye\n    events:\n      - http:\n          path: becual/bye\n          method: get\nplugins:\n  - serverless-offline\n  - serverless-plugin-optimize"]},{"id":121629630,"files":["service:\n  name: reactServerless\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n  - serverless-finch\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.defaultStage}\n  memorySize: 128\n  timeout: 3\n  reservedConcurrency: 10\n  profile: ${self:custom.profiles.${self:provider.stage}}\n  region: ap-southeast-1\n  apiKeys:\n    - ${self:custom.stage}-serviceKey\n  environment: ${self:custom.env}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER}\"\n\ncustom:\n  defaultStage: dev\n  stage: ${opt:stage, self:custom.defaultStage}\n  profiles:\n    local: serverlessDevProfile\n    dev: serverlessDevProfile\n    prod: serverlessProdProfile\n  serverless-offline:\n    port: 3001\n  client:\n    bucketName: ${opt:distributionFolder, self:custom.env.S3_BUCKET_NAME}\n    distributionFolder: ${opt:distributionFolder, 'client/site/build'}\n  env: ${file(./env-${self:custom.stage}.yml)}\n\nfunctions:\n  servicePing:\n    handler: src/app/handlers/services/ping.handler\n    description: Service online availability test\n    timeout: 1\n    reservedConcurrency: 5\n    events:\n      - http:\n          path: services/ping\n          method: get\n          private: true\n          cors: true\n  cognitoCustomMessage:\n      handler: src/app/handlers/awsCognito/customMessage.handler\n      description: Cognito user signup custom message trigger lambda function\n      timeout: 1\n      memorySize: 256\n  cognitoPostConfirmation:\n      handler: src/app/handlers/awsCognito/postConfirmation.handler\n      description: Cognito user signup post confirmation trigger lambda function\n      memorySize: 1024\n  billingCreateCharge:\n      handler: src/app/handlers/billing/createCharge.handler\n      description: Stripe create new charge\n      events:\n        - http:\n            path: billing/charge\n            method: post\n            private: true\n            cors: true\n\nresources:\n  Resources:\n    CognitoUserPoolReactServerlessUserPool:\n      Type: \"AWS::Cognito::UserPool\"\n      Properties:\n        UserPoolName: ${self:custom.env.COGNITO_USER_POOL_NAME}\n        EmailConfiguration:\n          ReplyToEmailAddress: ${self:custom.env.SES_MAIL_REPLY_TO}\n        AutoVerifiedAttributes:\n          - email\n        Schema:\n          - AttributeDataType: String\n            Mutable: True\n            Name: email\n            Required: True\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 6\n            RequireLowercase: False\n            RequireNumbers: False\n            RequireSymbols: False\n            RequireUppercase: False\n        LambdaConfig:\n          CustomMessage:\n            Fn::GetAtt: [\"CognitoCustomMessageLambdaFunction\", \"Arn\"]\n          PostConfirmation:\n            Fn::GetAtt: [\"CognitoPostConfirmationLambdaFunction\", \"Arn\"]\n    CognitoUserPoolClientReactServerlessUserPoolClientWebapp:\n      Type: \"AWS::Cognito::UserPoolClient\"\n      Properties:\n        ClientName: ${self:custom.env.COGNITO_USER_POOL_CLIENT_NAME_WEBAPP}\n        UserPoolId:\n          Ref: CognitoUserPoolReactServerlessUserPool\n        WriteAttributes:\n          - email\n          - family_name\n          - given_name\n          - phone_number\n    CognitoCustomMessageLambdaPermissionCognitoUserPool:\n      Type: \"AWS::Lambda::Permission\"\n      Properties:\n        FunctionName:\n          Fn::GetAtt: [\"CognitoCustomMessageLambdaFunction\", \"Arn\"]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"cognito-idp.amazonaws.com\"\n        SourceArn:\n          Fn::Join: [\"\", [\"arn:aws:cognito-idp:${self:provider.region}:\", {Ref: \"AWS::AccountId\"}, \":userpool/\", {Ref: CognitoUserPoolReactServerlessUserPool}]]\n    CognitoPostConfirmationLambdaPermissionCognitoUserPool:\n      Type: \"AWS::Lambda::Permission\"\n      Properties:\n        FunctionName:\n          Fn::GetAtt: [\"CognitoPostConfirmationLambdaFunction\", \"Arn\"]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"cognito-idp.amazonaws.com\"\n        SourceArn:\n          Fn::Join: [\"\", [\"arn:aws:cognito-idp:${self:provider.region}:\", {Ref: \"AWS::AccountId\"}, \":userpool/\", {Ref: CognitoUserPoolReactServerlessUserPool}]]\n    DynamoDbUsersTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}"]},{"id":125579591,"files":["service: capture\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: prod\n  region: eu-west-1\n  environment:\n    FROM_ADDRESS: ${env:FROM_ADDRESS} # \"4ARMED Research <someaddress@mailinator.com>\"\n    TO_ADDRESS: ${env:TO_ADDRESS} # \"4ARMED Research <someaddress@mailinator.com>\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n        - \"ses:SendRawEmail\"\n      Resource: \"*\"\n\nfunctions:\n  capture:\n    handler: handler.capture\n    events:\n      - http:\n          path: capture\n          method: post\n          cors: true\n\n"]},{"id":124561629,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: kenService\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello/get\n          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":125306323,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: book-lending-app-api\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\ncustom:\n  TABLE_BOOK: book-lending-app-book\n\nresources:\n  Resources:\n    BookDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n#      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"itemId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"itemId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.TABLE_BOOK}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        Fn::GetAtt:\n          - BookDynamoTable\n          - Arn\n\nfunctions:\n  authorize:\n    handler: handlers/authorize.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n    # you need to generate one JWT secret here... you can get one at https://www.grc.com/passwords.htm\n      JWT_SECRET: \n  listBooks:\n    handler: handlers/listBooks.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: books\n          method: get\n          cors: true\n          # authorizer: authorize  # no need for authorization for listing books\n  reserveBook:\n    handler: handlers/reserveBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: reservations/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n  borrowBook:\n    handler: handlers/borrowBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: lendings/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n  returnBook:\n    handler: handlers/returnBook.handler\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.TABLE_BOOK}\n    events:\n      - http:\n          path: returnings/{id}\n          method: post\n          cors: true\n          authorizer: authorize # autorization here\n          request:\n            parameters:\n              paths:\n                id: true\n\n"]},{"id":123897587,"files":["# Welcome to serverless. Read the docs\n# https://serverless.com/framework/docs/\n\n# Serverless.yml is the configuration the CLI\n# uses to deploy your code to your provider of choice\n\n# The `service` block is the name of the service\nservice: amazon-get-product\n\n# The `provider` block defines where your service will be deployed\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    PRODUCT_API_KEY: \"${self:custom.secrets.PRODUCT_API_KEY}\"\n    PRODUCT_API_SECRET: \"${self:custom.secrets.PRODUCT_API_SECRET}\"\n    PRODUCT_ASSOC_TAG: \"${self:custom.secrets.PRODUCT_ASSOC_TAG}\"\n\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.yml):${self:custom.stage}}\n\n# The `functions` block defines what code to deploy\nfunctions:\n  amazonGetProduct:\n    handler: handler.amazonGetProduct\n    events:\n      - http:\n          path: amazon-get-product\n          method: get\n          cors: true\n"]},{"id":122920942,"files":["service: bracket\n\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: iot.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  qrcode:\n    handler: qrcode/index.main\n    events:\n      - http:\n          path: /q/\n          method: get\n  base:\n    handler: qrcode/update.status\n    events:\n      - http:\n          path: /q/{uuid}\n          method: get\n  create:\n    handler: qrcode/create.handler\n    events:\n      - http:\n          path: /q/\n          method: post\n  on:\n    handler: qrcode/update.on\n    events:\n      - http:\n          path: /q/{uuid}/on\n          method: get\n  off:\n    handler: qrcode/update.off\n    events:\n      - http:\n          path: /q/{uuid}/off\n          method: get\n  status:\n    handler: qrcode/update.status\n    events:\n      - http:\n          path: /q/{uuid}/status\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: uuid\n            AttributeType: S\n        KeySchema:\n          - AttributeName: uuid\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":111042743,"files":["service: url-shorter\n\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: x.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":118740512,"files":["service: opsgenie-slack-unfurling\n\ncustom:\n\n  # Log all events to CloudWatch\n  slack_enable_logging: true\n\n  # The api key you get from OpsGenie API Integration (enable restrict access to configuration when possible)\n  opsgenie_api_key: \"PasteYourOpsGenieAPIKey\"\n\n    # Slack token you received when you install the internal integration\n  slack_access_token: \"PasteYourAccessTokenAfterYouInstallYourAppAndDeployAgain\"\n\n    # Verification token\n  slack_verification_token: \"PasteYourSlackVerificationToken\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n#  region: us-west-2\n#  profile: dev\n  memorySize: 512\n  timeout: 4\n  environment:\n    OPSGENIE_API_KEY: ${self:custom.opsgenie_api_key}\n    SLACK_VERIFICATION_TOKEN: ${self:custom.slack_verification_token}\n    SLACK_ACCESS_TOKEN: ${self:custom.slack_access_token}\n\nfunctions:\n  OpsGenieAlertUnfluring:\n    name: opsgenie-slack-alert-unfurling\n    description: Unfurl your alerts from OpsGenie\n    handler: handler.unfurl\n    events:\n      - http:\n                path: slack-opsgenie-alert-unfluring\n                method: post\n                integration: lambda\n                response:\n                  template: $input.path('$')"]},{"id":121887647,"files":["service: aggregate-vote\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  aggregate-vote:\n    handler: app.handler\n    memorySize: 128\n    timeout: 10\n    events:\n      - stream:\n            arn: <arn_stream_dynamodb>\n            batchSize: 1\n","\nservice: receive-vote\n\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements: # permissions for all of your functions can be set here\n    - Effect: Allow\n      Action: # Gives permission to DynamoDB tables in a specific region\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  receive-vote:\n    handler: app.handler\n    memorySize: 128\n    timeout: 10\n    events:\n      - http:\n          path: receivevote\n          method: post\n          cors: true"]},{"id":116685115,"files":["service: haiiku\n\ncustom:\n  table_name: haiiku-${self:provider.stage}\n  post_index_name: post-id-index-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, env:AWS_DEFAULT_REGION, 'us-east-1'}\n  environment:\n    TABLE_NAME: ${self:custom.table_name}\n    POST_INDEX_NAME: ${self:custom.post_index_name}\n    SITE_ID: ${env:SITE_ID}\n    QUERY_LIMIT: ${env:QUERY_LIMIT}\n\nfunctions:\n  get_comments:\n    handler: src/comments.get\n    events:\n      - http:\n          path: comments/{post_id}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                post_id: true\n  put_comment:\n    handler: src/comments.put\n    events:\n      - http:\n          path: comment/{post_id}\n          method: post\n          cors: true\n          request:\n            parameters:\n              paths:\n                post_id: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.table_name}\n        AttributeDefinitions:\n          - AttributeName: site_id\n            AttributeType: S\n          - AttributeName: post_id\n            AttributeType: S\n          - AttributeName: created_at\n            AttributeType: N\n        KeySchema:\n          - AttributeName: site_id\n            KeyType: HASH\n          - AttributeName: created_at\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: ${self:custom.post_index_name}\n            KeySchema:\n              - AttributeName: site_id\n                KeyType: HASH\n              - AttributeName: post_id\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    DynamoDBIamPolicy:\n      Type: AWS::IAM::Policy\n      DependsOn: DynamoDbTable\n      Properties:\n        PolicyName: ${self:custom.table_name}\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:PutItem\n              Resource: arn:aws:dynamodb:*:*:table/${self:custom.table_name}\n            - Effect: Allow\n              Action:\n                - dynamodb:Query\n              Resource: arn:aws:dynamodb:*:*:table/${self:custom.table_name}/index/${self:custom.post_index_name}\n        Roles:\n          - Ref: IamRoleLambdaExecution\n"]},{"id":120638503,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n\nfunctions:\n  purchase_btc:\n    handler: handler.start\n    environment:\n      # These are your API keys that you create in GDAX account settings.\n      #   You will need view and trade permissions.\n      #   https://www.gdax.com/settings/api\n      GDAX_KEY: myGdaxKey \n      GDAX_SECRET: myGdaxSecret \n      GDAX_PASSPHRASE: myGdaxPassPhrase\n\n      # Investment amount is how much in USD that will be purchased each run.\n      #  GDAX minimum market purchase is $10 so adjust frequency and amount\n      #  with that minimum in mind.\n      INVESTMENT_AMOUNT: 10\n\n      # If MINIMUM_BALANCE and PHONE_NUMBER are set, a text message will\n      #  be sent out when your current balance plus any pending deposit is\n      #  less than MINIMUM_BALANCE.\n      MINIMUM_BALANCE: 1000\n      PHONE_NUMBER: 18667404531\n    events:\n      # https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html\n      - schedule: cron(00 10 * * ? *)\n  \n  purchase_eth:\n    handler: handler.start\n    environment:\n      GDAX_KEY: myGdaxKey \n      GDAX_SECRET: myGdaxSecret\n      GDAX_PASSPHRASE: myGdaxPassPhrase \n\n      # PRODUCT_ID defaults to BTC-USD, change this to change which currency is bought\n      PRODUCT_ID: ETH-USD \n      INVESTMENT_AMOUNT: 10\n    events:\n      - schedule: cron(00 10 * * ? *)\n"]},{"id":73945880,"files":["service: s3-notifications # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs4.3\n  stage: dev\n  iamRoleStatements:\n    $ref: ./iamRoleStatements.json\n\nfunctions:\n  hello:\n    description: Detect an upload to S3\n    memorySize: 1024\n    timeout: 30\n    handler: handler.dispatch\n    events:\n      - s3:\n          bucket: s3-notification\n          event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    S3BucketS3notification:\n      Properties:\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods:\n                - PUT\n              AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\""]},{"id":114938989,"files":["service: sp-aws-direct-to-s3\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"*\"\n      Resource: \"*\"\n\nfunctions:\n  requestUploadUrl:\n    handler: handler.requestUploadUrl\n    events:\n      - http:\n          path: requestUploadUrl\n          method: post\n          cors: true\n\n  afterSend:\n    handler: handler.afterSend\n\nresources:\n  Resources:\n    NewResource:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: local-bucket\n\ncustom:\n  optimize:\n    minify: true\n    presets: [\"env\"]\n  s3:\n    host: 0.0.0.0\n    port: 3030\n    directory: /tmp\n    cors: true\n    # Uncomment only if you already have a S3 server running locally\n    noStart: true\n\nplugins:\n  - serverless-plugin-optimize\n  - serverless-offline\n  - serverless-s3-local\n"]},{"id":120091209,"files":["service: serverless-nodejs-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: src/handler.hello\n    events:\n      - http:\n         path: hello\n         method: get\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack: ./webpack.config.js\n"]},{"id":119847433,"files":["service: serverless-kakao-bot\n\nframeworkVersion: \"=1.26.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-northeast-2\n  stage: ${opt:stage, 'prod'}\n  profile: admin\n\ncustom:\n  customDomain: \n    domainName: api.vulldozer.com\n    basePath: \"\"\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\nfunctions:\n  keyboard:\n    handler: api/keyboard.main\n    memorySize: 128\n    description: Initializing endpoint for Kakao REST API\n    events:\n      - http: GET keyboard\n  message:\n    handler: api/message.main\n    memorySize: 128\n    description: Answering API for Receiving Kakao Messages\n    events:\n      - http: POST message\n\nplugins:\n  - serverless-webpack\n  - serverless-domain-manager\n"]},{"id":119687562,"files":["service: alexa-sls-test-aws-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-west-2\n  versionFunctions: false\n\npackage:\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - alexaSkill\n","service: alexa-sls-test-azure-functions\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\npackage:\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: handler.alexa\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n","service: alexa-sls-test-gcf\n\nprovider:\n  name: google\n  runtime: nodejs\n  project: kb-tests\n  credentials: ~/.gcloud/key.json\n\nplugins:\n  - serverless-google-cloudfunctions\n\npackage:\n  exclude:\n    - node_modules/**\n  include:\n    - ../sharedApp.js\n\nfunctions:\n  alexa:\n    handler: alexa\n    events:\n      - http: path"]},{"id":117393815,"files":["service: eth-serverless-backend\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-west-2\n  environment: ${file(environment.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchWriteItem\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: arn:aws:dynamodb:*:*:table/*\n\nfunctions:\n  auth0Authorizer:\n    handler: handler.auth0Authorizer\n  createWallet:\n    handler: handler.createWallet\n    events:\n      - http:\n          path: wallet/create\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n  getWalletBalance:\n    handler: handler.getWalletBalance\n    events:\n      - http:\n          path: wallet/balance/\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n  getUserInfo:\n    handler: handler.getUserInfo\n    events:\n      - http:\n          path: user/get/\n          method: get\n          cors: true\n          authorizer:\n            name: auth0Authorizer\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: auth0ID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: auth0ID\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-secrets-plugin\n  - serverless-offline\n  \ncustom:\n  secrets: ${file(secrets.yml)}\n  dynamodb:\n    start:\n      port: 8000\n      migrate: true"]},{"id":111888121,"files":["service: ses-to-slack\n\nplugins:\n  - serverless-webpack\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-northeast-1\n\nfunctions:\n  handle:\n    handler: handler.handle\n"]},{"id":116940946,"files":["service: azure-beer-store\n\ncustom:\n  dbName: beerstore\n  collectionName: beer_list\n  storageAccountName: beerstore\n  containerName: blobs\n\nprovider:\n  name: azure\n  location: westeurope\n  environment:\n    DB_NAME: ${self:custom.dbName}\n    DB_COLLECTION_NAME: ${self:custom.collectionName}\n    DB_HOST: ${file(./serverless.env.yml):DB_HOST}\n    DB_KEY: ${file(./serverless.env.yml):DB_KEY}\n    BLOB_STORAGE_CONNECTION_STRING: ${file(./serverless.env.yml):BLOB_STORAGE_CONNECTION_STRING}\n    CONTAINER_NAME: ${self:custom.containerName}\n\nplugins:\n  - serverless-azure-functions\n\nfunctions:\n  graphql:\n    handler: api.graphql\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n      - http: true\n        x-azure-settings:\n          direction: out\n          name: res\n          methods:\n            - GET\n          authLevel: anonymous\n          route: graphql\n  import:\n    handler: blob.import\n    events:\n      - blob:\n        x-azure-settings:\n          name: item\n          path: ${self:custom.containerName}/{name}.csv\n          connection: BLOB_STORAGE_CONNECTION_STRING\n"]},{"id":115527128,"files":["service: topws-serverless\n\nplugins:\n  - serverless-webpack\n  - serverless-finch\n  - serverless-plugin-export-endpoints\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  webpack: ./config/webpack/serverless.js\n  webpackIncludeModules:\n    packagePath: './package.json'\n  client:\n    bucketName: ${self:service}-${self:custom.stage}-static\n    distributionFolder: static-dist\n  authorizer:\n    facebook:\n      name: authorizerFacebook\n      type: TOKEN\n      resultTtlInSeconds: 0\n      identitySource: method.request.header.Authorization\n      identityValidationExpression: Bearer (.*)\n  sns:\n    telegram: ${self:service}-telegram\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"TOPWSUsers\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"TOPWSConfig\", \"Arn\"] }\n    - Effect: Allow\n      Action:\n        - SNS:Publish\n      Resource:\n        - { \"Ref\": \"TOPWSTelegram\" }\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - logs:DescribeLogGroups\n        - logs:DescribeSubscriptionFilters\n        - logs:PutSubscriptionFilter\n      Resource: \"*\"\n  environment:\n    TABLE_USERS: { \"Ref\": \"TOPWSUsers\" }\n    TABLE_CONFIGURATION: { \"Ref\": \"TOPWSConfig\" }\n    SNS_TELEGRAM: { \"Ref\": \"TOPWSTelegram\" }\n    LAMBDA_SCRAPE: ${self:service}-${opt:stage, self:provider.stage}-user-scrape\n\nfunctions:\n  user-list:\n    handler: lambda/online.list\n    events:\n      - http:\n          path: users\n          method: get\n          cors: true\n\n  user-vote:\n    handler: lambda/online.vote\n    events:\n      - http:\n          path: users/{userId}/vote\n          method: put\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n\n  user-scrape:\n    handler: lambda/batch.scrape\n\n  config-get:\n    handler: lambda/configuration.get\n    events:\n      - http:\n          path: config/{configKey}\n          method: get\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n          request:\n            parameters:\n              paths:\n                configKey: true\n\n  config-list:\n    handler: lambda/configuration.list\n    events:\n      - http:\n          path: config\n          method: get\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n\n  config-set:\n    handler: lambda/configuration.set\n    events:\n      - http:\n          path: config\n          method: post\n          cors: true\n          authorizer: ${self:custom.authorizer.facebook}\n\n  authorizerFacebook:\n    handler: lambda/authorizer.facebook\n\n  telegram-handleMessage:\n    handler: lambda/telegram.handleMessage\n    events:\n     - http:\n        path: telegram\n        method: post\n\n  telegram-registerEndpoint:\n    handler: lambda/telegram.registerEndpoint\n\n  dispatchToTelegram:\n    handler: lambda/telegram.forwardSNS\n    events:\n      - sns:\n          arn:\n            Fn::Join:\n              - \"\"\n              - - \"arn:aws:sns:\"\n                - Ref: \"AWS::Region\"\n                - \":\"\n                - Ref: \"AWS::AccountId\"\n                - \":\"\n                - ${self:custom.sns.telegram}\n          topicName: ${self:custom.sns.telegram}\n\n  dispatchLogs:\n    handler: lambda/logs.handle\n    # events:\n    #   - cloudwatchLog: /aws/lambda/topws-serverless-${self:custom.stage}-*\n\n  subscribeToLogs:\n    handler: lambda/logs.subscribe\n    environment:\n      DEST_FUNC:\n        Fn::Join:\n          - \"\"\n          - - \"arn:aws:lambda:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":function:\"\n            - ${self:service}\n            - \"-\"\n            - ${self:custom.stage}\n            - \"-dispatchLogs\"\n    # events:\n    #   - cloudwatchEvent:\n    #       event:\n    #         source:\n    #           - aws.logs\n    #         detail-type:\n    #           - AWS API Call via CloudTrail\n    #         detail:\n    #           eventSource:\n    #             - logs.amazonaws.com\n    #           eventName:\n    #             - CreateLogGroup\n\nresources:\n  Resources:\n    TOPWSTelegram:\n      Type: AWS::SNS::Topic\n      Properties:\n        DisplayName: Telegram messages pipeline\n        TopicName: ${self:custom.sns.telegram}\n    TOPWSUsers:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    TOPWSConfig:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: key\n            AttributeType: S\n        KeySchema:\n          - AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    LambdaInvokePermission:\n      Type: AWS::Lambda::Permission\n      DependsOn: DispatchLogsLambdaFunction\n      Properties:\n        Action: lambda:InvokeFunction\n        FunctionName:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:lambda:\"\n              - Ref: \"AWS::Region\"\n              - \":\"\n              - Ref: \"AWS::AccountId\"\n              - \":function:\"\n              - ${self:service}\n              - \"-\"\n              - ${self:custom.stage}\n              - \"-dispatchLogs\"\n        Principal:\n          Fn::Join:\n            - \"\"\n            - - \"logs.\"\n              - Ref: \"AWS::Region\"\n              - \".amazonaws.com\"\n"]},{"id":117652204,"files":["service:\n  name: {{ projectName }}-{{ serviceName }}\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 16\n  environment: ${file(./env.yml):${self:provider.stage}}\npackage:\n  exclude:\n    - '*.js'\n    - '*.yml'\n  include:\n    - handler.js\n  excludeDevDependencies: false\nfunctions:\n  {{ functionName }}:\n    handler: handler.{{ functionName }}\n    events:\n      - http:\n          path: {{ httpPath }}\n          method: {{ httpMethod }}\n"]},{"id":117250796,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-aws-nodejs-boilerplate\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 10\n\n# you can overwrite defaults here\n  stage: dev\n  region: eu-central-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    SLS_DEBUG: \"*\"\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  app:\n    handler: src/app.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":91036107,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-plg-xprt-endpoints-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-export-endpoints\n\ncustom:\n  exportEndpoints:\n    path: './endpoints.json'\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: sls-plg-xprt-endpoints-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nplugins:\n  - serverless-plugin-export-endpoints\n\ncustom:\n  exportEndpoints:\n    path: './endpoints.json'\n  myDomain: \"api.mydomain.com\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n\nresources:\n  Resources:\n    APICertificate:\n      Type: \"AWS::CertificateManager::Certificate\"\n      DeletionPolicy: Retain\n      Properties:\n        DomainName: \"${self:custom.myDomain}\"\n    APIDomain:\n      Type: \"AWS::ApiGateway::DomainName\"\n      Properties:\n        CertificateArn:\n          Ref: APICertificate\n        DomainName: \"${self:custom.myDomain}\"\n    APIBasePathMapping:\n      Type: \"AWS::ApiGateway::BasePathMapping\"\n      Properties:\n        DomainName:\n          Ref: APIDomain\n        RestApiId:\n          Ref: ApiGatewayRestApi\n  Outputs:\n    CustomServiceEndpoint:\n      Value: \"https://${self:custom.myDomain}\"\n"]},{"id":116652126,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: form-recaptcha\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs6.10\n  profile: serverless\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action: \n        - \"ses:SendEmail\"\n      Resource: \"*\"\n\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  form:\n    handler: handler.form\n    description: Contact form submission + Recaptcha (To prevent Abuse). Finally, emails the form data.\n    memorySize: 128\n    timeout: 5\n    events:\n    - http:\n        path: form\n        method: post\n        cors:\n          origin: '*'\n          headers:\n            - Content-Type\n            - X-Amz-Date\n            - Authorization\n            - X-Api-Key\n            - X-Amz-Security-Token\n            - X-Amz-User-Agent\n          methods:\n            - OPTIONS\n            - POST\n          allowCredentials: false\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116040754,"files":["service: fastly-exporter\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ${opt:region, 'eu-west-1'}\n  stage: ${opt:stage, 'dev'}\n  environment:\n    FASTLY_TOKEN: ${env:FASTLY_TOKEN}\n    FASTLY_SERVICE: ${env:FASTLY_SERVICE}\n\nfunctions:\n  metrics:\n    handler: index.metrics\n    events:\n      - http:\n          path: metrics\n          method: get\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n"]},{"id":109114506,"files":["service: serverless-cat-detector\n\nprovider:\n  name: aws\n  region: eu-west-1\n  profile: appliscale-dev\n  runtime: nodejs6.10\n  tracing: true\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - rekognition:*\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"*\"\n    - Effect: Allow\n      Action:\n        - xray:*\n      Resource: \"*\"\n\nfunctions:\n  uploadcatpicture:\n    handler: src/upload.saveToS3\n    events:\n      - http:\n          path: upload\n          method: post\n          cors: true\n  getresults:\n    handler: src/results.getClassification\n    events:\n     - http:\n         path: results\n         method: get\n  catrekognition:\n    handler: src/classification.imgClassification\n\nresources:\n  Resources:\n    S3BucketServerlessDashCatDashDetectorDashImgDashRepo:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: ${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Event:  \"s3:ObjectCreated:*\"\n              Function:\n                \"Fn::GetAtt\": [CatrekognitionLambdaFunction, Arn]\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders: [\"*\"]\n              AllowedMethods: [\"GET\", \"PUT\"]\n              AllowedOrigins: [\"*\"]\n    CatrekognitionLambdaPermissionS3BucketMyBucketDevS3:\n      DependsOn:\n        - CatrekognitionLambdaFunction\n      Type: AWS::Lambda::Permission\n      Properties:\n        FunctionName:\n          \"Fn::GetAtt\": [ CatrekognitionLambdaFunction, Arn ]\n        Action: \"lambda:InvokeFunction\"\n        Principal: \"s3.amazonaws.com\"\n        SourceArn: \"arn:aws:s3:::${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}\"\n    CatStatusDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: 'name'\n            AttributeType: S\n        KeySchema:\n          - AttributeName: 'name'\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        TableName: \"${self:custom.catDetectorConfig.serverless_cat_detector_results_table}\"\n\nplugins:\n  - serverless-s3-remover\n  - serverless-plugin-tracing\n\ncustom:\n  catDetectorConfig: ${file(src/config.js)}\n  remover:\n    buckets:\n      - ${self:custom.catDetectorConfig.serverless_cat_detector_img_repo}"]},{"id":113008476,"files":["service: molog\n\n\nplugins:\n  - serverless-domain-manager\n  - serverless-finch\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: log.pho.im\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  client:\n    bucketName: static.pho.im\n    distributionFolder: client/dist\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n  memorySize: 128\n  timeout: 5\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    SLS_STAGE: ${self:custom.stage}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:Query\n        - dynamodb:Scan\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n      Effect: Allow\n\nfunctions:\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /{component}/{env}/\n          method: get\n          cors: true\n  get:\n    handler: get/index.handler\n    events:\n      - http:\n          path: /{component}/{env}/{id}\n          method: get\n  list:\n    handler: list/index.list\n    events:\n      - http:\n          path: /{component}/{env}/logs\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    LogsDB:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: createdAt\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"]},{"id":112904215,"files":["service: aws-simple-file-sharing\n\ncustom:\n  bucket: file-sharing-bucket\n  table: file-sharing-table\n\nresources:\n  Resources:\n    FileSharingDynamoTable:\n      Type: \"AWS::DynamoDB::Table\"\n#      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: \"itemId\"\n            AttributeType: \"S\"\n        KeySchema:\n          -\n            AttributeName: \"itemId\"\n            KeyType: \"HASH\"\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.table}\n    FileSharingBucket:\n      Type: \"AWS::S3::Bucket\"\n      Properties:\n        AccessControl: PublicRead\n        BucketName: ${self:custom.bucket}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  # put the default region here (should be according to your profile region)\n  region: us-west-2\n  # put the profile you created configuring your AWS CLI (if you don't have a\n  # profile delete this line to get the default configuration)\n  profile: mimurawil@gmail.com\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        Fn::GetAtt:\n          - FileSharingDynamoTable\n          - Arn\n\nfunctions:\n  saveImage:\n    handler: handlers/post.saveImage\n    description: Saves image into S3 and store some data in DynamoDB\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      BUCKET: ${self:custom.bucket}\n      TABLE: ${self:custom.table}\n      REGION: ${self:provider.region}\n    events:\n      - http:\n          path: images\n          method: post\n          cors: true\n  getImages:\n    handler: handlers/get.listImages\n    description: Lists all images in S3 and data in DynamoDB\n    memorySize: 128\n    timeout: 3\n    runtime: nodejs6.10\n    environment:\n      TABLE: ${self:custom.table}\n    events:\n      - http:\n          path: images\n          method: get\n          cors: true\n"]},{"id":104753419,"files":["service: serverless-aws-nodejs-blueprint\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${self:custom.params.stage}\n  region: ${self:custom.params.region}\n\nplugins:\n  - serverless-webpack\n  - serverless-s3-local\n  - serverless-dynamodb-local\n  - serverless-dynamodb-autoscaling\n  - serverless-offline\n\ncustom:\n  params: ${file(./serverless.params.yml)}\n  dynamodb:\n    start:\n      port: ${self:custom.params.local.dynamodb.port}\n      migrate: true\n      seed: true\n    seed:\n      users:\n        sources:\n          - table: users\n            sources: [./data/users.json]\n  s3:\n    port: ${self:custom.params.local.s3.port}\n  capacities:\n    - table: UsersDynamoDBTable\n      read:\n        minimum: ${self:custom.params.capacities.users.read.minimum}\n        maximum: ${self:custom.params.capacities.users.read.maximum}\n        usage: ${self:custom.params.capacities.users.read.usage}\n      write:\n        minimum: ${self:custom.params.capacities.users.write.minimum}\n        maximum: ${self:custom.params.capacities.users.write.maximum}\n        usage: ${self:custom.params.capacities.users.write.usage}\n\nfunctions:\n  users:\n    handler: src/functions/users/index.handler\n    role: UsersRole\n    integration: lambda\n    events:\n      - http:\n          path: /users\n          method: post\n          integration: lambda\n          request:\n            template:\n              application/json: ${file(./deployment/api/users-post-template.json)}\n\nresources:\n  Resources:\n    UsersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: users\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.params.capacities.users.read.default}\n          WriteCapacityUnits: ${self:custom.params.capacities.users.write.default}\n    UsersRole: ${file(./deployment/iam/users-role.yml)}\n    LogsS3Bucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: logs\n","accountId: 1234567890 # Your account id\nstage: dev\nregion: us-east-1\nlocal:\n  dynamodb:\n    port: 8000\n  s3:\n    port: 4569\ncapacities:\n  users:\n    read:\n      default: 5\n      minimum: 2\n      maximum: 30\n      usage: 0.7\n    write:\n      default: 5\n      minimum: 2\n      maximum: 30\n      usage: 0.7\n"]},{"id":111494730,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: hello-serverless\n\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-northeast-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":111531741,"files":["service: logging\n\nprovider:\n  name: openwhisk\n\ncustom:\n  config: ${file(config.json)}\n\nfunctions:\n  logstash-forwarder:\n    handler: dist/index.main\n    parameters:\n      actions: ${self:custom.config.actions}\n      from: ${self:custom.config.from}\n      logstash: ${self:custom.config.logstash}\n    events:\n      - schedule: cron(* * * * *)\n\nplugins:\n  - serverless-openwhisk\n"]},{"id":110745904,"files":["service: serverless-fido\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    SLACK_CLIENT_ID: ${SLACK_CLIENT_ID}\n    SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET}\n\nfunctions:\n  authorization:\n    handler: handler.authorization\n    events:\n      - http:\n          path: slack/authorization\n          method: get\n\n  fido:\n    handler: handler.fido\n    events:\n      - http:\n          path: slack/fido\n          method: post\n"]},{"id":110399069,"files":["service: podcasts\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverless\n  region: us-west-2\n\nfunctions:\n  podcast:\n    handler: index.handler\n    events:\n      - alexaSkill"]},{"id":108621610,"files":["service: aws-ses-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - ses:SendEmail\n      Resource: \"*\"\n\nfunctions:\n  sendEmail:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: sendEmail\n          method: post\n"]},{"id":109021390,"files":["# Service Name\nservice: vws\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: v1\n  # profile: <PROFILE_NAME>\n  environment:\n    JCDECAUX_KEY: ${file(./config/secret.yml):JCDECAUX_KEY}\n    VELIB_TABLE: ${self:resources.Resources.velibTable.Properties.TableName}\n    VELIB_DETAILS_TABLE: ${self:resources.Resources.velibDetailsTable.Properties.TableName}\n    GOBEE_DETAILS_TABLE: ${self:resources.Resources.gobeeDetailsTable.Properties.TableName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource:\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/velibTable*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/velibDetailsTable*\"]]\n        - \"Fn::Join\": [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/gobeeDetailsTable*\"]]\n\npackage:\n  individually: true\n  exclude:\n    - test/**\n    - .git/**\n\nfunctions:\n  velib:\n    handler: src/velib/src/index.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /velib\n          method: GET\n          cors: true\n  velibStations:\n    handler: src/velib/src/stations.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /velib/stations\n          method: GET\n          cors: true\n  gobeeParis:\n    handler: src/velib/src/gobeeParis.handler\n    package:\n      exclude: ./src/**\n      include: ./src/velib/**\n    events:\n      - schedule:\n          rate: cron(0 * * * ? *)\n      - http:\n          path: /gobee/bikes/paris\n          method: GET\n          cors: true\n\nresources:\n  Resources:\n    velibTable: # Store global statistics on all stations\n      Type: AWS::DynamoDB::Table \n      Properties:\n        TableName: velibTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n    velibDetailsTable: # Store statistics by stations\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: velibDetailsTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n    gobeeDetailsTable: # Store statistics by stations\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: gobeeDetailsTable\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 2\n          WriteCapacityUnits: 2\n\ncustom:\n  dynamodb:\n    start:\n      migrate: true\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-dynamodb-local\n  - serverless-offline"]},{"id":107680795,"files":["service: events\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  cron:\n    handler: handler.cron\n    events:\n      - schedule: rate(1 minute)\n  api:\n    handler: handler.api\n    events:\n      - http:\n          path: lambda/hello\n          method: GET\n  # log:\n  #   handler: handler.log\n  #   events:\n  #     - cloudwatchLog: '/aws/lambda/events-dev-cron'","service: graphql-offline\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n  dynamodb:\n    start:\n      port: 8000\n      inMemory: true\n      migrate: true\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    environment:\n      DB_TABLE: ${self:custom.dbTable}\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n","service: graphql\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    environment:\n      DB_TABLE: { \"Ref\": \"DbTable\" }\n    events:\n      - http:\n          path: graphql\n          method: GET\n\nresources:\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: key\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: key\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n","service: intro-sls\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  hello:\n    handler: handler.hello\n","service: rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n\nfunctions:\n  nano-user-get:\n    handler: handler.getUser\n    events:\n      - http: GET nano/users\n  nano-user-delete:\n    handler: handler.deleteUser\n    events:\n      - http: DELETE nano/users\n  nano-cart-get:\n    handler: handler.getCart\n    events:\n      - http: GET nano/carts\n  nano-cart-delete:\n    handler: handler.deleteCart\n    events:\n      - http: DELETE nano/carts\n  micro-user:\n    handler: handler.users\n    events:\n      - http: GET micro/users\n      - http: DELETE micro/users\n  micro-cart:\n    handler: handler.carts\n    events:\n      - http: GET micro/carts\n      - http: DELETE micro/carts\n  monolith:\n    handler: handler.all\n    events:\n      - http: GET monolith/users\n      - http: DELETE monolith/users\n      - http: GET monolith/carts\n      - http: DELETE monolith/carts\n","service: step-functions\n\nplugins:\n  - serverless-step-functions\n  - serverless-pseudo-parameters\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - states:StartExecution\n      Resource:  ${self:resources.Outputs.TrafficLightStateMachineARN.Value}\n\nfunctions:\n  entrypoint:\n    handler: handler.entrypoint\n    environment:\n          STATE_MACHINE_ARN: { \"Ref\": \"TrafficLightStateMachine\" }\n    events:\n      - http:\n          path: trafficlight\n          method: get\n          cors: true\n          private: false\n  on-red:\n    handler: handler.red\n  on-green:\n    handler: handler.green\n  on-yellow:\n    handler: handler.yellow\n  on-response:\n    handler: handler.response\n\nstepFunctions:\n  stateMachines:\n    TrafficLightStateMachine:\n      name: TrafficLightStateMachine\n      definition:\n        Comment: \"An example of the Amazon States Language\"\n        StartAt: ReadState\n        States:\n          ReadState:\n            Type: Choice\n            Choices:\n            - Variable: \"$.color\"\n              StringEquals: \"red\"\n              Next: RedState\n            - Variable: \"$.color\"\n              StringEquals: \"yellow\"\n              Next: YellowState\n            - Variable: \"$.color\"\n              StringEquals: \"green\"\n              Next: GreenState\n            Default: DefaultState\n          RedState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-red\n            Next: WaitState\n          GreenState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-green\n            Next: WaitState\n          YellowState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-yellow\n            Next: WaitState\n          WaitState:\n            Type: Wait\n            TimestampPath: \"$.wait\"\n            Next: ResponseState\n          DefaultState:\n            Type: Fail\n            Cause: \"No Color Matches!\"\n          ResponseState:\n            Type: Task\n            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-on-response\n            End: true\n\nresources:\n  Outputs:\n    TrafficLightStateMachineARN:\n      Description: The ARN of the Traffic Light state machine\n      Value:\n        Ref: TrafficLightStateMachine","service: streams\n\ncustom:\n  dbTable: ${self:service}-${self:provider.stage}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, 'dev'}\n  region: eu-west-1\n  memorySize: 128\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"DbTable\", \"Arn\" ] }\n        \nfunctions:\n  dynamo-add:\n    handler: handler.dynamoAdd\n    environment:\n      DB_TABLE: { \"Ref\": \"DbTable\" }\n  dynamo-listener:\n    handler: handler.dynamoListener\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - DbTable\n              - StreamArn\n\nresources:\n  Outputs:\n    DbTableStreamArn:\n      Description: \"Db Table Name\"\n      Value: \n        Fn::GetAtt: [ DbTable, StreamArn ]\n      Export:\n        Name: ExportDbTableStreamArn\n    DbTableName:\n      Description: \"Db Table Name\"\n      Value:\n        Ref: DbTable\n  Resources: \n    DbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Delete\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: '${self:custom.dbTable}'\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE"]},{"id":109226681,"files":["service: serverless-wechat\n\nplugins:\n  - serverless-domain-manager\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 128\n  timeout: 120\n  region: us-east-1\n\nfunctions:\n  runserver:\n    handler: handler.runserver\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n    environment:\n      TOKEN: ${file(./config.yml):TOKEN}\n      APP_ID: ${file(./config.yml):APP_ID}\n      AESKey: ${file(./config.yml):AESKey}\n\ncustom:\n  customDomain:\n    domainName: wechat.wdsm.io\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n"]},{"id":108994625,"files":["# Serverless main config file\n\nservice: aws-nodejs\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  runReport:\n    handler: handler.runReport"]},{"id":95390062,"files":["service: chris-hutchinson-svelte\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${opt:stage, self:custom.stage}\n  region: ${opt:region, self:custom.region}\n  profile: ${opt:profile}\n  environment:\n    STATIC_RESOURCE_DOMAIN: ${file(./config/${self:provider.stage}.env.yml):static_domain}\n\nfunctions:\n  app:\n    handler: handler.app\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /index.html\n          method: get\n  file:\n    handler: handler.file\n    events:\n      - http:\n          path: /app.js\n          method: get\n      - http:\n          path: /sw.js\n          method: get\n      - http:\n          path: /main.css\n          method: get\n      - http:\n          path: /manifest.json\n          method: get\n\npackage:\n  exclude:\n    - node_modules/babel-core/**\n    - node_modules/babel-loader/**\n    - node_modules/babel-plugin-external-helpers/**\n    - node_modules/babel-plugin-*/**\n    - node_modules/babel-preset-env/**\n    - node_modules/rollup/**\n    - node_modules/rollup-plugin-babel/**\n    - node_modules/rollup-plugin-copy/**\n    - node_modules/rollup-plugin-livereload/**\n    - node_modules/rollup-plugin-serve/**\n    - node_modules/rollup-plugin-svelte/**\n    - node_modules/rollup-plugin-uglify/**\n    - node_modules/rollup-watch/**\n    - node_modules/serverless-offline/**\n    - node_modules/serverless-plugin-custom-domain/**\n    - node_modules/svelte-loader/**\n    - node_modules/uglifyjs-webpack-plugin/**\n    - node_modules/webpack/**\n\ncustom:\n  stage: local\n  region: eu-west-1\n  \nplugins:\n  - serverless-offline"]},{"id":97892221,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice:\n  name: email-service\n  description: 'A service that sends out emails.'\n\ncustom:\n  defaultStage: prod\n  currentStage: ${opt:stage, self:custom.defaultStage}\n  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${self:custom.currentStage}\n  region: ${self:custom.currentRegion}\n  environment:\n    MAILGUN_APIKEY: ${file(./config.${self:custom.currentStage}.json):MAILGUN_APIKEY}\n    MAILGUN_DOMAIN: ${file(./config.${self:custom.currentStage}.json):MAILGUN_DOMAIN}\n\nfunctions:\n  send:\n    handler: handler.sendEmail\n    events:\n      - http:\n          path: email\n          method: post\n"]},{"id":106674404,"files":["service: elmServerless\npackage:\n  exclude:\n    - secrets.yml\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  secrets: ${file(secrets.yml):${self:custom.stage}}\n\nprovider:\n  name: aws\n  stage: ${opt:stage, 'dev'}\n  runtime: nodejs6.10\n  region: eu-west-2\n  profile: default\n  environment:\n    GLOBAL_VAR:\"${self:custom.secrets.GLOBAL_VAR}\"\n    ENV_DEPENDENT_VAR:\"${self:custom.secrets.ENV_DEPENDENT_VAR}\"\n\nfunctions:\n  hello:\n    handler: app/handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n          cors: true\n"]},{"id":106115776,"files":["service: mailer\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  send:\n    handler: handler.send\n    events:\n      - http:\n          path: send\n          method: post\n          cors: true\n          integration: lambda\n          response:\n            headers:\n              Access-Control-Allow-Origin: \"'*'\"\n"]},{"id":106253060,"files":["# Welcome to Serverless!\n#\n\nservice: scalingRDS\n\ncustom:\n  MasterEndpoint: \"${env:MasterEndpoint}\"\n  HostedZoneId: \"${env:HostedZoneId}\"\n  RecordName: \"${env:RecordName}\"\n  ReplicaEndpoint: \"${env:ReplicaEndpoint}\"\n  InstanceIdentifier: \"${env:InstanceIdentifier}\"\n  InstanceClassSmall: \"${env:InstanceClassSmall}\"\n  InstanceClassBig: \"${env:InstanceClassBig}\"\n  NotificationSNS: \"${env:NotificationSNS}\"\n  MsgError: \"${env:MsgError}\"\n  MsgRoutingToMaster: \"${env:MsgRoutingToMaster}\"\n  MsgRoutingToReplica: \"${env:MsgRoutingToReplica}\"\n  MsgScaleUp: \"${env:MsgScaleUp}\"\n  MsgScaleDown: \"${env:MsgScaleDown}\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: \"${env:ENVIRONMENT}\"\n  region: \"${env:AWS_REGION}\"\n  environment:\n    NotificationSNS: \"${self:custom.NotificationSNS}\"\n    MsgError: \"${self:custom.MsgError}\"\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"route53:ChangeResourceRecordSets\"\n      Resource: \"arn:aws:route53:::hostedzone/${self:custom.HostedZoneId}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"rds:ModifyDBInstance\"\n      Resource: \"arn:aws:rds:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:db:${self:custom.InstanceIdentifier}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"SNS:Publish\"\n      Resource: \"${self:custom.NotificationSNS}\"\n\nfunctions:\n  routingToMaster:\n    handler: route53.changeRecord\n    environment:\n      Msg: \"${self:custom.MsgRoutingToMaster}\"\n      HostedZoneId: \"${self:custom.HostedZoneId}\"\n      RecordName: \"${self:custom.RecordName}\"\n      RecordValue: \"${self:custom.MasterEndpoint}\"\n    events:\n      - schedule: cron(00 08 ? * TUE,THU *)\n      - schedule: cron(00 15 ? * TUE,THU *)\n\n  scaleUp:\n    handler: rds.scale\n    environment:\n      Msg: \"${self:custom.MsgScaleUp}\"\n      InstanceIdentifier: \"${self:custom.InstanceIdentifier}\"\n      InstanceClass: \"${self:custom.InstanceClassBig}\"\n    events:\n      - schedule: cron(05 08 ? * TUE,THU *)\n\n  scaleDown:\n    handler: rds.scale\n    environment:\n      Msg: \"${self:custom.MsgScaleDown}\"\n      InstanceIdentifier: \"${self:custom.InstanceIdentifier}\"\n      InstanceClass: \"${self:custom.InstanceClassSmall}\"\n    events:\n      - schedule: cron(05 15 ? * TUE,THU *)\n\n  routingToReplica:\n    handler: route53.changeRecord\n    environment:\n      Msg: \"${self:custom.MsgRoutingToReplica}\"\n      HostedZoneId: \"${self:custom.HostedZoneId}\"\n      RecordName: \"${self:custom.RecordName}\"\n      RecordValue: \"${self:custom.ReplicaEndpoint}\"\n    events:\n      - schedule: cron(15 08 ? * TUE,THU *)\n      - schedule: cron(15 15 ? * TUE,THU *)\n"]},{"id":105284845,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: notes-app-api # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\n# Use serverless-webpack to transpile ES6+\nplugins:\n  - serverless-webpack\n\n# Enable bundling & auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# You can overwrite defaults here\n  stage: prod\n  region: us-east-2\n\n# You can add statements to the Lambda function's IAM Role here\n# Grant Lambda functions with permissions to access DynamoDB.\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-2:*:*\"\n\n# You can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# You can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  # The HTTP API endpoint which calls main() in the create API to create notes\n  create:\n    handler: create.main\n    events:\n      - http:\n          # url path is /notes\n          path: notes\n          # POST request\n          method: post\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the get API to retrieve notes\n  get:\n    handler: get.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: get\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the get API to retrieve a\n  # list of notes\n  list:\n    handler: list.main\n    events:\n      - http:\n          # url path is /notes\n          path: notes\n          # POST request\n          method: get\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the update API to update notes\n  update:\n    handler: update.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: put\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n  # The HTTP API endpoint which calls main() in the delete API to delete notes\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          # url path is /notes with a parameter detailing the noteId\n          path: notes/{id}\n          # POST request\n          method: delete\n          # allow CORS\n          cors: true\n          # authenticate using the AWS IAM role\n          authorizer: aws_iam\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":104004733,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: simplepipe\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  pipe:\n    handler: handler.pipe\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/pipe'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":104670846,"files":["service:\n  name: weshare-with-webtask\n\nprovider:\n  name: webtasks\n  environment:\n    RETHINKDB_SERVER: \"${env:RETHINKDB_SERVER, opt:rethinkdb-server, self:provider.defaults.RETHINKDB_SERVER}\"\n  defaults:\n    RETHINKDB_SERVER: \"127.0.0.1\"\n\nfunctions:\n  main:\n    handler: handler\n\nplugins:\n  - '@webtask/serverless-webtasks'\n"]},{"id":104636922,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: bitcoin-trading-dca-serverless # NOTE: update this with your service name\n\n# Use the serverless-webpack plugin to transpile ES6\nplugins:\n  - serverless-webpack\n\n# Enable auto-packing of external modules\ncustom:\n  webpackIncludeModules: true\n  logsBucket: myBucket\n  logsFile: myLog\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: eu-west-1\n  iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n            - \"s3:PutObject\"\n            - \"s3:GetObject\"\n        Resource: { \"Fn::Join\" : [ \"\", [ \"arn:aws:s3:::${self:custom.logsBucket}\", \"/*\" ] ] }\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  bitcoin:\n    handler: handler.start\n    environment:\n        KRAKEN_KEY: myKrakenKey\n        KRAKEN_SECRET: myKrakenSecret\n        INVESTMENT_AMOUNT: 11.66\n        ASSETS_PAIR: XXBTZEUR\n        BUCKET: ${self:custom.logsBucket}\n        LOG_FILE: ${self:custom.logsFile}\n    events:\n        - schedule: cron(0 10 * * ? *)\n    timeout: 50\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":104579425,"files":["service: email-chk\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n\nfunctions:\n  api:\n    handler: handler.api\n    events:\n      - http:\n          path: /\n          method: get"]},{"id":103734508,"files":["service: serverless-develop-babel-example\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\ncustom:\n  develop:\n    middleware:\n      - npm run build\n    buildPath: build\n    sourcePath: src\n\nplugins:\n  - /Users/Rafal/Node/serverless-develop/index # Change to your absolute dir :P\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - ./build/**\n\nfunctions:\n  hello:\n    handler: build/src/handler.hello\n    events:\n      - http: GET /hello\n","service: serverless-develop-basic-demo\n\nplugins:\n<<<<<<< HEAD\n  - /Users/Rafal/Node/serverless-develop/index # Change to your absolute dir :P\n=======\n  - serverless-develop\n>>>>>>> 8cfae539003fffcd902b0ff40036107091942a69\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: withDependency.hello\n    events:\n        - http: GET /with\n  handler2:\n    handler: withoutDependency.hello\n    events:\n        - http: GET /without\n"]}]