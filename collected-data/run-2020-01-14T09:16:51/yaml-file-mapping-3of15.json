[{"id":96041781,"files":["service: travis-webhook\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  function:\n    handler: handler.webhook\n    events:\n      - http:\n          path: index\n          method: post\n          cors: true\n    environment:\n      WEBHOOK: /api/webhooks/${opt:api}"]},{"id":95879336,"files":["service: aws-lambda-dynamodb-trigger\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:DescribeStream\n        - dynamodb:ListStreams\n      Resource:\n        Fn::GetAtt: [DynamoDBTableUser, StreamArn]\n    - Effect: Allow\n      Action:\n        - dynamodb:BatchWriteItem\n      Resource:\n        Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTableUserReplica]]\n\nfunctions:\n  trigger:\n    handler: functions/trigger/trigger.handler\n    environment:\n      TABLE_REPLICA:\n        Ref: DynamoDBTableUserReplica\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    # DynamoDB table\n    DynamoDBTableUser:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-user-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    # Stream Event for User table\n    EventTableUser:\n      DependsOn: DynamoDBTableUser\n      Type: AWS::Lambda::EventSourceMapping\n      Properties:\n        BatchSize: 25\n        EventSourceArn:\n          Fn::GetAtt: [DynamoDBTableUser, StreamArn]\n        FunctionName:\n          Fn::GetAtt: [TriggerLambdaFunction, Arn]\n        StartingPosition: TRIM_HORIZON\n    # DynamoDB table replica\n    DynamoDBTableUserReplica:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-user-replica-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":95312966,"files":["service: doStuff\n\nplugins:\n  - serverless-plugin-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n#  region: us-east-1 (feel free to change AWS' default region)\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  healthCheck:\n    handler: handler.healthCheck\n    events:\n      - http:\n          path: healthCheck\n          method: get\n          cors: true\n\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":94903019,"files":["service: serverless-boilerplate\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: ${env:STAGE}\n  region: ${env:REGION}\n  versionFunctions: false\n  memorySize: 512\n  timeout: 10\n  environment:\n    TABLE_MENU:\n      Ref: DynamoDBTable\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n      Resource:\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable]]\n        - Fn::Join: ['', ['arn:aws:dynamodb:${self:provider.region}:', Ref: AWS::AccountId, ':table/', Ref: DynamoDBTable, '/index/*']]\n\nfunctions:\n  api:\n    handler: functions/hello/hello.handler\n    events:\n      - http:\n          path: hello\n          method: get\n\npackage:\n  exclude:\n    - ./**\n  include:\n    - functions/**\nplugins:\n  - serverless-plugin-include-dependencies\n\nresources:\n  Resources:\n    DynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}-table\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: secondaryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes: \n          - IndexName: secondaryIndex\n            KeySchema: \n              - AttributeName: secondaryId\n                KeyType: HASH                \n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput: \n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n"]},{"id":94660037,"files":["service: lambda-webpack\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n          integration: lambda"]},{"id":93916031,"files":["service: shortenUrl\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  devDynamoCapacity:\n    ReadCapacityUnits: 1\n    WriteCapacityUnits: 1\n  prodDynamoCapacity:\n    ReadCapacityUnits: 5\n    WriteCapacityUnits: 5\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    SLS_STAGE: ${self:custom.stage}\n    DDB_TABLE: {Ref: LinkDB}\n  iamRoleStatements:\n    - Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n      Resource:\n        \"Fn::Join\":\n          - \"\"\n          -\n            - \"arn:aws:dynamodb:\"\n            - Ref: \"AWS::Region\"\n            - \":\"\n            - Ref: \"AWS::AccountId\"\n            - \":table/\"\n            - Ref: LinkDB\n      Effect: Allow\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n\nresources:\n  Resources:\n    LinkDB:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slug\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slug\n            KeyType: HASH\n        ProvisionedThroughput: ${self:custom.${self:custom.stage}DynamoCapacity}\n"]},{"id":89025754,"files":["---\nservice: the-real-donald-trump\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n  stage: dev\n  region: eu-west-1\n\npackage:\n  exclude:\n    - package.json\n\nfunctions:\n  alexa-skill:\n    handler: index.handler\n    events:\n      - alexaSkill\n"]},{"id":93975903,"files":["service: serverless-urlshortener\n\nframeworkVersion: \">=1.8.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  main:\n    handler: main/index.handler\n    events:\n      - http:\n          path: /\n          method: get\n  create:\n    handler: create/index.handler\n    events:\n      - http:\n          path: /\n          method: post\n  redirect:\n    handler: redirect/index.handler\n    events:\n      - http:\n          path: /{slug}\n          method: get\n    environment:\n      URL_INSTALL: https://serverless.com/framework/docs/providers/aws/guide/installation/\n      URL_SERVERLESS: https://serverless.com/\n      URL_AWS: https://aws.amazon.com/\n\n"]},{"id":92883295,"files":["service: droid-race\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: kits\n  region: eu-west-1\n  environment:\n    IOT_ENDPOINT: \"a1mwbl2w3pece2.iot.eu-west-1.amazonaws.com\"\n    RACE_TABLE: \"${self:service}-${opt:stage, self:provider.stage}-races\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:Scan\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RACE_TABLE}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RACE_TABLE}/stream/2017-05-28T06:53:38.585\"\n    - Effect: Allow\n      Action: iot:*\n      Resource: \"arn:aws:iot:${opt:region, self:provider.region}:*:*\"\n\npackage:\n  include:\n    - dao/race-dao.js\n\nfunctions:\n  alexa:\n    handler: functions/alexa.control\n    events:\n      - alexaSkill\n  create:\n    handler: functions/create.create\n    events:\n      - http:\n          path: races\n          method: post\n          cors: true\n  end:\n    handler: functions/end.end\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/things/timer/shadow/update/accepted' WHERE state.reported.endSensor = 1\"\n          enabled: true\n  list:\n    handler: functions/list.list\n    events:\n      - http:\n          path: races\n          method: get\n          cors: true\n  start:\n    handler: functions/start.start\n    events:\n      - iot:\n          sql: \"SELECT * FROM '$aws/things/timer/shadow/update/accepted' WHERE state.reported.startSensor = 1\"\n          enabled: true\n  stream:\n    handler: functions/stream.stream\n\nresources:\n  Resources:\n    RaceDynamoDbTable:\n      Type: \"AWS::DynamoDB::Table\"\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: \"NEW_AND_OLD_IMAGES\"\n        TableName: \"${self:provider.environment.RACE_TABLE}\"\n\n    RaceStreamEventSourceMappingDynamoDbTable:\n      Type: AWS::Lambda::EventSourceMapping\n      DependsOn: IamRoleLambdaExecution\n      Properties:\n        BatchSize: 10\n        EventSourceArn:\n          Fn::GetAtt:\n            - RaceDynamoDbTable\n            - StreamArn\n        FunctionName:\n          Fn::GetAtt:\n            - StreamLambdaFunction\n            - Arn\n        StartingPosition: TRIM_HORIZON\n        Enabled: True\n"]},{"id":93778643,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: index.handler\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":93208917,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ThreeScale\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  mockAPItraffic:\n    handler: handler.mockAPItraffic\n    environment:\n      API_URL: \"https://trade_insight_api-2445581301440.staging.apicast.io:443\"\n      USER_KEY: \"ef09d5dcced7a0791b496951f8e6a03c\"\n    events:\n      - schedule: rate(2 minutes)\n"]},{"id":93075777,"files":["service: serverless-hackweek\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: us-west-2\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n        - 's3:PutObject'\n        - 's3:PutObjectAcl'\n        - 's3:GetObject'\n        - 's3:GetObjectAcl'\n        - 's3:ListObject'\n      Resource:\n          - \"arn:aws:s3:::serverless-hackweek/*\"\n  apiKeys:\n    - mytestapikey\nplugins:\n  - serverless-run-function-plugin\n\nfunctions:\n  html2pdf:\n    handler: handler.html2pdf\n    events:\n      - http:\n          path: convert/html2pdf\n          method: post\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n  hellopost:\n    handler: handler.hello\n    events:\n      - http:\n          path: hellopost\n          method: post\n\nresources:\n  Resources:\n    NewResource:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: serverless-hackweek\n\n"]},{"id":92401390,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-app\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512\n  timeout: 60s\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  users-create:\n    handler: handler.create\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: users\n          method: post\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":85698420,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":91444813,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-boilerplate\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  individually: true\n  exclude:\n    - \"**/*\"\n\nfunctions:\n  boilerplate:\n    handler: dist/handler.boilerplate\n    package:\n      include:\n        - dist/**\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":90230143,"files":["service: starbird\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\nfunctions:\n  cron:\n    handler: handler.run\n    events:\n      - schedule: rate(1 minute)"]},{"id":80948184,"files":["service: mipmapper\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    MIPMAPPER_S3_BUCKET: ${self:resources.Resources.imageStorage.Properties.BucketName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:ListBucket\n        - s3:GetObject\n      Resource: arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*\n\npackage:\n  artifact: mipmapper.zip\n\nfunctions:\n  getUploadUrl:\n    handler: handler.getUploadUrl # required, handler set in AWS Lambda\n    name: ${self:provider.stage}-get_upload_url # optional, Deployed Lambda name\n    description: Gets a presigned URL for uploading an image # optional, Description to publish to AWS\n    memorySize: 512\n    timeout: 10\n    events:\n      - http:\n          path: images\n          method: POST\n          cors: true\n\nresources:\n  Resources:\n    imageStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.stage}-mipmapper-image-storage\n        CorsConfiguration:\n          CorsRules:\n            - AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - GET\n                - PUT\n    imageStorageReadonlyPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:resources.Resources.imageStorage.Properties.BucketName}\n        PolicyDocument: |\n          {\n            \"Statement\": [\n              {\n                \"Sid\":\"AddPerm\",\n                \"Effect\":\"Allow\",\n                \"Principal\": \"*\",\n                \"Action\":[\"s3:GetObject\"],\n                \"Resource\":[\"arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*\"]\n              }\n            ]\n          }\n"]},{"id":89476377,"files":["service: aws-nodejs\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements:\n   - Effect: \"Allow\"\n     Action:\n       - \"ecr:DescribeImages\"\n       - \"ecr:ListImages\"\n       - \"ecr:BatchDeleteImage\"\n     Resource: \"*\"\npackage:\n  exclude:\n    - node_modules/**\nfunctions:\n  purify:\n    handler: handler.index\n    events:\n      - schedule: rate(24 hours)\n    environment:\n      REPO_NAME: quikvideo-test\n      DELETE_THRESHOLD: 20\n      DELETE_AMOUNT: 10\n"]},{"id":89145076,"files":["service: hello-serverless\n\nprovider:\n  name: azure\n  location: West US\n\nplugins:\n  - serverless-azure-functions\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: true\n        x-azure-settings:\n          authLevel : anonymous\n\n"]},{"id":88916981,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-spike\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n\n# you can overwrite defaults here\n  stage: dev\n  region: ap-southeast-2\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}\"\n\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n  environment:\n    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n    name: ${self:service}-hello-${self:provider.stage}\n    description: Test serverless\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n    events:\n      - http:\n          path: hello\n          method: get\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n\n#    Define function environment variables here\n    environment:\n      NAME: Hin\n  \n  user:\n    handler: user.save\n    name: ${self:service}-saveUser-${self:provider.stage}\n    description: Save user to DynamoDB\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n    events:\n      - http:\n          path: users/create\n          method: post\n    environment:\n      ENV_USERS_TABLE: ${self:provider.environment.USERS_TABLE}  \n\n# you can add CloudFormation resource templates here\nresources:\n  Resources:\n    usersDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":86495649,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: statUp\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: us-east-1\n  stage: dev\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Resource: \"*\"\n      Action:\n        - \"kinesis:*\"\n\nplugins:\n  - serverless-offline\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  post:\n    handler: functions/post.handler\n    events:\n      - http:\n         path: /post\n         method: POST\n\n\n  getall:\n    handler: functions/getall.handler\n    events:\n      - http:\n         path: /getall\n         method: GET\n\n  update:\n    handler: functions/update.handler\n    events:\n      - http:\n         path: /update\n         method: PUT\n\n  delete:\n    handler: functions/delete.handler\n    events:\n      - http:\n         path: /delete\n         method: DELETE\n\n  stream:\n    handler: functions/stream.handler\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:us-east-1:tareq:stream/statup\n          batchSize: 100\n          startingPosition: LATEST\n          enabled: true\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":83222315,"files":["service: token\n\n# use the stage from the cli if provided, otherwise fallback to the one in provider\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  region: ${opt:region, self:provider.region}\n  tableName: ${self:service}_${self:custom.stage}_tokens\n\n  # tokens expire after 30 days\n  tokenExpiry: 2592000\n\n  # configure read and write capacity\n  rcu: 25\n  wcu: 25\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  memorySize: 128\n  iamRoleStatements:\n    - Effect: Allow\n      Action: # Gives permission on the DynamoDB table\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.tableName}\"\n  environment:\n    TABLE_NAME: ${self:custom.tableName}\n    TOKEN_EXPIRY: ${self:custom.tokenExpiry}\n\n  stage: dev\n  region: eu-west-2\n\npackage:\n  exclude:\n    - .idea/**\n    - .npmignore\n    - package.json\n    - node_modules/**\n    - tests/**\n    - docs/**\n    - README.md\n    - tools/**\n\nfunctions:\n  add:\n    handler: functions/add.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: put\n  get:\n    handler: functions/get.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: get\n  patch:\n    handler: functions/patch.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: patch\n  delete:\n    handler: functions/delete.handler\n    events:\n      - http:\n          path: /tokens/{id}\n          method: delete\n\nresources:\n  Resources:\n    tokenTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${self:custom.rcu}\n          WriteCapacityUnits: ${self:custom.wcu}\n"]},{"id":86615130,"files":["service: coworking-demo-csharp\nprovider:\n  name: aws\n  runtime: dotnetcore1.0\npackage:\n  artifact: bin/release/netcoreapp1.0/publish/deploy-package.zip\n\nfunctions:\n  hello:\n    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello\n    integration: lambda\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n","service: coworking-bl-nodejs\nprovider:\n  name: aws\n  runtime: nodejs6.10\nfunctions:\n  hello:\n    handler: handler.hello\n    integration: lambda\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true"]},{"id":85780833,"files":["service: conditions-perfect\nprovider:\n  name: aws\n  runtime: nodejs4.3\nfunctions:\n  checkConditions:\n    handler: handler.checkConditions\n    events:\n      # 5pm est everyday (9pm utc)\n      - schedule: cron(0 21 * * ? *)\n      - http: GET check\n"]},{"id":83765009,"files":["service: serverless-nodejs-archetype\nframeworkVersion: \"=1.9.0\"\n\nprovider:\n  name    : aws\n  runtime : nodejs6.10\n  region  : us-east-1\n  stage   : v1\n  versionFunctions: false\n  environment:\n    MY_ENV: service_env\n\nplugins:\n  - serverless-build-plugin\n\ncustom:\n  env_default: dev\n\nfunctions:\n  echo:\n    handler: dist/handler.echo\n    description: test function to echo contents of env, event and context\n    memorySize: 512 # optional, default is 1024\n    timeout: 10 # optional, default is 6\n    environment:\n      MY_ENV: ${opt:env, self:custom.env_default}\n    events:\n      - http:\n          method: post\n          path: echo/{providerID}/{proxy+}\n      - s3:\n          bucket: ${self:service}\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: ${self:functions.echo.environment.MY_ENV}\n            - suffix: .json\n","# method: file\n# tryFiles:\n#   - webpack.config.js\n#   - gulpfile.babel.js\n\nmethod: bundle\n\nsourceMaps : true\nbabel      : false # dist/ folder already transpile via npm scripts\nbabili     : false\nuglify     : false # Wont make a big difference on small projects\n\nmodules:\n  exclude: [\n    aws-sdk\n  ]\n\n  # deepExclude: # excluded from nested node_modules\n  #   - xmlbuilder # this breaks the build\n  #   - punycode # this breaks the build\n\nfunctions:\n  echo:\n    include:\n      - \"dist/**\"\n"]},{"id":83945787,"files":["frameworkVersion: \">=1.2.0 <2.0.0\"\n\nservice: image-resizer\n\nprovider:\n  name: aws\n  profile: personal\n  region: us-west-2\n  environment: ${file(./env.yml)}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:*\n      Resource: arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/photos/*\n  runtime: nodejs4.3\n\npackage:\n  exclude:\n    - .git/**\n\nfunctions:\n  resize:\n    handler: resizeHandler.resize\n    memorySize: 512\n    timeout: 90\n    events:\n      - sns: ${self:provider.environment.TOPIC_ARN}\n        #topicName: ${self:provider.environment.TOPIC_NAME}\n        #displayName: ${self:provider.environment.TOPIC_NAME}\n        #bucket: ${self:provider.environment.BUCKET_NAME}\n        #event: s3:ObjectCreated:*\n        #  rules:\n        #    #          - prefix: ${self:provider.environment.UPLOAD_PREFIX}\n        #    - suffix: .jpg\n    environment:\n      BUCKET_NAME: ${self:provider.environment.BUCKET_NAME}\n      UPLOAD_PREFIX: ${self:provider.environment.UPLOAD_PREFIX}\n      OUTPUT_PREFIX: ${self:provider.environment.OUTPUT_PREFIX}\n      MAX_X: ${self:provider.environment.MAX_X}\n      OUTPUT_SIZE: ${self:provider.environment.OUTPUT_SIZE}\n\n        #resources:\n        #  Resources:\n        #    SNSTopic:\n        #      Type: AWS::SNS::Topic\n        #      Properties:\n        #        DisplayName: ${self:provider.environment.TOPIC_NAME}\n        #        TopicName: ${self:provider.environment.TOPIC_NAME}\n"]},{"id":85613026,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-nodejs # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  hello:\n    handler: handler.hello\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":85539779,"files":["service: warm-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  1interval:\n    handler: interval1.ping\n  2interval:\n    handler: interval2.ping\n  3interval:\n    handler: interval3.ping\n  4interval:\n    handler: interval4.ping\n  5interval:\n    handler: interval5.ping\n  6interval:\n    handler: interval6.ping\n  7interval:\n    handler: interval7.ping\n  8interval:\n    handler: interval8.ping\n  9interval:\n    handler: interval9.ping\n  10interval:\n    handler: interval10.ping\n  11interval:\n    handler: interval11.ping\n  12interval:\n    handler: interval12.ping\n  13interval:\n    handler: interval13.ping\n  14interval:\n    handler: interval14.ping\n  15interval:\n    handler: interval15.ping\n  30interval:\n    handler: interval30.ping\n  45interval:\n    handler: interval45.ping\n  60interval:\n    handler: interval60.ping\n"]},{"id":83952149,"files":["service: convey\n\nprovider:\n  name: YOUR_PROVIDER\n  runtime: nodejs4.3\n  memorySize: 256\n\nstage: prod\nregion: YOUR_REGION\n\nfunctions:\n  index:\n    handler: handler.index\n    environment: ${file(env.yml)}\n    events:\n      - http:\n          path: index\n          method: post"]},{"id":84730252,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-scheduler # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\npackage:\n  include:\n    - .env\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  cron:\n    handler: handler.run\n    memorySize: 128\n    environment:\n      URL: 'http://www.example.com/'\n    events:\n      - schedule:\n          name: scheduler\n          description: 'scheduled rate is about 10 minutes'\n          rate: rate(10 minutes)\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n","# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http: \n          path: webhook\n          method: post\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":82019943,"files":["service: bluesky-api # NOTE: update this with your service name\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  apiKeys:\n    - bluesky_api_key\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:PutItem\n      Resource: arn:aws:dynamodb:*:*:table/bluesky_pmdata\nfunctions:\n  ping:\n    handler: index.ping\n    events:\n      - http:\n          path: ping\n          method: get\n  get:\n    handler: index.get\n    events:\n      - http:\n          path: get/{device_id}/interval/{from}/{to}\n          method: get\n          request:\n            parameters:\n              paths:\n                device_id: true\n                from: true\n                to: true\n    memorySize: 128\n  put:\n    handler: index.put\n    events:\n      - http:\n          path: put\n          method: put\n          private: true\n    memorySize: 128\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: bluesky_pmdata\n        AttributeDefinitions:\n          - AttributeName: device_id\n            AttributeType: S\n          - AttributeName: timestamp\n            AttributeType: N\n        KeySchema:\n          - AttributeName: device_id\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":72980945,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: aws-lambdaServerless-bl # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: default\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"s3:*\"\n      Resource: '*'\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  getComment:\n    handler: handler.getComment\n\n      #    The following are a few example events you can configure\n      #    NOTE: Please make sure to change your handler code to work with those events\n      #    Check the event documentation for details\n    events:\n      - http:\n          path: comments/{id}\n          method: get\n          integration: lambda\n          request:\n            parameters:\n              querystrings:\n                id: true\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n              Content-Disposition: integration.response.header.Content-Disposition\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n  commentParser:\n    handler: handler.commentParser\n\n      #    The following are a few example events you can configure\n      #    NOTE: Please make sure to change your handler code to work with those events\n      #    Check the event documentation for details\n    events:\n      - s3:\n          bucket: aws-lambdaserverless-comment-inbox\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: comments-\n            - suffix: .json\n\n# you can add CloudFormation resource templates here\nresources:\n Resources:\n   NewResource:\n     Type: AWS::S3::Bucket\n     Properties:\n       BucketName: aws-lambdaserverless-bl-created\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":81569820,"files":["service: machete-backend\ncustom:\n  machete_bucket: rippedvines-2-0\npackage:\n  individually: true\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  profile: personal-account-admin\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - 'iot:DescribeEndpoint'\n        - 'iot:Publish'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 'sts:AssumeRole'\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - 's3:PutObject'\n      Resource: \"arn:aws:s3:::${self:custom.machete_bucket}/*\"\n  environment:\n    IOT_ROLE: machete-iot-1\n    IOT_ENDPOINT: a31p550in0aqjb.iot.us-east-1.amazonaws.com\n    MACHETE_BUCKET: ${self:custom.machete_bucket}\n    MACHETE_DOMAIN: machete-site.s3-website-us-east-1.amazonaws.com\n\nfunctions:\n  ping:\n    handler: handler.ping\n    events:\n      - http:\n          path: ping\n          method: GET\n          cors: true\n  auth:\n    handler: handler.auth\n    events:\n      - http:\n          path: auth\n          method: POST\n          cors: true\n  ripVine:\n    handler: handler.ripVine\n    timeout: 15\n    events:\n      - iot:\n          sql: \"SELECT * FROM '/machete/vine/#'\"\n    package:\n      include:\n        - functions/ripVine/ffmpeg\n        - functions/ripVine/lame\n        - functions/ripVine/ffprobe # see if this binary and those that follow can be excluded\n        - functions/ripVine/ffserver\n        - functions/ripVine/x264\nresources:\n  Resources:\n    MacheteBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.machete_bucket}\n        CorsConfiguration:\n          CorsRules:\n            - AllowedMethods: [GET]\n              AllowedOrigins: ['*']\n    MacheteBucketPolicy: # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html#cfn-s3-bucketpolicy-policydocument\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: ${self:custom.machete_bucket}\n        PolicyDocument:\n          Statement:\n            - Action:\n                - \"s3:GetObject\"\n              Effect: \"Allow\"\n              Principal: \"*\"\n              Resource: \"arn:aws:s3:::${self:custom.machete_bucket}/*\"\n              #TODO: restrict to specific referring url - example visible in the link above\n"]},{"id":81452927,"files":["service: faas-demo-slackbot\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\n  region: eu-central-1\n\n\nfunctions:\n  search:\n    handler: handler.search\n\n    events:\n      - http:\n          path: search\n          method: post\n\n    environment: ${file(env.yml)}"]},{"id":80097701,"files":["service: promises\n\ncustom:\n  dynamoDBTableName: \"${opt:stage, self:provider.stage}_promise_test\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ap-southeast-1\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:*\"\n\nfunctions:\n  promisetest:\n    handler: handler.promised\n    environment:\n      TABLE: \"${self:custom.dynamoDBTableName}\"\n\nResources:\n  IngestionTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    Properties:\n      TableName: ${self:custom.dynamoDBTableName}\n      AttributeDefinitions:\n        - AttributeName: uuid\n          AttributeType: S\n      KeySchema:\n        - AttributeName: uuid\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: 1\n        WriteCapacityUnits: 1\n"]},{"id":76126402,"files":["service: marvin\n\nframeworkVersion: \"=1.3\"\n\npackage:\n  exclude:\n    - tmp/**\n    - .git/**\n    - src/**/*test.js\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  stage: dev\n  region: eu-west-1\n\nfunctions:\n  handleMessage:\n    handler: src/lambda.handleMessage\n    events:\n      - http:\n          path: marvin\n          method: post\n"]},{"id":162491125,"files":["frameworkVersion: \">=1.54.0 <2.0.0\"\n\nservice: serverless-site-config-github-check\n\nplugins:\n    - serverless-webpack\n    - serverless-offline\n\ncustom:\n    webpack:\n        includeModules: true\n        packager: yarn\n        packagerOptions:\n            ignoreScripts: true\n\nprovider:\n    name: aws\n    runtime: nodejs12.x\n    profile: default\n    region: ${opt:region, 'eu-west-1'}\n    environment:\n        NAMESPACE: Site config\n        # SecureString from SSM Parameters\n        GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\nfunctions:\n    extension:\n        handler: handler.checkExtension\n        description: Validate file extensions\n        events:\n            -\n                http:\n                    path: webhook/extension\n                    method: post\n                    cors: true\n"]},{"id":157223875,"files":["frameworkVersion: \">=1.57.0 <2.0.0\"\n\nservice: serverless-github-check\n\nplugins:\n    - serverless-webpack\n    - serverless-offline\n\ncustom:\n    webpack:\n        includeModules: true\n        packager: yarn\n\nprovider:\n    name: aws\n    runtime: nodejs12.x\n    profile: default\n    region: ${opt:region, 'eu-west-1'}\n    environment:\n        NAMESPACE: 20 Minutes\n        # SecureString from SSM Parameters\n        GITHUB_TOKEN: ${ssm:GITHUB_TOKEN~true}\n\nfunctions:\n    specification:\n        handler: handler.checkSpecification\n        description: Validate GitHub PRs against some specifications\n        environment:\n            CHECK_BODY_LENGTH: 8\n            CHECK_TITLE_LENGTH: 8\n        events:\n            -\n                # default event\n                http:\n                    path: webhook\n                    method: post\n                    cors: true\n            -\n                http:\n                    path: webhook/specification\n                    method: post\n                    cors: true\n\n    label:\n        handler: handler.checkLabel\n        description: Check for GitHub PR labels to block merge\n        environment:\n            # coma separated labels\n            BLOCK_LABELS: \"Work In Progress,Waiting For Change,Waiting For Travis\"\n        events:\n            -\n                http:\n                    path: webhook/label\n                    method: post\n                    cors: true\n\n    fixup:\n        handler: handler.checkFixupCommits\n        description: Ensure no \"fixup!\" commits are in the PR\n        events:\n            -\n                http:\n                    path: webhook/fixup\n                    method: post\n                    cors: true\n"]},{"id":54528267,"files":["service: jung2bot\n\nframeworkVersion: '>=1.48.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  versionFunctions: false\n  stage: ${env:STAGE, 'dev'}\n  region: ${env:REGION, 'us-east-1'}\n  profile: ${env:PROFILE, ''}\n  logRetentionInDays: 1\n#  logs:\n#    restApi: true\n#  tracing:\n#    apiGateway: true\n#    lambda: true\n  deploymentBucket:\n    serverSideEncryption: AES256\n  environment:\n    LOG_LEVEL: ${env:LOG_LEVEL, 'error'}\n    TELEGRAM_BOT_TOKEN: ${ssm:${self:service}-${self:provider.stage}-telegram-api-token~true}\n    MESSAGE_TABLE: ${self:service}-${self:provider.stage}-messages\n    CHATID_TABLE: ${self:service}-${self:provider.stage}-chatIds\n    EVENT_QUEUE_URL: !Ref EventQueue\n    SCALE_UP_READ_CAPACITY: ${self:custom.jung2bot.scaleUpBeforeOffFromWork.ReadCapacityUnits.${self:provider.stage}, 1}\n  tags:\n    Name: jung2bot\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - 'dynamodb:*'\n      Resource:\n        - !GetAtt Jung2BotDynamoDB.Arn\n        - !GetAtt ChatIDsDynamoDB.Arn\n    - Effect: Allow\n      Action:\n        - 'sns:Publish'\n      Resource:\n        - !Ref MessagesDeadLetterTopic\n        - !Ref OffFromWorkDeadLetterTopic\n        - !Ref QueryEventDeadLetterTopic\n        - !Ref ScaleUpBeforeOffFromWorkDeadLetterTopic\n    - Effect: Allow\n      Action:\n        - 'sqs:SendMessage'\n      Resource:\n        - !GetAtt EventQueue.Arn\n\nfunctions:\n  messages:\n    handler: src/handler.onMessage\n    # 2019-05-18 onMessage:\n    # min: 104.9042 mb\n    # avg: 174.0444 mb\n    # max: 183.1055 mb\n    # peak duration: 9.1s\n    timeout: 30\n    memorySize: 192\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-messages-dead-letter-topic\n    events:\n      - http:\n          path: /\n          method: post\n  offFromWork:\n    handler: src/handler.onOffFromWork\n    # 2019-05-18 onOffFromWork:\n    # min: 126.8387 mb\n    # avg: 155.6873 mb\n    # max: 183.1055 mb\n    # peak duration: 88.4s\n    timeout: 600\n    memorySize: 256\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-offFromWork-dead-letter-topic\n    events:\n      - schedule: cron(59 9 ? * MON-FRI *) # 9:59 am UTC = 5:59 pm HKT\n  queryEvent:\n    handler: src/handler.onEvent\n    # 2019-05-18 onEvent:\n    # min: 108.7189 mb\n    # avg: 196.4851 mb\n    # max: 242.2333 mb\n    # peak duration: 53.6s\n    timeout: 90\n    memorySize: 320\n    # https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this\n    # If you're sending bulk notifications to multiple users, the API will not allow more than 30 messages\n    # per second or so. Consider spreading out notifications over large intervals of 8—12 hours for best results.\n    # Also note that your bot will not be able to send more than 20 messages per minute to the same group.\n    #\n    # Cloudformation will return `ResourceConflictException` exception if the reservedConcurrency is changed.\n    # Workaround will be manually changing the `reservedConcurrency` in the console and deploy.\n    # Reference: https://github.com/serverless/serverless/issues/4964#issuecomment-406570150\n    reservedConcurrency: ${self:custom.jung2bot.queryEvent.reservedConcurrency.${self:provider.stage}, 1}\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-queryEvent-dead-letter-topic\n    events:\n      - sqs:\n          arn: !GetAtt EventQueue.Arn\n  scaleUpBeforeOffFromWork:\n    handler: src/handler.onScaleUp\n    # 2019-05-18 scaleUpBeforeOffFromWork:\n    # min: 115.3946 mb\n    # avg: 121.7524 mb\n    # max: 122.0703 mb\n    # peak duration: 3.6s\n    timeout: 10\n    memorySize: 192\n    tracing: Active\n    deadLetter:\n      sns: ${self:service}-${self:provider.stage}-scaleUpBeforeOffFromWork-dead-letter-topic\n    events:\n      - schedule: cron(53-59 9 ? * MON-FRI *) # 9:53-59 am UTC = 5:53-59 pm HKT\n\nplugins:\n  - serverless-domain-manager\n  - serverless-dotenv-plugin\n  - serverless-plugin-lambda-dead-letter\n  - serverless-plugin-dynamodb-autoscaling\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  # jung2bot\n  # Intrinsic functions is not working within the functions block\n  # Reference: https://stackoverflow.com/a/54065636/837059\n  jung2bot:\n    scaleUpBeforeOffFromWork:\n      ReadCapacityUnits:\n        local: 1\n        dev: 1\n        prod: 500\n    queryEvent:\n      reservedConcurrency:\n        local: 1\n        dev: 5\n        prod: 100\n  # serverless-domain-manager\n  customDomain:\n    domainName: ${env:DOMAIN}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n    endpointType: edge\n  # serverless-dynamodb-local\n  dynamodb:\n    start:\n      seed: true\n      migrate: true\n    seed:\n      domain:\n        sources:\n          - table: ${self:service}-${self:provider.stage}-messages\n            sources: [./test/helper/dynamodbMessagesSeed.json]\n          - table: ${self:service}-${self:provider.stage}-chatIds\n            sources: [./test/helper/dynamodbChatIdSeed.json]\n  # serverless-plugin-dynamodb-autoscaling\n  dynamodbAutoscaling:\n    tablesConfig:\n      Jung2BotDynamoDB:\n        minCapacity: 1\n        maxCapacity: 1000\n      ChatIDsDynamoDB:\n        minCapacity: 1\n        maxCapacity: 1000\n\nresources:\n  Resources:\n    # Messages DynamoDB Table\n    Jung2BotDynamoDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: chatId\n            AttributeType: N\n          - AttributeName: dateCreated\n            AttributeType: S\n        KeySchema:\n          - AttributeName: chatId\n            KeyType: HASH\n          - AttributeName: dateCreated\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        TableName: ${self:service}-${self:provider.stage}-messages\n    # ChatId DynamoDB Table\n    ChatIDsDynamoDB:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: chatId\n            AttributeType: N\n        KeySchema:\n          - AttributeName: chatId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        TableName: ${self:service}-${self:provider.stage}-chatIds\n    # SQS for handling query events\n    EventQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        VisibilityTimeout: 100\n        KmsDataKeyReusePeriodSeconds: 86400\n        KmsMasterKeyId: alias/aws/sqs\n"]},{"id":66138738,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    v1.docs.serverless.com\n#\n# Happy Coding!\n\nservice: guve-slack-library\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-west-1\n  cfLogs: true\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:Scan\n        - dynamodb:CreateTable\n        - dynamodb:PutItem\n        - dynamodb:UpdateTable\n        - dynamodb:DescribeTable\n      Resource: \"*\"\n  stage: ${opt:stage, self:custom.defaultStage}\n  profile: ${self:custom.profiles.${self:provider.stage}, ''}\n\ncustom:\n  defaultStage: dev\n  profiles:\n    dev: wd-sandbox\n    prod: prodProfile\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: true   # Node modules configuration for packaging\n    packager: 'yarn'   # Packager that will be used to package your external modules\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-plugin-optimize\n\npackage:\n  individually: true\n\nfunctions:\n  api-library:\n    handler: api/books/index.route\n    events:\n      - http:\n          path: api/v2/book/{id}\n          method: get\n      - http:\n          path: api/v2/books/\n          method: get\n      - http:\n          path: api/v2/books/{query}\n          method: get\n      - http:\n          path: api/v2/books/add\n          method: post\n      - http:\n          path: api/v2/slack/library\n          method: post\n    package:\n      include:\n        - api/books/**\n\nresources:\n  Resources:\n    EBookBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: wunderdog-ebooks\n"]},{"id":217221407,"files":["service: # The service name is the top-level name attached to this stack\n  name: cdb04api # BUG: Must not contain dashes, else will fail in nested Gaxios dependency?\n\nplugins: # A list of plugins; we're just using the regular Google Cloud Functions package here\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google # The cloud provider\n  region: europe-west1 # OPTIONAL: Edit if you want\n\n  # THESE TWO MUST BE UPDATED BY YOU!\n  project: 'cloud-developer-basics' # EDIT THIS to your value\n  credentials: ~/.gcloud/{KEYFILE}.json # EDIT THIS to your value\n\n  runtime: nodejs10 # Specifying a global runtime, where all of our code is Node 10 (can also be done per-function, but not relevant for us)\n  memorySize: 1024 # Specify memory size; will add performance for a slightly higher cost\n  timeout: 10s # Max time until timeout; should be short in serverless environments\n\nfunctions:\n  api: # This will be the endpoint name, so always use meaningful names here\n    handler: api # This must point to the handler function! Google Cloud Functions default to index.js, which in our case exports a function called' api'\n    events:\n      - http: api # This event name doesn't really do much, so just default to same as above\n        method: POST # Allowed methods; because this is a GraphQL API it's all POST"]},{"id":175357822,"files":["# Update your service name here\nservice: &service\n  name: serverless-graphql-boilerplate\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\n# plugins\nplugins:\n  - serverless-webpack\n  - serverless-dynamodb-local\n  - serverless-offline\n\ncustom:\n  service: *service\n  stages:\n    - local\n    - development\n    - production\n  # default stage/environment\n  defaultStage: local\n  # default AWS region\n  defaultRegion: us-east-1\n  # config file / region / stage\n  configFile: ${file(./config/${opt:region,self:provider.region}/${self:provider.stage}.yml)}\n  # webpack config\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules:\n      forceExclude:\n        - aws-sdk\n  # dynamodb local config\n  # https://github.com/99xt/serverless-dynamodb-local\n  dynamodb:\n    # only in local\n    stages:\n      - local\n    start:\n      port: 8000\n      inMemory: true\n      # create the table after each restart\n      migrate: true\n      # seed the data as well\n      seed: true\n    seed:\n      test:\n        sources:\n          - table: ${self:provider.stage}-example-table\n            sources: [./seed/example.json]\n\n# package\npackage:\n  individually: true\n\n# aws provider\nprovider:\n  name: aws\n  # common runtime for all functions\n  runtime: nodejs8.10\n  # cloudformation stack name\n  stackName: ${self:provider.stage}-${self:custom.service.name}-stack\n  # API gateway Name\n  apiName: ${self:provider.stage}-${self:custom.service.name}-api\n  # Deployment bucket name\n  # This bucket will created using terraform\n  # see {AWS_ACCOUNT}/common/deployable-package-store/{REGION}\n  deploymentBucket:\n    name: ${self:custom.configFile.serverless.deploymentBucket}\n  # The S3 prefix under which deployed artifacts should be stored.\n  deploymentPrefix: ${self:provider.stage}/serverless\n  # stage/environment (development|testing|staging|production) default is development\n  stage: ${opt:stage, self:custom.defaultStage}\n  # aws region\n  region: ${opt:region, self:custom.defaultRegion}\n  # aws profiles\n  profile: ${self:custom.configFile.aws.profile}\n  # AWS lambda configuration\n  # common memory size for all functions\n  memorySize: 128\n  # common timeout for all functions\n  timeout: 30\n  # lambda role\n  # This will be created using cloudformation\n  # see resources section\n  role: lambdaRole\n  # Environment variables to AWS lambda (global)\n  environment:\n    ENVIRONMENT: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    DEBUG_ENABLED: ${self:custom.configFile.debug.enabled}\n    DYNAMODB_LOCAL_ENDPOINT: http://localhost:${self:custom.dynamodb.start.port}\n  # AWS cloudwatch configuration\n  logRetentionInDays: 14\n  # VPC configuration for lambda\n  vpc: ${self:custom.configFile.aws.vpc}\n  # Tagging\n  stackTags:\n    Environment: ${self:provider.stage}\n    Project: ${self:custom.service.name}\n  # Common Tags for AWS lambda functions\n  tags:\n    Environment: ${self:provider.stage}\n    Project: ${self:custom.service.name}\n\n# functions\nfunctions:\n  graphql:\n    handler: functions/graphql.handler\n    name: ${self:provider.stage}-${self:custom.service.name}-function\n    description: ${self:custom.service.name} - Apollo graphql server (${self:provider.stage})\n    tags:\n      Name: ${self:provider.stage}-${self:custom.service.name}-function\n    events:\n    - http:\n        path: graphql\n        method: post\n        cors: true\n    - http:\n        path: graphql\n        method: get\n        cors: true\n\n# AWS resources used in this stack apart from functions\n# These resources will be part cloudformation stack\nresources:\n  # dynamodb table\n  - ${file(src/aws-resources/dynamodb-table.yml)}\n  # Lambda Role\n  - ${file(src/aws-resources/lambda-role.yml)}\n"]},{"id":168455603,"files":["service: puller\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nfunctions:\n  puller:\n    handler: puller.puller\n    environment:\n      GITHUB_TOKEN: ${ssm:puller-githubToken~true}\n      baseRepoOwner: ${ssm:puller-baseRepoOwner}\n      repoName: ${ssm:puller-repoName}\n      baseRepoBranch: ${ssm:puller-baseRepoBranch}\n      headRepoOwner: ${ssm:puller-headRepoOwner}\n      headRepoBranch: ${ssm:puller-headRepoBranch}\n    events:\n      - schedule: rate(1 hour)\n"]},{"id":209023237,"files":["service: python3-spacy-lambda\n\nprovider:\n  name: aws\n  # Ensure our function has write access to cloudwatch logs.\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 'logs:*'\n      Resource:\n        - '*'\n  runtime: python3.7\n  stage: dev\n  region: ap-southeast-2\n  memorySize: 2056\n\nfunctions:\n  main:\n    handler: handler.main\n    layers:\n      - arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python37-SciPy1x:2\n      - arn:aws:lambda:ap-southeast-2:273047674297:layer:spacy_layer_lite:2\n    events:\n      - http:\n          path: /\n          method: any\n          cors: true\n\nplugins:\n  - serverless-python-requirements\n  - serverless-offline\n  - serverless-plugin-warmup\ncustom:\n  serverless-offline:\n    port: 4000\n  # https://github.com/UnitedIncome/serverless-python-requirements\n  warmup:\n    enabled: true\n    events:\n      - schedule: rate(5 minutes)\n  pythonRequirements:\n    # Docker must be installed on Windows/Mac:\n    # https://serverless.com/blog/serverless-python-packaging/\n    dockerizePip: non-linux\n    # Reduces package size by removing directories like `PyCache`.\n    # Do NOT use this option on win32 systems.\n    # slim: true\n    # strip: false\n\npackage:\n  #  exclude:\n  #  - src/**\n  include:\n    - src/handler.py\n  exclude:\n    - node_modules/**\n    - venv/**\n    - en_core_web_sm-2.1.0/**\n    - .idea/**\n    - __pycache__/**\n    - package.json\n    - package-lock.json"]},{"id":149365668,"files":["service: demo\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    commands:\n      - 'deploy'\n      - 'remove'\n","service: test-integration-commandsForStages\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    aws:\n      commandsForStages:\n        - 'deploy function:prod'\n","service: test-integration-stages\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    aws:\n      stages:\n        - 'prod'\n","service: test-integration-commands\n\nprovider:\n  name: google\n  runtime: nodejs\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n\ncustom:\n  confirm:\n    commands:\n      - 'deploy function'\n","service: test-integration-noConfiguration\n\nprovider:\n  name: google\n  runtime: nodejs\n  stage: ${opt:stage, 'dev'}\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nplugins:\n  localPath: '../../../../lib'\n  modules:\n  - serverless-confirm-command\n"]},{"id":231679563,"files":["\nservice: gifmaker\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - S3:PutObject\n        - S3:GetObject\n      Resource: \"arn:aws:s3:::${self:custom.bucket}/*\"\n\nfunctions:\n  gifmaker:\n    handler: handler.gifmaker\n    events:\n      - s3: gifmakerbucket\n    layers:\n      - {Ref: FfmpegLambdaLayer}\n\nlayers:\n  ffmpeg:\n    path: layer\n\ncustom:\n  bucket: gifmakerbucket\n"]},{"id":66898839,"files":["service: spacebot\n\ncustom:\n  favoritesTableName: 'spacebot-${self:provider.stage}-favorites'\n  tokensTableName: 'spacebot-${self:provider.stage}-oauthtokens'\n  config: ${file(config/config.${self:provider.stage}.yml)}\n\nprovider:\n  name: aws\n  profile: spacebot\n  runtime: nodejs10.x\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 128\n  timeout: 6\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"FavoritesDynamoDBTable\", \"Arn\" ] }\n        - { \"Fn::GetAtt\": [\"TokensDynamoDBTable\", \"Arn\" ] }\n\nfunctions:\n  messages:\n    handler: functions/messages/handler.handler\n    description: Slack Interactive Messages Handler\n    events:\n      - http:\n          path: slack/messages\n          method: post\n    environment:\n      SLACK_TOKEN: ${self:custom.config.SLACK_TOKEN}\n      FAVORITES_TABLE_NAME: ${self:custom.favoritesTableName}\n  oauth:\n    handler: functions/oauth/handler.oauth\n    description: Slack OAuth function\n    memorySize: 256\n    timeout: 15\n    events:\n      - http:\n          path: slack/oauth\n          method: get\n    environment:\n      OAUTH_SUCCESS_URL: ${self:custom.config.OAUTH_SUCCESS_URL}\n      OAUTH_ERROR_URL: ${self:custom.config.OAUTH_ERROR_URL}\n      SLACK_CLIENT_ID: ${self:custom.config.SLACK_CLIENT_ID}\n      SLACK_CLIENT_SECRET: ${self:custom.config.SLACK_CLIENT_SECRET}\n      SLACK_API_URL: ${self:custom.config.SLACK_API_URL}\n      TOKENS_TABLE_NAME: ${self:custom.tokensTableName}\n  slack:\n    handler: functions/slack/handler.slash\n    description: Slack /spacebot slash command function\n    events:\n      - http:\n          path: slack/slash\n          method: post\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n    environment:\n      SLACK_TOKEN: ${self:custom.config.SLACK_TOKEN}\n      NASA_API_KEY: ${self:custom.config.NASA_API_KEY}\n\nresources:\n  Resources:\n    FavoritesDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slackUserId\n            AttributeType: S\n          - AttributeName: mediaId\n            AttributeType: N\n          - AttributeName: service\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slackUserId\n            KeyType: HASH\n          - AttributeName: mediaId\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: userFavoritesByType\n            KeySchema:\n              - AttributeName: slackUserId\n                KeyType: HASH\n              - AttributeName: service\n                KeyType: RANGE\n            Projection:\n              NonKeyAttributes:\n                - mediaId\n              ProjectionType: INCLUDE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.favoritesTableName}\n\n    TokensDynamoDBTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: slackUserId\n            AttributeType: S\n          - AttributeName: teamId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: slackUserId\n            KeyType: HASH\n          - AttributeName: teamId\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.tokensTableName}\n"]},{"id":183636024,"files":["service:\n  name: lambda-prerender-service\n\nframeworkVersion: \">=1.6.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: ${opt:stage,'dev'}\n  region: eu-north-1\n  memorySize: 2048\n  timeout: 20\n  versionFunctions: false\n\ncustom:\n  objectPrefix: \"${self:service}-${self:provider.stage}\"\n\nfunctions:\n  prerender:\n    handler: functions/prerender.handler\n    description: Prerender page provided with URL query parameter\n    environment:\n      DEBUG: 0\n    events:\n      - http:\n          path: prerender\n          method: get\n"]},{"id":132599168,"files":["service:\n  name: firestorecrudapi\n\nplugins:\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google\n  region: europe-west1\n\n  project: \"{PROJECT_ID}\"\n  credentials: ~/.gcloud/{KEYFILE}.json\n\n  runtime: nodejs10\n  memorySize: 1024\n  timeout: 10s\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n    - .gcloud/**\n\nfunctions:\n  create:\n    handler: create\n    events:\n      - http: create\n        method: POST\n  read:\n    handler: read\n    events:\n      - http: read\n        method: GET\n  update:\n    handler: update\n    events:\n      - http: update\n        method: POST\n  delete:\n    handler: delete\n    events:\n      - http: delete\n        method: POST\n"]},{"id":139711480,"files":["service: aws-node-simple-http-endpoint\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n\nfunctions:\n  localGreeting:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n"]},{"id":129658093,"files":["service: bundlewatch-service\nframeworkVersion: '=1.47.0'\n\nplugins:\n  - serverless-dynamodb-local\n  - serverless-domain-manager\n  - serverless-offline # must be last\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  storeTable: '${self:service}-store-table-${self:custom.stage}'\n  dynamodb:\n    start:\n      port: 8000\n      migrate: true\n      inMemory: true\n  githubClientId:\n    dev: '04fcf325dd26ca2a159f'\n    stage: '04fcf325dd26ca2a159f'\n    prod: '04fcf325dd26ca2a159f'\n  githubClientSecret:\n    dev: ${env:GITHUB_CLIENT_SECRET}\n    stage: ${env:GITHUB_CLIENT_SECRET}\n    prod: ${env:GITHUB_CLIENT_SECRET}\n  customDomain:\n    domainName: service.bundlewatch.io\n    basePath: ''\n    stage: ${self:custom.stage}\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs8.10\n  memorySize: 512\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource:\n        - { \"Fn::GetAtt\": [\"StoreTable\", \"Arn\" ] }\n  environment:\n    STORE_TABLE: ${self:custom.storeTable}\n    GITHUB_CLIENT_ID: ${self:custom.githubClientId.${self:custom.stage}}\n    GITHUB_CLIENT_SECRET: ${self:custom.githubClientSecret.${self:custom.stage}}\n\nfunctions:\n  expressRouter:\n    handler: src/router/index.app\n    events:\n      - http:\n          path: /\n          method: get\n      - http:\n          path: /store\n          method: post\n      - http:\n          path: /store/lookup\n          method: post\n      - http:\n          path: /setup-github\n          method: get\n      - http:\n          path: /results\n          method: get\n      - http:\n          path: /static/results-styles.css\n          method: get\n      - http:\n          path: /static/setup-github-styles.css\n          method: get\n      - http:\n          path: /analyze\n          method: post\n\n\n\nresources:\n  Resources:\n    StoreTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: repo\n            AttributeType: S\n          -\n            AttributeName: repoBranch\n            AttributeType: S\n          -\n            AttributeName: timestamp\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: repo\n            KeyType: HASH\n          -\n            AttributeName: repoBranch\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          -\n            IndexName: timestamp\n            KeySchema:\n                -\n                    AttributeName: repo\n                    KeyType: HASH\n                -\n                    AttributeName: timestamp\n                    KeyType: RANGE\n            Projection:\n                ProjectionType: KEYS_ONLY\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:custom.storeTable}\n"]},{"id":123959517,"files":["service: sls-data-extraction\n\nprovider:\n  name: aws\n  region: eu-west-1\n  runtime: nodejs8.10\n  cfLogs: true\n  versionFunctions: false\n  logRetentionInDays: 7\n  environment:\n    DB_HOST: ${file(serverless.env.yml):DB_HOST, env:DB_HOST}\n    DB_DATABASE: ${file(serverless.env.yml):DB_DATABASE, env:DB_DATABASE}\n    DB_USERNAME: ${file(serverless.env.yml):DB_USERNAME, env:DB_USERNAME}\n    DB_PASSWORD: ${file(serverless.env.yml):DB_PASSWORD, env:DB_PASSWORD}\n    GITHUB_TOKEN: ${file(serverless.env.yml):GITHUB_TOKEN, env:GITHUB_TOKEN}\n\nfunctions:\n  # Daily statistics for all properties: sell\n  base-data-sell:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: sell\n    events:\n      - schedule: cron(15 0 * * ? *)\n\n  # Daily statistics for all properties: buy\n  base-data-buy:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: buy\n    events:\n      - schedule: cron(10 0 * * ? *)\n\n  # Daily statistics for all properties: rent\n  base-data-rent:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: rent\n    events:\n      - schedule: cron(5 0 * * ? *)\n\n  # Daily statistics for all properties: want-to-rent\n  base-data-want-to-rent:\n    handler: src/base-data.run\n    environment:\n      PROPERTY_CATEGORY: want_to_rent\n    events:\n      - schedule: cron(0 0 * * ? *)\n\n  # Weekly market share analysis\n  market-share:\n    handler: src/market-share.run\n    events:\n      - schedule: rate(7 days)\n\n  # Median monthly SELLING price for APARTMENTS in Riga\n  regional-data-apartment-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(30 0 1 * ? *)\n  regional-price-per-sqm-apartment-sell-monthly:\n    name: RegionalPricePerSqmApartmentSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(31 0 1 * ? *)\n\n  # Median monthly RENT price for APARTMENTS in Riga\n  regional-data-apartment-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(35 0 1 * ? *)\n  regional-price-per-sqm-apartment-rent-monthly:\n    name: RegionalPricePerSqmApartmentRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(36 0 1 * ? *)\n\n  # Median monthly SELLING price for HOUSES in Riga\n  regional-data-house-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(40 0 1 * ? *)\n  regional-price-per-sqm-house-sell-monthly:\n    name: RegionalPricePerSqmHouseSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(41 0 1 * ? *)\n\n  # Median monthly RENT price for HOUSES in Riga\n  regional-data-house-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(45 0 1 * ? *)\n  regional-price-per-sqm-house-rent-monthly:\n    name: RegionalPricePerSqmHouseRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(46 0 1 * ? *)\n\n  # Median monthly SELLING price for LAND in Riga\n  regional-data-land-sell-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(50 0 1 * ? *)\n  regional-price-per-sqm-land-sell-monthly:\n    name: RegionalPricePerSqmLandSellMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(51 0 1 * ? *)\n\n  # Median monthly RENT price for LAND in Riga\n  regional-data-land-rent-monthly:\n    handler: src/regional-data.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(55 0 1 * ? *)\n  regional-price-per-sqm-land-rent-monthly:\n    name: RegionalPricePerSqmLandRentMonthly\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: riga\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(56 0 1 * ? *)\n\n  # Median monthly SELLING price for APARTMENTS in Latvia\n  regional-data-apartment-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(32 0 1 * ? *)\n  regional-price-per-sqm-apartment-sell-monthly-lv:\n    name: RegionalPricePerSqmApartmentSellMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(33 0 1 * ? *)\n\n  # Median monthly RENT price for APARTMENTS in Latvia\n  regional-data-apartment-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(37 0 1 * ? *)\n  regional-price-per-sqm-apartment-rent-monthly-lv:\n    name: RegionalPricePerSqmApartmentRentMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: apartment\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(38 0 1 * ? *)\n\n  # Median monthly SELLING price for HOUSES in Latvia\n  regional-data-house-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(42 0 1 * ? *)\n  regional-price-per-sqm-house-sell-monthly-lv:\n    name: RegionalPricePerSqmHouseSellMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: sell\n    events:\n      - schedule: cron(43 0 1 * ? *)\n\n  # Median monthly RENT price for HOUSES in Latvia\n  regional-data-house-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(47 0 1 * ? *)\n  regional-price-per-sqm-house-rent-monthly-lv:\n    name: RegionalPricePerSqmHouseRentMonthlyLv\n    handler: src/regional-price-per-sqm.run\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: house\n      PROPERTY_TYPE: rent\n    events:\n      - schedule: cron(48 0 1 * ? *)\n\n  # Median monthly SELLING price for LAND in Latvia\n  regional-data-land-sell-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: sell\n\n  # Median monthly RENT price for LAND in Latvia\n  regional-data-land-rent-monthly-lv:\n    handler: src/regional-data.run\n    timeout: 200\n    environment:\n      REGION: latvia\n      PROPERTY_CATEGORY: land\n      PROPERTY_TYPE: rent\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n","DB_HOST: 127.0.0.1\nDB_DATABASE: brokalys\nDB_USERNAME: root\nDB_PASSWORD: secret\n\nGITHUB_TOKEN: token\n"]},{"id":229475960,"files":["service:\n  name: example-serverless-type\n\ncustom:\n  serverless-layers:\n    layersDeploymentBucket: ${env:LAYERS_DEPLOYMENT_BUCKET}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n  stage: ${opt:stage,\"dev\"}\n\n\nplugins:\n  - serverless-offline\n  - serverless-webpack\n  - serverless-layers\n  - serverless-dotenv-plugin\n  - serverless-dynamodb-local\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: ap-northeast-1\n  apiGateway:\n    minimumCompressionSize: 1024\n  environment:\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1\n  stage: ${self:custom.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:DYNAMO_TABLE}\"\n\n\nfunctions:\n  hello:\n    handler: functions/hello.main\n    description: Hello world!\n    environment:\n      API_KEY: ${env:API_KEY}\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\n  dynamo:\n    handler: functions/dynamo.main\n    description: DynamoDB example\n    environment:\n      DYNAMO_TABLE: ${env:DYNAMO_TABLE}\n    events:\n      - http:\n          path: dynamo\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    DynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: Id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: Id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${env:DYNAMO_TABLE}"]},{"id":115786526,"files":["service: netlify-travis-proxy\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  environment:\n    TRAVIS_ACCESS_TOKEN: ${env:TRAVIS_ACCESS_TOKEN}\n    TARGET_REPO: ${env:TARGET_REPO}\n    GITHUB_OAUTH_TOKEN: ${env:GITHUB_OAUTH_TOKEN}\n\nfunctions:\n  ghStatusManager:\n    handler: src/gh-status-manager.handler\n\n    events:\n      - http:\n          path: github-status\n          method: post\n  travisCaller:\n    handler: src/travis-caller.handler\n\n    events:\n      - http:\n          path: travis-caller\n          method: post\n"]},{"id":227669805,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: shopify-app-name\n\nplugins:\n- serverless-apigw-binary\n- serverless-offline\n- serverless-aws-static-file-handler/plugins/BinaryMediaTypes\n\ncustom:\n  apiGateway:\n    binaryMediaTypes:\n      - image/png\n      - image/jpeg\n      - \"*/*\"\n  apigwBinary:\n    types:\n      - 'image/jpeg'\n      - 'image/png'\n  defaultStage: dev\n  environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.defaultStage}\n  environment:\n    appName: ${self:custom.environment.appName}\n    tableName: ${self:service}-shops-${self:provider.stage}\n    SHOPIFY_API_KEY: ${self:custom.environment.SHOPIFY_API_KEY}\n    SHOPIFY_API_SECRET: ${self:custom.environment.SHOPIFY_API_SECRET}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchGetItem\n        - dynamodb:BatchWriteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}\"\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}/index/domain-index\"\n\n\nfunctions:\n  # ASSETS\n  assetsFavicon:\n    handler: app/assets.favicon\n    events:\n      - http:\n          path: assets/favicon.png\n          method: get\n  assetsCSS:\n    handler: app/assets.css\n    events:\n      - http:\n          path: assets/css/app.css\n          method: get\n  assetsJS:\n    handler: app/assets.js\n    events:\n      - http:\n          path: assets/js/app.js\n          method: get\n  # END ASSETS\n  authIndex:\n    handler: app/auth.index\n    events:\n      - http:\n          path: /\n          method: get\n  installIndex:\n    handler: app/install.index\n    events:\n      - http:\n          path: install\n          method: get\n  installStore:\n    handler: app/install.store\n    events:\n      - http:\n          path: install/store\n          method: any\n  webhookUninstall:\n    handler: app/webhooks.uninstall\n    events:\n      - http:\n          path: webhooks/uninstall\n          method: post\n  webhookGDPR:\n    handler: app/webhooks.gdpr\n    events:\n      - http:\n          path: webhooks/gdpr\n          method: post\n\n\nresources:\n  Resources:\n    ShopsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.tableName}\n        AttributeDefinitions:\n          - AttributeName: shopId\n            AttributeType: S\n          - AttributeName: domain\n            AttributeType: S\n        KeySchema:\n          - AttributeName: shopId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: domain-index\n            KeySchema:\n              - AttributeName: domain\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n"]},{"id":196026627,"files":["name: sls-es-demo\nstage: dev\nregion: eu-west-1\n\nawsElasticsearch:\n  component: \"../../aws-elasticsearch\"\n  inputs:\n    name: sls-es-demo\n    ebsOptions:\n      EBSEnabled: true\n      VolumeSize: 20\n      VolumeType: 'gp2'\n    accessPolicies:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            AWS:\n              - \"*\"\n          Action:\n            - es:*\n          Resource:\n            - \"arn:aws:es:${region}:*:domain/sls-es-demo/*\"\n    region: ${region}\n"]},{"id":107271526,"files":["service: serverless-starter-app\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 128\n  timeout: 60\n  stage: dev\n  versionFunctions: false\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\nplugins:\n  - serverless-mocha-plugin\n  - serverless-offline\n  - serverless-webpack\n\ncustom:\n  serverless-offline:\n    port: 3001\n    babelOptions:\n      presets: [\"env\"]\n  webpackIncludeModules:\n    packagePath: './package.json'\n"]},{"id":213923915,"files":["service: graphql-reference\n\npackage:\n  individually: true\n  exclude:\n    - ./**\n\nprovider:\n  name: openwhisk\n  runtime: nodejs:default\n  ignore_certs: true\n  service: graphql-reference\n\nplugins:\n  - serverless-openwhisk\n  - serverless-webpack\n\nresources:\n  packages:\n    graphql-reference:\n      parameters:\n\nfunctions:\n  dispatcher:\n    name: graphql-reference/dispatcher\n    handler: src/local/dispatcher.main\n    concurrency: 200\n    annotations:\n      web-export: true\n    parameters:\n      url: https://a-dummy-url.com # Demonstrates how parameters can be passed to GraphQL resolvers\n      use-aio-cache: 3600 # number of seconds for caching; set to false or remove to disable caching\n      remoteSchemas: # Action with smaller order has \"merge priority\" in schema conflicts\n        cart:\n          order: 20\n          action: graphql-reference/cart\n\n  cart:\n    name: graphql-reference/cart\n    handler: src/remote/cartResolver.main\n    concurrency: 200\n"]},{"id":205552453,"files":["service:\n  name: ichef-api\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    port: 4000\n  webpack:\n    webpackConfig: ./config/webpack/webpack.config.js\n    includeModules: true\n    packager: npm\n\nfunctions:\n  graphql:\n    handler: src/lambda/graphql.handler\n    memorySize: 128\n    timeout: 5\n    events:\n      - http:\n          path: graphql\n          method: get\n          # cors: true\n      - http:\n          path: graphql\n          method: post\n          authorizer: aws_iam\n          # cors:\n          # origin: 'http://localhost:3000'\n"]},{"id":144787765,"files":["service: ${file(./../../constants.yml):NAME}-example-service\n\n# endpoints\nfunctions:\n  exampleCreate:\n    handler: handler.exampleCreate\n    events:\n      - http:\n          path: example\n          method: post\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleCreate-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleGet:\n    handler: handler.exampleGet\n    events:\n      - http:\n          path: example/{id}\n          method: get\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleGet-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleList:\n    handler: handler.exampleList\n    events:\n      - http:\n          path: example\n          method: get\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleList-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleUpdate:\n    handler: handler.exampleUpdate\n    events:\n      - http:\n          path: example/{id}\n          method: put\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleUpdate-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n  exampleDelete:\n    handler: handler.exampleDelete\n    events:\n      - http:\n          path: example/{id}\n          method: delete\n          cors: true\n      - schedule:\n          name: ${file(./../../constants.yml):NAME}-exampleDelete-${opt:stage, 'dev'}\n          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}\n          enabled: ${file(./../../constants.yml):AWS_WARMUP}\n          input:\n            warmup: true\n\n# config\nprovider:\n  name: aws\n  runtime: ${file(./../../constants.yml):NODE_VERSION}\n  stage: ${opt:stage, 'dev'}\n  role: ${file(./../../serverless.env.yml):AWS_ROLE}\n  memorySize: ${file(./../../constants.yml):AWS_MEMORY}\n  timeout: ${file(./../../constants.yml):AWS_TIMEOUT}\n  vpc:\n    securityGroupIds:\n      - ${file(./../../serverless.env.yml):VPC_SECURITY}\n    subnetIds:\n      - ${file(./../../serverless.env.yml):VPC_SUBNET1}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET2}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET3}\n      - ${file(./../../serverless.env.yml):VPC_SUBNET4}\n  apiGateway:\n    restApiId: ${file(./../../serverless.env.yml):AWS_API_ID_${self:custom.environments.${self:provider.stage}}}\n    restApiRootResourceId: ${file(./../../serverless.env.yml):AWS_API_ROOT_ID_${self:custom.environments.${self:provider.stage}}}\n  environment:\n    STAGE: ${self:provider.stage}\n    DB_HOST: ${file(./../../serverless.env.yml):DB_HOST}\n    DB_USER: ${file(./../../serverless.env.yml):DB_USER}\n    DB_PASS: ${file(./../../serverless.env.yml):DB_PASS}\n    DB_NAME: ${file(./../../serverless.env.yml):DB_NAME}\n\nplugins:\n  - serverless-webpack\n\ncustom:\n  environments:\n    dev: DEV\n    prod: PROD\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: true\n    packager: 'npm'\n"]},{"id":223923111,"files":["service: business-logic\n\nplugins:\n  - serverless-latest-layer-plugin # activate plugin\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # programming language & version\n  stage: ${opt:stage, 'dev'} # current stage dev/test/prod\n  region: ${opt:region, 'eu-central-1'} # current AWS Region\n\ncustom:\n  config: ${file(../ouputs.json)} # load json\n  ACCOUNT_ID: ${self:custom.config.account_id} #reference of the id \n\nfunctions:\n  helloWorld:\n    handler: handler.hello\n    events:\n      - http:\n          path: helloWorld\n          method: get\n          cors: true\n    environment:\n      NODE_PATH: \"./:/opt/node_modules\" # Important otherwise node_modules imported can not be found\n    layers:\n      - arn:aws:lambda:${opt:region, 'eu-central-1'}:${self:custom.ACCOUNT_ID}:layer:${opt:stage, 'dev'}-base-layer:latest \n      # ARN is created automatically with given informations\n\n\n","service: microservices\n\nprovider:\n  name: aws\n  runtime: nodejs10.x # programming language & version\n  stage: ${opt:stage, 'dev'} # current stage dev/test/prod\n  region: ${opt:region, 'eu-central-1'} # current AWS Region\n\nlayers:\n  dependencies:\n    path: dependencies-layer # required path of layer\n    name: ${self:provider.stage}-dependencies-layer # optional\n    description: Description of what the lambda layer does # optional\n    compatibleRuntimes: # optional\n      - nodejs8.10\n      - nodejs10.x\n"]},{"id":151180153,"files":["service: sls-group-telegram-bot\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    TELEGRAM_TOKEN: ${ssm:telegram-token~true} \n    GROUP_TABLE: \"group-bot-groups\"\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/*\"\n\nfunctions:\n  process:\n    handler: src/handler.handle\n    events:\n      - http:\n          path: /\n          method: post\n\nresources:\n  Resources:\n    groupsDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.GROUP_TABLE}\n        AttributeDefinitions:\n          -\n            AttributeName: chatId\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: chatId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  serverless-offline:\n    port: 7002\n    skipCacheInvalidation: false\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true      \n\n\n"]},{"id":183459395,"files":["service: oauth-workflow\n\ncustom:\n  namespace: ${env:OW_NAMESPACE}\n  shared_namespace: ${env:OW_SHARED_NAMESPACE, 'adobeio'}\n  shared_oauth_package: oauth\n  shared_cache_package: cache\n  client_id: ${env:OAUTH_API_KEY, 'change-me'}\n  client_secret: ${env:CLIENT_SECRET, 'change-me'}\n  scopes: ${env:SCOPES, 'openid,AdobeID'}\n  persistence: ${env:IMS_AUTH_PERSIST, 'false'}\n  accessKeyId: ${env:AWS_ACCESS_KEY_ID, 'XXX'}\n  secretAccessKey: ${env:AWS_SECRET_ACCESS_KEY, 'XXX'}\n  base_url: https://runtime.adobe.io\n  redirect_url: ${env:REDIRECT_URL, 'http://www.adobe.com'}\n  # Cookie path after $(BASE_URL)/api/v1/web/\n  cookie_path: ${env:COOKIE_PATH, self:custom.namespace}\n  # package binding to the shared package\n  adobe_oauth_package: ${env:LOCAL_AUTH_PACKAGE_BINDING, 'myauthp-shared'}\n  adobe_cache_package: ${env:LOCAL_CACHE_PACKAGE_BINDING, 'mycachep-shared'}\n  # package for the auth sequence\n  adobe_auth_seq_package: ${env:LOCAL_AUTH_PACKAGE, 'myauthp'}\n  auth_seq_name: ${self:custom.adobe_auth_seq_package}/authenticate\n\nprovider:\n  name: openwhisk\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-openwhisk\n\nfunctions:\n  # adobe/authenticate sequence\n  authenticate:\n    name: ${self:custom.auth_seq_name}\n    sequence:\n      - /${self:custom.namespace}/${self:custom.adobe_oauth_package}/login\n      - /${self:custom.shared_namespace}/${self:custom.shared_cache_package}/encrypt\n      - /${self:custom.namespace}/${self:custom.adobe_oauth_package}/success\n    annotations:\n      web-export: true\n\n\nresources:\n  packages:\n    adobe-oauth:\n      name: ${self:custom.adobe_oauth_package}\n      binding: /${self:custom.shared_namespace}/${self:custom.shared_oauth_package}\n      parameters:\n        auth_provider: \"adobe-oauth2\"\n        auth_provider_name: \"adobe\"\n        client_id: ${self:custom.client_id}\n        client_secret: ${self:custom.client_secret}\n        scopes: ${self:custom.scopes}\n        persistence: ${self:custom.persistence}\n        callback_url: ${self:custom.base_url}/api/v1/web/${self:custom.namespace}/${self:custom.auth_seq_name}\n        redirect_url: ${self:custom.redirect_url}\n        cookie_path: ${self:custom.cookie_path}\n        cache_namespace: ${self:custom.namespace}\n        cache_package: ${self:custom.adobe_cache_package}\n\n    adobe:\n      name: ${self:custom.adobe_auth_seq_package}\n","service: jwtauth-workflow\n\ncustom:\n  package: ${env:OW_PACKAGE, 'change-me'}\n  namespace: ${env:OW_NAMESPACE}\n  shared_namespace: ${env:OW_SHARED_NAMESPACE, 'adobeio'}\n  shared_oauth_package: oauth\n  shared_cache_package: cache\n  jwt_client_id: ${file(./jwt.json):jwt_client_id}\n  jwt_client_secret: ${file(./jwt.json):jwt_client_secret}\n  technical_account_id: ${file(./jwt.json):technical_account_id}\n  org_id: ${file(./jwt.json):org_id}\n  meta_scopes: ${file(./jwt.json):meta_scopes}\n  private_key: ${file(./jwt.json):private_key}\n  persistence: ${env:IMS_AUTH_PERSIST, 'false'}\n  accessKeyId: ${env:AWS_ACCESS_KEY_ID, 'XXX'}\n  secretAccessKey: ${env:AWS_SECRET_ACCESS_KEY, 'XXX'}\n  base_url: https://runtime.adobe.io\n  redirect_url: ${env:REDIRECT_URL, 'http://www.adobe.com'}\n  adobe_auth_package: ${env:LOCAL_AUTH_PACKAGE_BINDING, 'jwtauthp-shared'}\n  adobe_cache_package: ${env:LOCAL_CACHE_PACKAGE_BINDING, 'jwtcachep-shared'}\n  adobe_auth_seq_package: ${env:LOCAL_AUTH_PACKAGE, 'jwtauthp'}\n  jwtauth_seq_name: ${self:custom.adobe_auth_seq_package}/jwtauthenticate\n\n\nprovider:\n  name: openwhisk\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-openwhisk\n\nfunctions:\n  # adobe/jwtauthenticate sequence\n  jwtauthenticate:\n    name: ${self:custom.jwtauth_seq_name}\n    sequence:\n      - /${self:custom.namespace}/${self:custom.adobe_auth_package}/jwtauth\n    annotations:\n      web-export: true\n\nresources:\n  packages:\n    adobe-oauth:\n      name: ${self:custom.adobe_auth_package}\n      binding: /${self:custom.shared_namespace}/${self:custom.shared_oauth_package}\n      parameters:\n        jwt_client_id: ${self:custom.jwt_client_id}\n        jwt_client_secret: ${self:custom.jwt_client_secret}\n        technical_account_id: ${self:custom.technical_account_id}\n        org_id: ${self:custom.org_id}\n        meta_scopes: ${self:custom.meta_scopes}\n        private_key: ${self:custom.private_key}\n        persistence: ${self:custom.persistence}\n        redirect_url: ${self:custom.redirect_url}\n        cache_namespace: ${self:custom.namespace}\n        cache_package: ${self:custom.adobe_cache_package}\n\n    adobe:\n      name: ${self:custom.adobe_auth_seq_package}\n"]},{"id":218249269,"files":["service:\n  name: aws-fanout-example\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"sns:Publish\"\n      Resource: !Ref fanoutTopic\n\nresources:\n  Resources:\n    fanoutQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: fanout-queue\n        VisibilityTimeout: 30\n        ReceiveMessageWaitTimeSeconds: 20\n    fanoutTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: fanout-topic\n        Subscription:\n          - Endpoint:\n              !GetAtt \n                - fanoutQueue\n                - Arn\n            Protocol: sqs\n    fanoutQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Id:\n            Fn::Join:\n              - \"\"\n              - - !GetAtt \n                  - fanoutQueue\n                  - Arn\n                - \"/\"\n                - \"SQSSendMessagePolicy\"\n          Statement:\n            - Sid: \"SendMessagePolicy\"\n              Effect: \"Allow\"\n              Principal:\n                AWS: \"*\"\n              Action:\n                - \"SQS:SendMessage\"\n              Resource:\n                !GetAtt \n                  - fanoutQueue\n                  - Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref fanoutTopic\n        Queues:\n          - !GetAtt \n              - fanoutQueue\n              - QueueName\nfunctions:\n  emitMessage:\n    handler: src/pushMessage.handler\n    environment:\n      TOPIC_ARN: !Ref fanoutTopic\n    events:\n      - http:\n          method: post\n          path: message\n  fanoutLambdaTrigger:\n    handler: src/handler.handler\n    events:\n      - sqs:\n          arn:\n            !GetAtt \n              - fanoutQueue\n              - Arn\n          batchSize: 10\n    \n","service:\n  name: aws-lambda-sqs-long-polling\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"sqs:*\"\n    Resource:\n      Fn::Join:\n        - \"\"\n        - - \"arn:aws:sqs:\"\n          - Ref: AWS::Region\n          - \":\"\n          - Ref: AWS::AccountId\n          - \":long-polling-queue\"\n\nresources:\n  Resources:\n    LongPollingQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: \"long-polling-queue\"\n        ReceiveMessageWaitTimeSeconds: 20\n\nfunctions:\n  sqsLongPollingHanlder:\n    handler: src/handler.handler\n    timeout: 5\n    memorySize: 128\n    events:\n      - sqs:\n          arn: \n            Fn::Join:\n              - \"\"\n              - - \"arn:aws:sqs:\"\n                - Ref: AWS::Region\n                - \":\"\n                - Ref: AWS::AccountId\n                - \":long-polling-queue\"\n          batchSize: 10\n  pushMessageToQueue:\n    handler: src/provider.handler\n    timeout: 10\n    memorySize: 256\n    environment:\n      QUEUE_URL: \n        Fn::Join:\n          - \"\"\n          - - \"https://sqs.\"\n            - \"Ref\": \"AWS::Region\"\n            - \".amazonaws.com/\"\n            - Ref: AWS::AccountId\n            - \"/long-polling-queue\"\n    events:\n      - http:\n          path: messages/bulkCreate\n          method: post ","service:\n  name: aws-step-func-example\n\nplugins:\n  - serverless-webpack\n  - serverless-step-functions\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:BatchGet*\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:DescribeTable\"\n        - \"dynamodb:Get*\"\n        - \"dynamodb:Query\"\n        - \"dynamodb:Scan\"\n        - \"dynamodb:BatchWrite*\"\n        - \"dynamodb:CreateTable\"\n        - \"dynamodb:Delete*\"\n        - \"dynamodb:Update*\"\n        - \"dynamodb:PutItem\"\n      Resource:\n        Fn::GetAtt: [orderTable, Arn]\n\nresources:\n  Resources:\n    orderTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: order-table\n        BillingMode: PROVISIONED\n        AttributeDefinitions: \n          - AttributeName : Id\n            AttributeType : S\n        KeySchema:\n          - AttributeName: Id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 3\n          WriteCapacityUnits: 3\n\nfunctions:\n  validate-order:\n    handler: src/validateOrder.handler\n  create-order:\n    handler: src/createOrder.handler\n  validate-creditCard:\n    handler: src/validateCreditCard.handler\n  mark-order-as-proccessed:\n    handler: src/markOrderAsProccessed.handler\n\nstepFunctions:\n  stateMachines:\n    orderStateMachine:\n      events:\n        - http:\n            path: /order\n            method: POST\n      name: orderStateMachine\n      definition:\n        Comment: \"Order State Machine\"\n        StartAt: ValidateOrder\n        States:\n          ValidateOrder:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [validate-order, Arn]\n            Next: CreateOrder\n          CreateOrder:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [create-order, Arn]\n            Next: ValidateCreditCard\n          ValidateCreditCard:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [validate-creditCard, Arn]\n            Next: MarkOrderAsProccessed\n          MarkOrderAsProccessed:\n            Type: Task\n            Resource:\n              Fn::GetAtt: [mark-order-as-proccessed, Arn]\n            End: true\n      tags:\n        Name: orderStateMachine\n","service:\n  name: aws-waf-lambda-apigateway\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\nresources:\n  Resources:\n    MyIPSetBlacklist: \n      Type: AWS::WAF::IPSet\n      Properties: \n        Name: IPSet for blacklisted IP adresses\n        IPSetDescriptors: \n          - \n            Type: \"IPV4\"\n            Value: \"10.0.0/16\"\n    MyIPSetRateBasedRule:\n      Type: AWS::WAFRegional::Rule\n      Properties: \n        Predicates: \n          - DataId:\n              Ref: MyIPSetBlacklist\n            Negated: false\n            Type: IPMatch\n        MetricName: MyIPSetRateBasedRule\n        Name: MyIPSetRateBasedRule\n    MyWebACL:\n      Type: AWS::WAFRegional::WebACL\n      Properties: \n        Name: MyWebACL\n        DefaultAction: \n          Type: ALLOW\n        MetricName: MyWebACL\n        Rules: \n          - \n            Action: \n              Type: BLOCK\n            Priority: 1\n            RuleId: \n              Ref: MyIPSetRateBasedRule\n    MyWebACLAssiociation:\n      Type: AWS::WAFRegional::WebACLAssociation\n      Properties: \n        ResourceArn:\n          Fn::Join:\n            - \"/\"\n            - \n              - Fn::Join: [\":\", [\"arn:aws:execute-api\", {\"Ref\": \"AWS::Region\"}, {\"Ref\":\"AWS::AccountId\"}, {\"Ref\": \"ApiGatewayRestApi\"}]]\n              - \"*\"\n        WebACLId:\n          Ref: MyWebACL\n            \nfunctions:\n  simpleFunc:\n    handler: src/handler.handler\n    events:\n      - http:\n          method: get\n          path: developers\n    \n","service:\n  name: serverless-aws-kinesis-lambda\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'ap-southeast-2'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"kinesis:GetRecords\"\n        - \"kinesis:PutRecord\"\n        - \"kinesis:PutRecords\"\n      Resource:\n        Fn::GetAtt: [KinesisStream, Arn]\n\nresources:\n  Resources:\n    KinesisStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n        Name: MyKinesisStream \n        RetentionPeriodHours: 48 \n        ShardCount: 1\n        Tags: \n            - Key: Stage\n              Value: ${opt:stage}\nfunctions:\n  read-record-from-stream:\n    handler: src/handler.readRecord\n    timeout: 5\n    memorySize: 128\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - KinesisStream\n              - Arn\n  put-record-to-stream:\n    handler: src/handler.putRecord\n    timeout: 5\n    memorySize: 128\n    environment:\n      STREAM_NAME: !Ref KinesisStream\n    events:\n      - http:\n          method: post\n          path: records","service:\n  name: serverless-lambda-cognito-authentication\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'ap-southeast-2'}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"cognito-identity:*\"\n        - \"cognito-sync:*\"\n        - \"cognito-idp:*\"\n      Resource: \"*\"\n\nresources:\n  Resources:\n    CognitoUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: user-pool-example\n        MfaConfiguration: \"OFF\"\n        UsernameAttributes:\n          - email\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 8\n            RequireLowercase: False\n            RequireNumbers: True\n            RequireSymbols: True\n            RequireUppercase: True\n        Schema:\n          - Name: email\n            AttributeDataType: String\n            Mutable: false\n            Required: true\n    CognitoUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: client-example\n        UserPoolId: !Ref CognitoUserPool\n        GenerateSecret: false\n        ExplicitAuthFlows:\n          - \"USER_PASSWORD_AUTH\"\n          - \"ADMIN_NO_SRP_AUTH\"\n    ApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      DependsOn:\n        - ApiGatewayRestApi\n      Properties:\n        Name: cognito-authorizer\n        IdentitySource: method.request.header.Authorization\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        Type: COGNITO_USER_POOLS\n        ProviderARNs:\n          - Fn::GetAtt: [CognitoUserPool, Arn]\n\nfunctions:\n  authenticate:\n    handler: src/handler.authenticate\n    timeout: 5\n    memorySize: 128\n    environment:\n      COGNITO_USER_POOL_ID: !Ref CognitoUserPool\n      COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient\n    events:\n      - http:\n          method: post\n          path: authenticate\n  register:\n    handler: src/handler.register\n    timeout: 5\n    memorySize: 128\n    environment:\n      COGNITO_USER_POOL_ID: !Ref CognitoUserPool\n      COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient\n    events:\n      - http:\n          method: post\n          path: register\n  public-func:\n    handler: src/handler.noAuth\n    timeout: 5\n    memorySize: 128\n    events:\n      - http:\n          method: get\n          path: public\n  private-func:\n    handler: src/handler.requireAuth\n    timeout: 5\n    memorySize: 128\n    events:\n      - http:\n          method: get\n          path: private\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  pre-signup:\n    handler: src/hooks/pre-signup.handler\n    timeout: 5\n    memorySize: 128\n    events:\n      - cognitoUserPool:\n          pool: user-pool-example # must be name of cognito user pool\n          trigger: PreSignUp\n          existing: true","service:\n  name: aws-s3-sftp-sync\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  iamRoleStatements:\n  - Effect: \"Allow\"\n    Action:\n      - \"sqs:*\"\n    Resource:\n      Fn::GetAtt:\n        - SyncedItemsQueue\n        - Arn\n  - Effect: \"Allow\"\n    Action:\n      - \"s3:*\"\n    Resource: \"arn:aws:s3:::*\"\n\nresources:\n  Resources:\n    SyncedItemsQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${env:QUEUE_NAME}\n        ReceiveMessageWaitTimeSeconds: 20\n        VisibilityTimeout: 900\n\nfunctions:\n  sync-s3-to-sftp-func:\n    handler: src/handler.syncS3ToSFTP\n    timeout: 900\n    memorySize: 3000\n    events:\n      - s3:\n          bucket: \"my-sftp-synced-bucket\"\n          event: s3:ObjectCreated:*\n          existing: true\n  list-sftp-files-to-be-synced-func:\n    handler: src/handler.listSFTPFilesToBeSynced\n    timeout: 900\n    memorySize: 256\n    environment:\n      QUEUE_URL: !Ref SyncedItemsQueue\n      SFTP_HOST: ${env:SFTP_HOST}\n      SFTP_USERNAME: ${env:SFTP_USERNAME}\n      SFTP_PASSWORD: ${env:SFTP_PASSWORD}\n      SFTP_DIR: ${env:SFTP_DIR}\n      S3_SYNCED_BUCKET: ${env:S3_SYNCED_BUCKET}\n    events:\n      - schedule:\n          rate: rate(10 minutes)\n          enabled: true\n  sync-single-sftp-file-to-s3-func: \n    handler: src/handler.syncSFTPFileToS3\n    timeout: 900\n    memorySize: 256\n    environment:\n      SFTP_HOST: ${env:SFTP_HOST}\n      SFTP_USERNAME: ${env:SFTP_USERNAME}\n      SFTP_PASSWORD: ${env:SFTP_PASSWORD}\n      SFTP_DIR: ${env:SFTP_DIR}\n      S3_SYNCED_BUCKET: ${env:S3_SYNCED_BUCKET}\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - SyncedItemsQueue\n              - Arn\n          batchSize: 2\n  "]},{"id":164284342,"files":["service: my-service # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello","service: my-service\nprovider:\n  name: aws\n  runtime: nodejs10.x\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n    - http: GET hello"]},{"id":164475039,"files":["service: serverless-marketplace\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  memorySize: 128\n  apiKeys:\n    - main\n  environment:\n    ISSUER: ${self:service}\n    PRODUCTS_TABLE: ${self:service}-products\n    CARTS_TABLE: ${self:service}-carts\n    PHOTO_BUCKET: ${self:service}-photos\n    MAX_PHOTO_SIZE: 1048576 #Bytes = 1 MB\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CARTS_TABLE}\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n        - s3:GetObject\n        - s3:ListBucket\n      Resource:\n        - arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}\n        - arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*\n\nfunctions:\n  updateItem:\n    handler: src/products.update\n    events:\n      - http:\n          path: products/update\n          method: post\n          private: true\n          authorizer: adminAuth\n          cors: false\n  getItems:\n    handler: src/products.getAll\n    events:\n      - http:\n          path: products/query\n          method: get\n          private: true\n  queryItem:\n    handler: src/products.query\n    events:\n      - http:\n          path: products/query\n          method: post\n          private: true\n  createCart:\n    handler: src/carts.create\n    events:\n      - http:\n          path: cart/create\n          method: post\n          private: true\n  updateCart_addItem:\n    handler: src/carts.addItem\n    events:\n      - http:\n          path: cart/update\n          method: put\n          private: true\n          authorizer: userAuth\n  updateCart_removeItem:\n    handler: src/carts.removeItem\n    events:\n      - http:\n          path: cart/update\n          method: delete\n          private: true\n          authorizer: userAuth\n  completeCart:\n    handler: src/carts.complete\n    events:\n      - http:\n          path: cart/complete\n          method: post\n          private: true\n          authorizer: userAuth\n  cartInfo:\n    handler: src/carts.info\n    events:\n      - http:\n          path: cart/info\n          method: post\n          private: true\n          authorizer: userAuth\n  userAuth:\n    handler: src/security.userAuthorizer\n  adminAuth:\n    handler: src/security.adminAuthorizer\n\nresources:\n  Resources:\n    ProductsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.PRODUCTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: title\n            AttributeType: S\n        KeySchema:\n          - AttributeName: title\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    CartsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.CARTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: username\n            AttributeType: S\n        KeySchema:\n          - AttributeName: username\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n    PhotoBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.PHOTO_BUCKET}\npackage:\n  excludeDevDependencies: true\n\nplugins:\n  - serverless-offline\n"]},{"id":177639517,"files":["org: johnbelisle\napp: serverless-ddns\nservice: serverless-ddns \n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: dev\n  region: us-east-1\n  logs:\n    restApi: true\n  tracing:\n    apiGateway: true\n    lambda: true\n\n\ncustom:\n  config: ${file(config.prod.json)} \n  myStage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: ${self:custom.config.apiDomainName}\n    # stage: \n    # basePath: api\n    certificateName: '${self:custom.config.apiDomainName}'\n    createRoute53Record: true\n    endpointType: 'edge'  \n\nplugins:\n  - serverless-domain-manager\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  echo-ip:\n    handler: src/echoip.handler\n    role: basicLambdaRole\n    memorySize: 128\n    events:\n      - http:\n          path: /\n          method: GET\n  update-home-dns:\n    handler: src/updateHomeDNS.handler\n    role: lambdaUpdateRoute53Role\n    memorySize: 128\n    environment:\n      DNS_HOST_NAME: ${self:custom.config.ddnsHostName}\n      TOPIC_ARN: ${self:custom.config.notificationTopicARN}\n    events:      \n      - http:\n          path: /      \n          method: POST\n          authorizer:\n            type: aws_iam                     \nresources:\n  Resources:    \n    basicLambdaRole:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: BasicLambdaRoleServerlessDDNS\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole        \n        Policies:\n          - PolicyName: BasicLambdaRoleLoggingPolicy\n            PolicyDocument:            \n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:logs:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":log-group:/aws/lambda/*:*\"]]}\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                  Resource:\n                    - \"*\"                  \n    lambdaUpdateRoute53Role:\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: UpdateLambdaRoleServerlessDDNS\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole        \n        Policies:\n          - PolicyName: UpdateRoute53LambdaRolePolicy\n            PolicyDocument:            \n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:logs:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":log-group:/aws/lambda/*:*\"]]}\n                - Effect: Allow\n                  Action:\n                    - route53:ListHostedZones\n                    - route53:ChangeResourceRecordSets\n                    - route53:ListResourceRecordSets\n                  Resource:\n                    - \"*\"\n                - Effect: Allow\n                  Action:\n                    - sns:Publish\n                    - sns:Subscribe\n                  Resource: arn:aws:sns:us-east-1:197556904653:NotifyMe\n                - Effect: Allow\n                  Action:\n                    - xray:PutTraceSegments\n                  Resource:\n                    - \"*\"\n    InvokeUpdateHomeDDNSAPIPolicy:\n      Type: \"AWS::IAM::ManagedPolicy\"\n      Properties:\n        Description: \"Policy for allowing invoke access to the updateHomeDDNS secured API\"\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            Effect: Allow\n            Action: execute-api:Invoke\n            Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:execute-api:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":\",{\"Ref\":\"ApiGatewayRestApi\"},\"/*\"]]}\n    APIUser:\n      Type: \"AWS::IAM::User\"\n      Properties:\n        ManagedPolicyArns:\n          - { \"Ref\": \"InvokeUpdateHomeDDNSAPIPolicy\" }\n        UserName: update-homeddns-api-user    \n    MockResource:\n      Type: AWS::ApiGateway::Resource\n      Properties:\n        ParentId:\n          Fn::GetAtt:\n            - ApiGatewayRestApi # our default Rest API logical ID\n            - RootResourceId\n        PathPart: favicon.ico # the endpoint in your API that is set as proxy\n        RestApiId:\n          Ref: ApiGatewayRestApi\n    MockMethod:\n      Type: AWS::ApiGateway::Method\n      Properties:\n        AuthorizationType: None\n        HttpMethod: GET\n        ResourceId:\n          Ref: MockResource\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        MethodResponses:\n          - StatusCode: 200\n        Integration:\n          RequestTemplates:\n            application/json: |\n              {\"statusCode\": 200}\n          Type: MOCK\n          IntegrationResponses:\n            - ResponseTemplates:\n                application/json: ''\n              StatusCode: 200        "]},{"id":190678977,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: durinn # NOTE: update this with your service name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    NODE_ENV: 'production'\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n\npackage:\n  include:\n    - assets/**\n    - config/**\n  exclude:\n    - tests/**\n\nfunctions:\n  app:\n    handler: handler.handler\n    events:\n      - http:\n          path: /{proxy+}\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - Version\n              - Language\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-offline\n  - serverless-content-encoding\n  - serverless-prune-plugin\n\ncustom:\n  contentEncoding:\n    minimumCompressionSize: 0 # Minimum body size required for compression in bytes\n  prune:\n    automatic: true\n    number: 3\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":116861410,"files":["service: beer\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:stage, 'dev'}\n  environment:\n    SERVICE: ${self:service}\n    STAGE: ${self:provider.stage}\n  iamRoleStatements:\n    -  Effect: \"Allow\"\n       Action:\n         - \"dynamodb:Query\"\n         - \"dynamodb:Scan\"\n         - \"dynamodb:GetItem\"\n         - \"dynamodb:PutItem\"\n         - \"dynamodb:UpdateItem\"\n         - \"dynamodb:DeleteItem\"\n       Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${self:provider.stage}\"\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:ListBucket\"\n       Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::\"\n             - Ref: ServerlessDeploymentBucket\n    -  Effect: \"Allow\"\n       Action:\n         - \"s3:PutObject\"\n       Resource:\n         Fn::Join:\n           - \"\"\n           - - \"arn:aws:s3:::\"\n             - Ref: ServerlessDeploymentBucket\n             - \"/*\"\n\nresources:\n  Resources:\n    DynamoDBTableBeer:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: Name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: Name\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n  - serverless-prune-plugin\n\ncustom:\n  customDomain:\n    domainName: ${env:DOMAIN}\n    basePath: ${self:provider.stage}\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n  prune:\n    automatic: true\n    number: 2\n\nfunctions:\n  beer:\n    handler: handler.handler\n    events:\n      - http:\n          path: help\n          method: get\n          cors: true\n      - http:\n          path: add\n          method: post\n          cors: true\n      - http:\n          path: list\n          method: get\n          cors: true\n      - http:\n          path: vote\n          method: post\n          cors: true\n      - http:\n          path: remove\n          method: post\n          cors: true\n      - http:\n          path: purge\n          method: post\n          cors: true\n"]},{"id":157554237,"files":["service: cloudfront-invalidate-dist\n\nprovider:\n  name: aws\n  runtime: ${opt:runtime, 'nodejs10.x'}\n  memorySize: 128\n  timeout: 30\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"codepipeline:PutJobFailureResult\"\n        - \"codepipeline:PutJobSuccessResult\"\n        - \"cloudfront:CreateInvalidation\"\n      Resource: \"*\"\n\nfunctions:\n  invalidate:\n    handler: handler.handler\n"]},{"id":165521563,"files":["service: gh2tg\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\n  stage: production\n  region: ap-northeast-2\n  memorySize: 128\n\n  environment:\n    GH2TG_SECRET: ${env:GH2TG_SECRET}\n    GH2TG_TG_TOKEN: ${env:GH2TG_TG_TOKEN}\n    GH2TG_TG_CHATID: ${env:GH2TG_TG_CHATID}\n\nplugins:\n  - serverless-dotenv-plugin\n\nfunctions:\n  push:\n    handler: handler.push\n    events:\n      - http:\n          path: push\n          method: post\n"]},{"id":158976270,"files":["# For full config options, check the docs:\n#    docs.serverless.com\n\nservice: example-dynamodbAutoBackups\n\nframeworkVersion: \"=1.33.2\"\n\nplugins:\n  - '@unly/serverless-plugin-dynamodb-backups' # Must be first, even before \"serverless-webpack\", see https://github.com/UnlyEd/serverless-plugin-dynamodb-backups\n  - serverless-webpack # Must be second, see https://github.com/99xt/serverless-dynamodb-local#using-with-serverless-offline-and-serverless-webpack-plugin\n  - serverless-offline # See https://github.com/dherault/serverless-offline\n\ncustom:\n  dynamodbAutoBackups: # @unly/serverless-plugin-dynamodb-backups configuration (see README for more)\n    backupRate: rate(1 minute) # Set to 1mn in the example to see the result quickly\n    source: src/backups.handler\n    name: ${self:custom.name} # Using the service name as a base name may be a good practice (but it doesn't work at the time, due to a bug on our side)\n    backupRemovalEnabled: true\n    backupRetentionDays: 1 # Created backups will be removed the next day\n  name: example-dynamodbAutoBackups\n  serverless-offline:\n    port: 3000\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: yarn\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: development # TODO You may want to change this\n  region: eu-west-1 # TODO You may want to change this\n  profile: sandbox # TODO You need to either remove this or use your own profile\n  environment:\n    TABLE_NAME: Book # We specify the table name so we can check its backups list using the dedicated endpoint /listBackups\n\nfunctions:\n  listBackups: # Endpoint example to see the list of all backups that have been made\n    handler: src/listBackups.handler\n    events:\n      - http:\n          method: GET\n          path: /listBackups\n\nresources:\n  Resources:\n    BookTable: # Create dynamodb table on aws for testing\n      Type: AWS::DynamoDB::Table # see https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html\n      Properties:\n        TableName: Book\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n"]},{"id":151765049,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: backend\n# app and org for use with dashboard.serverless.com\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  profile: private\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  list:\n    handler: books.books\n    events:\n      - http:\n          path: api/books\n          method: get\n  book:\n    handler: book.book\n    events:\n      - http:\n          path: api/book/{record}\n          method: get\n  renew:\n    handler: renew.renew\n    events:\n      - http:\n          path: api/book/renew/{barcode}\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":221394768,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: ${env:STAGE}\n#  region: us-east-1\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: post\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-offline"]},{"id":158428274,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: serverless-slack-invite\n\nplugins:\n  - serverless-domain-manager\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  customDomain:\n    domainName: slackinvite.dev.tophat.com\n    basePath: ''\n    stage: ${self:provider.stage}\n    createRoute53Record: true\n\n  stageSettings:\n    CacheClusterEnabled: true\n    CacheClusterSize: '0.5'\n    MethodSettings:\n      - CachingEnabled: true\n      - HttpMethod: GET\n        ResourcePath: \"/\"\n        CachingEnabled: true\n        CacheTtlInSeconds: 30\n      - HttpMethod: GET\n        ResourcePath: \"/{proxy+}\"\n        CachingEnabled: true\n        CacheTtlInSeconds: 30\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n\n  environment:\n    SLACK_API_TOKEN: ${env:SLACK_API_TOKEN}\n    SLACK_SUBDOMAIN: ${env:SLACK_SUBDOMAIN}\n\nfunctions:\n  app:\n    handler: dist/lambda.init\n    name: '${self:service}-app-router-${self:custom.stage}'\n    timeout: 30\n    events:\n      - http:\n          path: /\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n            allowCredentials: false\n      - http:\n          path: '{proxy+}'\n          method: any\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n            allowCredentials: false\n\n\n"]},{"id":219040465,"files":["service: ofr-contact\napp: ofreport\norg: joshukraine\n\ncustom:\n  secrets: ${file(secrets.json)}\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${self:custom.secrets.NODE_ENV}\n  region: us-east-1\n  profile: ${self:custom.secrets.PROFILE}\n  environment:\n    NODE_ENV: ${self:custom.secrets.NODE_ENV}\n    SRC_EMAIL: ${self:custom.secrets.SRC_EMAIL}\n    DEST_EMAIL: ${self:custom.secrets.DEST_EMAIL}\n    DOMAIN: ${self:custom.secrets.DOMAIN}\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ses:SendEmail\"\n      Resource: [\"*\"]\n\nfunctions:\n  sendJSON:\n    handler: handler.sendJSON\n    events:\n      - http:\n          path: email/send/json\n          method: post\n          cors: true\n\nplugins:\n  - serverless-offline\n"]},{"id":220884837,"files":["# Welcome to Serverless!\nservice: serverless-example\napp: product-api\n\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n\nfunctions:\n  productAPI:\n    handler: Controller/products.handler\n    events:\n        - http:\n            path: /index\n            method: get\n\n\n        - http:\n            path: /\n            method: post\n\n\n        - http:\n            path: /\n            method: get\n\n        - http:\n            path: /{productId}\n            method: get\n\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n"]},{"id":136694667,"files":["service: bsdc-2018-memegen\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  helloServerless:\n    handler: handler.helloServerless\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  createMeme:\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\nfunctions:\n  createMeme:\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: post\n\n  sendMeme:\n    handler: handler.sendMeme\n    events:\n      - sns: arn:aws:sns:us-east-1:770772978315:static-meme-topic\n\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-plugin-deploy-environment\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-git-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\npackage:\n  include:\n    - images/\n    - lib/\n\ncustom:\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\nfunctions:\n  createMeme:\n    description: Create a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n\n  sendMeme:\n    description: Send a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.sendMeme\n    events:\n      - sns: arn:aws:sns:us-east-1:770772978315:bsdc-2018-memegen-request-topic-production # TODO, make this dynamic\n      # - sns:\n      #   arn: ${self:deployVariables.snsTopicArn} # TODO, make this work in dev and prod.\n      #   topicName: ${self:deployVariables.snsTopicName} # TODO, make this work in dev and prod.\n\nresources: ${file(config/cloudformation.yml)}\n","service: bsdc-2018-memegen\n\nplugins:\n  - serverless-plugin-deploy-environment\n  - serverless-offline\n  - serverless-offline-sns\n  - serverless-plugin-git-variables\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-east-1\n  stage: ${opt:stage}\n  role: arn:aws:iam::770772978315:role/bsdc-2018-memegen-lambda\n  memorySize: 128\n  timeout: 10\n\npackage:\n  include:\n    - images/\n    - lib/\n\ncustom:\n  deploy:\n    variables: ${file(config/variables.yml)}\n    environments: ${file(config/deploy.yml)}\n\nfunctions:\n  createMeme:\n    description: Create a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.createMeme\n    events:\n      - http:\n          path: meme\n          method: get\n\n  sendMeme:\n    description: Send a meme. COMMIT ${git:sha1}, BRANCH ${git:branch}\n    handler: handler.sendMeme\n    events:\n      - sns: ${self:deployVariables.snsTopicArn}\n\nresources: ${file(config/cloudformation.yml)}\n"]},{"id":159868061,"files":["service:\n  name: serverless-aws-nodejs-typescript\n\n# Add the serverless-webpack plugin\nplugins:\n  - serverless-webpack\n  - serverless-offline\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          method: get\n          path: hello\n"]},{"id":182468252,"files":["service: notes-app-api\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  tableName: ${self:custom.stage}-notes\n  tableThroughputs: \n    prod: 5\n    default: 1\n  tableTrhroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}\n\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          cors: true\n          authorizer: aws_iam\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          cors: true\n          authorizer: aws_iam\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          cors: true\n          authorizer: aws_iam\n  update: \n    handler: update.main\n    events: \n      - http:\n          path: notes/{id}\n          method: put\n          cors: true\n          authorizer: \n            type: aws_iam\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          cors: true\n          authorizer: aws_iam\n    \n\nresources:\n  # API Gateway Errors\n  - ${file(resources/api-gateway-errors.yml)}\n  # DynamoDB\n  - ${file(resources/dynamodb-table.yml)}"]},{"id":189552516,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: ses-forwarder # NOTE: update this with your service name\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}\n  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n      Resource:\n        - Fn::Join:\n          - ''\n          -\n            - Fn::GetAtt: [EmailsBucket, Arn]\n            - '/*'\n    - Effect: Allow\n      Action: ses:SendRawEmail\n      Resource:\n        - \"*\"\n\nfunctions:\n  sesForwarder:\n    handler: handler.sesForwarder\n    memorySize: 128 # default is 1024\n    timeout: 10 # default is 6\n    environment:\n      stage: ${self:custom.stage}\n      bucketName: !Ref EmailsBucket\n\nresources:\n  # Lambda\n  - ${file(resources/lambda-permissions.yml)}\n  # S3\n  - ${file(resources/s3-bucket.yml)}\n  # SES\n  - ${file(resources/ses-rule.yml)}\n"]},{"id":49236870,"files":["service: weather-api\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: us-west-2\n\n  environment: ${file(./serverless.env.yml)}\n\npackage:\n  individually: true\n  exclude:\n    - functions/**\n    - lambda/**\n    - '*.spec.js'\n    - .env\n    - .gitignore\n    - .git/**\n    - '*.yml'\n    - .eslintrc\n\nplugins:\n  - serverless-plugin-include-dependencies\n\nfunctions:\n  weather:\n    handler: lambda/weather.handler\n    package:\n      include:\n        - lambda/weather.js\n    \n    events:\n      - http:\n          path: weather\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"lat\": \"$input.params(''lat'')\", \"long\": \"$input.params(''long'')\"}'\n\n  forecast:\n    handler: lambda/forecast.handler\n    package:\n      include:\n        - lambda/forecast.js\n    \n    events:\n      - http:\n          path: forecast\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"lat\": \"$input.params(''lat'')\", \"long\": \"$input.params(''long'')\"}'\n\n  search:\n    handler: lambda/search.handler\n    package:\n      include:\n        - lambda/search.js\n    \n    events:\n      - http:\n          path: search\n          method: get\n          cors: true\n          integration: lambda\n          request:\n            template:\n              application/json: '{\"search\": \"$input.params(''search'')\"}'"]},{"id":216851993,"files":["service: sinote\n\nplugins:\n  - serverless-offline\n  - serverless-domain-manager\n\ncustom:\n  allowedHeaders:\n    - Accept\n    - Content-Type\n    - Content-Length\n    - Authorization\n    - X-Amz-Date\n    - X-Api-Key\n    - X-Amz-Security-Token\n    - X-Amz-User-Agent\n    - app_user_id\n    - app_user_name\n  customDomain:\n    domainName: api.sinote.me\n    basePath: 'v1'\n    stage: ${self:provider.stage}\n    certificateName: sinote.me\n    createRoute53Record: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: ap-northeast-1\n  stage: dev\n  memorySize: 128\n  timeout: 5\n  endpointType: regional\n  environment:\n    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n    COGNITO_IDENTITY_POOL_ID: ap-northeast-1:87753187-b49f-4d5d-90cb-dfcc9c194baa\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:UpdateItem\n        - dynamodb:PutItem\n        - dynamodb:DeleteItem\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}'\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/*'\n\nfunctions:\n  authenticate-google:\n    handler: api/authenticate/google.handler\n    description: Google IDP Authentication\n    events:\n      - http:\n          path: auth\n          method: get\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  hello:\n    handler: api/hello.handler\n    description: GET /\n    events:\n      - http:\n          path: /\n          method: get\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # category endpoint\n  get-category:\n    handler: api/category/get-category.handler\n    description: GET /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-categories:\n    handler: api/category/get-categories.handler\n    description: GET /categories\n    events:\n      - http:\n          path: categories\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-category:\n    handler: api/category/create-category.handler\n    description: POST /category\n    events:\n      - http:\n          path: categories\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  update-category:\n    handler: api/category/update-category.handler\n    description: PATCH /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: patch\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  delete-category:\n    handler: api/category/delete-category.handler\n    description: DELETE /categories/{categoryId}\n    events:\n      - http:\n          path: categories/{categoryId}\n          method: delete\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # tag endpoint\n  get-tag:\n    handler: api/tag/get-tag.handler\n    description: GET /tags/{tagId}\n    events:\n      - http:\n          path: tags/{tagId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-tags:\n    handler: api/tag/get-tags.handler\n    description: GET /tags\n    events:\n      - http:\n          path: tags\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-tag:\n    handler: api/tag/create-tag.handler\n    description: POST /tags\n    events:\n      - http:\n          path: tags\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  # note endpoint\n  get-note:\n    handler: api/note/get-note.handler\n    description: GET /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  get-notes:\n    handler: api/note/get-notes.handler\n    description: GET /notes\n    events:\n      - http:\n          path: notes\n          method: get\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  create-note:\n    handler: api/note/create-note.handler\n    description: POST /notes\n    events:\n      - http:\n          path: notes\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  update-note:\n    handler: api/note/update-note.handler\n    description: PATCH /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: patch\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  change-note-category:\n    handler: api/note/change-category.handler\n    description: POST /notes/{noteId}/change-note-cate\n    events:\n      - http:\n          path: notes/{noteId}/change-note-cate\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  delete-note:\n    handler: api/note/delete-note.handler\n    description: DELETE /notes/{noteId}\n    events:\n      - http:\n          path: notes/{noteId}\n          method: delete\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  attach-tag:\n    handler: api/note/attach-tag.handler\n    description: POST /notes/{noteId}/attach-tag\n    events:\n      - http:\n          path: notes/{noteId}/attach-tag\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\n  unattach-tag:\n    handler: api/note/unattach-tag.handler\n    description: POST /notes/{noteId}/unattach-tag\n    events:\n      - http:\n          path: notes/{noteId}/unattach-tag\n          method: post\n          authorizer: aws_iam\n          cors:\n            origin: '*'\n            headers: ${self:custom.allowedHeaders}\n\nresources:\n  Resources:\n    NotesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:provider.environment.NOTES_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: relationship_id\n            AttributeType: S\n          - AttributeName: create_timestamp\n            AttributeType: S\n          - AttributeName: update_timestamp\n            AttributeType: S\n          - AttributeName: user_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n          - AttributeName: relationship_id\n            KeyType: RANGE\n        LocalSecondaryIndexes:\n          - IndexName: create_time-index\n            KeySchema:\n              - AttributeName: id\n                KeyType: HASH\n              - AttributeName: create_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: update_time-index\n            KeySchema:\n              - AttributeName: id\n                KeyType: HASH\n              - AttributeName: update_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        GlobalSecondaryIndexes:\n          - IndexName: user-index\n            KeySchema:\n              - AttributeName: user_id\n                KeyType: HASH\n              - AttributeName: update_timestamp\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n            ProvisionedThroughput:\n              ReadCapacityUnits: 1\n              WriteCapacityUnits: 1\n    GatewayResponseDefault4XX:\n      Type: AWS::ApiGateway::GatewayResponse\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponseDefault5XX:\n      Type: AWS::ApiGateway::GatewayResponse\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n"]},{"id":143284054,"files":["service: serverless-sequelize-webpack\ncustom:\n  webpack: \n    webpackConfig: webpack.config.js\n    includeModules:\n      forceInclude:\n        - pg\n        - pg-hstore\n    packager: yarn\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  hello:\n    handler: dist/handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":69191081,"files":["service: amp-validator\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: v1\n  region: us-east-1\n\nfunctions:\n  validate:\n    handler: handler.validate\n    memorySize: 512\n    events:\n      - http:\n          path: validate\n          method: get\n"]},{"id":212264236,"files":["service: ${self:custom.serviceName}\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 256\n  reservedConcurrency: 2\n  timeout: 6\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'eu-central-1'}\n\n  usagePlan:\n    quota:\n      limit: 100\n      offset: 2\n      period: MONTH\n    throttle:\n      burstLimit: 10\n      rateLimit: 5\n\n  environment: #Global Environment variables\n    ${file(./config/${self:provider.stage}.yml)}\n\nfunctions:\n  ${file(./handlers/endpoints/index.yml)}\n\ncustom:\n  serviceName: ${opt:name, 'serverless-boilerplate'}\n  region: ${self:provider.region}\n  stage: ${opt:stage, self:provider.stage}\n  prefix: ${self:custom.stage}-${self:service}\n\n  serverless-offline:\n    host: '0.0.0.0'\n    port: '4000'\n\nplugins:\n  - serverless-offline\n\npackage:\n  excludeDevDependencies: false\n  exclude:\n    - node_modules/**\n    - '!node_modules/slugify/**'\n    - ./__test__/**\n    - ./.nvmrc\n    - ./config/**\n    - ./handlers/**\n"]},{"id":161865484,"files":["service: quick-start\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: /\n          method: get\n","service: kakao-payment-test\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - serverless-offline\n\nregion: ap-northeast-2\n\nfunctions:\n  payment:\n    handler: handler.payment\n    events:\n      - http:\n          path: /\n          method: get\n"]},{"id":114248834,"files":["service: caverna-menubot\n\ncustom:\n  targetBucketName: caverna-menus\n  targetSiteUrl: https://caverna.fi/lounas/\n  chrome:\n    flags:\n      - --window-size=1280x1696 # Letter size\n      - --hide-scrollbars\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: eu-west-1\n  environment:\n    PAGE_LOAD_TIMEOUT: 20000\n    LOGGING: true\n    SLACK_WEBHOOK_URL: ${file(./slack.yml):WebhookUrl}\n    TARGET_SITE_URL: ${self:custom.targetSiteUrl}\n    TARGET_BUCKET_NAME: ${self:custom.targetBucketName}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:PutObjectAcl\n      Resource: \"arn:aws:s3:::${self:custom.targetBucketName}/*\"\n\nplugins:\n  - serverless-plugin-chrome\n\nfunctions:\n  screenshot:\n    description: Takes picture of Caverna menu\n    memorySize: 1536\n    timeout: 30\n    handler: src/handlers/screenshot.default\n    events:\n      - http:\n          path: screenshot\n          method: get\n      - schedule: cron(30 7 ? * 2-6 *) # Mon-Fri, 10:30. Just before lunch time.\n\n  slack:\n    description: Post menu to slack\n    memorySize: 128\n    timeout: 10\n    handler: src/handlers/slackPoster.default\n    events:\n      - http:\n          path: slack\n          method: get\n      - s3:\n          bucket: ${self:custom.targetBucketName}\n          event: s3:ObjectCreated:*\n\n# Uncomment when deploying the first time to create required buckets\n# resources:\n#   Resources:\n#     NewResource:\n#       Type: AWS::S3::Bucket\n#       Properties:\n#         BucketName: ${self:custom.targetBucketName}"]},{"id":117490396,"files":["service: ExchangeCrawler\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-1\n  memorySize: 256\n  tracing: true\n  versionFunctions: false\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:DescribeStream\n        - dynamodb:GetRecords\n        - dynamodb:GetShardIterator\n        - dynamodb:ListStreams\n      Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n      Resource: '*'\n    - Effect: Allow\n      Action:\n        - sns:Publish\n      Resource: 'arn:aws:sns:us-east-1:*:*'\n    - Effect: Allow\n      Action:\n        - xray:PutTraceSegments\n        - xray:PutTelemetryRecords\n      Resource: '*'\n\n  environment:\n    CURRENCY_CHANGED_SNS_ARN:\n      Fn::Join:\n        - ':'\n        - - arn\n          - aws\n          - sns\n          - Ref: AWS::Region\n          - Ref: AWS::AccountId\n          - currencychanged\n    DATADOG_API_KEY: ${ssm:/exchangecrawler/DATADOG_API_KEY}\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-plugin-tracing\n  - serverless-webpack\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules:\n      forceExclude:\n        - aws-sdk\n\nresources:\n  Resources:\n    currencyTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: currency\n        AttributeDefinitions:\n          - AttributeName: bank\n            AttributeType: S\n        KeySchema:\n          - AttributeName: bank\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    currencyStorage:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: currencybucket\n\nfunctions:\n  Crawler:\n    handler: api/crawler.main\n    events:\n      - schedule:\n          rate: rate(1 hour)\n  FetchHistory:\n    handler: api/fetchhistory.main\n    events:\n      - http:\n          path: history/{date}\n          method: get\n          cors: true\n  LinePub:\n    handler: api/linepub.main\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - currencyTable\n              - StreamArn\n    environment:\n      LINE_ACCESSTOKEN: ${ssm:/exchangecrawler/LINE_ACCESSTOKEN}\n      LINE_SECRET: ${ssm:/exchangecrawler/LINE_SECRET}\n  Bot:\n    handler: api/bot.main\n    events:\n      - http:\n          path: bot/\n          method: post\n  AddHistory:\n    handler: api/addhistory.main\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - currencyTable\n              - StreamArn\n    environment:\n      GCP_PROJECT_ID: ${ssm:/exchangecrawler/GCP_PROJECT_ID}\n      GCP_CLIENT_EMAIL: ${ssm:/exchangecrawler/GCP_CLIENT_EMAIL}\n      GCP_PRIVATE_KEY: ${ssm:/exchangecrawler/GCP_PRIVATE_KEY}\n  GetSubscription:\n    handler: api/getsub.main\n    events:\n      - http:\n          path: /{plat}/subscription\n          method: get\n          cors: true\n  UpdateSubscription:\n    handler: api/updatesub.main\n    events:\n      - http:\n          path: /{plat}/subscription\n          method: post\n          cors: true"]},{"id":136727247,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: stiva\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # https://serverless.com/framework/docs/providers/aws/guide/variables/#referencing-cli-options\n  environment:\n    AWS_REGION: ${opt:aws-region}\n    DYNAMO_OPTIONS: ${opt:dynamo-options}\n    S3_OPTIONS: ${opt:s3-options}\n    SES_OPTIONS: ${opt:ses-options}\n    SITE_HEADER: ${opt:site-header}\n\n# you can overwrite defaults here\n#  stage: dev\n#  region: eu-west-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n\n# you can add packaging information here\n#package:\n#  exclude:\n#    - exclude-me.js\n#  artifact: my-service-code.zip\n\nfunctions:\n  usersGet:\n    handler: users.get\n    events:\n      - http:\n          path: /users\n          method: get\n  usersPost:\n    handler: users.post\n    events:\n      - http:\n          path: /users\n          method: post\n  contentsGet:\n    handler: contents.get\n    events:\n      - http:\n          path: /contents\n          method: get\n  contentsPost:\n    handler: contents.post\n    events:\n      - http:\n          path: /contents\n          method: post\n  uploadsPost:\n    handler: uploads.post\n    events:\n      - http:\n          path: /uploads\n          method: post\n  uploadsGet:\n    handler: uploads.get\n    events:\n      - http:\n          path: /uploads\n          method: get\n\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n### https://serverless.com/framework/docs/providers/aws/guide/variables/\n\n\nplugins:\n  - serverless-offline\n"]},{"id":215326431,"files":["org:\napp: form-handler\nservice: form-handler\n\nprovider:\n    name: aws\n    stage: ${opt:stage, 'dev'}\n    # region us-west-1 doesn't support Lambda logging, hence us-west-2\n    region: us-west-2\n    runtime: nodejs10.x\n\nfunctions:\n    handle:\n        handler: index.handler\n        description: \"Form post endpoint.\"\n        timeout: 10\n        environment:\n            MAILGUN_API_KEY:\n            MAILGUN_DOMAIN:\n            SLACK_CHANNEL:\n            SLACK_ENDPOINT:\n            SITE_NAME:\n            ROOT_REDIRECT:\n            ALLOWED_ORIGINS:\n        events:\n            - http:\n                  path: /\n                  method: get\n                  cors: true\n            - http:\n                  path: /\n                  method: post\n                  cors: true\n            - http:\n                  path: /{proxy+}\n                  method: post\n                  cors: true\n\npackage:\n    exclude:\n        - .ddev/**\n        - .idea/**\n","- name: form endpoint returns 200\n  endpoint:\n      function: handle\n  request:\n      headers:\n          Foo: bar\n      body:\n          email:\n      response:\n          status: 200\n"]},{"id":160197874,"files":["service: sls-movies\n\nframeworkVersion: '>=1.0.0 <2.0.0'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: eu-central-1\n  environment: ${file(env.yml)}\n\nplugins:\n  - serverless-webpack\n  - serverless-offline\n\npackage:\n  individually: true\n\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'\n    includeModules: false\n    packager: 'yarn'\n\nfunctions: ${file(functions.yml)}\n"]},{"id":214755700,"files":["# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\n\nservice: rankly-lambda\n# app and org for use with dashboard.serverless.com\n#app: your-app-name\n#org: your-org-name\n\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n\n# you can overwrite defaults here\n  stage: prod\n#  region: us-east-1\n\n# you can add statements to the Lambda function's IAM Role here\n#  iamRoleStatements:\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:ListBucket\"\n#      Resource: { \"Fn::Join\" : [\"\", [\"arn:aws:s3:::\", { \"Ref\" : \"ServerlessDeploymentBucket\" } ] ]  }\n#    - Effect: \"Allow\"\n#      Action:\n#        - \"s3:PutObject\"\n#      Resource:\n#        Fn::Join:\n#          - \"\"\n#          - - \"arn:aws:s3:::\"\n#            - \"Ref\" : \"ServerlessDeploymentBucket\"\n#            - \"/*\"\n\n# you can define service wide environment variables here\n#  environment:\n#    variable1: value1\n\n# you can add packaging information here\n#package:\n#  include:\n#    - include-me.js\n#    - include-me-dir/**\n#  exclude:\n#    - exclude-me.js\n#    - exclude-me-dir/**\n\nfunctions:\n  rank:\n    handler: handler.rank\n    events:\n       - http:\n          path: rank\n          method: get\n#    The following are a few example events you can configure\n#    NOTE: Please make sure to change your handler code to work with those events\n#    Check the event documentation for details\n#    events:\n#      - http:\n#          path: users/create\n#          method: get\n#      - websocket: $connect\n#      - s3: ${env:BUCKET}\n#      - schedule: rate(10 minutes)\n#      - sns: greeter-topic\n#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx\n#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n#      - iot:\n#          sql: \"SELECT * FROM 'some_topic'\"\n#      - cloudwatchEvent:\n#          event:\n#            source:\n#              - \"aws.ec2\"\n#            detail-type:\n#              - \"EC2 Instance State-change Notification\"\n#            detail:\n#              state:\n#                - pending\n#      - cloudwatchLog: '/aws/lambda/hello'\n#      - cognitoUserPool:\n#          pool: MyUserPool\n#          trigger: PreSignUp\n#      - alb:\n#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/\n#          priority: 1\n#          conditions:\n#            host: example.com\n#            path: /hello\n\n#    Define function environment variables here\n#    environment:\n#      variable2: value2\n\n# you can add CloudFormation resource templates here\n#resources:\n#  Resources:\n#    NewResource:\n#      Type: AWS::S3::Bucket\n#      Properties:\n#        BucketName: my-new-bucket\n#  Outputs:\n#     NewOutput:\n#       Description: \"Description for the output\"\n#       Value: \"Some output value\"\n"]},{"id":91324385,"files":["service: robin\n\nframeworkVersion: \">=1.0.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: ap-southeast-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ecr:*\"\n      Resource: \"*\"\n\nfunctions:\n  cleanupImages:\n    handler: handler.cleanupImages\n    environment:\n      REPO_NAMES: ${env:REPO_NAMES}\n      AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}\n      DRY_RUN: ${env:DRY_RUN, 'true'}\n      ECR_REGION: ${env:ECR_REGION, 'us-east-1'}\n      SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}\n    timeout: 45\n    events:\n      - schedule: rate(1 day)\n"]},{"id":159403238,"files":["service: serverless-aws-node-starter\n\npackage:\n  individually: true\n  exclude:\n    - \"*\"\n    - .output/**\n    - docs/**\n    - src/**\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: ${opt:STAGE, 'dev'}\n  region: ${opt:AWS_REGION, 'eu-west-1'}\n  tags:\n    PROJECT: ${self:service}\n\nplugins:\n  - serverless-aws-documentation\n  - serverless-offline\n  - serverless-stack-output\n\ncustom:\n  output:\n    file: .serverless/output.json\n  documentation: ${file(./docs/docs.yml):custom.documentation}\n\nfunctions:\n  hello: ${file(./src/handler.yml):functions.hello}\n"]},{"id":167917747,"files":["service: serverless-example # NOTE: update this with your service name\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs8.10\n  deploymentBucket:\n    name: scup-serverless-deployments-rc\n\n\nplugins:\n  - serverless-ini-env\n  - serverless-offline\n\ncustom:\n  serverless-ini-env:\n    dev: \"./configs/dev.ini\"\n    prod: \"./configs/prod.ini\"\n\nfunctions:\n  bar:\n    events:\n      - http:\n          path: /bar\n          method: get\n    handler: handler_bar.bar\n  foo:\n    events:\n      - http:\n          path: /foo\n          method: get\n    handler: handler_foo.foo\n"]},{"id":203046057,"files":["org: ecee91\napp: awsserverlessnotificationapp\nservice: awsserverlessnotificationapp # NOTE: update this with your service name\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs8.10\r\n  stage: dev\r\n  region: us-east-1\r\n  environment:\r\n    DOMAIN: http://127.0.0.1:8887/ # no need to change this domain for testing it\r\n    VAPID_PUBLIC_KEY: BLpTsaEAy-BGQnkZ1DeFYYNS6EH1gWP-cP49n9NmbWtjkSVMJQjj-wVI0tapfsK7Ju9r0VQz7jpE9kf8BETAdns\r\n    VAPID_PRIVATE_KEY: LtWhacMtRs63fhABUUMLOynMRTKTffIf7oQuRpwChFc\r\n\r\nfunctions:\r\n  vapidPublicKey:\r\n    handler: handler.vapidPublicKey\r\n    events: \r\n      - http:\r\n          path: vapidPublicKey\r\n          method: get\r\n\r\n  sendNotification:\r\n    handler: handler.sendNotification\r\n    events: \r\n      - http:\r\n          path: sendNotification\r\n          method: post\r\n\r\n  registerOrSendToAll:\r\n    handler: handler.registerOrSendToAll\r\n    events: \r\n      - http:\r\n          path: register\r\n          method: post\r\n      - http:\r\n          path: sendToAll\r\n          method: post\r\n\r\n  statics:\r\n    handler: handler.statics\r\n    events: \r\n      - http:\r\n          path: index.html\r\n          method: get\r\n      - http:\r\n          path: index.js\r\n          method: get\r\n      - http:\r\n          path: service-worker.js\r\n          method: get\r\n\r\n"]},{"id":111848923,"files":["service: sgrcoed\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  profile: serverlessSGRCOED\n\nfunctions:\n  getDepartamentos:\n    handler: handler.getDepartamentos\n    events:\n      - http:\n          path: get/getDepartamentos\n          method: get\n          cors: true\n\n  helloWorld:\n    handler: handler.helloWorld\n    events:\n      - http:\n          path: get/helloWorld\n          method: get\n          cors: true"]},{"id":139329211,"files":["service: sqs-lambda-worker-demo\n\n\nplugins:\n  - serverless-webpack # Use serverless-webpack plugin to transpile ES6/ES7\n  - serverless-offline\n  # - serverless-domain-manager\n  # - serverless-plugin-aws-alerts\n\ncustom:\n  stage: ${opt:stage, 'dev'}\n  webpack:\n    webpackConfig: ./webpack.config.js\n    includeModules: true\n    packager: 'yarn'\n    package:\n        individually: true #Webpack compiles and optimizes each function individually,\n        # removing unnecessary imports and reducing code sizes significantly\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n      # QUEUE: ${ssm:/${self:custom.stage}/sqs-lambda/queue-name~true}\n\n# you can overwrite defaults here\n#  stage: dev\n  region: ap-southeast-2\n  iamRoleStatements:\n  - Effect: Allow\n    Action:\n      - sqs:*\n    Resource: arn:aws:sqs:ap-southeast-2:xxx:sqs-lambda-example-queue\n\n\nfunctions:\n  worker:\n    handler: src/worker.default\n    events:\n      - sqs:\n          arn: arn:aws:sqs:ap-southeast-2:xxx:sqs-lambda-example-queue\n          batchSize: 10\n    description: worker fn consuming from sqs\n    reservedConcurrency: 5\n  producer:\n    handler: src/producer.default\n"]},{"id":121290661,"files":["service: consultaplaca\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  memorySize: 128\n  timeout: 6\n  # stage: dev\n  region: us-east-1\n  #profile: devProfile # https://serverless.com/framework/docs/providers/aws/guide/credentials#using-aws-profiles\n  # environment:\n  #   HTTP_PROXY: http://191.7.192.143:8080\n\nfunctions:\n  placa:\n    handler: handler.consultaPlaca\n    events:\n      - http:\n          method: GET\n          path: placa/{placa}\n          cors:\n            origin: \"*\"\n\npackage:\n  exclude:\n    - .git/**\n    - .serverless/**\n    - .DS_Store\n    - placas/**\n    - README.md\n    - \"*.png\"\n    - LICENSE.md\n    - Makefile\n    - package.json\n    - yarn.lock\n\nplugins:\n  - serverless-offline\n"]},{"id":177196260,"files":["service: aws-reaper-lambda\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  region: us-west-2\n\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - \"ec2:DescribeVolumes\"\n        - \"ec2:DeleteVolume\"\n      Resource:\n        - \"*\"\n\nfunctions:\n  ebs-reaper:\n    handler: handler.reaper\n    events:\n      - schedule: rate(1 day)\n"]},{"id":143346303,"files":["service: tf-lambda-datesync\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  daySync:\n    handler: handler.daySync\n    environment:\n      INTERVAL: 7 # How many days you want to list\n      TIMEZONE: 'America/Los_Angeles' # Change it to yours\n      FORM_ID: 'vHQqGp' # Which form you want to update\n      FIELD_ID: 'LUyMJ1pzi7fW' # Which field\n      TF_TOKEN: 'CubiPWHvnC1bVrkcWysjMCTYxdq9ypd2n8pfdBny3H2u' #Typeform API token\n      EXCLUDE_WEEKENDS: true\n    events:\n      - schedule: cron(01 0 * * ? *) #every day at 00:01am\n"]},{"id":127059340,"files":["service: price-tracker-app\n\ncustom:\n  tableName: 'watched-items-table-${self:provider.stage}'\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  stage: dev\n  region: us-east-2\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource:\n        - { \"Fn::GetAtt\": [\"WatchedItemsDynamoDBTable\", \"Arn\" ] }\n  environment:\n    WATCHED_ITEMS_TABLE: ${self:custom.tableName}\n\nfunctions:\n  web-app-api:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n\n  watcher-cron:\n    description: Trigger job to run thru all items watched, update latest price, and send notifications if threshold met\n    handler: watcher.run #execute watcher.js run functions\n    events:\n      - schedule: rate(1440 minutes)\n\n  notifier:\n    description: Consumes DynamoDB table stream and sends notification if latest price is less than threshold\n    handler: notifier.handle\n    memorySize: 128\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt:\n              - WatchedItemsDynamoDBTable\n              - StreamArn\n          batchSize: 1\n\nresources:\n  Resources:\n    WatchedItemsDynamoDBTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: url\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: url\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n        StreamSpecification:\n          StreamViewType: NEW_IMAGE\n        TableName: ${self:custom.tableName}\n"]},{"id":212179739,"files":["service: countyapi\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  memorySize: 512\n  timeout: 30\npackage:\n  include:\n    - ./data/**/**/*\nfunctions:\n  county:\n    handler: handler.county\n    events:\n      - http:\n          path: api/{state}/county/boundary\n          method: get\n"]},{"id":168217283,"files":["service: strava-kudos-lambda\n\nprovider:\n  name: aws\n  stage: prod\n  runtime: nodejs8.10\n  memorySize: 1536\n  timeout: 60\n  region: eu-west-1\n \nfunctions:\n  kudos:\n    handler: kudos.handler\n    environment:\n      DEBUG: 0\n      STRAVA_CLUB_URL: \"https://strava.com/clubs/28521/recent_activity\"\n    events:\n      - schedule:\n          rate: rate(4 hours)\n          enabled: true\n\npackage:\n  artifact: ./package.zip\n  \nplugins:\n  - serverless-hooks-plugin\n\ncustom:\n  hooks:\n    package:initialize:\n      - npm run package\n"]},{"id":211548473,"files":["service: ES6Lambda\napp: es6-lambda-slack\n#frameworkVersion: '>=1.28.0 <2.0.0'\n\n# serverless-webpack configuration\n# Enable auto-packing of external modules\ncustom:\n  # API Endpoint\n  api_url_path: sky-api\n  webpack:\n    webpackConfig: ./webpack.config.js \n    includeModules: true\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: dev\n  region: us-east-1\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: 'ANY {proxy+}'\n      - http:\n          path: ${self:custom.api_url_path}\n          method: any\n          integration: lambda\n          request:\n            template:\n              application/json: '{\n  \"method\": \"$context.httpMethod\",\n  \"body\" : $input.json(''$''),\n  \"headers\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n  },\n  \"queryParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"\n  },\n  \"pathParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\n  }  \n}'\n              application/x-www-form-urlencoded: '{\n  \"method\": \"$context.httpMethod\",\n  \"body\" : $input.json(''$''),\n  \"headers\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n  },\n  \"queryParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\"\n  },\n  \"pathParams\": {\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\n  }  \n}'\n          response:\n            template: $input.json('$')\n          cors: true\n\nplugins:\n  - serverless-offline\n  # Use the serverless-webpack plugin to transpile ES6\n  - serverless-webpack\n\n# serverless optimization\npackage:\n  individually: true\n"]},{"id":205004938,"files":["service: week-cron\ntenant: chiefwizard\napp: cron-database-rollover\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  region: 'us-east-1'\n  frameworkVersion: \">=1.43.0\"\n  timeout: 900\n  environment:\n    DB_HOST: ${file(./secrets.json):DB_HOST}\n    DB_USER: ${file(./secrets.json):DB_USER}\n    DB_PASS: ${file(./secrets.json):DB_PASS}\n    DB_NAME: ${file(./secrets.json):DB_NAME}\nplugins:\n  - serverless-offline\nfunctions:\n  init:\n    handler: handler.init\n    events:\n      - http:\n          path: /init\n          method: get\n  transfer:\n    handler: handler.transfer\n    events:\n      # every Monday at 03:15 AM\n      - schedule: cron(15 3 ? * MON *)\n"]}]